(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc6 () T@U)
(declare-fun Tagclass._System.___hPartialFunc6 () T@U)
(declare-fun Tagclass._System.___hTotalFunc6 () T@U)
(declare-fun Tagclass._System.___hFunc7 () T@U)
(declare-fun Tagclass._System.___hPartialFunc7 () T@U)
(declare-fun Tagclass._System.___hTotalFunc7 () T@U)
(declare-fun Tagclass._System.___hFunc5 () T@U)
(declare-fun Tagclass._System.___hPartialFunc5 () T@U)
(declare-fun Tagclass._System.___hTotalFunc5 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun |##BucketsLib.Bucket.BucketMapWithSeq| () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun Tagclass.BucketsLib.Bucket () T@U)
(declare-fun class.BucketsLib.Bucket () T@U)
(declare-fun class.BucketsLib.__default () T@U)
(declare-fun Tagclass.BucketsLib.__default () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.UI.RangeStart () T@U)
(declare-fun Tagclass.UI.RangeEnd () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun Tagclass.UI.SuccResult () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun class.Byte__Order.__default () T@U)
(declare-fun Tagclass.Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun class.PivotsLib.__default () T@U)
(declare-fun Tagclass.PivotsLib.__default () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun |##UI.RangeStart.SInclusive| () T@U)
(declare-fun |##UI.RangeStart.SExclusive| () T@U)
(declare-fun |##UI.RangeStart.NegativeInf| () T@U)
(declare-fun class.UI.RangeStart () T@U)
(declare-fun |##UI.RangeEnd.EInclusive| () T@U)
(declare-fun |##UI.RangeEnd.EExclusive| () T@U)
(declare-fun |##UI.RangeEnd.PositiveInf| () T@U)
(declare-fun class.UI.RangeEnd () T@U)
(declare-fun |##UI.SuccResult.SuccResult| () T@U)
(declare-fun class.UI.SuccResult () T@U)
(declare-fun |##UI.SuccResultList.SuccResultList| () T@U)
(declare-fun Tagclass.UI.SuccResultList () T@U)
(declare-fun class.UI.SuccResultList () T@U)
(declare-fun |##UI.Op.NoOp| () T@U)
(declare-fun Tagclass.UI.Op () T@U)
(declare-fun |##UI.Op.SyncOp| () T@U)
(declare-fun |##UI.Op.CrashOp| () T@U)
(declare-fun |##UI.Op.PushSyncOp| () T@U)
(declare-fun |##UI.Op.PopSyncOp| () T@U)
(declare-fun |##UI.Op.GetOp| () T@U)
(declare-fun |##UI.Op.PutOp| () T@U)
(declare-fun |##UI.Op.SuccOp| () T@U)
(declare-fun class.UI.Op () T@U)
(declare-fun class.UI.__default () T@U)
(declare-fun Tagclass.UI.__default () T@U)
(declare-fun |##MapSpec.Constants.Constants| () T@U)
(declare-fun Tagclass.MapSpec.Constants () T@U)
(declare-fun class.MapSpec.Constants () T@U)
(declare-fun |##MapSpec.Variables.Variables| () T@U)
(declare-fun Tagclass.MapSpec.Variables () T@U)
(declare-fun class.MapSpec.Variables () T@U)
(declare-fun |##MapSpec.Step.QueryStep| () T@U)
(declare-fun Tagclass.MapSpec.Step () T@U)
(declare-fun |##MapSpec.Step.WriteStep| () T@U)
(declare-fun |##MapSpec.Step.SuccStep| () T@U)
(declare-fun |##MapSpec.Step.StutterStep| () T@U)
(declare-fun class.MapSpec.Step () T@U)
(declare-fun class.MapSpec.__default () T@U)
(declare-fun Tagclass.MapSpec.__default () T@U)
(declare-fun class.Multisets.__default () T@U)
(declare-fun Tagclass.Multisets.__default () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_6 (T@U) T@U)
(declare-fun MapType6Type (T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6TypeInv2 (T@T) T@T)
(declare-fun MapType6TypeInv3 (T@T) T@T)
(declare-fun MapType6TypeInv4 (T@T) T@T)
(declare-fun MapType6TypeInv5 (T@T) T@T)
(declare-fun MapType6TypeInv6 (T@T) T@T)
(declare-fun MapType6TypeInv7 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle6 (T@U T@U T@U) T@U)
(declare-fun Requires6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc7_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_6 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_7 (T@U) T@U)
(declare-fun MapType7Type (T@T T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType7TypeInv0 (T@T) T@T)
(declare-fun MapType7TypeInv1 (T@T) T@T)
(declare-fun MapType7TypeInv2 (T@T) T@T)
(declare-fun MapType7TypeInv3 (T@T) T@T)
(declare-fun MapType7TypeInv4 (T@T) T@T)
(declare-fun MapType7TypeInv5 (T@T) T@T)
(declare-fun MapType7TypeInv6 (T@T) T@T)
(declare-fun MapType7TypeInv7 (T@T) T@T)
(declare-fun MapType7TypeInv8 (T@T) T@T)
(declare-fun MapType7Select (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType7Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply7 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle7 (T@U T@U T@U) T@U)
(declare-fun Requires7 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads7 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_6 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_7 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_7 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_5 (T@U) T@U)
(declare-fun MapType8Type (T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType8TypeInv0 (T@T) T@T)
(declare-fun MapType8TypeInv1 (T@T) T@T)
(declare-fun MapType8TypeInv2 (T@T) T@T)
(declare-fun MapType8TypeInv3 (T@T) T@T)
(declare-fun MapType8TypeInv4 (T@T) T@T)
(declare-fun MapType8TypeInv5 (T@T) T@T)
(declare-fun MapType8TypeInv6 (T@T) T@T)
(declare-fun MapType8Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType8Store (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle5 (T@U T@U T@U) T@U)
(declare-fun Requires5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_5 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun |#BucketsLib.Bucket.BucketMapWithSeq| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.Bucket.BucketMapWithSeq_q (T@U) Bool)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun Tclass.BucketsLib.Bucket () T@U)
(declare-fun BucketsLib.Bucket.b (T@U) T@U)
(declare-fun BucketsLib.Bucket.keys (T@U) T@U)
(declare-fun BucketsLib.Bucket.msgs (T@U) T@U)
(declare-fun |$IsA#BucketsLib.Bucket| (T@U) Bool)
(declare-fun |BucketsLib.Bucket#Equal| (T@U T@U) Bool)
(declare-fun Tclass.BucketsLib.__default () T@U)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun BucketsLib.__default.maximumKey (T@U) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |BucketsLib.__default.maximumKey#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.maximumKey#requires| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun BucketsLib.__default.minimumKey (T@U) T@U)
(declare-fun |BucketsLib.__default.minimumKey#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.minimumKey#requires| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun BucketsLib.__default.BucketMapOfSeq (T@U T@U T@U) T@U)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketMapOfSeq#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketMapOfSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketOfSeq (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketOfSeq#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketOfSeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.BucketMapOfSeq () T@U)
(declare-fun BucketsLib.__default.WFBucketMap (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketMap#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketMap#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun |ValueMessage.__default.IdentityMessage#canCall| () Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.WFMessageSeq (T@U) Bool)
(declare-fun |BucketsLib.__default.WFMessageSeq#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFMessageSeq#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.PreWFBucket (T@U) Bool)
(declare-fun |BucketsLib.__default.PreWFBucket#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.PreWFBucket#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.WFBucket (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucket#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucket#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.BucketWellMarshalled (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketWellMarshalled#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketWellMarshalled#requires| (T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketListWellMarshalled (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListWellMarshalled#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListWellMarshalled#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.BInternal (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BInternal#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BInternal#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.maximum (T@U T@U) T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapRemove1 () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.B (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.B#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.B#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.EmptyBucket () T@U)
(declare-fun StartFuel_BucketsLib._default.B () T@U)
(declare-fun |BucketsLib.__default.EmptyBucket#canCall| () Bool)
(declare-fun |BucketsLib.__default.EmptyBucket#requires| () Bool)
(declare-fun BucketsLib.__default.SingletonBucket (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SingletonBucket#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SingletonBucket#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketDropLast (T@U) T@U)
(declare-fun |BucketsLib.__default.BucketDropLast#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketDropLast#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.WFBucketAt (T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.WFBucketAt#canCall| (T@U T@U Int) Bool)
(declare-fun PivotsLib.__default.WFPivots (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketAt#requires| (T@U T@U Int) Bool)
(declare-fun PivotsLib.__default.Route (T@U T@U) Int)
(declare-fun |PivotsLib.__default.Route#canCall| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.WFBucketList (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketList#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketList#requires| (T@U T@U) Bool)
(declare-fun |PivotsLib.__default.WFPivots#canCall| (T@U) Bool)
(declare-fun BucketsLib.__default.WFBucketListProper (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketListProper#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketListProper#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketGet (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketGet#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketGet#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketListGet (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketListGet#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListGet#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketInsert (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketInsert#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketInsert#requires| (T@U T@U T@U) Bool)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketListInsert (T@U T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketListInsert#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListInsert#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketListItemFlush (T@U T@U T@U Int) T@U)
(declare-fun |BucketsLib.__default.BucketListItemFlush#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.BucketListItemFlush#requires| (T@U T@U T@U Int) Bool)
(declare-fun |lambda#65| (T@U T@U T@U T@U Int T@U T@U T@U) T@U)
(declare-fun |lambda#66| (T@U T@U) T@U)
(declare-fun BucketsLib.__default.BucketListFlushPartial (T@U T@U T@U T@U Int) T@U)
(declare-fun |BucketsLib.__default.BucketListFlushPartial#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.BucketListFlushPartial#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun BucketsLib.__default.BucketListFlush (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketListFlush#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListFlush#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.JoinBucketList (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.JoinBucketList#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.JoinBucketList#requires| (T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.SplitBucketOnPivots (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketOnPivots#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketOnPivots#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#101| (T@U T@U T@U) T@U)
(declare-fun |lambda#102| (T@U) T@U)
(declare-fun |lambda#103| (T@U T@U T@U) T@U)
(declare-fun Lexicographic__Byte__Order.__default.lt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.lte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.ClampToSlot (T@U T@U Int) T@U)
(declare-fun |BucketsLib.__default.ClampToSlot#canCall| (T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.ClampToSlot#requires| (T@U T@U Int) Bool)
(declare-fun |lambda#153| (T@U T@U T@U Int) T@U)
(declare-fun BucketsLib.__default.BucketIntersect (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketIntersect#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketIntersect#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#173| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.BucketComplement (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketComplement#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketComplement#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#193| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.BucketsEquivalentForKey (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketsEquivalentForKey#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketsEquivalentForKey#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketsEquivalent (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketsEquivalent#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketsEquivalent#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.Compose (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.Compose#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.Compose#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#219| (T@U T@U T@U) T@U)
(declare-fun BucketsLib.__default.ComposeSeq (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.ComposeSeq#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.ComposeSeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.Compose () T@U)
(declare-fun BucketsLib.__default.FlushEquivalentParentChild (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.FlushEquivalentParentChild#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.FlushEquivalentParentChild#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.FlushEquivalent (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.FlushEquivalent#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.FlushEquivalent#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.InterpretBucketStack (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.InterpretBucketStack#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.InterpretBucketStack#requires| (T@U T@U T@U) Bool)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun BucketsLib.__default.ClampRange (T@U T@U T@U T@U) T@U)
(declare-fun Tclass.UI.RangeStart () T@U)
(declare-fun Tclass.UI.RangeEnd () T@U)
(declare-fun |BucketsLib.__default.ClampRange#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.ClampRange#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#251| (T@U T@U T@U T@U) T@U)
(declare-fun MapSpec.__default.InRange (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.InRange#canCall| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.ClampStart (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.ClampStart#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.ClampStart#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#271| (T@U T@U T@U) T@U)
(declare-fun MapSpec.__default.LowerBound (T@U T@U) Bool)
(declare-fun |MapSpec.__default.LowerBound#canCall| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.ClampEnd (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.ClampEnd#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.ClampEnd#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#291| (T@U T@U T@U) T@U)
(declare-fun MapSpec.__default.UpperBound (T@U T@U) Bool)
(declare-fun |MapSpec.__default.UpperBound#canCall| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.KeyValueMapOfBucket (T@U T@U) T@U)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun |BucketsLib.__default.KeyValueMapOfBucket#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.KeyValueMapOfBucket#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.DefineDefault () T@U)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |lambda#311| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#312| (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.DefineDefault#canCall| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun BucketsLib.__default.SortedSeqOfKeyValueMap (T@U T@U) T@U)
(declare-fun Tclass.UI.SuccResult () T@U)
(declare-fun |BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.SortedSeqOfKeyValueMap#requires| (T@U T@U) Bool)
(declare-fun |#UI.SuccResult.SuccResult| (T@U T@U) T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun BucketsLib.__default.SplitBucketLeft (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketLeft#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketLeft#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.SplitBucketRight (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketRight#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketRight#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.SplitBucketListLeft (T@U T@U Int T@U) T@U)
(declare-fun StartFuel_PivotsLib._default.CutoffForLeft () T@U)
(declare-fun |BucketsLib.__default.SplitBucketListLeft#canCall| (T@U T@U Int T@U) Bool)
(declare-fun PivotsLib.__default.CutoffForLeft (T@U T@U T@U) Int)
(declare-fun |BucketsLib.__default.SplitBucketListLeft#requires| (T@U T@U Int T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.SplitBucketLeft () T@U)
(declare-fun BucketsLib.__default.SplitBucketListRight (T@U T@U Int T@U) T@U)
(declare-fun StartFuel_PivotsLib._default.CutoffForRight () T@U)
(declare-fun |BucketsLib.__default.SplitBucketListRight#canCall| (T@U T@U Int T@U) Bool)
(declare-fun PivotsLib.__default.CutoffForRight (T@U T@U T@U) Int)
(declare-fun |BucketsLib.__default.SplitBucketListRight#requires| (T@U T@U Int T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.SplitBucketRight () T@U)
(declare-fun BucketsLib.__default.SplitBucketInList (T@U T@U Int T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketInList#canCall| (T@U Int T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketInList#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun BucketsLib.__default.MergeBuckets (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.MergeBuckets#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.MergeBuckets#requires| (T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.MergeBucketsInList (T@U T@U Int) T@U)
(declare-fun |BucketsLib.__default.MergeBucketsInList#canCall| (T@U Int) Bool)
(declare-fun |BucketsLib.__default.MergeBucketsInList#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_BucketsLib._default.MergeBuckets () T@U)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun BucketsLib.__default.emptyList (T@U Int) T@U)
(declare-fun |BucketsLib.__default.emptyList#canCall| (Int) Bool)
(declare-fun |BucketsLib.__default.emptyList#requires| (T@U Int) Bool)
(declare-fun BucketsLib.__default.binarySearch (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.binarySearch#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.binarySearch#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.bucketBinarySearchLookup (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.bucketBinarySearchLookup#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.bucketBinarySearchLookup#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.getMiddleKey (T@U) T@U)
(declare-fun |BucketsLib.__default.getMiddleKey#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.getMiddleKey#requires| (T@U) Bool)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#469| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.KeyType.__default () T@U)
(declare-fun KeyType.__default.MaxLen () Int)
(declare-fun |KeyType.__default.MaxLen#requires| () Bool)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#473| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#477| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MoreFuel_Maps._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove11 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#491| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#505| (T@U T@U T@U) T@U)
(declare-fun |lambda#506| (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#525| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#526| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#529| (T@U T@U) T@U)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun Tclass.Byte__Order.__default () T@U)
(declare-fun Byte__Order.__default.SomeElement () Int)
(declare-fun |Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Byte__Order.__default.lte (T@U Int Int) Bool)
(declare-fun StartFuel_Byte_Order._default.ltedef () T@U)
(declare-fun |Byte__Order.__default.lte#canCall| (Int Int) Bool)
(declare-fun Byte__Order.__default.ltedef (T@U Int Int) Bool)
(declare-fun |Byte__Order.__default.lte#requires| (T@U Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.ltedef0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.ltedef () T@U)
(declare-fun MoreFuel_Byte_Order._default.ltedef1 () T@U)
(declare-fun |Byte__Order.__default.ltedef#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.ltedef#requires| (T@U Int Int) Bool)
(declare-fun Byte__Order.__default.LargestLte (T@U T@U Int) Int)
(declare-fun StartFuel_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Byte_Order._default.lte () T@U)
(declare-fun |Byte__Order.__default.LargestLte#canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Byte__Order.__default.lt (Int Int) Bool)
(declare-fun |Byte__Order.__default.LargestLte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsSorted () T@U)
(declare-fun |Byte__Order.__default.lt#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Byte__Order.__default.LargestLt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.LargestLt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.LargestLt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Byte__Order.__default.IndexOfFirstGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.IndexOfFirstGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.NotMinimum (T@U Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#canCall| (Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#requires| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapPivotedUnion (T@U T@U Int T@U) T@U)
(declare-fun |Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U Int T@U) Bool)
(declare-fun |lambda#533| (T@U Int) T@U)
(declare-fun |lambda#534| (T@U T@U Int) T@U)
(declare-fun Byte__Order.__default.SetSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SetSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SetSuccessor#requires| (T@U Int) Bool)
(declare-fun |$let#4_next| (T@U Int) Int)
(declare-fun |$let#4$canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapSuccessor (T@U T@U Int) T@U)
(declare-fun |Byte__Order.__default.MapSuccessor#canCall| (T@U T@U Int) Bool)
(declare-fun |Byte__Order.__default.MapSuccessor#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SeqSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SeqSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SeqSuccessor#requires| (T@U Int) Bool)
(declare-fun |lambda#545| (T@U T@U) T@U)
(declare-fun Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Byte__Order.__default.minimum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#7_a| (T@U) Int)
(declare-fun |$let#7$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.minimum () T@U)
(declare-fun Byte__Order.__default.maximum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#10_a| (T@U) Int)
(declare-fun |$let#10$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.maximum () T@U)
(declare-fun |Byte__Order.__default.lt#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Min (Int Int) Int)
(declare-fun |Byte__Order.__default.Min#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Min#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Max (Int Int) Int)
(declare-fun |Byte__Order.__default.Max#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Max#requires| (Int Int) Bool)
(declare-fun |Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Lexicographic__Byte__Order.__default.SomeElement () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Lexicographic__Byte__Order.__default.ltedef (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.LargestLte (T@U T@U T@U) Int)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.LargestLt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.NotMinimum (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapPivotedUnion (T@U T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#549| (T@U T@U) T@U)
(declare-fun |lambda#550| (T@U T@U) T@U)
(declare-fun Lexicographic__Byte__Order.__default.SetSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#requires| (T@U T@U) Bool)
(declare-fun |$let#13_next| (T@U T@U) T@U)
(declare-fun |$let#13$canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapSuccessor (T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SeqSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#16_a| (T@U) T@U)
(declare-fun |$let#16$canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#19_a| (T@U) T@U)
(declare-fun |$let#19$canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Min (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Min#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Min#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Max (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Max#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Max#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tclass.PivotsLib.__default () T@U)
(declare-fun |PivotsLib.__default.WFPivots#requires| (T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun PivotsLib.__default.NumBuckets (T@U) Int)
(declare-fun |PivotsLib.__default.NumBuckets#canCall| (T@U) Bool)
(declare-fun |PivotsLib.__default.NumBuckets#requires| (T@U) Bool)
(declare-fun |PivotsLib.__default.Route#requires| (T@U T@U) Bool)
(declare-fun PivotsLib.__default.PivotInsertable (T@U Int T@U) Bool)
(declare-fun |PivotsLib.__default.PivotInsertable#canCall| (T@U Int T@U) Bool)
(declare-fun |PivotsLib.__default.PivotInsertable#requires| (T@U Int T@U) Bool)
(declare-fun |PivotsLib.__default.CutoffForLeft#canCall| (T@U T@U) Bool)
(declare-fun |PivotsLib.__default.CutoffForLeft#requires| (T@U T@U T@U) Bool)
(declare-fun |PivotsLib.__default.CutoffForRight#canCall| (T@U T@U) Bool)
(declare-fun |PivotsLib.__default.CutoffForRight#requires| (T@U T@U T@U) Bool)
(declare-fun PivotsLib.__default.PivotTableBucketKeySet (T@U Int) T@U)
(declare-fun |PivotsLib.__default.PivotTableBucketKeySet#canCall| (T@U Int) Bool)
(declare-fun |PivotsLib.__default.PivotTableBucketKeySet#requires| (T@U Int) Bool)
(declare-fun |lambda#565| (T@U T@U Int) T@U)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestring__to__Message (T@U) T@U)
(declare-fun |ValueMessage.__default.bytestring__to__Message#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestring__to__Message#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessageSeq (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.Message__to__bytestring (T@U) T@U)
(declare-fun |ValueMessage.__default.Message__to__bytestring#canCall| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun |ValueMessage.__default.Message__to__bytestring#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.messageSeq__to__bytestringSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestringSeq__to__MessageSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.DefineDefault#requires| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |#UI.RangeStart.SInclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SInclusive_q (T@U) Bool)
(declare-fun UI.RangeStart.key (T@U) T@U)
(declare-fun |#UI.RangeStart.SExclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeStart.NegativeInf| () T@U)
(declare-fun UI.RangeStart.NegativeInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeStart| (T@U) Bool)
(declare-fun |UI.RangeStart#Equal| (T@U T@U) Bool)
(declare-fun |#UI.RangeEnd.EInclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EInclusive_q (T@U) Bool)
(declare-fun UI.RangeEnd.key (T@U) T@U)
(declare-fun |#UI.RangeEnd.EExclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeEnd.PositiveInf| () T@U)
(declare-fun UI.RangeEnd.PositiveInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeEnd| (T@U) Bool)
(declare-fun |UI.RangeEnd#Equal| (T@U T@U) Bool)
(declare-fun UI.SuccResult.SuccResult_q (T@U) Bool)
(declare-fun UI.SuccResult.key (T@U) T@U)
(declare-fun UI.SuccResult.value (T@U) T@U)
(declare-fun |$IsA#UI.SuccResult| (T@U) Bool)
(declare-fun |UI.SuccResult#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResultList.SuccResultList| (T@U T@U) T@U)
(declare-fun UI.SuccResultList.SuccResultList_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResultList () T@U)
(declare-fun UI.SuccResultList.results (T@U) T@U)
(declare-fun UI.SuccResultList.end (T@U) T@U)
(declare-fun |$IsA#UI.SuccResultList| (T@U) Bool)
(declare-fun |UI.SuccResultList#Equal| (T@U T@U) Bool)
(declare-fun |#UI.Op.NoOp| () T@U)
(declare-fun UI.Op.NoOp_q (T@U) Bool)
(declare-fun Tclass.UI.Op () T@U)
(declare-fun |#UI.Op.SyncOp| () T@U)
(declare-fun UI.Op.SyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.CrashOp| () T@U)
(declare-fun UI.Op.CrashOp_q (T@U) Bool)
(declare-fun |#UI.Op.PushSyncOp| (Int) T@U)
(declare-fun UI.Op.PushSyncOp_q (T@U) Bool)
(declare-fun UI.Op.id (T@U) Int)
(declare-fun |#UI.Op.PopSyncOp| (Int) T@U)
(declare-fun UI.Op.PopSyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetOp| (T@U T@U) T@U)
(declare-fun UI.Op.GetOp_q (T@U) Bool)
(declare-fun UI.Op.key (T@U) T@U)
(declare-fun UI.Op.value (T@U) T@U)
(declare-fun |#UI.Op.PutOp| (T@U T@U) T@U)
(declare-fun UI.Op.PutOp_q (T@U) Bool)
(declare-fun |#UI.Op.SuccOp| (T@U T@U T@U) T@U)
(declare-fun UI.Op.SuccOp_q (T@U) Bool)
(declare-fun UI.Op.start (T@U) T@U)
(declare-fun UI.Op.results (T@U) T@U)
(declare-fun UI.Op.end (T@U) T@U)
(declare-fun |$IsA#UI.Op| (T@U) Bool)
(declare-fun |UI.Op#Equal| (T@U T@U) Bool)
(declare-fun Tclass.UI.__default () T@U)
(declare-fun |#MapSpec.Constants.Constants| () T@U)
(declare-fun MapSpec.Constants.Constants_q (T@U) Bool)
(declare-fun Tclass.MapSpec.Constants () T@U)
(declare-fun |$IsA#MapSpec.Constants| (T@U) Bool)
(declare-fun |MapSpec.Constants#Equal| (T@U T@U) Bool)
(declare-fun |#MapSpec.Variables.Variables| (T@U) T@U)
(declare-fun MapSpec.Variables.Variables_q (T@U) Bool)
(declare-fun Tclass.MapSpec.Variables () T@U)
(declare-fun MapSpec.Variables.view (T@U) T@U)
(declare-fun |$IsA#MapSpec.Variables| (T@U) Bool)
(declare-fun |MapSpec.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#MapSpec.Step.QueryStep| (T@U T@U) T@U)
(declare-fun MapSpec.Step.QueryStep_q (T@U) Bool)
(declare-fun Tclass.MapSpec.Step () T@U)
(declare-fun MapSpec.Step.key (T@U) T@U)
(declare-fun MapSpec.Step.result (T@U) T@U)
(declare-fun |#MapSpec.Step.WriteStep| (T@U T@U) T@U)
(declare-fun MapSpec.Step.WriteStep_q (T@U) Bool)
(declare-fun MapSpec.Step.new__value (T@U) T@U)
(declare-fun |#MapSpec.Step.SuccStep| (T@U T@U T@U) T@U)
(declare-fun MapSpec.Step.SuccStep_q (T@U) Bool)
(declare-fun MapSpec.Step.start (T@U) T@U)
(declare-fun MapSpec.Step.results (T@U) T@U)
(declare-fun MapSpec.Step.end (T@U) T@U)
(declare-fun |#MapSpec.Step.StutterStep| () T@U)
(declare-fun MapSpec.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#MapSpec.Step| (T@U) Bool)
(declare-fun |MapSpec.Step#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MapSpec.__default () T@U)
(declare-fun MapSpec.__default.EmptyValue () T@U)
(declare-fun |MapSpec.__default.EmptyValue#requires| () Bool)
(declare-fun |ValueType.__default.DefaultValue#canCall| () Bool)
(declare-fun MapSpec.__default.ViewComplete (T@U) Bool)
(declare-fun |MapSpec.__default.ViewComplete#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.ViewComplete#requires| (T@U) Bool)
(declare-fun MapSpec.__default.WF (T@U) Bool)
(declare-fun |MapSpec.__default.WF#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.WF#requires| (T@U) Bool)
(declare-fun MapSpec.__default.InDomain (T@U) Bool)
(declare-fun |MapSpec.__default.InDomain#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.InDomain#requires| (T@U) Bool)
(declare-fun MapSpec.__default.EmptyMap () T@U)
(declare-fun |MapSpec.__default.EmptyMap#requires| () Bool)
(declare-fun |lambda#567| (T@U) T@U)
(declare-fun |lambda#568| (T@U) T@U)
(declare-fun |MapSpec.__default.EmptyValue#canCall| () Bool)
(declare-fun MapSpec.__default.Init (T@U T@U) Bool)
(declare-fun |MapSpec.__default.Init#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.Init#requires| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.EmptyMap#canCall| () Bool)
(declare-fun MapSpec.__default.Query (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Query#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Query#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.LowerBound#requires| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.UpperBound#requires| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.InRange#requires| (T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.NonEmptyRange (T@U T@U) Bool)
(declare-fun |MapSpec.__default.NonEmptyRange#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.NonEmptyRange#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.Succ (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Succ#canCall| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Succ#requires| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Write (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Write#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Write#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Stutter (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Stutter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Stutter#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.NextStep (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.NextStep#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.NextStep#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Next (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Next#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Next#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Inv (T@U T@U) Bool)
(declare-fun |MapSpec.__default.Inv#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.Inv#requires| (T@U T@U) Bool)
(declare-fun Tclass.Multisets.__default () T@U)
(declare-fun Multisets.__default.Choose (T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.Choose#canCall| (T@U T@U) Bool)
(declare-fun |Multisets.__default.Choose#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#22_a| (T@U T@U) T@U)
(declare-fun |$let#22$canCall| (T@U T@U) Bool)
(declare-fun Multisets.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.Choose () T@U)
(declare-fun Multisets.__default.Foldable (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Foldable#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Foldable#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.Fold (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.Fold#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Fold#requires| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.FoldSimple (T@U T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.FoldSimple#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.FoldSimple#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#575| (T@U) T@U)
(declare-fun |lambda#571| (T@U) T@U)
(declare-fun |lambda#572| (T@U) T@U)
(declare-fun |lambda#574| (T@U) T@U)
(declare-fun |lambda#573| (Bool) T@U)
(declare-fun StartFuel_Multisets._default.Fold () T@U)
(declare-fun Multisets.__default.IsIdentity (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentity#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentity#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.IsCommutative (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutative#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutative#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.IsAssociative (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociative#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociative#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.IsIdentitySimple (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentitySimple#canCall| (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentitySimple#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.IsIdentity () T@U)
(declare-fun Multisets.__default.IsCommutativeSimple (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutativeSimple#canCall| (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutativeSimple#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.IsCommutative () T@U)
(declare-fun Multisets.__default.IsAssociativeSimple (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociativeSimple#canCall| (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociativeSimple#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.IsAssociative () T@U)
(declare-fun Multisets.__default.AddNat (Int Int) Int)
(declare-fun |Multisets.__default.AddNat#canCall| (Int Int) Bool)
(declare-fun |Multisets.__default.AddNat#requires| (Int Int) Bool)
(declare-fun Multisets.__default.ValueMultisetFn (T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.ValueMultisetFn#canCall| (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.ValueMultisetFn#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#661| (T@U) T@U)
(declare-fun |lambda#662| (T@U T@U) T@U)
(declare-fun Multisets.__default.ValueMultiset (T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.ValueMultiset#canCall| (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.ValueMultiset#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.Apply () T@U)
(declare-fun MapType9Type (T@T T@T) T@T)
(declare-fun MapType9TypeInv0 (T@T) T@T)
(declare-fun MapType9TypeInv1 (T@T) T@T)
(declare-fun MapType9Select (T@U T@U T@U) T@U)
(declare-fun MapType9Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#49| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#50| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#51| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#52| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#53| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#54| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#56| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#57| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#58| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#59| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#62| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#63| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#64| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#73| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#74| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#85| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#86| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#93| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#94| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#95| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#96| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#97| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#98| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#99| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#100| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#131| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#132| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#161| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#162| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#181| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#182| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#201| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#202| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#213| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#214| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#215| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#216| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#217| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#218| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#227| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#228| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#239| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#240| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#241| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#242| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#243| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#244| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#245| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#246| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#247| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#248| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#249| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#250| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#259| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#260| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#279| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#280| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#299| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#300| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#315| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#316| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#319| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#320| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#321| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#322| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#323| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#324| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#325| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#326| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#335| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#336| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#355| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#356| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#367| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#368| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#369| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#370| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#371| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#372| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#373| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#374| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#375| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#376| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#377| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#378| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#379| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#380| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#381| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#382| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#383| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#384| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#385| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#386| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#387| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#388| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#389| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#390| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#391| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#392| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#393| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#394| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#395| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#396| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#397| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#398| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#399| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#400| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#401| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#402| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#403| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#404| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#405| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#406| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#407| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#408| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#409| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#410| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#411| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#412| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#413| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#414| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#415| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#416| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#417| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#418| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#423| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#444| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#447| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#448| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#449| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#450| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#451| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#452| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#457| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#458| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#459| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#460| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#461| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#462| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#463| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#464| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#465| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#466| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#467| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#468| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc6) TyTagType)) (= (type Tagclass._System.___hPartialFunc6) TyTagType)) (= (type Tagclass._System.___hTotalFunc6) TyTagType)) (= (type Tagclass._System.___hFunc7) TyTagType)) (= (type Tagclass._System.___hPartialFunc7) TyTagType)) (= (type Tagclass._System.___hTotalFunc7) TyTagType)) (= (type Tagclass._System.___hFunc5) TyTagType)) (= (type Tagclass._System.___hPartialFunc5) TyTagType)) (= (type Tagclass._System.___hTotalFunc5) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type |##BucketsLib.Bucket.BucketMapWithSeq|) DtCtorIdType)) (= (type Tagclass.KeyType.Key) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type Tagclass.BucketsLib.Bucket) TyTagType)) (= (type class.BucketsLib.Bucket) ClassNameType)) (= (type class.BucketsLib.__default) ClassNameType)) (= (type Tagclass.BucketsLib.__default) TyTagType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type Tagclass.UI.RangeStart) TyTagType)) (= (type Tagclass.UI.RangeEnd) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type Tagclass.UI.SuccResult) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.KeyType.__default) ClassNameType)) (= (type Tagclass.KeyType.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type class.Byte__Order.__default) ClassNameType)) (= (type Tagclass.Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order__Impl.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order__Impl.__default) TyTagType)) (= (type class.PivotsLib.__default) ClassNameType)) (= (type Tagclass.PivotsLib.__default) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type |##UI.RangeStart.SInclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.SExclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.NegativeInf|) DtCtorIdType)) (= (type class.UI.RangeStart) ClassNameType)) (= (type |##UI.RangeEnd.EInclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.EExclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.PositiveInf|) DtCtorIdType)) (= (type class.UI.RangeEnd) ClassNameType)) (= (type |##UI.SuccResult.SuccResult|) DtCtorIdType)) (= (type class.UI.SuccResult) ClassNameType)) (= (type |##UI.SuccResultList.SuccResultList|) DtCtorIdType)) (= (type Tagclass.UI.SuccResultList) TyTagType)) (= (type class.UI.SuccResultList) ClassNameType)) (= (type |##UI.Op.NoOp|) DtCtorIdType)) (= (type Tagclass.UI.Op) TyTagType)) (= (type |##UI.Op.SyncOp|) DtCtorIdType)) (= (type |##UI.Op.CrashOp|) DtCtorIdType)) (= (type |##UI.Op.PushSyncOp|) DtCtorIdType)) (= (type |##UI.Op.PopSyncOp|) DtCtorIdType)) (= (type |##UI.Op.GetOp|) DtCtorIdType)) (= (type |##UI.Op.PutOp|) DtCtorIdType)) (= (type |##UI.Op.SuccOp|) DtCtorIdType)) (= (type class.UI.Op) ClassNameType)) (= (type class.UI.__default) ClassNameType)) (= (type Tagclass.UI.__default) TyTagType)) (= (type |##MapSpec.Constants.Constants|) DtCtorIdType)) (= (type Tagclass.MapSpec.Constants) TyTagType)) (= (type class.MapSpec.Constants) ClassNameType)) (= (type |##MapSpec.Variables.Variables|) DtCtorIdType)) (= (type Tagclass.MapSpec.Variables) TyTagType)) (= (type class.MapSpec.Variables) ClassNameType)) (= (type |##MapSpec.Step.QueryStep|) DtCtorIdType)) (= (type Tagclass.MapSpec.Step) TyTagType)) (= (type |##MapSpec.Step.WriteStep|) DtCtorIdType)) (= (type |##MapSpec.Step.SuccStep|) DtCtorIdType)) (= (type |##MapSpec.Step.StutterStep|) DtCtorIdType)) (= (type class.MapSpec.Step) ClassNameType)) (= (type class.MapSpec.__default) ClassNameType)) (= (type Tagclass.MapSpec.__default) TyTagType)) (= (type class.Multisets.__default) ClassNameType)) (= (type Tagclass.Multisets.__default) TyTagType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc6 Tagclass._System.___hPartialFunc6 Tagclass._System.___hTotalFunc6 Tagclass._System.___hFunc7 Tagclass._System.___hPartialFunc7 Tagclass._System.___hTotalFunc7 Tagclass._System.___hFunc5 Tagclass._System.___hPartialFunc5 Tagclass._System.___hTotalFunc5 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 |##BucketsLib.Bucket.BucketMapWithSeq| Tagclass.KeyType.Key Tagclass.ValueMessage.Message Tagclass.BucketsLib.Bucket class.BucketsLib.Bucket class.BucketsLib.__default Tagclass.BucketsLib.__default Tagclass.Options.Option Tagclass.NativeTypes.byte Tagclass.UI.RangeStart Tagclass.UI.RangeEnd Tagclass.ValueType.Value Tagclass.UI.SuccResult |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default class.Sequences.__default Tagclass.Sequences.__default class.KeyType.__default Tagclass.KeyType.__default class.Maps.__default Tagclass.Maps.__default class.SeqComparison.__default Tagclass.SeqComparison.__default class.NativeArrays.__default Tagclass.NativeArrays.__default class.Byte__Order.__default Tagclass.Byte__Order.__default class.Lexicographic__Byte__Order.__default Tagclass.Lexicographic__Byte__Order.__default class.Lexicographic__Byte__Order__Impl.__default Tagclass.Lexicographic__Byte__Order__Impl.__default class.PivotsLib.__default Tagclass.PivotsLib.__default class.ValueType.__default Tagclass.ValueType.__default class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default Tagclass.ValueMessage.Delta |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message |##UI.RangeStart.SInclusive| |##UI.RangeStart.SExclusive| |##UI.RangeStart.NegativeInf| class.UI.RangeStart |##UI.RangeEnd.EInclusive| |##UI.RangeEnd.EExclusive| |##UI.RangeEnd.PositiveInf| class.UI.RangeEnd |##UI.SuccResult.SuccResult| class.UI.SuccResult |##UI.SuccResultList.SuccResultList| Tagclass.UI.SuccResultList class.UI.SuccResultList |##UI.Op.NoOp| Tagclass.UI.Op |##UI.Op.SyncOp| |##UI.Op.CrashOp| |##UI.Op.PushSyncOp| |##UI.Op.PopSyncOp| |##UI.Op.GetOp| |##UI.Op.PutOp| |##UI.Op.SuccOp| class.UI.Op class.UI.__default Tagclass.UI.__default |##MapSpec.Constants.Constants| Tagclass.MapSpec.Constants class.MapSpec.Constants |##MapSpec.Variables.Variables| Tagclass.MapSpec.Variables class.MapSpec.Variables |##MapSpec.Step.QueryStep| Tagclass.MapSpec.Step |##MapSpec.Step.WriteStep| |##MapSpec.Step.SuccStep| |##MapSpec.Step.StutterStep| class.MapSpec.Step class.MapSpec.__default Tagclass.MapSpec.__default class.Multisets.__default Tagclass.Multisets.__default) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |319| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |320| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |321| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |322| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |323| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |324| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |325| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |326| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |327| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |328| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |329| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |330| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |331| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |332| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |333| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |334| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |335| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |336| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |337| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |338| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |339| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |340| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |341| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |342| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |343| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |344| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |345| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |346| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |347| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |348| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |349| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |350| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |351| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |352| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |353| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |354| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |355| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |356| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |357| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |358| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |359| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |360| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |361| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |362| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |363| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |364| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |365| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |366| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |368| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |370| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |372| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |373| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |375| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |377| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |379| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |381| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |383| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |385| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |387| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |389| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |391| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |392| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |393| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |394| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |395| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |396| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |397| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |398| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |399| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |400| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |401| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |402| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |403| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |404| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |405| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |406| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |407| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |408| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |409| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |410| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |411| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |412| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |413| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |414| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |415| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |416| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |417| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |418| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |419| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |420| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |421| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |422| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |423| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |424| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |425| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |426| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |427| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |428| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |429| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |430| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |435| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |436| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |437| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |438| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |439| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |440| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |441| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |442| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |443| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |444| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |445| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |446| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |447| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |448| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |449| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |450| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |451| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |452| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |453| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |454| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |455| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |456| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |457| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |458| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |459| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |461| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |463| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |464| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |466| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |467| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |468| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |469| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |470| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |471| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |472| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |473| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |474| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |475| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |476| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |477| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |478| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |479| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |480| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |481| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |483| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |485| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |486| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |488| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |489| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |490| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |491| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |492| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |493| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |495| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |496| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |497| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |498| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |499| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |500| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |501| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |502| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |503| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |504| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |505| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |506| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |507| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |508| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |509| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |510| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |511| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |512| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |513| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |514| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |515| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |517| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |519| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |520| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |522| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |523| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |524| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |525| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |526| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |527| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |528| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |529| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |530| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |532| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |533| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |534| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |535| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |536| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |537| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |538| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |539| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |540| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |541| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |542| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |543| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |544| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |545| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |546| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |547| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |548| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |549| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |551| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |552| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |553| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |554| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |556| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |558| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |560| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |561| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |563| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |564| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |565| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |566| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |567| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |568| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |569| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |570| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |571| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |572| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |573| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |574| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |575| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |576| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |577| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |578| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |579| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |580| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |581| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |582| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |583| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |584| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |585| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |586| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |587| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |588| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |589| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |591| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |592| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |593| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |594| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |595| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |596| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |597| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |598| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |599| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |600| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |601| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |602| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |605| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |606| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |608| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |610| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |611| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |612| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |613| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |614| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |615| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |616| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |619| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |620| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |621| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |622| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |623| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |624| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |625| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |626| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |627| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |628| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |629| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |630| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |631| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |632| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |633| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |634| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |635| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |636| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |637| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |638| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |639| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |640| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |641| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |642| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |643| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |644| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |645| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |646| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |647| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |648| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |649| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |650| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |651| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |652| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |653| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |654| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |655| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |656| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |657| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |658| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |659| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |660| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |661| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |662| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |663| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |664| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |665| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |666| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |667| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |668| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |669| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |670| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |671| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |672| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |673| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |674| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |675| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |676| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |677| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |678| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |679| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |680| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |682| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |683| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |684| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |686| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |687| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |688| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |689| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |690| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |691| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |692| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |693| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |694| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |696| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |701| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |702| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |705| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |706| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |707| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |708| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |709| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |710| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |711| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |712| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |713| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |715| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |717| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |718| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |719| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |721| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |722| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |723| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |724| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |726| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |727| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |728| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |729| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |730| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |734| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |736| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |737| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |738| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |739| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |744| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |745| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |746| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |747| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |748| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |750| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@31| T@U) ) (!  (=> (and (= (type |#$T0@@18|) TyType) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |752| :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@32| T@U) ) (!  (=> (and (= (type |#$T0@@19|) TyType) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@33| T@U) ) (!  (=> (and (= (type |#$T0@@20|) TyType) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) |#$R@@33|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@34| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$R@@34|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|)))) :qid |unknown.0:0| :skolemid |755| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@142 T@T) (arg1@@64 T@T) (arg2@@24 T@T) ) (! (= (Ctor (MapType3Type arg0@@142 arg1@@64 arg2@@24)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@143 T@T) (arg1@@65 T@T) (arg2@@25 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@143 arg1@@65 arg2@@25)) arg0@@143) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@143 arg1@@65 arg2@@25)) ))) (forall ((arg0@@144 T@T) (arg1@@66 T@T) (arg2@@26 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@144 arg1@@66 arg2@@26)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@144 arg1@@66 arg2@@26)) ))) (forall ((arg0@@145 T@T) (arg1@@67 T@T) (arg2@@27 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@145 arg1@@67 arg2@@27)) arg2@@27) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@145 arg1@@67 arg2@@27)) ))) (forall ((arg0@@146 T@U) (arg1@@68 T@U) (arg2@@28 T@U) ) (! (let ((aVar2@@0 (MapType3TypeInv2 (type arg0@@146)))) (= (type (MapType3Select arg0@@146 arg1@@68 arg2@@28)) aVar2@@0)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@146 arg1@@68 arg2@@28)) ))) (forall ((arg0@@147 T@U) (arg1@@69 T@U) (arg2@@29 T@U) (arg3@@10 T@U) ) (! (let ((aVar2@@1 (type arg3@@10))) (let ((aVar1@@3 (type arg2@@29))) (let ((aVar0@@1 (type arg1@@69))) (= (type (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@1))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (val@@11 T@U) ) (! (let ((aVar2@@2 (MapType3TypeInv2 (type m@@32)))) (=> (= (type val@@11) aVar2@@2) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 val@@11) x0@@10 x1@@4) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (y0@@7 T@U) (y1@@3 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 val@@12) y0@@7 y1@@3) (MapType3Select m@@33 y0@@7 y1@@3))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (y0@@8 T@U) (y1@@4 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 val@@13) y0@@8 y1@@4) (MapType3Select m@@34 y0@@8 y1@@4))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (y0@@9 T@U) (y1@@5 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 val@@14) y0@@9 y1@@5) (MapType3Select m@@35 y0@@9 y1@@5))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@148 T@U) (arg1@@70 T@U) (arg2@@30 T@U) ) (! (= (type (Handle1 arg0@@148 arg1@@70 arg2@@30)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@148 arg1@@70 arg2@@30)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15) (MapType3Select h@@34 heap@@11 bx0@@15))) :qid |unknown.0:0| :skolemid |756| :pattern ( (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16))) (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) )))
(assert (forall ((arg0@@149 T@U) (arg1@@71 T@U) (arg2@@31 T@U) (arg3@@11 T@U) (arg4@@3 T@U) ) (! (= (type (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53)) (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53))))) :qid |unknown.0:0| :skolemid |758| :pattern ( (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and ($IsBox bx0@@18 t0@@45) ($Is f@@29 (Tclass._System.___hFunc1 t0@@45 t1@@21)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |759| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and ($IsBox bx0@@19 t0@@46) ($Is f@@30 (Tclass._System.___hFunc1 t0@@46 t1@@22)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |761| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads1 t0@@46 t1@@22 h0@@13 f@@30 bx0@@19) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19))) :qid |unknown.0:0| :skolemid |762| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and ($IsBox bx0@@20 t0@@47) ($Is f@@31 (Tclass._System.___hFunc1 t0@@47 t1@@23)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |763| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) (=> (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and ($IsBox bx0@@21 t0@@48) ($Is f@@32 (Tclass._System.___hFunc1 t0@@48 t1@@24)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |765| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) (=> (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21)))) :qid |unknown.0:0| :skolemid |766| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and ($IsBox bx0@@22 t0@@49) ($Is f@@33 (Tclass._System.___hFunc1 t0@@49 t1@@25)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |767| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22))) :qid |unknown.0:0| :skolemid |768| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and ($IsBox bx0@@23 t0@@50) ($Is f@@34 (Tclass._System.___hFunc1 t0@@50 t1@@26)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |769| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply1 t0@@50 t1@@26 h0@@17 f@@34 bx0@@23) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23))) :qid |unknown.0:0| :skolemid |770| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (and ($IsGoodHeap heap@@14) (and ($IsBox bx0@@24 t0@@51) ($Is f@@35 (Tclass._System.___hFunc1 t0@@51 t1@@27))))) (and (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |771| :pattern ( (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) ($IsGoodHeap heap@@14)) :pattern ( (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (and (and ($IsGoodHeap heap@@15) (and ($IsBox bx0@@25 t0@@52) ($Is f@@36 (Tclass._System.___hFunc1 t0@@52 t1@@28)))) (|Set#Equal| (Reads1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) (=> (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25)))) :qid |unknown.0:0| :skolemid |772| :pattern ( (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) ($IsGoodHeap heap@@15)) :pattern ( (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) ) (!  (=> (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29)) (forall ((h@@37 T@U) (bx0@@26 T@U) ) (!  (=> (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (=> (and (and ($IsGoodHeap h@@37) ($IsBox bx0@@26 t0@@53)) (Requires1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ($IsBox (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) ) (!  (=> (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (=> (and (and ($IsGoodHeap h@@38) ($IsBox bx0@@27 t0@@53)) (Requires1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) ($IsBox (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) )) ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))))) :qid |unknown.0:0| :skolemid |774| :pattern ( ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (u0@@1 T@U) (u1@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (and (and ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |775| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t1@@30)) ($IsBox bx@@55 u1@@0)) :qid |unknown.0:0| :skolemid |776| :pattern ( ($IsBox bx@@55 t1@@30)) :pattern ( ($IsBox bx@@55 u1@@0)) )))) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39) (forall ((bx0@@28 T@U) ) (!  (=> (= (type bx0@@28) BoxType) (=> (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) ))) (=> (forall ((bx0@@29 T@U) ) (!  (=> (= (type bx0@@29) BoxType) (=> (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)))) :qid |unknown.0:0| :skolemid |780| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40))) (forall ((bx0@@30 T@U) ) (!  (=> (= (type bx0@@30) BoxType) (=> (and ($IsAllocBox bx0@@30 t0@@56 h@@40) (Requires1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ($IsAllocBox (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30) t1@@32 h@@40))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ))) :qid |unknown.0:0| :skolemid |782| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40)) )))
(assert (forall ((arg0@@150 T@U) (arg1@@72 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@35| T@U) ) (!  (=> (and (= (type |#$T0@@22|) TyType) (= (type |#$R@@35|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |783| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) )))
(assert (forall ((arg0@@151 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@151)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@151)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@36| T@U) ) (!  (=> (and (= (type |#$T0@@23|) TyType) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) |#$T0@@23|)) :qid |unknown.0:0| :skolemid |784| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) )))
(assert (forall ((arg0@@152 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@152)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@152)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@37| T@U) ) (!  (=> (and (= (type |#$T0@@24|) TyType) (= (type |#$R@@37|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) |#$R@@37|)) :qid |unknown.0:0| :skolemid |785| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@38| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$R@@38|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|)))) :qid |unknown.0:0| :skolemid |786| :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@39| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (= (type |#$T0@@26|) TyType) (= (type |#$R@@39|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@3| T@U) ) (!  (=> (and (= (type |x0#0@@3|) BoxType) ($IsBox |x0#0@@3| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@3|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@4| T@U) ) (!  (=> (and (= (type |x0#0@@4|) BoxType) ($IsBox |x0#0@@4| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@4|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))))) :qid |unknown.0:0| :skolemid |788| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))) )))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@40| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$R@@40|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)))) :qid |unknown.0:0| :skolemid |789| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) )))
(assert (forall ((arg0@@153 T@U) (arg1@@73 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@41| T@U) ) (!  (=> (and (= (type |#$T0@@28|) TyType) (= (type |#$R@@41|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) )))
(assert (forall ((arg0@@154 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@154)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@154)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$R@@42| T@U) ) (!  (=> (and (= (type |#$T0@@29|) TyType) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) |#$T0@@29|)) :qid |unknown.0:0| :skolemid |791| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) )))
(assert (forall ((arg0@@155 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@155)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@155)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$R@@43| T@U) ) (!  (=> (and (= (type |#$T0@@30|) TyType) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |792| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@44| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$R@@44|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (= (type |#$T0@@32|) TyType) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@5| T@U) ) (!  (=> (and (= (type |x0#0@@5|) BoxType) ($IsBox |x0#0@@5| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@5|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@5|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@6| T@U) ) (!  (=> (and (= (type |x0#0@@6|) BoxType) ($IsBox |x0#0@@6| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@6|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@6|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))))) :qid |unknown.0:0| :skolemid |795| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@156 T@U) (arg1@@74 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@156 arg1@@74 arg2@@32 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@156 arg1@@74 arg2@@32 arg3@@12)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |797| :pattern ( (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) )))
(assert (forall ((arg0@@157 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@157)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@157)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |798| :pattern ( (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@158 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@158)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@158)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |799| :pattern ( (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@159)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@159)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |800| :pattern ( (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@160)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@160)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) |#$R@@51|)) :qid |unknown.0:0| :skolemid |801| :pattern ( (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|)))) :qid |unknown.0:0| :skolemid |802| :pattern ( ($IsBox bx@@58 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@161 T@T) (arg1@@75 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@161 arg1@@75 arg2@@33 arg3@@13 arg4@@4)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@162 T@T) (arg1@@76 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@162 arg1@@76 arg2@@34 arg3@@14 arg4@@5)) arg0@@162) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@162 arg1@@76 arg2@@34 arg3@@14 arg4@@5)) ))) (forall ((arg0@@163 T@T) (arg1@@77 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@163 arg1@@77 arg2@@35 arg3@@15 arg4@@6)) arg1@@77) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@163 arg1@@77 arg2@@35 arg3@@15 arg4@@6)) ))) (forall ((arg0@@164 T@T) (arg1@@78 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@164 arg1@@78 arg2@@36 arg3@@16 arg4@@7)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@164 arg1@@78 arg2@@36 arg3@@16 arg4@@7)) ))) (forall ((arg0@@165 T@T) (arg1@@79 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@165 arg1@@79 arg2@@37 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@165 arg1@@79 arg2@@37 arg3@@17 arg4@@8)) ))) (forall ((arg0@@166 T@T) (arg1@@80 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@166 arg1@@80 arg2@@38 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@166 arg1@@80 arg2@@38 arg3@@18 arg4@@9)) ))) (forall ((arg0@@167 T@U) (arg1@@81 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@167)))) (= (type (MapType4Select arg0@@167 arg1@@81 arg2@@39 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@167 arg1@@81 arg2@@39 arg3@@19 arg4@@10)) ))) (forall ((arg0@@168 T@U) (arg1@@82 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@40))) (let ((aVar0@@2 (type arg1@@82))) (= (type (MapType4Store arg0@@168 arg1@@82 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@168 arg1@@82 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@36)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@36 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@37 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@37 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@38 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@38 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@39 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@40 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@41 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@169 T@U) (arg1@@83 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@169 arg1@@83 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@169 arg1@@83 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@170 T@U) (arg1@@84 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@170 arg1@@84 arg2@@42)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@170 arg1@@84 arg2@@42)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (t2@@14 T@U) (t3 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) (bx1@@15 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2) (MapType4Select h@@41 heap@@16 bx0@@31 bx1@@15 bx2))) :qid |unknown.0:0| :skolemid |803| :pattern ( (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) (bx1@@16 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32 bx1@@16 bx2@@0))) (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) :qid |unknown.0:0| :skolemid |804| :pattern ( (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) )))
(assert (forall ((arg0@@171 T@U) (arg1@@85 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@171 arg1@@85 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@171 arg1@@85 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@59) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@59)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@59))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@59)) (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@59))))) :qid |unknown.0:0| :skolemid |805| :pattern ( (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@59)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) (bx1@@18 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@34 t0@@60) ($IsBox bx1@@18 t1@@36)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@60 t1@@36 t2@@17 t3@@2)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |806| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2))) :qid |unknown.0:0| :skolemid |807| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) (bx1@@19 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@35 t0@@61) ($IsBox bx1@@19 t1@@37)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@61 t1@@37 t2@@18 t3@@3)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |808| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h0@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3))) :qid |unknown.0:0| :skolemid |809| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) (bx1@@20 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@36 t0@@62) ($IsBox bx1@@20 t1@@38)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@62 t1@@38 t2@@19 t3@@4)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |810| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)))) :qid |unknown.0:0| :skolemid |811| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) (bx1@@21 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@37 t0@@63) ($IsBox bx1@@21 t1@@39)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@63 t1@@39 t2@@20 t3@@5)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |812| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)))) :qid |unknown.0:0| :skolemid |813| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) (bx1@@22 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@38 t0@@64) ($IsBox bx1@@22 t1@@40)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@21 t3@@6)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |814| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6))) :qid |unknown.0:0| :skolemid |815| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) (bx1@@23 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@39 t0@@65) ($IsBox bx1@@23 t1@@41)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@22 t3@@7)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h0@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) (bx1@@24 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and ($IsBox bx0@@40 t0@@66) ($IsBox bx1@@24 t1@@42)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@23 t3@@8))))) (and (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |818| :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) (bx1@@25 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@41 t0@@67) ($IsBox bx1@@25 t1@@43)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9)))) :qid |unknown.0:0| :skolemid |819| :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10)) (forall ((h@@44 T@U) (bx0@@42 T@U) (bx1@@26 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@44) (and (and ($IsBox bx0@@42 t0@@68) ($IsBox bx1@@26 t1@@44)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10) t3@@10)) :qid |DafnyPre.521:12| :skolemid |820| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) (bx1@@27 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (and (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (and (and ($IsGoodHeap h@@45) (and (and ($IsBox bx0@@43 t0@@68) ($IsBox bx1@@27 t1@@44)) ($IsBox bx2@@11 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11) t3@@10)) :qid |DafnyPre.521:12| :skolemid |820| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11)) )) ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) (forall ((bx@@60 T@U) ) (!  (=> (and (= (type bx@@60) BoxType) ($IsBox bx@@60 u0@@2)) ($IsBox bx@@60 t0@@69)) :qid |unknown.0:0| :skolemid |822| :pattern ( ($IsBox bx@@60 u0@@2)) :pattern ( ($IsBox bx@@60 t0@@69)) ))) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u1@@1)) ($IsBox bx@@61 t1@@45)) :qid |unknown.0:0| :skolemid |823| :pattern ( ($IsBox bx@@61 u1@@1)) :pattern ( ($IsBox bx@@61 t1@@45)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u2@@0)) ($IsBox bx@@62 t2@@26)) :qid |unknown.0:0| :skolemid |824| :pattern ( ($IsBox bx@@62 u2@@0)) :pattern ( ($IsBox bx@@62 t2@@26)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 t3@@11)) ($IsBox bx@@63 u3)) :qid |unknown.0:0| :skolemid |825| :pattern ( ($IsBox bx@@63 t3@@11)) :pattern ( ($IsBox bx@@63 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |826| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46) (forall ((bx0@@44 T@U) (bx1@@28 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@44) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (and ($IsBox bx1@@28 t1@@46) ($IsAllocBox bx1@@28 t1@@46 h@@46))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |827| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |828| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) ))) (=> (forall ((bx0@@45 T@U) (bx1@@29 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (= (type bx0@@45) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (=> (and (and (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (and ($IsBox bx1@@29 t1@@46) ($IsAllocBox bx1@@29 t1@@46 h@@46))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |827| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |828| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)))) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47))) (forall ((bx0@@46 T@U) (bx1@@30 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (= (type bx0@@46) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@46 t0@@71 h@@47) ($IsAllocBox bx1@@30 t1@@47 h@@47)) ($IsAllocBox bx2@@14 t2@@28 h@@47)) (Requires3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ($IsAllocBox (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14) t3@@13 h@@47))) :qid |unknown.0:0| :skolemid |830| :pattern ( (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47)) )))
(assert (forall ((arg0@@172 T@U) (arg1@@86 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@172 arg1@@86 arg2@@44 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@172 arg1@@86 arg2@@44 arg3@@23)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |832| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) )))
(assert (forall ((arg0@@173 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@173)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@173)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) |#$T0@@41|)) :qid |unknown.0:0| :skolemid |833| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@174 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@174)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@174)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) |#$T1@@26|)) :qid |unknown.0:0| :skolemid |834| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@175 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@175)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@175)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |835| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@176 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@176)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@176)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) |#$R@@57|)) :qid |unknown.0:0| :skolemid |836| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@64 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@64) BoxType)) ($IsBox bx@@64 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@64)) bx@@64) ($Is ($Unbox HandleTypeType bx@@64) (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|)))) :qid |unknown.0:0| :skolemid |837| :pattern ( ($IsBox bx@@64 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@7| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@7| |#$T0@@46|) ($IsBox |x1#0@@3| |#$T1@@30|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@7| |x1#0@@3| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |838| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@8| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@8| |#$T0@@46|) ($IsBox |x1#0@@4| |#$T1@@30|)) ($IsBox |x2#0@@0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@8| |x1#0@@4| |x2#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |838| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))))) :qid |unknown.0:0| :skolemid |839| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14)))) :qid |unknown.0:0| :skolemid |840| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14)) )))
(assert (forall ((arg0@@177 T@U) (arg1@@87 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@177 arg1@@87 arg2@@45 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@177 arg1@@87 arg2@@45 arg3@@24)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |841| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@178)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@178)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) |#$T0@@49|)) :qid |unknown.0:0| :skolemid |842| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) )))
(assert (forall ((arg0@@179 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@179)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@179)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) |#$T1@@34|)) :qid |unknown.0:0| :skolemid |843| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@180 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@180)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@180)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |844| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@181 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@181)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@181)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |846| :pattern ( ($IsBox bx@@65 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@9| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@9| |#$T0@@54|) ($IsBox |x1#0@@5| |#$T1@@38|)) ($IsBox |x2#0@@1| |#$T2@@19|))) (Requires3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@9| |x1#0@@5| |x2#0@@1|)) :qid |unknown.0:0| :skolemid |847| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@10| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@10| |#$T0@@54|) ($IsBox |x1#0@@6| |#$T1@@38|)) ($IsBox |x2#0@@2| |#$T2@@19|))) (Requires3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@10| |x1#0@@6| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |847| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))))) :qid |unknown.0:0| :skolemid |848| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15)))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15)) )))
(assert (forall ((arg0@@182 T@U) (arg1@@88 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@182 arg1@@88 arg2@@46 arg3@@25 arg4@@14)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@182 arg1@@88 arg2@@46 arg3@@25 arg4@@14)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |850| :pattern ( (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) )))
(assert (forall ((arg0@@183 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@183)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@183)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|)) |#$T0@@57|)) :qid |unknown.0:0| :skolemid |851| :pattern ( (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@184)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@184)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|)) |#$T1@@42|)) :qid |unknown.0:0| :skolemid |852| :pattern ( (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@185)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@185)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |853| :pattern ( (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@186)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@186)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|)) )))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@187)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@187)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|)) |#$R@@74|)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|#$R@@75| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@75|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|)))) :qid |unknown.0:0| :skolemid |856| :pattern ( ($IsBox bx@@66 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@188 T@T) (arg1@@89 T@T) (arg2@@47 T@T) (arg3@@26 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@188 arg1@@89 arg2@@47 arg3@@26 arg4@@15 arg5@@4)) 24) :qid |ctor:MapType5Type| )) (forall ((arg0@@189 T@T) (arg1@@90 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@189 arg1@@90 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) arg0@@189) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@189 arg1@@90 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) ))) (forall ((arg0@@190 T@T) (arg1@@91 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@190 arg1@@91 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) arg1@@91) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@190 arg1@@91 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) ))) (forall ((arg0@@191 T@T) (arg1@@92 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@191 arg1@@92 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) arg2@@50) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@191 arg1@@92 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) ))) (forall ((arg0@@192 T@T) (arg1@@93 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@192 arg1@@93 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) arg3@@30) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@192 arg1@@93 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) ))) (forall ((arg0@@193 T@T) (arg1@@94 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@193 arg1@@94 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@193 arg1@@94 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) ))) (forall ((arg0@@194 T@T) (arg1@@95 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@194 arg1@@95 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) arg5@@10) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@194 arg1@@95 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) ))) (forall ((arg0@@195 T@U) (arg1@@96 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@195)))) (= (type (MapType5Select arg0@@195 arg1@@96 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) aVar5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@195 arg1@@96 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) ))) (forall ((arg0@@196 T@U) (arg1@@97 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3))) (let ((aVar4@@2 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@23))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@97))) (= (type (MapType5Store arg0@@196 arg1@@97 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0)))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@196 arg1@@97 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) ))) (forall ((m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@42)))) (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@42 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@43 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@43 y0@@15 y1@@11 y2@@8 y3@@4 y4))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@44 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@44 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@45 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@45 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@46 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@46 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@46 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@47 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@47 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@47 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@48 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@48 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@48 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@197 T@U) (arg1@@98 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@197 arg1@@98 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@197 arg1@@98 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) ))) (forall ((arg0@@198 T@U) (arg1@@99 T@U) (arg2@@57 T@U) ) (! (= (type (Handle4 arg0@@198 arg1@@99 arg2@@57)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@198 arg1@@99 arg2@@57)) ))))
(assert (forall ((t0@@72 T@U) (t1@@48 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@21 T@U) (h@@48 T@U) (r@@26 T@U) (rd@@11 T@U) (bx0@@47 T@U) (bx1@@31 T@U) (bx2@@15 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@48) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@48) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@47) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3) (MapType5Select h@@48 heap@@21 bx0@@47 bx1@@31 bx2@@15 bx3))) :qid |unknown.0:0| :skolemid |857| :pattern ( (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3)) )))
(assert (forall ((t0@@73 T@U) (t1@@49 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@22 T@U) (h@@49 T@U) (r@@27 T@U) (rd@@12 T@U) (bx0@@48 T@U) (bx1@@32 T@U) (bx2@@16 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@49) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@49) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@48) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@27 heap@@22 bx0@@48 bx1@@32 bx2@@16 bx3@@0))) (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) )))
(assert (forall ((arg0@@199 T@U) (arg1@@100 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@199 arg1@@100 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@199 arg1@@100 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@74 T@U) (t1@@50 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@23 T@U) (h@@50 T@U) (r@@28 T@U) (rd@@13 T@U) (bx0@@49 T@U) (bx1@@33 T@U) (bx2@@17 T@U) (bx3@@1 T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@50) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@50) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@49) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@67) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@67)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@67))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@67)) (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@67))))) :qid |unknown.0:0| :skolemid |859| :pattern ( (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@67)) )))
(assert (forall ((t0@@75 T@U) (t1@@51 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@50 T@U) (bx1@@34 T@U) (bx2@@18 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@51) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@50 t0@@75) ($IsBox bx1@@34 t1@@51)) ($IsBox bx2@@18 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2)))) (forall ((o@@78 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@24 o@@78) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@78) fld@@23)))) :qid |unknown.0:0| :skolemid |860| :no-pattern (type o@@78) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2))) :qid |unknown.0:0| :skolemid |861| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2)) )))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@51 T@U) (bx1@@35 T@U) (bx2@@19 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@51 t0@@76) ($IsBox bx1@@35 t1@@52)) ($IsBox bx2@@19 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3)))) (forall ((o@@79 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@25 o@@79) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@79) fld@@24)))) :qid |unknown.0:0| :skolemid |862| :no-pattern (type o@@79) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3))) :qid |unknown.0:0| :skolemid |863| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@52 T@U) (bx1@@36 T@U) (bx2@@20 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@52) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@52 t0@@77) ($IsBox bx1@@36 t1@@53)) ($IsBox bx2@@20 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4)))) (forall ((o@@80 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@26 o@@80) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@80) fld@@25)))) :qid |unknown.0:0| :skolemid |864| :no-pattern (type o@@80) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)))) :qid |unknown.0:0| :skolemid |865| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@53 T@U) (bx1@@37 T@U) (bx2@@21 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@53) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@53 t0@@78) ($IsBox bx1@@37 t1@@54)) ($IsBox bx2@@21 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5)))) (forall ((o@@81 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@27 o@@81) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@81) fld@@26)))) :qid |unknown.0:0| :skolemid |866| :no-pattern (type o@@81) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)))) :qid |unknown.0:0| :skolemid |867| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@54 T@U) (bx1@@38 T@U) (bx2@@22 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@54) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@54 t0@@79) ($IsBox bx1@@38 t1@@55)) ($IsBox bx2@@22 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6)))) (forall ((o@@82 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@28 o@@82) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@82) fld@@27)))) :qid |unknown.0:0| :skolemid |868| :no-pattern (type o@@82) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@55 T@U) (bx1@@39 T@U) (bx2@@23 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@55) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@55 t0@@80) ($IsBox bx1@@39 t1@@56)) ($IsBox bx2@@23 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7)))) (forall ((o@@83 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@29 o@@83) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@83) fld@@28)))) :qid |unknown.0:0| :skolemid |870| :no-pattern (type o@@83) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7))) :qid |unknown.0:0| :skolemid |871| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@56 T@U) (bx1@@40 T@U) (bx2@@24 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@56) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and ($IsBox bx0@@56 t0@@81) ($IsBox bx1@@40 t1@@57)) ($IsBox bx2@@24 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8))))) (and (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |872| :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) ($IsGoodHeap heap@@24)) :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@57 T@U) (bx1@@41 T@U) (bx2@@25 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@57) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@57 t0@@82) ($IsBox bx1@@41 t1@@58)) ($IsBox bx2@@25 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (|Set#Empty| BoxType)))) (and (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)))) :qid |unknown.0:0| :skolemid |873| :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) ($IsGoodHeap heap@@25)) :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@83 T@U) (t1@@59 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@59) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (and (=> ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10)) (forall ((h@@51 T@U) (bx0@@58 T@U) (bx1@@42 T@U) (bx2@@26 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@51) (MapType0Type refType MapType1Type)) (= (type bx0@@58) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@51) (and (and (and ($IsBox bx0@@58 t0@@83) ($IsBox bx1@@42 t1@@59)) ($IsBox bx2@@26 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10) t4@@10)) :qid |DafnyPre.521:12| :skolemid |874| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10)) ))) (=> (forall ((h@@52 T@U) (bx0@@59 T@U) (bx1@@43 T@U) (bx2@@27 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@52) (MapType0Type refType MapType1Type)) (= (type bx0@@59) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@11) BoxType)) (and (and ($IsGoodHeap h@@52) (and (and (and ($IsBox bx0@@59 t0@@83) ($IsBox bx1@@43 t1@@59)) ($IsBox bx2@@27 t2@@40)) ($IsBox bx3@@11 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11) t4@@10)) :qid |DafnyPre.521:12| :skolemid |874| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11)) )) ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))))) :qid |unknown.0:0| :skolemid |875| :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@84 T@U) (t1@@60 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@84) TyType)) (= (type t1@@60) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) (forall ((bx@@68 T@U) ) (!  (=> (and (= (type bx@@68) BoxType) ($IsBox bx@@68 u0@@3)) ($IsBox bx@@68 t0@@84)) :qid |unknown.0:0| :skolemid |876| :pattern ( ($IsBox bx@@68 u0@@3)) :pattern ( ($IsBox bx@@68 t0@@84)) ))) (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 u1@@2)) ($IsBox bx@@69 t1@@60)) :qid |unknown.0:0| :skolemid |877| :pattern ( ($IsBox bx@@69 u1@@2)) :pattern ( ($IsBox bx@@69 t1@@60)) ))) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u2@@1)) ($IsBox bx@@70 t2@@41)) :qid |unknown.0:0| :skolemid |878| :pattern ( ($IsBox bx@@70 u2@@1)) :pattern ( ($IsBox bx@@70 t2@@41)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u3@@0)) ($IsBox bx@@71 t3@@26)) :qid |unknown.0:0| :skolemid |879| :pattern ( ($IsBox bx@@71 u3@@0)) :pattern ( ($IsBox bx@@71 t3@@26)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 t4@@11)) ($IsBox bx@@72 u4)) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@72 t4@@11)) :pattern ( ($IsBox bx@@72 u4)) )))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) :qid |unknown.0:0| :skolemid |881| :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) )))
(assert (forall ((f@@63 T@U) (t0@@85 T@U) (t1@@61 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@85) TyType)) (= (type t1@@61) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@53)) (and (=> ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53) (forall ((bx0@@60 T@U) (bx1@@44 T@U) (bx2@@28 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@60) BoxType) (= (type bx1@@44) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@60 t0@@85) ($IsAllocBox bx0@@60 t0@@85 h@@53)) (and ($IsBox bx1@@44 t1@@61) ($IsAllocBox bx1@@44 t1@@61 h@@53))) (and ($IsBox bx2@@28 t2@@42) ($IsAllocBox bx2@@28 t2@@42 h@@53))) (and ($IsBox bx3@@12 t3@@27) ($IsAllocBox bx3@@12 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |882| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |883| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) ))) (=> (forall ((bx0@@61 T@U) (bx1@@45 T@U) (bx2@@29 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (= (type bx0@@61) BoxType) (= (type bx1@@45) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@13) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@61 t0@@85) ($IsAllocBox bx0@@61 t0@@85 h@@53)) (and ($IsBox bx1@@45 t1@@61) ($IsAllocBox bx1@@45 t1@@61 h@@53))) (and ($IsBox bx2@@29 t2@@42) ($IsAllocBox bx2@@29 t2@@42 h@@53))) (and ($IsBox bx3@@13 t3@@27) ($IsAllocBox bx3@@13 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) (forall ((r@@30 T@U) ) (!  (=> (= (type r@@30) refType) (=> (and (not (= r@@30 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@30) alloc)))) :qid |unknown.0:0| :skolemid |882| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30))) )))) :qid |unknown.0:0| :skolemid |883| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) )) ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)))) :qid |unknown.0:0| :skolemid |884| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)) )))
(assert (forall ((f@@64 T@U) (t0@@86 T@U) (t1@@62 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@86) TyType)) (= (type t1@@62) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@54) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54))) (forall ((bx0@@62 T@U) (bx1@@46 T@U) (bx2@@30 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (= (type bx0@@62) BoxType) (= (type bx1@@46) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@14) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@62 t0@@86 h@@54) ($IsAllocBox bx1@@46 t1@@62 h@@54)) ($IsAllocBox bx2@@30 t2@@43 h@@54)) ($IsAllocBox bx3@@14 t3@@28 h@@54)) (Requires4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ($IsAllocBox (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14) t4@@13 h@@54))) :qid |unknown.0:0| :skolemid |885| :pattern ( (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ))) :qid |unknown.0:0| :skolemid |886| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54)) )))
(assert (forall ((arg0@@200 T@U) (arg1@@101 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@200 arg1@@101 arg2@@59 arg3@@37 arg4@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@200 arg1@@101 arg2@@59 arg3@@37 arg4@@26)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) Tagclass._System.___hPartialFunc4)) :qid |unknown.0:0| :skolemid |887| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@201)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@201)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|)) |#$T0@@64|)) :qid |unknown.0:0| :skolemid |888| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|)) )))
(assert (forall ((arg0@@202 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@202)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@202)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|)) |#$T1@@49|)) :qid |unknown.0:0| :skolemid |889| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|)) )))
(assert (forall ((arg0@@203 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@203)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@203)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$T3@@9| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|)) |#$T2@@31|)) :qid |unknown.0:0| :skolemid |890| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|)) )))
(assert (forall ((arg0@@204 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@204)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@204)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$T3@@10| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |891| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|)) )))
(assert (forall ((arg0@@205 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@205)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@205)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|)) |#$R@@81|)) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$R@@82| T@U) (bx@@73 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@82|) TyType)) (= (type bx@@73) BoxType)) ($IsBox bx@@73 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))) (and (= ($Box ($Unbox HandleTypeType bx@@73)) bx@@73) ($Is ($Unbox HandleTypeType bx@@73) (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|)))) :qid |unknown.0:0| :skolemid |893| :pattern ( ($IsBox bx@@73 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$R@@83| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (and (=> ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@11| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@11| |#$T0@@70|) ($IsBox |x1#0@@7| |#$T1@@54|)) ($IsBox |x2#0@@3| |#$T2@@35|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@11| |x1#0@@7| |x2#0@@3| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |894| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) )))) (=> (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@12| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@12| |#$T0@@70|) ($IsBox |x1#0@@8| |#$T1@@54|)) ($IsBox |x2#0@@4| |#$T2@@35|)) ($IsBox |x3#0@@0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@12| |x1#0@@8| |x2#0@@4| |x3#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |894| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))) ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|))))) :qid |unknown.0:0| :skolemid |895| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|))) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$R@@84| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16)) (=> ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16)))) :qid |unknown.0:0| :skolemid |896| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16)) )))
(assert (forall ((arg0@@206 T@U) (arg1@@102 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@206 arg1@@102 arg2@@60 arg3@@38 arg4@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@206 arg1@@102 arg2@@60 arg3@@38 arg4@@27)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@85|) TyType)) (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) Tagclass._System.___hTotalFunc4)) :qid |unknown.0:0| :skolemid |897| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) )))
(assert (forall ((arg0@@207 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@207)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@207)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|)) |#$T0@@73|)) :qid |unknown.0:0| :skolemid |898| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|)) )))
(assert (forall ((arg0@@208 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@208)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@208)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|)) |#$T1@@58|)) :qid |unknown.0:0| :skolemid |899| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|)) )))
(assert (forall ((arg0@@209 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@209)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@209)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|)) |#$T2@@40|)) :qid |unknown.0:0| :skolemid |900| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|)) )))
(assert (forall ((arg0@@210 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@210)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@210)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |901| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|)) )))
(assert (forall ((arg0@@211 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@211)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@211)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |902| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$R@@91| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |903| :pattern ( ($IsBox bx@@74 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (and (=> ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) (|x3#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@1|) BoxType)) (and (and (and ($IsBox |x0#0@@13| |#$T0@@79|) ($IsBox |x1#0@@9| |#$T1@@63|)) ($IsBox |x2#0@@5| |#$T2@@44|)) ($IsBox |x3#0@@1| |#$T3@@22|))) (Requires4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@13| |x1#0@@9| |x2#0@@5| |x3#0@@1|)) :qid |unknown.0:0| :skolemid |904| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@1|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) )))) (=> (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) (|x3#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@2|) BoxType)) (and (and (and ($IsBox |x0#0@@14| |#$T0@@79|) ($IsBox |x1#0@@10| |#$T1@@63|)) ($IsBox |x2#0@@6| |#$T2@@44|)) ($IsBox |x3#0@@2| |#$T3@@22|))) (Requires4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@14| |x1#0@@10| |x2#0@@6| |x3#0@@2|)) :qid |unknown.0:0| :skolemid |904| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@2|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) ))) ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|))))) :qid |unknown.0:0| :skolemid |905| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17)) (=> ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17)))) :qid |unknown.0:0| :skolemid |906| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17)) )))
(assert  (and (forall ((arg0@@212 T@U) (arg1@@103 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@212 arg1@@103)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@212 arg1@@103)) )) (forall ((arg0@@213 T@U) ) (! (= (type (DatatypeCtorId arg0@@213)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@213)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |907| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |908| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |909| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |910| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@214 T@U) (arg1@@104 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@214 arg1@@104)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@214 arg1@@104)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) ) (!  (=> (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@81| |#$T1@@65|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.Tuple2 |#$T0@@81| |#$T1@@65|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@215)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@215)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) ) (!  (=> (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@82| |#$T1@@66|)) |#$T0@@82|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.Tuple2 |#$T0@@82| |#$T1@@66|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@216)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@216)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) ) (!  (=> (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@83| |#$T1@@67|)) |#$T1@@67|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.Tuple2 |#$T0@@83| |#$T1@@67|)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.Tuple2 |#$T0@@84| |#$T1@@68|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@75)) bx@@75) ($Is ($Unbox DatatypeTypeType bx@@75) (Tclass._System.Tuple2 |#$T0@@84| |#$T1@@68|)))) :qid |unknown.0:0| :skolemid |914| :pattern ( ($IsBox bx@@75 (Tclass._System.Tuple2 |#$T0@@84| |#$T1@@68|))) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@85| |#$T1@@69|)) (and ($IsBox |a#2#0#0| |#$T0@@85|) ($IsBox |a#2#1#0| |#$T1@@69|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@85|) ($IsBox |a#2#1#0| |#$T1@@69|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@85| |#$T1@@69|))))) :qid |unknown.0:0| :skolemid |915| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@85| |#$T1@@69|))) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@18)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@86| |#$T1@@70|) $h@@18) (and ($IsAllocBox |a#3#0#0| |#$T0@@86| $h@@18) ($IsAllocBox |a#3#1#0| |#$T1@@70| $h@@18))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@86| $h@@18) ($IsAllocBox |a#3#1#0| |#$T1@@70| $h@@18)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@86| |#$T1@@70|) $h@@18)))) :qid |unknown.0:0| :skolemid |916| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@86| |#$T1@@70|) $h@@18)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@87| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@87|) TyType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@19) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@71| T@U) ) (!  (and (= (type |#$T1@@71|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@87| |#$T1@@71|) $h@@19)) :qid |unknown.0:0| :skolemid |917| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@87| |#$T1@@71|) $h@@19)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@87| $h@@19)) :qid |unknown.0:0| :skolemid |918| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@87| $h@@19)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@72| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@72|) TyType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@20) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@88| T@U) ) (!  (and (= (type |#$T0@@88|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@88| |#$T1@@72|) $h@@20)) :qid |unknown.0:0| :skolemid |919| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@88| |#$T1@@72|) $h@@20)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@72| $h@@20)) :qid |unknown.0:0| :skolemid |920| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@72| $h@@20)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |921| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |922| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |923| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |924| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |925| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |926| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@89| |#$T1@@73|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |927| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@89| |#$T1@@73|))) )))
(assert (forall ((a@@112 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@112) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@112 b@@61) (and (= (_System.Tuple2._0 a@@112) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@112) (_System.Tuple2._1 b@@61)))) (=> (and (= (_System.Tuple2._0 a@@112) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@112) (_System.Tuple2._1 b@@61))) (|_System.Tuple2#Equal| a@@112 b@@61)))) :qid |unknown.0:0| :skolemid |928| :pattern ( (|_System.Tuple2#Equal| a@@112 b@@61)) )))
(assert (forall ((a@@113 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@113) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@113 b@@62) (= a@@113 b@@62)) (=> (= a@@113 b@@62) (|_System.Tuple2#Equal| a@@113 b@@62)))) :qid |unknown.0:0| :skolemid |929| :pattern ( (|_System.Tuple2#Equal| a@@113 b@@62)) )))
(assert (forall ((arg0@@217 T@U) (arg1@@105 T@U) (arg2@@61 T@U) (arg3@@39 T@U) (arg4@@28 T@U) (arg5@@15 T@U) (arg6@@6 T@U) ) (! (= (type (Tclass._System.___hFunc6 arg0@@217 arg1@@105 arg2@@61 arg3@@39 arg4@@28 arg5@@15 arg6@@6)) TyType) :qid |funType:Tclass._System.___hFunc6| :pattern ( (Tclass._System.___hFunc6 arg0@@217 arg1@@105 arg2@@61 arg3@@39 arg4@@28 arg5@@15 arg6@@6)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@46| T@U) (|#$T3@@24| T@U) (|#$T4| T@U) (|#$T5| T@U) (|#$R@@94| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$T4|) TyType)) (= (type |#$T5|) TyType)) (= (type |#$R@@94|) TyType)) (= (Tag (Tclass._System.___hFunc6 |#$T0@@90| |#$T1@@74| |#$T2@@46| |#$T3@@24| |#$T4| |#$T5| |#$R@@94|)) Tagclass._System.___hFunc6)) :qid |unknown.0:0| :skolemid |930| :pattern ( (Tclass._System.___hFunc6 |#$T0@@90| |#$T1@@74| |#$T2@@46| |#$T3@@24| |#$T4| |#$T5| |#$R@@94|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hFunc6_0 arg0@@218)) TyType) :qid |funType:Tclass._System.___hFunc6_0| :pattern ( (Tclass._System.___hFunc6_0 arg0@@218)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@47| T@U) (|#$T3@@25| T@U) (|#$T4@@0| T@U) (|#$T5@@0| T@U) (|#$R@@95| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$T4@@0|) TyType)) (= (type |#$T5@@0|) TyType)) (= (type |#$R@@95|) TyType)) (= (Tclass._System.___hFunc6_0 (Tclass._System.___hFunc6 |#$T0@@91| |#$T1@@75| |#$T2@@47| |#$T3@@25| |#$T4@@0| |#$T5@@0| |#$R@@95|)) |#$T0@@91|)) :qid |unknown.0:0| :skolemid |931| :pattern ( (Tclass._System.___hFunc6 |#$T0@@91| |#$T1@@75| |#$T2@@47| |#$T3@@25| |#$T4@@0| |#$T5@@0| |#$R@@95|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hFunc6_1 arg0@@219)) TyType) :qid |funType:Tclass._System.___hFunc6_1| :pattern ( (Tclass._System.___hFunc6_1 arg0@@219)) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@48| T@U) (|#$T3@@26| T@U) (|#$T4@@1| T@U) (|#$T5@@1| T@U) (|#$R@@96| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$T4@@1|) TyType)) (= (type |#$T5@@1|) TyType)) (= (type |#$R@@96|) TyType)) (= (Tclass._System.___hFunc6_1 (Tclass._System.___hFunc6 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$T4@@1| |#$T5@@1| |#$R@@96|)) |#$T1@@76|)) :qid |unknown.0:0| :skolemid |932| :pattern ( (Tclass._System.___hFunc6 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$T4@@1| |#$T5@@1| |#$R@@96|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hFunc6_2 arg0@@220)) TyType) :qid |funType:Tclass._System.___hFunc6_2| :pattern ( (Tclass._System.___hFunc6_2 arg0@@220)) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@49| T@U) (|#$T3@@27| T@U) (|#$T4@@2| T@U) (|#$T5@@2| T@U) (|#$R@@97| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$T4@@2|) TyType)) (= (type |#$T5@@2|) TyType)) (= (type |#$R@@97|) TyType)) (= (Tclass._System.___hFunc6_2 (Tclass._System.___hFunc6 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$T4@@2| |#$T5@@2| |#$R@@97|)) |#$T2@@49|)) :qid |unknown.0:0| :skolemid |933| :pattern ( (Tclass._System.___hFunc6 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$T4@@2| |#$T5@@2| |#$R@@97|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hFunc6_3 arg0@@221)) TyType) :qid |funType:Tclass._System.___hFunc6_3| :pattern ( (Tclass._System.___hFunc6_3 arg0@@221)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@50| T@U) (|#$T3@@28| T@U) (|#$T4@@3| T@U) (|#$T5@@3| T@U) (|#$R@@98| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$T4@@3|) TyType)) (= (type |#$T5@@3|) TyType)) (= (type |#$R@@98|) TyType)) (= (Tclass._System.___hFunc6_3 (Tclass._System.___hFunc6 |#$T0@@94| |#$T1@@78| |#$T2@@50| |#$T3@@28| |#$T4@@3| |#$T5@@3| |#$R@@98|)) |#$T3@@28|)) :qid |unknown.0:0| :skolemid |934| :pattern ( (Tclass._System.___hFunc6 |#$T0@@94| |#$T1@@78| |#$T2@@50| |#$T3@@28| |#$T4@@3| |#$T5@@3| |#$R@@98|)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hFunc6_4 arg0@@222)) TyType) :qid |funType:Tclass._System.___hFunc6_4| :pattern ( (Tclass._System.___hFunc6_4 arg0@@222)) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@51| T@U) (|#$T3@@29| T@U) (|#$T4@@4| T@U) (|#$T5@@4| T@U) (|#$R@@99| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$T4@@4|) TyType)) (= (type |#$T5@@4|) TyType)) (= (type |#$R@@99|) TyType)) (= (Tclass._System.___hFunc6_4 (Tclass._System.___hFunc6 |#$T0@@95| |#$T1@@79| |#$T2@@51| |#$T3@@29| |#$T4@@4| |#$T5@@4| |#$R@@99|)) |#$T4@@4|)) :qid |unknown.0:0| :skolemid |935| :pattern ( (Tclass._System.___hFunc6 |#$T0@@95| |#$T1@@79| |#$T2@@51| |#$T3@@29| |#$T4@@4| |#$T5@@4| |#$R@@99|)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (Tclass._System.___hFunc6_5 arg0@@223)) TyType) :qid |funType:Tclass._System.___hFunc6_5| :pattern ( (Tclass._System.___hFunc6_5 arg0@@223)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@52| T@U) (|#$T3@@30| T@U) (|#$T4@@5| T@U) (|#$T5@@5| T@U) (|#$R@@100| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$T4@@5|) TyType)) (= (type |#$T5@@5|) TyType)) (= (type |#$R@@100|) TyType)) (= (Tclass._System.___hFunc6_5 (Tclass._System.___hFunc6 |#$T0@@96| |#$T1@@80| |#$T2@@52| |#$T3@@30| |#$T4@@5| |#$T5@@5| |#$R@@100|)) |#$T5@@5|)) :qid |unknown.0:0| :skolemid |936| :pattern ( (Tclass._System.___hFunc6 |#$T0@@96| |#$T1@@80| |#$T2@@52| |#$T3@@30| |#$T4@@5| |#$T5@@5| |#$R@@100|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hFunc6_6 arg0@@224)) TyType) :qid |funType:Tclass._System.___hFunc6_6| :pattern ( (Tclass._System.___hFunc6_6 arg0@@224)) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$T2@@53| T@U) (|#$T3@@31| T@U) (|#$T4@@6| T@U) (|#$T5@@6| T@U) (|#$R@@101| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$T3@@31|) TyType)) (= (type |#$T4@@6|) TyType)) (= (type |#$T5@@6|) TyType)) (= (type |#$R@@101|) TyType)) (= (Tclass._System.___hFunc6_6 (Tclass._System.___hFunc6 |#$T0@@97| |#$T1@@81| |#$T2@@53| |#$T3@@31| |#$T4@@6| |#$T5@@6| |#$R@@101|)) |#$R@@101|)) :qid |unknown.0:0| :skolemid |937| :pattern ( (Tclass._System.___hFunc6 |#$T0@@97| |#$T1@@81| |#$T2@@53| |#$T3@@31| |#$T4@@6| |#$T5@@6| |#$R@@101|)) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$T2@@54| T@U) (|#$T3@@32| T@U) (|#$T4@@7| T@U) (|#$T5@@7| T@U) (|#$R@@102| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$T3@@32|) TyType)) (= (type |#$T4@@7|) TyType)) (= (type |#$T5@@7|) TyType)) (= (type |#$R@@102|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hFunc6 |#$T0@@98| |#$T1@@82| |#$T2@@54| |#$T3@@32| |#$T4@@7| |#$T5@@7| |#$R@@102|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hFunc6 |#$T0@@98| |#$T1@@82| |#$T2@@54| |#$T3@@32| |#$T4@@7| |#$T5@@7| |#$R@@102|)))) :qid |unknown.0:0| :skolemid |938| :pattern ( ($IsBox bx@@76 (Tclass._System.___hFunc6 |#$T0@@98| |#$T1@@82| |#$T2@@54| |#$T3@@32| |#$T4@@7| |#$T5@@7| |#$R@@102|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@225 T@T) (arg1@@106 T@T) (arg2@@62 T@T) (arg3@@40 T@T) (arg4@@29 T@T) (arg5@@16 T@T) (arg6@@7 T@T) (arg7@@3 T@T) ) (! (= (Ctor (MapType6Type arg0@@225 arg1@@106 arg2@@62 arg3@@40 arg4@@29 arg5@@16 arg6@@7 arg7@@3)) 25) :qid |ctor:MapType6Type| )) (forall ((arg0@@226 T@T) (arg1@@107 T@T) (arg2@@63 T@T) (arg3@@41 T@T) (arg4@@30 T@T) (arg5@@17 T@T) (arg6@@8 T@T) (arg7@@4 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@226 arg1@@107 arg2@@63 arg3@@41 arg4@@30 arg5@@17 arg6@@8 arg7@@4)) arg0@@226) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@226 arg1@@107 arg2@@63 arg3@@41 arg4@@30 arg5@@17 arg6@@8 arg7@@4)) ))) (forall ((arg0@@227 T@T) (arg1@@108 T@T) (arg2@@64 T@T) (arg3@@42 T@T) (arg4@@31 T@T) (arg5@@18 T@T) (arg6@@9 T@T) (arg7@@5 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@227 arg1@@108 arg2@@64 arg3@@42 arg4@@31 arg5@@18 arg6@@9 arg7@@5)) arg1@@108) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@227 arg1@@108 arg2@@64 arg3@@42 arg4@@31 arg5@@18 arg6@@9 arg7@@5)) ))) (forall ((arg0@@228 T@T) (arg1@@109 T@T) (arg2@@65 T@T) (arg3@@43 T@T) (arg4@@32 T@T) (arg5@@19 T@T) (arg6@@10 T@T) (arg7@@6 T@T) ) (! (= (MapType6TypeInv2 (MapType6Type arg0@@228 arg1@@109 arg2@@65 arg3@@43 arg4@@32 arg5@@19 arg6@@10 arg7@@6)) arg2@@65) :qid |typeInv:MapType6TypeInv2| :pattern ( (MapType6Type arg0@@228 arg1@@109 arg2@@65 arg3@@43 arg4@@32 arg5@@19 arg6@@10 arg7@@6)) ))) (forall ((arg0@@229 T@T) (arg1@@110 T@T) (arg2@@66 T@T) (arg3@@44 T@T) (arg4@@33 T@T) (arg5@@20 T@T) (arg6@@11 T@T) (arg7@@7 T@T) ) (! (= (MapType6TypeInv3 (MapType6Type arg0@@229 arg1@@110 arg2@@66 arg3@@44 arg4@@33 arg5@@20 arg6@@11 arg7@@7)) arg3@@44) :qid |typeInv:MapType6TypeInv3| :pattern ( (MapType6Type arg0@@229 arg1@@110 arg2@@66 arg3@@44 arg4@@33 arg5@@20 arg6@@11 arg7@@7)) ))) (forall ((arg0@@230 T@T) (arg1@@111 T@T) (arg2@@67 T@T) (arg3@@45 T@T) (arg4@@34 T@T) (arg5@@21 T@T) (arg6@@12 T@T) (arg7@@8 T@T) ) (! (= (MapType6TypeInv4 (MapType6Type arg0@@230 arg1@@111 arg2@@67 arg3@@45 arg4@@34 arg5@@21 arg6@@12 arg7@@8)) arg4@@34) :qid |typeInv:MapType6TypeInv4| :pattern ( (MapType6Type arg0@@230 arg1@@111 arg2@@67 arg3@@45 arg4@@34 arg5@@21 arg6@@12 arg7@@8)) ))) (forall ((arg0@@231 T@T) (arg1@@112 T@T) (arg2@@68 T@T) (arg3@@46 T@T) (arg4@@35 T@T) (arg5@@22 T@T) (arg6@@13 T@T) (arg7@@9 T@T) ) (! (= (MapType6TypeInv5 (MapType6Type arg0@@231 arg1@@112 arg2@@68 arg3@@46 arg4@@35 arg5@@22 arg6@@13 arg7@@9)) arg5@@22) :qid |typeInv:MapType6TypeInv5| :pattern ( (MapType6Type arg0@@231 arg1@@112 arg2@@68 arg3@@46 arg4@@35 arg5@@22 arg6@@13 arg7@@9)) ))) (forall ((arg0@@232 T@T) (arg1@@113 T@T) (arg2@@69 T@T) (arg3@@47 T@T) (arg4@@36 T@T) (arg5@@23 T@T) (arg6@@14 T@T) (arg7@@10 T@T) ) (! (= (MapType6TypeInv6 (MapType6Type arg0@@232 arg1@@113 arg2@@69 arg3@@47 arg4@@36 arg5@@23 arg6@@14 arg7@@10)) arg6@@14) :qid |typeInv:MapType6TypeInv6| :pattern ( (MapType6Type arg0@@232 arg1@@113 arg2@@69 arg3@@47 arg4@@36 arg5@@23 arg6@@14 arg7@@10)) ))) (forall ((arg0@@233 T@T) (arg1@@114 T@T) (arg2@@70 T@T) (arg3@@48 T@T) (arg4@@37 T@T) (arg5@@24 T@T) (arg6@@15 T@T) (arg7@@11 T@T) ) (! (= (MapType6TypeInv7 (MapType6Type arg0@@233 arg1@@114 arg2@@70 arg3@@48 arg4@@37 arg5@@24 arg6@@15 arg7@@11)) arg7@@11) :qid |typeInv:MapType6TypeInv7| :pattern ( (MapType6Type arg0@@233 arg1@@114 arg2@@70 arg3@@48 arg4@@37 arg5@@24 arg6@@15 arg7@@11)) ))) (forall ((arg0@@234 T@U) (arg1@@115 T@U) (arg2@@71 T@U) (arg3@@49 T@U) (arg4@@38 T@U) (arg5@@25 T@U) (arg6@@16 T@U) (arg7@@12 T@U) ) (! (let ((aVar7 (MapType6TypeInv7 (type arg0@@234)))) (= (type (MapType6Select arg0@@234 arg1@@115 arg2@@71 arg3@@49 arg4@@38 arg5@@25 arg6@@16 arg7@@12)) aVar7)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@234 arg1@@115 arg2@@71 arg3@@49 arg4@@38 arg5@@25 arg6@@16 arg7@@12)) ))) (forall ((arg0@@235 T@U) (arg1@@116 T@U) (arg2@@72 T@U) (arg3@@50 T@U) (arg4@@39 T@U) (arg5@@26 T@U) (arg6@@17 T@U) (arg7@@13 T@U) (arg8@@3 T@U) ) (! (let ((aVar7@@0 (type arg8@@3))) (let ((aVar6 (type arg7@@13))) (let ((aVar5@@2 (type arg6@@17))) (let ((aVar4@@3 (type arg5@@26))) (let ((aVar3@@4 (type arg4@@39))) (let ((aVar2@@5 (type arg3@@50))) (let ((aVar1@@6 (type arg2@@72))) (let ((aVar0@@4 (type arg1@@116))) (= (type (MapType6Store arg0@@235 arg1@@116 arg2@@72 arg3@@50 arg4@@39 arg5@@26 arg6@@17 arg7@@13 arg8@@3)) (MapType6Type aVar0@@4 aVar1@@6 aVar2@@5 aVar3@@4 aVar4@@3 aVar5@@2 aVar6 aVar7@@0)))))))))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@235 arg1@@116 arg2@@72 arg3@@50 arg4@@39 arg5@@26 arg6@@17 arg7@@13 arg8@@3)) ))) (forall ((m@@49 T@U) (x0@@27 T@U) (x1@@21 T@U) (x2@@17 T@U) (x3@@12 T@U) (x4@@6 T@U) (x5 T@U) (x6 T@U) (val@@28 T@U) ) (! (let ((aVar7@@1 (MapType6TypeInv7 (type m@@49)))) (=> (= (type val@@28) aVar7@@1) (= (MapType6Select (MapType6Store m@@49 x0@@27 x1@@21 x2@@17 x3@@12 x4@@6 x5 x6 val@@28) x0@@27 x1@@21 x2@@17 x3@@12 x4@@6 x5 x6) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (and (and (and (and (and (forall ((val@@29 T@U) (m@@50 T@U) (x0@@28 T@U) (x1@@22 T@U) (x2@@18 T@U) (x3@@13 T@U) (x4@@7 T@U) (x5@@0 T@U) (x6@@0 T@U) (y0@@21 T@U) (y1@@17 T@U) (y2@@14 T@U) (y3@@10 T@U) (y4@@5 T@U) (y5 T@U) (y6 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@50 x0@@28 x1@@22 x2@@18 x3@@13 x4@@7 x5@@0 x6@@0 val@@29) y0@@21 y1@@17 y2@@14 y3@@10 y4@@5 y5 y6) (MapType6Select m@@50 y0@@21 y1@@17 y2@@14 y3@@10 y4@@5 y5 y6))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@51 T@U) (x0@@29 T@U) (x1@@23 T@U) (x2@@19 T@U) (x3@@14 T@U) (x4@@8 T@U) (x5@@1 T@U) (x6@@1 T@U) (y0@@22 T@U) (y1@@18 T@U) (y2@@15 T@U) (y3@@11 T@U) (y4@@6 T@U) (y5@@0 T@U) (y6@@0 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@51 x0@@29 x1@@23 x2@@19 x3@@14 x4@@8 x5@@1 x6@@1 val@@30) y0@@22 y1@@18 y2@@15 y3@@11 y4@@6 y5@@0 y6@@0) (MapType6Select m@@51 y0@@22 y1@@18 y2@@15 y3@@11 y4@@6 y5@@0 y6@@0))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@52 T@U) (x0@@30 T@U) (x1@@24 T@U) (x2@@20 T@U) (x3@@15 T@U) (x4@@9 T@U) (x5@@2 T@U) (x6@@2 T@U) (y0@@23 T@U) (y1@@19 T@U) (y2@@16 T@U) (y3@@12 T@U) (y4@@7 T@U) (y5@@1 T@U) (y6@@1 T@U) ) (!  (or (= x2@@20 y2@@16) (= (MapType6Select (MapType6Store m@@52 x0@@30 x1@@24 x2@@20 x3@@15 x4@@9 x5@@2 x6@@2 val@@31) y0@@23 y1@@19 y2@@16 y3@@12 y4@@7 y5@@1 y6@@1) (MapType6Select m@@52 y0@@23 y1@@19 y2@@16 y3@@12 y4@@7 y5@@1 y6@@1))) :qid |mapAx1:MapType6Select:2| :weight 0 ))) (forall ((val@@32 T@U) (m@@53 T@U) (x0@@31 T@U) (x1@@25 T@U) (x2@@21 T@U) (x3@@16 T@U) (x4@@10 T@U) (x5@@3 T@U) (x6@@3 T@U) (y0@@24 T@U) (y1@@20 T@U) (y2@@17 T@U) (y3@@13 T@U) (y4@@8 T@U) (y5@@2 T@U) (y6@@2 T@U) ) (!  (or (= x3@@16 y3@@13) (= (MapType6Select (MapType6Store m@@53 x0@@31 x1@@25 x2@@21 x3@@16 x4@@10 x5@@3 x6@@3 val@@32) y0@@24 y1@@20 y2@@17 y3@@13 y4@@8 y5@@2 y6@@2) (MapType6Select m@@53 y0@@24 y1@@20 y2@@17 y3@@13 y4@@8 y5@@2 y6@@2))) :qid |mapAx1:MapType6Select:3| :weight 0 ))) (forall ((val@@33 T@U) (m@@54 T@U) (x0@@32 T@U) (x1@@26 T@U) (x2@@22 T@U) (x3@@17 T@U) (x4@@11 T@U) (x5@@4 T@U) (x6@@4 T@U) (y0@@25 T@U) (y1@@21 T@U) (y2@@18 T@U) (y3@@14 T@U) (y4@@9 T@U) (y5@@3 T@U) (y6@@3 T@U) ) (!  (or (= x4@@11 y4@@9) (= (MapType6Select (MapType6Store m@@54 x0@@32 x1@@26 x2@@22 x3@@17 x4@@11 x5@@4 x6@@4 val@@33) y0@@25 y1@@21 y2@@18 y3@@14 y4@@9 y5@@3 y6@@3) (MapType6Select m@@54 y0@@25 y1@@21 y2@@18 y3@@14 y4@@9 y5@@3 y6@@3))) :qid |mapAx1:MapType6Select:4| :weight 0 ))) (forall ((val@@34 T@U) (m@@55 T@U) (x0@@33 T@U) (x1@@27 T@U) (x2@@23 T@U) (x3@@18 T@U) (x4@@12 T@U) (x5@@5 T@U) (x6@@5 T@U) (y0@@26 T@U) (y1@@22 T@U) (y2@@19 T@U) (y3@@15 T@U) (y4@@10 T@U) (y5@@4 T@U) (y6@@4 T@U) ) (!  (or (= x5@@5 y5@@4) (= (MapType6Select (MapType6Store m@@55 x0@@33 x1@@27 x2@@23 x3@@18 x4@@12 x5@@5 x6@@5 val@@34) y0@@26 y1@@22 y2@@19 y3@@15 y4@@10 y5@@4 y6@@4) (MapType6Select m@@55 y0@@26 y1@@22 y2@@19 y3@@15 y4@@10 y5@@4 y6@@4))) :qid |mapAx1:MapType6Select:5| :weight 0 ))) (forall ((val@@35 T@U) (m@@56 T@U) (x0@@34 T@U) (x1@@28 T@U) (x2@@24 T@U) (x3@@19 T@U) (x4@@13 T@U) (x5@@6 T@U) (x6@@6 T@U) (y0@@27 T@U) (y1@@23 T@U) (y2@@20 T@U) (y3@@16 T@U) (y4@@11 T@U) (y5@@5 T@U) (y6@@5 T@U) ) (!  (or (= x6@@6 y6@@5) (= (MapType6Select (MapType6Store m@@56 x0@@34 x1@@28 x2@@24 x3@@19 x4@@13 x5@@6 x6@@6 val@@35) y0@@27 y1@@23 y2@@20 y3@@16 y4@@11 y5@@5 y6@@5) (MapType6Select m@@56 y0@@27 y1@@23 y2@@20 y3@@16 y4@@11 y5@@5 y6@@5))) :qid |mapAx1:MapType6Select:6| :weight 0 ))) (forall ((val@@36 T@U) (m@@57 T@U) (x0@@35 T@U) (x1@@29 T@U) (x2@@25 T@U) (x3@@20 T@U) (x4@@14 T@U) (x5@@7 T@U) (x6@@7 T@U) (y0@@28 T@U) (y1@@24 T@U) (y2@@21 T@U) (y3@@17 T@U) (y4@@12 T@U) (y5@@6 T@U) (y6@@6 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@57 x0@@35 x1@@29 x2@@25 x3@@20 x4@@14 x5@@7 x6@@7 val@@36) y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6@@6) (MapType6Select m@@57 y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6@@6))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@236 T@U) (arg1@@117 T@U) (arg2@@73 T@U) (arg3@@51 T@U) (arg4@@40 T@U) (arg5@@27 T@U) (arg6@@18 T@U) (arg7@@14 T@U) (arg8@@4 T@U) (arg9@@1 T@U) (arg10@@1 T@U) (arg11 T@U) (arg12 T@U) (arg13 T@U) (arg14 T@U) ) (! (= (type (Apply6 arg0@@236 arg1@@117 arg2@@73 arg3@@51 arg4@@40 arg5@@27 arg6@@18 arg7@@14 arg8@@4 arg9@@1 arg10@@1 arg11 arg12 arg13 arg14)) BoxType) :qid |funType:Apply6| :pattern ( (Apply6 arg0@@236 arg1@@117 arg2@@73 arg3@@51 arg4@@40 arg5@@27 arg6@@18 arg7@@14 arg8@@4 arg9@@1 arg10@@1 arg11 arg12 arg13 arg14)) ))) (forall ((arg0@@237 T@U) (arg1@@118 T@U) (arg2@@74 T@U) ) (! (= (type (Handle6 arg0@@237 arg1@@118 arg2@@74)) HandleTypeType) :qid |funType:Handle6| :pattern ( (Handle6 arg0@@237 arg1@@118 arg2@@74)) ))))
(assert (forall ((t0@@87 T@U) (t1@@63 T@U) (t2@@44 T@U) (t3@@29 T@U) (t4@@14 T@U) (t5 T@U) (t6 T@U) (heap@@26 T@U) (h@@55 T@U) (r@@31 T@U) (rd@@14 T@U) (bx0@@63 T@U) (bx1@@47 T@U) (bx2@@31 T@U) (bx3@@15 T@U) (bx4 T@U) (bx5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@87) TyType) (= (type t1@@63) TyType)) (= (type t2@@44) TyType)) (= (type t3@@29) TyType)) (= (type t4@@14) TyType)) (= (type t5) TyType)) (= (type t6) TyType)) (= (type heap@@26) (MapType0Type refType MapType1Type))) (= (type h@@55) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@31) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@14) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@63) BoxType)) (= (type bx1@@47) BoxType)) (= (type bx2@@31) BoxType)) (= (type bx3@@15) BoxType)) (= (type bx4) BoxType)) (= (type bx5) BoxType)) (= (Apply6 t0@@87 t1@@63 t2@@44 t3@@29 t4@@14 t5 t6 heap@@26 (Handle6 h@@55 r@@31 rd@@14) bx0@@63 bx1@@47 bx2@@31 bx3@@15 bx4 bx5) (MapType6Select h@@55 heap@@26 bx0@@63 bx1@@47 bx2@@31 bx3@@15 bx4 bx5))) :qid |unknown.0:0| :skolemid |939| :pattern ( (Apply6 t0@@87 t1@@63 t2@@44 t3@@29 t4@@14 t5 t6 heap@@26 (Handle6 h@@55 r@@31 rd@@14) bx0@@63 bx1@@47 bx2@@31 bx3@@15 bx4 bx5)) )))
(assert (forall ((t0@@88 T@U) (t1@@64 T@U) (t2@@45 T@U) (t3@@30 T@U) (t4@@15 T@U) (t5@@0 T@U) (t6@@0 T@U) (heap@@27 T@U) (h@@56 T@U) (r@@32 T@U) (rd@@15 T@U) (bx0@@64 T@U) (bx1@@48 T@U) (bx2@@32 T@U) (bx3@@16 T@U) (bx4@@0 T@U) (bx5@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@88) TyType) (= (type t1@@64) TyType)) (= (type t2@@45) TyType)) (= (type t3@@30) TyType)) (= (type t4@@15) TyType)) (= (type t5@@0) TyType)) (= (type t6@@0) TyType)) (= (type heap@@27) (MapType0Type refType MapType1Type))) (= (type h@@56) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@32) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@15) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@64) BoxType)) (= (type bx1@@48) BoxType)) (= (type bx2@@32) BoxType)) (= (type bx3@@16) BoxType)) (= (type bx4@@0) BoxType)) (= (type bx5@@0) BoxType)) (U_2_bool (MapType6Select r@@32 heap@@27 bx0@@64 bx1@@48 bx2@@32 bx3@@16 bx4@@0 bx5@@0))) (Requires6 t0@@88 t1@@64 t2@@45 t3@@30 t4@@15 t5@@0 t6@@0 heap@@27 (Handle6 h@@56 r@@32 rd@@15) bx0@@64 bx1@@48 bx2@@32 bx3@@16 bx4@@0 bx5@@0)) :qid |unknown.0:0| :skolemid |940| :pattern ( (Requires6 t0@@88 t1@@64 t2@@45 t3@@30 t4@@15 t5@@0 t6@@0 heap@@27 (Handle6 h@@56 r@@32 rd@@15) bx0@@64 bx1@@48 bx2@@32 bx3@@16 bx4@@0 bx5@@0)) )))
(assert (forall ((arg0@@238 T@U) (arg1@@119 T@U) (arg2@@75 T@U) (arg3@@52 T@U) (arg4@@41 T@U) (arg5@@28 T@U) (arg6@@19 T@U) (arg7@@15 T@U) (arg8@@5 T@U) (arg9@@2 T@U) (arg10@@2 T@U) (arg11@@0 T@U) (arg12@@0 T@U) (arg13@@0 T@U) (arg14@@0 T@U) ) (! (= (type (Reads6 arg0@@238 arg1@@119 arg2@@75 arg3@@52 arg4@@41 arg5@@28 arg6@@19 arg7@@15 arg8@@5 arg9@@2 arg10@@2 arg11@@0 arg12@@0 arg13@@0 arg14@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads6| :pattern ( (Reads6 arg0@@238 arg1@@119 arg2@@75 arg3@@52 arg4@@41 arg5@@28 arg6@@19 arg7@@15 arg8@@5 arg9@@2 arg10@@2 arg11@@0 arg12@@0 arg13@@0 arg14@@0)) )))
(assert (forall ((t0@@89 T@U) (t1@@65 T@U) (t2@@46 T@U) (t3@@31 T@U) (t4@@16 T@U) (t5@@1 T@U) (t6@@1 T@U) (heap@@28 T@U) (h@@57 T@U) (r@@33 T@U) (rd@@16 T@U) (bx0@@65 T@U) (bx1@@49 T@U) (bx2@@33 T@U) (bx3@@17 T@U) (bx4@@1 T@U) (bx5@@1 T@U) (bx@@77 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@89) TyType) (= (type t1@@65) TyType)) (= (type t2@@46) TyType)) (= (type t3@@31) TyType)) (= (type t4@@16) TyType)) (= (type t5@@1) TyType)) (= (type t6@@1) TyType)) (= (type heap@@28) (MapType0Type refType MapType1Type))) (= (type h@@57) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@33) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@16) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@65) BoxType)) (= (type bx1@@49) BoxType)) (= (type bx2@@33) BoxType)) (= (type bx3@@17) BoxType)) (= (type bx4@@1) BoxType)) (= (type bx5@@1) BoxType)) (= (type bx@@77) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads6 t0@@89 t1@@65 t2@@46 t3@@31 t4@@16 t5@@1 t6@@1 heap@@28 (Handle6 h@@57 r@@33 rd@@16) bx0@@65 bx1@@49 bx2@@33 bx3@@17 bx4@@1 bx5@@1) bx@@77)) (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@65 bx1@@49 bx2@@33 bx3@@17 bx4@@1 bx5@@1) bx@@77))) (=> (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@65 bx1@@49 bx2@@33 bx3@@17 bx4@@1 bx5@@1) bx@@77)) (U_2_bool (MapType0Select (Reads6 t0@@89 t1@@65 t2@@46 t3@@31 t4@@16 t5@@1 t6@@1 heap@@28 (Handle6 h@@57 r@@33 rd@@16) bx0@@65 bx1@@49 bx2@@33 bx3@@17 bx4@@1 bx5@@1) bx@@77))))) :qid |unknown.0:0| :skolemid |941| :pattern ( (MapType0Select (Reads6 t0@@89 t1@@65 t2@@46 t3@@31 t4@@16 t5@@1 t6@@1 heap@@28 (Handle6 h@@57 r@@33 rd@@16) bx0@@65 bx1@@49 bx2@@33 bx3@@17 bx4@@1 bx5@@1) bx@@77)) )))
(assert (forall ((t0@@90 T@U) (t1@@66 T@U) (t2@@47 T@U) (t3@@32 T@U) (t4@@17 T@U) (t5@@2 T@U) (t6@@2 T@U) (h0@@30 T@U) (h1@@30 T@U) (f@@65 T@U) (bx0@@66 T@U) (bx1@@50 T@U) (bx2@@34 T@U) (bx3@@18 T@U) (bx4@@2 T@U) (bx5@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@90) TyType) (= (type t1@@66) TyType)) (= (type t2@@47) TyType)) (= (type t3@@32) TyType)) (= (type t4@@17) TyType)) (= (type t5@@2) TyType)) (= (type t6@@2) TyType)) (= (type h0@@30) (MapType0Type refType MapType1Type))) (= (type h1@@30) (MapType0Type refType MapType1Type))) (= (type f@@65) HandleTypeType)) (= (type bx0@@66) BoxType)) (= (type bx1@@50) BoxType)) (= (type bx2@@34) BoxType)) (= (type bx3@@18) BoxType)) (= (type bx4@@2) BoxType)) (= (type bx5@@2) BoxType)) (and (and (and ($HeapSucc h0@@30 h1@@30) (and ($IsGoodHeap h0@@30) ($IsGoodHeap h1@@30))) (and (and (and (and (and (and ($IsBox bx0@@66 t0@@90) ($IsBox bx1@@50 t1@@66)) ($IsBox bx2@@34 t2@@47)) ($IsBox bx3@@18 t3@@32)) ($IsBox bx4@@2 t4@@17)) ($IsBox bx5@@2 t5@@2)) ($Is f@@65 (Tclass._System.___hFunc6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17 t5@@2 t6@@2)))) (forall ((o@@84 T@U) (fld@@29 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@29)))) (=> (and (and (= (type o@@84) refType) (= (type fld@@29) (FieldType a@@114))) (and (not (= o@@84 null)) (U_2_bool (MapType0Select (Reads6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17 t5@@2 t6@@2 h0@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@18 bx4@@2 bx5@@2) ($Box o@@84))))) (= (MapType1Select (MapType0Select h0@@30 o@@84) fld@@29) (MapType1Select (MapType0Select h1@@30 o@@84) fld@@29)))) :qid |unknown.0:0| :skolemid |942| :no-pattern (type o@@84) :no-pattern (type fld@@29) :no-pattern (U_2_int o@@84) :no-pattern (U_2_bool o@@84) :no-pattern (U_2_int fld@@29) :no-pattern (U_2_bool fld@@29) )))) (= (Reads6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17 t5@@2 t6@@2 h0@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@18 bx4@@2 bx5@@2) (Reads6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17 t5@@2 t6@@2 h1@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@18 bx4@@2 bx5@@2))) :qid |unknown.0:0| :skolemid |943| :pattern ( ($HeapSucc h0@@30 h1@@30) (Reads6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@17 t5@@2 t6@@2 h1@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@18 bx4@@2 bx5@@2)) )))
(assert (forall ((t0@@91 T@U) (t1@@67 T@U) (t2@@48 T@U) (t3@@33 T@U) (t4@@18 T@U) (t5@@3 T@U) (t6@@3 T@U) (h0@@31 T@U) (h1@@31 T@U) (f@@66 T@U) (bx0@@67 T@U) (bx1@@51 T@U) (bx2@@35 T@U) (bx3@@19 T@U) (bx4@@3 T@U) (bx5@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@91) TyType) (= (type t1@@67) TyType)) (= (type t2@@48) TyType)) (= (type t3@@33) TyType)) (= (type t4@@18) TyType)) (= (type t5@@3) TyType)) (= (type t6@@3) TyType)) (= (type h0@@31) (MapType0Type refType MapType1Type))) (= (type h1@@31) (MapType0Type refType MapType1Type))) (= (type f@@66) HandleTypeType)) (= (type bx0@@67) BoxType)) (= (type bx1@@51) BoxType)) (= (type bx2@@35) BoxType)) (= (type bx3@@19) BoxType)) (= (type bx4@@3) BoxType)) (= (type bx5@@3) BoxType)) (and (and (and ($HeapSucc h0@@31 h1@@31) (and ($IsGoodHeap h0@@31) ($IsGoodHeap h1@@31))) (and (and (and (and (and (and ($IsBox bx0@@67 t0@@91) ($IsBox bx1@@51 t1@@67)) ($IsBox bx2@@35 t2@@48)) ($IsBox bx3@@19 t3@@33)) ($IsBox bx4@@3 t4@@18)) ($IsBox bx5@@3 t5@@3)) ($Is f@@66 (Tclass._System.___hFunc6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18 t5@@3 t6@@3)))) (forall ((o@@85 T@U) (fld@@30 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@30)))) (=> (and (and (= (type o@@85) refType) (= (type fld@@30) (FieldType a@@115))) (and (not (= o@@85 null)) (U_2_bool (MapType0Select (Reads6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18 t5@@3 t6@@3 h1@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@19 bx4@@3 bx5@@3) ($Box o@@85))))) (= (MapType1Select (MapType0Select h0@@31 o@@85) fld@@30) (MapType1Select (MapType0Select h1@@31 o@@85) fld@@30)))) :qid |unknown.0:0| :skolemid |944| :no-pattern (type o@@85) :no-pattern (type fld@@30) :no-pattern (U_2_int o@@85) :no-pattern (U_2_bool o@@85) :no-pattern (U_2_int fld@@30) :no-pattern (U_2_bool fld@@30) )))) (= (Reads6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18 t5@@3 t6@@3 h0@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@19 bx4@@3 bx5@@3) (Reads6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18 t5@@3 t6@@3 h1@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@19 bx4@@3 bx5@@3))) :qid |unknown.0:0| :skolemid |945| :pattern ( ($HeapSucc h0@@31 h1@@31) (Reads6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@18 t5@@3 t6@@3 h1@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@19 bx4@@3 bx5@@3)) )))
(assert (forall ((t0@@92 T@U) (t1@@68 T@U) (t2@@49 T@U) (t3@@34 T@U) (t4@@19 T@U) (t5@@4 T@U) (t6@@4 T@U) (h0@@32 T@U) (h1@@32 T@U) (f@@67 T@U) (bx0@@68 T@U) (bx1@@52 T@U) (bx2@@36 T@U) (bx3@@20 T@U) (bx4@@4 T@U) (bx5@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@92) TyType) (= (type t1@@68) TyType)) (= (type t2@@49) TyType)) (= (type t3@@34) TyType)) (= (type t4@@19) TyType)) (= (type t5@@4) TyType)) (= (type t6@@4) TyType)) (= (type h0@@32) (MapType0Type refType MapType1Type))) (= (type h1@@32) (MapType0Type refType MapType1Type))) (= (type f@@67) HandleTypeType)) (= (type bx0@@68) BoxType)) (= (type bx1@@52) BoxType)) (= (type bx2@@36) BoxType)) (= (type bx3@@20) BoxType)) (= (type bx4@@4) BoxType)) (= (type bx5@@4) BoxType)) (and (and (and ($HeapSucc h0@@32 h1@@32) (and ($IsGoodHeap h0@@32) ($IsGoodHeap h1@@32))) (and (and (and (and (and (and ($IsBox bx0@@68 t0@@92) ($IsBox bx1@@52 t1@@68)) ($IsBox bx2@@36 t2@@49)) ($IsBox bx3@@20 t3@@34)) ($IsBox bx4@@4 t4@@19)) ($IsBox bx5@@4 t5@@4)) ($Is f@@67 (Tclass._System.___hFunc6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 t5@@4 t6@@4)))) (forall ((o@@86 T@U) (fld@@31 T@U) ) (! (let ((a@@116 (FieldTypeInv0 (type fld@@31)))) (=> (and (and (= (type o@@86) refType) (= (type fld@@31) (FieldType a@@116))) (and (not (= o@@86 null)) (U_2_bool (MapType0Select (Reads6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 t5@@4 t6@@4 h0@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20 bx4@@4 bx5@@4) ($Box o@@86))))) (= (MapType1Select (MapType0Select h0@@32 o@@86) fld@@31) (MapType1Select (MapType0Select h1@@32 o@@86) fld@@31)))) :qid |unknown.0:0| :skolemid |946| :no-pattern (type o@@86) :no-pattern (type fld@@31) :no-pattern (U_2_int o@@86) :no-pattern (U_2_bool o@@86) :no-pattern (U_2_int fld@@31) :no-pattern (U_2_bool fld@@31) )))) (and (=> (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 t5@@4 t6@@4 h0@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20 bx4@@4 bx5@@4) (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 t5@@4 t6@@4 h1@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20 bx4@@4 bx5@@4)) (=> (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 t5@@4 t6@@4 h1@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20 bx4@@4 bx5@@4) (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 t5@@4 t6@@4 h0@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20 bx4@@4 bx5@@4)))) :qid |unknown.0:0| :skolemid |947| :pattern ( ($HeapSucc h0@@32 h1@@32) (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@19 t5@@4 t6@@4 h1@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@20 bx4@@4 bx5@@4)) )))
(assert (forall ((t0@@93 T@U) (t1@@69 T@U) (t2@@50 T@U) (t3@@35 T@U) (t4@@20 T@U) (t5@@5 T@U) (t6@@5 T@U) (h0@@33 T@U) (h1@@33 T@U) (f@@68 T@U) (bx0@@69 T@U) (bx1@@53 T@U) (bx2@@37 T@U) (bx3@@21 T@U) (bx4@@5 T@U) (bx5@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@93) TyType) (= (type t1@@69) TyType)) (= (type t2@@50) TyType)) (= (type t3@@35) TyType)) (= (type t4@@20) TyType)) (= (type t5@@5) TyType)) (= (type t6@@5) TyType)) (= (type h0@@33) (MapType0Type refType MapType1Type))) (= (type h1@@33) (MapType0Type refType MapType1Type))) (= (type f@@68) HandleTypeType)) (= (type bx0@@69) BoxType)) (= (type bx1@@53) BoxType)) (= (type bx2@@37) BoxType)) (= (type bx3@@21) BoxType)) (= (type bx4@@5) BoxType)) (= (type bx5@@5) BoxType)) (and (and (and ($HeapSucc h0@@33 h1@@33) (and ($IsGoodHeap h0@@33) ($IsGoodHeap h1@@33))) (and (and (and (and (and (and ($IsBox bx0@@69 t0@@93) ($IsBox bx1@@53 t1@@69)) ($IsBox bx2@@37 t2@@50)) ($IsBox bx3@@21 t3@@35)) ($IsBox bx4@@5 t4@@20)) ($IsBox bx5@@5 t5@@5)) ($Is f@@68 (Tclass._System.___hFunc6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 t5@@5 t6@@5)))) (forall ((o@@87 T@U) (fld@@32 T@U) ) (! (let ((a@@117 (FieldTypeInv0 (type fld@@32)))) (=> (and (and (= (type o@@87) refType) (= (type fld@@32) (FieldType a@@117))) (and (not (= o@@87 null)) (U_2_bool (MapType0Select (Reads6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 t5@@5 t6@@5 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21 bx4@@5 bx5@@5) ($Box o@@87))))) (= (MapType1Select (MapType0Select h0@@33 o@@87) fld@@32) (MapType1Select (MapType0Select h1@@33 o@@87) fld@@32)))) :qid |unknown.0:0| :skolemid |948| :no-pattern (type o@@87) :no-pattern (type fld@@32) :no-pattern (U_2_int o@@87) :no-pattern (U_2_bool o@@87) :no-pattern (U_2_int fld@@32) :no-pattern (U_2_bool fld@@32) )))) (and (=> (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 t5@@5 t6@@5 h0@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21 bx4@@5 bx5@@5) (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 t5@@5 t6@@5 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21 bx4@@5 bx5@@5)) (=> (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 t5@@5 t6@@5 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21 bx4@@5 bx5@@5) (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 t5@@5 t6@@5 h0@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21 bx4@@5 bx5@@5)))) :qid |unknown.0:0| :skolemid |949| :pattern ( ($HeapSucc h0@@33 h1@@33) (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@20 t5@@5 t6@@5 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@21 bx4@@5 bx5@@5)) )))
(assert (forall ((t0@@94 T@U) (t1@@70 T@U) (t2@@51 T@U) (t3@@36 T@U) (t4@@21 T@U) (t5@@6 T@U) (t6@@6 T@U) (h0@@34 T@U) (h1@@34 T@U) (f@@69 T@U) (bx0@@70 T@U) (bx1@@54 T@U) (bx2@@38 T@U) (bx3@@22 T@U) (bx4@@6 T@U) (bx5@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@94) TyType) (= (type t1@@70) TyType)) (= (type t2@@51) TyType)) (= (type t3@@36) TyType)) (= (type t4@@21) TyType)) (= (type t5@@6) TyType)) (= (type t6@@6) TyType)) (= (type h0@@34) (MapType0Type refType MapType1Type))) (= (type h1@@34) (MapType0Type refType MapType1Type))) (= (type f@@69) HandleTypeType)) (= (type bx0@@70) BoxType)) (= (type bx1@@54) BoxType)) (= (type bx2@@38) BoxType)) (= (type bx3@@22) BoxType)) (= (type bx4@@6) BoxType)) (= (type bx5@@6) BoxType)) (and (and (and ($HeapSucc h0@@34 h1@@34) (and ($IsGoodHeap h0@@34) ($IsGoodHeap h1@@34))) (and (and (and (and (and (and ($IsBox bx0@@70 t0@@94) ($IsBox bx1@@54 t1@@70)) ($IsBox bx2@@38 t2@@51)) ($IsBox bx3@@22 t3@@36)) ($IsBox bx4@@6 t4@@21)) ($IsBox bx5@@6 t5@@6)) ($Is f@@69 (Tclass._System.___hFunc6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21 t5@@6 t6@@6)))) (forall ((o@@88 T@U) (fld@@33 T@U) ) (! (let ((a@@118 (FieldTypeInv0 (type fld@@33)))) (=> (and (and (= (type o@@88) refType) (= (type fld@@33) (FieldType a@@118))) (and (not (= o@@88 null)) (U_2_bool (MapType0Select (Reads6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21 t5@@6 t6@@6 h0@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@22 bx4@@6 bx5@@6) ($Box o@@88))))) (= (MapType1Select (MapType0Select h0@@34 o@@88) fld@@33) (MapType1Select (MapType0Select h1@@34 o@@88) fld@@33)))) :qid |unknown.0:0| :skolemid |950| :no-pattern (type o@@88) :no-pattern (type fld@@33) :no-pattern (U_2_int o@@88) :no-pattern (U_2_bool o@@88) :no-pattern (U_2_int fld@@33) :no-pattern (U_2_bool fld@@33) )))) (= (Apply6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21 t5@@6 t6@@6 h0@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@22 bx4@@6 bx5@@6) (Apply6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21 t5@@6 t6@@6 h1@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@22 bx4@@6 bx5@@6))) :qid |unknown.0:0| :skolemid |951| :pattern ( ($HeapSucc h0@@34 h1@@34) (Apply6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@21 t5@@6 t6@@6 h1@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@22 bx4@@6 bx5@@6)) )))
(assert (forall ((t0@@95 T@U) (t1@@71 T@U) (t2@@52 T@U) (t3@@37 T@U) (t4@@22 T@U) (t5@@7 T@U) (t6@@7 T@U) (h0@@35 T@U) (h1@@35 T@U) (f@@70 T@U) (bx0@@71 T@U) (bx1@@55 T@U) (bx2@@39 T@U) (bx3@@23 T@U) (bx4@@7 T@U) (bx5@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@95) TyType) (= (type t1@@71) TyType)) (= (type t2@@52) TyType)) (= (type t3@@37) TyType)) (= (type t4@@22) TyType)) (= (type t5@@7) TyType)) (= (type t6@@7) TyType)) (= (type h0@@35) (MapType0Type refType MapType1Type))) (= (type h1@@35) (MapType0Type refType MapType1Type))) (= (type f@@70) HandleTypeType)) (= (type bx0@@71) BoxType)) (= (type bx1@@55) BoxType)) (= (type bx2@@39) BoxType)) (= (type bx3@@23) BoxType)) (= (type bx4@@7) BoxType)) (= (type bx5@@7) BoxType)) (and (and (and ($HeapSucc h0@@35 h1@@35) (and ($IsGoodHeap h0@@35) ($IsGoodHeap h1@@35))) (and (and (and (and (and (and ($IsBox bx0@@71 t0@@95) ($IsBox bx1@@55 t1@@71)) ($IsBox bx2@@39 t2@@52)) ($IsBox bx3@@23 t3@@37)) ($IsBox bx4@@7 t4@@22)) ($IsBox bx5@@7 t5@@7)) ($Is f@@70 (Tclass._System.___hFunc6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22 t5@@7 t6@@7)))) (forall ((o@@89 T@U) (fld@@34 T@U) ) (! (let ((a@@119 (FieldTypeInv0 (type fld@@34)))) (=> (and (and (= (type o@@89) refType) (= (type fld@@34) (FieldType a@@119))) (and (not (= o@@89 null)) (U_2_bool (MapType0Select (Reads6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22 t5@@7 t6@@7 h1@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@23 bx4@@7 bx5@@7) ($Box o@@89))))) (= (MapType1Select (MapType0Select h0@@35 o@@89) fld@@34) (MapType1Select (MapType0Select h1@@35 o@@89) fld@@34)))) :qid |unknown.0:0| :skolemid |952| :no-pattern (type o@@89) :no-pattern (type fld@@34) :no-pattern (U_2_int o@@89) :no-pattern (U_2_bool o@@89) :no-pattern (U_2_int fld@@34) :no-pattern (U_2_bool fld@@34) )))) (= (Apply6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22 t5@@7 t6@@7 h0@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@23 bx4@@7 bx5@@7) (Apply6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22 t5@@7 t6@@7 h1@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@23 bx4@@7 bx5@@7))) :qid |unknown.0:0| :skolemid |953| :pattern ( ($HeapSucc h0@@35 h1@@35) (Apply6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@22 t5@@7 t6@@7 h1@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@23 bx4@@7 bx5@@7)) )))
(assert (forall ((t0@@96 T@U) (t1@@72 T@U) (t2@@53 T@U) (t3@@38 T@U) (t4@@23 T@U) (t5@@8 T@U) (t6@@8 T@U) (heap@@29 T@U) (f@@71 T@U) (bx0@@72 T@U) (bx1@@56 T@U) (bx2@@40 T@U) (bx3@@24 T@U) (bx4@@8 T@U) (bx5@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@96) TyType) (= (type t1@@72) TyType)) (= (type t2@@53) TyType)) (= (type t3@@38) TyType)) (= (type t4@@23) TyType)) (= (type t5@@8) TyType)) (= (type t6@@8) TyType)) (= (type heap@@29) (MapType0Type refType MapType1Type))) (= (type f@@71) HandleTypeType)) (= (type bx0@@72) BoxType)) (= (type bx1@@56) BoxType)) (= (type bx2@@40) BoxType)) (= (type bx3@@24) BoxType)) (= (type bx4@@8) BoxType)) (= (type bx5@@8) BoxType)) (and ($IsGoodHeap heap@@29) (and (and (and (and (and (and ($IsBox bx0@@72 t0@@96) ($IsBox bx1@@56 t1@@72)) ($IsBox bx2@@40 t2@@53)) ($IsBox bx3@@24 t3@@38)) ($IsBox bx4@@8 t4@@23)) ($IsBox bx5@@8 t5@@8)) ($Is f@@71 (Tclass._System.___hFunc6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 t5@@8 t6@@8))))) (and (=> (|Set#Equal| (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 t5@@8 t6@@8 $OneHeap f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24 bx4@@8 bx5@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 t5@@8 t6@@8 heap@@29 f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24 bx4@@8 bx5@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 t5@@8 t6@@8 heap@@29 f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24 bx4@@8 bx5@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 t5@@8 t6@@8 $OneHeap f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24 bx4@@8 bx5@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |954| :pattern ( (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 t5@@8 t6@@8 $OneHeap f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24 bx4@@8 bx5@@8) ($IsGoodHeap heap@@29)) :pattern ( (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@23 t5@@8 t6@@8 heap@@29 f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@24 bx4@@8 bx5@@8)) )))
(assert (forall ((t0@@97 T@U) (t1@@73 T@U) (t2@@54 T@U) (t3@@39 T@U) (t4@@24 T@U) (t5@@9 T@U) (t6@@9 T@U) (heap@@30 T@U) (f@@72 T@U) (bx0@@73 T@U) (bx1@@57 T@U) (bx2@@41 T@U) (bx3@@25 T@U) (bx4@@9 T@U) (bx5@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@97) TyType) (= (type t1@@73) TyType)) (= (type t2@@54) TyType)) (= (type t3@@39) TyType)) (= (type t4@@24) TyType)) (= (type t5@@9) TyType)) (= (type t6@@9) TyType)) (= (type heap@@30) (MapType0Type refType MapType1Type))) (= (type f@@72) HandleTypeType)) (= (type bx0@@73) BoxType)) (= (type bx1@@57) BoxType)) (= (type bx2@@41) BoxType)) (= (type bx3@@25) BoxType)) (= (type bx4@@9) BoxType)) (= (type bx5@@9) BoxType)) (and (and ($IsGoodHeap heap@@30) (and (and (and (and (and (and ($IsBox bx0@@73 t0@@97) ($IsBox bx1@@57 t1@@73)) ($IsBox bx2@@41 t2@@54)) ($IsBox bx3@@25 t3@@39)) ($IsBox bx4@@9 t4@@24)) ($IsBox bx5@@9 t5@@9)) ($Is f@@72 (Tclass._System.___hFunc6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 t5@@9 t6@@9)))) (|Set#Equal| (Reads6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 t5@@9 t6@@9 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25 bx4@@9 bx5@@9) (|Set#Empty| BoxType)))) (and (=> (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 t5@@9 t6@@9 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25 bx4@@9 bx5@@9) (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 t5@@9 t6@@9 heap@@30 f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25 bx4@@9 bx5@@9)) (=> (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 t5@@9 t6@@9 heap@@30 f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25 bx4@@9 bx5@@9) (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 t5@@9 t6@@9 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25 bx4@@9 bx5@@9)))) :qid |unknown.0:0| :skolemid |955| :pattern ( (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 t5@@9 t6@@9 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25 bx4@@9 bx5@@9) ($IsGoodHeap heap@@30)) :pattern ( (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@24 t5@@9 t6@@9 heap@@30 f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@25 bx4@@9 bx5@@9)) )))
(assert (forall ((f@@73 T@U) (t0@@98 T@U) (t1@@74 T@U) (t2@@55 T@U) (t3@@40 T@U) (t4@@25 T@U) (t5@@10 T@U) (t6@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@73) HandleTypeType) (= (type t0@@98) TyType)) (= (type t1@@74) TyType)) (= (type t2@@55) TyType)) (= (type t3@@40) TyType)) (= (type t4@@25) TyType)) (= (type t5@@10) TyType)) (= (type t6@@10) TyType)) (and (=> ($Is f@@73 (Tclass._System.___hFunc6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 t5@@10 t6@@10)) (forall ((h@@58 T@U) (bx0@@74 T@U) (bx1@@58 T@U) (bx2@@42 T@U) (bx3@@26 T@U) (bx4@@10 T@U) (bx5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@58) (MapType0Type refType MapType1Type)) (= (type bx0@@74) BoxType)) (= (type bx1@@58) BoxType)) (= (type bx2@@42) BoxType)) (= (type bx3@@26) BoxType)) (= (type bx4@@10) BoxType)) (= (type bx5@@10) BoxType)) (and (and ($IsGoodHeap h@@58) (and (and (and (and (and ($IsBox bx0@@74 t0@@98) ($IsBox bx1@@58 t1@@74)) ($IsBox bx2@@42 t2@@55)) ($IsBox bx3@@26 t3@@40)) ($IsBox bx4@@10 t4@@25)) ($IsBox bx5@@10 t5@@10))) (Requires6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 t5@@10 t6@@10 h@@58 f@@73 bx0@@74 bx1@@58 bx2@@42 bx3@@26 bx4@@10 bx5@@10))) ($IsBox (Apply6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 t5@@10 t6@@10 h@@58 f@@73 bx0@@74 bx1@@58 bx2@@42 bx3@@26 bx4@@10 bx5@@10) t6@@10)) :qid |DafnyPre.521:12| :skolemid |956| :pattern ( (Apply6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 t5@@10 t6@@10 h@@58 f@@73 bx0@@74 bx1@@58 bx2@@42 bx3@@26 bx4@@10 bx5@@10)) ))) (=> (forall ((h@@59 T@U) (bx0@@75 T@U) (bx1@@59 T@U) (bx2@@43 T@U) (bx3@@27 T@U) (bx4@@11 T@U) (bx5@@11 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@59) (MapType0Type refType MapType1Type)) (= (type bx0@@75) BoxType)) (= (type bx1@@59) BoxType)) (= (type bx2@@43) BoxType)) (= (type bx3@@27) BoxType)) (= (type bx4@@11) BoxType)) (= (type bx5@@11) BoxType)) (and (and ($IsGoodHeap h@@59) (and (and (and (and (and ($IsBox bx0@@75 t0@@98) ($IsBox bx1@@59 t1@@74)) ($IsBox bx2@@43 t2@@55)) ($IsBox bx3@@27 t3@@40)) ($IsBox bx4@@11 t4@@25)) ($IsBox bx5@@11 t5@@10))) (Requires6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 t5@@10 t6@@10 h@@59 f@@73 bx0@@75 bx1@@59 bx2@@43 bx3@@27 bx4@@11 bx5@@11))) ($IsBox (Apply6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 t5@@10 t6@@10 h@@59 f@@73 bx0@@75 bx1@@59 bx2@@43 bx3@@27 bx4@@11 bx5@@11) t6@@10)) :qid |DafnyPre.521:12| :skolemid |956| :pattern ( (Apply6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 t5@@10 t6@@10 h@@59 f@@73 bx0@@75 bx1@@59 bx2@@43 bx3@@27 bx4@@11 bx5@@11)) )) ($Is f@@73 (Tclass._System.___hFunc6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 t5@@10 t6@@10))))) :qid |unknown.0:0| :skolemid |957| :pattern ( ($Is f@@73 (Tclass._System.___hFunc6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@25 t5@@10 t6@@10))) )))
(assert (forall ((f@@74 T@U) (t0@@99 T@U) (t1@@75 T@U) (t2@@56 T@U) (t3@@41 T@U) (t4@@26 T@U) (t5@@11 T@U) (t6@@11 T@U) (u0@@4 T@U) (u1@@3 T@U) (u2@@2 T@U) (u3@@1 T@U) (u4@@0 T@U) (u5 T@U) (u6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@74) HandleTypeType) (= (type t0@@99) TyType)) (= (type t1@@75) TyType)) (= (type t2@@56) TyType)) (= (type t3@@41) TyType)) (= (type t4@@26) TyType)) (= (type t5@@11) TyType)) (= (type t6@@11) TyType)) (= (type u0@@4) TyType)) (= (type u1@@3) TyType)) (= (type u2@@2) TyType)) (= (type u3@@1) TyType)) (= (type u4@@0) TyType)) (= (type u5) TyType)) (= (type u6) TyType)) (and (and (and (and (and (and (and ($Is f@@74 (Tclass._System.___hFunc6 t0@@99 t1@@75 t2@@56 t3@@41 t4@@26 t5@@11 t6@@11)) (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 u0@@4)) ($IsBox bx@@78 t0@@99)) :qid |unknown.0:0| :skolemid |958| :pattern ( ($IsBox bx@@78 u0@@4)) :pattern ( ($IsBox bx@@78 t0@@99)) ))) (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 u1@@3)) ($IsBox bx@@79 t1@@75)) :qid |unknown.0:0| :skolemid |959| :pattern ( ($IsBox bx@@79 u1@@3)) :pattern ( ($IsBox bx@@79 t1@@75)) ))) (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 u2@@2)) ($IsBox bx@@80 t2@@56)) :qid |unknown.0:0| :skolemid |960| :pattern ( ($IsBox bx@@80 u2@@2)) :pattern ( ($IsBox bx@@80 t2@@56)) ))) (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 u3@@1)) ($IsBox bx@@81 t3@@41)) :qid |unknown.0:0| :skolemid |961| :pattern ( ($IsBox bx@@81 u3@@1)) :pattern ( ($IsBox bx@@81 t3@@41)) ))) (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 u4@@0)) ($IsBox bx@@82 t4@@26)) :qid |unknown.0:0| :skolemid |962| :pattern ( ($IsBox bx@@82 u4@@0)) :pattern ( ($IsBox bx@@82 t4@@26)) ))) (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 u5)) ($IsBox bx@@83 t5@@11)) :qid |unknown.0:0| :skolemid |963| :pattern ( ($IsBox bx@@83 u5)) :pattern ( ($IsBox bx@@83 t5@@11)) ))) (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 t6@@11)) ($IsBox bx@@84 u6)) :qid |unknown.0:0| :skolemid |964| :pattern ( ($IsBox bx@@84 t6@@11)) :pattern ( ($IsBox bx@@84 u6)) )))) ($Is f@@74 (Tclass._System.___hFunc6 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0 u5 u6))) :qid |unknown.0:0| :skolemid |965| :pattern ( ($Is f@@74 (Tclass._System.___hFunc6 t0@@99 t1@@75 t2@@56 t3@@41 t4@@26 t5@@11 t6@@11)) ($Is f@@74 (Tclass._System.___hFunc6 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0 u5 u6))) )))
(assert (forall ((f@@75 T@U) (t0@@100 T@U) (t1@@76 T@U) (t2@@57 T@U) (t3@@42 T@U) (t4@@27 T@U) (t5@@12 T@U) (t6@@12 T@U) (h@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@75) HandleTypeType) (= (type t0@@100) TyType)) (= (type t1@@76) TyType)) (= (type t2@@57) TyType)) (= (type t3@@42) TyType)) (= (type t4@@27) TyType)) (= (type t5@@12) TyType)) (= (type t6@@12) TyType)) (= (type h@@60) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@60)) (and (=> ($IsAlloc f@@75 (Tclass._System.___hFunc6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12) h@@60) (forall ((bx0@@76 T@U) (bx1@@60 T@U) (bx2@@44 T@U) (bx3@@28 T@U) (bx4@@12 T@U) (bx5@@12 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@76) BoxType) (= (type bx1@@60) BoxType)) (= (type bx2@@44) BoxType)) (= (type bx3@@28) BoxType)) (= (type bx4@@12) BoxType)) (= (type bx5@@12) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@76 t0@@100) ($IsAllocBox bx0@@76 t0@@100 h@@60)) (and ($IsBox bx1@@60 t1@@76) ($IsAllocBox bx1@@60 t1@@76 h@@60))) (and ($IsBox bx2@@44 t2@@57) ($IsAllocBox bx2@@44 t2@@57 h@@60))) (and ($IsBox bx3@@28 t3@@42) ($IsAllocBox bx3@@28 t3@@42 h@@60))) (and ($IsBox bx4@@12 t4@@27) ($IsAllocBox bx4@@12 t4@@27 h@@60))) (and ($IsBox bx5@@12 t5@@12) ($IsAllocBox bx5@@12 t5@@12 h@@60))) (Requires6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28 bx4@@12 bx5@@12)) (forall ((r@@34 T@U) ) (!  (=> (= (type r@@34) refType) (=> (and (not (= r@@34 null)) (U_2_bool (MapType0Select (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28 bx4@@12 bx5@@12) ($Box r@@34)))) (U_2_bool (MapType1Select (MapType0Select h@@60 r@@34) alloc)))) :qid |unknown.0:0| :skolemid |966| :pattern ( (MapType0Select (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28 bx4@@12 bx5@@12) ($Box r@@34))) )))) :qid |unknown.0:0| :skolemid |967| :pattern ( (Apply6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28 bx4@@12 bx5@@12)) :pattern ( (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@28 bx4@@12 bx5@@12)) ))) (=> (forall ((bx0@@77 T@U) (bx1@@61 T@U) (bx2@@45 T@U) (bx3@@29 T@U) (bx4@@13 T@U) (bx5@@13 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@77) BoxType) (= (type bx1@@61) BoxType)) (= (type bx2@@45) BoxType)) (= (type bx3@@29) BoxType)) (= (type bx4@@13) BoxType)) (= (type bx5@@13) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@77 t0@@100) ($IsAllocBox bx0@@77 t0@@100 h@@60)) (and ($IsBox bx1@@61 t1@@76) ($IsAllocBox bx1@@61 t1@@76 h@@60))) (and ($IsBox bx2@@45 t2@@57) ($IsAllocBox bx2@@45 t2@@57 h@@60))) (and ($IsBox bx3@@29 t3@@42) ($IsAllocBox bx3@@29 t3@@42 h@@60))) (and ($IsBox bx4@@13 t4@@27) ($IsAllocBox bx4@@13 t4@@27 h@@60))) (and ($IsBox bx5@@13 t5@@12) ($IsAllocBox bx5@@13 t5@@12 h@@60))) (Requires6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29 bx4@@13 bx5@@13)) (forall ((r@@35 T@U) ) (!  (=> (= (type r@@35) refType) (=> (and (not (= r@@35 null)) (U_2_bool (MapType0Select (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29 bx4@@13 bx5@@13) ($Box r@@35)))) (U_2_bool (MapType1Select (MapType0Select h@@60 r@@35) alloc)))) :qid |unknown.0:0| :skolemid |966| :pattern ( (MapType0Select (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29 bx4@@13 bx5@@13) ($Box r@@35))) )))) :qid |unknown.0:0| :skolemid |967| :pattern ( (Apply6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29 bx4@@13 bx5@@13)) :pattern ( (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@29 bx4@@13 bx5@@13)) )) ($IsAlloc f@@75 (Tclass._System.___hFunc6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12) h@@60)))) :qid |unknown.0:0| :skolemid |968| :pattern ( ($IsAlloc f@@75 (Tclass._System.___hFunc6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@27 t5@@12 t6@@12) h@@60)) )))
(assert (forall ((f@@76 T@U) (t0@@101 T@U) (t1@@77 T@U) (t2@@58 T@U) (t3@@43 T@U) (t4@@28 T@U) (t5@@13 T@U) (t6@@13 T@U) (h@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@76) HandleTypeType) (= (type t0@@101) TyType)) (= (type t1@@77) TyType)) (= (type t2@@58) TyType)) (= (type t3@@43) TyType)) (= (type t4@@28) TyType)) (= (type t5@@13) TyType)) (= (type t6@@13) TyType)) (= (type h@@61) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@61) ($IsAlloc f@@76 (Tclass._System.___hFunc6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28 t5@@13 t6@@13) h@@61))) (forall ((bx0@@78 T@U) (bx1@@62 T@U) (bx2@@46 T@U) (bx3@@30 T@U) (bx4@@14 T@U) (bx5@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@78) BoxType) (= (type bx1@@62) BoxType)) (= (type bx2@@46) BoxType)) (= (type bx3@@30) BoxType)) (= (type bx4@@14) BoxType)) (= (type bx5@@14) BoxType)) (=> (and (and (and (and (and (and ($IsAllocBox bx0@@78 t0@@101 h@@61) ($IsAllocBox bx1@@62 t1@@77 h@@61)) ($IsAllocBox bx2@@46 t2@@58 h@@61)) ($IsAllocBox bx3@@30 t3@@43 h@@61)) ($IsAllocBox bx4@@14 t4@@28 h@@61)) ($IsAllocBox bx5@@14 t5@@13 h@@61)) (Requires6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28 t5@@13 t6@@13 h@@61 f@@76 bx0@@78 bx1@@62 bx2@@46 bx3@@30 bx4@@14 bx5@@14)) ($IsAllocBox (Apply6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28 t5@@13 t6@@13 h@@61 f@@76 bx0@@78 bx1@@62 bx2@@46 bx3@@30 bx4@@14 bx5@@14) t6@@13 h@@61))) :qid |unknown.0:0| :skolemid |969| :pattern ( (Apply6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28 t5@@13 t6@@13 h@@61 f@@76 bx0@@78 bx1@@62 bx2@@46 bx3@@30 bx4@@14 bx5@@14)) ))) :qid |unknown.0:0| :skolemid |970| :pattern ( ($IsAlloc f@@76 (Tclass._System.___hFunc6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@28 t5@@13 t6@@13) h@@61)) )))
(assert (forall ((arg0@@239 T@U) (arg1@@120 T@U) (arg2@@76 T@U) (arg3@@53 T@U) (arg4@@42 T@U) (arg5@@29 T@U) (arg6@@20 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6 arg0@@239 arg1@@120 arg2@@76 arg3@@53 arg4@@42 arg5@@29 arg6@@20)) TyType) :qid |funType:Tclass._System.___hPartialFunc6| :pattern ( (Tclass._System.___hPartialFunc6 arg0@@239 arg1@@120 arg2@@76 arg3@@53 arg4@@42 arg5@@29 arg6@@20)) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$T2@@55| T@U) (|#$T3@@33| T@U) (|#$T4@@8| T@U) (|#$T5@@8| T@U) (|#$R@@103| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$T3@@33|) TyType)) (= (type |#$T4@@8|) TyType)) (= (type |#$T5@@8|) TyType)) (= (type |#$R@@103|) TyType)) (= (Tag (Tclass._System.___hPartialFunc6 |#$T0@@99| |#$T1@@83| |#$T2@@55| |#$T3@@33| |#$T4@@8| |#$T5@@8| |#$R@@103|)) Tagclass._System.___hPartialFunc6)) :qid |unknown.0:0| :skolemid |971| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@99| |#$T1@@83| |#$T2@@55| |#$T3@@33| |#$T4@@8| |#$T5@@8| |#$R@@103|)) )))
(assert (forall ((arg0@@240 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_0 arg0@@240)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_0| :pattern ( (Tclass._System.___hPartialFunc6_0 arg0@@240)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@56| T@U) (|#$T3@@34| T@U) (|#$T4@@9| T@U) (|#$T5@@9| T@U) (|#$R@@104| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$T3@@34|) TyType)) (= (type |#$T4@@9|) TyType)) (= (type |#$T5@@9|) TyType)) (= (type |#$R@@104|) TyType)) (= (Tclass._System.___hPartialFunc6_0 (Tclass._System.___hPartialFunc6 |#$T0@@100| |#$T1@@84| |#$T2@@56| |#$T3@@34| |#$T4@@9| |#$T5@@9| |#$R@@104|)) |#$T0@@100|)) :qid |unknown.0:0| :skolemid |972| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@100| |#$T1@@84| |#$T2@@56| |#$T3@@34| |#$T4@@9| |#$T5@@9| |#$R@@104|)) )))
(assert (forall ((arg0@@241 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_1 arg0@@241)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_1| :pattern ( (Tclass._System.___hPartialFunc6_1 arg0@@241)) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@57| T@U) (|#$T3@@35| T@U) (|#$T4@@10| T@U) (|#$T5@@10| T@U) (|#$R@@105| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$T3@@35|) TyType)) (= (type |#$T4@@10|) TyType)) (= (type |#$T5@@10|) TyType)) (= (type |#$R@@105|) TyType)) (= (Tclass._System.___hPartialFunc6_1 (Tclass._System.___hPartialFunc6 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$T4@@10| |#$T5@@10| |#$R@@105|)) |#$T1@@85|)) :qid |unknown.0:0| :skolemid |973| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$T4@@10| |#$T5@@10| |#$R@@105|)) )))
(assert (forall ((arg0@@242 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_2 arg0@@242)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_2| :pattern ( (Tclass._System.___hPartialFunc6_2 arg0@@242)) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@58| T@U) (|#$T3@@36| T@U) (|#$T4@@11| T@U) (|#$T5@@11| T@U) (|#$R@@106| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$T3@@36|) TyType)) (= (type |#$T4@@11|) TyType)) (= (type |#$T5@@11|) TyType)) (= (type |#$R@@106|) TyType)) (= (Tclass._System.___hPartialFunc6_2 (Tclass._System.___hPartialFunc6 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$T4@@11| |#$T5@@11| |#$R@@106|)) |#$T2@@58|)) :qid |unknown.0:0| :skolemid |974| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$T4@@11| |#$T5@@11| |#$R@@106|)) )))
(assert (forall ((arg0@@243 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_3 arg0@@243)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_3| :pattern ( (Tclass._System.___hPartialFunc6_3 arg0@@243)) )))
(assert (forall ((|#$T0@@103| T@U) (|#$T1@@87| T@U) (|#$T2@@59| T@U) (|#$T3@@37| T@U) (|#$T4@@12| T@U) (|#$T5@@12| T@U) (|#$R@@107| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@103|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$T3@@37|) TyType)) (= (type |#$T4@@12|) TyType)) (= (type |#$T5@@12|) TyType)) (= (type |#$R@@107|) TyType)) (= (Tclass._System.___hPartialFunc6_3 (Tclass._System.___hPartialFunc6 |#$T0@@103| |#$T1@@87| |#$T2@@59| |#$T3@@37| |#$T4@@12| |#$T5@@12| |#$R@@107|)) |#$T3@@37|)) :qid |unknown.0:0| :skolemid |975| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@103| |#$T1@@87| |#$T2@@59| |#$T3@@37| |#$T4@@12| |#$T5@@12| |#$R@@107|)) )))
(assert (forall ((arg0@@244 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_4 arg0@@244)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_4| :pattern ( (Tclass._System.___hPartialFunc6_4 arg0@@244)) )))
(assert (forall ((|#$T0@@104| T@U) (|#$T1@@88| T@U) (|#$T2@@60| T@U) (|#$T3@@38| T@U) (|#$T4@@13| T@U) (|#$T5@@13| T@U) (|#$R@@108| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$T3@@38|) TyType)) (= (type |#$T4@@13|) TyType)) (= (type |#$T5@@13|) TyType)) (= (type |#$R@@108|) TyType)) (= (Tclass._System.___hPartialFunc6_4 (Tclass._System.___hPartialFunc6 |#$T0@@104| |#$T1@@88| |#$T2@@60| |#$T3@@38| |#$T4@@13| |#$T5@@13| |#$R@@108|)) |#$T4@@13|)) :qid |unknown.0:0| :skolemid |976| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@104| |#$T1@@88| |#$T2@@60| |#$T3@@38| |#$T4@@13| |#$T5@@13| |#$R@@108|)) )))
(assert (forall ((arg0@@245 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_5 arg0@@245)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_5| :pattern ( (Tclass._System.___hPartialFunc6_5 arg0@@245)) )))
(assert (forall ((|#$T0@@105| T@U) (|#$T1@@89| T@U) (|#$T2@@61| T@U) (|#$T3@@39| T@U) (|#$T4@@14| T@U) (|#$T5@@14| T@U) (|#$R@@109| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@105|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$T3@@39|) TyType)) (= (type |#$T4@@14|) TyType)) (= (type |#$T5@@14|) TyType)) (= (type |#$R@@109|) TyType)) (= (Tclass._System.___hPartialFunc6_5 (Tclass._System.___hPartialFunc6 |#$T0@@105| |#$T1@@89| |#$T2@@61| |#$T3@@39| |#$T4@@14| |#$T5@@14| |#$R@@109|)) |#$T5@@14|)) :qid |unknown.0:0| :skolemid |977| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@105| |#$T1@@89| |#$T2@@61| |#$T3@@39| |#$T4@@14| |#$T5@@14| |#$R@@109|)) )))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_6 arg0@@246)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_6| :pattern ( (Tclass._System.___hPartialFunc6_6 arg0@@246)) )))
(assert (forall ((|#$T0@@106| T@U) (|#$T1@@90| T@U) (|#$T2@@62| T@U) (|#$T3@@40| T@U) (|#$T4@@15| T@U) (|#$T5@@15| T@U) (|#$R@@110| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$T3@@40|) TyType)) (= (type |#$T4@@15|) TyType)) (= (type |#$T5@@15|) TyType)) (= (type |#$R@@110|) TyType)) (= (Tclass._System.___hPartialFunc6_6 (Tclass._System.___hPartialFunc6 |#$T0@@106| |#$T1@@90| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$T5@@15| |#$R@@110|)) |#$R@@110|)) :qid |unknown.0:0| :skolemid |978| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@106| |#$T1@@90| |#$T2@@62| |#$T3@@40| |#$T4@@15| |#$T5@@15| |#$R@@110|)) )))
(assert (forall ((|#$T0@@107| T@U) (|#$T1@@91| T@U) (|#$T2@@63| T@U) (|#$T3@@41| T@U) (|#$T4@@16| T@U) (|#$T5@@16| T@U) (|#$R@@111| T@U) (bx@@85 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@107|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$T3@@41|) TyType)) (= (type |#$T4@@16|) TyType)) (= (type |#$T5@@16|) TyType)) (= (type |#$R@@111|) TyType)) (= (type bx@@85) BoxType)) ($IsBox bx@@85 (Tclass._System.___hPartialFunc6 |#$T0@@107| |#$T1@@91| |#$T2@@63| |#$T3@@41| |#$T4@@16| |#$T5@@16| |#$R@@111|))) (and (= ($Box ($Unbox HandleTypeType bx@@85)) bx@@85) ($Is ($Unbox HandleTypeType bx@@85) (Tclass._System.___hPartialFunc6 |#$T0@@107| |#$T1@@91| |#$T2@@63| |#$T3@@41| |#$T4@@16| |#$T5@@16| |#$R@@111|)))) :qid |unknown.0:0| :skolemid |979| :pattern ( ($IsBox bx@@85 (Tclass._System.___hPartialFunc6 |#$T0@@107| |#$T1@@91| |#$T2@@63| |#$T3@@41| |#$T4@@16| |#$T5@@16| |#$R@@111|))) )))
(assert (forall ((|#$T0@@108| T@U) (|#$T1@@92| T@U) (|#$T2@@64| T@U) (|#$T3@@42| T@U) (|#$T4@@17| T@U) (|#$T5@@17| T@U) (|#$R@@112| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@108|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$T3@@42|) TyType)) (= (type |#$T4@@17|) TyType)) (= (type |#$T5@@17|) TyType)) (= (type |#$R@@112|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (and (=> ($Is |f#0@@19| (Tclass._System.___hPartialFunc6 |#$T0@@108| |#$T1@@92| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$T5@@17| |#$R@@112|)) (and ($Is |f#0@@19| (Tclass._System.___hFunc6 |#$T0@@108| |#$T1@@92| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$T5@@17| |#$R@@112|)) (forall ((|x0#0@@15| T@U) (|x1#0@@11| T@U) (|x2#0@@7| T@U) (|x3#0@@3| T@U) (|x4#0| T@U) (|x5#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@15|) BoxType) (= (type |x1#0@@11|) BoxType)) (= (type |x2#0@@7|) BoxType)) (= (type |x3#0@@3|) BoxType)) (= (type |x4#0|) BoxType)) (= (type |x5#0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@15| |#$T0@@108|) ($IsBox |x1#0@@11| |#$T1@@92|)) ($IsBox |x2#0@@7| |#$T2@@64|)) ($IsBox |x3#0@@3| |#$T3@@42|)) ($IsBox |x4#0| |#$T4@@17|)) ($IsBox |x5#0| |#$T5@@17|))) (|Set#Equal| (Reads6 |#$T0@@108| |#$T1@@92| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$T5@@17| |#$R@@112| $OneHeap |f#0@@19| |x0#0@@15| |x1#0@@11| |x2#0@@7| |x3#0@@3| |x4#0| |x5#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |980| :no-pattern (type |x0#0@@15|) :no-pattern (type |x1#0@@11|) :no-pattern (type |x2#0@@7|) :no-pattern (type |x3#0@@3|) :no-pattern (type |x4#0|) :no-pattern (type |x5#0|) :no-pattern (U_2_int |x0#0@@15|) :no-pattern (U_2_bool |x0#0@@15|) :no-pattern (U_2_int |x1#0@@11|) :no-pattern (U_2_bool |x1#0@@11|) :no-pattern (U_2_int |x2#0@@7|) :no-pattern (U_2_bool |x2#0@@7|) :no-pattern (U_2_int |x3#0@@3|) :no-pattern (U_2_bool |x3#0@@3|) :no-pattern (U_2_int |x4#0|) :no-pattern (U_2_bool |x4#0|) :no-pattern (U_2_int |x5#0|) :no-pattern (U_2_bool |x5#0|) )))) (=> (and ($Is |f#0@@19| (Tclass._System.___hFunc6 |#$T0@@108| |#$T1@@92| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$T5@@17| |#$R@@112|)) (forall ((|x0#0@@16| T@U) (|x1#0@@12| T@U) (|x2#0@@8| T@U) (|x3#0@@4| T@U) (|x4#0@@0| T@U) (|x5#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@16|) BoxType) (= (type |x1#0@@12|) BoxType)) (= (type |x2#0@@8|) BoxType)) (= (type |x3#0@@4|) BoxType)) (= (type |x4#0@@0|) BoxType)) (= (type |x5#0@@0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@16| |#$T0@@108|) ($IsBox |x1#0@@12| |#$T1@@92|)) ($IsBox |x2#0@@8| |#$T2@@64|)) ($IsBox |x3#0@@4| |#$T3@@42|)) ($IsBox |x4#0@@0| |#$T4@@17|)) ($IsBox |x5#0@@0| |#$T5@@17|))) (|Set#Equal| (Reads6 |#$T0@@108| |#$T1@@92| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$T5@@17| |#$R@@112| $OneHeap |f#0@@19| |x0#0@@16| |x1#0@@12| |x2#0@@8| |x3#0@@4| |x4#0@@0| |x5#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |980| :no-pattern (type |x0#0@@16|) :no-pattern (type |x1#0@@12|) :no-pattern (type |x2#0@@8|) :no-pattern (type |x3#0@@4|) :no-pattern (type |x4#0@@0|) :no-pattern (type |x5#0@@0|) :no-pattern (U_2_int |x0#0@@16|) :no-pattern (U_2_bool |x0#0@@16|) :no-pattern (U_2_int |x1#0@@12|) :no-pattern (U_2_bool |x1#0@@12|) :no-pattern (U_2_int |x2#0@@8|) :no-pattern (U_2_bool |x2#0@@8|) :no-pattern (U_2_int |x3#0@@4|) :no-pattern (U_2_bool |x3#0@@4|) :no-pattern (U_2_int |x4#0@@0|) :no-pattern (U_2_bool |x4#0@@0|) :no-pattern (U_2_int |x5#0@@0|) :no-pattern (U_2_bool |x5#0@@0|) ))) ($Is |f#0@@19| (Tclass._System.___hPartialFunc6 |#$T0@@108| |#$T1@@92| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$T5@@17| |#$R@@112|))))) :qid |unknown.0:0| :skolemid |981| :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc6 |#$T0@@108| |#$T1@@92| |#$T2@@64| |#$T3@@42| |#$T4@@17| |#$T5@@17| |#$R@@112|))) )))
(assert (forall ((|#$T0@@109| T@U) (|#$T1@@93| T@U) (|#$T2@@65| T@U) (|#$T3@@43| T@U) (|#$T4@@18| T@U) (|#$T5@@18| T@U) (|#$R@@113| T@U) (|f#0@@20| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@109|) TyType) (= (type |#$T1@@93|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$T3@@43|) TyType)) (= (type |#$T4@@18|) TyType)) (= (type |#$T5@@18|) TyType)) (= (type |#$R@@113|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@65| |#$T3@@43| |#$T4@@18| |#$T5@@18| |#$R@@113|) $h@@21) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@65| |#$T3@@43| |#$T4@@18| |#$T5@@18| |#$R@@113|) $h@@21)) (=> ($IsAlloc |f#0@@20| (Tclass._System.___hFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@65| |#$T3@@43| |#$T4@@18| |#$T5@@18| |#$R@@113|) $h@@21) ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@65| |#$T3@@43| |#$T4@@18| |#$T5@@18| |#$R@@113|) $h@@21)))) :qid |unknown.0:0| :skolemid |982| :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@65| |#$T3@@43| |#$T4@@18| |#$T5@@18| |#$R@@113|) $h@@21)) )))
(assert (forall ((arg0@@247 T@U) (arg1@@121 T@U) (arg2@@77 T@U) (arg3@@54 T@U) (arg4@@43 T@U) (arg5@@30 T@U) (arg6@@21 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6 arg0@@247 arg1@@121 arg2@@77 arg3@@54 arg4@@43 arg5@@30 arg6@@21)) TyType) :qid |funType:Tclass._System.___hTotalFunc6| :pattern ( (Tclass._System.___hTotalFunc6 arg0@@247 arg1@@121 arg2@@77 arg3@@54 arg4@@43 arg5@@30 arg6@@21)) )))
(assert (forall ((|#$T0@@110| T@U) (|#$T1@@94| T@U) (|#$T2@@66| T@U) (|#$T3@@44| T@U) (|#$T4@@19| T@U) (|#$T5@@19| T@U) (|#$R@@114| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@110|) TyType) (= (type |#$T1@@94|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$T3@@44|) TyType)) (= (type |#$T4@@19|) TyType)) (= (type |#$T5@@19|) TyType)) (= (type |#$R@@114|) TyType)) (= (Tag (Tclass._System.___hTotalFunc6 |#$T0@@110| |#$T1@@94| |#$T2@@66| |#$T3@@44| |#$T4@@19| |#$T5@@19| |#$R@@114|)) Tagclass._System.___hTotalFunc6)) :qid |unknown.0:0| :skolemid |983| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@110| |#$T1@@94| |#$T2@@66| |#$T3@@44| |#$T4@@19| |#$T5@@19| |#$R@@114|)) )))
(assert (forall ((arg0@@248 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_0 arg0@@248)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_0| :pattern ( (Tclass._System.___hTotalFunc6_0 arg0@@248)) )))
(assert (forall ((|#$T0@@111| T@U) (|#$T1@@95| T@U) (|#$T2@@67| T@U) (|#$T3@@45| T@U) (|#$T4@@20| T@U) (|#$T5@@20| T@U) (|#$R@@115| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@111|) TyType) (= (type |#$T1@@95|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$T3@@45|) TyType)) (= (type |#$T4@@20|) TyType)) (= (type |#$T5@@20|) TyType)) (= (type |#$R@@115|) TyType)) (= (Tclass._System.___hTotalFunc6_0 (Tclass._System.___hTotalFunc6 |#$T0@@111| |#$T1@@95| |#$T2@@67| |#$T3@@45| |#$T4@@20| |#$T5@@20| |#$R@@115|)) |#$T0@@111|)) :qid |unknown.0:0| :skolemid |984| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@111| |#$T1@@95| |#$T2@@67| |#$T3@@45| |#$T4@@20| |#$T5@@20| |#$R@@115|)) )))
(assert (forall ((arg0@@249 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_1 arg0@@249)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_1| :pattern ( (Tclass._System.___hTotalFunc6_1 arg0@@249)) )))
(assert (forall ((|#$T0@@112| T@U) (|#$T1@@96| T@U) (|#$T2@@68| T@U) (|#$T3@@46| T@U) (|#$T4@@21| T@U) (|#$T5@@21| T@U) (|#$R@@116| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@112|) TyType) (= (type |#$T1@@96|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$T3@@46|) TyType)) (= (type |#$T4@@21|) TyType)) (= (type |#$T5@@21|) TyType)) (= (type |#$R@@116|) TyType)) (= (Tclass._System.___hTotalFunc6_1 (Tclass._System.___hTotalFunc6 |#$T0@@112| |#$T1@@96| |#$T2@@68| |#$T3@@46| |#$T4@@21| |#$T5@@21| |#$R@@116|)) |#$T1@@96|)) :qid |unknown.0:0| :skolemid |985| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@112| |#$T1@@96| |#$T2@@68| |#$T3@@46| |#$T4@@21| |#$T5@@21| |#$R@@116|)) )))
(assert (forall ((arg0@@250 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_2 arg0@@250)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_2| :pattern ( (Tclass._System.___hTotalFunc6_2 arg0@@250)) )))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@97| T@U) (|#$T2@@69| T@U) (|#$T3@@47| T@U) (|#$T4@@22| T@U) (|#$T5@@22| T@U) (|#$R@@117| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$T3@@47|) TyType)) (= (type |#$T4@@22|) TyType)) (= (type |#$T5@@22|) TyType)) (= (type |#$R@@117|) TyType)) (= (Tclass._System.___hTotalFunc6_2 (Tclass._System.___hTotalFunc6 |#$T0@@113| |#$T1@@97| |#$T2@@69| |#$T3@@47| |#$T4@@22| |#$T5@@22| |#$R@@117|)) |#$T2@@69|)) :qid |unknown.0:0| :skolemid |986| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@113| |#$T1@@97| |#$T2@@69| |#$T3@@47| |#$T4@@22| |#$T5@@22| |#$R@@117|)) )))
(assert (forall ((arg0@@251 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_3 arg0@@251)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_3| :pattern ( (Tclass._System.___hTotalFunc6_3 arg0@@251)) )))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@98| T@U) (|#$T2@@70| T@U) (|#$T3@@48| T@U) (|#$T4@@23| T@U) (|#$T5@@23| T@U) (|#$R@@118| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$T3@@48|) TyType)) (= (type |#$T4@@23|) TyType)) (= (type |#$T5@@23|) TyType)) (= (type |#$R@@118|) TyType)) (= (Tclass._System.___hTotalFunc6_3 (Tclass._System.___hTotalFunc6 |#$T0@@114| |#$T1@@98| |#$T2@@70| |#$T3@@48| |#$T4@@23| |#$T5@@23| |#$R@@118|)) |#$T3@@48|)) :qid |unknown.0:0| :skolemid |987| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@114| |#$T1@@98| |#$T2@@70| |#$T3@@48| |#$T4@@23| |#$T5@@23| |#$R@@118|)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_4 arg0@@252)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_4| :pattern ( (Tclass._System.___hTotalFunc6_4 arg0@@252)) )))
(assert (forall ((|#$T0@@115| T@U) (|#$T1@@99| T@U) (|#$T2@@71| T@U) (|#$T3@@49| T@U) (|#$T4@@24| T@U) (|#$T5@@24| T@U) (|#$R@@119| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@115|) TyType) (= (type |#$T1@@99|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$T3@@49|) TyType)) (= (type |#$T4@@24|) TyType)) (= (type |#$T5@@24|) TyType)) (= (type |#$R@@119|) TyType)) (= (Tclass._System.___hTotalFunc6_4 (Tclass._System.___hTotalFunc6 |#$T0@@115| |#$T1@@99| |#$T2@@71| |#$T3@@49| |#$T4@@24| |#$T5@@24| |#$R@@119|)) |#$T4@@24|)) :qid |unknown.0:0| :skolemid |988| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@115| |#$T1@@99| |#$T2@@71| |#$T3@@49| |#$T4@@24| |#$T5@@24| |#$R@@119|)) )))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_5 arg0@@253)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_5| :pattern ( (Tclass._System.___hTotalFunc6_5 arg0@@253)) )))
(assert (forall ((|#$T0@@116| T@U) (|#$T1@@100| T@U) (|#$T2@@72| T@U) (|#$T3@@50| T@U) (|#$T4@@25| T@U) (|#$T5@@25| T@U) (|#$R@@120| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@116|) TyType) (= (type |#$T1@@100|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$T3@@50|) TyType)) (= (type |#$T4@@25|) TyType)) (= (type |#$T5@@25|) TyType)) (= (type |#$R@@120|) TyType)) (= (Tclass._System.___hTotalFunc6_5 (Tclass._System.___hTotalFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$T5@@25| |#$R@@120|)) |#$T5@@25|)) :qid |unknown.0:0| :skolemid |989| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@72| |#$T3@@50| |#$T4@@25| |#$T5@@25| |#$R@@120|)) )))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_6 arg0@@254)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_6| :pattern ( (Tclass._System.___hTotalFunc6_6 arg0@@254)) )))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@101| T@U) (|#$T2@@73| T@U) (|#$T3@@51| T@U) (|#$T4@@26| T@U) (|#$T5@@26| T@U) (|#$R@@121| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@101|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$T3@@51|) TyType)) (= (type |#$T4@@26|) TyType)) (= (type |#$T5@@26|) TyType)) (= (type |#$R@@121|) TyType)) (= (Tclass._System.___hTotalFunc6_6 (Tclass._System.___hTotalFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@73| |#$T3@@51| |#$T4@@26| |#$T5@@26| |#$R@@121|)) |#$R@@121|)) :qid |unknown.0:0| :skolemid |990| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@73| |#$T3@@51| |#$T4@@26| |#$T5@@26| |#$R@@121|)) )))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@102| T@U) (|#$T2@@74| T@U) (|#$T3@@52| T@U) (|#$T4@@27| T@U) (|#$T5@@27| T@U) (|#$R@@122| T@U) (bx@@86 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$T3@@52|) TyType)) (= (type |#$T4@@27|) TyType)) (= (type |#$T5@@27|) TyType)) (= (type |#$R@@122|) TyType)) (= (type bx@@86) BoxType)) ($IsBox bx@@86 (Tclass._System.___hTotalFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5@@27| |#$R@@122|))) (and (= ($Box ($Unbox HandleTypeType bx@@86)) bx@@86) ($Is ($Unbox HandleTypeType bx@@86) (Tclass._System.___hTotalFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5@@27| |#$R@@122|)))) :qid |unknown.0:0| :skolemid |991| :pattern ( ($IsBox bx@@86 (Tclass._System.___hTotalFunc6 |#$T0@@118| |#$T1@@102| |#$T2@@74| |#$T3@@52| |#$T4@@27| |#$T5@@27| |#$R@@122|))) )))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@103| T@U) (|#$T2@@75| T@U) (|#$T3@@53| T@U) (|#$T4@@28| T@U) (|#$T5@@28| T@U) (|#$R@@123| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$T3@@53|) TyType)) (= (type |#$T4@@28|) TyType)) (= (type |#$T5@@28|) TyType)) (= (type |#$R@@123|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (and (=> ($Is |f#0@@21| (Tclass._System.___hTotalFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@28| |#$R@@123|)) (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@28| |#$R@@123|)) (forall ((|x0#0@@17| T@U) (|x1#0@@13| T@U) (|x2#0@@9| T@U) (|x3#0@@5| T@U) (|x4#0@@1| T@U) (|x5#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@17|) BoxType) (= (type |x1#0@@13|) BoxType)) (= (type |x2#0@@9|) BoxType)) (= (type |x3#0@@5|) BoxType)) (= (type |x4#0@@1|) BoxType)) (= (type |x5#0@@1|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@17| |#$T0@@119|) ($IsBox |x1#0@@13| |#$T1@@103|)) ($IsBox |x2#0@@9| |#$T2@@75|)) ($IsBox |x3#0@@5| |#$T3@@53|)) ($IsBox |x4#0@@1| |#$T4@@28|)) ($IsBox |x5#0@@1| |#$T5@@28|))) (Requires6 |#$T0@@119| |#$T1@@103| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@28| |#$R@@123| $OneHeap |f#0@@21| |x0#0@@17| |x1#0@@13| |x2#0@@9| |x3#0@@5| |x4#0@@1| |x5#0@@1|)) :qid |unknown.0:0| :skolemid |992| :no-pattern (type |x0#0@@17|) :no-pattern (type |x1#0@@13|) :no-pattern (type |x2#0@@9|) :no-pattern (type |x3#0@@5|) :no-pattern (type |x4#0@@1|) :no-pattern (type |x5#0@@1|) :no-pattern (U_2_int |x0#0@@17|) :no-pattern (U_2_bool |x0#0@@17|) :no-pattern (U_2_int |x1#0@@13|) :no-pattern (U_2_bool |x1#0@@13|) :no-pattern (U_2_int |x2#0@@9|) :no-pattern (U_2_bool |x2#0@@9|) :no-pattern (U_2_int |x3#0@@5|) :no-pattern (U_2_bool |x3#0@@5|) :no-pattern (U_2_int |x4#0@@1|) :no-pattern (U_2_bool |x4#0@@1|) :no-pattern (U_2_int |x5#0@@1|) :no-pattern (U_2_bool |x5#0@@1|) )))) (=> (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@28| |#$R@@123|)) (forall ((|x0#0@@18| T@U) (|x1#0@@14| T@U) (|x2#0@@10| T@U) (|x3#0@@6| T@U) (|x4#0@@2| T@U) (|x5#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@18|) BoxType) (= (type |x1#0@@14|) BoxType)) (= (type |x2#0@@10|) BoxType)) (= (type |x3#0@@6|) BoxType)) (= (type |x4#0@@2|) BoxType)) (= (type |x5#0@@2|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@18| |#$T0@@119|) ($IsBox |x1#0@@14| |#$T1@@103|)) ($IsBox |x2#0@@10| |#$T2@@75|)) ($IsBox |x3#0@@6| |#$T3@@53|)) ($IsBox |x4#0@@2| |#$T4@@28|)) ($IsBox |x5#0@@2| |#$T5@@28|))) (Requires6 |#$T0@@119| |#$T1@@103| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@28| |#$R@@123| $OneHeap |f#0@@21| |x0#0@@18| |x1#0@@14| |x2#0@@10| |x3#0@@6| |x4#0@@2| |x5#0@@2|)) :qid |unknown.0:0| :skolemid |992| :no-pattern (type |x0#0@@18|) :no-pattern (type |x1#0@@14|) :no-pattern (type |x2#0@@10|) :no-pattern (type |x3#0@@6|) :no-pattern (type |x4#0@@2|) :no-pattern (type |x5#0@@2|) :no-pattern (U_2_int |x0#0@@18|) :no-pattern (U_2_bool |x0#0@@18|) :no-pattern (U_2_int |x1#0@@14|) :no-pattern (U_2_bool |x1#0@@14|) :no-pattern (U_2_int |x2#0@@10|) :no-pattern (U_2_bool |x2#0@@10|) :no-pattern (U_2_int |x3#0@@6|) :no-pattern (U_2_bool |x3#0@@6|) :no-pattern (U_2_int |x4#0@@2|) :no-pattern (U_2_bool |x4#0@@2|) :no-pattern (U_2_int |x5#0@@2|) :no-pattern (U_2_bool |x5#0@@2|) ))) ($Is |f#0@@21| (Tclass._System.___hTotalFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@28| |#$R@@123|))))) :qid |unknown.0:0| :skolemid |993| :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc6 |#$T0@@119| |#$T1@@103| |#$T2@@75| |#$T3@@53| |#$T4@@28| |#$T5@@28| |#$R@@123|))) )))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@104| T@U) (|#$T2@@76| T@U) (|#$T3@@54| T@U) (|#$T4@@29| T@U) (|#$T5@@29| T@U) (|#$R@@124| T@U) (|f#0@@22| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$T3@@54|) TyType)) (= (type |#$T4@@29|) TyType)) (= (type |#$T5@@29|) TyType)) (= (type |#$R@@124|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@29| |#$R@@124|) $h@@22) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@29| |#$R@@124|) $h@@22)) (=> ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@29| |#$R@@124|) $h@@22) ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@29| |#$R@@124|) $h@@22)))) :qid |unknown.0:0| :skolemid |994| :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc6 |#$T0@@120| |#$T1@@104| |#$T2@@76| |#$T3@@54| |#$T4@@29| |#$T5@@29| |#$R@@124|) $h@@22)) )))
(assert (forall ((arg0@@255 T@U) (arg1@@122 T@U) (arg2@@78 T@U) (arg3@@55 T@U) (arg4@@44 T@U) (arg5@@31 T@U) (arg6@@22 T@U) (arg7@@16 T@U) ) (! (= (type (Tclass._System.___hFunc7 arg0@@255 arg1@@122 arg2@@78 arg3@@55 arg4@@44 arg5@@31 arg6@@22 arg7@@16)) TyType) :qid |funType:Tclass._System.___hFunc7| :pattern ( (Tclass._System.___hFunc7 arg0@@255 arg1@@122 arg2@@78 arg3@@55 arg4@@44 arg5@@31 arg6@@22 arg7@@16)) )))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@105| T@U) (|#$T2@@77| T@U) (|#$T3@@55| T@U) (|#$T4@@30| T@U) (|#$T5@@30| T@U) (|#$T6| T@U) (|#$R@@125| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$T3@@55|) TyType)) (= (type |#$T4@@30|) TyType)) (= (type |#$T5@@30|) TyType)) (= (type |#$T6|) TyType)) (= (type |#$R@@125|) TyType)) (= (Tag (Tclass._System.___hFunc7 |#$T0@@121| |#$T1@@105| |#$T2@@77| |#$T3@@55| |#$T4@@30| |#$T5@@30| |#$T6| |#$R@@125|)) Tagclass._System.___hFunc7)) :qid |unknown.0:0| :skolemid |995| :pattern ( (Tclass._System.___hFunc7 |#$T0@@121| |#$T1@@105| |#$T2@@77| |#$T3@@55| |#$T4@@30| |#$T5@@30| |#$T6| |#$R@@125|)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (Tclass._System.___hFunc7_0 arg0@@256)) TyType) :qid |funType:Tclass._System.___hFunc7_0| :pattern ( (Tclass._System.___hFunc7_0 arg0@@256)) )))
(assert (forall ((|#$T0@@122| T@U) (|#$T1@@106| T@U) (|#$T2@@78| T@U) (|#$T3@@56| T@U) (|#$T4@@31| T@U) (|#$T5@@31| T@U) (|#$T6@@0| T@U) (|#$R@@126| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@122|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$T3@@56|) TyType)) (= (type |#$T4@@31|) TyType)) (= (type |#$T5@@31|) TyType)) (= (type |#$T6@@0|) TyType)) (= (type |#$R@@126|) TyType)) (= (Tclass._System.___hFunc7_0 (Tclass._System.___hFunc7 |#$T0@@122| |#$T1@@106| |#$T2@@78| |#$T3@@56| |#$T4@@31| |#$T5@@31| |#$T6@@0| |#$R@@126|)) |#$T0@@122|)) :qid |unknown.0:0| :skolemid |996| :pattern ( (Tclass._System.___hFunc7 |#$T0@@122| |#$T1@@106| |#$T2@@78| |#$T3@@56| |#$T4@@31| |#$T5@@31| |#$T6@@0| |#$R@@126|)) )))
(assert (forall ((arg0@@257 T@U) ) (! (= (type (Tclass._System.___hFunc7_1 arg0@@257)) TyType) :qid |funType:Tclass._System.___hFunc7_1| :pattern ( (Tclass._System.___hFunc7_1 arg0@@257)) )))
(assert (forall ((|#$T0@@123| T@U) (|#$T1@@107| T@U) (|#$T2@@79| T@U) (|#$T3@@57| T@U) (|#$T4@@32| T@U) (|#$T5@@32| T@U) (|#$T6@@1| T@U) (|#$R@@127| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@123|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$T3@@57|) TyType)) (= (type |#$T4@@32|) TyType)) (= (type |#$T5@@32|) TyType)) (= (type |#$T6@@1|) TyType)) (= (type |#$R@@127|) TyType)) (= (Tclass._System.___hFunc7_1 (Tclass._System.___hFunc7 |#$T0@@123| |#$T1@@107| |#$T2@@79| |#$T3@@57| |#$T4@@32| |#$T5@@32| |#$T6@@1| |#$R@@127|)) |#$T1@@107|)) :qid |unknown.0:0| :skolemid |997| :pattern ( (Tclass._System.___hFunc7 |#$T0@@123| |#$T1@@107| |#$T2@@79| |#$T3@@57| |#$T4@@32| |#$T5@@32| |#$T6@@1| |#$R@@127|)) )))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (Tclass._System.___hFunc7_2 arg0@@258)) TyType) :qid |funType:Tclass._System.___hFunc7_2| :pattern ( (Tclass._System.___hFunc7_2 arg0@@258)) )))
(assert (forall ((|#$T0@@124| T@U) (|#$T1@@108| T@U) (|#$T2@@80| T@U) (|#$T3@@58| T@U) (|#$T4@@33| T@U) (|#$T5@@33| T@U) (|#$T6@@2| T@U) (|#$R@@128| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@124|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$T3@@58|) TyType)) (= (type |#$T4@@33|) TyType)) (= (type |#$T5@@33|) TyType)) (= (type |#$T6@@2|) TyType)) (= (type |#$R@@128|) TyType)) (= (Tclass._System.___hFunc7_2 (Tclass._System.___hFunc7 |#$T0@@124| |#$T1@@108| |#$T2@@80| |#$T3@@58| |#$T4@@33| |#$T5@@33| |#$T6@@2| |#$R@@128|)) |#$T2@@80|)) :qid |unknown.0:0| :skolemid |998| :pattern ( (Tclass._System.___hFunc7 |#$T0@@124| |#$T1@@108| |#$T2@@80| |#$T3@@58| |#$T4@@33| |#$T5@@33| |#$T6@@2| |#$R@@128|)) )))
(assert (forall ((arg0@@259 T@U) ) (! (= (type (Tclass._System.___hFunc7_3 arg0@@259)) TyType) :qid |funType:Tclass._System.___hFunc7_3| :pattern ( (Tclass._System.___hFunc7_3 arg0@@259)) )))
(assert (forall ((|#$T0@@125| T@U) (|#$T1@@109| T@U) (|#$T2@@81| T@U) (|#$T3@@59| T@U) (|#$T4@@34| T@U) (|#$T5@@34| T@U) (|#$T6@@3| T@U) (|#$R@@129| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@125|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$T3@@59|) TyType)) (= (type |#$T4@@34|) TyType)) (= (type |#$T5@@34|) TyType)) (= (type |#$T6@@3|) TyType)) (= (type |#$R@@129|) TyType)) (= (Tclass._System.___hFunc7_3 (Tclass._System.___hFunc7 |#$T0@@125| |#$T1@@109| |#$T2@@81| |#$T3@@59| |#$T4@@34| |#$T5@@34| |#$T6@@3| |#$R@@129|)) |#$T3@@59|)) :qid |unknown.0:0| :skolemid |999| :pattern ( (Tclass._System.___hFunc7 |#$T0@@125| |#$T1@@109| |#$T2@@81| |#$T3@@59| |#$T4@@34| |#$T5@@34| |#$T6@@3| |#$R@@129|)) )))
(assert (forall ((arg0@@260 T@U) ) (! (= (type (Tclass._System.___hFunc7_4 arg0@@260)) TyType) :qid |funType:Tclass._System.___hFunc7_4| :pattern ( (Tclass._System.___hFunc7_4 arg0@@260)) )))
(assert (forall ((|#$T0@@126| T@U) (|#$T1@@110| T@U) (|#$T2@@82| T@U) (|#$T3@@60| T@U) (|#$T4@@35| T@U) (|#$T5@@35| T@U) (|#$T6@@4| T@U) (|#$R@@130| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@126|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$T3@@60|) TyType)) (= (type |#$T4@@35|) TyType)) (= (type |#$T5@@35|) TyType)) (= (type |#$T6@@4|) TyType)) (= (type |#$R@@130|) TyType)) (= (Tclass._System.___hFunc7_4 (Tclass._System.___hFunc7 |#$T0@@126| |#$T1@@110| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@35| |#$T6@@4| |#$R@@130|)) |#$T4@@35|)) :qid |unknown.0:0| :skolemid |1000| :pattern ( (Tclass._System.___hFunc7 |#$T0@@126| |#$T1@@110| |#$T2@@82| |#$T3@@60| |#$T4@@35| |#$T5@@35| |#$T6@@4| |#$R@@130|)) )))
(assert (forall ((arg0@@261 T@U) ) (! (= (type (Tclass._System.___hFunc7_5 arg0@@261)) TyType) :qid |funType:Tclass._System.___hFunc7_5| :pattern ( (Tclass._System.___hFunc7_5 arg0@@261)) )))
(assert (forall ((|#$T0@@127| T@U) (|#$T1@@111| T@U) (|#$T2@@83| T@U) (|#$T3@@61| T@U) (|#$T4@@36| T@U) (|#$T5@@36| T@U) (|#$T6@@5| T@U) (|#$R@@131| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@127|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$T3@@61|) TyType)) (= (type |#$T4@@36|) TyType)) (= (type |#$T5@@36|) TyType)) (= (type |#$T6@@5|) TyType)) (= (type |#$R@@131|) TyType)) (= (Tclass._System.___hFunc7_5 (Tclass._System.___hFunc7 |#$T0@@127| |#$T1@@111| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@36| |#$T6@@5| |#$R@@131|)) |#$T5@@36|)) :qid |unknown.0:0| :skolemid |1001| :pattern ( (Tclass._System.___hFunc7 |#$T0@@127| |#$T1@@111| |#$T2@@83| |#$T3@@61| |#$T4@@36| |#$T5@@36| |#$T6@@5| |#$R@@131|)) )))
(assert (forall ((arg0@@262 T@U) ) (! (= (type (Tclass._System.___hFunc7_6 arg0@@262)) TyType) :qid |funType:Tclass._System.___hFunc7_6| :pattern ( (Tclass._System.___hFunc7_6 arg0@@262)) )))
(assert (forall ((|#$T0@@128| T@U) (|#$T1@@112| T@U) (|#$T2@@84| T@U) (|#$T3@@62| T@U) (|#$T4@@37| T@U) (|#$T5@@37| T@U) (|#$T6@@6| T@U) (|#$R@@132| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@128|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$T3@@62|) TyType)) (= (type |#$T4@@37|) TyType)) (= (type |#$T5@@37|) TyType)) (= (type |#$T6@@6|) TyType)) (= (type |#$R@@132|) TyType)) (= (Tclass._System.___hFunc7_6 (Tclass._System.___hFunc7 |#$T0@@128| |#$T1@@112| |#$T2@@84| |#$T3@@62| |#$T4@@37| |#$T5@@37| |#$T6@@6| |#$R@@132|)) |#$T6@@6|)) :qid |unknown.0:0| :skolemid |1002| :pattern ( (Tclass._System.___hFunc7 |#$T0@@128| |#$T1@@112| |#$T2@@84| |#$T3@@62| |#$T4@@37| |#$T5@@37| |#$T6@@6| |#$R@@132|)) )))
(assert (forall ((arg0@@263 T@U) ) (! (= (type (Tclass._System.___hFunc7_7 arg0@@263)) TyType) :qid |funType:Tclass._System.___hFunc7_7| :pattern ( (Tclass._System.___hFunc7_7 arg0@@263)) )))
(assert (forall ((|#$T0@@129| T@U) (|#$T1@@113| T@U) (|#$T2@@85| T@U) (|#$T3@@63| T@U) (|#$T4@@38| T@U) (|#$T5@@38| T@U) (|#$T6@@7| T@U) (|#$R@@133| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@129|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$T3@@63|) TyType)) (= (type |#$T4@@38|) TyType)) (= (type |#$T5@@38|) TyType)) (= (type |#$T6@@7|) TyType)) (= (type |#$R@@133|) TyType)) (= (Tclass._System.___hFunc7_7 (Tclass._System.___hFunc7 |#$T0@@129| |#$T1@@113| |#$T2@@85| |#$T3@@63| |#$T4@@38| |#$T5@@38| |#$T6@@7| |#$R@@133|)) |#$R@@133|)) :qid |unknown.0:0| :skolemid |1003| :pattern ( (Tclass._System.___hFunc7 |#$T0@@129| |#$T1@@113| |#$T2@@85| |#$T3@@63| |#$T4@@38| |#$T5@@38| |#$T6@@7| |#$R@@133|)) )))
(assert (forall ((|#$T0@@130| T@U) (|#$T1@@114| T@U) (|#$T2@@86| T@U) (|#$T3@@64| T@U) (|#$T4@@39| T@U) (|#$T5@@39| T@U) (|#$T6@@8| T@U) (|#$R@@134| T@U) (bx@@87 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@130|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$T3@@64|) TyType)) (= (type |#$T4@@39|) TyType)) (= (type |#$T5@@39|) TyType)) (= (type |#$T6@@8|) TyType)) (= (type |#$R@@134|) TyType)) (= (type bx@@87) BoxType)) ($IsBox bx@@87 (Tclass._System.___hFunc7 |#$T0@@130| |#$T1@@114| |#$T2@@86| |#$T3@@64| |#$T4@@39| |#$T5@@39| |#$T6@@8| |#$R@@134|))) (and (= ($Box ($Unbox HandleTypeType bx@@87)) bx@@87) ($Is ($Unbox HandleTypeType bx@@87) (Tclass._System.___hFunc7 |#$T0@@130| |#$T1@@114| |#$T2@@86| |#$T3@@64| |#$T4@@39| |#$T5@@39| |#$T6@@8| |#$R@@134|)))) :qid |unknown.0:0| :skolemid |1004| :pattern ( ($IsBox bx@@87 (Tclass._System.___hFunc7 |#$T0@@130| |#$T1@@114| |#$T2@@86| |#$T3@@64| |#$T4@@39| |#$T5@@39| |#$T6@@8| |#$R@@134|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@264 T@T) (arg1@@123 T@T) (arg2@@79 T@T) (arg3@@56 T@T) (arg4@@45 T@T) (arg5@@32 T@T) (arg6@@23 T@T) (arg7@@17 T@T) (arg8@@6 T@T) ) (! (= (Ctor (MapType7Type arg0@@264 arg1@@123 arg2@@79 arg3@@56 arg4@@45 arg5@@32 arg6@@23 arg7@@17 arg8@@6)) 26) :qid |ctor:MapType7Type| )) (forall ((arg0@@265 T@T) (arg1@@124 T@T) (arg2@@80 T@T) (arg3@@57 T@T) (arg4@@46 T@T) (arg5@@33 T@T) (arg6@@24 T@T) (arg7@@18 T@T) (arg8@@7 T@T) ) (! (= (MapType7TypeInv0 (MapType7Type arg0@@265 arg1@@124 arg2@@80 arg3@@57 arg4@@46 arg5@@33 arg6@@24 arg7@@18 arg8@@7)) arg0@@265) :qid |typeInv:MapType7TypeInv0| :pattern ( (MapType7Type arg0@@265 arg1@@124 arg2@@80 arg3@@57 arg4@@46 arg5@@33 arg6@@24 arg7@@18 arg8@@7)) ))) (forall ((arg0@@266 T@T) (arg1@@125 T@T) (arg2@@81 T@T) (arg3@@58 T@T) (arg4@@47 T@T) (arg5@@34 T@T) (arg6@@25 T@T) (arg7@@19 T@T) (arg8@@8 T@T) ) (! (= (MapType7TypeInv1 (MapType7Type arg0@@266 arg1@@125 arg2@@81 arg3@@58 arg4@@47 arg5@@34 arg6@@25 arg7@@19 arg8@@8)) arg1@@125) :qid |typeInv:MapType7TypeInv1| :pattern ( (MapType7Type arg0@@266 arg1@@125 arg2@@81 arg3@@58 arg4@@47 arg5@@34 arg6@@25 arg7@@19 arg8@@8)) ))) (forall ((arg0@@267 T@T) (arg1@@126 T@T) (arg2@@82 T@T) (arg3@@59 T@T) (arg4@@48 T@T) (arg5@@35 T@T) (arg6@@26 T@T) (arg7@@20 T@T) (arg8@@9 T@T) ) (! (= (MapType7TypeInv2 (MapType7Type arg0@@267 arg1@@126 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@26 arg7@@20 arg8@@9)) arg2@@82) :qid |typeInv:MapType7TypeInv2| :pattern ( (MapType7Type arg0@@267 arg1@@126 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@26 arg7@@20 arg8@@9)) ))) (forall ((arg0@@268 T@T) (arg1@@127 T@T) (arg2@@83 T@T) (arg3@@60 T@T) (arg4@@49 T@T) (arg5@@36 T@T) (arg6@@27 T@T) (arg7@@21 T@T) (arg8@@10 T@T) ) (! (= (MapType7TypeInv3 (MapType7Type arg0@@268 arg1@@127 arg2@@83 arg3@@60 arg4@@49 arg5@@36 arg6@@27 arg7@@21 arg8@@10)) arg3@@60) :qid |typeInv:MapType7TypeInv3| :pattern ( (MapType7Type arg0@@268 arg1@@127 arg2@@83 arg3@@60 arg4@@49 arg5@@36 arg6@@27 arg7@@21 arg8@@10)) ))) (forall ((arg0@@269 T@T) (arg1@@128 T@T) (arg2@@84 T@T) (arg3@@61 T@T) (arg4@@50 T@T) (arg5@@37 T@T) (arg6@@28 T@T) (arg7@@22 T@T) (arg8@@11 T@T) ) (! (= (MapType7TypeInv4 (MapType7Type arg0@@269 arg1@@128 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@28 arg7@@22 arg8@@11)) arg4@@50) :qid |typeInv:MapType7TypeInv4| :pattern ( (MapType7Type arg0@@269 arg1@@128 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@28 arg7@@22 arg8@@11)) ))) (forall ((arg0@@270 T@T) (arg1@@129 T@T) (arg2@@85 T@T) (arg3@@62 T@T) (arg4@@51 T@T) (arg5@@38 T@T) (arg6@@29 T@T) (arg7@@23 T@T) (arg8@@12 T@T) ) (! (= (MapType7TypeInv5 (MapType7Type arg0@@270 arg1@@129 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@29 arg7@@23 arg8@@12)) arg5@@38) :qid |typeInv:MapType7TypeInv5| :pattern ( (MapType7Type arg0@@270 arg1@@129 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@29 arg7@@23 arg8@@12)) ))) (forall ((arg0@@271 T@T) (arg1@@130 T@T) (arg2@@86 T@T) (arg3@@63 T@T) (arg4@@52 T@T) (arg5@@39 T@T) (arg6@@30 T@T) (arg7@@24 T@T) (arg8@@13 T@T) ) (! (= (MapType7TypeInv6 (MapType7Type arg0@@271 arg1@@130 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@30 arg7@@24 arg8@@13)) arg6@@30) :qid |typeInv:MapType7TypeInv6| :pattern ( (MapType7Type arg0@@271 arg1@@130 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@30 arg7@@24 arg8@@13)) ))) (forall ((arg0@@272 T@T) (arg1@@131 T@T) (arg2@@87 T@T) (arg3@@64 T@T) (arg4@@53 T@T) (arg5@@40 T@T) (arg6@@31 T@T) (arg7@@25 T@T) (arg8@@14 T@T) ) (! (= (MapType7TypeInv7 (MapType7Type arg0@@272 arg1@@131 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@31 arg7@@25 arg8@@14)) arg7@@25) :qid |typeInv:MapType7TypeInv7| :pattern ( (MapType7Type arg0@@272 arg1@@131 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@31 arg7@@25 arg8@@14)) ))) (forall ((arg0@@273 T@T) (arg1@@132 T@T) (arg2@@88 T@T) (arg3@@65 T@T) (arg4@@54 T@T) (arg5@@41 T@T) (arg6@@32 T@T) (arg7@@26 T@T) (arg8@@15 T@T) ) (! (= (MapType7TypeInv8 (MapType7Type arg0@@273 arg1@@132 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@32 arg7@@26 arg8@@15)) arg8@@15) :qid |typeInv:MapType7TypeInv8| :pattern ( (MapType7Type arg0@@273 arg1@@132 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@32 arg7@@26 arg8@@15)) ))) (forall ((arg0@@274 T@U) (arg1@@133 T@U) (arg2@@89 T@U) (arg3@@66 T@U) (arg4@@55 T@U) (arg5@@42 T@U) (arg6@@33 T@U) (arg7@@27 T@U) (arg8@@16 T@U) ) (! (let ((aVar8 (MapType7TypeInv8 (type arg0@@274)))) (= (type (MapType7Select arg0@@274 arg1@@133 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@33 arg7@@27 arg8@@16)) aVar8)) :qid |funType:MapType7Select| :pattern ( (MapType7Select arg0@@274 arg1@@133 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@33 arg7@@27 arg8@@16)) ))) (forall ((arg0@@275 T@U) (arg1@@134 T@U) (arg2@@90 T@U) (arg3@@67 T@U) (arg4@@56 T@U) (arg5@@43 T@U) (arg6@@34 T@U) (arg7@@28 T@U) (arg8@@17 T@U) (arg9@@3 T@U) ) (! (let ((aVar8@@0 (type arg9@@3))) (let ((aVar7@@2 (type arg8@@17))) (let ((aVar6@@0 (type arg7@@28))) (let ((aVar5@@3 (type arg6@@34))) (let ((aVar4@@4 (type arg5@@43))) (let ((aVar3@@5 (type arg4@@56))) (let ((aVar2@@6 (type arg3@@67))) (let ((aVar1@@7 (type arg2@@90))) (let ((aVar0@@5 (type arg1@@134))) (= (type (MapType7Store arg0@@275 arg1@@134 arg2@@90 arg3@@67 arg4@@56 arg5@@43 arg6@@34 arg7@@28 arg8@@17 arg9@@3)) (MapType7Type aVar0@@5 aVar1@@7 aVar2@@6 aVar3@@5 aVar4@@4 aVar5@@3 aVar6@@0 aVar7@@2 aVar8@@0))))))))))) :qid |funType:MapType7Store| :pattern ( (MapType7Store arg0@@275 arg1@@134 arg2@@90 arg3@@67 arg4@@56 arg5@@43 arg6@@34 arg7@@28 arg8@@17 arg9@@3)) ))) (forall ((m@@58 T@U) (x0@@36 T@U) (x1@@30 T@U) (x2@@26 T@U) (x3@@21 T@U) (x4@@15 T@U) (x5@@8 T@U) (x6@@8 T@U) (x7 T@U) (val@@37 T@U) ) (! (let ((aVar8@@1 (MapType7TypeInv8 (type m@@58)))) (=> (= (type val@@37) aVar8@@1) (= (MapType7Select (MapType7Store m@@58 x0@@36 x1@@30 x2@@26 x3@@21 x4@@15 x5@@8 x6@@8 x7 val@@37) x0@@36 x1@@30 x2@@26 x3@@21 x4@@15 x5@@8 x6@@8 x7) val@@37))) :qid |mapAx0:MapType7Select| :weight 0 ))) (and (and (and (and (and (and (and (and (forall ((val@@38 T@U) (m@@59 T@U) (x0@@37 T@U) (x1@@31 T@U) (x2@@27 T@U) (x3@@22 T@U) (x4@@16 T@U) (x5@@9 T@U) (x6@@9 T@U) (x7@@0 T@U) (y0@@29 T@U) (y1@@25 T@U) (y2@@22 T@U) (y3@@18 T@U) (y4@@13 T@U) (y5@@7 T@U) (y6@@7 T@U) (y7 T@U) ) (!  (or (= x0@@37 y0@@29) (= (MapType7Select (MapType7Store m@@59 x0@@37 x1@@31 x2@@27 x3@@22 x4@@16 x5@@9 x6@@9 x7@@0 val@@38) y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@7 y7) (MapType7Select m@@59 y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@7 y7))) :qid |mapAx1:MapType7Select:0| :weight 0 )) (forall ((val@@39 T@U) (m@@60 T@U) (x0@@38 T@U) (x1@@32 T@U) (x2@@28 T@U) (x3@@23 T@U) (x4@@17 T@U) (x5@@10 T@U) (x6@@10 T@U) (x7@@1 T@U) (y0@@30 T@U) (y1@@26 T@U) (y2@@23 T@U) (y3@@19 T@U) (y4@@14 T@U) (y5@@8 T@U) (y6@@8 T@U) (y7@@0 T@U) ) (!  (or (= x1@@32 y1@@26) (= (MapType7Select (MapType7Store m@@60 x0@@38 x1@@32 x2@@28 x3@@23 x4@@17 x5@@10 x6@@10 x7@@1 val@@39) y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@8 y7@@0) (MapType7Select m@@60 y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@8 y7@@0))) :qid |mapAx1:MapType7Select:1| :weight 0 ))) (forall ((val@@40 T@U) (m@@61 T@U) (x0@@39 T@U) (x1@@33 T@U) (x2@@29 T@U) (x3@@24 T@U) (x4@@18 T@U) (x5@@11 T@U) (x6@@11 T@U) (x7@@2 T@U) (y0@@31 T@U) (y1@@27 T@U) (y2@@24 T@U) (y3@@20 T@U) (y4@@15 T@U) (y5@@9 T@U) (y6@@9 T@U) (y7@@1 T@U) ) (!  (or (= x2@@29 y2@@24) (= (MapType7Select (MapType7Store m@@61 x0@@39 x1@@33 x2@@29 x3@@24 x4@@18 x5@@11 x6@@11 x7@@2 val@@40) y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@9 y7@@1) (MapType7Select m@@61 y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@9 y7@@1))) :qid |mapAx1:MapType7Select:2| :weight 0 ))) (forall ((val@@41 T@U) (m@@62 T@U) (x0@@40 T@U) (x1@@34 T@U) (x2@@30 T@U) (x3@@25 T@U) (x4@@19 T@U) (x5@@12 T@U) (x6@@12 T@U) (x7@@3 T@U) (y0@@32 T@U) (y1@@28 T@U) (y2@@25 T@U) (y3@@21 T@U) (y4@@16 T@U) (y5@@10 T@U) (y6@@10 T@U) (y7@@2 T@U) ) (!  (or (= x3@@25 y3@@21) (= (MapType7Select (MapType7Store m@@62 x0@@40 x1@@34 x2@@30 x3@@25 x4@@19 x5@@12 x6@@12 x7@@3 val@@41) y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@10 y7@@2) (MapType7Select m@@62 y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@10 y7@@2))) :qid |mapAx1:MapType7Select:3| :weight 0 ))) (forall ((val@@42 T@U) (m@@63 T@U) (x0@@41 T@U) (x1@@35 T@U) (x2@@31 T@U) (x3@@26 T@U) (x4@@20 T@U) (x5@@13 T@U) (x6@@13 T@U) (x7@@4 T@U) (y0@@33 T@U) (y1@@29 T@U) (y2@@26 T@U) (y3@@22 T@U) (y4@@17 T@U) (y5@@11 T@U) (y6@@11 T@U) (y7@@3 T@U) ) (!  (or (= x4@@20 y4@@17) (= (MapType7Select (MapType7Store m@@63 x0@@41 x1@@35 x2@@31 x3@@26 x4@@20 x5@@13 x6@@13 x7@@4 val@@42) y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@11 y7@@3) (MapType7Select m@@63 y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@11 y7@@3))) :qid |mapAx1:MapType7Select:4| :weight 0 ))) (forall ((val@@43 T@U) (m@@64 T@U) (x0@@42 T@U) (x1@@36 T@U) (x2@@32 T@U) (x3@@27 T@U) (x4@@21 T@U) (x5@@14 T@U) (x6@@14 T@U) (x7@@5 T@U) (y0@@34 T@U) (y1@@30 T@U) (y2@@27 T@U) (y3@@23 T@U) (y4@@18 T@U) (y5@@12 T@U) (y6@@12 T@U) (y7@@4 T@U) ) (!  (or (= x5@@14 y5@@12) (= (MapType7Select (MapType7Store m@@64 x0@@42 x1@@36 x2@@32 x3@@27 x4@@21 x5@@14 x6@@14 x7@@5 val@@43) y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@12 y7@@4) (MapType7Select m@@64 y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@12 y7@@4))) :qid |mapAx1:MapType7Select:5| :weight 0 ))) (forall ((val@@44 T@U) (m@@65 T@U) (x0@@43 T@U) (x1@@37 T@U) (x2@@33 T@U) (x3@@28 T@U) (x4@@22 T@U) (x5@@15 T@U) (x6@@15 T@U) (x7@@6 T@U) (y0@@35 T@U) (y1@@31 T@U) (y2@@28 T@U) (y3@@24 T@U) (y4@@19 T@U) (y5@@13 T@U) (y6@@13 T@U) (y7@@5 T@U) ) (!  (or (= x6@@15 y6@@13) (= (MapType7Select (MapType7Store m@@65 x0@@43 x1@@37 x2@@33 x3@@28 x4@@22 x5@@15 x6@@15 x7@@6 val@@44) y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@13 y7@@5) (MapType7Select m@@65 y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@13 y7@@5))) :qid |mapAx1:MapType7Select:6| :weight 0 ))) (forall ((val@@45 T@U) (m@@66 T@U) (x0@@44 T@U) (x1@@38 T@U) (x2@@34 T@U) (x3@@29 T@U) (x4@@23 T@U) (x5@@16 T@U) (x6@@16 T@U) (x7@@7 T@U) (y0@@36 T@U) (y1@@32 T@U) (y2@@29 T@U) (y3@@25 T@U) (y4@@20 T@U) (y5@@14 T@U) (y6@@14 T@U) (y7@@6 T@U) ) (!  (or (= x7@@7 y7@@6) (= (MapType7Select (MapType7Store m@@66 x0@@44 x1@@38 x2@@34 x3@@29 x4@@23 x5@@16 x6@@16 x7@@7 val@@45) y0@@36 y1@@32 y2@@29 y3@@25 y4@@20 y5@@14 y6@@14 y7@@6) (MapType7Select m@@66 y0@@36 y1@@32 y2@@29 y3@@25 y4@@20 y5@@14 y6@@14 y7@@6))) :qid |mapAx1:MapType7Select:7| :weight 0 ))) (forall ((val@@46 T@U) (m@@67 T@U) (x0@@45 T@U) (x1@@39 T@U) (x2@@35 T@U) (x3@@30 T@U) (x4@@24 T@U) (x5@@17 T@U) (x6@@17 T@U) (x7@@8 T@U) (y0@@37 T@U) (y1@@33 T@U) (y2@@30 T@U) (y3@@26 T@U) (y4@@21 T@U) (y5@@15 T@U) (y6@@15 T@U) (y7@@7 T@U) ) (!  (or true (= (MapType7Select (MapType7Store m@@67 x0@@45 x1@@39 x2@@35 x3@@30 x4@@24 x5@@17 x6@@17 x7@@8 val@@46) y0@@37 y1@@33 y2@@30 y3@@26 y4@@21 y5@@15 y6@@15 y7@@7) (MapType7Select m@@67 y0@@37 y1@@33 y2@@30 y3@@26 y4@@21 y5@@15 y6@@15 y7@@7))) :qid |mapAx2:MapType7Select| :weight 0 )))) (forall ((arg0@@276 T@U) (arg1@@135 T@U) (arg2@@91 T@U) (arg3@@68 T@U) (arg4@@57 T@U) (arg5@@44 T@U) (arg6@@35 T@U) (arg7@@29 T@U) (arg8@@18 T@U) (arg9@@4 T@U) (arg10@@3 T@U) (arg11@@1 T@U) (arg12@@1 T@U) (arg13@@1 T@U) (arg14@@1 T@U) (arg15 T@U) (arg16 T@U) ) (! (= (type (Apply7 arg0@@276 arg1@@135 arg2@@91 arg3@@68 arg4@@57 arg5@@44 arg6@@35 arg7@@29 arg8@@18 arg9@@4 arg10@@3 arg11@@1 arg12@@1 arg13@@1 arg14@@1 arg15 arg16)) BoxType) :qid |funType:Apply7| :pattern ( (Apply7 arg0@@276 arg1@@135 arg2@@91 arg3@@68 arg4@@57 arg5@@44 arg6@@35 arg7@@29 arg8@@18 arg9@@4 arg10@@3 arg11@@1 arg12@@1 arg13@@1 arg14@@1 arg15 arg16)) ))) (forall ((arg0@@277 T@U) (arg1@@136 T@U) (arg2@@92 T@U) ) (! (= (type (Handle7 arg0@@277 arg1@@136 arg2@@92)) HandleTypeType) :qid |funType:Handle7| :pattern ( (Handle7 arg0@@277 arg1@@136 arg2@@92)) ))))
(assert (forall ((t0@@102 T@U) (t1@@78 T@U) (t2@@59 T@U) (t3@@44 T@U) (t4@@29 T@U) (t5@@14 T@U) (t6@@14 T@U) (t7 T@U) (heap@@31 T@U) (h@@62 T@U) (r@@36 T@U) (rd@@17 T@U) (bx0@@79 T@U) (bx1@@63 T@U) (bx2@@47 T@U) (bx3@@31 T@U) (bx4@@15 T@U) (bx5@@15 T@U) (bx6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@102) TyType) (= (type t1@@78) TyType)) (= (type t2@@59) TyType)) (= (type t3@@44) TyType)) (= (type t4@@29) TyType)) (= (type t5@@14) TyType)) (= (type t6@@14) TyType)) (= (type t7) TyType)) (= (type heap@@31) (MapType0Type refType MapType1Type))) (= (type h@@62) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@36) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@17) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@79) BoxType)) (= (type bx1@@63) BoxType)) (= (type bx2@@47) BoxType)) (= (type bx3@@31) BoxType)) (= (type bx4@@15) BoxType)) (= (type bx5@@15) BoxType)) (= (type bx6) BoxType)) (= (Apply7 t0@@102 t1@@78 t2@@59 t3@@44 t4@@29 t5@@14 t6@@14 t7 heap@@31 (Handle7 h@@62 r@@36 rd@@17) bx0@@79 bx1@@63 bx2@@47 bx3@@31 bx4@@15 bx5@@15 bx6) (MapType7Select h@@62 heap@@31 bx0@@79 bx1@@63 bx2@@47 bx3@@31 bx4@@15 bx5@@15 bx6))) :qid |unknown.0:0| :skolemid |1005| :pattern ( (Apply7 t0@@102 t1@@78 t2@@59 t3@@44 t4@@29 t5@@14 t6@@14 t7 heap@@31 (Handle7 h@@62 r@@36 rd@@17) bx0@@79 bx1@@63 bx2@@47 bx3@@31 bx4@@15 bx5@@15 bx6)) )))
(assert (forall ((t0@@103 T@U) (t1@@79 T@U) (t2@@60 T@U) (t3@@45 T@U) (t4@@30 T@U) (t5@@15 T@U) (t6@@15 T@U) (t7@@0 T@U) (heap@@32 T@U) (h@@63 T@U) (r@@37 T@U) (rd@@18 T@U) (bx0@@80 T@U) (bx1@@64 T@U) (bx2@@48 T@U) (bx3@@32 T@U) (bx4@@16 T@U) (bx5@@16 T@U) (bx6@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@103) TyType) (= (type t1@@79) TyType)) (= (type t2@@60) TyType)) (= (type t3@@45) TyType)) (= (type t4@@30) TyType)) (= (type t5@@15) TyType)) (= (type t6@@15) TyType)) (= (type t7@@0) TyType)) (= (type heap@@32) (MapType0Type refType MapType1Type))) (= (type h@@63) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@37) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@18) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@80) BoxType)) (= (type bx1@@64) BoxType)) (= (type bx2@@48) BoxType)) (= (type bx3@@32) BoxType)) (= (type bx4@@16) BoxType)) (= (type bx5@@16) BoxType)) (= (type bx6@@0) BoxType)) (U_2_bool (MapType7Select r@@37 heap@@32 bx0@@80 bx1@@64 bx2@@48 bx3@@32 bx4@@16 bx5@@16 bx6@@0))) (Requires7 t0@@103 t1@@79 t2@@60 t3@@45 t4@@30 t5@@15 t6@@15 t7@@0 heap@@32 (Handle7 h@@63 r@@37 rd@@18) bx0@@80 bx1@@64 bx2@@48 bx3@@32 bx4@@16 bx5@@16 bx6@@0)) :qid |unknown.0:0| :skolemid |1006| :pattern ( (Requires7 t0@@103 t1@@79 t2@@60 t3@@45 t4@@30 t5@@15 t6@@15 t7@@0 heap@@32 (Handle7 h@@63 r@@37 rd@@18) bx0@@80 bx1@@64 bx2@@48 bx3@@32 bx4@@16 bx5@@16 bx6@@0)) )))
(assert (forall ((arg0@@278 T@U) (arg1@@137 T@U) (arg2@@93 T@U) (arg3@@69 T@U) (arg4@@58 T@U) (arg5@@45 T@U) (arg6@@36 T@U) (arg7@@30 T@U) (arg8@@19 T@U) (arg9@@5 T@U) (arg10@@4 T@U) (arg11@@2 T@U) (arg12@@2 T@U) (arg13@@2 T@U) (arg14@@2 T@U) (arg15@@0 T@U) (arg16@@0 T@U) ) (! (= (type (Reads7 arg0@@278 arg1@@137 arg2@@93 arg3@@69 arg4@@58 arg5@@45 arg6@@36 arg7@@30 arg8@@19 arg9@@5 arg10@@4 arg11@@2 arg12@@2 arg13@@2 arg14@@2 arg15@@0 arg16@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads7| :pattern ( (Reads7 arg0@@278 arg1@@137 arg2@@93 arg3@@69 arg4@@58 arg5@@45 arg6@@36 arg7@@30 arg8@@19 arg9@@5 arg10@@4 arg11@@2 arg12@@2 arg13@@2 arg14@@2 arg15@@0 arg16@@0)) )))
(assert (forall ((t0@@104 T@U) (t1@@80 T@U) (t2@@61 T@U) (t3@@46 T@U) (t4@@31 T@U) (t5@@16 T@U) (t6@@16 T@U) (t7@@1 T@U) (heap@@33 T@U) (h@@64 T@U) (r@@38 T@U) (rd@@19 T@U) (bx0@@81 T@U) (bx1@@65 T@U) (bx2@@49 T@U) (bx3@@33 T@U) (bx4@@17 T@U) (bx5@@17 T@U) (bx6@@1 T@U) (bx@@88 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@104) TyType) (= (type t1@@80) TyType)) (= (type t2@@61) TyType)) (= (type t3@@46) TyType)) (= (type t4@@31) TyType)) (= (type t5@@16) TyType)) (= (type t6@@16) TyType)) (= (type t7@@1) TyType)) (= (type heap@@33) (MapType0Type refType MapType1Type))) (= (type h@@64) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@38) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@19) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@81) BoxType)) (= (type bx1@@65) BoxType)) (= (type bx2@@49) BoxType)) (= (type bx3@@33) BoxType)) (= (type bx4@@17) BoxType)) (= (type bx5@@17) BoxType)) (= (type bx6@@1) BoxType)) (= (type bx@@88) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads7 t0@@104 t1@@80 t2@@61 t3@@46 t4@@31 t5@@16 t6@@16 t7@@1 heap@@33 (Handle7 h@@64 r@@38 rd@@19) bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@17 bx6@@1) bx@@88)) (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@17 bx6@@1) bx@@88))) (=> (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@17 bx6@@1) bx@@88)) (U_2_bool (MapType0Select (Reads7 t0@@104 t1@@80 t2@@61 t3@@46 t4@@31 t5@@16 t6@@16 t7@@1 heap@@33 (Handle7 h@@64 r@@38 rd@@19) bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@17 bx6@@1) bx@@88))))) :qid |unknown.0:0| :skolemid |1007| :pattern ( (MapType0Select (Reads7 t0@@104 t1@@80 t2@@61 t3@@46 t4@@31 t5@@16 t6@@16 t7@@1 heap@@33 (Handle7 h@@64 r@@38 rd@@19) bx0@@81 bx1@@65 bx2@@49 bx3@@33 bx4@@17 bx5@@17 bx6@@1) bx@@88)) )))
(assert (forall ((t0@@105 T@U) (t1@@81 T@U) (t2@@62 T@U) (t3@@47 T@U) (t4@@32 T@U) (t5@@17 T@U) (t6@@17 T@U) (t7@@2 T@U) (h0@@36 T@U) (h1@@36 T@U) (f@@77 T@U) (bx0@@82 T@U) (bx1@@66 T@U) (bx2@@50 T@U) (bx3@@34 T@U) (bx4@@18 T@U) (bx5@@18 T@U) (bx6@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@105) TyType) (= (type t1@@81) TyType)) (= (type t2@@62) TyType)) (= (type t3@@47) TyType)) (= (type t4@@32) TyType)) (= (type t5@@17) TyType)) (= (type t6@@17) TyType)) (= (type t7@@2) TyType)) (= (type h0@@36) (MapType0Type refType MapType1Type))) (= (type h1@@36) (MapType0Type refType MapType1Type))) (= (type f@@77) HandleTypeType)) (= (type bx0@@82) BoxType)) (= (type bx1@@66) BoxType)) (= (type bx2@@50) BoxType)) (= (type bx3@@34) BoxType)) (= (type bx4@@18) BoxType)) (= (type bx5@@18) BoxType)) (= (type bx6@@2) BoxType)) (and (and (and ($HeapSucc h0@@36 h1@@36) (and ($IsGoodHeap h0@@36) ($IsGoodHeap h1@@36))) (and (and (and (and (and (and (and ($IsBox bx0@@82 t0@@105) ($IsBox bx1@@66 t1@@81)) ($IsBox bx2@@50 t2@@62)) ($IsBox bx3@@34 t3@@47)) ($IsBox bx4@@18 t4@@32)) ($IsBox bx5@@18 t5@@17)) ($IsBox bx6@@2 t6@@17)) ($Is f@@77 (Tclass._System.___hFunc7 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17 t7@@2)))) (forall ((o@@90 T@U) (fld@@35 T@U) ) (! (let ((a@@120 (FieldTypeInv0 (type fld@@35)))) (=> (and (and (= (type o@@90) refType) (= (type fld@@35) (FieldType a@@120))) (and (not (= o@@90 null)) (U_2_bool (MapType0Select (Reads7 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17 t7@@2 h0@@36 f@@77 bx0@@82 bx1@@66 bx2@@50 bx3@@34 bx4@@18 bx5@@18 bx6@@2) ($Box o@@90))))) (= (MapType1Select (MapType0Select h0@@36 o@@90) fld@@35) (MapType1Select (MapType0Select h1@@36 o@@90) fld@@35)))) :qid |unknown.0:0| :skolemid |1008| :no-pattern (type o@@90) :no-pattern (type fld@@35) :no-pattern (U_2_int o@@90) :no-pattern (U_2_bool o@@90) :no-pattern (U_2_int fld@@35) :no-pattern (U_2_bool fld@@35) )))) (= (Reads7 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17 t7@@2 h0@@36 f@@77 bx0@@82 bx1@@66 bx2@@50 bx3@@34 bx4@@18 bx5@@18 bx6@@2) (Reads7 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17 t7@@2 h1@@36 f@@77 bx0@@82 bx1@@66 bx2@@50 bx3@@34 bx4@@18 bx5@@18 bx6@@2))) :qid |unknown.0:0| :skolemid |1009| :pattern ( ($HeapSucc h0@@36 h1@@36) (Reads7 t0@@105 t1@@81 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17 t7@@2 h1@@36 f@@77 bx0@@82 bx1@@66 bx2@@50 bx3@@34 bx4@@18 bx5@@18 bx6@@2)) )))
(assert (forall ((t0@@106 T@U) (t1@@82 T@U) (t2@@63 T@U) (t3@@48 T@U) (t4@@33 T@U) (t5@@18 T@U) (t6@@18 T@U) (t7@@3 T@U) (h0@@37 T@U) (h1@@37 T@U) (f@@78 T@U) (bx0@@83 T@U) (bx1@@67 T@U) (bx2@@51 T@U) (bx3@@35 T@U) (bx4@@19 T@U) (bx5@@19 T@U) (bx6@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@106) TyType) (= (type t1@@82) TyType)) (= (type t2@@63) TyType)) (= (type t3@@48) TyType)) (= (type t4@@33) TyType)) (= (type t5@@18) TyType)) (= (type t6@@18) TyType)) (= (type t7@@3) TyType)) (= (type h0@@37) (MapType0Type refType MapType1Type))) (= (type h1@@37) (MapType0Type refType MapType1Type))) (= (type f@@78) HandleTypeType)) (= (type bx0@@83) BoxType)) (= (type bx1@@67) BoxType)) (= (type bx2@@51) BoxType)) (= (type bx3@@35) BoxType)) (= (type bx4@@19) BoxType)) (= (type bx5@@19) BoxType)) (= (type bx6@@3) BoxType)) (and (and (and ($HeapSucc h0@@37 h1@@37) (and ($IsGoodHeap h0@@37) ($IsGoodHeap h1@@37))) (and (and (and (and (and (and (and ($IsBox bx0@@83 t0@@106) ($IsBox bx1@@67 t1@@82)) ($IsBox bx2@@51 t2@@63)) ($IsBox bx3@@35 t3@@48)) ($IsBox bx4@@19 t4@@33)) ($IsBox bx5@@19 t5@@18)) ($IsBox bx6@@3 t6@@18)) ($Is f@@78 (Tclass._System.___hFunc7 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18 t7@@3)))) (forall ((o@@91 T@U) (fld@@36 T@U) ) (! (let ((a@@121 (FieldTypeInv0 (type fld@@36)))) (=> (and (and (= (type o@@91) refType) (= (type fld@@36) (FieldType a@@121))) (and (not (= o@@91 null)) (U_2_bool (MapType0Select (Reads7 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18 t7@@3 h1@@37 f@@78 bx0@@83 bx1@@67 bx2@@51 bx3@@35 bx4@@19 bx5@@19 bx6@@3) ($Box o@@91))))) (= (MapType1Select (MapType0Select h0@@37 o@@91) fld@@36) (MapType1Select (MapType0Select h1@@37 o@@91) fld@@36)))) :qid |unknown.0:0| :skolemid |1010| :no-pattern (type o@@91) :no-pattern (type fld@@36) :no-pattern (U_2_int o@@91) :no-pattern (U_2_bool o@@91) :no-pattern (U_2_int fld@@36) :no-pattern (U_2_bool fld@@36) )))) (= (Reads7 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18 t7@@3 h0@@37 f@@78 bx0@@83 bx1@@67 bx2@@51 bx3@@35 bx4@@19 bx5@@19 bx6@@3) (Reads7 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18 t7@@3 h1@@37 f@@78 bx0@@83 bx1@@67 bx2@@51 bx3@@35 bx4@@19 bx5@@19 bx6@@3))) :qid |unknown.0:0| :skolemid |1011| :pattern ( ($HeapSucc h0@@37 h1@@37) (Reads7 t0@@106 t1@@82 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18 t7@@3 h1@@37 f@@78 bx0@@83 bx1@@67 bx2@@51 bx3@@35 bx4@@19 bx5@@19 bx6@@3)) )))
(assert (forall ((t0@@107 T@U) (t1@@83 T@U) (t2@@64 T@U) (t3@@49 T@U) (t4@@34 T@U) (t5@@19 T@U) (t6@@19 T@U) (t7@@4 T@U) (h0@@38 T@U) (h1@@38 T@U) (f@@79 T@U) (bx0@@84 T@U) (bx1@@68 T@U) (bx2@@52 T@U) (bx3@@36 T@U) (bx4@@20 T@U) (bx5@@20 T@U) (bx6@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@107) TyType) (= (type t1@@83) TyType)) (= (type t2@@64) TyType)) (= (type t3@@49) TyType)) (= (type t4@@34) TyType)) (= (type t5@@19) TyType)) (= (type t6@@19) TyType)) (= (type t7@@4) TyType)) (= (type h0@@38) (MapType0Type refType MapType1Type))) (= (type h1@@38) (MapType0Type refType MapType1Type))) (= (type f@@79) HandleTypeType)) (= (type bx0@@84) BoxType)) (= (type bx1@@68) BoxType)) (= (type bx2@@52) BoxType)) (= (type bx3@@36) BoxType)) (= (type bx4@@20) BoxType)) (= (type bx5@@20) BoxType)) (= (type bx6@@4) BoxType)) (and (and (and ($HeapSucc h0@@38 h1@@38) (and ($IsGoodHeap h0@@38) ($IsGoodHeap h1@@38))) (and (and (and (and (and (and (and ($IsBox bx0@@84 t0@@107) ($IsBox bx1@@68 t1@@83)) ($IsBox bx2@@52 t2@@64)) ($IsBox bx3@@36 t3@@49)) ($IsBox bx4@@20 t4@@34)) ($IsBox bx5@@20 t5@@19)) ($IsBox bx6@@4 t6@@19)) ($Is f@@79 (Tclass._System.___hFunc7 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 t7@@4)))) (forall ((o@@92 T@U) (fld@@37 T@U) ) (! (let ((a@@122 (FieldTypeInv0 (type fld@@37)))) (=> (and (and (= (type o@@92) refType) (= (type fld@@37) (FieldType a@@122))) (and (not (= o@@92 null)) (U_2_bool (MapType0Select (Reads7 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 t7@@4 h0@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@20 bx6@@4) ($Box o@@92))))) (= (MapType1Select (MapType0Select h0@@38 o@@92) fld@@37) (MapType1Select (MapType0Select h1@@38 o@@92) fld@@37)))) :qid |unknown.0:0| :skolemid |1012| :no-pattern (type o@@92) :no-pattern (type fld@@37) :no-pattern (U_2_int o@@92) :no-pattern (U_2_bool o@@92) :no-pattern (U_2_int fld@@37) :no-pattern (U_2_bool fld@@37) )))) (and (=> (Requires7 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 t7@@4 h0@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@20 bx6@@4) (Requires7 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 t7@@4 h1@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@20 bx6@@4)) (=> (Requires7 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 t7@@4 h1@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@20 bx6@@4) (Requires7 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 t7@@4 h0@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@20 bx6@@4)))) :qid |unknown.0:0| :skolemid |1013| :pattern ( ($HeapSucc h0@@38 h1@@38) (Requires7 t0@@107 t1@@83 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 t7@@4 h1@@38 f@@79 bx0@@84 bx1@@68 bx2@@52 bx3@@36 bx4@@20 bx5@@20 bx6@@4)) )))
(assert (forall ((t0@@108 T@U) (t1@@84 T@U) (t2@@65 T@U) (t3@@50 T@U) (t4@@35 T@U) (t5@@20 T@U) (t6@@20 T@U) (t7@@5 T@U) (h0@@39 T@U) (h1@@39 T@U) (f@@80 T@U) (bx0@@85 T@U) (bx1@@69 T@U) (bx2@@53 T@U) (bx3@@37 T@U) (bx4@@21 T@U) (bx5@@21 T@U) (bx6@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@108) TyType) (= (type t1@@84) TyType)) (= (type t2@@65) TyType)) (= (type t3@@50) TyType)) (= (type t4@@35) TyType)) (= (type t5@@20) TyType)) (= (type t6@@20) TyType)) (= (type t7@@5) TyType)) (= (type h0@@39) (MapType0Type refType MapType1Type))) (= (type h1@@39) (MapType0Type refType MapType1Type))) (= (type f@@80) HandleTypeType)) (= (type bx0@@85) BoxType)) (= (type bx1@@69) BoxType)) (= (type bx2@@53) BoxType)) (= (type bx3@@37) BoxType)) (= (type bx4@@21) BoxType)) (= (type bx5@@21) BoxType)) (= (type bx6@@5) BoxType)) (and (and (and ($HeapSucc h0@@39 h1@@39) (and ($IsGoodHeap h0@@39) ($IsGoodHeap h1@@39))) (and (and (and (and (and (and (and ($IsBox bx0@@85 t0@@108) ($IsBox bx1@@69 t1@@84)) ($IsBox bx2@@53 t2@@65)) ($IsBox bx3@@37 t3@@50)) ($IsBox bx4@@21 t4@@35)) ($IsBox bx5@@21 t5@@20)) ($IsBox bx6@@5 t6@@20)) ($Is f@@80 (Tclass._System.___hFunc7 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 t7@@5)))) (forall ((o@@93 T@U) (fld@@38 T@U) ) (! (let ((a@@123 (FieldTypeInv0 (type fld@@38)))) (=> (and (and (= (type o@@93) refType) (= (type fld@@38) (FieldType a@@123))) (and (not (= o@@93 null)) (U_2_bool (MapType0Select (Reads7 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 t7@@5 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@21 bx6@@5) ($Box o@@93))))) (= (MapType1Select (MapType0Select h0@@39 o@@93) fld@@38) (MapType1Select (MapType0Select h1@@39 o@@93) fld@@38)))) :qid |unknown.0:0| :skolemid |1014| :no-pattern (type o@@93) :no-pattern (type fld@@38) :no-pattern (U_2_int o@@93) :no-pattern (U_2_bool o@@93) :no-pattern (U_2_int fld@@38) :no-pattern (U_2_bool fld@@38) )))) (and (=> (Requires7 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 t7@@5 h0@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@21 bx6@@5) (Requires7 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 t7@@5 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@21 bx6@@5)) (=> (Requires7 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 t7@@5 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@21 bx6@@5) (Requires7 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 t7@@5 h0@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@21 bx6@@5)))) :qid |unknown.0:0| :skolemid |1015| :pattern ( ($HeapSucc h0@@39 h1@@39) (Requires7 t0@@108 t1@@84 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 t7@@5 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53 bx3@@37 bx4@@21 bx5@@21 bx6@@5)) )))
(assert (forall ((t0@@109 T@U) (t1@@85 T@U) (t2@@66 T@U) (t3@@51 T@U) (t4@@36 T@U) (t5@@21 T@U) (t6@@21 T@U) (t7@@6 T@U) (h0@@40 T@U) (h1@@40 T@U) (f@@81 T@U) (bx0@@86 T@U) (bx1@@70 T@U) (bx2@@54 T@U) (bx3@@38 T@U) (bx4@@22 T@U) (bx5@@22 T@U) (bx6@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@109) TyType) (= (type t1@@85) TyType)) (= (type t2@@66) TyType)) (= (type t3@@51) TyType)) (= (type t4@@36) TyType)) (= (type t5@@21) TyType)) (= (type t6@@21) TyType)) (= (type t7@@6) TyType)) (= (type h0@@40) (MapType0Type refType MapType1Type))) (= (type h1@@40) (MapType0Type refType MapType1Type))) (= (type f@@81) HandleTypeType)) (= (type bx0@@86) BoxType)) (= (type bx1@@70) BoxType)) (= (type bx2@@54) BoxType)) (= (type bx3@@38) BoxType)) (= (type bx4@@22) BoxType)) (= (type bx5@@22) BoxType)) (= (type bx6@@6) BoxType)) (and (and (and ($HeapSucc h0@@40 h1@@40) (and ($IsGoodHeap h0@@40) ($IsGoodHeap h1@@40))) (and (and (and (and (and (and (and ($IsBox bx0@@86 t0@@109) ($IsBox bx1@@70 t1@@85)) ($IsBox bx2@@54 t2@@66)) ($IsBox bx3@@38 t3@@51)) ($IsBox bx4@@22 t4@@36)) ($IsBox bx5@@22 t5@@21)) ($IsBox bx6@@6 t6@@21)) ($Is f@@81 (Tclass._System.___hFunc7 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21 t7@@6)))) (forall ((o@@94 T@U) (fld@@39 T@U) ) (! (let ((a@@124 (FieldTypeInv0 (type fld@@39)))) (=> (and (and (= (type o@@94) refType) (= (type fld@@39) (FieldType a@@124))) (and (not (= o@@94 null)) (U_2_bool (MapType0Select (Reads7 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21 t7@@6 h0@@40 f@@81 bx0@@86 bx1@@70 bx2@@54 bx3@@38 bx4@@22 bx5@@22 bx6@@6) ($Box o@@94))))) (= (MapType1Select (MapType0Select h0@@40 o@@94) fld@@39) (MapType1Select (MapType0Select h1@@40 o@@94) fld@@39)))) :qid |unknown.0:0| :skolemid |1016| :no-pattern (type o@@94) :no-pattern (type fld@@39) :no-pattern (U_2_int o@@94) :no-pattern (U_2_bool o@@94) :no-pattern (U_2_int fld@@39) :no-pattern (U_2_bool fld@@39) )))) (= (Apply7 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21 t7@@6 h0@@40 f@@81 bx0@@86 bx1@@70 bx2@@54 bx3@@38 bx4@@22 bx5@@22 bx6@@6) (Apply7 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21 t7@@6 h1@@40 f@@81 bx0@@86 bx1@@70 bx2@@54 bx3@@38 bx4@@22 bx5@@22 bx6@@6))) :qid |unknown.0:0| :skolemid |1017| :pattern ( ($HeapSucc h0@@40 h1@@40) (Apply7 t0@@109 t1@@85 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21 t7@@6 h1@@40 f@@81 bx0@@86 bx1@@70 bx2@@54 bx3@@38 bx4@@22 bx5@@22 bx6@@6)) )))
(assert (forall ((t0@@110 T@U) (t1@@86 T@U) (t2@@67 T@U) (t3@@52 T@U) (t4@@37 T@U) (t5@@22 T@U) (t6@@22 T@U) (t7@@7 T@U) (h0@@41 T@U) (h1@@41 T@U) (f@@82 T@U) (bx0@@87 T@U) (bx1@@71 T@U) (bx2@@55 T@U) (bx3@@39 T@U) (bx4@@23 T@U) (bx5@@23 T@U) (bx6@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@110) TyType) (= (type t1@@86) TyType)) (= (type t2@@67) TyType)) (= (type t3@@52) TyType)) (= (type t4@@37) TyType)) (= (type t5@@22) TyType)) (= (type t6@@22) TyType)) (= (type t7@@7) TyType)) (= (type h0@@41) (MapType0Type refType MapType1Type))) (= (type h1@@41) (MapType0Type refType MapType1Type))) (= (type f@@82) HandleTypeType)) (= (type bx0@@87) BoxType)) (= (type bx1@@71) BoxType)) (= (type bx2@@55) BoxType)) (= (type bx3@@39) BoxType)) (= (type bx4@@23) BoxType)) (= (type bx5@@23) BoxType)) (= (type bx6@@7) BoxType)) (and (and (and ($HeapSucc h0@@41 h1@@41) (and ($IsGoodHeap h0@@41) ($IsGoodHeap h1@@41))) (and (and (and (and (and (and (and ($IsBox bx0@@87 t0@@110) ($IsBox bx1@@71 t1@@86)) ($IsBox bx2@@55 t2@@67)) ($IsBox bx3@@39 t3@@52)) ($IsBox bx4@@23 t4@@37)) ($IsBox bx5@@23 t5@@22)) ($IsBox bx6@@7 t6@@22)) ($Is f@@82 (Tclass._System.___hFunc7 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22 t7@@7)))) (forall ((o@@95 T@U) (fld@@40 T@U) ) (! (let ((a@@125 (FieldTypeInv0 (type fld@@40)))) (=> (and (and (= (type o@@95) refType) (= (type fld@@40) (FieldType a@@125))) (and (not (= o@@95 null)) (U_2_bool (MapType0Select (Reads7 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22 t7@@7 h1@@41 f@@82 bx0@@87 bx1@@71 bx2@@55 bx3@@39 bx4@@23 bx5@@23 bx6@@7) ($Box o@@95))))) (= (MapType1Select (MapType0Select h0@@41 o@@95) fld@@40) (MapType1Select (MapType0Select h1@@41 o@@95) fld@@40)))) :qid |unknown.0:0| :skolemid |1018| :no-pattern (type o@@95) :no-pattern (type fld@@40) :no-pattern (U_2_int o@@95) :no-pattern (U_2_bool o@@95) :no-pattern (U_2_int fld@@40) :no-pattern (U_2_bool fld@@40) )))) (= (Apply7 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22 t7@@7 h0@@41 f@@82 bx0@@87 bx1@@71 bx2@@55 bx3@@39 bx4@@23 bx5@@23 bx6@@7) (Apply7 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22 t7@@7 h1@@41 f@@82 bx0@@87 bx1@@71 bx2@@55 bx3@@39 bx4@@23 bx5@@23 bx6@@7))) :qid |unknown.0:0| :skolemid |1019| :pattern ( ($HeapSucc h0@@41 h1@@41) (Apply7 t0@@110 t1@@86 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22 t7@@7 h1@@41 f@@82 bx0@@87 bx1@@71 bx2@@55 bx3@@39 bx4@@23 bx5@@23 bx6@@7)) )))
(assert (forall ((t0@@111 T@U) (t1@@87 T@U) (t2@@68 T@U) (t3@@53 T@U) (t4@@38 T@U) (t5@@23 T@U) (t6@@23 T@U) (t7@@8 T@U) (heap@@34 T@U) (f@@83 T@U) (bx0@@88 T@U) (bx1@@72 T@U) (bx2@@56 T@U) (bx3@@40 T@U) (bx4@@24 T@U) (bx5@@24 T@U) (bx6@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@111) TyType) (= (type t1@@87) TyType)) (= (type t2@@68) TyType)) (= (type t3@@53) TyType)) (= (type t4@@38) TyType)) (= (type t5@@23) TyType)) (= (type t6@@23) TyType)) (= (type t7@@8) TyType)) (= (type heap@@34) (MapType0Type refType MapType1Type))) (= (type f@@83) HandleTypeType)) (= (type bx0@@88) BoxType)) (= (type bx1@@72) BoxType)) (= (type bx2@@56) BoxType)) (= (type bx3@@40) BoxType)) (= (type bx4@@24) BoxType)) (= (type bx5@@24) BoxType)) (= (type bx6@@8) BoxType)) (and ($IsGoodHeap heap@@34) (and (and (and (and (and (and (and ($IsBox bx0@@88 t0@@111) ($IsBox bx1@@72 t1@@87)) ($IsBox bx2@@56 t2@@68)) ($IsBox bx3@@40 t3@@53)) ($IsBox bx4@@24 t4@@38)) ($IsBox bx5@@24 t5@@23)) ($IsBox bx6@@8 t6@@23)) ($Is f@@83 (Tclass._System.___hFunc7 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 t7@@8))))) (and (=> (|Set#Equal| (Reads7 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 t7@@8 $OneHeap f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@24 bx6@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads7 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 t7@@8 heap@@34 f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@24 bx6@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads7 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 t7@@8 heap@@34 f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@24 bx6@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads7 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 t7@@8 $OneHeap f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@24 bx6@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1020| :pattern ( (Reads7 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 t7@@8 $OneHeap f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@24 bx6@@8) ($IsGoodHeap heap@@34)) :pattern ( (Reads7 t0@@111 t1@@87 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 t7@@8 heap@@34 f@@83 bx0@@88 bx1@@72 bx2@@56 bx3@@40 bx4@@24 bx5@@24 bx6@@8)) )))
(assert (forall ((t0@@112 T@U) (t1@@88 T@U) (t2@@69 T@U) (t3@@54 T@U) (t4@@39 T@U) (t5@@24 T@U) (t6@@24 T@U) (t7@@9 T@U) (heap@@35 T@U) (f@@84 T@U) (bx0@@89 T@U) (bx1@@73 T@U) (bx2@@57 T@U) (bx3@@41 T@U) (bx4@@25 T@U) (bx5@@25 T@U) (bx6@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@112) TyType) (= (type t1@@88) TyType)) (= (type t2@@69) TyType)) (= (type t3@@54) TyType)) (= (type t4@@39) TyType)) (= (type t5@@24) TyType)) (= (type t6@@24) TyType)) (= (type t7@@9) TyType)) (= (type heap@@35) (MapType0Type refType MapType1Type))) (= (type f@@84) HandleTypeType)) (= (type bx0@@89) BoxType)) (= (type bx1@@73) BoxType)) (= (type bx2@@57) BoxType)) (= (type bx3@@41) BoxType)) (= (type bx4@@25) BoxType)) (= (type bx5@@25) BoxType)) (= (type bx6@@9) BoxType)) (and (and ($IsGoodHeap heap@@35) (and (and (and (and (and (and (and ($IsBox bx0@@89 t0@@112) ($IsBox bx1@@73 t1@@88)) ($IsBox bx2@@57 t2@@69)) ($IsBox bx3@@41 t3@@54)) ($IsBox bx4@@25 t4@@39)) ($IsBox bx5@@25 t5@@24)) ($IsBox bx6@@9 t6@@24)) ($Is f@@84 (Tclass._System.___hFunc7 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 t7@@9)))) (|Set#Equal| (Reads7 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 t7@@9 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@25 bx6@@9) (|Set#Empty| BoxType)))) (and (=> (Requires7 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 t7@@9 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@25 bx6@@9) (Requires7 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 t7@@9 heap@@35 f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@25 bx6@@9)) (=> (Requires7 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 t7@@9 heap@@35 f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@25 bx6@@9) (Requires7 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 t7@@9 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@25 bx6@@9)))) :qid |unknown.0:0| :skolemid |1021| :pattern ( (Requires7 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 t7@@9 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@25 bx6@@9) ($IsGoodHeap heap@@35)) :pattern ( (Requires7 t0@@112 t1@@88 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 t7@@9 heap@@35 f@@84 bx0@@89 bx1@@73 bx2@@57 bx3@@41 bx4@@25 bx5@@25 bx6@@9)) )))
(assert (forall ((f@@85 T@U) (t0@@113 T@U) (t1@@89 T@U) (t2@@70 T@U) (t3@@55 T@U) (t4@@40 T@U) (t5@@25 T@U) (t6@@25 T@U) (t7@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@85) HandleTypeType) (= (type t0@@113) TyType)) (= (type t1@@89) TyType)) (= (type t2@@70) TyType)) (= (type t3@@55) TyType)) (= (type t4@@40) TyType)) (= (type t5@@25) TyType)) (= (type t6@@25) TyType)) (= (type t7@@10) TyType)) (and (=> ($Is f@@85 (Tclass._System.___hFunc7 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 t7@@10)) (forall ((h@@65 T@U) (bx0@@90 T@U) (bx1@@74 T@U) (bx2@@58 T@U) (bx3@@42 T@U) (bx4@@26 T@U) (bx5@@26 T@U) (bx6@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type h@@65) (MapType0Type refType MapType1Type)) (= (type bx0@@90) BoxType)) (= (type bx1@@74) BoxType)) (= (type bx2@@58) BoxType)) (= (type bx3@@42) BoxType)) (= (type bx4@@26) BoxType)) (= (type bx5@@26) BoxType)) (= (type bx6@@10) BoxType)) (and (and ($IsGoodHeap h@@65) (and (and (and (and (and (and ($IsBox bx0@@90 t0@@113) ($IsBox bx1@@74 t1@@89)) ($IsBox bx2@@58 t2@@70)) ($IsBox bx3@@42 t3@@55)) ($IsBox bx4@@26 t4@@40)) ($IsBox bx5@@26 t5@@25)) ($IsBox bx6@@10 t6@@25))) (Requires7 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 t7@@10 h@@65 f@@85 bx0@@90 bx1@@74 bx2@@58 bx3@@42 bx4@@26 bx5@@26 bx6@@10))) ($IsBox (Apply7 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 t7@@10 h@@65 f@@85 bx0@@90 bx1@@74 bx2@@58 bx3@@42 bx4@@26 bx5@@26 bx6@@10) t7@@10)) :qid |DafnyPre.521:12| :skolemid |1022| :pattern ( (Apply7 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 t7@@10 h@@65 f@@85 bx0@@90 bx1@@74 bx2@@58 bx3@@42 bx4@@26 bx5@@26 bx6@@10)) ))) (=> (forall ((h@@66 T@U) (bx0@@91 T@U) (bx1@@75 T@U) (bx2@@59 T@U) (bx3@@43 T@U) (bx4@@27 T@U) (bx5@@27 T@U) (bx6@@11 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type h@@66) (MapType0Type refType MapType1Type)) (= (type bx0@@91) BoxType)) (= (type bx1@@75) BoxType)) (= (type bx2@@59) BoxType)) (= (type bx3@@43) BoxType)) (= (type bx4@@27) BoxType)) (= (type bx5@@27) BoxType)) (= (type bx6@@11) BoxType)) (and (and ($IsGoodHeap h@@66) (and (and (and (and (and (and ($IsBox bx0@@91 t0@@113) ($IsBox bx1@@75 t1@@89)) ($IsBox bx2@@59 t2@@70)) ($IsBox bx3@@43 t3@@55)) ($IsBox bx4@@27 t4@@40)) ($IsBox bx5@@27 t5@@25)) ($IsBox bx6@@11 t6@@25))) (Requires7 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 t7@@10 h@@66 f@@85 bx0@@91 bx1@@75 bx2@@59 bx3@@43 bx4@@27 bx5@@27 bx6@@11))) ($IsBox (Apply7 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 t7@@10 h@@66 f@@85 bx0@@91 bx1@@75 bx2@@59 bx3@@43 bx4@@27 bx5@@27 bx6@@11) t7@@10)) :qid |DafnyPre.521:12| :skolemid |1022| :pattern ( (Apply7 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 t7@@10 h@@66 f@@85 bx0@@91 bx1@@75 bx2@@59 bx3@@43 bx4@@27 bx5@@27 bx6@@11)) )) ($Is f@@85 (Tclass._System.___hFunc7 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 t7@@10))))) :qid |unknown.0:0| :skolemid |1023| :pattern ( ($Is f@@85 (Tclass._System.___hFunc7 t0@@113 t1@@89 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 t7@@10))) )))
(assert (forall ((f@@86 T@U) (t0@@114 T@U) (t1@@90 T@U) (t2@@71 T@U) (t3@@56 T@U) (t4@@41 T@U) (t5@@26 T@U) (t6@@26 T@U) (t7@@11 T@U) (u0@@5 T@U) (u1@@4 T@U) (u2@@3 T@U) (u3@@2 T@U) (u4@@1 T@U) (u5@@0 T@U) (u6@@0 T@U) (u7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@86) HandleTypeType) (= (type t0@@114) TyType)) (= (type t1@@90) TyType)) (= (type t2@@71) TyType)) (= (type t3@@56) TyType)) (= (type t4@@41) TyType)) (= (type t5@@26) TyType)) (= (type t6@@26) TyType)) (= (type t7@@11) TyType)) (= (type u0@@5) TyType)) (= (type u1@@4) TyType)) (= (type u2@@3) TyType)) (= (type u3@@2) TyType)) (= (type u4@@1) TyType)) (= (type u5@@0) TyType)) (= (type u6@@0) TyType)) (= (type u7) TyType)) (and (and (and (and (and (and (and (and ($Is f@@86 (Tclass._System.___hFunc7 t0@@114 t1@@90 t2@@71 t3@@56 t4@@41 t5@@26 t6@@26 t7@@11)) (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 u0@@5)) ($IsBox bx@@89 t0@@114)) :qid |unknown.0:0| :skolemid |1024| :pattern ( ($IsBox bx@@89 u0@@5)) :pattern ( ($IsBox bx@@89 t0@@114)) ))) (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 u1@@4)) ($IsBox bx@@90 t1@@90)) :qid |unknown.0:0| :skolemid |1025| :pattern ( ($IsBox bx@@90 u1@@4)) :pattern ( ($IsBox bx@@90 t1@@90)) ))) (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 u2@@3)) ($IsBox bx@@91 t2@@71)) :qid |unknown.0:0| :skolemid |1026| :pattern ( ($IsBox bx@@91 u2@@3)) :pattern ( ($IsBox bx@@91 t2@@71)) ))) (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 u3@@2)) ($IsBox bx@@92 t3@@56)) :qid |unknown.0:0| :skolemid |1027| :pattern ( ($IsBox bx@@92 u3@@2)) :pattern ( ($IsBox bx@@92 t3@@56)) ))) (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 u4@@1)) ($IsBox bx@@93 t4@@41)) :qid |unknown.0:0| :skolemid |1028| :pattern ( ($IsBox bx@@93 u4@@1)) :pattern ( ($IsBox bx@@93 t4@@41)) ))) (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 u5@@0)) ($IsBox bx@@94 t5@@26)) :qid |unknown.0:0| :skolemid |1029| :pattern ( ($IsBox bx@@94 u5@@0)) :pattern ( ($IsBox bx@@94 t5@@26)) ))) (forall ((bx@@95 T@U) ) (!  (=> (and (= (type bx@@95) BoxType) ($IsBox bx@@95 u6@@0)) ($IsBox bx@@95 t6@@26)) :qid |unknown.0:0| :skolemid |1030| :pattern ( ($IsBox bx@@95 u6@@0)) :pattern ( ($IsBox bx@@95 t6@@26)) ))) (forall ((bx@@96 T@U) ) (!  (=> (and (= (type bx@@96) BoxType) ($IsBox bx@@96 t7@@11)) ($IsBox bx@@96 u7)) :qid |unknown.0:0| :skolemid |1031| :pattern ( ($IsBox bx@@96 t7@@11)) :pattern ( ($IsBox bx@@96 u7)) )))) ($Is f@@86 (Tclass._System.___hFunc7 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6@@0 u7))) :qid |unknown.0:0| :skolemid |1032| :pattern ( ($Is f@@86 (Tclass._System.___hFunc7 t0@@114 t1@@90 t2@@71 t3@@56 t4@@41 t5@@26 t6@@26 t7@@11)) ($Is f@@86 (Tclass._System.___hFunc7 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6@@0 u7))) )))
(assert (forall ((f@@87 T@U) (t0@@115 T@U) (t1@@91 T@U) (t2@@72 T@U) (t3@@57 T@U) (t4@@42 T@U) (t5@@27 T@U) (t6@@27 T@U) (t7@@12 T@U) (h@@67 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type f@@87) HandleTypeType) (= (type t0@@115) TyType)) (= (type t1@@91) TyType)) (= (type t2@@72) TyType)) (= (type t3@@57) TyType)) (= (type t4@@42) TyType)) (= (type t5@@27) TyType)) (= (type t6@@27) TyType)) (= (type t7@@12) TyType)) (= (type h@@67) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@67)) (and (=> ($IsAlloc f@@87 (Tclass._System.___hFunc7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12) h@@67) (forall ((bx0@@92 T@U) (bx1@@76 T@U) (bx2@@60 T@U) (bx3@@44 T@U) (bx4@@28 T@U) (bx5@@28 T@U) (bx6@@12 T@U) ) (!  (=> (and (and (and (and (and (and (= (type bx0@@92) BoxType) (= (type bx1@@76) BoxType)) (= (type bx2@@60) BoxType)) (= (type bx3@@44) BoxType)) (= (type bx4@@28) BoxType)) (= (type bx5@@28) BoxType)) (= (type bx6@@12) BoxType)) (=> (and (and (and (and (and (and (and (and ($IsBox bx0@@92 t0@@115) ($IsAllocBox bx0@@92 t0@@115 h@@67)) (and ($IsBox bx1@@76 t1@@91) ($IsAllocBox bx1@@76 t1@@91 h@@67))) (and ($IsBox bx2@@60 t2@@72) ($IsAllocBox bx2@@60 t2@@72 h@@67))) (and ($IsBox bx3@@44 t3@@57) ($IsAllocBox bx3@@44 t3@@57 h@@67))) (and ($IsBox bx4@@28 t4@@42) ($IsAllocBox bx4@@28 t4@@42 h@@67))) (and ($IsBox bx5@@28 t5@@27) ($IsAllocBox bx5@@28 t5@@27 h@@67))) (and ($IsBox bx6@@12 t6@@27) ($IsAllocBox bx6@@12 t6@@27 h@@67))) (Requires7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@28 bx6@@12)) (forall ((r@@39 T@U) ) (!  (=> (= (type r@@39) refType) (=> (and (not (= r@@39 null)) (U_2_bool (MapType0Select (Reads7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@28 bx6@@12) ($Box r@@39)))) (U_2_bool (MapType1Select (MapType0Select h@@67 r@@39) alloc)))) :qid |unknown.0:0| :skolemid |1033| :pattern ( (MapType0Select (Reads7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@28 bx6@@12) ($Box r@@39))) )))) :qid |unknown.0:0| :skolemid |1034| :pattern ( (Apply7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@28 bx6@@12)) :pattern ( (Reads7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60 bx3@@44 bx4@@28 bx5@@28 bx6@@12)) ))) (=> (forall ((bx0@@93 T@U) (bx1@@77 T@U) (bx2@@61 T@U) (bx3@@45 T@U) (bx4@@29 T@U) (bx5@@29 T@U) (bx6@@13 T@U) ) (!  (=> (and (and (and (and (and (and (= (type bx0@@93) BoxType) (= (type bx1@@77) BoxType)) (= (type bx2@@61) BoxType)) (= (type bx3@@45) BoxType)) (= (type bx4@@29) BoxType)) (= (type bx5@@29) BoxType)) (= (type bx6@@13) BoxType)) (=> (and (and (and (and (and (and (and (and ($IsBox bx0@@93 t0@@115) ($IsAllocBox bx0@@93 t0@@115 h@@67)) (and ($IsBox bx1@@77 t1@@91) ($IsAllocBox bx1@@77 t1@@91 h@@67))) (and ($IsBox bx2@@61 t2@@72) ($IsAllocBox bx2@@61 t2@@72 h@@67))) (and ($IsBox bx3@@45 t3@@57) ($IsAllocBox bx3@@45 t3@@57 h@@67))) (and ($IsBox bx4@@29 t4@@42) ($IsAllocBox bx4@@29 t4@@42 h@@67))) (and ($IsBox bx5@@29 t5@@27) ($IsAllocBox bx5@@29 t5@@27 h@@67))) (and ($IsBox bx6@@13 t6@@27) ($IsAllocBox bx6@@13 t6@@27 h@@67))) (Requires7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@29 bx6@@13)) (forall ((r@@40 T@U) ) (!  (=> (= (type r@@40) refType) (=> (and (not (= r@@40 null)) (U_2_bool (MapType0Select (Reads7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@29 bx6@@13) ($Box r@@40)))) (U_2_bool (MapType1Select (MapType0Select h@@67 r@@40) alloc)))) :qid |unknown.0:0| :skolemid |1033| :pattern ( (MapType0Select (Reads7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@29 bx6@@13) ($Box r@@40))) )))) :qid |unknown.0:0| :skolemid |1034| :pattern ( (Apply7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@29 bx6@@13)) :pattern ( (Reads7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61 bx3@@45 bx4@@29 bx5@@29 bx6@@13)) )) ($IsAlloc f@@87 (Tclass._System.___hFunc7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12) h@@67)))) :qid |unknown.0:0| :skolemid |1035| :pattern ( ($IsAlloc f@@87 (Tclass._System.___hFunc7 t0@@115 t1@@91 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 t7@@12) h@@67)) )))
(assert (forall ((f@@88 T@U) (t0@@116 T@U) (t1@@92 T@U) (t2@@73 T@U) (t3@@58 T@U) (t4@@43 T@U) (t5@@28 T@U) (t6@@28 T@U) (t7@@13 T@U) (h@@68 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type f@@88) HandleTypeType) (= (type t0@@116) TyType)) (= (type t1@@92) TyType)) (= (type t2@@73) TyType)) (= (type t3@@58) TyType)) (= (type t4@@43) TyType)) (= (type t5@@28) TyType)) (= (type t6@@28) TyType)) (= (type t7@@13) TyType)) (= (type h@@68) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@68) ($IsAlloc f@@88 (Tclass._System.___hFunc7 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28 t7@@13) h@@68))) (forall ((bx0@@94 T@U) (bx1@@78 T@U) (bx2@@62 T@U) (bx3@@46 T@U) (bx4@@30 T@U) (bx5@@30 T@U) (bx6@@14 T@U) ) (!  (=> (and (and (and (and (and (and (= (type bx0@@94) BoxType) (= (type bx1@@78) BoxType)) (= (type bx2@@62) BoxType)) (= (type bx3@@46) BoxType)) (= (type bx4@@30) BoxType)) (= (type bx5@@30) BoxType)) (= (type bx6@@14) BoxType)) (=> (and (and (and (and (and (and (and ($IsAllocBox bx0@@94 t0@@116 h@@68) ($IsAllocBox bx1@@78 t1@@92 h@@68)) ($IsAllocBox bx2@@62 t2@@73 h@@68)) ($IsAllocBox bx3@@46 t3@@58 h@@68)) ($IsAllocBox bx4@@30 t4@@43 h@@68)) ($IsAllocBox bx5@@30 t5@@28 h@@68)) ($IsAllocBox bx6@@14 t6@@28 h@@68)) (Requires7 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28 t7@@13 h@@68 f@@88 bx0@@94 bx1@@78 bx2@@62 bx3@@46 bx4@@30 bx5@@30 bx6@@14)) ($IsAllocBox (Apply7 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28 t7@@13 h@@68 f@@88 bx0@@94 bx1@@78 bx2@@62 bx3@@46 bx4@@30 bx5@@30 bx6@@14) t7@@13 h@@68))) :qid |unknown.0:0| :skolemid |1036| :pattern ( (Apply7 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28 t7@@13 h@@68 f@@88 bx0@@94 bx1@@78 bx2@@62 bx3@@46 bx4@@30 bx5@@30 bx6@@14)) ))) :qid |unknown.0:0| :skolemid |1037| :pattern ( ($IsAlloc f@@88 (Tclass._System.___hFunc7 t0@@116 t1@@92 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28 t7@@13) h@@68)) )))
(assert (forall ((arg0@@279 T@U) (arg1@@138 T@U) (arg2@@94 T@U) (arg3@@70 T@U) (arg4@@59 T@U) (arg5@@46 T@U) (arg6@@37 T@U) (arg7@@31 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7 arg0@@279 arg1@@138 arg2@@94 arg3@@70 arg4@@59 arg5@@46 arg6@@37 arg7@@31)) TyType) :qid |funType:Tclass._System.___hPartialFunc7| :pattern ( (Tclass._System.___hPartialFunc7 arg0@@279 arg1@@138 arg2@@94 arg3@@70 arg4@@59 arg5@@46 arg6@@37 arg7@@31)) )))
(assert (forall ((|#$T0@@131| T@U) (|#$T1@@115| T@U) (|#$T2@@87| T@U) (|#$T3@@65| T@U) (|#$T4@@40| T@U) (|#$T5@@40| T@U) (|#$T6@@9| T@U) (|#$R@@135| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@131|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$T3@@65|) TyType)) (= (type |#$T4@@40|) TyType)) (= (type |#$T5@@40|) TyType)) (= (type |#$T6@@9|) TyType)) (= (type |#$R@@135|) TyType)) (= (Tag (Tclass._System.___hPartialFunc7 |#$T0@@131| |#$T1@@115| |#$T2@@87| |#$T3@@65| |#$T4@@40| |#$T5@@40| |#$T6@@9| |#$R@@135|)) Tagclass._System.___hPartialFunc7)) :qid |unknown.0:0| :skolemid |1038| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@131| |#$T1@@115| |#$T2@@87| |#$T3@@65| |#$T4@@40| |#$T5@@40| |#$T6@@9| |#$R@@135|)) )))
(assert (forall ((arg0@@280 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_0 arg0@@280)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_0| :pattern ( (Tclass._System.___hPartialFunc7_0 arg0@@280)) )))
(assert (forall ((|#$T0@@132| T@U) (|#$T1@@116| T@U) (|#$T2@@88| T@U) (|#$T3@@66| T@U) (|#$T4@@41| T@U) (|#$T5@@41| T@U) (|#$T6@@10| T@U) (|#$R@@136| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@132|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$T3@@66|) TyType)) (= (type |#$T4@@41|) TyType)) (= (type |#$T5@@41|) TyType)) (= (type |#$T6@@10|) TyType)) (= (type |#$R@@136|) TyType)) (= (Tclass._System.___hPartialFunc7_0 (Tclass._System.___hPartialFunc7 |#$T0@@132| |#$T1@@116| |#$T2@@88| |#$T3@@66| |#$T4@@41| |#$T5@@41| |#$T6@@10| |#$R@@136|)) |#$T0@@132|)) :qid |unknown.0:0| :skolemid |1039| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@132| |#$T1@@116| |#$T2@@88| |#$T3@@66| |#$T4@@41| |#$T5@@41| |#$T6@@10| |#$R@@136|)) )))
(assert (forall ((arg0@@281 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_1 arg0@@281)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_1| :pattern ( (Tclass._System.___hPartialFunc7_1 arg0@@281)) )))
(assert (forall ((|#$T0@@133| T@U) (|#$T1@@117| T@U) (|#$T2@@89| T@U) (|#$T3@@67| T@U) (|#$T4@@42| T@U) (|#$T5@@42| T@U) (|#$T6@@11| T@U) (|#$R@@137| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@133|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$T3@@67|) TyType)) (= (type |#$T4@@42|) TyType)) (= (type |#$T5@@42|) TyType)) (= (type |#$T6@@11|) TyType)) (= (type |#$R@@137|) TyType)) (= (Tclass._System.___hPartialFunc7_1 (Tclass._System.___hPartialFunc7 |#$T0@@133| |#$T1@@117| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@42| |#$T6@@11| |#$R@@137|)) |#$T1@@117|)) :qid |unknown.0:0| :skolemid |1040| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@133| |#$T1@@117| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@42| |#$T6@@11| |#$R@@137|)) )))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_2 arg0@@282)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_2| :pattern ( (Tclass._System.___hPartialFunc7_2 arg0@@282)) )))
(assert (forall ((|#$T0@@134| T@U) (|#$T1@@118| T@U) (|#$T2@@90| T@U) (|#$T3@@68| T@U) (|#$T4@@43| T@U) (|#$T5@@43| T@U) (|#$T6@@12| T@U) (|#$R@@138| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@134|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$T2@@90|) TyType)) (= (type |#$T3@@68|) TyType)) (= (type |#$T4@@43|) TyType)) (= (type |#$T5@@43|) TyType)) (= (type |#$T6@@12|) TyType)) (= (type |#$R@@138|) TyType)) (= (Tclass._System.___hPartialFunc7_2 (Tclass._System.___hPartialFunc7 |#$T0@@134| |#$T1@@118| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@43| |#$T6@@12| |#$R@@138|)) |#$T2@@90|)) :qid |unknown.0:0| :skolemid |1041| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@134| |#$T1@@118| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@43| |#$T6@@12| |#$R@@138|)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_3 arg0@@283)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_3| :pattern ( (Tclass._System.___hPartialFunc7_3 arg0@@283)) )))
(assert (forall ((|#$T0@@135| T@U) (|#$T1@@119| T@U) (|#$T2@@91| T@U) (|#$T3@@69| T@U) (|#$T4@@44| T@U) (|#$T5@@44| T@U) (|#$T6@@13| T@U) (|#$R@@139| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@135|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$T2@@91|) TyType)) (= (type |#$T3@@69|) TyType)) (= (type |#$T4@@44|) TyType)) (= (type |#$T5@@44|) TyType)) (= (type |#$T6@@13|) TyType)) (= (type |#$R@@139|) TyType)) (= (Tclass._System.___hPartialFunc7_3 (Tclass._System.___hPartialFunc7 |#$T0@@135| |#$T1@@119| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@44| |#$T6@@13| |#$R@@139|)) |#$T3@@69|)) :qid |unknown.0:0| :skolemid |1042| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@135| |#$T1@@119| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@44| |#$T6@@13| |#$R@@139|)) )))
(assert (forall ((arg0@@284 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_4 arg0@@284)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_4| :pattern ( (Tclass._System.___hPartialFunc7_4 arg0@@284)) )))
(assert (forall ((|#$T0@@136| T@U) (|#$T1@@120| T@U) (|#$T2@@92| T@U) (|#$T3@@70| T@U) (|#$T4@@45| T@U) (|#$T5@@45| T@U) (|#$T6@@14| T@U) (|#$R@@140| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@136|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$T2@@92|) TyType)) (= (type |#$T3@@70|) TyType)) (= (type |#$T4@@45|) TyType)) (= (type |#$T5@@45|) TyType)) (= (type |#$T6@@14|) TyType)) (= (type |#$R@@140|) TyType)) (= (Tclass._System.___hPartialFunc7_4 (Tclass._System.___hPartialFunc7 |#$T0@@136| |#$T1@@120| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@45| |#$T6@@14| |#$R@@140|)) |#$T4@@45|)) :qid |unknown.0:0| :skolemid |1043| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@136| |#$T1@@120| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@45| |#$T6@@14| |#$R@@140|)) )))
(assert (forall ((arg0@@285 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_5 arg0@@285)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_5| :pattern ( (Tclass._System.___hPartialFunc7_5 arg0@@285)) )))
(assert (forall ((|#$T0@@137| T@U) (|#$T1@@121| T@U) (|#$T2@@93| T@U) (|#$T3@@71| T@U) (|#$T4@@46| T@U) (|#$T5@@46| T@U) (|#$T6@@15| T@U) (|#$R@@141| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@137|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$T2@@93|) TyType)) (= (type |#$T3@@71|) TyType)) (= (type |#$T4@@46|) TyType)) (= (type |#$T5@@46|) TyType)) (= (type |#$T6@@15|) TyType)) (= (type |#$R@@141|) TyType)) (= (Tclass._System.___hPartialFunc7_5 (Tclass._System.___hPartialFunc7 |#$T0@@137| |#$T1@@121| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@46| |#$T6@@15| |#$R@@141|)) |#$T5@@46|)) :qid |unknown.0:0| :skolemid |1044| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@137| |#$T1@@121| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@46| |#$T6@@15| |#$R@@141|)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_6 arg0@@286)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_6| :pattern ( (Tclass._System.___hPartialFunc7_6 arg0@@286)) )))
(assert (forall ((|#$T0@@138| T@U) (|#$T1@@122| T@U) (|#$T2@@94| T@U) (|#$T3@@72| T@U) (|#$T4@@47| T@U) (|#$T5@@47| T@U) (|#$T6@@16| T@U) (|#$R@@142| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@138|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$T2@@94|) TyType)) (= (type |#$T3@@72|) TyType)) (= (type |#$T4@@47|) TyType)) (= (type |#$T5@@47|) TyType)) (= (type |#$T6@@16|) TyType)) (= (type |#$R@@142|) TyType)) (= (Tclass._System.___hPartialFunc7_6 (Tclass._System.___hPartialFunc7 |#$T0@@138| |#$T1@@122| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@47| |#$T6@@16| |#$R@@142|)) |#$T6@@16|)) :qid |unknown.0:0| :skolemid |1045| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@138| |#$T1@@122| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@47| |#$T6@@16| |#$R@@142|)) )))
(assert (forall ((arg0@@287 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_7 arg0@@287)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_7| :pattern ( (Tclass._System.___hPartialFunc7_7 arg0@@287)) )))
(assert (forall ((|#$T0@@139| T@U) (|#$T1@@123| T@U) (|#$T2@@95| T@U) (|#$T3@@73| T@U) (|#$T4@@48| T@U) (|#$T5@@48| T@U) (|#$T6@@17| T@U) (|#$R@@143| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@139|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$T2@@95|) TyType)) (= (type |#$T3@@73|) TyType)) (= (type |#$T4@@48|) TyType)) (= (type |#$T5@@48|) TyType)) (= (type |#$T6@@17|) TyType)) (= (type |#$R@@143|) TyType)) (= (Tclass._System.___hPartialFunc7_7 (Tclass._System.___hPartialFunc7 |#$T0@@139| |#$T1@@123| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@48| |#$T6@@17| |#$R@@143|)) |#$R@@143|)) :qid |unknown.0:0| :skolemid |1046| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@139| |#$T1@@123| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@48| |#$T6@@17| |#$R@@143|)) )))
(assert (forall ((|#$T0@@140| T@U) (|#$T1@@124| T@U) (|#$T2@@96| T@U) (|#$T3@@74| T@U) (|#$T4@@49| T@U) (|#$T5@@49| T@U) (|#$T6@@18| T@U) (|#$R@@144| T@U) (bx@@97 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@140|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$T2@@96|) TyType)) (= (type |#$T3@@74|) TyType)) (= (type |#$T4@@49|) TyType)) (= (type |#$T5@@49|) TyType)) (= (type |#$T6@@18|) TyType)) (= (type |#$R@@144|) TyType)) (= (type bx@@97) BoxType)) ($IsBox bx@@97 (Tclass._System.___hPartialFunc7 |#$T0@@140| |#$T1@@124| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@49| |#$T6@@18| |#$R@@144|))) (and (= ($Box ($Unbox HandleTypeType bx@@97)) bx@@97) ($Is ($Unbox HandleTypeType bx@@97) (Tclass._System.___hPartialFunc7 |#$T0@@140| |#$T1@@124| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@49| |#$T6@@18| |#$R@@144|)))) :qid |unknown.0:0| :skolemid |1047| :pattern ( ($IsBox bx@@97 (Tclass._System.___hPartialFunc7 |#$T0@@140| |#$T1@@124| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@49| |#$T6@@18| |#$R@@144|))) )))
(assert (forall ((|#$T0@@141| T@U) (|#$T1@@125| T@U) (|#$T2@@97| T@U) (|#$T3@@75| T@U) (|#$T4@@50| T@U) (|#$T5@@50| T@U) (|#$T6@@19| T@U) (|#$R@@145| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@141|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$T2@@97|) TyType)) (= (type |#$T3@@75|) TyType)) (= (type |#$T4@@50|) TyType)) (= (type |#$T5@@50|) TyType)) (= (type |#$T6@@19|) TyType)) (= (type |#$R@@145|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (and (=> ($Is |f#0@@23| (Tclass._System.___hPartialFunc7 |#$T0@@141| |#$T1@@125| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$T6@@19| |#$R@@145|)) (and ($Is |f#0@@23| (Tclass._System.___hFunc7 |#$T0@@141| |#$T1@@125| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$T6@@19| |#$R@@145|)) (forall ((|x0#0@@19| T@U) (|x1#0@@15| T@U) (|x2#0@@11| T@U) (|x3#0@@7| T@U) (|x4#0@@3| T@U) (|x5#0@@3| T@U) (|x6#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@19|) BoxType) (= (type |x1#0@@15|) BoxType)) (= (type |x2#0@@11|) BoxType)) (= (type |x3#0@@7|) BoxType)) (= (type |x4#0@@3|) BoxType)) (= (type |x5#0@@3|) BoxType)) (= (type |x6#0|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@19| |#$T0@@141|) ($IsBox |x1#0@@15| |#$T1@@125|)) ($IsBox |x2#0@@11| |#$T2@@97|)) ($IsBox |x3#0@@7| |#$T3@@75|)) ($IsBox |x4#0@@3| |#$T4@@50|)) ($IsBox |x5#0@@3| |#$T5@@50|)) ($IsBox |x6#0| |#$T6@@19|))) (|Set#Equal| (Reads7 |#$T0@@141| |#$T1@@125| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$T6@@19| |#$R@@145| $OneHeap |f#0@@23| |x0#0@@19| |x1#0@@15| |x2#0@@11| |x3#0@@7| |x4#0@@3| |x5#0@@3| |x6#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1048| :no-pattern (type |x0#0@@19|) :no-pattern (type |x1#0@@15|) :no-pattern (type |x2#0@@11|) :no-pattern (type |x3#0@@7|) :no-pattern (type |x4#0@@3|) :no-pattern (type |x5#0@@3|) :no-pattern (type |x6#0|) :no-pattern (U_2_int |x0#0@@19|) :no-pattern (U_2_bool |x0#0@@19|) :no-pattern (U_2_int |x1#0@@15|) :no-pattern (U_2_bool |x1#0@@15|) :no-pattern (U_2_int |x2#0@@11|) :no-pattern (U_2_bool |x2#0@@11|) :no-pattern (U_2_int |x3#0@@7|) :no-pattern (U_2_bool |x3#0@@7|) :no-pattern (U_2_int |x4#0@@3|) :no-pattern (U_2_bool |x4#0@@3|) :no-pattern (U_2_int |x5#0@@3|) :no-pattern (U_2_bool |x5#0@@3|) :no-pattern (U_2_int |x6#0|) :no-pattern (U_2_bool |x6#0|) )))) (=> (and ($Is |f#0@@23| (Tclass._System.___hFunc7 |#$T0@@141| |#$T1@@125| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$T6@@19| |#$R@@145|)) (forall ((|x0#0@@20| T@U) (|x1#0@@16| T@U) (|x2#0@@12| T@U) (|x3#0@@8| T@U) (|x4#0@@4| T@U) (|x5#0@@4| T@U) (|x6#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@20|) BoxType) (= (type |x1#0@@16|) BoxType)) (= (type |x2#0@@12|) BoxType)) (= (type |x3#0@@8|) BoxType)) (= (type |x4#0@@4|) BoxType)) (= (type |x5#0@@4|) BoxType)) (= (type |x6#0@@0|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@20| |#$T0@@141|) ($IsBox |x1#0@@16| |#$T1@@125|)) ($IsBox |x2#0@@12| |#$T2@@97|)) ($IsBox |x3#0@@8| |#$T3@@75|)) ($IsBox |x4#0@@4| |#$T4@@50|)) ($IsBox |x5#0@@4| |#$T5@@50|)) ($IsBox |x6#0@@0| |#$T6@@19|))) (|Set#Equal| (Reads7 |#$T0@@141| |#$T1@@125| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$T6@@19| |#$R@@145| $OneHeap |f#0@@23| |x0#0@@20| |x1#0@@16| |x2#0@@12| |x3#0@@8| |x4#0@@4| |x5#0@@4| |x6#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1048| :no-pattern (type |x0#0@@20|) :no-pattern (type |x1#0@@16|) :no-pattern (type |x2#0@@12|) :no-pattern (type |x3#0@@8|) :no-pattern (type |x4#0@@4|) :no-pattern (type |x5#0@@4|) :no-pattern (type |x6#0@@0|) :no-pattern (U_2_int |x0#0@@20|) :no-pattern (U_2_bool |x0#0@@20|) :no-pattern (U_2_int |x1#0@@16|) :no-pattern (U_2_bool |x1#0@@16|) :no-pattern (U_2_int |x2#0@@12|) :no-pattern (U_2_bool |x2#0@@12|) :no-pattern (U_2_int |x3#0@@8|) :no-pattern (U_2_bool |x3#0@@8|) :no-pattern (U_2_int |x4#0@@4|) :no-pattern (U_2_bool |x4#0@@4|) :no-pattern (U_2_int |x5#0@@4|) :no-pattern (U_2_bool |x5#0@@4|) :no-pattern (U_2_int |x6#0@@0|) :no-pattern (U_2_bool |x6#0@@0|) ))) ($Is |f#0@@23| (Tclass._System.___hPartialFunc7 |#$T0@@141| |#$T1@@125| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$T6@@19| |#$R@@145|))))) :qid |unknown.0:0| :skolemid |1049| :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc7 |#$T0@@141| |#$T1@@125| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$T6@@19| |#$R@@145|))) )))
(assert (forall ((|#$T0@@142| T@U) (|#$T1@@126| T@U) (|#$T2@@98| T@U) (|#$T3@@76| T@U) (|#$T4@@51| T@U) (|#$T5@@51| T@U) (|#$T6@@20| T@U) (|#$R@@146| T@U) (|f#0@@24| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@142|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$T2@@98|) TyType)) (= (type |#$T3@@76|) TyType)) (= (type |#$T4@@51|) TyType)) (= (type |#$T5@@51|) TyType)) (= (type |#$T6@@20|) TyType)) (= (type |#$R@@146|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc7 |#$T0@@142| |#$T1@@126| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@51| |#$T6@@20| |#$R@@146|) $h@@23) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc7 |#$T0@@142| |#$T1@@126| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@51| |#$T6@@20| |#$R@@146|) $h@@23)) (=> ($IsAlloc |f#0@@24| (Tclass._System.___hFunc7 |#$T0@@142| |#$T1@@126| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@51| |#$T6@@20| |#$R@@146|) $h@@23) ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc7 |#$T0@@142| |#$T1@@126| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@51| |#$T6@@20| |#$R@@146|) $h@@23)))) :qid |unknown.0:0| :skolemid |1050| :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc7 |#$T0@@142| |#$T1@@126| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@51| |#$T6@@20| |#$R@@146|) $h@@23)) )))
(assert (forall ((arg0@@288 T@U) (arg1@@139 T@U) (arg2@@95 T@U) (arg3@@71 T@U) (arg4@@60 T@U) (arg5@@47 T@U) (arg6@@38 T@U) (arg7@@32 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7 arg0@@288 arg1@@139 arg2@@95 arg3@@71 arg4@@60 arg5@@47 arg6@@38 arg7@@32)) TyType) :qid |funType:Tclass._System.___hTotalFunc7| :pattern ( (Tclass._System.___hTotalFunc7 arg0@@288 arg1@@139 arg2@@95 arg3@@71 arg4@@60 arg5@@47 arg6@@38 arg7@@32)) )))
(assert (forall ((|#$T0@@143| T@U) (|#$T1@@127| T@U) (|#$T2@@99| T@U) (|#$T3@@77| T@U) (|#$T4@@52| T@U) (|#$T5@@52| T@U) (|#$T6@@21| T@U) (|#$R@@147| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@143|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$T2@@99|) TyType)) (= (type |#$T3@@77|) TyType)) (= (type |#$T4@@52|) TyType)) (= (type |#$T5@@52|) TyType)) (= (type |#$T6@@21|) TyType)) (= (type |#$R@@147|) TyType)) (= (Tag (Tclass._System.___hTotalFunc7 |#$T0@@143| |#$T1@@127| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@52| |#$T6@@21| |#$R@@147|)) Tagclass._System.___hTotalFunc7)) :qid |unknown.0:0| :skolemid |1051| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@143| |#$T1@@127| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@52| |#$T6@@21| |#$R@@147|)) )))
(assert (forall ((arg0@@289 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_0 arg0@@289)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_0| :pattern ( (Tclass._System.___hTotalFunc7_0 arg0@@289)) )))
(assert (forall ((|#$T0@@144| T@U) (|#$T1@@128| T@U) (|#$T2@@100| T@U) (|#$T3@@78| T@U) (|#$T4@@53| T@U) (|#$T5@@53| T@U) (|#$T6@@22| T@U) (|#$R@@148| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@144|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$T2@@100|) TyType)) (= (type |#$T3@@78|) TyType)) (= (type |#$T4@@53|) TyType)) (= (type |#$T5@@53|) TyType)) (= (type |#$T6@@22|) TyType)) (= (type |#$R@@148|) TyType)) (= (Tclass._System.___hTotalFunc7_0 (Tclass._System.___hTotalFunc7 |#$T0@@144| |#$T1@@128| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@53| |#$T6@@22| |#$R@@148|)) |#$T0@@144|)) :qid |unknown.0:0| :skolemid |1052| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@144| |#$T1@@128| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@53| |#$T6@@22| |#$R@@148|)) )))
(assert (forall ((arg0@@290 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_1 arg0@@290)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_1| :pattern ( (Tclass._System.___hTotalFunc7_1 arg0@@290)) )))
(assert (forall ((|#$T0@@145| T@U) (|#$T1@@129| T@U) (|#$T2@@101| T@U) (|#$T3@@79| T@U) (|#$T4@@54| T@U) (|#$T5@@54| T@U) (|#$T6@@23| T@U) (|#$R@@149| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@145|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$T2@@101|) TyType)) (= (type |#$T3@@79|) TyType)) (= (type |#$T4@@54|) TyType)) (= (type |#$T5@@54|) TyType)) (= (type |#$T6@@23|) TyType)) (= (type |#$R@@149|) TyType)) (= (Tclass._System.___hTotalFunc7_1 (Tclass._System.___hTotalFunc7 |#$T0@@145| |#$T1@@129| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@54| |#$T6@@23| |#$R@@149|)) |#$T1@@129|)) :qid |unknown.0:0| :skolemid |1053| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@145| |#$T1@@129| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@54| |#$T6@@23| |#$R@@149|)) )))
(assert (forall ((arg0@@291 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_2 arg0@@291)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_2| :pattern ( (Tclass._System.___hTotalFunc7_2 arg0@@291)) )))
(assert (forall ((|#$T0@@146| T@U) (|#$T1@@130| T@U) (|#$T2@@102| T@U) (|#$T3@@80| T@U) (|#$T4@@55| T@U) (|#$T5@@55| T@U) (|#$T6@@24| T@U) (|#$R@@150| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@146|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$T2@@102|) TyType)) (= (type |#$T3@@80|) TyType)) (= (type |#$T4@@55|) TyType)) (= (type |#$T5@@55|) TyType)) (= (type |#$T6@@24|) TyType)) (= (type |#$R@@150|) TyType)) (= (Tclass._System.___hTotalFunc7_2 (Tclass._System.___hTotalFunc7 |#$T0@@146| |#$T1@@130| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@55| |#$T6@@24| |#$R@@150|)) |#$T2@@102|)) :qid |unknown.0:0| :skolemid |1054| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@146| |#$T1@@130| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@55| |#$T6@@24| |#$R@@150|)) )))
(assert (forall ((arg0@@292 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_3 arg0@@292)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_3| :pattern ( (Tclass._System.___hTotalFunc7_3 arg0@@292)) )))
(assert (forall ((|#$T0@@147| T@U) (|#$T1@@131| T@U) (|#$T2@@103| T@U) (|#$T3@@81| T@U) (|#$T4@@56| T@U) (|#$T5@@56| T@U) (|#$T6@@25| T@U) (|#$R@@151| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@147|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$T2@@103|) TyType)) (= (type |#$T3@@81|) TyType)) (= (type |#$T4@@56|) TyType)) (= (type |#$T5@@56|) TyType)) (= (type |#$T6@@25|) TyType)) (= (type |#$R@@151|) TyType)) (= (Tclass._System.___hTotalFunc7_3 (Tclass._System.___hTotalFunc7 |#$T0@@147| |#$T1@@131| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@56| |#$T6@@25| |#$R@@151|)) |#$T3@@81|)) :qid |unknown.0:0| :skolemid |1055| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@147| |#$T1@@131| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@56| |#$T6@@25| |#$R@@151|)) )))
(assert (forall ((arg0@@293 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_4 arg0@@293)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_4| :pattern ( (Tclass._System.___hTotalFunc7_4 arg0@@293)) )))
(assert (forall ((|#$T0@@148| T@U) (|#$T1@@132| T@U) (|#$T2@@104| T@U) (|#$T3@@82| T@U) (|#$T4@@57| T@U) (|#$T5@@57| T@U) (|#$T6@@26| T@U) (|#$R@@152| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@148|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$T2@@104|) TyType)) (= (type |#$T3@@82|) TyType)) (= (type |#$T4@@57|) TyType)) (= (type |#$T5@@57|) TyType)) (= (type |#$T6@@26|) TyType)) (= (type |#$R@@152|) TyType)) (= (Tclass._System.___hTotalFunc7_4 (Tclass._System.___hTotalFunc7 |#$T0@@148| |#$T1@@132| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@57| |#$T6@@26| |#$R@@152|)) |#$T4@@57|)) :qid |unknown.0:0| :skolemid |1056| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@148| |#$T1@@132| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@57| |#$T6@@26| |#$R@@152|)) )))
(assert (forall ((arg0@@294 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_5 arg0@@294)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_5| :pattern ( (Tclass._System.___hTotalFunc7_5 arg0@@294)) )))
(assert (forall ((|#$T0@@149| T@U) (|#$T1@@133| T@U) (|#$T2@@105| T@U) (|#$T3@@83| T@U) (|#$T4@@58| T@U) (|#$T5@@58| T@U) (|#$T6@@27| T@U) (|#$R@@153| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@149|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$T2@@105|) TyType)) (= (type |#$T3@@83|) TyType)) (= (type |#$T4@@58|) TyType)) (= (type |#$T5@@58|) TyType)) (= (type |#$T6@@27|) TyType)) (= (type |#$R@@153|) TyType)) (= (Tclass._System.___hTotalFunc7_5 (Tclass._System.___hTotalFunc7 |#$T0@@149| |#$T1@@133| |#$T2@@105| |#$T3@@83| |#$T4@@58| |#$T5@@58| |#$T6@@27| |#$R@@153|)) |#$T5@@58|)) :qid |unknown.0:0| :skolemid |1057| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@149| |#$T1@@133| |#$T2@@105| |#$T3@@83| |#$T4@@58| |#$T5@@58| |#$T6@@27| |#$R@@153|)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_6 arg0@@295)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_6| :pattern ( (Tclass._System.___hTotalFunc7_6 arg0@@295)) )))
(assert (forall ((|#$T0@@150| T@U) (|#$T1@@134| T@U) (|#$T2@@106| T@U) (|#$T3@@84| T@U) (|#$T4@@59| T@U) (|#$T5@@59| T@U) (|#$T6@@28| T@U) (|#$R@@154| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@150|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$T2@@106|) TyType)) (= (type |#$T3@@84|) TyType)) (= (type |#$T4@@59|) TyType)) (= (type |#$T5@@59|) TyType)) (= (type |#$T6@@28|) TyType)) (= (type |#$R@@154|) TyType)) (= (Tclass._System.___hTotalFunc7_6 (Tclass._System.___hTotalFunc7 |#$T0@@150| |#$T1@@134| |#$T2@@106| |#$T3@@84| |#$T4@@59| |#$T5@@59| |#$T6@@28| |#$R@@154|)) |#$T6@@28|)) :qid |unknown.0:0| :skolemid |1058| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@150| |#$T1@@134| |#$T2@@106| |#$T3@@84| |#$T4@@59| |#$T5@@59| |#$T6@@28| |#$R@@154|)) )))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_7 arg0@@296)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_7| :pattern ( (Tclass._System.___hTotalFunc7_7 arg0@@296)) )))
(assert (forall ((|#$T0@@151| T@U) (|#$T1@@135| T@U) (|#$T2@@107| T@U) (|#$T3@@85| T@U) (|#$T4@@60| T@U) (|#$T5@@60| T@U) (|#$T6@@29| T@U) (|#$R@@155| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@151|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$T2@@107|) TyType)) (= (type |#$T3@@85|) TyType)) (= (type |#$T4@@60|) TyType)) (= (type |#$T5@@60|) TyType)) (= (type |#$T6@@29|) TyType)) (= (type |#$R@@155|) TyType)) (= (Tclass._System.___hTotalFunc7_7 (Tclass._System.___hTotalFunc7 |#$T0@@151| |#$T1@@135| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@60| |#$T6@@29| |#$R@@155|)) |#$R@@155|)) :qid |unknown.0:0| :skolemid |1059| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@151| |#$T1@@135| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@60| |#$T6@@29| |#$R@@155|)) )))
(assert (forall ((|#$T0@@152| T@U) (|#$T1@@136| T@U) (|#$T2@@108| T@U) (|#$T3@@86| T@U) (|#$T4@@61| T@U) (|#$T5@@61| T@U) (|#$T6@@30| T@U) (|#$R@@156| T@U) (bx@@98 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@152|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$T2@@108|) TyType)) (= (type |#$T3@@86|) TyType)) (= (type |#$T4@@61|) TyType)) (= (type |#$T5@@61|) TyType)) (= (type |#$T6@@30|) TyType)) (= (type |#$R@@156|) TyType)) (= (type bx@@98) BoxType)) ($IsBox bx@@98 (Tclass._System.___hTotalFunc7 |#$T0@@152| |#$T1@@136| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@61| |#$T6@@30| |#$R@@156|))) (and (= ($Box ($Unbox HandleTypeType bx@@98)) bx@@98) ($Is ($Unbox HandleTypeType bx@@98) (Tclass._System.___hTotalFunc7 |#$T0@@152| |#$T1@@136| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@61| |#$T6@@30| |#$R@@156|)))) :qid |unknown.0:0| :skolemid |1060| :pattern ( ($IsBox bx@@98 (Tclass._System.___hTotalFunc7 |#$T0@@152| |#$T1@@136| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@61| |#$T6@@30| |#$R@@156|))) )))
(assert (forall ((|#$T0@@153| T@U) (|#$T1@@137| T@U) (|#$T2@@109| T@U) (|#$T3@@87| T@U) (|#$T4@@62| T@U) (|#$T5@@62| T@U) (|#$T6@@31| T@U) (|#$R@@157| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@153|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$T2@@109|) TyType)) (= (type |#$T3@@87|) TyType)) (= (type |#$T4@@62|) TyType)) (= (type |#$T5@@62|) TyType)) (= (type |#$T6@@31|) TyType)) (= (type |#$R@@157|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (and (=> ($Is |f#0@@25| (Tclass._System.___hTotalFunc7 |#$T0@@153| |#$T1@@137| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$T6@@31| |#$R@@157|)) (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc7 |#$T0@@153| |#$T1@@137| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$T6@@31| |#$R@@157|)) (forall ((|x0#0@@21| T@U) (|x1#0@@17| T@U) (|x2#0@@13| T@U) (|x3#0@@9| T@U) (|x4#0@@5| T@U) (|x5#0@@5| T@U) (|x6#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@21|) BoxType) (= (type |x1#0@@17|) BoxType)) (= (type |x2#0@@13|) BoxType)) (= (type |x3#0@@9|) BoxType)) (= (type |x4#0@@5|) BoxType)) (= (type |x5#0@@5|) BoxType)) (= (type |x6#0@@1|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@21| |#$T0@@153|) ($IsBox |x1#0@@17| |#$T1@@137|)) ($IsBox |x2#0@@13| |#$T2@@109|)) ($IsBox |x3#0@@9| |#$T3@@87|)) ($IsBox |x4#0@@5| |#$T4@@62|)) ($IsBox |x5#0@@5| |#$T5@@62|)) ($IsBox |x6#0@@1| |#$T6@@31|))) (Requires7 |#$T0@@153| |#$T1@@137| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$T6@@31| |#$R@@157| $OneHeap |f#0@@25| |x0#0@@21| |x1#0@@17| |x2#0@@13| |x3#0@@9| |x4#0@@5| |x5#0@@5| |x6#0@@1|)) :qid |unknown.0:0| :skolemid |1061| :no-pattern (type |x0#0@@21|) :no-pattern (type |x1#0@@17|) :no-pattern (type |x2#0@@13|) :no-pattern (type |x3#0@@9|) :no-pattern (type |x4#0@@5|) :no-pattern (type |x5#0@@5|) :no-pattern (type |x6#0@@1|) :no-pattern (U_2_int |x0#0@@21|) :no-pattern (U_2_bool |x0#0@@21|) :no-pattern (U_2_int |x1#0@@17|) :no-pattern (U_2_bool |x1#0@@17|) :no-pattern (U_2_int |x2#0@@13|) :no-pattern (U_2_bool |x2#0@@13|) :no-pattern (U_2_int |x3#0@@9|) :no-pattern (U_2_bool |x3#0@@9|) :no-pattern (U_2_int |x4#0@@5|) :no-pattern (U_2_bool |x4#0@@5|) :no-pattern (U_2_int |x5#0@@5|) :no-pattern (U_2_bool |x5#0@@5|) :no-pattern (U_2_int |x6#0@@1|) :no-pattern (U_2_bool |x6#0@@1|) )))) (=> (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc7 |#$T0@@153| |#$T1@@137| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$T6@@31| |#$R@@157|)) (forall ((|x0#0@@22| T@U) (|x1#0@@18| T@U) (|x2#0@@14| T@U) (|x3#0@@10| T@U) (|x4#0@@6| T@U) (|x5#0@@6| T@U) (|x6#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@22|) BoxType) (= (type |x1#0@@18|) BoxType)) (= (type |x2#0@@14|) BoxType)) (= (type |x3#0@@10|) BoxType)) (= (type |x4#0@@6|) BoxType)) (= (type |x5#0@@6|) BoxType)) (= (type |x6#0@@2|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@22| |#$T0@@153|) ($IsBox |x1#0@@18| |#$T1@@137|)) ($IsBox |x2#0@@14| |#$T2@@109|)) ($IsBox |x3#0@@10| |#$T3@@87|)) ($IsBox |x4#0@@6| |#$T4@@62|)) ($IsBox |x5#0@@6| |#$T5@@62|)) ($IsBox |x6#0@@2| |#$T6@@31|))) (Requires7 |#$T0@@153| |#$T1@@137| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$T6@@31| |#$R@@157| $OneHeap |f#0@@25| |x0#0@@22| |x1#0@@18| |x2#0@@14| |x3#0@@10| |x4#0@@6| |x5#0@@6| |x6#0@@2|)) :qid |unknown.0:0| :skolemid |1061| :no-pattern (type |x0#0@@22|) :no-pattern (type |x1#0@@18|) :no-pattern (type |x2#0@@14|) :no-pattern (type |x3#0@@10|) :no-pattern (type |x4#0@@6|) :no-pattern (type |x5#0@@6|) :no-pattern (type |x6#0@@2|) :no-pattern (U_2_int |x0#0@@22|) :no-pattern (U_2_bool |x0#0@@22|) :no-pattern (U_2_int |x1#0@@18|) :no-pattern (U_2_bool |x1#0@@18|) :no-pattern (U_2_int |x2#0@@14|) :no-pattern (U_2_bool |x2#0@@14|) :no-pattern (U_2_int |x3#0@@10|) :no-pattern (U_2_bool |x3#0@@10|) :no-pattern (U_2_int |x4#0@@6|) :no-pattern (U_2_bool |x4#0@@6|) :no-pattern (U_2_int |x5#0@@6|) :no-pattern (U_2_bool |x5#0@@6|) :no-pattern (U_2_int |x6#0@@2|) :no-pattern (U_2_bool |x6#0@@2|) ))) ($Is |f#0@@25| (Tclass._System.___hTotalFunc7 |#$T0@@153| |#$T1@@137| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$T6@@31| |#$R@@157|))))) :qid |unknown.0:0| :skolemid |1062| :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc7 |#$T0@@153| |#$T1@@137| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$T6@@31| |#$R@@157|))) )))
(assert (forall ((|#$T0@@154| T@U) (|#$T1@@138| T@U) (|#$T2@@110| T@U) (|#$T3@@88| T@U) (|#$T4@@63| T@U) (|#$T5@@63| T@U) (|#$T6@@32| T@U) (|#$R@@158| T@U) (|f#0@@26| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@154|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$T2@@110|) TyType)) (= (type |#$T3@@88|) TyType)) (= (type |#$T4@@63|) TyType)) (= (type |#$T5@@63|) TyType)) (= (type |#$T6@@32|) TyType)) (= (type |#$R@@158|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc7 |#$T0@@154| |#$T1@@138| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@63| |#$T6@@32| |#$R@@158|) $h@@24) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc7 |#$T0@@154| |#$T1@@138| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@63| |#$T6@@32| |#$R@@158|) $h@@24)) (=> ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc7 |#$T0@@154| |#$T1@@138| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@63| |#$T6@@32| |#$R@@158|) $h@@24) ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc7 |#$T0@@154| |#$T1@@138| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@63| |#$T6@@32| |#$R@@158|) $h@@24)))) :qid |unknown.0:0| :skolemid |1063| :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc7 |#$T0@@154| |#$T1@@138| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@63| |#$T6@@32| |#$R@@158|) $h@@24)) )))
(assert (forall ((arg0@@297 T@U) (arg1@@140 T@U) (arg2@@96 T@U) (arg3@@72 T@U) (arg4@@61 T@U) (arg5@@48 T@U) ) (! (= (type (Tclass._System.___hFunc5 arg0@@297 arg1@@140 arg2@@96 arg3@@72 arg4@@61 arg5@@48)) TyType) :qid |funType:Tclass._System.___hFunc5| :pattern ( (Tclass._System.___hFunc5 arg0@@297 arg1@@140 arg2@@96 arg3@@72 arg4@@61 arg5@@48)) )))
(assert (forall ((|#$T0@@155| T@U) (|#$T1@@139| T@U) (|#$T2@@111| T@U) (|#$T3@@89| T@U) (|#$T4@@64| T@U) (|#$R@@159| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@155|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$T2@@111|) TyType)) (= (type |#$T3@@89|) TyType)) (= (type |#$T4@@64|) TyType)) (= (type |#$R@@159|) TyType)) (= (Tag (Tclass._System.___hFunc5 |#$T0@@155| |#$T1@@139| |#$T2@@111| |#$T3@@89| |#$T4@@64| |#$R@@159|)) Tagclass._System.___hFunc5)) :qid |unknown.0:0| :skolemid |1064| :pattern ( (Tclass._System.___hFunc5 |#$T0@@155| |#$T1@@139| |#$T2@@111| |#$T3@@89| |#$T4@@64| |#$R@@159|)) )))
(assert (forall ((arg0@@298 T@U) ) (! (= (type (Tclass._System.___hFunc5_0 arg0@@298)) TyType) :qid |funType:Tclass._System.___hFunc5_0| :pattern ( (Tclass._System.___hFunc5_0 arg0@@298)) )))
(assert (forall ((|#$T0@@156| T@U) (|#$T1@@140| T@U) (|#$T2@@112| T@U) (|#$T3@@90| T@U) (|#$T4@@65| T@U) (|#$R@@160| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@156|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$T2@@112|) TyType)) (= (type |#$T3@@90|) TyType)) (= (type |#$T4@@65|) TyType)) (= (type |#$R@@160|) TyType)) (= (Tclass._System.___hFunc5_0 (Tclass._System.___hFunc5 |#$T0@@156| |#$T1@@140| |#$T2@@112| |#$T3@@90| |#$T4@@65| |#$R@@160|)) |#$T0@@156|)) :qid |unknown.0:0| :skolemid |1065| :pattern ( (Tclass._System.___hFunc5 |#$T0@@156| |#$T1@@140| |#$T2@@112| |#$T3@@90| |#$T4@@65| |#$R@@160|)) )))
(assert (forall ((arg0@@299 T@U) ) (! (= (type (Tclass._System.___hFunc5_1 arg0@@299)) TyType) :qid |funType:Tclass._System.___hFunc5_1| :pattern ( (Tclass._System.___hFunc5_1 arg0@@299)) )))
(assert (forall ((|#$T0@@157| T@U) (|#$T1@@141| T@U) (|#$T2@@113| T@U) (|#$T3@@91| T@U) (|#$T4@@66| T@U) (|#$R@@161| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@157|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$T2@@113|) TyType)) (= (type |#$T3@@91|) TyType)) (= (type |#$T4@@66|) TyType)) (= (type |#$R@@161|) TyType)) (= (Tclass._System.___hFunc5_1 (Tclass._System.___hFunc5 |#$T0@@157| |#$T1@@141| |#$T2@@113| |#$T3@@91| |#$T4@@66| |#$R@@161|)) |#$T1@@141|)) :qid |unknown.0:0| :skolemid |1066| :pattern ( (Tclass._System.___hFunc5 |#$T0@@157| |#$T1@@141| |#$T2@@113| |#$T3@@91| |#$T4@@66| |#$R@@161|)) )))
(assert (forall ((arg0@@300 T@U) ) (! (= (type (Tclass._System.___hFunc5_2 arg0@@300)) TyType) :qid |funType:Tclass._System.___hFunc5_2| :pattern ( (Tclass._System.___hFunc5_2 arg0@@300)) )))
(assert (forall ((|#$T0@@158| T@U) (|#$T1@@142| T@U) (|#$T2@@114| T@U) (|#$T3@@92| T@U) (|#$T4@@67| T@U) (|#$R@@162| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@158|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$T2@@114|) TyType)) (= (type |#$T3@@92|) TyType)) (= (type |#$T4@@67|) TyType)) (= (type |#$R@@162|) TyType)) (= (Tclass._System.___hFunc5_2 (Tclass._System.___hFunc5 |#$T0@@158| |#$T1@@142| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$R@@162|)) |#$T2@@114|)) :qid |unknown.0:0| :skolemid |1067| :pattern ( (Tclass._System.___hFunc5 |#$T0@@158| |#$T1@@142| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$R@@162|)) )))
(assert (forall ((arg0@@301 T@U) ) (! (= (type (Tclass._System.___hFunc5_3 arg0@@301)) TyType) :qid |funType:Tclass._System.___hFunc5_3| :pattern ( (Tclass._System.___hFunc5_3 arg0@@301)) )))
(assert (forall ((|#$T0@@159| T@U) (|#$T1@@143| T@U) (|#$T2@@115| T@U) (|#$T3@@93| T@U) (|#$T4@@68| T@U) (|#$R@@163| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@159|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$T2@@115|) TyType)) (= (type |#$T3@@93|) TyType)) (= (type |#$T4@@68|) TyType)) (= (type |#$R@@163|) TyType)) (= (Tclass._System.___hFunc5_3 (Tclass._System.___hFunc5 |#$T0@@159| |#$T1@@143| |#$T2@@115| |#$T3@@93| |#$T4@@68| |#$R@@163|)) |#$T3@@93|)) :qid |unknown.0:0| :skolemid |1068| :pattern ( (Tclass._System.___hFunc5 |#$T0@@159| |#$T1@@143| |#$T2@@115| |#$T3@@93| |#$T4@@68| |#$R@@163|)) )))
(assert (forall ((arg0@@302 T@U) ) (! (= (type (Tclass._System.___hFunc5_4 arg0@@302)) TyType) :qid |funType:Tclass._System.___hFunc5_4| :pattern ( (Tclass._System.___hFunc5_4 arg0@@302)) )))
(assert (forall ((|#$T0@@160| T@U) (|#$T1@@144| T@U) (|#$T2@@116| T@U) (|#$T3@@94| T@U) (|#$T4@@69| T@U) (|#$R@@164| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@160|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$T2@@116|) TyType)) (= (type |#$T3@@94|) TyType)) (= (type |#$T4@@69|) TyType)) (= (type |#$R@@164|) TyType)) (= (Tclass._System.___hFunc5_4 (Tclass._System.___hFunc5 |#$T0@@160| |#$T1@@144| |#$T2@@116| |#$T3@@94| |#$T4@@69| |#$R@@164|)) |#$T4@@69|)) :qid |unknown.0:0| :skolemid |1069| :pattern ( (Tclass._System.___hFunc5 |#$T0@@160| |#$T1@@144| |#$T2@@116| |#$T3@@94| |#$T4@@69| |#$R@@164|)) )))
(assert (forall ((arg0@@303 T@U) ) (! (= (type (Tclass._System.___hFunc5_5 arg0@@303)) TyType) :qid |funType:Tclass._System.___hFunc5_5| :pattern ( (Tclass._System.___hFunc5_5 arg0@@303)) )))
(assert (forall ((|#$T0@@161| T@U) (|#$T1@@145| T@U) (|#$T2@@117| T@U) (|#$T3@@95| T@U) (|#$T4@@70| T@U) (|#$R@@165| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@161|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$T2@@117|) TyType)) (= (type |#$T3@@95|) TyType)) (= (type |#$T4@@70|) TyType)) (= (type |#$R@@165|) TyType)) (= (Tclass._System.___hFunc5_5 (Tclass._System.___hFunc5 |#$T0@@161| |#$T1@@145| |#$T2@@117| |#$T3@@95| |#$T4@@70| |#$R@@165|)) |#$R@@165|)) :qid |unknown.0:0| :skolemid |1070| :pattern ( (Tclass._System.___hFunc5 |#$T0@@161| |#$T1@@145| |#$T2@@117| |#$T3@@95| |#$T4@@70| |#$R@@165|)) )))
(assert (forall ((|#$T0@@162| T@U) (|#$T1@@146| T@U) (|#$T2@@118| T@U) (|#$T3@@96| T@U) (|#$T4@@71| T@U) (|#$R@@166| T@U) (bx@@99 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@162|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$T2@@118|) TyType)) (= (type |#$T3@@96|) TyType)) (= (type |#$T4@@71|) TyType)) (= (type |#$R@@166|) TyType)) (= (type bx@@99) BoxType)) ($IsBox bx@@99 (Tclass._System.___hFunc5 |#$T0@@162| |#$T1@@146| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$R@@166|))) (and (= ($Box ($Unbox HandleTypeType bx@@99)) bx@@99) ($Is ($Unbox HandleTypeType bx@@99) (Tclass._System.___hFunc5 |#$T0@@162| |#$T1@@146| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$R@@166|)))) :qid |unknown.0:0| :skolemid |1071| :pattern ( ($IsBox bx@@99 (Tclass._System.___hFunc5 |#$T0@@162| |#$T1@@146| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$R@@166|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@304 T@T) (arg1@@141 T@T) (arg2@@97 T@T) (arg3@@73 T@T) (arg4@@62 T@T) (arg5@@49 T@T) (arg6@@39 T@T) ) (! (= (Ctor (MapType8Type arg0@@304 arg1@@141 arg2@@97 arg3@@73 arg4@@62 arg5@@49 arg6@@39)) 27) :qid |ctor:MapType8Type| )) (forall ((arg0@@305 T@T) (arg1@@142 T@T) (arg2@@98 T@T) (arg3@@74 T@T) (arg4@@63 T@T) (arg5@@50 T@T) (arg6@@40 T@T) ) (! (= (MapType8TypeInv0 (MapType8Type arg0@@305 arg1@@142 arg2@@98 arg3@@74 arg4@@63 arg5@@50 arg6@@40)) arg0@@305) :qid |typeInv:MapType8TypeInv0| :pattern ( (MapType8Type arg0@@305 arg1@@142 arg2@@98 arg3@@74 arg4@@63 arg5@@50 arg6@@40)) ))) (forall ((arg0@@306 T@T) (arg1@@143 T@T) (arg2@@99 T@T) (arg3@@75 T@T) (arg4@@64 T@T) (arg5@@51 T@T) (arg6@@41 T@T) ) (! (= (MapType8TypeInv1 (MapType8Type arg0@@306 arg1@@143 arg2@@99 arg3@@75 arg4@@64 arg5@@51 arg6@@41)) arg1@@143) :qid |typeInv:MapType8TypeInv1| :pattern ( (MapType8Type arg0@@306 arg1@@143 arg2@@99 arg3@@75 arg4@@64 arg5@@51 arg6@@41)) ))) (forall ((arg0@@307 T@T) (arg1@@144 T@T) (arg2@@100 T@T) (arg3@@76 T@T) (arg4@@65 T@T) (arg5@@52 T@T) (arg6@@42 T@T) ) (! (= (MapType8TypeInv2 (MapType8Type arg0@@307 arg1@@144 arg2@@100 arg3@@76 arg4@@65 arg5@@52 arg6@@42)) arg2@@100) :qid |typeInv:MapType8TypeInv2| :pattern ( (MapType8Type arg0@@307 arg1@@144 arg2@@100 arg3@@76 arg4@@65 arg5@@52 arg6@@42)) ))) (forall ((arg0@@308 T@T) (arg1@@145 T@T) (arg2@@101 T@T) (arg3@@77 T@T) (arg4@@66 T@T) (arg5@@53 T@T) (arg6@@43 T@T) ) (! (= (MapType8TypeInv3 (MapType8Type arg0@@308 arg1@@145 arg2@@101 arg3@@77 arg4@@66 arg5@@53 arg6@@43)) arg3@@77) :qid |typeInv:MapType8TypeInv3| :pattern ( (MapType8Type arg0@@308 arg1@@145 arg2@@101 arg3@@77 arg4@@66 arg5@@53 arg6@@43)) ))) (forall ((arg0@@309 T@T) (arg1@@146 T@T) (arg2@@102 T@T) (arg3@@78 T@T) (arg4@@67 T@T) (arg5@@54 T@T) (arg6@@44 T@T) ) (! (= (MapType8TypeInv4 (MapType8Type arg0@@309 arg1@@146 arg2@@102 arg3@@78 arg4@@67 arg5@@54 arg6@@44)) arg4@@67) :qid |typeInv:MapType8TypeInv4| :pattern ( (MapType8Type arg0@@309 arg1@@146 arg2@@102 arg3@@78 arg4@@67 arg5@@54 arg6@@44)) ))) (forall ((arg0@@310 T@T) (arg1@@147 T@T) (arg2@@103 T@T) (arg3@@79 T@T) (arg4@@68 T@T) (arg5@@55 T@T) (arg6@@45 T@T) ) (! (= (MapType8TypeInv5 (MapType8Type arg0@@310 arg1@@147 arg2@@103 arg3@@79 arg4@@68 arg5@@55 arg6@@45)) arg5@@55) :qid |typeInv:MapType8TypeInv5| :pattern ( (MapType8Type arg0@@310 arg1@@147 arg2@@103 arg3@@79 arg4@@68 arg5@@55 arg6@@45)) ))) (forall ((arg0@@311 T@T) (arg1@@148 T@T) (arg2@@104 T@T) (arg3@@80 T@T) (arg4@@69 T@T) (arg5@@56 T@T) (arg6@@46 T@T) ) (! (= (MapType8TypeInv6 (MapType8Type arg0@@311 arg1@@148 arg2@@104 arg3@@80 arg4@@69 arg5@@56 arg6@@46)) arg6@@46) :qid |typeInv:MapType8TypeInv6| :pattern ( (MapType8Type arg0@@311 arg1@@148 arg2@@104 arg3@@80 arg4@@69 arg5@@56 arg6@@46)) ))) (forall ((arg0@@312 T@U) (arg1@@149 T@U) (arg2@@105 T@U) (arg3@@81 T@U) (arg4@@70 T@U) (arg5@@57 T@U) (arg6@@47 T@U) ) (! (let ((aVar6@@1 (MapType8TypeInv6 (type arg0@@312)))) (= (type (MapType8Select arg0@@312 arg1@@149 arg2@@105 arg3@@81 arg4@@70 arg5@@57 arg6@@47)) aVar6@@1)) :qid |funType:MapType8Select| :pattern ( (MapType8Select arg0@@312 arg1@@149 arg2@@105 arg3@@81 arg4@@70 arg5@@57 arg6@@47)) ))) (forall ((arg0@@313 T@U) (arg1@@150 T@U) (arg2@@106 T@U) (arg3@@82 T@U) (arg4@@71 T@U) (arg5@@58 T@U) (arg6@@48 T@U) (arg7@@33 T@U) ) (! (let ((aVar6@@2 (type arg7@@33))) (let ((aVar5@@4 (type arg6@@48))) (let ((aVar4@@5 (type arg5@@58))) (let ((aVar3@@6 (type arg4@@71))) (let ((aVar2@@7 (type arg3@@82))) (let ((aVar1@@8 (type arg2@@106))) (let ((aVar0@@6 (type arg1@@150))) (= (type (MapType8Store arg0@@313 arg1@@150 arg2@@106 arg3@@82 arg4@@71 arg5@@58 arg6@@48 arg7@@33)) (MapType8Type aVar0@@6 aVar1@@8 aVar2@@7 aVar3@@6 aVar4@@5 aVar5@@4 aVar6@@2))))))))) :qid |funType:MapType8Store| :pattern ( (MapType8Store arg0@@313 arg1@@150 arg2@@106 arg3@@82 arg4@@71 arg5@@58 arg6@@48 arg7@@33)) ))) (forall ((m@@68 T@U) (x0@@46 T@U) (x1@@40 T@U) (x2@@36 T@U) (x3@@31 T@U) (x4@@25 T@U) (x5@@18 T@U) (val@@47 T@U) ) (! (let ((aVar6@@3 (MapType8TypeInv6 (type m@@68)))) (=> (= (type val@@47) aVar6@@3) (= (MapType8Select (MapType8Store m@@68 x0@@46 x1@@40 x2@@36 x3@@31 x4@@25 x5@@18 val@@47) x0@@46 x1@@40 x2@@36 x3@@31 x4@@25 x5@@18) val@@47))) :qid |mapAx0:MapType8Select| :weight 0 ))) (and (and (and (and (and (and (forall ((val@@48 T@U) (m@@69 T@U) (x0@@47 T@U) (x1@@41 T@U) (x2@@37 T@U) (x3@@32 T@U) (x4@@26 T@U) (x5@@19 T@U) (y0@@38 T@U) (y1@@34 T@U) (y2@@31 T@U) (y3@@27 T@U) (y4@@22 T@U) (y5@@16 T@U) ) (!  (or (= x0@@47 y0@@38) (= (MapType8Select (MapType8Store m@@69 x0@@47 x1@@41 x2@@37 x3@@32 x4@@26 x5@@19 val@@48) y0@@38 y1@@34 y2@@31 y3@@27 y4@@22 y5@@16) (MapType8Select m@@69 y0@@38 y1@@34 y2@@31 y3@@27 y4@@22 y5@@16))) :qid |mapAx1:MapType8Select:0| :weight 0 )) (forall ((val@@49 T@U) (m@@70 T@U) (x0@@48 T@U) (x1@@42 T@U) (x2@@38 T@U) (x3@@33 T@U) (x4@@27 T@U) (x5@@20 T@U) (y0@@39 T@U) (y1@@35 T@U) (y2@@32 T@U) (y3@@28 T@U) (y4@@23 T@U) (y5@@17 T@U) ) (!  (or (= x1@@42 y1@@35) (= (MapType8Select (MapType8Store m@@70 x0@@48 x1@@42 x2@@38 x3@@33 x4@@27 x5@@20 val@@49) y0@@39 y1@@35 y2@@32 y3@@28 y4@@23 y5@@17) (MapType8Select m@@70 y0@@39 y1@@35 y2@@32 y3@@28 y4@@23 y5@@17))) :qid |mapAx1:MapType8Select:1| :weight 0 ))) (forall ((val@@50 T@U) (m@@71 T@U) (x0@@49 T@U) (x1@@43 T@U) (x2@@39 T@U) (x3@@34 T@U) (x4@@28 T@U) (x5@@21 T@U) (y0@@40 T@U) (y1@@36 T@U) (y2@@33 T@U) (y3@@29 T@U) (y4@@24 T@U) (y5@@18 T@U) ) (!  (or (= x2@@39 y2@@33) (= (MapType8Select (MapType8Store m@@71 x0@@49 x1@@43 x2@@39 x3@@34 x4@@28 x5@@21 val@@50) y0@@40 y1@@36 y2@@33 y3@@29 y4@@24 y5@@18) (MapType8Select m@@71 y0@@40 y1@@36 y2@@33 y3@@29 y4@@24 y5@@18))) :qid |mapAx1:MapType8Select:2| :weight 0 ))) (forall ((val@@51 T@U) (m@@72 T@U) (x0@@50 T@U) (x1@@44 T@U) (x2@@40 T@U) (x3@@35 T@U) (x4@@29 T@U) (x5@@22 T@U) (y0@@41 T@U) (y1@@37 T@U) (y2@@34 T@U) (y3@@30 T@U) (y4@@25 T@U) (y5@@19 T@U) ) (!  (or (= x3@@35 y3@@30) (= (MapType8Select (MapType8Store m@@72 x0@@50 x1@@44 x2@@40 x3@@35 x4@@29 x5@@22 val@@51) y0@@41 y1@@37 y2@@34 y3@@30 y4@@25 y5@@19) (MapType8Select m@@72 y0@@41 y1@@37 y2@@34 y3@@30 y4@@25 y5@@19))) :qid |mapAx1:MapType8Select:3| :weight 0 ))) (forall ((val@@52 T@U) (m@@73 T@U) (x0@@51 T@U) (x1@@45 T@U) (x2@@41 T@U) (x3@@36 T@U) (x4@@30 T@U) (x5@@23 T@U) (y0@@42 T@U) (y1@@38 T@U) (y2@@35 T@U) (y3@@31 T@U) (y4@@26 T@U) (y5@@20 T@U) ) (!  (or (= x4@@30 y4@@26) (= (MapType8Select (MapType8Store m@@73 x0@@51 x1@@45 x2@@41 x3@@36 x4@@30 x5@@23 val@@52) y0@@42 y1@@38 y2@@35 y3@@31 y4@@26 y5@@20) (MapType8Select m@@73 y0@@42 y1@@38 y2@@35 y3@@31 y4@@26 y5@@20))) :qid |mapAx1:MapType8Select:4| :weight 0 ))) (forall ((val@@53 T@U) (m@@74 T@U) (x0@@52 T@U) (x1@@46 T@U) (x2@@42 T@U) (x3@@37 T@U) (x4@@31 T@U) (x5@@24 T@U) (y0@@43 T@U) (y1@@39 T@U) (y2@@36 T@U) (y3@@32 T@U) (y4@@27 T@U) (y5@@21 T@U) ) (!  (or (= x5@@24 y5@@21) (= (MapType8Select (MapType8Store m@@74 x0@@52 x1@@46 x2@@42 x3@@37 x4@@31 x5@@24 val@@53) y0@@43 y1@@39 y2@@36 y3@@32 y4@@27 y5@@21) (MapType8Select m@@74 y0@@43 y1@@39 y2@@36 y3@@32 y4@@27 y5@@21))) :qid |mapAx1:MapType8Select:5| :weight 0 ))) (forall ((val@@54 T@U) (m@@75 T@U) (x0@@53 T@U) (x1@@47 T@U) (x2@@43 T@U) (x3@@38 T@U) (x4@@32 T@U) (x5@@25 T@U) (y0@@44 T@U) (y1@@40 T@U) (y2@@37 T@U) (y3@@33 T@U) (y4@@28 T@U) (y5@@22 T@U) ) (!  (or true (= (MapType8Select (MapType8Store m@@75 x0@@53 x1@@47 x2@@43 x3@@38 x4@@32 x5@@25 val@@54) y0@@44 y1@@40 y2@@37 y3@@33 y4@@28 y5@@22) (MapType8Select m@@75 y0@@44 y1@@40 y2@@37 y3@@33 y4@@28 y5@@22))) :qid |mapAx2:MapType8Select| :weight 0 )))) (forall ((arg0@@314 T@U) (arg1@@151 T@U) (arg2@@107 T@U) (arg3@@83 T@U) (arg4@@72 T@U) (arg5@@59 T@U) (arg6@@49 T@U) (arg7@@34 T@U) (arg8@@20 T@U) (arg9@@6 T@U) (arg10@@5 T@U) (arg11@@3 T@U) (arg12@@3 T@U) ) (! (= (type (Apply5 arg0@@314 arg1@@151 arg2@@107 arg3@@83 arg4@@72 arg5@@59 arg6@@49 arg7@@34 arg8@@20 arg9@@6 arg10@@5 arg11@@3 arg12@@3)) BoxType) :qid |funType:Apply5| :pattern ( (Apply5 arg0@@314 arg1@@151 arg2@@107 arg3@@83 arg4@@72 arg5@@59 arg6@@49 arg7@@34 arg8@@20 arg9@@6 arg10@@5 arg11@@3 arg12@@3)) ))) (forall ((arg0@@315 T@U) (arg1@@152 T@U) (arg2@@108 T@U) ) (! (= (type (Handle5 arg0@@315 arg1@@152 arg2@@108)) HandleTypeType) :qid |funType:Handle5| :pattern ( (Handle5 arg0@@315 arg1@@152 arg2@@108)) ))))
(assert (forall ((t0@@117 T@U) (t1@@93 T@U) (t2@@74 T@U) (t3@@59 T@U) (t4@@44 T@U) (t5@@29 T@U) (heap@@36 T@U) (h@@69 T@U) (r@@41 T@U) (rd@@20 T@U) (bx0@@95 T@U) (bx1@@79 T@U) (bx2@@63 T@U) (bx3@@47 T@U) (bx4@@31 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@117) TyType) (= (type t1@@93) TyType)) (= (type t2@@74) TyType)) (= (type t3@@59) TyType)) (= (type t4@@44) TyType)) (= (type t5@@29) TyType)) (= (type heap@@36) (MapType0Type refType MapType1Type))) (= (type h@@69) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@41) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@20) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@95) BoxType)) (= (type bx1@@79) BoxType)) (= (type bx2@@63) BoxType)) (= (type bx3@@47) BoxType)) (= (type bx4@@31) BoxType)) (= (Apply5 t0@@117 t1@@93 t2@@74 t3@@59 t4@@44 t5@@29 heap@@36 (Handle5 h@@69 r@@41 rd@@20) bx0@@95 bx1@@79 bx2@@63 bx3@@47 bx4@@31) (MapType8Select h@@69 heap@@36 bx0@@95 bx1@@79 bx2@@63 bx3@@47 bx4@@31))) :qid |unknown.0:0| :skolemid |1072| :pattern ( (Apply5 t0@@117 t1@@93 t2@@74 t3@@59 t4@@44 t5@@29 heap@@36 (Handle5 h@@69 r@@41 rd@@20) bx0@@95 bx1@@79 bx2@@63 bx3@@47 bx4@@31)) )))
(assert (forall ((t0@@118 T@U) (t1@@94 T@U) (t2@@75 T@U) (t3@@60 T@U) (t4@@45 T@U) (t5@@30 T@U) (heap@@37 T@U) (h@@70 T@U) (r@@42 T@U) (rd@@21 T@U) (bx0@@96 T@U) (bx1@@80 T@U) (bx2@@64 T@U) (bx3@@48 T@U) (bx4@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@118) TyType) (= (type t1@@94) TyType)) (= (type t2@@75) TyType)) (= (type t3@@60) TyType)) (= (type t4@@45) TyType)) (= (type t5@@30) TyType)) (= (type heap@@37) (MapType0Type refType MapType1Type))) (= (type h@@70) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@42) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@21) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@96) BoxType)) (= (type bx1@@80) BoxType)) (= (type bx2@@64) BoxType)) (= (type bx3@@48) BoxType)) (= (type bx4@@32) BoxType)) (U_2_bool (MapType8Select r@@42 heap@@37 bx0@@96 bx1@@80 bx2@@64 bx3@@48 bx4@@32))) (Requires5 t0@@118 t1@@94 t2@@75 t3@@60 t4@@45 t5@@30 heap@@37 (Handle5 h@@70 r@@42 rd@@21) bx0@@96 bx1@@80 bx2@@64 bx3@@48 bx4@@32)) :qid |unknown.0:0| :skolemid |1073| :pattern ( (Requires5 t0@@118 t1@@94 t2@@75 t3@@60 t4@@45 t5@@30 heap@@37 (Handle5 h@@70 r@@42 rd@@21) bx0@@96 bx1@@80 bx2@@64 bx3@@48 bx4@@32)) )))
(assert (forall ((arg0@@316 T@U) (arg1@@153 T@U) (arg2@@109 T@U) (arg3@@84 T@U) (arg4@@73 T@U) (arg5@@60 T@U) (arg6@@50 T@U) (arg7@@35 T@U) (arg8@@21 T@U) (arg9@@7 T@U) (arg10@@6 T@U) (arg11@@4 T@U) (arg12@@4 T@U) ) (! (= (type (Reads5 arg0@@316 arg1@@153 arg2@@109 arg3@@84 arg4@@73 arg5@@60 arg6@@50 arg7@@35 arg8@@21 arg9@@7 arg10@@6 arg11@@4 arg12@@4)) (MapType0Type BoxType boolType)) :qid |funType:Reads5| :pattern ( (Reads5 arg0@@316 arg1@@153 arg2@@109 arg3@@84 arg4@@73 arg5@@60 arg6@@50 arg7@@35 arg8@@21 arg9@@7 arg10@@6 arg11@@4 arg12@@4)) )))
(assert (forall ((t0@@119 T@U) (t1@@95 T@U) (t2@@76 T@U) (t3@@61 T@U) (t4@@46 T@U) (t5@@31 T@U) (heap@@38 T@U) (h@@71 T@U) (r@@43 T@U) (rd@@22 T@U) (bx0@@97 T@U) (bx1@@81 T@U) (bx2@@65 T@U) (bx3@@49 T@U) (bx4@@33 T@U) (bx@@100 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@119) TyType) (= (type t1@@95) TyType)) (= (type t2@@76) TyType)) (= (type t3@@61) TyType)) (= (type t4@@46) TyType)) (= (type t5@@31) TyType)) (= (type heap@@38) (MapType0Type refType MapType1Type))) (= (type h@@71) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@43) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@22) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@97) BoxType)) (= (type bx1@@81) BoxType)) (= (type bx2@@65) BoxType)) (= (type bx3@@49) BoxType)) (= (type bx4@@33) BoxType)) (= (type bx@@100) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads5 t0@@119 t1@@95 t2@@76 t3@@61 t4@@46 t5@@31 heap@@38 (Handle5 h@@71 r@@43 rd@@22) bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33) bx@@100)) (U_2_bool (MapType0Select (MapType8Select rd@@22 heap@@38 bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33) bx@@100))) (=> (U_2_bool (MapType0Select (MapType8Select rd@@22 heap@@38 bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33) bx@@100)) (U_2_bool (MapType0Select (Reads5 t0@@119 t1@@95 t2@@76 t3@@61 t4@@46 t5@@31 heap@@38 (Handle5 h@@71 r@@43 rd@@22) bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33) bx@@100))))) :qid |unknown.0:0| :skolemid |1074| :pattern ( (MapType0Select (Reads5 t0@@119 t1@@95 t2@@76 t3@@61 t4@@46 t5@@31 heap@@38 (Handle5 h@@71 r@@43 rd@@22) bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33) bx@@100)) )))
(assert (forall ((t0@@120 T@U) (t1@@96 T@U) (t2@@77 T@U) (t3@@62 T@U) (t4@@47 T@U) (t5@@32 T@U) (h0@@42 T@U) (h1@@42 T@U) (f@@89 T@U) (bx0@@98 T@U) (bx1@@82 T@U) (bx2@@66 T@U) (bx3@@50 T@U) (bx4@@34 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@120) TyType) (= (type t1@@96) TyType)) (= (type t2@@77) TyType)) (= (type t3@@62) TyType)) (= (type t4@@47) TyType)) (= (type t5@@32) TyType)) (= (type h0@@42) (MapType0Type refType MapType1Type))) (= (type h1@@42) (MapType0Type refType MapType1Type))) (= (type f@@89) HandleTypeType)) (= (type bx0@@98) BoxType)) (= (type bx1@@82) BoxType)) (= (type bx2@@66) BoxType)) (= (type bx3@@50) BoxType)) (= (type bx4@@34) BoxType)) (and (and (and ($HeapSucc h0@@42 h1@@42) (and ($IsGoodHeap h0@@42) ($IsGoodHeap h1@@42))) (and (and (and (and (and ($IsBox bx0@@98 t0@@120) ($IsBox bx1@@82 t1@@96)) ($IsBox bx2@@66 t2@@77)) ($IsBox bx3@@50 t3@@62)) ($IsBox bx4@@34 t4@@47)) ($Is f@@89 (Tclass._System.___hFunc5 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32)))) (forall ((o@@96 T@U) (fld@@41 T@U) ) (! (let ((a@@126 (FieldTypeInv0 (type fld@@41)))) (=> (and (and (= (type o@@96) refType) (= (type fld@@41) (FieldType a@@126))) (and (not (= o@@96 null)) (U_2_bool (MapType0Select (Reads5 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 h0@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34) ($Box o@@96))))) (= (MapType1Select (MapType0Select h0@@42 o@@96) fld@@41) (MapType1Select (MapType0Select h1@@42 o@@96) fld@@41)))) :qid |unknown.0:0| :skolemid |1075| :no-pattern (type o@@96) :no-pattern (type fld@@41) :no-pattern (U_2_int o@@96) :no-pattern (U_2_bool o@@96) :no-pattern (U_2_int fld@@41) :no-pattern (U_2_bool fld@@41) )))) (= (Reads5 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 h0@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34) (Reads5 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 h1@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34))) :qid |unknown.0:0| :skolemid |1076| :pattern ( ($HeapSucc h0@@42 h1@@42) (Reads5 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 h1@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34)) )))
(assert (forall ((t0@@121 T@U) (t1@@97 T@U) (t2@@78 T@U) (t3@@63 T@U) (t4@@48 T@U) (t5@@33 T@U) (h0@@43 T@U) (h1@@43 T@U) (f@@90 T@U) (bx0@@99 T@U) (bx1@@83 T@U) (bx2@@67 T@U) (bx3@@51 T@U) (bx4@@35 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@121) TyType) (= (type t1@@97) TyType)) (= (type t2@@78) TyType)) (= (type t3@@63) TyType)) (= (type t4@@48) TyType)) (= (type t5@@33) TyType)) (= (type h0@@43) (MapType0Type refType MapType1Type))) (= (type h1@@43) (MapType0Type refType MapType1Type))) (= (type f@@90) HandleTypeType)) (= (type bx0@@99) BoxType)) (= (type bx1@@83) BoxType)) (= (type bx2@@67) BoxType)) (= (type bx3@@51) BoxType)) (= (type bx4@@35) BoxType)) (and (and (and ($HeapSucc h0@@43 h1@@43) (and ($IsGoodHeap h0@@43) ($IsGoodHeap h1@@43))) (and (and (and (and (and ($IsBox bx0@@99 t0@@121) ($IsBox bx1@@83 t1@@97)) ($IsBox bx2@@67 t2@@78)) ($IsBox bx3@@51 t3@@63)) ($IsBox bx4@@35 t4@@48)) ($Is f@@90 (Tclass._System.___hFunc5 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33)))) (forall ((o@@97 T@U) (fld@@42 T@U) ) (! (let ((a@@127 (FieldTypeInv0 (type fld@@42)))) (=> (and (and (= (type o@@97) refType) (= (type fld@@42) (FieldType a@@127))) (and (not (= o@@97 null)) (U_2_bool (MapType0Select (Reads5 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 h1@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35) ($Box o@@97))))) (= (MapType1Select (MapType0Select h0@@43 o@@97) fld@@42) (MapType1Select (MapType0Select h1@@43 o@@97) fld@@42)))) :qid |unknown.0:0| :skolemid |1077| :no-pattern (type o@@97) :no-pattern (type fld@@42) :no-pattern (U_2_int o@@97) :no-pattern (U_2_bool o@@97) :no-pattern (U_2_int fld@@42) :no-pattern (U_2_bool fld@@42) )))) (= (Reads5 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 h0@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35) (Reads5 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 h1@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35))) :qid |unknown.0:0| :skolemid |1078| :pattern ( ($HeapSucc h0@@43 h1@@43) (Reads5 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 h1@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35)) )))
(assert (forall ((t0@@122 T@U) (t1@@98 T@U) (t2@@79 T@U) (t3@@64 T@U) (t4@@49 T@U) (t5@@34 T@U) (h0@@44 T@U) (h1@@44 T@U) (f@@91 T@U) (bx0@@100 T@U) (bx1@@84 T@U) (bx2@@68 T@U) (bx3@@52 T@U) (bx4@@36 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@122) TyType) (= (type t1@@98) TyType)) (= (type t2@@79) TyType)) (= (type t3@@64) TyType)) (= (type t4@@49) TyType)) (= (type t5@@34) TyType)) (= (type h0@@44) (MapType0Type refType MapType1Type))) (= (type h1@@44) (MapType0Type refType MapType1Type))) (= (type f@@91) HandleTypeType)) (= (type bx0@@100) BoxType)) (= (type bx1@@84) BoxType)) (= (type bx2@@68) BoxType)) (= (type bx3@@52) BoxType)) (= (type bx4@@36) BoxType)) (and (and (and ($HeapSucc h0@@44 h1@@44) (and ($IsGoodHeap h0@@44) ($IsGoodHeap h1@@44))) (and (and (and (and (and ($IsBox bx0@@100 t0@@122) ($IsBox bx1@@84 t1@@98)) ($IsBox bx2@@68 t2@@79)) ($IsBox bx3@@52 t3@@64)) ($IsBox bx4@@36 t4@@49)) ($Is f@@91 (Tclass._System.___hFunc5 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34)))) (forall ((o@@98 T@U) (fld@@43 T@U) ) (! (let ((a@@128 (FieldTypeInv0 (type fld@@43)))) (=> (and (and (= (type o@@98) refType) (= (type fld@@43) (FieldType a@@128))) (and (not (= o@@98 null)) (U_2_bool (MapType0Select (Reads5 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 h0@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36) ($Box o@@98))))) (= (MapType1Select (MapType0Select h0@@44 o@@98) fld@@43) (MapType1Select (MapType0Select h1@@44 o@@98) fld@@43)))) :qid |unknown.0:0| :skolemid |1079| :no-pattern (type o@@98) :no-pattern (type fld@@43) :no-pattern (U_2_int o@@98) :no-pattern (U_2_bool o@@98) :no-pattern (U_2_int fld@@43) :no-pattern (U_2_bool fld@@43) )))) (and (=> (Requires5 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 h0@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36) (Requires5 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 h1@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36)) (=> (Requires5 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 h1@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36) (Requires5 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 h0@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36)))) :qid |unknown.0:0| :skolemid |1080| :pattern ( ($HeapSucc h0@@44 h1@@44) (Requires5 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 h1@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36)) )))
(assert (forall ((t0@@123 T@U) (t1@@99 T@U) (t2@@80 T@U) (t3@@65 T@U) (t4@@50 T@U) (t5@@35 T@U) (h0@@45 T@U) (h1@@45 T@U) (f@@92 T@U) (bx0@@101 T@U) (bx1@@85 T@U) (bx2@@69 T@U) (bx3@@53 T@U) (bx4@@37 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@123) TyType) (= (type t1@@99) TyType)) (= (type t2@@80) TyType)) (= (type t3@@65) TyType)) (= (type t4@@50) TyType)) (= (type t5@@35) TyType)) (= (type h0@@45) (MapType0Type refType MapType1Type))) (= (type h1@@45) (MapType0Type refType MapType1Type))) (= (type f@@92) HandleTypeType)) (= (type bx0@@101) BoxType)) (= (type bx1@@85) BoxType)) (= (type bx2@@69) BoxType)) (= (type bx3@@53) BoxType)) (= (type bx4@@37) BoxType)) (and (and (and ($HeapSucc h0@@45 h1@@45) (and ($IsGoodHeap h0@@45) ($IsGoodHeap h1@@45))) (and (and (and (and (and ($IsBox bx0@@101 t0@@123) ($IsBox bx1@@85 t1@@99)) ($IsBox bx2@@69 t2@@80)) ($IsBox bx3@@53 t3@@65)) ($IsBox bx4@@37 t4@@50)) ($Is f@@92 (Tclass._System.___hFunc5 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35)))) (forall ((o@@99 T@U) (fld@@44 T@U) ) (! (let ((a@@129 (FieldTypeInv0 (type fld@@44)))) (=> (and (and (= (type o@@99) refType) (= (type fld@@44) (FieldType a@@129))) (and (not (= o@@99 null)) (U_2_bool (MapType0Select (Reads5 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37) ($Box o@@99))))) (= (MapType1Select (MapType0Select h0@@45 o@@99) fld@@44) (MapType1Select (MapType0Select h1@@45 o@@99) fld@@44)))) :qid |unknown.0:0| :skolemid |1081| :no-pattern (type o@@99) :no-pattern (type fld@@44) :no-pattern (U_2_int o@@99) :no-pattern (U_2_bool o@@99) :no-pattern (U_2_int fld@@44) :no-pattern (U_2_bool fld@@44) )))) (and (=> (Requires5 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 h0@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37) (Requires5 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37)) (=> (Requires5 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37) (Requires5 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 h0@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37)))) :qid |unknown.0:0| :skolemid |1082| :pattern ( ($HeapSucc h0@@45 h1@@45) (Requires5 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37)) )))
(assert (forall ((t0@@124 T@U) (t1@@100 T@U) (t2@@81 T@U) (t3@@66 T@U) (t4@@51 T@U) (t5@@36 T@U) (h0@@46 T@U) (h1@@46 T@U) (f@@93 T@U) (bx0@@102 T@U) (bx1@@86 T@U) (bx2@@70 T@U) (bx3@@54 T@U) (bx4@@38 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@124) TyType) (= (type t1@@100) TyType)) (= (type t2@@81) TyType)) (= (type t3@@66) TyType)) (= (type t4@@51) TyType)) (= (type t5@@36) TyType)) (= (type h0@@46) (MapType0Type refType MapType1Type))) (= (type h1@@46) (MapType0Type refType MapType1Type))) (= (type f@@93) HandleTypeType)) (= (type bx0@@102) BoxType)) (= (type bx1@@86) BoxType)) (= (type bx2@@70) BoxType)) (= (type bx3@@54) BoxType)) (= (type bx4@@38) BoxType)) (and (and (and ($HeapSucc h0@@46 h1@@46) (and ($IsGoodHeap h0@@46) ($IsGoodHeap h1@@46))) (and (and (and (and (and ($IsBox bx0@@102 t0@@124) ($IsBox bx1@@86 t1@@100)) ($IsBox bx2@@70 t2@@81)) ($IsBox bx3@@54 t3@@66)) ($IsBox bx4@@38 t4@@51)) ($Is f@@93 (Tclass._System.___hFunc5 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36)))) (forall ((o@@100 T@U) (fld@@45 T@U) ) (! (let ((a@@130 (FieldTypeInv0 (type fld@@45)))) (=> (and (and (= (type o@@100) refType) (= (type fld@@45) (FieldType a@@130))) (and (not (= o@@100 null)) (U_2_bool (MapType0Select (Reads5 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 h0@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38) ($Box o@@100))))) (= (MapType1Select (MapType0Select h0@@46 o@@100) fld@@45) (MapType1Select (MapType0Select h1@@46 o@@100) fld@@45)))) :qid |unknown.0:0| :skolemid |1083| :no-pattern (type o@@100) :no-pattern (type fld@@45) :no-pattern (U_2_int o@@100) :no-pattern (U_2_bool o@@100) :no-pattern (U_2_int fld@@45) :no-pattern (U_2_bool fld@@45) )))) (= (Apply5 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 h0@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38) (Apply5 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 h1@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38))) :qid |unknown.0:0| :skolemid |1084| :pattern ( ($HeapSucc h0@@46 h1@@46) (Apply5 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 h1@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38)) )))
(assert (forall ((t0@@125 T@U) (t1@@101 T@U) (t2@@82 T@U) (t3@@67 T@U) (t4@@52 T@U) (t5@@37 T@U) (h0@@47 T@U) (h1@@47 T@U) (f@@94 T@U) (bx0@@103 T@U) (bx1@@87 T@U) (bx2@@71 T@U) (bx3@@55 T@U) (bx4@@39 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@125) TyType) (= (type t1@@101) TyType)) (= (type t2@@82) TyType)) (= (type t3@@67) TyType)) (= (type t4@@52) TyType)) (= (type t5@@37) TyType)) (= (type h0@@47) (MapType0Type refType MapType1Type))) (= (type h1@@47) (MapType0Type refType MapType1Type))) (= (type f@@94) HandleTypeType)) (= (type bx0@@103) BoxType)) (= (type bx1@@87) BoxType)) (= (type bx2@@71) BoxType)) (= (type bx3@@55) BoxType)) (= (type bx4@@39) BoxType)) (and (and (and ($HeapSucc h0@@47 h1@@47) (and ($IsGoodHeap h0@@47) ($IsGoodHeap h1@@47))) (and (and (and (and (and ($IsBox bx0@@103 t0@@125) ($IsBox bx1@@87 t1@@101)) ($IsBox bx2@@71 t2@@82)) ($IsBox bx3@@55 t3@@67)) ($IsBox bx4@@39 t4@@52)) ($Is f@@94 (Tclass._System.___hFunc5 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37)))) (forall ((o@@101 T@U) (fld@@46 T@U) ) (! (let ((a@@131 (FieldTypeInv0 (type fld@@46)))) (=> (and (and (= (type o@@101) refType) (= (type fld@@46) (FieldType a@@131))) (and (not (= o@@101 null)) (U_2_bool (MapType0Select (Reads5 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 h1@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39) ($Box o@@101))))) (= (MapType1Select (MapType0Select h0@@47 o@@101) fld@@46) (MapType1Select (MapType0Select h1@@47 o@@101) fld@@46)))) :qid |unknown.0:0| :skolemid |1085| :no-pattern (type o@@101) :no-pattern (type fld@@46) :no-pattern (U_2_int o@@101) :no-pattern (U_2_bool o@@101) :no-pattern (U_2_int fld@@46) :no-pattern (U_2_bool fld@@46) )))) (= (Apply5 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 h0@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39) (Apply5 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 h1@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39))) :qid |unknown.0:0| :skolemid |1086| :pattern ( ($HeapSucc h0@@47 h1@@47) (Apply5 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 h1@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39)) )))
(assert (forall ((t0@@126 T@U) (t1@@102 T@U) (t2@@83 T@U) (t3@@68 T@U) (t4@@53 T@U) (t5@@38 T@U) (heap@@39 T@U) (f@@95 T@U) (bx0@@104 T@U) (bx1@@88 T@U) (bx2@@72 T@U) (bx3@@56 T@U) (bx4@@40 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@126) TyType) (= (type t1@@102) TyType)) (= (type t2@@83) TyType)) (= (type t3@@68) TyType)) (= (type t4@@53) TyType)) (= (type t5@@38) TyType)) (= (type heap@@39) (MapType0Type refType MapType1Type))) (= (type f@@95) HandleTypeType)) (= (type bx0@@104) BoxType)) (= (type bx1@@88) BoxType)) (= (type bx2@@72) BoxType)) (= (type bx3@@56) BoxType)) (= (type bx4@@40) BoxType)) (and ($IsGoodHeap heap@@39) (and (and (and (and (and ($IsBox bx0@@104 t0@@126) ($IsBox bx1@@88 t1@@102)) ($IsBox bx2@@72 t2@@83)) ($IsBox bx3@@56 t3@@68)) ($IsBox bx4@@40 t4@@53)) ($Is f@@95 (Tclass._System.___hFunc5 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38))))) (and (=> (|Set#Equal| (Reads5 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 $OneHeap f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 heap@@39 f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads5 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 heap@@39 f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 $OneHeap f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1087| :pattern ( (Reads5 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 $OneHeap f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40) ($IsGoodHeap heap@@39)) :pattern ( (Reads5 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 heap@@39 f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40)) )))
(assert (forall ((t0@@127 T@U) (t1@@103 T@U) (t2@@84 T@U) (t3@@69 T@U) (t4@@54 T@U) (t5@@39 T@U) (heap@@40 T@U) (f@@96 T@U) (bx0@@105 T@U) (bx1@@89 T@U) (bx2@@73 T@U) (bx3@@57 T@U) (bx4@@41 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@127) TyType) (= (type t1@@103) TyType)) (= (type t2@@84) TyType)) (= (type t3@@69) TyType)) (= (type t4@@54) TyType)) (= (type t5@@39) TyType)) (= (type heap@@40) (MapType0Type refType MapType1Type))) (= (type f@@96) HandleTypeType)) (= (type bx0@@105) BoxType)) (= (type bx1@@89) BoxType)) (= (type bx2@@73) BoxType)) (= (type bx3@@57) BoxType)) (= (type bx4@@41) BoxType)) (and (and ($IsGoodHeap heap@@40) (and (and (and (and (and ($IsBox bx0@@105 t0@@127) ($IsBox bx1@@89 t1@@103)) ($IsBox bx2@@73 t2@@84)) ($IsBox bx3@@57 t3@@69)) ($IsBox bx4@@41 t4@@54)) ($Is f@@96 (Tclass._System.___hFunc5 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39)))) (|Set#Equal| (Reads5 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41) (|Set#Empty| BoxType)))) (and (=> (Requires5 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41) (Requires5 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 heap@@40 f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41)) (=> (Requires5 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 heap@@40 f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41) (Requires5 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41)))) :qid |unknown.0:0| :skolemid |1088| :pattern ( (Requires5 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41) ($IsGoodHeap heap@@40)) :pattern ( (Requires5 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 heap@@40 f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41)) )))
(assert (forall ((f@@97 T@U) (t0@@128 T@U) (t1@@104 T@U) (t2@@85 T@U) (t3@@70 T@U) (t4@@55 T@U) (t5@@40 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@97) HandleTypeType) (= (type t0@@128) TyType)) (= (type t1@@104) TyType)) (= (type t2@@85) TyType)) (= (type t3@@70) TyType)) (= (type t4@@55) TyType)) (= (type t5@@40) TyType)) (and (=> ($Is f@@97 (Tclass._System.___hFunc5 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40)) (forall ((h@@72 T@U) (bx0@@106 T@U) (bx1@@90 T@U) (bx2@@74 T@U) (bx3@@58 T@U) (bx4@@42 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@72) (MapType0Type refType MapType1Type)) (= (type bx0@@106) BoxType)) (= (type bx1@@90) BoxType)) (= (type bx2@@74) BoxType)) (= (type bx3@@58) BoxType)) (= (type bx4@@42) BoxType)) (and (and ($IsGoodHeap h@@72) (and (and (and (and ($IsBox bx0@@106 t0@@128) ($IsBox bx1@@90 t1@@104)) ($IsBox bx2@@74 t2@@85)) ($IsBox bx3@@58 t3@@70)) ($IsBox bx4@@42 t4@@55))) (Requires5 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 h@@72 f@@97 bx0@@106 bx1@@90 bx2@@74 bx3@@58 bx4@@42))) ($IsBox (Apply5 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 h@@72 f@@97 bx0@@106 bx1@@90 bx2@@74 bx3@@58 bx4@@42) t5@@40)) :qid |DafnyPre.521:12| :skolemid |1089| :pattern ( (Apply5 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 h@@72 f@@97 bx0@@106 bx1@@90 bx2@@74 bx3@@58 bx4@@42)) ))) (=> (forall ((h@@73 T@U) (bx0@@107 T@U) (bx1@@91 T@U) (bx2@@75 T@U) (bx3@@59 T@U) (bx4@@43 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@73) (MapType0Type refType MapType1Type)) (= (type bx0@@107) BoxType)) (= (type bx1@@91) BoxType)) (= (type bx2@@75) BoxType)) (= (type bx3@@59) BoxType)) (= (type bx4@@43) BoxType)) (and (and ($IsGoodHeap h@@73) (and (and (and (and ($IsBox bx0@@107 t0@@128) ($IsBox bx1@@91 t1@@104)) ($IsBox bx2@@75 t2@@85)) ($IsBox bx3@@59 t3@@70)) ($IsBox bx4@@43 t4@@55))) (Requires5 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 h@@73 f@@97 bx0@@107 bx1@@91 bx2@@75 bx3@@59 bx4@@43))) ($IsBox (Apply5 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 h@@73 f@@97 bx0@@107 bx1@@91 bx2@@75 bx3@@59 bx4@@43) t5@@40)) :qid |DafnyPre.521:12| :skolemid |1089| :pattern ( (Apply5 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 h@@73 f@@97 bx0@@107 bx1@@91 bx2@@75 bx3@@59 bx4@@43)) )) ($Is f@@97 (Tclass._System.___hFunc5 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40))))) :qid |unknown.0:0| :skolemid |1090| :pattern ( ($Is f@@97 (Tclass._System.___hFunc5 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40))) )))
(assert (forall ((f@@98 T@U) (t0@@129 T@U) (t1@@105 T@U) (t2@@86 T@U) (t3@@71 T@U) (t4@@56 T@U) (t5@@41 T@U) (u0@@6 T@U) (u1@@5 T@U) (u2@@4 T@U) (u3@@3 T@U) (u4@@2 T@U) (u5@@1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@98) HandleTypeType) (= (type t0@@129) TyType)) (= (type t1@@105) TyType)) (= (type t2@@86) TyType)) (= (type t3@@71) TyType)) (= (type t4@@56) TyType)) (= (type t5@@41) TyType)) (= (type u0@@6) TyType)) (= (type u1@@5) TyType)) (= (type u2@@4) TyType)) (= (type u3@@3) TyType)) (= (type u4@@2) TyType)) (= (type u5@@1) TyType)) (and (and (and (and (and (and ($Is f@@98 (Tclass._System.___hFunc5 t0@@129 t1@@105 t2@@86 t3@@71 t4@@56 t5@@41)) (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 u0@@6)) ($IsBox bx@@101 t0@@129)) :qid |unknown.0:0| :skolemid |1091| :pattern ( ($IsBox bx@@101 u0@@6)) :pattern ( ($IsBox bx@@101 t0@@129)) ))) (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 u1@@5)) ($IsBox bx@@102 t1@@105)) :qid |unknown.0:0| :skolemid |1092| :pattern ( ($IsBox bx@@102 u1@@5)) :pattern ( ($IsBox bx@@102 t1@@105)) ))) (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 u2@@4)) ($IsBox bx@@103 t2@@86)) :qid |unknown.0:0| :skolemid |1093| :pattern ( ($IsBox bx@@103 u2@@4)) :pattern ( ($IsBox bx@@103 t2@@86)) ))) (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 u3@@3)) ($IsBox bx@@104 t3@@71)) :qid |unknown.0:0| :skolemid |1094| :pattern ( ($IsBox bx@@104 u3@@3)) :pattern ( ($IsBox bx@@104 t3@@71)) ))) (forall ((bx@@105 T@U) ) (!  (=> (and (= (type bx@@105) BoxType) ($IsBox bx@@105 u4@@2)) ($IsBox bx@@105 t4@@56)) :qid |unknown.0:0| :skolemid |1095| :pattern ( ($IsBox bx@@105 u4@@2)) :pattern ( ($IsBox bx@@105 t4@@56)) ))) (forall ((bx@@106 T@U) ) (!  (=> (and (= (type bx@@106) BoxType) ($IsBox bx@@106 t5@@41)) ($IsBox bx@@106 u5@@1)) :qid |unknown.0:0| :skolemid |1096| :pattern ( ($IsBox bx@@106 t5@@41)) :pattern ( ($IsBox bx@@106 u5@@1)) )))) ($Is f@@98 (Tclass._System.___hFunc5 u0@@6 u1@@5 u2@@4 u3@@3 u4@@2 u5@@1))) :qid |unknown.0:0| :skolemid |1097| :pattern ( ($Is f@@98 (Tclass._System.___hFunc5 t0@@129 t1@@105 t2@@86 t3@@71 t4@@56 t5@@41)) ($Is f@@98 (Tclass._System.___hFunc5 u0@@6 u1@@5 u2@@4 u3@@3 u4@@2 u5@@1))) )))
(assert (forall ((f@@99 T@U) (t0@@130 T@U) (t1@@106 T@U) (t2@@87 T@U) (t3@@72 T@U) (t4@@57 T@U) (t5@@42 T@U) (h@@74 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@99) HandleTypeType) (= (type t0@@130) TyType)) (= (type t1@@106) TyType)) (= (type t2@@87) TyType)) (= (type t3@@72) TyType)) (= (type t4@@57) TyType)) (= (type t5@@42) TyType)) (= (type h@@74) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@74)) (and (=> ($IsAlloc f@@99 (Tclass._System.___hFunc5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42) h@@74) (forall ((bx0@@108 T@U) (bx1@@92 T@U) (bx2@@76 T@U) (bx3@@60 T@U) (bx4@@44 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@108) BoxType) (= (type bx1@@92) BoxType)) (= (type bx2@@76) BoxType)) (= (type bx3@@60) BoxType)) (= (type bx4@@44) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@108 t0@@130) ($IsAllocBox bx0@@108 t0@@130 h@@74)) (and ($IsBox bx1@@92 t1@@106) ($IsAllocBox bx1@@92 t1@@106 h@@74))) (and ($IsBox bx2@@76 t2@@87) ($IsAllocBox bx2@@76 t2@@87 h@@74))) (and ($IsBox bx3@@60 t3@@72) ($IsAllocBox bx3@@60 t3@@72 h@@74))) (and ($IsBox bx4@@44 t4@@57) ($IsAllocBox bx4@@44 t4@@57 h@@74))) (Requires5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44)) (forall ((r@@44 T@U) ) (!  (=> (= (type r@@44) refType) (=> (and (not (= r@@44 null)) (U_2_bool (MapType0Select (Reads5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44) ($Box r@@44)))) (U_2_bool (MapType1Select (MapType0Select h@@74 r@@44) alloc)))) :qid |unknown.0:0| :skolemid |1098| :pattern ( (MapType0Select (Reads5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44) ($Box r@@44))) )))) :qid |unknown.0:0| :skolemid |1099| :pattern ( (Apply5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44)) :pattern ( (Reads5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44)) ))) (=> (forall ((bx0@@109 T@U) (bx1@@93 T@U) (bx2@@77 T@U) (bx3@@61 T@U) (bx4@@45 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@109) BoxType) (= (type bx1@@93) BoxType)) (= (type bx2@@77) BoxType)) (= (type bx3@@61) BoxType)) (= (type bx4@@45) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@109 t0@@130) ($IsAllocBox bx0@@109 t0@@130 h@@74)) (and ($IsBox bx1@@93 t1@@106) ($IsAllocBox bx1@@93 t1@@106 h@@74))) (and ($IsBox bx2@@77 t2@@87) ($IsAllocBox bx2@@77 t2@@87 h@@74))) (and ($IsBox bx3@@61 t3@@72) ($IsAllocBox bx3@@61 t3@@72 h@@74))) (and ($IsBox bx4@@45 t4@@57) ($IsAllocBox bx4@@45 t4@@57 h@@74))) (Requires5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45)) (forall ((r@@45 T@U) ) (!  (=> (= (type r@@45) refType) (=> (and (not (= r@@45 null)) (U_2_bool (MapType0Select (Reads5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45) ($Box r@@45)))) (U_2_bool (MapType1Select (MapType0Select h@@74 r@@45) alloc)))) :qid |unknown.0:0| :skolemid |1098| :pattern ( (MapType0Select (Reads5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45) ($Box r@@45))) )))) :qid |unknown.0:0| :skolemid |1099| :pattern ( (Apply5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45)) :pattern ( (Reads5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45)) )) ($IsAlloc f@@99 (Tclass._System.___hFunc5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42) h@@74)))) :qid |unknown.0:0| :skolemid |1100| :pattern ( ($IsAlloc f@@99 (Tclass._System.___hFunc5 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42) h@@74)) )))
(assert (forall ((f@@100 T@U) (t0@@131 T@U) (t1@@107 T@U) (t2@@88 T@U) (t3@@73 T@U) (t4@@58 T@U) (t5@@43 T@U) (h@@75 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@100) HandleTypeType) (= (type t0@@131) TyType)) (= (type t1@@107) TyType)) (= (type t2@@88) TyType)) (= (type t3@@73) TyType)) (= (type t4@@58) TyType)) (= (type t5@@43) TyType)) (= (type h@@75) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@75) ($IsAlloc f@@100 (Tclass._System.___hFunc5 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43) h@@75))) (forall ((bx0@@110 T@U) (bx1@@94 T@U) (bx2@@78 T@U) (bx3@@62 T@U) (bx4@@46 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@110) BoxType) (= (type bx1@@94) BoxType)) (= (type bx2@@78) BoxType)) (= (type bx3@@62) BoxType)) (= (type bx4@@46) BoxType)) (=> (and (and (and (and (and ($IsAllocBox bx0@@110 t0@@131 h@@75) ($IsAllocBox bx1@@94 t1@@107 h@@75)) ($IsAllocBox bx2@@78 t2@@88 h@@75)) ($IsAllocBox bx3@@62 t3@@73 h@@75)) ($IsAllocBox bx4@@46 t4@@58 h@@75)) (Requires5 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 h@@75 f@@100 bx0@@110 bx1@@94 bx2@@78 bx3@@62 bx4@@46)) ($IsAllocBox (Apply5 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 h@@75 f@@100 bx0@@110 bx1@@94 bx2@@78 bx3@@62 bx4@@46) t5@@43 h@@75))) :qid |unknown.0:0| :skolemid |1101| :pattern ( (Apply5 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 h@@75 f@@100 bx0@@110 bx1@@94 bx2@@78 bx3@@62 bx4@@46)) ))) :qid |unknown.0:0| :skolemid |1102| :pattern ( ($IsAlloc f@@100 (Tclass._System.___hFunc5 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43) h@@75)) )))
(assert (forall ((arg0@@317 T@U) (arg1@@154 T@U) (arg2@@110 T@U) (arg3@@85 T@U) (arg4@@74 T@U) (arg5@@61 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5 arg0@@317 arg1@@154 arg2@@110 arg3@@85 arg4@@74 arg5@@61)) TyType) :qid |funType:Tclass._System.___hPartialFunc5| :pattern ( (Tclass._System.___hPartialFunc5 arg0@@317 arg1@@154 arg2@@110 arg3@@85 arg4@@74 arg5@@61)) )))
(assert (forall ((|#$T0@@163| T@U) (|#$T1@@147| T@U) (|#$T2@@119| T@U) (|#$T3@@97| T@U) (|#$T4@@72| T@U) (|#$R@@167| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@163|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$T2@@119|) TyType)) (= (type |#$T3@@97|) TyType)) (= (type |#$T4@@72|) TyType)) (= (type |#$R@@167|) TyType)) (= (Tag (Tclass._System.___hPartialFunc5 |#$T0@@163| |#$T1@@147| |#$T2@@119| |#$T3@@97| |#$T4@@72| |#$R@@167|)) Tagclass._System.___hPartialFunc5)) :qid |unknown.0:0| :skolemid |1103| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@163| |#$T1@@147| |#$T2@@119| |#$T3@@97| |#$T4@@72| |#$R@@167|)) )))
(assert (forall ((arg0@@318 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_0 arg0@@318)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_0| :pattern ( (Tclass._System.___hPartialFunc5_0 arg0@@318)) )))
(assert (forall ((|#$T0@@164| T@U) (|#$T1@@148| T@U) (|#$T2@@120| T@U) (|#$T3@@98| T@U) (|#$T4@@73| T@U) (|#$R@@168| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@164|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$T2@@120|) TyType)) (= (type |#$T3@@98|) TyType)) (= (type |#$T4@@73|) TyType)) (= (type |#$R@@168|) TyType)) (= (Tclass._System.___hPartialFunc5_0 (Tclass._System.___hPartialFunc5 |#$T0@@164| |#$T1@@148| |#$T2@@120| |#$T3@@98| |#$T4@@73| |#$R@@168|)) |#$T0@@164|)) :qid |unknown.0:0| :skolemid |1104| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@164| |#$T1@@148| |#$T2@@120| |#$T3@@98| |#$T4@@73| |#$R@@168|)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_1 arg0@@319)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_1| :pattern ( (Tclass._System.___hPartialFunc5_1 arg0@@319)) )))
(assert (forall ((|#$T0@@165| T@U) (|#$T1@@149| T@U) (|#$T2@@121| T@U) (|#$T3@@99| T@U) (|#$T4@@74| T@U) (|#$R@@169| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@165|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$T2@@121|) TyType)) (= (type |#$T3@@99|) TyType)) (= (type |#$T4@@74|) TyType)) (= (type |#$R@@169|) TyType)) (= (Tclass._System.___hPartialFunc5_1 (Tclass._System.___hPartialFunc5 |#$T0@@165| |#$T1@@149| |#$T2@@121| |#$T3@@99| |#$T4@@74| |#$R@@169|)) |#$T1@@149|)) :qid |unknown.0:0| :skolemid |1105| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@165| |#$T1@@149| |#$T2@@121| |#$T3@@99| |#$T4@@74| |#$R@@169|)) )))
(assert (forall ((arg0@@320 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_2 arg0@@320)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_2| :pattern ( (Tclass._System.___hPartialFunc5_2 arg0@@320)) )))
(assert (forall ((|#$T0@@166| T@U) (|#$T1@@150| T@U) (|#$T2@@122| T@U) (|#$T3@@100| T@U) (|#$T4@@75| T@U) (|#$R@@170| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@166|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$T2@@122|) TyType)) (= (type |#$T3@@100|) TyType)) (= (type |#$T4@@75|) TyType)) (= (type |#$R@@170|) TyType)) (= (Tclass._System.___hPartialFunc5_2 (Tclass._System.___hPartialFunc5 |#$T0@@166| |#$T1@@150| |#$T2@@122| |#$T3@@100| |#$T4@@75| |#$R@@170|)) |#$T2@@122|)) :qid |unknown.0:0| :skolemid |1106| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@166| |#$T1@@150| |#$T2@@122| |#$T3@@100| |#$T4@@75| |#$R@@170|)) )))
(assert (forall ((arg0@@321 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_3 arg0@@321)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_3| :pattern ( (Tclass._System.___hPartialFunc5_3 arg0@@321)) )))
(assert (forall ((|#$T0@@167| T@U) (|#$T1@@151| T@U) (|#$T2@@123| T@U) (|#$T3@@101| T@U) (|#$T4@@76| T@U) (|#$R@@171| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@167|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$T2@@123|) TyType)) (= (type |#$T3@@101|) TyType)) (= (type |#$T4@@76|) TyType)) (= (type |#$R@@171|) TyType)) (= (Tclass._System.___hPartialFunc5_3 (Tclass._System.___hPartialFunc5 |#$T0@@167| |#$T1@@151| |#$T2@@123| |#$T3@@101| |#$T4@@76| |#$R@@171|)) |#$T3@@101|)) :qid |unknown.0:0| :skolemid |1107| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@167| |#$T1@@151| |#$T2@@123| |#$T3@@101| |#$T4@@76| |#$R@@171|)) )))
(assert (forall ((arg0@@322 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_4 arg0@@322)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_4| :pattern ( (Tclass._System.___hPartialFunc5_4 arg0@@322)) )))
(assert (forall ((|#$T0@@168| T@U) (|#$T1@@152| T@U) (|#$T2@@124| T@U) (|#$T3@@102| T@U) (|#$T4@@77| T@U) (|#$R@@172| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@168|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$T2@@124|) TyType)) (= (type |#$T3@@102|) TyType)) (= (type |#$T4@@77|) TyType)) (= (type |#$R@@172|) TyType)) (= (Tclass._System.___hPartialFunc5_4 (Tclass._System.___hPartialFunc5 |#$T0@@168| |#$T1@@152| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$R@@172|)) |#$T4@@77|)) :qid |unknown.0:0| :skolemid |1108| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@168| |#$T1@@152| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$R@@172|)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_5 arg0@@323)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_5| :pattern ( (Tclass._System.___hPartialFunc5_5 arg0@@323)) )))
(assert (forall ((|#$T0@@169| T@U) (|#$T1@@153| T@U) (|#$T2@@125| T@U) (|#$T3@@103| T@U) (|#$T4@@78| T@U) (|#$R@@173| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@169|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$T2@@125|) TyType)) (= (type |#$T3@@103|) TyType)) (= (type |#$T4@@78|) TyType)) (= (type |#$R@@173|) TyType)) (= (Tclass._System.___hPartialFunc5_5 (Tclass._System.___hPartialFunc5 |#$T0@@169| |#$T1@@153| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$R@@173|)) |#$R@@173|)) :qid |unknown.0:0| :skolemid |1109| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@169| |#$T1@@153| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$R@@173|)) )))
(assert (forall ((|#$T0@@170| T@U) (|#$T1@@154| T@U) (|#$T2@@126| T@U) (|#$T3@@104| T@U) (|#$T4@@79| T@U) (|#$R@@174| T@U) (bx@@107 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@170|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$T2@@126|) TyType)) (= (type |#$T3@@104|) TyType)) (= (type |#$T4@@79|) TyType)) (= (type |#$R@@174|) TyType)) (= (type bx@@107) BoxType)) ($IsBox bx@@107 (Tclass._System.___hPartialFunc5 |#$T0@@170| |#$T1@@154| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$R@@174|))) (and (= ($Box ($Unbox HandleTypeType bx@@107)) bx@@107) ($Is ($Unbox HandleTypeType bx@@107) (Tclass._System.___hPartialFunc5 |#$T0@@170| |#$T1@@154| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$R@@174|)))) :qid |unknown.0:0| :skolemid |1110| :pattern ( ($IsBox bx@@107 (Tclass._System.___hPartialFunc5 |#$T0@@170| |#$T1@@154| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$R@@174|))) )))
(assert (forall ((|#$T0@@171| T@U) (|#$T1@@155| T@U) (|#$T2@@127| T@U) (|#$T3@@105| T@U) (|#$T4@@80| T@U) (|#$R@@175| T@U) (|f#0@@27| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@171|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$T2@@127|) TyType)) (= (type |#$T3@@105|) TyType)) (= (type |#$T4@@80|) TyType)) (= (type |#$R@@175|) TyType)) (= (type |f#0@@27|) HandleTypeType)) (and (=> ($Is |f#0@@27| (Tclass._System.___hPartialFunc5 |#$T0@@171| |#$T1@@155| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175|)) (and ($Is |f#0@@27| (Tclass._System.___hFunc5 |#$T0@@171| |#$T1@@155| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175|)) (forall ((|x0#0@@23| T@U) (|x1#0@@19| T@U) (|x2#0@@15| T@U) (|x3#0@@11| T@U) (|x4#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@23|) BoxType) (= (type |x1#0@@19|) BoxType)) (= (type |x2#0@@15|) BoxType)) (= (type |x3#0@@11|) BoxType)) (= (type |x4#0@@7|) BoxType)) (and (and (and (and ($IsBox |x0#0@@23| |#$T0@@171|) ($IsBox |x1#0@@19| |#$T1@@155|)) ($IsBox |x2#0@@15| |#$T2@@127|)) ($IsBox |x3#0@@11| |#$T3@@105|)) ($IsBox |x4#0@@7| |#$T4@@80|))) (|Set#Equal| (Reads5 |#$T0@@171| |#$T1@@155| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175| $OneHeap |f#0@@27| |x0#0@@23| |x1#0@@19| |x2#0@@15| |x3#0@@11| |x4#0@@7|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1111| :no-pattern (type |x0#0@@23|) :no-pattern (type |x1#0@@19|) :no-pattern (type |x2#0@@15|) :no-pattern (type |x3#0@@11|) :no-pattern (type |x4#0@@7|) :no-pattern (U_2_int |x0#0@@23|) :no-pattern (U_2_bool |x0#0@@23|) :no-pattern (U_2_int |x1#0@@19|) :no-pattern (U_2_bool |x1#0@@19|) :no-pattern (U_2_int |x2#0@@15|) :no-pattern (U_2_bool |x2#0@@15|) :no-pattern (U_2_int |x3#0@@11|) :no-pattern (U_2_bool |x3#0@@11|) :no-pattern (U_2_int |x4#0@@7|) :no-pattern (U_2_bool |x4#0@@7|) )))) (=> (and ($Is |f#0@@27| (Tclass._System.___hFunc5 |#$T0@@171| |#$T1@@155| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175|)) (forall ((|x0#0@@24| T@U) (|x1#0@@20| T@U) (|x2#0@@16| T@U) (|x3#0@@12| T@U) (|x4#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@24|) BoxType) (= (type |x1#0@@20|) BoxType)) (= (type |x2#0@@16|) BoxType)) (= (type |x3#0@@12|) BoxType)) (= (type |x4#0@@8|) BoxType)) (and (and (and (and ($IsBox |x0#0@@24| |#$T0@@171|) ($IsBox |x1#0@@20| |#$T1@@155|)) ($IsBox |x2#0@@16| |#$T2@@127|)) ($IsBox |x3#0@@12| |#$T3@@105|)) ($IsBox |x4#0@@8| |#$T4@@80|))) (|Set#Equal| (Reads5 |#$T0@@171| |#$T1@@155| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175| $OneHeap |f#0@@27| |x0#0@@24| |x1#0@@20| |x2#0@@16| |x3#0@@12| |x4#0@@8|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1111| :no-pattern (type |x0#0@@24|) :no-pattern (type |x1#0@@20|) :no-pattern (type |x2#0@@16|) :no-pattern (type |x3#0@@12|) :no-pattern (type |x4#0@@8|) :no-pattern (U_2_int |x0#0@@24|) :no-pattern (U_2_bool |x0#0@@24|) :no-pattern (U_2_int |x1#0@@20|) :no-pattern (U_2_bool |x1#0@@20|) :no-pattern (U_2_int |x2#0@@16|) :no-pattern (U_2_bool |x2#0@@16|) :no-pattern (U_2_int |x3#0@@12|) :no-pattern (U_2_bool |x3#0@@12|) :no-pattern (U_2_int |x4#0@@8|) :no-pattern (U_2_bool |x4#0@@8|) ))) ($Is |f#0@@27| (Tclass._System.___hPartialFunc5 |#$T0@@171| |#$T1@@155| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175|))))) :qid |unknown.0:0| :skolemid |1112| :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc5 |#$T0@@171| |#$T1@@155| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175|))) )))
(assert (forall ((|#$T0@@172| T@U) (|#$T1@@156| T@U) (|#$T2@@128| T@U) (|#$T3@@106| T@U) (|#$T4@@81| T@U) (|#$R@@176| T@U) (|f#0@@28| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@172|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$T2@@128|) TyType)) (= (type |#$T3@@106|) TyType)) (= (type |#$T4@@81|) TyType)) (= (type |#$R@@176|) TyType)) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc5 |#$T0@@172| |#$T1@@156| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$R@@176|) $h@@25) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc5 |#$T0@@172| |#$T1@@156| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$R@@176|) $h@@25)) (=> ($IsAlloc |f#0@@28| (Tclass._System.___hFunc5 |#$T0@@172| |#$T1@@156| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$R@@176|) $h@@25) ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc5 |#$T0@@172| |#$T1@@156| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$R@@176|) $h@@25)))) :qid |unknown.0:0| :skolemid |1113| :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc5 |#$T0@@172| |#$T1@@156| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$R@@176|) $h@@25)) )))
(assert (forall ((arg0@@324 T@U) (arg1@@155 T@U) (arg2@@111 T@U) (arg3@@86 T@U) (arg4@@75 T@U) (arg5@@62 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5 arg0@@324 arg1@@155 arg2@@111 arg3@@86 arg4@@75 arg5@@62)) TyType) :qid |funType:Tclass._System.___hTotalFunc5| :pattern ( (Tclass._System.___hTotalFunc5 arg0@@324 arg1@@155 arg2@@111 arg3@@86 arg4@@75 arg5@@62)) )))
(assert (forall ((|#$T0@@173| T@U) (|#$T1@@157| T@U) (|#$T2@@129| T@U) (|#$T3@@107| T@U) (|#$T4@@82| T@U) (|#$R@@177| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@173|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$T2@@129|) TyType)) (= (type |#$T3@@107|) TyType)) (= (type |#$T4@@82|) TyType)) (= (type |#$R@@177|) TyType)) (= (Tag (Tclass._System.___hTotalFunc5 |#$T0@@173| |#$T1@@157| |#$T2@@129| |#$T3@@107| |#$T4@@82| |#$R@@177|)) Tagclass._System.___hTotalFunc5)) :qid |unknown.0:0| :skolemid |1114| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@173| |#$T1@@157| |#$T2@@129| |#$T3@@107| |#$T4@@82| |#$R@@177|)) )))
(assert (forall ((arg0@@325 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_0 arg0@@325)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_0| :pattern ( (Tclass._System.___hTotalFunc5_0 arg0@@325)) )))
(assert (forall ((|#$T0@@174| T@U) (|#$T1@@158| T@U) (|#$T2@@130| T@U) (|#$T3@@108| T@U) (|#$T4@@83| T@U) (|#$R@@178| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@174|) TyType) (= (type |#$T1@@158|) TyType)) (= (type |#$T2@@130|) TyType)) (= (type |#$T3@@108|) TyType)) (= (type |#$T4@@83|) TyType)) (= (type |#$R@@178|) TyType)) (= (Tclass._System.___hTotalFunc5_0 (Tclass._System.___hTotalFunc5 |#$T0@@174| |#$T1@@158| |#$T2@@130| |#$T3@@108| |#$T4@@83| |#$R@@178|)) |#$T0@@174|)) :qid |unknown.0:0| :skolemid |1115| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@174| |#$T1@@158| |#$T2@@130| |#$T3@@108| |#$T4@@83| |#$R@@178|)) )))
(assert (forall ((arg0@@326 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_1 arg0@@326)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_1| :pattern ( (Tclass._System.___hTotalFunc5_1 arg0@@326)) )))
(assert (forall ((|#$T0@@175| T@U) (|#$T1@@159| T@U) (|#$T2@@131| T@U) (|#$T3@@109| T@U) (|#$T4@@84| T@U) (|#$R@@179| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@175|) TyType) (= (type |#$T1@@159|) TyType)) (= (type |#$T2@@131|) TyType)) (= (type |#$T3@@109|) TyType)) (= (type |#$T4@@84|) TyType)) (= (type |#$R@@179|) TyType)) (= (Tclass._System.___hTotalFunc5_1 (Tclass._System.___hTotalFunc5 |#$T0@@175| |#$T1@@159| |#$T2@@131| |#$T3@@109| |#$T4@@84| |#$R@@179|)) |#$T1@@159|)) :qid |unknown.0:0| :skolemid |1116| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@175| |#$T1@@159| |#$T2@@131| |#$T3@@109| |#$T4@@84| |#$R@@179|)) )))
(assert (forall ((arg0@@327 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_2 arg0@@327)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_2| :pattern ( (Tclass._System.___hTotalFunc5_2 arg0@@327)) )))
(assert (forall ((|#$T0@@176| T@U) (|#$T1@@160| T@U) (|#$T2@@132| T@U) (|#$T3@@110| T@U) (|#$T4@@85| T@U) (|#$R@@180| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@176|) TyType) (= (type |#$T1@@160|) TyType)) (= (type |#$T2@@132|) TyType)) (= (type |#$T3@@110|) TyType)) (= (type |#$T4@@85|) TyType)) (= (type |#$R@@180|) TyType)) (= (Tclass._System.___hTotalFunc5_2 (Tclass._System.___hTotalFunc5 |#$T0@@176| |#$T1@@160| |#$T2@@132| |#$T3@@110| |#$T4@@85| |#$R@@180|)) |#$T2@@132|)) :qid |unknown.0:0| :skolemid |1117| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@176| |#$T1@@160| |#$T2@@132| |#$T3@@110| |#$T4@@85| |#$R@@180|)) )))
(assert (forall ((arg0@@328 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_3 arg0@@328)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_3| :pattern ( (Tclass._System.___hTotalFunc5_3 arg0@@328)) )))
(assert (forall ((|#$T0@@177| T@U) (|#$T1@@161| T@U) (|#$T2@@133| T@U) (|#$T3@@111| T@U) (|#$T4@@86| T@U) (|#$R@@181| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@177|) TyType) (= (type |#$T1@@161|) TyType)) (= (type |#$T2@@133|) TyType)) (= (type |#$T3@@111|) TyType)) (= (type |#$T4@@86|) TyType)) (= (type |#$R@@181|) TyType)) (= (Tclass._System.___hTotalFunc5_3 (Tclass._System.___hTotalFunc5 |#$T0@@177| |#$T1@@161| |#$T2@@133| |#$T3@@111| |#$T4@@86| |#$R@@181|)) |#$T3@@111|)) :qid |unknown.0:0| :skolemid |1118| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@177| |#$T1@@161| |#$T2@@133| |#$T3@@111| |#$T4@@86| |#$R@@181|)) )))
(assert (forall ((arg0@@329 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_4 arg0@@329)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_4| :pattern ( (Tclass._System.___hTotalFunc5_4 arg0@@329)) )))
(assert (forall ((|#$T0@@178| T@U) (|#$T1@@162| T@U) (|#$T2@@134| T@U) (|#$T3@@112| T@U) (|#$T4@@87| T@U) (|#$R@@182| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@178|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |#$T2@@134|) TyType)) (= (type |#$T3@@112|) TyType)) (= (type |#$T4@@87|) TyType)) (= (type |#$R@@182|) TyType)) (= (Tclass._System.___hTotalFunc5_4 (Tclass._System.___hTotalFunc5 |#$T0@@178| |#$T1@@162| |#$T2@@134| |#$T3@@112| |#$T4@@87| |#$R@@182|)) |#$T4@@87|)) :qid |unknown.0:0| :skolemid |1119| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@178| |#$T1@@162| |#$T2@@134| |#$T3@@112| |#$T4@@87| |#$R@@182|)) )))
(assert (forall ((arg0@@330 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_5 arg0@@330)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_5| :pattern ( (Tclass._System.___hTotalFunc5_5 arg0@@330)) )))
(assert (forall ((|#$T0@@179| T@U) (|#$T1@@163| T@U) (|#$T2@@135| T@U) (|#$T3@@113| T@U) (|#$T4@@88| T@U) (|#$R@@183| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@179|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |#$T2@@135|) TyType)) (= (type |#$T3@@113|) TyType)) (= (type |#$T4@@88|) TyType)) (= (type |#$R@@183|) TyType)) (= (Tclass._System.___hTotalFunc5_5 (Tclass._System.___hTotalFunc5 |#$T0@@179| |#$T1@@163| |#$T2@@135| |#$T3@@113| |#$T4@@88| |#$R@@183|)) |#$R@@183|)) :qid |unknown.0:0| :skolemid |1120| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@179| |#$T1@@163| |#$T2@@135| |#$T3@@113| |#$T4@@88| |#$R@@183|)) )))
(assert (forall ((|#$T0@@180| T@U) (|#$T1@@164| T@U) (|#$T2@@136| T@U) (|#$T3@@114| T@U) (|#$T4@@89| T@U) (|#$R@@184| T@U) (bx@@108 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@180|) TyType) (= (type |#$T1@@164|) TyType)) (= (type |#$T2@@136|) TyType)) (= (type |#$T3@@114|) TyType)) (= (type |#$T4@@89|) TyType)) (= (type |#$R@@184|) TyType)) (= (type bx@@108) BoxType)) ($IsBox bx@@108 (Tclass._System.___hTotalFunc5 |#$T0@@180| |#$T1@@164| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$R@@184|))) (and (= ($Box ($Unbox HandleTypeType bx@@108)) bx@@108) ($Is ($Unbox HandleTypeType bx@@108) (Tclass._System.___hTotalFunc5 |#$T0@@180| |#$T1@@164| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$R@@184|)))) :qid |unknown.0:0| :skolemid |1121| :pattern ( ($IsBox bx@@108 (Tclass._System.___hTotalFunc5 |#$T0@@180| |#$T1@@164| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$R@@184|))) )))
(assert (forall ((|#$T0@@181| T@U) (|#$T1@@165| T@U) (|#$T2@@137| T@U) (|#$T3@@115| T@U) (|#$T4@@90| T@U) (|#$R@@185| T@U) (|f#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@181|) TyType) (= (type |#$T1@@165|) TyType)) (= (type |#$T2@@137|) TyType)) (= (type |#$T3@@115|) TyType)) (= (type |#$T4@@90|) TyType)) (= (type |#$R@@185|) TyType)) (= (type |f#0@@29|) HandleTypeType)) (and (=> ($Is |f#0@@29| (Tclass._System.___hTotalFunc5 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185|)) (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc5 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185|)) (forall ((|x0#0@@25| T@U) (|x1#0@@21| T@U) (|x2#0@@17| T@U) (|x3#0@@13| T@U) (|x4#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@25|) BoxType) (= (type |x1#0@@21|) BoxType)) (= (type |x2#0@@17|) BoxType)) (= (type |x3#0@@13|) BoxType)) (= (type |x4#0@@9|) BoxType)) (and (and (and (and ($IsBox |x0#0@@25| |#$T0@@181|) ($IsBox |x1#0@@21| |#$T1@@165|)) ($IsBox |x2#0@@17| |#$T2@@137|)) ($IsBox |x3#0@@13| |#$T3@@115|)) ($IsBox |x4#0@@9| |#$T4@@90|))) (Requires5 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185| $OneHeap |f#0@@29| |x0#0@@25| |x1#0@@21| |x2#0@@17| |x3#0@@13| |x4#0@@9|)) :qid |unknown.0:0| :skolemid |1122| :no-pattern (type |x0#0@@25|) :no-pattern (type |x1#0@@21|) :no-pattern (type |x2#0@@17|) :no-pattern (type |x3#0@@13|) :no-pattern (type |x4#0@@9|) :no-pattern (U_2_int |x0#0@@25|) :no-pattern (U_2_bool |x0#0@@25|) :no-pattern (U_2_int |x1#0@@21|) :no-pattern (U_2_bool |x1#0@@21|) :no-pattern (U_2_int |x2#0@@17|) :no-pattern (U_2_bool |x2#0@@17|) :no-pattern (U_2_int |x3#0@@13|) :no-pattern (U_2_bool |x3#0@@13|) :no-pattern (U_2_int |x4#0@@9|) :no-pattern (U_2_bool |x4#0@@9|) )))) (=> (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc5 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185|)) (forall ((|x0#0@@26| T@U) (|x1#0@@22| T@U) (|x2#0@@18| T@U) (|x3#0@@14| T@U) (|x4#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@26|) BoxType) (= (type |x1#0@@22|) BoxType)) (= (type |x2#0@@18|) BoxType)) (= (type |x3#0@@14|) BoxType)) (= (type |x4#0@@10|) BoxType)) (and (and (and (and ($IsBox |x0#0@@26| |#$T0@@181|) ($IsBox |x1#0@@22| |#$T1@@165|)) ($IsBox |x2#0@@18| |#$T2@@137|)) ($IsBox |x3#0@@14| |#$T3@@115|)) ($IsBox |x4#0@@10| |#$T4@@90|))) (Requires5 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185| $OneHeap |f#0@@29| |x0#0@@26| |x1#0@@22| |x2#0@@18| |x3#0@@14| |x4#0@@10|)) :qid |unknown.0:0| :skolemid |1122| :no-pattern (type |x0#0@@26|) :no-pattern (type |x1#0@@22|) :no-pattern (type |x2#0@@18|) :no-pattern (type |x3#0@@14|) :no-pattern (type |x4#0@@10|) :no-pattern (U_2_int |x0#0@@26|) :no-pattern (U_2_bool |x0#0@@26|) :no-pattern (U_2_int |x1#0@@22|) :no-pattern (U_2_bool |x1#0@@22|) :no-pattern (U_2_int |x2#0@@18|) :no-pattern (U_2_bool |x2#0@@18|) :no-pattern (U_2_int |x3#0@@14|) :no-pattern (U_2_bool |x3#0@@14|) :no-pattern (U_2_int |x4#0@@10|) :no-pattern (U_2_bool |x4#0@@10|) ))) ($Is |f#0@@29| (Tclass._System.___hTotalFunc5 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185|))))) :qid |unknown.0:0| :skolemid |1123| :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc5 |#$T0@@181| |#$T1@@165| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185|))) )))
(assert (forall ((|#$T0@@182| T@U) (|#$T1@@166| T@U) (|#$T2@@138| T@U) (|#$T3@@116| T@U) (|#$T4@@91| T@U) (|#$R@@186| T@U) (|f#0@@30| T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@182|) TyType) (= (type |#$T1@@166|) TyType)) (= (type |#$T2@@138|) TyType)) (= (type |#$T3@@116|) TyType)) (= (type |#$T4@@91|) TyType)) (= (type |#$R@@186|) TyType)) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc5 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$R@@186|) $h@@26) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc5 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$R@@186|) $h@@26)) (=> ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc5 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$R@@186|) $h@@26) ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc5 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$R@@186|) $h@@26)))) :qid |unknown.0:0| :skolemid |1124| :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc5 |#$T0@@182| |#$T1@@166| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$R@@186|) $h@@26)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@6)))) :qid |unknown.0:0| :skolemid |1125| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |1126| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@109 T@U) ) (!  (=> (and (= (type bx@@109) BoxType) ($IsBox bx@@109 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@109)) bx@@109) ($Is ($Unbox DatatypeTypeType bx@@109) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |1127| :pattern ( ($IsBox bx@@109 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@27 T@U) ) (!  (=> (and (= (type $h@@27) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@27)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@27)) :qid |DafnyPre.521:12| :skolemid |1128| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@27)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |1129| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |1130| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@132 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@132 b@@63) true) (=> true (|_System.Tuple0#Equal| a@@132 b@@63)))) :qid |unknown.0:0| :skolemid |1131| :pattern ( (|_System.Tuple0#Equal| a@@132 b@@63)) )))
(assert (forall ((a@@133 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@133) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@133 b@@64) (= a@@133 b@@64)) (=> (= a@@133 b@@64) (|_System.Tuple0#Equal| a@@133 b@@64)))) :qid |unknown.0:0| :skolemid |1132| :pattern ( (|_System.Tuple0#Equal| a@@133 b@@64)) )))
(assert (forall ((arg0@@331 T@U) (arg1@@156 T@U) (arg2@@112 T@U) ) (! (= (type (|#BucketsLib.Bucket.BucketMapWithSeq| arg0@@331 arg1@@156 arg2@@112)) DatatypeTypeType) :qid |funType:#BucketsLib.Bucket.BucketMapWithSeq| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| arg0@@331 arg1@@156 arg2@@112)) )))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) (|a#14#2#0| T@U) ) (!  (=> (and (and (= (type |a#14#0#0|) (MapType BoxType BoxType)) (= (type |a#14#1#0|) (SeqType BoxType))) (= (type |a#14#2#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#BucketsLib.Bucket.BucketMapWithSeq| |a#14#0#0| |a#14#1#0| |a#14#2#0|)) |##BucketsLib.Bucket.BucketMapWithSeq|)) :qid |BucketsL.30:38| :skolemid |1133| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#14#0#0| |a#14#1#0| |a#14#2#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (and (=> (BucketsLib.Bucket.BucketMapWithSeq_q d@@10) (= (DatatypeCtorId d@@10) |##BucketsLib.Bucket.BucketMapWithSeq|)) (=> (= (DatatypeCtorId d@@10) |##BucketsLib.Bucket.BucketMapWithSeq|) (BucketsLib.Bucket.BucketMapWithSeq_q d@@10)))) :qid |unknown.0:0| :skolemid |1134| :pattern ( (BucketsLib.Bucket.BucketMapWithSeq_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (BucketsLib.Bucket.BucketMapWithSeq_q d@@11)) (exists ((|a#15#0#0| T@U) (|a#15#1#0| T@U) (|a#15#2#0| T@U) ) (!  (and (and (and (= (type |a#15#0#0|) (MapType BoxType BoxType)) (= (type |a#15#1#0|) (SeqType BoxType))) (= (type |a#15#2#0|) (SeqType BoxType))) (= d@@11 (|#BucketsLib.Bucket.BucketMapWithSeq| |a#15#0#0| |a#15#1#0| |a#15#2#0|))) :qid |BucketsL.30:38| :skolemid |1135| :no-pattern (type |a#15#0#0|) :no-pattern (type |a#15#1#0|) :no-pattern (type |a#15#2#0|) :no-pattern (U_2_int |a#15#0#0|) :no-pattern (U_2_bool |a#15#0#0|) :no-pattern (U_2_int |a#15#1#0|) :no-pattern (U_2_bool |a#15#1#0|) :no-pattern (U_2_int |a#15#2#0|) :no-pattern (U_2_bool |a#15#2#0|) ))) :qid |unknown.0:0| :skolemid |1136| :pattern ( (BucketsLib.Bucket.BucketMapWithSeq_q d@@11)) )))
(assert (= (type Tclass.KeyType.Key) TyType))
(assert (= (Tag Tclass.KeyType.Key) Tagclass.KeyType.Key))
(assert (forall ((bx@@110 T@U) ) (!  (=> (and (= (type bx@@110) BoxType) ($IsBox bx@@110 Tclass.KeyType.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@110)) bx@@110) ($Is ($Unbox (SeqType BoxType) bx@@110) Tclass.KeyType.Key))) :qid |unknown.0:0| :skolemid |1137| :pattern ( ($IsBox bx@@110 Tclass.KeyType.Key)) )))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (forall ((bx@@111 T@U) ) (!  (=> (and (= (type bx@@111) BoxType) ($IsBox bx@@111 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) Tclass.ValueMessage.Message))) :qid |unknown.0:0| :skolemid |1138| :pattern ( ($IsBox bx@@111 Tclass.ValueMessage.Message)) )))
(assert (= (type Tclass.BucketsLib.Bucket) TyType))
(assert (= (Tag Tclass.BucketsLib.Bucket) Tagclass.BucketsLib.Bucket))
(assert (forall ((bx@@112 T@U) ) (!  (=> (and (= (type bx@@112) BoxType) ($IsBox bx@@112 Tclass.BucketsLib.Bucket)) (and (= ($Box ($Unbox DatatypeTypeType bx@@112)) bx@@112) ($Is ($Unbox DatatypeTypeType bx@@112) Tclass.BucketsLib.Bucket))) :qid |unknown.0:0| :skolemid |1139| :pattern ( ($IsBox bx@@112 Tclass.BucketsLib.Bucket)) )))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) (|a#16#2#0| T@U) ) (!  (=> (and (and (= (type |a#16#0#0|) (MapType BoxType BoxType)) (= (type |a#16#1#0|) (SeqType BoxType))) (= (type |a#16#2#0|) (SeqType BoxType))) (and (=> ($Is (|#BucketsLib.Bucket.BucketMapWithSeq| |a#16#0#0| |a#16#1#0| |a#16#2#0|) Tclass.BucketsLib.Bucket) (and (and ($Is |a#16#0#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |a#16#1#0| (TSeq Tclass.KeyType.Key))) ($Is |a#16#2#0| (TSeq Tclass.ValueMessage.Message)))) (=> (and (and ($Is |a#16#0#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |a#16#1#0| (TSeq Tclass.KeyType.Key))) ($Is |a#16#2#0| (TSeq Tclass.ValueMessage.Message))) ($Is (|#BucketsLib.Bucket.BucketMapWithSeq| |a#16#0#0| |a#16#1#0| |a#16#2#0|) Tclass.BucketsLib.Bucket)))) :qid |BucketsL.30:38| :skolemid |1140| :pattern ( ($Is (|#BucketsLib.Bucket.BucketMapWithSeq| |a#16#0#0| |a#16#1#0| |a#16#2#0|) Tclass.BucketsLib.Bucket)) )))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) (|a#17#2#0| T@U) ($h@@28 T@U) ) (!  (=> (and (and (and (and (= (type |a#17#0#0|) (MapType BoxType BoxType)) (= (type |a#17#1#0|) (SeqType BoxType))) (= (type |a#17#2#0|) (SeqType BoxType))) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@28)) (and (=> ($IsAlloc (|#BucketsLib.Bucket.BucketMapWithSeq| |a#17#0#0| |a#17#1#0| |a#17#2#0|) Tclass.BucketsLib.Bucket $h@@28) (and (and ($IsAlloc |a#17#0#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@28) ($IsAlloc |a#17#1#0| (TSeq Tclass.KeyType.Key) $h@@28)) ($IsAlloc |a#17#2#0| (TSeq Tclass.ValueMessage.Message) $h@@28))) (=> (and (and ($IsAlloc |a#17#0#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@28) ($IsAlloc |a#17#1#0| (TSeq Tclass.KeyType.Key) $h@@28)) ($IsAlloc |a#17#2#0| (TSeq Tclass.ValueMessage.Message) $h@@28)) ($IsAlloc (|#BucketsLib.Bucket.BucketMapWithSeq| |a#17#0#0| |a#17#1#0| |a#17#2#0|) Tclass.BucketsLib.Bucket $h@@28)))) :qid |BucketsL.30:38| :skolemid |1141| :pattern ( ($IsAlloc (|#BucketsLib.Bucket.BucketMapWithSeq| |a#17#0#0| |a#17#1#0| |a#17#2#0|) Tclass.BucketsLib.Bucket $h@@28)) )))
(assert (forall ((arg0@@332 T@U) ) (! (= (type (BucketsLib.Bucket.b arg0@@332)) (MapType BoxType BoxType)) :qid |funType:BucketsLib.Bucket.b| :pattern ( (BucketsLib.Bucket.b arg0@@332)) )))
(assert (forall ((d@@12 T@U) ($h@@29 T@U) ) (!  (=> (and (and (= (type d@@12) DatatypeTypeType) (= (type $h@@29) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@29) (and (BucketsLib.Bucket.BucketMapWithSeq_q d@@12) ($IsAlloc d@@12 Tclass.BucketsLib.Bucket $h@@29)))) ($IsAlloc (BucketsLib.Bucket.b d@@12) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@29)) :qid |unknown.0:0| :skolemid |1142| :pattern ( ($IsAlloc (BucketsLib.Bucket.b d@@12) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $h@@29)) )))
(assert (forall ((arg0@@333 T@U) ) (! (= (type (BucketsLib.Bucket.keys arg0@@333)) (SeqType BoxType)) :qid |funType:BucketsLib.Bucket.keys| :pattern ( (BucketsLib.Bucket.keys arg0@@333)) )))
(assert (forall ((d@@13 T@U) ($h@@30 T@U) ) (!  (=> (and (and (= (type d@@13) DatatypeTypeType) (= (type $h@@30) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@30) (and (BucketsLib.Bucket.BucketMapWithSeq_q d@@13) ($IsAlloc d@@13 Tclass.BucketsLib.Bucket $h@@30)))) ($IsAlloc (BucketsLib.Bucket.keys d@@13) (TSeq Tclass.KeyType.Key) $h@@30)) :qid |unknown.0:0| :skolemid |1143| :pattern ( ($IsAlloc (BucketsLib.Bucket.keys d@@13) (TSeq Tclass.KeyType.Key) $h@@30)) )))
(assert (forall ((arg0@@334 T@U) ) (! (= (type (BucketsLib.Bucket.msgs arg0@@334)) (SeqType BoxType)) :qid |funType:BucketsLib.Bucket.msgs| :pattern ( (BucketsLib.Bucket.msgs arg0@@334)) )))
(assert (forall ((d@@14 T@U) ($h@@31 T@U) ) (!  (=> (and (and (= (type d@@14) DatatypeTypeType) (= (type $h@@31) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@31) (and (BucketsLib.Bucket.BucketMapWithSeq_q d@@14) ($IsAlloc d@@14 Tclass.BucketsLib.Bucket $h@@31)))) ($IsAlloc (BucketsLib.Bucket.msgs d@@14) (TSeq Tclass.ValueMessage.Message) $h@@31)) :qid |unknown.0:0| :skolemid |1144| :pattern ( ($IsAlloc (BucketsLib.Bucket.msgs d@@14) (TSeq Tclass.ValueMessage.Message) $h@@31)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) (|a#18#2#0| T@U) ) (!  (=> (and (and (= (type |a#18#0#0|) (MapType BoxType BoxType)) (= (type |a#18#1#0|) (SeqType BoxType))) (= (type |a#18#2#0|) (SeqType BoxType))) (= (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit |a#18#0#0|) (Lit |a#18#1#0|) (Lit |a#18#2#0|)) (Lit (|#BucketsLib.Bucket.BucketMapWithSeq| |a#18#0#0| |a#18#1#0| |a#18#2#0|)))) :qid |BucketsL.30:38| :skolemid |1145| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit |a#18#0#0|) (Lit |a#18#1#0|) (Lit |a#18#2#0|))) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) (|a#19#2#0| T@U) ) (!  (=> (and (and (= (type |a#19#0#0|) (MapType BoxType BoxType)) (= (type |a#19#1#0|) (SeqType BoxType))) (= (type |a#19#2#0|) (SeqType BoxType))) (= (BucketsLib.Bucket.b (|#BucketsLib.Bucket.BucketMapWithSeq| |a#19#0#0| |a#19#1#0| |a#19#2#0|)) |a#19#0#0|)) :qid |BucketsL.30:38| :skolemid |1146| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#19#0#0| |a#19#1#0| |a#19#2#0|)) )))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) (|a#20#2#0| T@U) (d@@15 T@U) ) (!  (=> (and (and (and (and (= (type |a#20#0#0|) (MapType BoxType BoxType)) (= (type |a#20#1#0|) (SeqType BoxType))) (= (type |a#20#2#0|) (SeqType BoxType))) (= (type d@@15) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#20#0#0|) ($Box d@@15)))) (< (DtRank d@@15) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#20#0#0| |a#20#1#0| |a#20#2#0|)))) :qid |BucketsL.30:38| :skolemid |1147| :pattern ( (MapType0Select (|Map#Domain| |a#20#0#0|) ($Box d@@15)) (|#BucketsLib.Bucket.BucketMapWithSeq| |a#20#0#0| |a#20#1#0| |a#20#2#0|)) )))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) (bx@@113 T@U) ) (!  (=> (and (and (and (and (= (type |a#21#0#0|) (MapType BoxType BoxType)) (= (type |a#21#1#0|) (SeqType BoxType))) (= (type |a#21#2#0|) (SeqType BoxType))) (= (type bx@@113) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#21#0#0|) bx@@113))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#21#0#0|) bx@@113))) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#21#0#0| |a#21#1#0| |a#21#2#0|)))) :qid |BucketsL.30:38| :skolemid |1148| :pattern ( (MapType0Select (|Map#Domain| |a#21#0#0|) bx@@113) (|#BucketsLib.Bucket.BucketMapWithSeq| |a#21#0#0| |a#21#1#0| |a#21#2#0|)) )))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) (|a#22#2#0| T@U) ) (!  (=> (and (and (= (type |a#22#0#0|) (MapType BoxType BoxType)) (= (type |a#22#1#0|) (SeqType BoxType))) (= (type |a#22#2#0|) (SeqType BoxType))) (= (BucketsLib.Bucket.keys (|#BucketsLib.Bucket.BucketMapWithSeq| |a#22#0#0| |a#22#1#0| |a#22#2#0|)) |a#22#1#0|)) :qid |BucketsL.30:38| :skolemid |1149| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#22#0#0| |a#22#1#0| |a#22#2#0|)) )))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| T@U) (|a#23#2#0| T@U) (i@@31 Int) ) (!  (=> (and (and (and (= (type |a#23#0#0|) (MapType BoxType BoxType)) (= (type |a#23#1#0|) (SeqType BoxType))) (= (type |a#23#2#0|) (SeqType BoxType))) (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#23#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#23#1#0| i@@31))) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#23#0#0| |a#23#1#0| |a#23#2#0|)))) :qid |BucketsL.30:38| :skolemid |1150| :pattern ( (|Seq#Index| |a#23#1#0| i@@31) (|#BucketsLib.Bucket.BucketMapWithSeq| |a#23#0#0| |a#23#1#0| |a#23#2#0|)) )))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| T@U) (|a#24#2#0| T@U) ) (!  (=> (and (and (= (type |a#24#0#0|) (MapType BoxType BoxType)) (= (type |a#24#1#0|) (SeqType BoxType))) (= (type |a#24#2#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#24#1#0|) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#24#0#0| |a#24#1#0| |a#24#2#0|)))) :qid |BucketsL.30:38| :skolemid |1151| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#24#0#0| |a#24#1#0| |a#24#2#0|)) )))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| T@U) (|a#25#2#0| T@U) ) (!  (=> (and (and (= (type |a#25#0#0|) (MapType BoxType BoxType)) (= (type |a#25#1#0|) (SeqType BoxType))) (= (type |a#25#2#0|) (SeqType BoxType))) (= (BucketsLib.Bucket.msgs (|#BucketsLib.Bucket.BucketMapWithSeq| |a#25#0#0| |a#25#1#0| |a#25#2#0|)) |a#25#2#0|)) :qid |BucketsL.30:38| :skolemid |1152| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#25#0#0| |a#25#1#0| |a#25#2#0|)) )))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) (|a#26#2#0| T@U) (i@@32 Int) ) (!  (=> (and (and (and (= (type |a#26#0#0|) (MapType BoxType BoxType)) (= (type |a#26#1#0|) (SeqType BoxType))) (= (type |a#26#2#0|) (SeqType BoxType))) (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#26#2#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#26#2#0| i@@32))) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#26#0#0| |a#26#1#0| |a#26#2#0|)))) :qid |BucketsL.30:38| :skolemid |1153| :pattern ( (|Seq#Index| |a#26#2#0| i@@32) (|#BucketsLib.Bucket.BucketMapWithSeq| |a#26#0#0| |a#26#1#0| |a#26#2#0|)) )))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| T@U) (|a#27#2#0| T@U) ) (!  (=> (and (and (= (type |a#27#0#0|) (MapType BoxType BoxType)) (= (type |a#27#1#0|) (SeqType BoxType))) (= (type |a#27#2#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#27#2#0|) (DtRank (|#BucketsLib.Bucket.BucketMapWithSeq| |a#27#0#0| |a#27#1#0| |a#27#2#0|)))) :qid |BucketsL.30:38| :skolemid |1154| :pattern ( (|#BucketsLib.Bucket.BucketMapWithSeq| |a#27#0#0| |a#27#1#0| |a#27#2#0|)) )))
(assert (forall ((d@@16 T@U) ) (!  (=> (and (= (type d@@16) DatatypeTypeType) (|$IsA#BucketsLib.Bucket| d@@16)) (BucketsLib.Bucket.BucketMapWithSeq_q d@@16)) :qid |unknown.0:0| :skolemid |1155| :pattern ( (|$IsA#BucketsLib.Bucket| d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) ($Is d@@17 Tclass.BucketsLib.Bucket)) (BucketsLib.Bucket.BucketMapWithSeq_q d@@17)) :qid |unknown.0:0| :skolemid |1156| :pattern ( (BucketsLib.Bucket.BucketMapWithSeq_q d@@17) ($Is d@@17 Tclass.BucketsLib.Bucket)) )))
(assert (forall ((a@@134 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (and (=> (|BucketsLib.Bucket#Equal| a@@134 b@@65) (and (and (|Map#Equal| (BucketsLib.Bucket.b a@@134) (BucketsLib.Bucket.b b@@65)) (|Seq#Equal| (BucketsLib.Bucket.keys a@@134) (BucketsLib.Bucket.keys b@@65))) (|Seq#Equal| (BucketsLib.Bucket.msgs a@@134) (BucketsLib.Bucket.msgs b@@65)))) (=> (and (and (|Map#Equal| (BucketsLib.Bucket.b a@@134) (BucketsLib.Bucket.b b@@65)) (|Seq#Equal| (BucketsLib.Bucket.keys a@@134) (BucketsLib.Bucket.keys b@@65))) (|Seq#Equal| (BucketsLib.Bucket.msgs a@@134) (BucketsLib.Bucket.msgs b@@65))) (|BucketsLib.Bucket#Equal| a@@134 b@@65)))) :qid |unknown.0:0| :skolemid |1157| :pattern ( (|BucketsLib.Bucket#Equal| a@@134 b@@65)) )))
(assert (forall ((a@@135 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@135) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (=> (|BucketsLib.Bucket#Equal| a@@135 b@@66) (= a@@135 b@@66)) (=> (= a@@135 b@@66) (|BucketsLib.Bucket#Equal| a@@135 b@@66)))) :qid |unknown.0:0| :skolemid |1158| :pattern ( (|BucketsLib.Bucket#Equal| a@@135 b@@66)) )))
(assert (= (type Tclass.BucketsLib.__default) TyType))
(assert (= (Tag Tclass.BucketsLib.__default) Tagclass.BucketsLib.__default))
(assert (forall ((bx@@114 T@U) ) (!  (=> (and (= (type bx@@114) BoxType) ($IsBox bx@@114 Tclass.BucketsLib.__default)) (and (= ($Box ($Unbox refType bx@@114)) bx@@114) ($Is ($Unbox refType bx@@114) Tclass.BucketsLib.__default))) :qid |unknown.0:0| :skolemid |1159| :pattern ( ($IsBox bx@@114 Tclass.BucketsLib.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.BucketsLib.__default) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.BucketsLib.__default))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.BucketsLib.__default)) ($Is $o@@9 Tclass.BucketsLib.__default)))) :qid |unknown.0:0| :skolemid |1160| :pattern ( ($Is $o@@9 Tclass.BucketsLib.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@32 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@32) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.BucketsLib.__default $h@@32) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@32 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@32 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.BucketsLib.__default $h@@32)))) :qid |unknown.0:0| :skolemid |1161| :pattern ( ($IsAlloc $o@@10 Tclass.BucketsLib.__default $h@@32)) )))
(assert (forall ((arg0@@335 T@U) ) (! (= (type (Tclass.Options.Option arg0@@335)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@335)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |1162| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@336 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@336)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@336)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1163| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@115 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@115) BoxType)) ($IsBox bx@@115 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@115)) bx@@115) ($Is ($Unbox DatatypeTypeType bx@@115) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1164| :pattern ( ($IsBox bx@@115 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((arg0@@337 T@U) ) (! (= (type (BucketsLib.__default.maximumKey arg0@@337)) DatatypeTypeType) :qid |funType:BucketsLib.__default.maximumKey| :pattern ( (BucketsLib.__default.maximumKey arg0@@337)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|b#0@@1| T@U) ) (!  (=> (and (= (type |b#0@@1|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.maximumKey#canCall| |b#0@@1|) (and (not (= 7 $FunctionContextHeight)) ($Is |b#0@@1| (TSet Tclass.KeyType.Key))))) ($Is (BucketsLib.__default.maximumKey |b#0@@1|) (Tclass.Options.Option Tclass.KeyType.Key))) :qid |BucketsL.33:23| :skolemid |1165| :pattern ( (BucketsLib.__default.maximumKey |b#0@@1|)) ))))
(assert (forall ((|b#0@@2| T@U) ) (!  (=> (and (= (type |b#0@@2|) (MapType0Type BoxType boolType)) ($Is |b#0@@2| (TSet Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.maximumKey#requires| |b#0@@2|) true) (=> true (|BucketsLib.__default.maximumKey#requires| |b#0@@2|)))) :qid |BucketsL.33:23| :skolemid |1166| :pattern ( (|BucketsLib.__default.maximumKey#requires| |b#0@@2|)) )))
(assert  (and (and (and (and (forall ((arg0@@338 T@U) (arg1@@157 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximumOpt arg0@@338 arg1@@157)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.maximumOpt| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt arg0@@338 arg1@@157)) )) (= (type StartFuel_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (forall ((arg0@@339 T@U) ) (! (= (type (Options.Option.value arg0@@339)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@339)) ))) (forall ((arg0@@340 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@340)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@340)) ))) (= (type |#Options.Option.None|) DatatypeTypeType)))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|b#0@@3| T@U) ) (!  (=> (and (= (type |b#0@@3|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.maximumKey#canCall| |b#0@@3|) (and (not (= 7 $FunctionContextHeight)) ($Is |b#0@@3| (TSet Tclass.KeyType.Key))))) (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |b#0@@3|) (= (BucketsLib.__default.maximumKey |b#0@@3|) (let ((|m#0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt |b#0@@3|))) (ite (Options.Option.Some_q |m#0|) (let ((|k#0| ($Unbox (SeqType BoxType) (Options.Option.value |m#0|)))) (|#Options.Option.Some| ($Box |k#0|))) |#Options.Option.None|))))) :qid |BucketsL.33:23| :skolemid |1167| :pattern ( (BucketsLib.__default.maximumKey |b#0@@3|)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|b#0@@4| T@U) ) (!  (=> (and (= (type |b#0@@4|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.maximumKey#canCall| (Lit |b#0@@4|)) (and (not (= 7 $FunctionContextHeight)) ($Is |b#0@@4| (TSet Tclass.KeyType.Key))))) (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit |b#0@@4|)) (= (BucketsLib.__default.maximumKey (Lit |b#0@@4|)) (let ((|m#1| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (Lit |b#0@@4|)))) (ite (Options.Option.Some_q |m#1|) (let ((|k#1| ($Unbox (SeqType BoxType) (Options.Option.value |m#1|)))) (|#Options.Option.Some| ($Box |k#1|))) |#Options.Option.None|))))) :qid |BucketsL.33:23| :weight 3 :skolemid |1168| :pattern ( (BucketsLib.__default.maximumKey (Lit |b#0@@4|))) ))))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@116 T@U) ) (!  (=> (and (= (type bx@@116) BoxType) ($IsBox bx@@116 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@116)) bx@@116) ($Is ($Unbox intType bx@@116) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1169| :pattern ( ($IsBox bx@@116 Tclass.NativeTypes.byte)) )))
(assert (forall ((arg0@@341 T@U) ) (! (= (type (BucketsLib.__default.minimumKey arg0@@341)) DatatypeTypeType) :qid |funType:BucketsLib.__default.minimumKey| :pattern ( (BucketsLib.__default.minimumKey arg0@@341)) )))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|b#0@@5| T@U) ) (!  (=> (and (= (type |b#0@@5|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.minimumKey#canCall| |b#0@@5|) (and (not (= 8 $FunctionContextHeight)) ($Is |b#0@@5| (TSet Tclass.KeyType.Key))))) ($Is (BucketsLib.__default.minimumKey |b#0@@5|) (Tclass.Options.Option Tclass.KeyType.Key))) :qid |BucketsL.44:23| :skolemid |1171| :pattern ( (BucketsLib.__default.minimumKey |b#0@@5|)) ))))
(assert (forall ((|b#0@@6| T@U) ) (!  (=> (and (= (type |b#0@@6|) (MapType0Type BoxType boolType)) ($Is |b#0@@6| (TSet Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.minimumKey#requires| |b#0@@6|) true) (=> true (|BucketsLib.__default.minimumKey#requires| |b#0@@6|)))) :qid |BucketsL.44:23| :skolemid |1172| :pattern ( (|BucketsLib.__default.minimumKey#requires| |b#0@@6|)) )))
(assert  (and (forall ((arg0@@342 T@U) (arg1@@158 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimumOpt arg0@@342 arg1@@158)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.minimumOpt| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt arg0@@342 arg1@@158)) )) (= (type StartFuel_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|b#0@@7| T@U) ) (!  (=> (and (= (type |b#0@@7|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.minimumKey#canCall| |b#0@@7|) (and (not (= 8 $FunctionContextHeight)) ($Is |b#0@@7| (TSet Tclass.KeyType.Key))))) (and (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |b#0@@7|) (= (BucketsLib.__default.minimumKey |b#0@@7|) (let ((|m#0@@0| (Lexicographic__Byte__Order.__default.minimumOpt StartFuel_Lexicographic_Byte_Order._default.minimumOpt |b#0@@7|))) (ite (Options.Option.Some_q |m#0@@0|) (let ((|k#0@@0| ($Unbox (SeqType BoxType) (Options.Option.value |m#0@@0|)))) (|#Options.Option.Some| ($Box |k#0@@0|))) |#Options.Option.None|))))) :qid |BucketsL.44:23| :skolemid |1173| :pattern ( (BucketsLib.__default.minimumKey |b#0@@7|)) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|b#0@@8| T@U) ) (!  (=> (and (= (type |b#0@@8|) (MapType0Type BoxType boolType)) (or (|BucketsLib.__default.minimumKey#canCall| (Lit |b#0@@8|)) (and (not (= 8 $FunctionContextHeight)) ($Is |b#0@@8| (TSet Tclass.KeyType.Key))))) (and (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| (Lit |b#0@@8|)) (= (BucketsLib.__default.minimumKey (Lit |b#0@@8|)) (let ((|m#1@@0| (Lexicographic__Byte__Order.__default.minimumOpt StartFuel_Lexicographic_Byte_Order._default.minimumOpt (Lit |b#0@@8|)))) (ite (Options.Option.Some_q |m#1@@0|) (let ((|k#1@@0| ($Unbox (SeqType BoxType) (Options.Option.value |m#1@@0|)))) (|#Options.Option.Some| ($Box |k#1@@0|))) |#Options.Option.None|))))) :qid |BucketsL.44:23| :weight 3 :skolemid |1174| :pattern ( (BucketsLib.__default.minimumKey (Lit |b#0@@8|))) ))))
(assert (forall ((arg0@@343 T@U) (arg1@@159 T@U) (arg2@@113 T@U) ) (! (= (type (BucketsLib.__default.BucketMapOfSeq arg0@@343 arg1@@159 arg2@@113)) (MapType BoxType BoxType)) :qid |funType:BucketsLib.__default.BucketMapOfSeq| :pattern ( (BucketsLib.__default.BucketMapOfSeq arg0@@343 arg1@@159 arg2@@113)) )))
(assert (forall (($ly T@U) (|keys#0| T@U) (|msgs#0| T@U) ) (!  (=> (and (and (= (type $ly) LayerTypeType) (= (type |keys#0|) (SeqType BoxType))) (= (type |msgs#0|) (SeqType BoxType))) (= (BucketsLib.__default.BucketMapOfSeq ($LS $ly) |keys#0| |msgs#0|) (BucketsLib.__default.BucketMapOfSeq $ly |keys#0| |msgs#0|))) :qid |BucketsL.55:22| :skolemid |1176| :pattern ( (BucketsLib.__default.BucketMapOfSeq ($LS $ly) |keys#0| |msgs#0|)) )))
(assert  (and (forall ((arg0@@344 T@U) ) (! (= (type (AsFuelBottom arg0@@344)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@344)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|keys#0@@0| T@U) (|msgs#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@0) LayerTypeType) (= (type |keys#0@@0|) (SeqType BoxType))) (= (type |msgs#0@@0|) (SeqType BoxType))) (= (BucketsLib.__default.BucketMapOfSeq $ly@@0 |keys#0@@0| |msgs#0@@0|) (BucketsLib.__default.BucketMapOfSeq $LZ |keys#0@@0| |msgs#0@@0|))) :qid |BucketsL.55:22| :skolemid |1177| :pattern ( (BucketsLib.__default.BucketMapOfSeq (AsFuelBottom $ly@@0) |keys#0@@0| |msgs#0@@0|)) )))
(assert (forall ((arg0@@345 T@U) (arg1@@160 T@U) ) (! (= (type (Sequences.__default.Set arg0@@345 arg1@@160)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@345 arg1@@160)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall (($ly@@1 T@U) (|keys#0@@1| T@U) (|msgs#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@1) LayerTypeType) (= (type |keys#0@@1|) (SeqType BoxType))) (= (type |msgs#0@@1|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketMapOfSeq#canCall| |keys#0@@1| |msgs#0@@1|) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |keys#0@@1| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@1| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| |keys#0@@1|) (|Seq#Length| |msgs#0@@1|)))))) (and (and (|Set#Equal| (|Map#Domain| (BucketsLib.__default.BucketMapOfSeq $ly@@1 |keys#0@@1| |msgs#0@@1|)) (Sequences.__default.Set Tclass.KeyType.Key |keys#0@@1|)) (|Set#Subset| (|Map#Values| (BucketsLib.__default.BucketMapOfSeq $ly@@1 |keys#0@@1| |msgs#0@@1|)) (Sequences.__default.Set Tclass.ValueMessage.Message |msgs#0@@1|))) ($Is (BucketsLib.__default.BucketMapOfSeq $ly@@1 |keys#0@@1| |msgs#0@@1|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) :qid |BucketsL.55:22| :skolemid |1178| :pattern ( (BucketsLib.__default.BucketMapOfSeq $ly@@1 |keys#0@@1| |msgs#0@@1|)) ))))
(assert (forall (($ly@@2 T@U) (|keys#0@@2| T@U) (|msgs#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@2) LayerTypeType) (= (type |keys#0@@2|) (SeqType BoxType))) (= (type |msgs#0@@2|) (SeqType BoxType))) (and ($Is |keys#0@@2| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@2| (TSeq Tclass.ValueMessage.Message)))) (and (=> (|BucketsLib.__default.BucketMapOfSeq#requires| $ly@@2 |keys#0@@2| |msgs#0@@2|) (= (|Seq#Length| |keys#0@@2|) (|Seq#Length| |msgs#0@@2|))) (=> (= (|Seq#Length| |keys#0@@2|) (|Seq#Length| |msgs#0@@2|)) (|BucketsLib.__default.BucketMapOfSeq#requires| $ly@@2 |keys#0@@2| |msgs#0@@2|)))) :qid |BucketsL.55:22| :skolemid |1179| :pattern ( (|BucketsLib.__default.BucketMapOfSeq#requires| $ly@@2 |keys#0@@2| |msgs#0@@2|)) )))
(assert  (and (forall ((arg0@@346 T@U) (arg1@@161 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@346 arg1@@161)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@346 arg1@@161)) )) (forall ((arg0@@347 T@U) (arg1@@162 T@U) ) (! (= (type (Sequences.__default.Last arg0@@347 arg1@@162)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@347 arg1@@162)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall (($ly@@3 T@U) (|keys#0@@3| T@U) (|msgs#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@3) LayerTypeType) (= (type |keys#0@@3|) (SeqType BoxType))) (= (type |msgs#0@@3|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketMapOfSeq#canCall| |keys#0@@3| |msgs#0@@3|) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |keys#0@@3| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@3| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| |keys#0@@3|) (|Seq#Length| |msgs#0@@3|)))))) (and (=> (not (= (|Seq#Length| |keys#0@@3|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key |keys#0@@3|) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message |msgs#0@@3|)) (|BucketsLib.__default.BucketMapOfSeq#canCall| (Sequences.__default.DropLast Tclass.KeyType.Key |keys#0@@3|) (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@3|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key |keys#0@@3|) (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message |msgs#0@@3|)))) (= (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@3) |keys#0@@3| |msgs#0@@3|) (ite (= (|Seq#Length| |keys#0@@3|) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|r'#0| (BucketsLib.__default.BucketMapOfSeq $ly@@3 (Sequences.__default.DropLast Tclass.KeyType.Key |keys#0@@3|) (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@3|)))) (let ((|r#0| (|Map#Build| |r'#0| (Sequences.__default.Last Tclass.KeyType.Key |keys#0@@3|) (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@3|)))) |r#0|)))))) :qid |BucketsL.55:22| :skolemid |1180| :pattern ( (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@3) |keys#0@@3| |msgs#0@@3|)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall (($ly@@4 T@U) (|keys#0@@4| T@U) (|msgs#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@4) LayerTypeType) (= (type |keys#0@@4|) (SeqType BoxType))) (= (type |msgs#0@@4|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketMapOfSeq#canCall| (Lit |keys#0@@4|) (Lit |msgs#0@@4|)) (and (not (= 9 $FunctionContextHeight)) (and (and ($Is |keys#0@@4| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@4| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| (Lit |keys#0@@4|)) (|Seq#Length| (Lit |msgs#0@@4|))))))) (and (=> (not (= (|Seq#Length| (Lit |keys#0@@4|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (Lit |keys#0@@4|)) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@4|))) (|BucketsLib.__default.BucketMapOfSeq#canCall| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |keys#0@@4|))) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@4|))))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |keys#0@@4|)) (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@4|))))) (= (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@4) (Lit |keys#0@@4|) (Lit |msgs#0@@4|)) (ite (= (|Seq#Length| (Lit |keys#0@@4|)) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|r'#1| (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@4) (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |keys#0@@4|))) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@4|)))))) (let ((|r#1| (|Map#Build| |r'#1| ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |keys#0@@4|))))) ($Box (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@4|)))))))) |r#1|)))))) :qid |BucketsL.55:22| :weight 3 :skolemid |1181| :pattern ( (BucketsLib.__default.BucketMapOfSeq ($LS $ly@@4) (Lit |keys#0@@4|) (Lit |msgs#0@@4|))) ))))
(assert (forall ((arg0@@348 T@U) (arg1@@163 T@U) ) (! (= (type (BucketsLib.__default.BucketOfSeq arg0@@348 arg1@@163)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketOfSeq| :pattern ( (BucketsLib.__default.BucketOfSeq arg0@@348 arg1@@163)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|keys#0@@5| T@U) (|msgs#0@@5| T@U) ) (!  (=> (and (and (= (type |keys#0@@5|) (SeqType BoxType)) (= (type |msgs#0@@5|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketOfSeq#canCall| |keys#0@@5| |msgs#0@@5|) (and (not (= 12 $FunctionContextHeight)) (and (and ($Is |keys#0@@5| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@5| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| |keys#0@@5|) (|Seq#Length| |msgs#0@@5|)))))) ($Is (BucketsLib.__default.BucketOfSeq |keys#0@@5| |msgs#0@@5|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.86:24| :skolemid |1196| :pattern ( (BucketsLib.__default.BucketOfSeq |keys#0@@5| |msgs#0@@5|)) ))))
(assert (forall ((|keys#0@@6| T@U) (|msgs#0@@6| T@U) ) (!  (=> (and (and (= (type |keys#0@@6|) (SeqType BoxType)) (= (type |msgs#0@@6|) (SeqType BoxType))) (and ($Is |keys#0@@6| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@6| (TSeq Tclass.ValueMessage.Message)))) (and (=> (|BucketsLib.__default.BucketOfSeq#requires| |keys#0@@6| |msgs#0@@6|) (= (|Seq#Length| |keys#0@@6|) (|Seq#Length| |msgs#0@@6|))) (=> (= (|Seq#Length| |keys#0@@6|) (|Seq#Length| |msgs#0@@6|)) (|BucketsLib.__default.BucketOfSeq#requires| |keys#0@@6| |msgs#0@@6|)))) :qid |BucketsL.86:24| :skolemid |1197| :pattern ( (|BucketsLib.__default.BucketOfSeq#requires| |keys#0@@6| |msgs#0@@6|)) )))
(assert (= (type StartFuel_BucketsLib._default.BucketMapOfSeq) LayerTypeType))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|keys#0@@7| T@U) (|msgs#0@@7| T@U) ) (!  (=> (and (and (= (type |keys#0@@7|) (SeqType BoxType)) (= (type |msgs#0@@7|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketOfSeq#canCall| |keys#0@@7| |msgs#0@@7|) (and (not (= 12 $FunctionContextHeight)) (and (and ($Is |keys#0@@7| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@7| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| |keys#0@@7|) (|Seq#Length| |msgs#0@@7|)))))) (and (|BucketsLib.__default.BucketMapOfSeq#canCall| |keys#0@@7| |msgs#0@@7|) (= (BucketsLib.__default.BucketOfSeq |keys#0@@7| |msgs#0@@7|) (|#BucketsLib.Bucket.BucketMapWithSeq| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq |keys#0@@7| |msgs#0@@7|) |keys#0@@7| |msgs#0@@7|)))) :qid |BucketsL.86:24| :skolemid |1198| :pattern ( (BucketsLib.__default.BucketOfSeq |keys#0@@7| |msgs#0@@7|)) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|keys#0@@8| T@U) (|msgs#0@@8| T@U) ) (!  (=> (and (and (= (type |keys#0@@8|) (SeqType BoxType)) (= (type |msgs#0@@8|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketOfSeq#canCall| (Lit |keys#0@@8|) (Lit |msgs#0@@8|)) (and (not (= 12 $FunctionContextHeight)) (and (and ($Is |keys#0@@8| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@8| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| (Lit |keys#0@@8|)) (|Seq#Length| (Lit |msgs#0@@8|))))))) (and (|BucketsLib.__default.BucketMapOfSeq#canCall| (Lit |keys#0@@8|) (Lit |msgs#0@@8|)) (= (BucketsLib.__default.BucketOfSeq (Lit |keys#0@@8|) (Lit |msgs#0@@8|)) (|#BucketsLib.Bucket.BucketMapWithSeq| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (Lit |keys#0@@8|) (Lit |msgs#0@@8|)) (Lit |keys#0@@8|) (Lit |msgs#0@@8|))))) :qid |BucketsL.86:24| :weight 3 :skolemid |1199| :pattern ( (BucketsLib.__default.BucketOfSeq (Lit |keys#0@@8|) (Lit |msgs#0@@8|))) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((|bucket#0| T@U) ) (!  (=> (and (= (type |bucket#0|) (MapType BoxType BoxType)) (or (|BucketsLib.__default.WFBucketMap#canCall| |bucket#0|) (and (not (= 16 $FunctionContextHeight)) ($Is |bucket#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) true) :qid |BucketsL.135:25| :skolemid |1220| :pattern ( (BucketsLib.__default.WFBucketMap |bucket#0|)) ))))
(assert (forall ((|bucket#0@@0| T@U) ) (!  (=> (and (= (type |bucket#0@@0|) (MapType BoxType BoxType)) ($Is |bucket#0@@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.WFBucketMap#requires| |bucket#0@@0|) true) (=> true (|BucketsLib.__default.WFBucketMap#requires| |bucket#0@@0|)))) :qid |BucketsL.135:25| :skolemid |1221| :pattern ( (|BucketsLib.__default.WFBucketMap#requires| |bucket#0@@0|)) )))
(assert (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((|bucket#0@@1| T@U) ) (!  (=> (and (= (type |bucket#0@@1|) (MapType BoxType BoxType)) (or (|BucketsLib.__default.WFBucketMap#canCall| |bucket#0@@1|) (and (not (= 16 $FunctionContextHeight)) ($Is |bucket#0@@1| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (forall ((|key#0| T@U) ) (!  (=> (and (and (= (type |key#0|) (SeqType BoxType)) ($Is |key#0| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0|)))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsL.137:12| :skolemid |1222| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0|))) )) (and (=> (BucketsLib.__default.WFBucketMap |bucket#0@@1|) (forall ((|key#0@@0| T@U) ) (!  (=> (= (type |key#0@@0|) (SeqType BoxType)) (=> (and ($Is |key#0@@0| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@0|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@0|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.137:12| :skolemid |1223| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@0|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@0|))) ))) (=> (forall ((|key#0@@1| T@U) ) (!  (=> (= (type |key#0@@1|) (SeqType BoxType)) (=> (and ($Is |key#0@@1| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@1|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@1|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.137:12| :skolemid |1223| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@1|) ($Box |key#0@@1|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@1|) ($Box |key#0@@1|))) )) (BucketsLib.__default.WFBucketMap |bucket#0@@1|))))) :qid |BucketsL.135:25| :skolemid |1224| :pattern ( (BucketsLib.__default.WFBucketMap |bucket#0@@1|)) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall ((|bucket#0@@2| T@U) ) (!  (=> (and (= (type |bucket#0@@2|) (MapType BoxType BoxType)) (or (|BucketsLib.__default.WFBucketMap#canCall| (Lit |bucket#0@@2|)) (and (not (= 16 $FunctionContextHeight)) ($Is |bucket#0@@2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (forall ((|key#1| T@U) ) (!  (=> (and (and (= (type |key#1|) (SeqType BoxType)) ($Is |key#1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1|)))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bucket#0@@2|)) ($Box |key#1|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsL.137:12| :skolemid |1225| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@2|) ($Box |key#1|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1|))) )) (and (=> (BucketsLib.__default.WFBucketMap (Lit |bucket#0@@2|)) (forall ((|key#1@@0| T@U) ) (!  (=> (= (type |key#1@@0|) (SeqType BoxType)) (=> (and ($Is |key#1@@0| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@0|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bucket#0@@2|)) ($Box |key#1@@0|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.137:12| :skolemid |1226| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@2|) ($Box |key#1@@0|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@0|))) ))) (=> (forall ((|key#1@@1| T@U) ) (!  (=> (= (type |key#1@@1|) (SeqType BoxType)) (=> (and ($Is |key#1@@1| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@1|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bucket#0@@2|)) ($Box |key#1@@1|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.137:12| :skolemid |1226| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@2|) ($Box |key#1@@1|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@2|) ($Box |key#1@@1|))) )) (BucketsLib.__default.WFBucketMap (Lit |bucket#0@@2|)))))) :qid |BucketsL.135:25| :weight 3 :skolemid |1227| :pattern ( (BucketsLib.__default.WFBucketMap (Lit |bucket#0@@2|))) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|messages#0| T@U) ) (!  (=> (and (= (type |messages#0|) (SeqType BoxType)) (or (|BucketsLib.__default.WFMessageSeq#canCall| |messages#0|) (and (not (= 15 $FunctionContextHeight)) ($Is |messages#0| (TSeq Tclass.ValueMessage.Message))))) true) :qid |BucketsL.140:26| :skolemid |1231| :pattern ( (BucketsLib.__default.WFMessageSeq |messages#0|)) ))))
(assert (forall ((|messages#0@@0| T@U) ) (!  (=> (and (= (type |messages#0@@0|) (SeqType BoxType)) ($Is |messages#0@@0| (TSeq Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.WFMessageSeq#requires| |messages#0@@0|) true) (=> true (|BucketsLib.__default.WFMessageSeq#requires| |messages#0@@0|)))) :qid |BucketsL.140:26| :skolemid |1232| :pattern ( (|BucketsLib.__default.WFMessageSeq#requires| |messages#0@@0|)) )))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|messages#0@@1| T@U) ) (!  (=> (and (= (type |messages#0@@1|) (SeqType BoxType)) (or (|BucketsLib.__default.WFMessageSeq#canCall| |messages#0@@1|) (and (not (= 15 $FunctionContextHeight)) ($Is |messages#0@@1| (TSeq Tclass.ValueMessage.Message))))) (and (forall ((|i#0| Int) ) (!  (=> (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |messages#0@@1|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsL.142:12| :skolemid |1233| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0|))) )) (and (=> (BucketsLib.__default.WFMessageSeq |messages#0@@1|) (forall ((|i#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| |messages#0@@1|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@0|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsL.142:12| :skolemid |1234| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@0|))) ))) (=> (forall ((|i#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| (|Seq#Length| |messages#0@@1|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@1|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsL.142:12| :skolemid |1234| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@1|))) )) (BucketsLib.__default.WFMessageSeq |messages#0@@1|))))) :qid |BucketsL.140:26| :skolemid |1235| :pattern ( (BucketsLib.__default.WFMessageSeq |messages#0@@1|)) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|messages#0@@2| T@U) ) (!  (=> (and (= (type |messages#0@@2|) (SeqType BoxType)) (or (|BucketsLib.__default.WFMessageSeq#canCall| (Lit |messages#0@@2|)) (and (not (= 15 $FunctionContextHeight)) ($Is |messages#0@@2| (TSeq Tclass.ValueMessage.Message))))) (and (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit |messages#0@@2|)))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |messages#0@@2|) |i#1|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsL.142:12| :skolemid |1236| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@2| |i#1|))) )) (and (=> (BucketsLib.__default.WFMessageSeq (Lit |messages#0@@2|)) (forall ((|i#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| (Lit |messages#0@@2|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |messages#0@@2|) |i#1@@0|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsL.142:12| :skolemid |1237| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@2| |i#1@@0|))) ))) (=> (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| (Lit |messages#0@@2|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |messages#0@@2|) |i#1@@1|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsL.142:12| :skolemid |1237| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@2| |i#1@@1|))) )) (BucketsLib.__default.WFMessageSeq (Lit |messages#0@@2|)))))) :qid |BucketsL.140:26| :weight 3 :skolemid |1238| :pattern ( (BucketsLib.__default.WFMessageSeq (Lit |messages#0@@2|))) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|bucket#0@@3| T@U) ) (!  (=> (and (= (type |bucket#0@@3|) DatatypeTypeType) (or (|BucketsLib.__default.PreWFBucket#canCall| |bucket#0@@3|) (and (not (= 18 $FunctionContextHeight)) ($Is |bucket#0@@3| Tclass.BucketsLib.Bucket)))) true) :qid |BucketsL.146:25| :skolemid |1242| :pattern ( (BucketsLib.__default.PreWFBucket |bucket#0@@3|)) ))))
(assert (forall ((|bucket#0@@4| T@U) ) (!  (=> (and (= (type |bucket#0@@4|) DatatypeTypeType) ($Is |bucket#0@@4| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.PreWFBucket#requires| |bucket#0@@4|) true) (=> true (|BucketsLib.__default.PreWFBucket#requires| |bucket#0@@4|)))) :qid |BucketsL.146:25| :skolemid |1243| :pattern ( (|BucketsLib.__default.PreWFBucket#requires| |bucket#0@@4|)) )))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|bucket#0@@5| T@U) ) (!  (=> (and (= (type |bucket#0@@5|) DatatypeTypeType) (or (|BucketsLib.__default.PreWFBucket#canCall| |bucket#0@@5|) (and (not (= 18 $FunctionContextHeight)) ($Is |bucket#0@@5| Tclass.BucketsLib.Bucket)))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|)) (=> (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@5|)) (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@5|))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|)) (|BucketsLib.__default.BucketMapOfSeq#canCall| (BucketsLib.Bucket.keys |bucket#0@@5|) (BucketsLib.Bucket.msgs |bucket#0@@5|))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@5|)))) (and (=> (BucketsLib.__default.PreWFBucket |bucket#0@@5|) (and (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@5|)) (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@5|))) (|Map#Equal| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (BucketsLib.Bucket.keys |bucket#0@@5|) (BucketsLib.Bucket.msgs |bucket#0@@5|)) (BucketsLib.Bucket.b |bucket#0@@5|)))) (=> (and (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@5|)) (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@5|))) (|Map#Equal| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (BucketsLib.Bucket.keys |bucket#0@@5|) (BucketsLib.Bucket.msgs |bucket#0@@5|)) (BucketsLib.Bucket.b |bucket#0@@5|))) (BucketsLib.__default.PreWFBucket |bucket#0@@5|))))) :qid |BucketsL.146:25| :skolemid |1244| :pattern ( (BucketsLib.__default.PreWFBucket |bucket#0@@5|)) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|bucket#0@@6| T@U) ) (!  (=> (and (= (type |bucket#0@@6|) DatatypeTypeType) (or (|BucketsLib.__default.PreWFBucket#canCall| (Lit |bucket#0@@6|)) (and (not (= 18 $FunctionContextHeight)) ($Is |bucket#0@@6| Tclass.BucketsLib.Bucket)))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|))) (=> (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|)))) (|Seq#Length| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|))))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|))) (|BucketsLib.__default.BucketMapOfSeq#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|))) (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@6|))))) (and (=> (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@6|)) (and (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|)))) (|Seq#Length| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|))))) (|Map#Equal| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|))) (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|)))) (BucketsLib.Bucket.b (Lit |bucket#0@@6|))))) (=> (and (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|)))) (|Seq#Length| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|))))) (|Map#Equal| (BucketsLib.__default.BucketMapOfSeq StartFuel_BucketsLib._default.BucketMapOfSeq (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@6|))) (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@6|)))) (BucketsLib.Bucket.b (Lit |bucket#0@@6|)))) (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@6|)))))) :qid |BucketsL.146:25| :weight 3 :skolemid |1245| :pattern ( (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@6|))) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|bucket#0@@7| T@U) ) (!  (=> (and (= (type |bucket#0@@7|) DatatypeTypeType) (or (|BucketsLib.__default.WFBucket#canCall| |bucket#0@@7|) (and (not (= 19 $FunctionContextHeight)) ($Is |bucket#0@@7| Tclass.BucketsLib.Bucket)))) true) :qid |BucketsL.152:22| :skolemid |1247| :pattern ( (BucketsLib.__default.WFBucket |bucket#0@@7|)) ))))
(assert (forall ((|bucket#0@@8| T@U) ) (!  (=> (and (= (type |bucket#0@@8|) DatatypeTypeType) ($Is |bucket#0@@8| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.WFBucket#requires| |bucket#0@@8|) true) (=> true (|BucketsLib.__default.WFBucket#requires| |bucket#0@@8|)))) :qid |BucketsL.152:22| :skolemid |1248| :pattern ( (|BucketsLib.__default.WFBucket#requires| |bucket#0@@8|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|bucket#0@@9| T@U) ) (!  (=> (and (= (type |bucket#0@@9|) DatatypeTypeType) (or (|BucketsLib.__default.WFBucket#canCall| |bucket#0@@9|) (and (not (= 19 $FunctionContextHeight)) ($Is |bucket#0@@9| Tclass.BucketsLib.Bucket)))) (and (and (and (|BucketsLib.__default.PreWFBucket#canCall| |bucket#0@@9|) (=> (BucketsLib.__default.PreWFBucket |bucket#0@@9|) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@9|) (|BucketsLib.__default.WFBucketMap#canCall| (BucketsLib.Bucket.b |bucket#0@@9|))))) (=> (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@9|) (|BucketsLib.__default.WFBucketMap#canCall| (BucketsLib.Bucket.b |bucket#0@@9|))) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@9|))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@9|) (|BucketsLib.__default.WFMessageSeq#canCall| (BucketsLib.Bucket.msgs |bucket#0@@9|))))) (and (=> (BucketsLib.__default.WFBucket |bucket#0@@9|) (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@9|) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@9|))) (BucketsLib.__default.WFMessageSeq (BucketsLib.Bucket.msgs |bucket#0@@9|)))) (=> (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@9|) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@9|))) (BucketsLib.__default.WFMessageSeq (BucketsLib.Bucket.msgs |bucket#0@@9|))) (BucketsLib.__default.WFBucket |bucket#0@@9|))))) :qid |BucketsL.152:22| :skolemid |1249| :pattern ( (BucketsLib.__default.WFBucket |bucket#0@@9|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|bucket#0@@10| T@U) ) (!  (=> (and (= (type |bucket#0@@10|) DatatypeTypeType) (or (|BucketsLib.__default.WFBucket#canCall| (Lit |bucket#0@@10|)) (and (not (= 19 $FunctionContextHeight)) ($Is |bucket#0@@10| Tclass.BucketsLib.Bucket)))) (and (and (and (|BucketsLib.__default.PreWFBucket#canCall| (Lit |bucket#0@@10|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@10|))))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@10|)) (|BucketsLib.__default.WFBucketMap#canCall| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|))))))) (=> (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@10|)) (|BucketsLib.__default.WFBucketMap#canCall| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketMap (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|)))))))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@10|)) (|BucketsLib.__default.WFMessageSeq#canCall| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@10|))))))) (and (=> (BucketsLib.__default.WFBucket (Lit |bucket#0@@10|)) (U_2_bool (Lit (bool_2_U  (and (and (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@10|)) (BucketsLib.__default.WFBucketMap (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|))))) (BucketsLib.__default.WFMessageSeq (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@10|))))))))) (=> (U_2_bool (Lit (bool_2_U  (and (and (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@10|)) (BucketsLib.__default.WFBucketMap (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@10|))))) (BucketsLib.__default.WFMessageSeq (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@10|)))))))) (BucketsLib.__default.WFBucket (Lit |bucket#0@@10|)))))) :qid |BucketsL.152:22| :weight 3 :skolemid |1250| :pattern ( (BucketsLib.__default.WFBucket (Lit |bucket#0@@10|))) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|bucket#0@@11| T@U) ) (!  (=> (and (= (type |bucket#0@@11|) DatatypeTypeType) (or (|BucketsLib.__default.BucketWellMarshalled#canCall| |bucket#0@@11|) (and (not (= 20 $FunctionContextHeight)) ($Is |bucket#0@@11| Tclass.BucketsLib.Bucket)))) true) :qid |BucketsL.159:34| :skolemid |1254| :pattern ( (BucketsLib.__default.BucketWellMarshalled |bucket#0@@11|)) ))))
(assert (forall ((|bucket#0@@12| T@U) ) (!  (=> (and (= (type |bucket#0@@12|) DatatypeTypeType) ($Is |bucket#0@@12| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.BucketWellMarshalled#requires| |bucket#0@@12|) true) (=> true (|BucketsLib.__default.BucketWellMarshalled#requires| |bucket#0@@12|)))) :qid |BucketsL.159:34| :skolemid |1255| :pattern ( (|BucketsLib.__default.BucketWellMarshalled#requires| |bucket#0@@12|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|bucket#0@@13| T@U) ) (!  (=> (and (= (type |bucket#0@@13|) DatatypeTypeType) (or (|BucketsLib.__default.BucketWellMarshalled#canCall| |bucket#0@@13|) (and (not (= 20 $FunctionContextHeight)) ($Is |bucket#0@@13| Tclass.BucketsLib.Bucket)))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@13|) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketsLib.Bucket.keys |bucket#0@@13|))) (and (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@13|) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketsLib.Bucket.keys |bucket#0@@13|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketsLib.Bucket.keys |bucket#0@@13|)) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@13|))))) :qid |BucketsL.159:34| :skolemid |1256| :pattern ( (BucketsLib.__default.BucketWellMarshalled |bucket#0@@13|)) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|bucket#0@@14| T@U) ) (!  (=> (and (= (type |bucket#0@@14|) DatatypeTypeType) (or (|BucketsLib.__default.BucketWellMarshalled#canCall| (Lit |bucket#0@@14|)) (and (not (= 20 $FunctionContextHeight)) ($Is |bucket#0@@14| Tclass.BucketsLib.Bucket)))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@14|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@14|))))) (and (=> (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@14|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@14|))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@14|)))) (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@14|)))))) :qid |BucketsL.159:34| :weight 3 :skolemid |1257| :pattern ( (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@14|))) ))))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((|blist#0| T@U) ) (!  (=> (and (= (type |blist#0|) (SeqType BoxType)) (or (|BucketsLib.__default.BucketListWellMarshalled#canCall| |blist#0|) (and (not (= 22 $FunctionContextHeight)) ($Is |blist#0| (TSeq Tclass.BucketsLib.Bucket))))) true) :qid |BucketsL.181:38| :skolemid |1262| :pattern ( (BucketsLib.__default.BucketListWellMarshalled |blist#0|)) ))))
(assert (forall ((|blist#0@@0| T@U) ) (!  (=> (and (= (type |blist#0@@0|) (SeqType BoxType)) ($Is |blist#0@@0| (TSeq Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.BucketListWellMarshalled#requires| |blist#0@@0|) true) (=> true (|BucketsLib.__default.BucketListWellMarshalled#requires| |blist#0@@0|)))) :qid |BucketsL.181:38| :skolemid |1263| :pattern ( (|BucketsLib.__default.BucketListWellMarshalled#requires| |blist#0@@0|)) )))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((|blist#0@@1| T@U) ) (!  (=> (and (= (type |blist#0@@1|) (SeqType BoxType)) (or (|BucketsLib.__default.BucketListWellMarshalled#canCall| |blist#0@@1|) (and (not (= 22 $FunctionContextHeight)) ($Is |blist#0@@1| (TSeq Tclass.BucketsLib.Bucket))))) (and (forall ((|i#0@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@2|) (< |i#0@@2| (|Seq#Length| |blist#0@@1|))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@2|)))) :qid |BucketsL.183:12| :skolemid |1264| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@2|))) )) (and (=> (BucketsLib.__default.BucketListWellMarshalled |blist#0@@1|) (forall ((|i#0@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@3|) (< |i#0@@3| (|Seq#Length| |blist#0@@1|))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@3|)))) :qid |BucketsL.183:12| :skolemid |1265| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@3|))) ))) (=> (forall ((|i#0@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@4|) (< |i#0@@4| (|Seq#Length| |blist#0@@1|))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@4|)))) :qid |BucketsL.183:12| :skolemid |1265| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@4|))) )) (BucketsLib.__default.BucketListWellMarshalled |blist#0@@1|))))) :qid |BucketsL.181:38| :skolemid |1266| :pattern ( (BucketsLib.__default.BucketListWellMarshalled |blist#0@@1|)) ))))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((|blist#0@@2| T@U) ) (!  (=> (and (= (type |blist#0@@2|) (SeqType BoxType)) (or (|BucketsLib.__default.BucketListWellMarshalled#canCall| (Lit |blist#0@@2|)) (and (not (= 22 $FunctionContextHeight)) ($Is |blist#0@@2| (TSeq Tclass.BucketsLib.Bucket))))) (and (forall ((|i#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| (Lit |blist#0@@2|)))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@2|) |i#1@@2|)))) :qid |BucketsL.183:12| :skolemid |1267| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@2| |i#1@@2|))) )) (and (=> (BucketsLib.__default.BucketListWellMarshalled (Lit |blist#0@@2|)) (forall ((|i#1@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (|Seq#Length| (Lit |blist#0@@2|)))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@2|) |i#1@@3|)))) :qid |BucketsL.183:12| :skolemid |1268| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@2| |i#1@@3|))) ))) (=> (forall ((|i#1@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| (Lit |blist#0@@2|)))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@2|) |i#1@@4|)))) :qid |BucketsL.183:12| :skolemid |1268| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@2| |i#1@@4|))) )) (BucketsLib.__default.BucketListWellMarshalled (Lit |blist#0@@2|)))))) :qid |BucketsL.181:38| :weight 3 :skolemid |1269| :pattern ( (BucketsLib.__default.BucketListWellMarshalled (Lit |blist#0@@2|))) ))))
(assert (forall ((arg0@@349 T@U) (arg1@@164 T@U) ) (! (= (type (BucketsLib.__default.BInternal arg0@@349 arg1@@164)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BInternal| :pattern ( (BucketsLib.__default.BInternal arg0@@349 arg1@@164)) )))
(assert (forall (($ly@@5 T@U) (|m#0@@1| T@U) ) (!  (=> (and (= (type $ly@@5) LayerTypeType) (= (type |m#0@@1|) (MapType BoxType BoxType))) (= (BucketsLib.__default.BInternal ($LS $ly@@5) |m#0@@1|) (BucketsLib.__default.BInternal $ly@@5 |m#0@@1|))) :qid |BucketsL.186:12| :skolemid |1273| :pattern ( (BucketsLib.__default.BInternal ($LS $ly@@5) |m#0@@1|)) )))
(assert (forall (($ly@@6 T@U) (|m#0@@2| T@U) ) (!  (=> (and (= (type $ly@@6) LayerTypeType) (= (type |m#0@@2|) (MapType BoxType BoxType))) (= (BucketsLib.__default.BInternal $ly@@6 |m#0@@2|) (BucketsLib.__default.BInternal $LZ |m#0@@2|))) :qid |BucketsL.186:12| :skolemid |1274| :pattern ( (BucketsLib.__default.BInternal (AsFuelBottom $ly@@6) |m#0@@2|)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($ly@@7 T@U) (|m#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@7) LayerTypeType) (= (type |m#0@@3|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.BInternal#canCall| |m#0@@3|) (and (not (= 23 $FunctionContextHeight)) ($Is |m#0@@3| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (|Map#Equal| (BucketsLib.Bucket.b (BucketsLib.__default.BInternal $ly@@7 |m#0@@3|)) |m#0@@3|) (= (|Seq#Length| (BucketsLib.Bucket.keys (BucketsLib.__default.BInternal $ly@@7 |m#0@@3|))) (|Seq#Length| (BucketsLib.Bucket.msgs (BucketsLib.__default.BInternal $ly@@7 |m#0@@3|))))) ($Is (BucketsLib.__default.BInternal $ly@@7 |m#0@@3|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.186:12| :skolemid |1275| :pattern ( (BucketsLib.__default.BInternal $ly@@7 |m#0@@3|)) ))))
(assert (forall (($ly@@8 T@U) (|m#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@8) LayerTypeType) (= (type |m#0@@4|) (MapType BoxType BoxType))) ($Is |m#0@@4| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.BInternal#requires| $ly@@8 |m#0@@4|) true) (=> true (|BucketsLib.__default.BInternal#requires| $ly@@8 |m#0@@4|)))) :qid |BucketsL.186:12| :skolemid |1276| :pattern ( (|BucketsLib.__default.BInternal#requires| $ly@@8 |m#0@@4|)) )))
(assert  (and (and (and (forall ((arg0@@350 T@U) (arg1@@165 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximum arg0@@350 arg1@@165)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.maximum| :pattern ( (Lexicographic__Byte__Order.__default.maximum arg0@@350 arg1@@165)) )) (= (type StartFuel_Lexicographic_Byte_Order._default.maximum) LayerTypeType)) (forall ((arg0@@351 T@U) (arg1@@166 T@U) (arg2@@114 T@U) (arg3@@87 T@U) (arg4@@76 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@351 arg1@@166 arg2@@114 arg3@@87 arg4@@76)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@351 arg1@@166 arg2@@114 arg3@@87 arg4@@76)) ))) (= (type StartFuel_Maps._default.MapRemove1) LayerTypeType)))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($ly@@9 T@U) (|m#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@9) LayerTypeType) (= (type |m#0@@5|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.BInternal#canCall| |m#0@@5|) (and (not (= 23 $FunctionContextHeight)) ($Is |m#0@@5| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (=> (not (= (|Set#Card| (|Map#Domain| |m#0@@5|)) (LitInt 0))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| (|Map#Domain| |m#0@@5|)) (let ((|maxkey#0| (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (|Map#Domain| |m#0@@5|)))) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message |m#0@@5| ($Box |maxkey#0|)) (let ((|subm#0| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 |m#0@@5| ($Box |maxkey#0|)))) (and (|BucketsLib.__default.BInternal#canCall| |subm#0|) (let ((|subbucket#0| (BucketsLib.__default.BInternal $ly@@9 |subm#0|))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |subbucket#0|) (BucketsLib.Bucket.BucketMapWithSeq_q |subbucket#0|))))))))) (= (BucketsLib.__default.BInternal ($LS $ly@@9) |m#0@@5|) (ite (= (|Set#Card| (|Map#Domain| |m#0@@5|)) (LitInt 0)) (|#BucketsLib.Bucket.BucketMapWithSeq| |m#0@@5| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType))) (let ((|maxkey#0@@0| (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (|Map#Domain| |m#0@@5|)))) (let ((|maxmsg#0| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |m#0@@5|) ($Box |maxkey#0@@0|))))) (let ((|subm#0@@0| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 |m#0@@5| ($Box |maxkey#0@@0|)))) (let ((|subbucket#0@@0| (BucketsLib.__default.BInternal $ly@@9 |subm#0@@0|))) (|#BucketsLib.Bucket.BucketMapWithSeq| |m#0@@5| (|Seq#Append| (BucketsLib.Bucket.keys |subbucket#0@@0|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |maxkey#0@@0|))) (|Seq#Append| (BucketsLib.Bucket.msgs |subbucket#0@@0|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |maxmsg#0|)))))))))))) :qid |BucketsL.186:12| :skolemid |1277| :pattern ( (BucketsLib.__default.BInternal ($LS $ly@@9) |m#0@@5|)) ))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall (($ly@@10 T@U) (|m#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@10) LayerTypeType) (= (type |m#0@@6|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.BInternal#canCall| (Lit |m#0@@6|)) (and (not (= 23 $FunctionContextHeight)) ($Is |m#0@@6| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (=> (not (= (|Set#Card| (Lit (|Map#Domain| (Lit |m#0@@6|)))) (LitInt 0))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit (|Map#Domain| (Lit |m#0@@6|)))) (let ((|maxkey#1| (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit (|Map#Domain| (Lit |m#0@@6|)))))) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message (Lit |m#0@@6|) ($Box |maxkey#1|)) (let ((|subm#1| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit |m#0@@6|) ($Box |maxkey#1|)))) (and (|BucketsLib.__default.BInternal#canCall| |subm#1|) (let ((|subbucket#1| (BucketsLib.__default.BInternal ($LS $ly@@10) |subm#1|))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |subbucket#1|) (BucketsLib.Bucket.BucketMapWithSeq_q |subbucket#1|))))))))) (= (BucketsLib.__default.BInternal ($LS $ly@@10) (Lit |m#0@@6|)) (ite (= (|Set#Card| (Lit (|Map#Domain| (Lit |m#0@@6|)))) (LitInt 0)) (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit |m#0@@6|) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType))) (let ((|maxkey#1@@0| (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit (|Map#Domain| (Lit |m#0@@6|)))))) (let ((|maxmsg#1| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) ($Box |maxkey#1@@0|))))) (let ((|subm#1@@0| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit |m#0@@6|) ($Box |maxkey#1@@0|)))) (let ((|subbucket#1@@0| (BucketsLib.__default.BInternal ($LS $ly@@10) |subm#1@@0|))) (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit |m#0@@6|) (|Seq#Append| (BucketsLib.Bucket.keys |subbucket#1@@0|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |maxkey#1@@0|))) (|Seq#Append| (BucketsLib.Bucket.msgs |subbucket#1@@0|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |maxmsg#1|)))))))))))) :qid |BucketsL.186:12| :weight 3 :skolemid |1278| :pattern ( (BucketsLib.__default.BInternal ($LS $ly@@10) (Lit |m#0@@6|))) ))))
(assert (forall ((arg0@@352 T@U) (arg1@@167 T@U) ) (! (= (type (BucketsLib.__default.B arg0@@352 arg1@@167)) DatatypeTypeType) :qid |funType:BucketsLib.__default.B| :pattern ( (BucketsLib.__default.B arg0@@352 arg1@@167)) )))
(assert (forall (($ly@@11 T@U) (|m#0@@7| T@U) ) (!  (=> (and (= (type $ly@@11) LayerTypeType) (= (type |m#0@@7|) (MapType BoxType BoxType))) (= (BucketsLib.__default.B ($LS $ly@@11) |m#0@@7|) (BucketsLib.__default.B $ly@@11 |m#0@@7|))) :qid |BucketsL.228:22| :skolemid |1305| :pattern ( (BucketsLib.__default.B ($LS $ly@@11) |m#0@@7|)) )))
(assert (forall (($ly@@12 T@U) (|m#0@@8| T@U) ) (!  (=> (and (= (type $ly@@12) LayerTypeType) (= (type |m#0@@8|) (MapType BoxType BoxType))) (= (BucketsLib.__default.B $ly@@12 |m#0@@8|) (BucketsLib.__default.B $LZ |m#0@@8|))) :qid |BucketsL.228:22| :skolemid |1306| :pattern ( (BucketsLib.__default.B (AsFuelBottom $ly@@12) |m#0@@8|)) )))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($ly@@13 T@U) (|m#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@13) LayerTypeType) (= (type |m#0@@9|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.B#canCall| |m#0@@9|) (and (not (= 26 $FunctionContextHeight)) ($Is |m#0@@9| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (and (and (and (|Map#Equal| (BucketsLib.Bucket.b (BucketsLib.__default.B $ly@@13 |m#0@@9|)) |m#0@@9|) (BucketsLib.__default.PreWFBucket (BucketsLib.__default.B $ly@@13 |m#0@@9|))) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.B $ly@@13 |m#0@@9|))) (= (|Seq#Length| (BucketsLib.Bucket.keys (BucketsLib.__default.B $ly@@13 |m#0@@9|))) (|Seq#Length| (BucketsLib.Bucket.msgs (BucketsLib.__default.B $ly@@13 |m#0@@9|))))) (=> (BucketsLib.__default.WFBucketMap |m#0@@9|) (BucketsLib.__default.WFBucket (BucketsLib.__default.B $ly@@13 |m#0@@9|)))) ($Is (BucketsLib.__default.B $ly@@13 |m#0@@9|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.228:22| :skolemid |1307| :pattern ( (BucketsLib.__default.B $ly@@13 |m#0@@9|)) ))))
(assert (forall (($ly@@14 T@U) (|m#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@14) LayerTypeType) (= (type |m#0@@10|) (MapType BoxType BoxType))) ($Is |m#0@@10| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.B#requires| $ly@@14 |m#0@@10|) true) (=> true (|BucketsLib.__default.B#requires| $ly@@14 |m#0@@10|)))) :qid |BucketsL.228:22| :skolemid |1308| :pattern ( (|BucketsLib.__default.B#requires| $ly@@14 |m#0@@10|)) )))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($ly@@15 T@U) (|m#0@@11| T@U) ) (!  (=> (and (and (= (type $ly@@15) LayerTypeType) (= (type |m#0@@11|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.B#canCall| |m#0@@11|) (and (not (= 26 $FunctionContextHeight)) ($Is |m#0@@11| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (and (|BucketsLib.__default.WFBucketMap#canCall| |m#0@@11|) (=> (BucketsLib.__default.WFBucketMap |m#0@@11|) (|BucketsLib.__default.BInternal#canCall| |m#0@@11|))) (=> (not (BucketsLib.__default.WFBucketMap |m#0@@11|)) (|BucketsLib.__default.BInternal#canCall| |m#0@@11|))) (= (BucketsLib.__default.B ($LS $ly@@15) |m#0@@11|) (ite (BucketsLib.__default.WFBucketMap |m#0@@11|) (BucketsLib.__default.BInternal ($LS $LZ) |m#0@@11|) (BucketsLib.__default.BInternal ($LS $LZ) |m#0@@11|))))) :qid |BucketsL.228:22| :skolemid |1309| :pattern ( (BucketsLib.__default.B ($LS $ly@@15) |m#0@@11|)) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($ly@@16 T@U) (|m#0@@12| T@U) ) (!  (=> (and (and (= (type $ly@@16) LayerTypeType) (= (type |m#0@@12|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.B#canCall| (Lit |m#0@@12|)) (and (not (= 26 $FunctionContextHeight)) ($Is |m#0@@12| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (and (|BucketsLib.__default.WFBucketMap#canCall| (Lit |m#0@@12|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketMap (Lit |m#0@@12|))))) (|BucketsLib.__default.BInternal#canCall| (Lit |m#0@@12|)))) (=> (not (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketMap (Lit |m#0@@12|)))))) (|BucketsLib.__default.BInternal#canCall| (Lit |m#0@@12|)))) (= (BucketsLib.__default.B ($LS $ly@@16) (Lit |m#0@@12|)) (ite (BucketsLib.__default.WFBucketMap (Lit |m#0@@12|)) (BucketsLib.__default.BInternal ($LS $LZ) (Lit |m#0@@12|)) (BucketsLib.__default.BInternal ($LS $LZ) (Lit |m#0@@12|)))))) :qid |BucketsL.228:22| :weight 3 :skolemid |1310| :pattern ( (BucketsLib.__default.B ($LS $ly@@16) (Lit |m#0@@12|))) ))))
(assert  (and (= (type BucketsLib.__default.EmptyBucket) DatatypeTypeType) (= (type StartFuel_BucketsLib._default.B) LayerTypeType)))
(assert  (=> (<= 28 $FunctionContextHeight) (=> (or |BucketsLib.__default.EmptyBucket#canCall| (not (= 28 $FunctionContextHeight))) (and (and (and (|BucketsLib.Bucket#Equal| BucketsLib.__default.EmptyBucket (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType)))) (BucketsLib.__default.WFBucket BucketsLib.__default.EmptyBucket)) (BucketsLib.__default.BucketWellMarshalled BucketsLib.__default.EmptyBucket)) ($Is BucketsLib.__default.EmptyBucket Tclass.BucketsLib.Bucket)))))
(assert  (=> |BucketsLib.__default.EmptyBucket#requires| true))
(assert  (=> true |BucketsLib.__default.EmptyBucket#requires|))
(assert  (=> (<= 28 $FunctionContextHeight) (=> (or |BucketsLib.__default.EmptyBucket#canCall| (not (= 28 $FunctionContextHeight))) (= BucketsLib.__default.EmptyBucket (let ((|b#0@@9| (Lit (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)))))) |b#0@@9|)))))
(assert  (=> (<= 28 $FunctionContextHeight) (=> (or |BucketsLib.__default.EmptyBucket#canCall| (not (= 28 $FunctionContextHeight))) (= BucketsLib.__default.EmptyBucket (let ((|b#1| (Lit (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)))))) |b#1|)))))
(assert (forall ((arg0@@353 T@U) (arg1@@168 T@U) ) (! (= (type (BucketsLib.__default.SingletonBucket arg0@@353 arg1@@168)) DatatypeTypeType) :qid |funType:BucketsLib.__default.SingletonBucket| :pattern ( (BucketsLib.__default.SingletonBucket arg0@@353 arg1@@168)) )))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|key#0@@2| T@U) (|msg#0| T@U) ) (!  (=> (and (and (= (type |key#0@@2|) (SeqType BoxType)) (= (type |msg#0|) DatatypeTypeType)) (or (|BucketsLib.__default.SingletonBucket#canCall| |key#0@@2| |msg#0|) (and (not (= 29 $FunctionContextHeight)) (and ($Is |key#0@@2| Tclass.KeyType.Key) ($Is |msg#0| Tclass.ValueMessage.Message))))) (and (and (and (BucketsLib.__default.PreWFBucket (BucketsLib.__default.SingletonBucket |key#0@@2| |msg#0|)) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SingletonBucket |key#0@@2| |msg#0|))) (=> (not (|ValueMessage.Message#Equal| |msg#0| ValueMessage.__default.IdentityMessage)) (BucketsLib.__default.WFBucket (BucketsLib.__default.SingletonBucket |key#0@@2| |msg#0|)))) ($Is (BucketsLib.__default.SingletonBucket |key#0@@2| |msg#0|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.255:28| :skolemid |1322| :pattern ( (BucketsLib.__default.SingletonBucket |key#0@@2| |msg#0|)) ))))
(assert (forall ((|key#0@@3| T@U) (|msg#0@@0| T@U) ) (!  (=> (and (and (= (type |key#0@@3|) (SeqType BoxType)) (= (type |msg#0@@0|) DatatypeTypeType)) (and ($Is |key#0@@3| Tclass.KeyType.Key) ($Is |msg#0@@0| Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.SingletonBucket#requires| |key#0@@3| |msg#0@@0|) true) (=> true (|BucketsLib.__default.SingletonBucket#requires| |key#0@@3| |msg#0@@0|)))) :qid |BucketsL.255:28| :skolemid |1323| :pattern ( (|BucketsLib.__default.SingletonBucket#requires| |key#0@@3| |msg#0@@0|)) )))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|key#0@@4| T@U) (|msg#0@@1| T@U) ) (!  (=> (and (and (= (type |key#0@@4|) (SeqType BoxType)) (= (type |msg#0@@1|) DatatypeTypeType)) (or (|BucketsLib.__default.SingletonBucket#canCall| |key#0@@4| |msg#0@@1|) (and (not (= 29 $FunctionContextHeight)) (and ($Is |key#0@@4| Tclass.KeyType.Key) ($Is |msg#0@@1| Tclass.ValueMessage.Message))))) (= (BucketsLib.__default.SingletonBucket |key#0@@4| |msg#0@@1|) (|#BucketsLib.Bucket.BucketMapWithSeq| (|Map#Build| (|Map#Empty| BoxType BoxType) ($Box |key#0@@4|) ($Box |msg#0@@1|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@@4|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@@1|))))) :qid |BucketsL.255:28| :skolemid |1324| :pattern ( (BucketsLib.__default.SingletonBucket |key#0@@4| |msg#0@@1|)) ))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|key#0@@5| T@U) (|msg#0@@2| T@U) ) (!  (=> (and (and (= (type |key#0@@5|) (SeqType BoxType)) (= (type |msg#0@@2|) DatatypeTypeType)) (or (|BucketsLib.__default.SingletonBucket#canCall| (Lit |key#0@@5|) (Lit |msg#0@@2|)) (and (not (= 29 $FunctionContextHeight)) (and ($Is |key#0@@5| Tclass.KeyType.Key) ($Is |msg#0@@2| Tclass.ValueMessage.Message))))) (= (BucketsLib.__default.SingletonBucket (Lit |key#0@@5|) (Lit |msg#0@@2|)) (Lit (|#BucketsLib.Bucket.BucketMapWithSeq| (Lit (|Map#Build| (|Map#Empty| BoxType BoxType) ($Box (Lit |key#0@@5|)) ($Box (Lit |msg#0@@2|)))) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |key#0@@5|)))) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |msg#0@@2|)))))))) :qid |BucketsL.255:28| :weight 3 :skolemid |1325| :pattern ( (BucketsLib.__default.SingletonBucket (Lit |key#0@@5|) (Lit |msg#0@@2|))) ))))
(assert (forall ((arg0@@354 T@U) ) (! (= (type (BucketsLib.__default.BucketDropLast arg0@@354)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketDropLast| :pattern ( (BucketsLib.__default.BucketDropLast arg0@@354)) )))
(assert  (=> (<= 30 $FunctionContextHeight) (forall ((|bucket#0@@15| T@U) ) (!  (=> (and (= (type |bucket#0@@15|) DatatypeTypeType) (or (|BucketsLib.__default.BucketDropLast#canCall| |bucket#0@@15|) (and (not (= 30 $FunctionContextHeight)) (and ($Is |bucket#0@@15| Tclass.BucketsLib.Bucket) (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@15|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@15|)) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@15|)))))))) ($Is (BucketsLib.__default.BucketDropLast |bucket#0@@15|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.266:27| :skolemid |1330| :pattern ( (BucketsLib.__default.BucketDropLast |bucket#0@@15|)) ))))
(assert (forall ((|bucket#0@@16| T@U) ) (!  (=> (and (= (type |bucket#0@@16|) DatatypeTypeType) ($Is |bucket#0@@16| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.BucketDropLast#requires| |bucket#0@@16|) (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@16|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@16|)) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@16|))))) (=> (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@16|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@16|)) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@16|)))) (|BucketsLib.__default.BucketDropLast#requires| |bucket#0@@16|)))) :qid |BucketsL.266:27| :skolemid |1331| :pattern ( (|BucketsLib.__default.BucketDropLast#requires| |bucket#0@@16|)) )))
(assert  (=> (<= 30 $FunctionContextHeight) (forall ((|bucket#0@@17| T@U) ) (!  (=> (and (= (type |bucket#0@@17|) DatatypeTypeType) (or (|BucketsLib.__default.BucketDropLast#canCall| |bucket#0@@17|) (and (not (= 30 $FunctionContextHeight)) (and ($Is |bucket#0@@17| Tclass.BucketsLib.Bucket) (and (and (BucketsLib.__default.PreWFBucket |bucket#0@@17|) (BucketsLib.__default.BucketWellMarshalled |bucket#0@@17|)) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@17|)))))))) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@17|) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@17|) (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|)))) (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BucketsLib.Bucket.b |bucket#0@@17|) (Sequences.__default.Last Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|)))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@17|) (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@17|) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (BucketsLib.Bucket.msgs |bucket#0@@17|))))) (= (BucketsLib.__default.BucketDropLast |bucket#0@@17|) (let ((|submap#0| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (BucketsLib.Bucket.b |bucket#0@@17|) (Sequences.__default.Last Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|))))) (|#BucketsLib.Bucket.BucketMapWithSeq| |submap#0| (Sequences.__default.DropLast Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@17|)) (Sequences.__default.DropLast Tclass.ValueMessage.Message (BucketsLib.Bucket.msgs |bucket#0@@17|))))))) :qid |BucketsL.266:27| :skolemid |1332| :pattern ( (BucketsLib.__default.BucketDropLast |bucket#0@@17|)) ))))
(assert  (=> (<= 30 $FunctionContextHeight) (forall ((|bucket#0@@18| T@U) ) (!  (=> (and (= (type |bucket#0@@18|) DatatypeTypeType) (or (|BucketsLib.__default.BucketDropLast#canCall| (Lit |bucket#0@@18|)) (and (not (= 30 $FunctionContextHeight)) (and ($Is |bucket#0@@18| Tclass.BucketsLib.Bucket) (and (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@18|))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@18|)))))) (< 0 (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|)))))))))) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@18|)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@18|)) (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|)))))) (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@18|))) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|))))))))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@18|)) (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|))))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@18|)) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@18|))))))) (= (BucketsLib.__default.BucketDropLast (Lit |bucket#0@@18|)) (let ((|submap#1| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@18|))) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|)))))))))) (|#BucketsLib.Bucket.BucketMapWithSeq| |submap#1| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@18|))))) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@18|)))))))))) :qid |BucketsL.266:27| :weight 3 :skolemid |1333| :pattern ( (BucketsLib.__default.BucketDropLast (Lit |bucket#0@@18|))) ))))
(assert  (=> (<= 37 $FunctionContextHeight) (forall ((|bucket#0@@19| T@U) (|pivots#0| T@U) (|i#0@@5| Int) ) (!  (=> (and (and (= (type |bucket#0@@19|) DatatypeTypeType) (= (type |pivots#0|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketAt#canCall| |bucket#0@@19| |pivots#0| |i#0@@5|) (and (not (= 37 $FunctionContextHeight)) (and (and ($Is |bucket#0@@19| Tclass.BucketsLib.Bucket) ($Is |pivots#0| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0|))))) true) :qid |BucketsL.425:24| :skolemid |1389| :pattern ( (BucketsLib.__default.WFBucketAt |bucket#0@@19| |pivots#0| |i#0@@5|)) ))))
(assert (forall ((|bucket#0@@20| T@U) (|pivots#0@@0| T@U) (|i#0@@6| Int) ) (!  (=> (and (and (= (type |bucket#0@@20|) DatatypeTypeType) (= (type |pivots#0@@0|) (SeqType BoxType))) (and ($Is |bucket#0@@20| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@0| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.WFBucketAt#requires| |bucket#0@@20| |pivots#0@@0| |i#0@@6|) (PivotsLib.__default.WFPivots |pivots#0@@0|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@0|) (|BucketsLib.__default.WFBucketAt#requires| |bucket#0@@20| |pivots#0@@0| |i#0@@6|)))) :qid |BucketsL.425:24| :skolemid |1390| :pattern ( (|BucketsLib.__default.WFBucketAt#requires| |bucket#0@@20| |pivots#0@@0| |i#0@@6|)) )))
(assert  (=> (<= 37 $FunctionContextHeight) (forall ((|bucket#0@@21| T@U) (|pivots#0@@1| T@U) (|i#0@@7| Int) ) (!  (=> (and (and (= (type |bucket#0@@21|) DatatypeTypeType) (= (type |pivots#0@@1|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketAt#canCall| |bucket#0@@21| |pivots#0@@1| |i#0@@7|) (and (not (= 37 $FunctionContextHeight)) (and (and ($Is |bucket#0@@21| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@1| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@1|))))) (and (and (and (|BucketsLib.__default.WFBucket#canCall| |bucket#0@@21|) (=> (BucketsLib.__default.WFBucket |bucket#0@@21|) (forall ((|key#0@@6| T@U) ) (!  (=> (and (= (type |key#0@@6|) (SeqType BoxType)) ($Is |key#0@@6| (TSeq Tclass.NativeTypes.byte))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@6|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@6|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) |ValueMessage.__default.IdentityMessage#canCall|))))) :qid |BucketsL.429:16| :skolemid |1391| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@6|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@6|))) )))) (=> (and (forall ((|key#0@@7| T@U) ) (!  (=> (and (= (type |key#0@@7|) (SeqType BoxType)) ($Is |key#0@@7| (TSeq Tclass.NativeTypes.byte))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@7|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@7|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) |ValueMessage.__default.IdentityMessage#canCall|))))) :qid |BucketsL.429:16| :skolemid |1393| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@7|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@7|))) )) (forall ((|key#0@@8| T@U) ) (!  (=> (= (type |key#0@@8|) (SeqType BoxType)) (=> (and ($Is |key#0@@8| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@8|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@8|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |1394| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@8|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@8|))) ))) (forall ((|key#1@@2| T@U) ) (!  (=> (and (= (type |key#1@@2|) (SeqType BoxType)) ($Is |key#1@@2| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@21|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@2|))) (|PivotsLib.__default.Route#canCall| |pivots#0@@1| |key#1@@2|)))) :qid |BucketsL.430:16| :skolemid |1392| :pattern ( (PivotsLib.__default.Route |pivots#0@@1| |key#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@2|))) )))) (and (=> (BucketsLib.__default.WFBucketAt |bucket#0@@21| |pivots#0@@1| |i#0@@7|) (and (and (BucketsLib.__default.WFBucket |bucket#0@@21|) (forall ((|key#0@@9| T@U) ) (!  (=> (= (type |key#0@@9|) (SeqType BoxType)) (=> (and ($Is |key#0@@9| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@9|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@9|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |1395| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@9|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@9|))) ))) (forall ((|key#1@@3| T@U) ) (!  (=> (= (type |key#1@@3|) (SeqType BoxType)) (=> (and ($Is |key#1@@3| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@3|)))) (= (PivotsLib.__default.Route |pivots#0@@1| |key#1@@3|) |i#0@@7|))) :qid |BucketsL.430:16| :skolemid |1396| :pattern ( (PivotsLib.__default.Route |pivots#0@@1| |key#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@3|))) )))) (=> (and (and (BucketsLib.__default.WFBucket |bucket#0@@21|) (forall ((|key#0@@10| T@U) ) (!  (=> (= (type |key#0@@10|) (SeqType BoxType)) (=> (and ($Is |key#0@@10| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@10|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@10|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |1395| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@10|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#0@@10|))) ))) (forall ((|key#1@@4| T@U) ) (!  (=> (= (type |key#1@@4|) (SeqType BoxType)) (=> (and ($Is |key#1@@4| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@4|)))) (= (PivotsLib.__default.Route |pivots#0@@1| |key#1@@4|) |i#0@@7|))) :qid |BucketsL.430:16| :skolemid |1396| :pattern ( (PivotsLib.__default.Route |pivots#0@@1| |key#1@@4|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@21|)) ($Box |key#1@@4|))) ))) (BucketsLib.__default.WFBucketAt |bucket#0@@21| |pivots#0@@1| |i#0@@7|))))) :qid |BucketsL.425:24| :skolemid |1397| :pattern ( (BucketsLib.__default.WFBucketAt |bucket#0@@21| |pivots#0@@1| |i#0@@7|)) ))))
(assert  (=> (<= 37 $FunctionContextHeight) (forall ((|bucket#0@@22| T@U) (|pivots#0@@2| T@U) (|i#0@@8| Int) ) (!  (=> (and (and (= (type |bucket#0@@22|) DatatypeTypeType) (= (type |pivots#0@@2|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketAt#canCall| (Lit |bucket#0@@22|) (Lit |pivots#0@@2|) (LitInt |i#0@@8|)) (and (not (= 37 $FunctionContextHeight)) (and (and ($Is |bucket#0@@22| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@2| (TSeq Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@2|))))))))) (and (and (and (|BucketsLib.__default.WFBucket#canCall| (Lit |bucket#0@@22|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |bucket#0@@22|))))) (forall ((|key#2| T@U) ) (!  (=> (and (= (type |key#2|) (SeqType BoxType)) ($Is |key#2| (TSeq Tclass.NativeTypes.byte))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) |ValueMessage.__default.IdentityMessage#canCall|))))) :qid |BucketsL.429:16| :skolemid |1398| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2|))) )))) (=> (and (forall ((|key#2@@0| T@U) ) (!  (=> (and (= (type |key#2@@0|) (SeqType BoxType)) ($Is |key#2@@0| (TSeq Tclass.NativeTypes.byte))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2@@0|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2@@0|)))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) |ValueMessage.__default.IdentityMessage#canCall|))))) :qid |BucketsL.429:16| :skolemid |1400| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@0|))) )) (forall ((|key#2@@1| T@U) ) (!  (=> (= (type |key#2@@1|) (SeqType BoxType)) (=> (and ($Is |key#2@@1| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2@@1|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2@@1|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |1401| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@1|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@1|))) ))) (forall ((|key#3| T@U) ) (!  (=> (and (= (type |key#3|) (SeqType BoxType)) ($Is |key#3| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@22|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#3|))) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@2|) |key#3|)))) :qid |BucketsL.430:16| :skolemid |1399| :pattern ( (PivotsLib.__default.Route |pivots#0@@2| |key#3|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#3|))) )))) (and (=> (BucketsLib.__default.WFBucketAt (Lit |bucket#0@@22|) (Lit |pivots#0@@2|) (LitInt |i#0@@8|)) (and (and (BucketsLib.__default.WFBucket (Lit |bucket#0@@22|)) (forall ((|key#2@@2| T@U) ) (!  (=> (= (type |key#2@@2|) (SeqType BoxType)) (=> (and ($Is |key#2@@2| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2@@2|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2@@2|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |1402| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@2|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@2|))) ))) (forall ((|key#3@@0| T@U) ) (!  (=> (= (type |key#3@@0|) (SeqType BoxType)) (=> (and ($Is |key#3@@0| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#3@@0|)))) (= (PivotsLib.__default.Route (Lit |pivots#0@@2|) |key#3@@0|) (LitInt |i#0@@8|)))) :qid |BucketsL.430:16| :skolemid |1403| :pattern ( (PivotsLib.__default.Route |pivots#0@@2| |key#3@@0|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#3@@0|))) )))) (=> (and (and (BucketsLib.__default.WFBucket (Lit |bucket#0@@22|)) (forall ((|key#2@@3| T@U) ) (!  (=> (= (type |key#2@@3|) (SeqType BoxType)) (=> (and ($Is |key#2@@3| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#2@@3|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@22|)))) ($Box |key#2@@3|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.429:16| :skolemid |1402| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@3|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#2@@3|))) ))) (forall ((|key#3@@1| T@U) ) (!  (=> (= (type |key#3@@1|) (SeqType BoxType)) (=> (and ($Is |key#3@@1| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@22|))) ($Box |key#3@@1|)))) (= (PivotsLib.__default.Route (Lit |pivots#0@@2|) |key#3@@1|) (LitInt |i#0@@8|)))) :qid |BucketsL.430:16| :skolemid |1403| :pattern ( (PivotsLib.__default.Route |pivots#0@@2| |key#3@@1|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@22|)) ($Box |key#3@@1|))) ))) (BucketsLib.__default.WFBucketAt (Lit |bucket#0@@22|) (Lit |pivots#0@@2|) (LitInt |i#0@@8|)))))) :qid |BucketsL.425:24| :weight 3 :skolemid |1404| :pattern ( (BucketsLib.__default.WFBucketAt (Lit |bucket#0@@22|) (Lit |pivots#0@@2|) (LitInt |i#0@@8|))) ))))
(assert  (=> (<= 39 $FunctionContextHeight) (forall ((|blist#0@@3| T@U) (|pivots#0@@3| T@U) ) (!  (=> (and (and (= (type |blist#0@@3|) (SeqType BoxType)) (= (type |pivots#0@@3|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketList#canCall| |blist#0@@3| |pivots#0@@3|) (and (not (= 39 $FunctionContextHeight)) (and ($Is |blist#0@@3| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@3| (TSeq Tclass.KeyType.Key)))))) true) :qid |BucketsL.467:26| :skolemid |1423| :pattern ( (BucketsLib.__default.WFBucketList |blist#0@@3| |pivots#0@@3|)) ))))
(assert (forall ((|blist#0@@4| T@U) (|pivots#0@@4| T@U) ) (!  (=> (and (and (= (type |blist#0@@4|) (SeqType BoxType)) (= (type |pivots#0@@4|) (SeqType BoxType))) (and ($Is |blist#0@@4| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@4| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.WFBucketList#requires| |blist#0@@4| |pivots#0@@4|) true) (=> true (|BucketsLib.__default.WFBucketList#requires| |blist#0@@4| |pivots#0@@4|)))) :qid |BucketsL.467:26| :skolemid |1424| :pattern ( (|BucketsLib.__default.WFBucketList#requires| |blist#0@@4| |pivots#0@@4|)) )))
(assert  (=> (<= 39 $FunctionContextHeight) (forall ((|blist#0@@5| T@U) (|pivots#0@@5| T@U) ) (!  (=> (and (and (= (type |blist#0@@5|) (SeqType BoxType)) (= (type |pivots#0@@5|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketList#canCall| |blist#0@@5| |pivots#0@@5|) (and (not (= 39 $FunctionContextHeight)) (and ($Is |blist#0@@5| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@5| (TSeq Tclass.KeyType.Key)))))) (and (and (|PivotsLib.__default.WFPivots#canCall| |pivots#0@@5|) (=> (= (|Seq#Length| |blist#0@@5|) (+ (|Seq#Length| |pivots#0@@5|) 1)) (forall ((|i#0@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@9|) (< |i#0@@9| (|Seq#Length| |blist#0@@5|))) (|BucketsLib.__default.WFBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@9|)))) :qid |BucketsL.471:16| :skolemid |1425| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@9|))) )))) (and (=> (BucketsLib.__default.WFBucketList |blist#0@@5| |pivots#0@@5|) (and (and (PivotsLib.__default.WFPivots |pivots#0@@5|) (= (|Seq#Length| |blist#0@@5|) (+ (|Seq#Length| |pivots#0@@5|) 1))) (forall ((|i#0@@10| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@10|) (< |i#0@@10| (|Seq#Length| |blist#0@@5|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@10|)))) :qid |BucketsL.471:16| :skolemid |1426| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@10|))) )))) (=> (and (and (PivotsLib.__default.WFPivots |pivots#0@@5|) (= (|Seq#Length| |blist#0@@5|) (+ (|Seq#Length| |pivots#0@@5|) 1))) (forall ((|i#0@@11| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@11|) (< |i#0@@11| (|Seq#Length| |blist#0@@5|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@11|)))) :qid |BucketsL.471:16| :skolemid |1426| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@11|))) ))) (BucketsLib.__default.WFBucketList |blist#0@@5| |pivots#0@@5|))))) :qid |BucketsL.467:26| :skolemid |1427| :pattern ( (BucketsLib.__default.WFBucketList |blist#0@@5| |pivots#0@@5|)) ))))
(assert  (=> (<= 39 $FunctionContextHeight) (forall ((|blist#0@@6| T@U) (|pivots#0@@6| T@U) ) (!  (=> (and (and (= (type |blist#0@@6|) (SeqType BoxType)) (= (type |pivots#0@@6|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketList#canCall| (Lit |blist#0@@6|) (Lit |pivots#0@@6|)) (and (not (= 39 $FunctionContextHeight)) (and ($Is |blist#0@@6| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@6| (TSeq Tclass.KeyType.Key)))))) (and (and (|PivotsLib.__default.WFPivots#canCall| (Lit |pivots#0@@6|)) (=> (= (|Seq#Length| (Lit |blist#0@@6|)) (+ (|Seq#Length| (Lit |pivots#0@@6|)) 1)) (forall ((|i#1@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| (Lit |blist#0@@6|)))) (|BucketsLib.__default.WFBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@6|) |i#1@@5|)))) :qid |BucketsL.471:16| :skolemid |1428| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@6| |i#1@@5|))) )))) (and (=> (BucketsLib.__default.WFBucketList (Lit |blist#0@@6|) (Lit |pivots#0@@6|)) (and (and (PivotsLib.__default.WFPivots (Lit |pivots#0@@6|)) (= (|Seq#Length| (Lit |blist#0@@6|)) (+ (|Seq#Length| (Lit |pivots#0@@6|)) 1))) (forall ((|i#1@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| (|Seq#Length| (Lit |blist#0@@6|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@6|) |i#1@@6|)))) :qid |BucketsL.471:16| :skolemid |1429| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@6| |i#1@@6|))) )))) (=> (and (and (PivotsLib.__default.WFPivots (Lit |pivots#0@@6|)) (= (|Seq#Length| (Lit |blist#0@@6|)) (+ (|Seq#Length| (Lit |pivots#0@@6|)) 1))) (forall ((|i#1@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| (|Seq#Length| (Lit |blist#0@@6|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@6|) |i#1@@7|)))) :qid |BucketsL.471:16| :skolemid |1429| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@6| |i#1@@7|))) ))) (BucketsLib.__default.WFBucketList (Lit |blist#0@@6|) (Lit |pivots#0@@6|)))))) :qid |BucketsL.467:26| :weight 3 :skolemid |1430| :pattern ( (BucketsLib.__default.WFBucketList (Lit |blist#0@@6|) (Lit |pivots#0@@6|))) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((|blist#0@@7| T@U) (|pivots#0@@7| T@U) ) (!  (=> (and (and (= (type |blist#0@@7|) (SeqType BoxType)) (= (type |pivots#0@@7|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketListProper#canCall| |blist#0@@7| |pivots#0@@7|) (and (not (= 40 $FunctionContextHeight)) (and ($Is |blist#0@@7| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@7| (TSeq Tclass.KeyType.Key)))))) true) :qid |BucketsL.474:32| :skolemid |1435| :pattern ( (BucketsLib.__default.WFBucketListProper |blist#0@@7| |pivots#0@@7|)) ))))
(assert (forall ((|blist#0@@8| T@U) (|pivots#0@@8| T@U) ) (!  (=> (and (and (= (type |blist#0@@8|) (SeqType BoxType)) (= (type |pivots#0@@8|) (SeqType BoxType))) (and ($Is |blist#0@@8| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@8| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.WFBucketListProper#requires| |blist#0@@8| |pivots#0@@8|) true) (=> true (|BucketsLib.__default.WFBucketListProper#requires| |blist#0@@8| |pivots#0@@8|)))) :qid |BucketsL.474:32| :skolemid |1436| :pattern ( (|BucketsLib.__default.WFBucketListProper#requires| |blist#0@@8| |pivots#0@@8|)) )))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((|blist#0@@9| T@U) (|pivots#0@@9| T@U) ) (!  (=> (and (and (= (type |blist#0@@9|) (SeqType BoxType)) (= (type |pivots#0@@9|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketListProper#canCall| |blist#0@@9| |pivots#0@@9|) (and (not (= 40 $FunctionContextHeight)) (and ($Is |blist#0@@9| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@9| (TSeq Tclass.KeyType.Key)))))) (and (and (|BucketsLib.__default.WFBucketList#canCall| |blist#0@@9| |pivots#0@@9|) (=> (BucketsLib.__default.WFBucketList |blist#0@@9| |pivots#0@@9|) (forall ((|i#0@@12| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@12|) (< |i#0@@12| (|Seq#Length| |blist#0@@9|))) (|BucketsLib.__default.WFBucketAt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@12|)) |pivots#0@@9| |i#0@@12|)) :qid |BucketsL.477:16| :skolemid |1437| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@12|))) )))) (and (=> (BucketsLib.__default.WFBucketListProper |blist#0@@9| |pivots#0@@9|) (and (BucketsLib.__default.WFBucketList |blist#0@@9| |pivots#0@@9|) (forall ((|i#0@@13| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@13|) (< |i#0@@13| (|Seq#Length| |blist#0@@9|))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@13|)) |pivots#0@@9| |i#0@@13|)) :qid |BucketsL.477:16| :skolemid |1438| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@13|))) )))) (=> (and (BucketsLib.__default.WFBucketList |blist#0@@9| |pivots#0@@9|) (forall ((|i#0@@14| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@14|) (< |i#0@@14| (|Seq#Length| |blist#0@@9|))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@14|)) |pivots#0@@9| |i#0@@14|)) :qid |BucketsL.477:16| :skolemid |1438| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@14|))) ))) (BucketsLib.__default.WFBucketListProper |blist#0@@9| |pivots#0@@9|))))) :qid |BucketsL.474:32| :skolemid |1439| :pattern ( (BucketsLib.__default.WFBucketListProper |blist#0@@9| |pivots#0@@9|)) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((|blist#0@@10| T@U) (|pivots#0@@10| T@U) ) (!  (=> (and (and (= (type |blist#0@@10|) (SeqType BoxType)) (= (type |pivots#0@@10|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketListProper#canCall| (Lit |blist#0@@10|) (Lit |pivots#0@@10|)) (and (not (= 40 $FunctionContextHeight)) (and ($Is |blist#0@@10| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@10| (TSeq Tclass.KeyType.Key)))))) (and (and (|BucketsLib.__default.WFBucketList#canCall| (Lit |blist#0@@10|) (Lit |pivots#0@@10|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@10|) (Lit |pivots#0@@10|))))) (forall ((|i#1@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| (|Seq#Length| (Lit |blist#0@@10|)))) (|BucketsLib.__default.WFBucketAt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@10|) |i#1@@8|)) (Lit |pivots#0@@10|) |i#1@@8|)) :qid |BucketsL.477:16| :skolemid |1440| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@10| |i#1@@8|))) )))) (and (=> (BucketsLib.__default.WFBucketListProper (Lit |blist#0@@10|) (Lit |pivots#0@@10|)) (and (BucketsLib.__default.WFBucketList (Lit |blist#0@@10|) (Lit |pivots#0@@10|)) (forall ((|i#1@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@9|) (< |i#1@@9| (|Seq#Length| (Lit |blist#0@@10|)))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@10|) |i#1@@9|)) (Lit |pivots#0@@10|) |i#1@@9|)) :qid |BucketsL.477:16| :skolemid |1441| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@10| |i#1@@9|))) )))) (=> (and (BucketsLib.__default.WFBucketList (Lit |blist#0@@10|) (Lit |pivots#0@@10|)) (forall ((|i#1@@10| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| (|Seq#Length| (Lit |blist#0@@10|)))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@10|) |i#1@@10|)) (Lit |pivots#0@@10|) |i#1@@10|)) :qid |BucketsL.477:16| :skolemid |1441| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@10| |i#1@@10|))) ))) (BucketsLib.__default.WFBucketListProper (Lit |blist#0@@10|) (Lit |pivots#0@@10|)))))) :qid |BucketsL.474:32| :weight 3 :skolemid |1442| :pattern ( (BucketsLib.__default.WFBucketListProper (Lit |blist#0@@10|) (Lit |pivots#0@@10|))) ))))
(assert (forall ((arg0@@355 T@U) (arg1@@169 T@U) ) (! (= (type (BucketsLib.__default.BucketGet arg0@@355 arg1@@169)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketGet| :pattern ( (BucketsLib.__default.BucketGet arg0@@355 arg1@@169)) )))
(assert  (=> (<= 41 $FunctionContextHeight) (forall ((|bucket#0@@23| T@U) (|key#0@@11| T@U) ) (!  (=> (and (and (= (type |bucket#0@@23|) DatatypeTypeType) (= (type |key#0@@11|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketGet#canCall| |bucket#0@@23| |key#0@@11|) (and (not (= 41 $FunctionContextHeight)) (and ($Is |bucket#0@@23| Tclass.BucketsLib.Bucket) ($Is |key#0@@11| Tclass.KeyType.Key))))) ($Is (BucketsLib.__default.BucketGet |bucket#0@@23| |key#0@@11|) Tclass.ValueMessage.Message)) :qid |BucketsL.480:22| :skolemid |1447| :pattern ( (BucketsLib.__default.BucketGet |bucket#0@@23| |key#0@@11|)) ))))
(assert (forall ((|bucket#0@@24| T@U) (|key#0@@12| T@U) ) (!  (=> (and (and (= (type |bucket#0@@24|) DatatypeTypeType) (= (type |key#0@@12|) (SeqType BoxType))) (and ($Is |bucket#0@@24| Tclass.BucketsLib.Bucket) ($Is |key#0@@12| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.BucketGet#requires| |bucket#0@@24| |key#0@@12|) true) (=> true (|BucketsLib.__default.BucketGet#requires| |bucket#0@@24| |key#0@@12|)))) :qid |BucketsL.480:22| :skolemid |1448| :pattern ( (|BucketsLib.__default.BucketGet#requires| |bucket#0@@24| |key#0@@12|)) )))
(assert  (=> (<= 41 $FunctionContextHeight) (forall ((|bucket#0@@25| T@U) (|key#0@@13| T@U) ) (!  (=> (and (and (= (type |bucket#0@@25|) DatatypeTypeType) (= (type |key#0@@13|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketGet#canCall| |bucket#0@@25| |key#0@@13|) (and (not (= 41 $FunctionContextHeight)) (and ($Is |bucket#0@@25| Tclass.BucketsLib.Bucket) ($Is |key#0@@13| Tclass.KeyType.Key))))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@25|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@25|)) ($Box |key#0@@13|))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@25|))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@25|)) ($Box |key#0@@13|)))) |ValueMessage.__default.IdentityMessage#canCall|)) (= (BucketsLib.__default.BucketGet |bucket#0@@25| |key#0@@13|) (ite (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@25|)) ($Box |key#0@@13|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@25|)) ($Box |key#0@@13|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.480:22| :skolemid |1449| :pattern ( (BucketsLib.__default.BucketGet |bucket#0@@25| |key#0@@13|)) ))))
(assert  (=> (<= 41 $FunctionContextHeight) (forall ((|bucket#0@@26| T@U) (|key#0@@14| T@U) ) (!  (=> (and (and (= (type |bucket#0@@26|) DatatypeTypeType) (= (type |key#0@@14|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketGet#canCall| (Lit |bucket#0@@26|) (Lit |key#0@@14|)) (and (not (= 41 $FunctionContextHeight)) (and ($Is |bucket#0@@26| Tclass.BucketsLib.Bucket) ($Is |key#0@@14| Tclass.KeyType.Key))))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@26|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@26|))) ($Box |key#0@@14|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@26|)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@26|))) ($Box |key#0@@14|)))) |ValueMessage.__default.IdentityMessage#canCall|)) (= (BucketsLib.__default.BucketGet (Lit |bucket#0@@26|) (Lit |key#0@@14|)) (ite (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@26|))) ($Box |key#0@@14|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@26|)))) ($Box (Lit |key#0@@14|)))) ValueMessage.__default.IdentityMessage)))) :qid |BucketsL.480:22| :weight 3 :skolemid |1450| :pattern ( (BucketsLib.__default.BucketGet (Lit |bucket#0@@26|) (Lit |key#0@@14|))) ))))
(assert (forall ((arg0@@356 T@U) (arg1@@170 T@U) (arg2@@115 T@U) ) (! (= (type (BucketsLib.__default.BucketListGet arg0@@356 arg1@@170 arg2@@115)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketListGet| :pattern ( (BucketsLib.__default.BucketListGet arg0@@356 arg1@@170 arg2@@115)) )))
(assert  (=> (<= 42 $FunctionContextHeight) (forall ((|blist#0@@11| T@U) (|pivots#0@@11| T@U) (|key#0@@15| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@11|) (SeqType BoxType)) (= (type |pivots#0@@11|) (SeqType BoxType))) (= (type |key#0@@15|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListGet#canCall| |blist#0@@11| |pivots#0@@11| |key#0@@15|) (and (not (= 42 $FunctionContextHeight)) (and (and (and ($Is |blist#0@@11| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@11| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@15| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucketList |blist#0@@11| |pivots#0@@11|))))) ($Is (BucketsLib.__default.BucketListGet |blist#0@@11| |pivots#0@@11| |key#0@@15|) Tclass.ValueMessage.Message)) :qid |BucketsL.485:26| :skolemid |1452| :pattern ( (BucketsLib.__default.BucketListGet |blist#0@@11| |pivots#0@@11| |key#0@@15|)) ))))
(assert (forall ((|blist#0@@12| T@U) (|pivots#0@@12| T@U) (|key#0@@16| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@12|) (SeqType BoxType)) (= (type |pivots#0@@12|) (SeqType BoxType))) (= (type |key#0@@16|) (SeqType BoxType))) (and (and ($Is |blist#0@@12| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@12| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@16| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.BucketListGet#requires| |blist#0@@12| |pivots#0@@12| |key#0@@16|) (BucketsLib.__default.WFBucketList |blist#0@@12| |pivots#0@@12|)) (=> (BucketsLib.__default.WFBucketList |blist#0@@12| |pivots#0@@12|) (|BucketsLib.__default.BucketListGet#requires| |blist#0@@12| |pivots#0@@12| |key#0@@16|)))) :qid |BucketsL.485:26| :skolemid |1453| :pattern ( (|BucketsLib.__default.BucketListGet#requires| |blist#0@@12| |pivots#0@@12| |key#0@@16|)) )))
(assert  (=> (<= 42 $FunctionContextHeight) (forall ((|blist#0@@13| T@U) (|pivots#0@@13| T@U) (|key#0@@17| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@13|) (SeqType BoxType)) (= (type |pivots#0@@13|) (SeqType BoxType))) (= (type |key#0@@17|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListGet#canCall| |blist#0@@13| |pivots#0@@13| |key#0@@17|) (and (not (= 42 $FunctionContextHeight)) (and (and (and ($Is |blist#0@@13| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@13| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@17| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucketList |blist#0@@13| |pivots#0@@13|))))) (and (and (|PivotsLib.__default.Route#canCall| |pivots#0@@13| |key#0@@17|) (|BucketsLib.__default.BucketGet#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| (PivotsLib.__default.Route |pivots#0@@13| |key#0@@17|))) |key#0@@17|)) (= (BucketsLib.__default.BucketListGet |blist#0@@13| |pivots#0@@13| |key#0@@17|) (BucketsLib.__default.BucketGet ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| (PivotsLib.__default.Route |pivots#0@@13| |key#0@@17|))) |key#0@@17|)))) :qid |BucketsL.485:26| :skolemid |1454| :pattern ( (BucketsLib.__default.BucketListGet |blist#0@@13| |pivots#0@@13| |key#0@@17|)) ))))
(assert  (=> (<= 42 $FunctionContextHeight) (forall ((|blist#0@@14| T@U) (|pivots#0@@14| T@U) (|key#0@@18| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@14|) (SeqType BoxType)) (= (type |pivots#0@@14|) (SeqType BoxType))) (= (type |key#0@@18|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListGet#canCall| (Lit |blist#0@@14|) (Lit |pivots#0@@14|) (Lit |key#0@@18|)) (and (not (= 42 $FunctionContextHeight)) (and (and (and ($Is |blist#0@@14| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@14| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@18| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@14|) (Lit |pivots#0@@14|))))))))) (and (and (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@14|) (Lit |key#0@@18|)) (|BucketsLib.__default.BucketGet#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@14|) (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@14|) (Lit |key#0@@18|))))) (Lit |key#0@@18|))) (= (BucketsLib.__default.BucketListGet (Lit |blist#0@@14|) (Lit |pivots#0@@14|) (Lit |key#0@@18|)) (BucketsLib.__default.BucketGet ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@14|) (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@14|) (Lit |key#0@@18|))))) (Lit |key#0@@18|))))) :qid |BucketsL.485:26| :weight 3 :skolemid |1455| :pattern ( (BucketsLib.__default.BucketListGet (Lit |blist#0@@14|) (Lit |pivots#0@@14|) (Lit |key#0@@18|))) ))))
(assert (forall ((arg0@@357 T@U) (arg1@@171 T@U) (arg2@@116 T@U) ) (! (= (type (BucketsLib.__default.BucketInsert arg0@@357 arg1@@171 arg2@@116)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketInsert| :pattern ( (BucketsLib.__default.BucketInsert arg0@@357 arg1@@171 arg2@@116)) )))
(assert  (=> (<= 43 $FunctionContextHeight) (forall ((|bucket#0@@27| T@U) (|key#0@@19| T@U) (|msg#0@@3| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@27|) DatatypeTypeType) (= (type |key#0@@19|) (SeqType BoxType))) (= (type |msg#0@@3|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketInsert#canCall| |bucket#0@@27| |key#0@@19| |msg#0@@3|) (and (not (= 43 $FunctionContextHeight)) (and (and ($Is |bucket#0@@27| Tclass.BucketsLib.Bucket) ($Is |key#0@@19| Tclass.KeyType.Key)) ($Is |msg#0@@3| Tclass.ValueMessage.Message))))) ($Is (BucketsLib.__default.BucketInsert |bucket#0@@27| |key#0@@19| |msg#0@@3|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.491:25| :skolemid |1459| :pattern ( (BucketsLib.__default.BucketInsert |bucket#0@@27| |key#0@@19| |msg#0@@3|)) ))))
(assert (forall ((|bucket#0@@28| T@U) (|key#0@@20| T@U) (|msg#0@@4| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@28|) DatatypeTypeType) (= (type |key#0@@20|) (SeqType BoxType))) (= (type |msg#0@@4|) DatatypeTypeType)) (and (and ($Is |bucket#0@@28| Tclass.BucketsLib.Bucket) ($Is |key#0@@20| Tclass.KeyType.Key)) ($Is |msg#0@@4| Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.BucketInsert#requires| |bucket#0@@28| |key#0@@20| |msg#0@@4|) true) (=> true (|BucketsLib.__default.BucketInsert#requires| |bucket#0@@28| |key#0@@20| |msg#0@@4|)))) :qid |BucketsL.491:25| :skolemid |1460| :pattern ( (|BucketsLib.__default.BucketInsert#requires| |bucket#0@@28| |key#0@@20| |msg#0@@4|)) )))
(assert (forall ((arg0@@358 T@U) (arg1@@172 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@358 arg1@@172)) DatatypeTypeType) :qid |funType:ValueMessage.__default.Merge| :pattern ( (ValueMessage.__default.Merge arg0@@358 arg1@@172)) )))
(assert  (=> (<= 43 $FunctionContextHeight) (forall ((|bucket#0@@29| T@U) (|key#0@@21| T@U) (|msg#0@@5| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@29|) DatatypeTypeType) (= (type |key#0@@21|) (SeqType BoxType))) (= (type |msg#0@@5|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketInsert#canCall| |bucket#0@@29| |key#0@@21| |msg#0@@5|) (and (not (= 43 $FunctionContextHeight)) (and (and ($Is |bucket#0@@29| Tclass.BucketsLib.Bucket) ($Is |key#0@@21| Tclass.KeyType.Key)) ($Is |msg#0@@5| Tclass.ValueMessage.Message))))) (and (and (and (|BucketsLib.__default.BucketGet#canCall| |bucket#0@@29| |key#0@@21|) (|ValueMessage.__default.Merge#canCall| |msg#0@@5| (BucketsLib.__default.BucketGet |bucket#0@@29| |key#0@@21|))) (let ((|mergedMsg#0| (ValueMessage.__default.Merge |msg#0@@5| (BucketsLib.__default.BucketGet |bucket#0@@29| |key#0@@21|)))) (and (and (and (and (|$IsA#ValueMessage.Message| |mergedMsg#0|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|) (=> (|ValueMessage.Message#Equal| |mergedMsg#0| ValueMessage.__default.IdentityMessage) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@29|) (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@21|))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@21|)))))) (=> (not (|ValueMessage.Message#Equal| |mergedMsg#0| ValueMessage.__default.IdentityMessage)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@29|) (|BucketsLib.__default.B#canCall| (|Map#Build| (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@21|) ($Box |mergedMsg#0|)))))))) (= (BucketsLib.__default.BucketInsert |bucket#0@@29| |key#0@@21| |msg#0@@5|) (let ((|mergedMsg#0@@0| (ValueMessage.__default.Merge |msg#0@@5| (BucketsLib.__default.BucketGet |bucket#0@@29| |key#0@@21|)))) (ite (|ValueMessage.Message#Equal| |mergedMsg#0@@0| ValueMessage.__default.IdentityMessage) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@21|))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Build| (BucketsLib.Bucket.b |bucket#0@@29|) ($Box |key#0@@21|) ($Box |mergedMsg#0@@0|)))))))) :qid |BucketsL.491:25| :skolemid |1461| :pattern ( (BucketsLib.__default.BucketInsert |bucket#0@@29| |key#0@@21| |msg#0@@5|)) ))))
(assert  (=> (<= 43 $FunctionContextHeight) (forall ((|bucket#0@@30| T@U) (|key#0@@22| T@U) (|msg#0@@6| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@30|) DatatypeTypeType) (= (type |key#0@@22|) (SeqType BoxType))) (= (type |msg#0@@6|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketInsert#canCall| (Lit |bucket#0@@30|) (Lit |key#0@@22|) (Lit |msg#0@@6|)) (and (not (= 43 $FunctionContextHeight)) (and (and ($Is |bucket#0@@30| Tclass.BucketsLib.Bucket) ($Is |key#0@@22| Tclass.KeyType.Key)) ($Is |msg#0@@6| Tclass.ValueMessage.Message))))) (and (and (and (|BucketsLib.__default.BucketGet#canCall| (Lit |bucket#0@@30|) (Lit |key#0@@22|)) (|ValueMessage.__default.Merge#canCall| (Lit |msg#0@@6|) (Lit (BucketsLib.__default.BucketGet (Lit |bucket#0@@30|) (Lit |key#0@@22|))))) (let ((|mergedMsg#1| (Lit (ValueMessage.__default.Merge (Lit |msg#0@@6|) (Lit (BucketsLib.__default.BucketGet (Lit |bucket#0@@30|) (Lit |key#0@@22|))))))) (and (and (and (and (|$IsA#ValueMessage.Message| |mergedMsg#1|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|) (=> (|ValueMessage.Message#Equal| |mergedMsg#1| ValueMessage.__default.IdentityMessage) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@30|)) (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@22|)))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@22|))))))) (=> (not (|ValueMessage.Message#Equal| |mergedMsg#1| ValueMessage.__default.IdentityMessage)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@30|)) (|BucketsLib.__default.B#canCall| (|Map#Build| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@22|)) ($Box |mergedMsg#1|)))))))) (= (BucketsLib.__default.BucketInsert (Lit |bucket#0@@30|) (Lit |key#0@@22|) (Lit |msg#0@@6|)) (let ((|mergedMsg#1@@0| (Lit (ValueMessage.__default.Merge (Lit |msg#0@@6|) (Lit (BucketsLib.__default.BucketGet (Lit |bucket#0@@30|) (Lit |key#0@@22|))))))) (ite (|ValueMessage.Message#Equal| |mergedMsg#1@@0| ValueMessage.__default.IdentityMessage) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapRemove1 (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@22|)))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Build| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@30|))) ($Box (Lit |key#0@@22|)) ($Box |mergedMsg#1@@0|)))))))) :qid |BucketsL.491:25| :weight 3 :skolemid |1462| :pattern ( (BucketsLib.__default.BucketInsert (Lit |bucket#0@@30|) (Lit |key#0@@22|) (Lit |msg#0@@6|))) ))))
(assert (forall ((arg0@@359 T@U) (arg1@@173 T@U) (arg2@@117 T@U) (arg3@@88 T@U) ) (! (= (type (BucketsLib.__default.BucketListInsert arg0@@359 arg1@@173 arg2@@117 arg3@@88)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.BucketListInsert| :pattern ( (BucketsLib.__default.BucketListInsert arg0@@359 arg1@@173 arg2@@117 arg3@@88)) )))
(assert  (=> (<= 44 $FunctionContextHeight) (forall ((|blist#0@@15| T@U) (|pivots#0@@15| T@U) (|key#0@@23| T@U) (|msg#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@15|) (SeqType BoxType)) (= (type |pivots#0@@15|) (SeqType BoxType))) (= (type |key#0@@23|) (SeqType BoxType))) (= (type |msg#0@@7|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketListInsert#canCall| |blist#0@@15| |pivots#0@@15| |key#0@@23| |msg#0@@7|) (and (not (= 44 $FunctionContextHeight)) (and (and (and (and ($Is |blist#0@@15| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@15| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@23| Tclass.KeyType.Key)) ($Is |msg#0@@7| Tclass.ValueMessage.Message)) (BucketsLib.__default.WFBucketList |blist#0@@15| |pivots#0@@15|))))) ($Is (BucketsLib.__default.BucketListInsert |blist#0@@15| |pivots#0@@15| |key#0@@23| |msg#0@@7|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsL.500:29| :skolemid |1469| :pattern ( (BucketsLib.__default.BucketListInsert |blist#0@@15| |pivots#0@@15| |key#0@@23| |msg#0@@7|)) ))))
(assert (forall ((|blist#0@@16| T@U) (|pivots#0@@16| T@U) (|key#0@@24| T@U) (|msg#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@16|) (SeqType BoxType)) (= (type |pivots#0@@16|) (SeqType BoxType))) (= (type |key#0@@24|) (SeqType BoxType))) (= (type |msg#0@@8|) DatatypeTypeType)) (and (and (and ($Is |blist#0@@16| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@16| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@24| Tclass.KeyType.Key)) ($Is |msg#0@@8| Tclass.ValueMessage.Message))) (and (=> (|BucketsLib.__default.BucketListInsert#requires| |blist#0@@16| |pivots#0@@16| |key#0@@24| |msg#0@@8|) (BucketsLib.__default.WFBucketList |blist#0@@16| |pivots#0@@16|)) (=> (BucketsLib.__default.WFBucketList |blist#0@@16| |pivots#0@@16|) (|BucketsLib.__default.BucketListInsert#requires| |blist#0@@16| |pivots#0@@16| |key#0@@24| |msg#0@@8|)))) :qid |BucketsL.500:29| :skolemid |1470| :pattern ( (|BucketsLib.__default.BucketListInsert#requires| |blist#0@@16| |pivots#0@@16| |key#0@@24| |msg#0@@8|)) )))
(assert  (=> (<= 44 $FunctionContextHeight) (forall ((|blist#0@@17| T@U) (|pivots#0@@17| T@U) (|key#0@@25| T@U) (|msg#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@17|) (SeqType BoxType)) (= (type |pivots#0@@17|) (SeqType BoxType))) (= (type |key#0@@25|) (SeqType BoxType))) (= (type |msg#0@@9|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketListInsert#canCall| |blist#0@@17| |pivots#0@@17| |key#0@@25| |msg#0@@9|) (and (not (= 44 $FunctionContextHeight)) (and (and (and (and ($Is |blist#0@@17| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@17| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@25| Tclass.KeyType.Key)) ($Is |msg#0@@9| Tclass.ValueMessage.Message)) (BucketsLib.__default.WFBucketList |blist#0@@17| |pivots#0@@17|))))) (and (and (|PivotsLib.__default.Route#canCall| |pivots#0@@17| |key#0@@25|) (let ((|i#0@@15| (PivotsLib.__default.Route |pivots#0@@17| |key#0@@25|))) (|BucketsLib.__default.BucketInsert#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@17| |i#0@@15|)) |key#0@@25| |msg#0@@9|))) (= (BucketsLib.__default.BucketListInsert |blist#0@@17| |pivots#0@@17| |key#0@@25| |msg#0@@9|) (let ((|i#0@@16| (PivotsLib.__default.Route |pivots#0@@17| |key#0@@25|))) (|Seq#Update| |blist#0@@17| |i#0@@16| ($Box (BucketsLib.__default.BucketInsert ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@17| |i#0@@16|)) |key#0@@25| |msg#0@@9|))))))) :qid |BucketsL.500:29| :skolemid |1471| :pattern ( (BucketsLib.__default.BucketListInsert |blist#0@@17| |pivots#0@@17| |key#0@@25| |msg#0@@9|)) ))))
(assert  (=> (<= 44 $FunctionContextHeight) (forall ((|blist#0@@18| T@U) (|pivots#0@@18| T@U) (|key#0@@26| T@U) (|msg#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@18|) (SeqType BoxType)) (= (type |pivots#0@@18|) (SeqType BoxType))) (= (type |key#0@@26|) (SeqType BoxType))) (= (type |msg#0@@10|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketListInsert#canCall| (Lit |blist#0@@18|) (Lit |pivots#0@@18|) (Lit |key#0@@26|) (Lit |msg#0@@10|)) (and (not (= 44 $FunctionContextHeight)) (and (and (and (and ($Is |blist#0@@18| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@18| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@26| Tclass.KeyType.Key)) ($Is |msg#0@@10| Tclass.ValueMessage.Message)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@18|) (Lit |pivots#0@@18|))))))))) (and (and (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@18|) (Lit |key#0@@26|)) (let ((|i#1@@11| (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@18|) (Lit |key#0@@26|))))) (|BucketsLib.__default.BucketInsert#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@18|) |i#1@@11|)) (Lit |key#0@@26|) (Lit |msg#0@@10|)))) (= (BucketsLib.__default.BucketListInsert (Lit |blist#0@@18|) (Lit |pivots#0@@18|) (Lit |key#0@@26|) (Lit |msg#0@@10|)) (let ((|i#1@@12| (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@18|) (Lit |key#0@@26|))))) (|Seq#Update| (Lit |blist#0@@18|) |i#1@@12| ($Box (BucketsLib.__default.BucketInsert ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@18|) |i#1@@12|)) (Lit |key#0@@26|) (Lit |msg#0@@10|)))))))) :qid |BucketsL.500:29| :weight 3 :skolemid |1472| :pattern ( (BucketsLib.__default.BucketListInsert (Lit |blist#0@@18|) (Lit |pivots#0@@18|) (Lit |key#0@@26|) (Lit |msg#0@@10|))) ))))
(assert (forall ((arg0@@360 T@U) (arg1@@174 T@U) (arg2@@118 T@U) (arg3@@89 Int) ) (! (= (type (BucketsLib.__default.BucketListItemFlush arg0@@360 arg1@@174 arg2@@118 arg3@@89)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketListItemFlush| :pattern ( (BucketsLib.__default.BucketListItemFlush arg0@@360 arg1@@174 arg2@@118 arg3@@89)) )))
(assert  (=> (<= 45 $FunctionContextHeight) (forall ((|parent#0| T@U) (|child#0| T@U) (|pivots#0@@19| T@U) (|i#0@@17| Int) ) (!  (=> (and (and (and (= (type |parent#0|) DatatypeTypeType) (= (type |child#0|) DatatypeTypeType)) (= (type |pivots#0@@19|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListItemFlush#canCall| |parent#0| |child#0| |pivots#0@@19| |i#0@@17|) (and (not (= 45 $FunctionContextHeight)) (and (and (and ($Is |parent#0| Tclass.BucketsLib.Bucket) ($Is |child#0| Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@19| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@19|))))) ($Is (BucketsLib.__default.BucketListItemFlush |parent#0| |child#0| |pivots#0@@19| |i#0@@17|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.509:32| :skolemid |1476| :pattern ( (BucketsLib.__default.BucketListItemFlush |parent#0| |child#0| |pivots#0@@19| |i#0@@17|)) ))))
(assert (forall ((|parent#0@@0| T@U) (|child#0@@0| T@U) (|pivots#0@@20| T@U) (|i#0@@18| Int) ) (!  (=> (and (and (and (= (type |parent#0@@0|) DatatypeTypeType) (= (type |child#0@@0|) DatatypeTypeType)) (= (type |pivots#0@@20|) (SeqType BoxType))) (and (and ($Is |parent#0@@0| Tclass.BucketsLib.Bucket) ($Is |child#0@@0| Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@20| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketListItemFlush#requires| |parent#0@@0| |child#0@@0| |pivots#0@@20| |i#0@@18|) (PivotsLib.__default.WFPivots |pivots#0@@20|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@20|) (|BucketsLib.__default.BucketListItemFlush#requires| |parent#0@@0| |child#0@@0| |pivots#0@@20| |i#0@@18|)))) :qid |BucketsL.509:32| :skolemid |1477| :pattern ( (|BucketsLib.__default.BucketListItemFlush#requires| |parent#0@@0| |child#0@@0| |pivots#0@@20| |i#0@@18|)) )))
(assert  (and (forall ((arg0@@361 T@U) (arg1@@175 T@U) (arg2@@119 T@U) (arg3@@90 T@U) (arg4@@77 Int) (arg5@@63 T@U) (arg6@@51 T@U) (arg7@@36 T@U) ) (! (= (type (|lambda#65| arg0@@361 arg1@@175 arg2@@119 arg3@@90 arg4@@77 arg5@@63 arg6@@51 arg7@@36)) (MapType0Type BoxType boolType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@361 arg1@@175 arg2@@119 arg3@@90 arg4@@77 arg5@@63 arg6@@51 arg7@@36)) )) (forall ((arg0@@362 T@U) (arg1@@176 T@U) ) (! (= (type (|lambda#66| arg0@@362 arg1@@176)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#66| :pattern ( (|lambda#66| arg0@@362 arg1@@176)) ))))
(assert  (=> (<= 45 $FunctionContextHeight) (forall ((|parent#0@@1| T@U) (|child#0@@1| T@U) (|pivots#0@@21| T@U) (|i#0@@19| Int) ) (!  (=> (and (and (and (= (type |parent#0@@1|) DatatypeTypeType) (= (type |child#0@@1|) DatatypeTypeType)) (= (type |pivots#0@@21|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListItemFlush#canCall| |parent#0@@1| |child#0@@1| |pivots#0@@21| |i#0@@19|) (and (not (= 45 $FunctionContextHeight)) (and (and (and ($Is |parent#0@@1| Tclass.BucketsLib.Bucket) ($Is |child#0@@1| Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@21| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@21|))))) (and (and (forall ((|key#0@@27| T@U) ) (!  (=> (and (= (type |key#0@@27|) (SeqType BoxType)) ($Is |key#0@@27| Tclass.KeyType.Key)) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |child#0@@1|) (BucketsLib.Bucket.BucketMapWithSeq_q |parent#0@@1|)) (=> (or (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |child#0@@1|)) ($Box |key#0@@27|))) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |parent#0@@1|)) ($Box |key#0@@27|)))) (|PivotsLib.__default.Route#canCall| |pivots#0@@21| |key#0@@27|))) (=> (and (|PivotsLib.__default.Route#canCall| |pivots#0@@21| |key#0@@27|) (= (PivotsLib.__default.Route |pivots#0@@21| |key#0@@27|) |i#0@@19|)) (and (and (|$IsA#ValueMessage.Message| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@27|) (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@27|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (and (and (|BucketsLib.__default.BucketGet#canCall| |parent#0@@1| |key#0@@27|) (|BucketsLib.__default.BucketGet#canCall| |child#0@@1| |key#0@@27|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@27|) (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@27|))) |ValueMessage.__default.IdentityMessage#canCall|)))) (=> (and (and (or (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |child#0@@1|)) ($Box |key#0@@27|))) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |parent#0@@1|)) ($Box |key#0@@27|)))) (= (PivotsLib.__default.Route |pivots#0@@21| |key#0@@27|) |i#0@@19|)) (not (|ValueMessage.Message#Equal| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@27|) (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@27|)) ValueMessage.__default.IdentityMessage))) (and (and (|BucketsLib.__default.BucketGet#canCall| |parent#0@@1| |key#0@@27|) (|BucketsLib.__default.BucketGet#canCall| |child#0@@1| |key#0@@27|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@27|) (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@27|)))))) :qid |BucketsL.512:11| :skolemid |1478| :pattern ( (BucketsLib.__default.BucketGet |child#0@@1| |key#0@@27|)) :pattern ( (BucketsLib.__default.BucketGet |parent#0@@1| |key#0@@27|)) :pattern ( (PivotsLib.__default.Route |pivots#0@@21| |key#0@@27|)) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#65| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |child#0@@1|)) (|Map#Domain| (BucketsLib.Bucket.b |parent#0@@1|)) |pivots#0@@21| |i#0@@19| |parent#0@@1| |child#0@@1| ValueMessage.__default.IdentityMessage) (|lambda#66| |parent#0@@1| |child#0@@1|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketListItemFlush |parent#0@@1| |child#0@@1| |pivots#0@@21| |i#0@@19|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#65| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |child#0@@1|)) (|Map#Domain| (BucketsLib.Bucket.b |parent#0@@1|)) |pivots#0@@21| |i#0@@19| |parent#0@@1| |child#0@@1| ValueMessage.__default.IdentityMessage) (|lambda#66| |parent#0@@1| |child#0@@1|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.509:32| :skolemid |1479| :pattern ( (BucketsLib.__default.BucketListItemFlush |parent#0@@1| |child#0@@1| |pivots#0@@21| |i#0@@19|)) ))))
(assert  (=> (<= 45 $FunctionContextHeight) (forall ((|parent#0@@2| T@U) (|child#0@@2| T@U) (|pivots#0@@22| T@U) (|i#0@@20| Int) ) (!  (=> (and (and (and (= (type |parent#0@@2|) DatatypeTypeType) (= (type |child#0@@2|) DatatypeTypeType)) (= (type |pivots#0@@22|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListItemFlush#canCall| (Lit |parent#0@@2|) (Lit |child#0@@2|) (Lit |pivots#0@@22|) (LitInt |i#0@@20|)) (and (not (= 45 $FunctionContextHeight)) (and (and (and ($Is |parent#0@@2| Tclass.BucketsLib.Bucket) ($Is |child#0@@2| Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@22| (TSeq Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@22|))))))))) (and (and (forall ((|key#0@@28| T@U) ) (!  (=> (and (= (type |key#0@@28|) (SeqType BoxType)) ($Is |key#0@@28| Tclass.KeyType.Key)) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |child#0@@2|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |parent#0@@2|))) (=> (or (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |child#0@@2|))))) ($Box |key#0@@28|))) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |parent#0@@2|))))) ($Box |key#0@@28|)))) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@22|) |key#0@@28|))) (=> (and (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@22|) |key#0@@28|) (= (PivotsLib.__default.Route (Lit |pivots#0@@22|) |key#0@@28|) (LitInt |i#0@@20|))) (and (and (|$IsA#ValueMessage.Message| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet (Lit |parent#0@@2|) |key#0@@28|) (BucketsLib.__default.BucketGet (Lit |child#0@@2|) |key#0@@28|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (and (and (|BucketsLib.__default.BucketGet#canCall| (Lit |parent#0@@2|) |key#0@@28|) (|BucketsLib.__default.BucketGet#canCall| (Lit |child#0@@2|) |key#0@@28|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet (Lit |parent#0@@2|) |key#0@@28|) (BucketsLib.__default.BucketGet (Lit |child#0@@2|) |key#0@@28|))) |ValueMessage.__default.IdentityMessage#canCall|)))) (=> (and (and (or (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |child#0@@2|))))) ($Box |key#0@@28|))) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |parent#0@@2|))))) ($Box |key#0@@28|)))) (= (PivotsLib.__default.Route (Lit |pivots#0@@22|) |key#0@@28|) (LitInt |i#0@@20|))) (not (|ValueMessage.Message#Equal| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet (Lit |parent#0@@2|) |key#0@@28|) (BucketsLib.__default.BucketGet (Lit |child#0@@2|) |key#0@@28|)) ValueMessage.__default.IdentityMessage))) (and (and (|BucketsLib.__default.BucketGet#canCall| (Lit |parent#0@@2|) |key#0@@28|) (|BucketsLib.__default.BucketGet#canCall| (Lit |child#0@@2|) |key#0@@28|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet (Lit |parent#0@@2|) |key#0@@28|) (BucketsLib.__default.BucketGet (Lit |child#0@@2|) |key#0@@28|)))))) :qid |BucketsL.512:11| :skolemid |1480| :pattern ( (BucketsLib.__default.BucketGet |child#0@@2| |key#0@@28|)) :pattern ( (BucketsLib.__default.BucketGet |parent#0@@2| |key#0@@28|)) :pattern ( (PivotsLib.__default.Route |pivots#0@@22| |key#0@@28|)) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#65| Tclass.KeyType.Key (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |child#0@@2|))))) (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |parent#0@@2|))))) (Lit |pivots#0@@22|) (LitInt |i#0@@20|) (Lit |parent#0@@2|) (Lit |child#0@@2|) ValueMessage.__default.IdentityMessage) (|lambda#66| (Lit |parent#0@@2|) (Lit |child#0@@2|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketListItemFlush (Lit |parent#0@@2|) (Lit |child#0@@2|) (Lit |pivots#0@@22|) (LitInt |i#0@@20|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#65| Tclass.KeyType.Key (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |child#0@@2|))))) (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |parent#0@@2|))))) (Lit |pivots#0@@22|) (LitInt |i#0@@20|) (Lit |parent#0@@2|) (Lit |child#0@@2|) ValueMessage.__default.IdentityMessage) (|lambda#66| (Lit |parent#0@@2|) (Lit |child#0@@2|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.509:32| :weight 3 :skolemid |1481| :pattern ( (BucketsLib.__default.BucketListItemFlush (Lit |parent#0@@2|) (Lit |child#0@@2|) (Lit |pivots#0@@22|) (LitInt |i#0@@20|))) ))))
(assert (forall ((arg0@@363 T@U) (arg1@@177 T@U) (arg2@@120 T@U) (arg3@@91 T@U) (arg4@@78 Int) ) (! (= (type (BucketsLib.__default.BucketListFlushPartial arg0@@363 arg1@@177 arg2@@120 arg3@@91 arg4@@78)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.BucketListFlushPartial| :pattern ( (BucketsLib.__default.BucketListFlushPartial arg0@@363 arg1@@177 arg2@@120 arg3@@91 arg4@@78)) )))
(assert (forall (($ly@@17 T@U) (|parent#0@@3| T@U) (|children#0| T@U) (|pivots#0@@23| T@U) (|i#0@@21| Int) ) (!  (=> (and (and (and (= (type $ly@@17) LayerTypeType) (= (type |parent#0@@3|) DatatypeTypeType)) (= (type |children#0|) (SeqType BoxType))) (= (type |pivots#0@@23|) (SeqType BoxType))) (= (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@17) |parent#0@@3| |children#0| |pivots#0@@23| |i#0@@21|) (BucketsLib.__default.BucketListFlushPartial $ly@@17 |parent#0@@3| |children#0| |pivots#0@@23| |i#0@@21|))) :qid |BucketsL.552:12| :skolemid |1496| :pattern ( (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@17) |parent#0@@3| |children#0| |pivots#0@@23| |i#0@@21|)) )))
(assert (forall (($ly@@18 T@U) (|parent#0@@4| T@U) (|children#0@@0| T@U) (|pivots#0@@24| T@U) (|i#0@@22| Int) ) (!  (=> (and (and (and (= (type $ly@@18) LayerTypeType) (= (type |parent#0@@4|) DatatypeTypeType)) (= (type |children#0@@0|) (SeqType BoxType))) (= (type |pivots#0@@24|) (SeqType BoxType))) (= (BucketsLib.__default.BucketListFlushPartial $ly@@18 |parent#0@@4| |children#0@@0| |pivots#0@@24| |i#0@@22|) (BucketsLib.__default.BucketListFlushPartial $LZ |parent#0@@4| |children#0@@0| |pivots#0@@24| |i#0@@22|))) :qid |BucketsL.552:12| :skolemid |1497| :pattern ( (BucketsLib.__default.BucketListFlushPartial (AsFuelBottom $ly@@18) |parent#0@@4| |children#0@@0| |pivots#0@@24| |i#0@@22|)) )))
(assert  (=> (<= 48 $FunctionContextHeight) (forall (($ly@@19 T@U) (|parent#0@@5| T@U) (|children#0@@1| T@U) (|pivots#0@@25| T@U) (|i#0@@23| Int) ) (!  (=> (and (and (and (and (= (type $ly@@19) LayerTypeType) (= (type |parent#0@@5|) DatatypeTypeType)) (= (type |children#0@@1|) (SeqType BoxType))) (= (type |pivots#0@@25|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlushPartial#canCall| |parent#0@@5| |children#0@@1| |pivots#0@@25| |i#0@@23|) (and (not (= 48 $FunctionContextHeight)) (and (and (and ($Is |parent#0@@5| Tclass.BucketsLib.Bucket) ($Is |children#0@@1| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@25| (TSeq Tclass.KeyType.Key))) (and (PivotsLib.__default.WFPivots |pivots#0@@25|) (and (<= (LitInt 0) |i#0@@23|) (<= |i#0@@23| (|Seq#Length| |children#0@@1|)))))))) (and (and (= (|Seq#Length| (BucketsLib.__default.BucketListFlushPartial $ly@@19 |parent#0@@5| |children#0@@1| |pivots#0@@25| |i#0@@23|)) |i#0@@23|) (forall ((|h#0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |h#0|) (< |h#0| |i#0@@23|)) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.BucketListFlushPartial $ly@@19 |parent#0@@5| |children#0@@1| |pivots#0@@25| |i#0@@23|) |h#0|)) (BucketsLib.__default.BucketListItemFlush |parent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@1| |h#0|)) |pivots#0@@25| |h#0|)))) :qid |BucketsL.556:18| :skolemid |1498| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@1| |h#0|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.BucketListFlushPartial $ly@@19 |parent#0@@5| |children#0@@1| |pivots#0@@25| |i#0@@23|) |h#0|))) ))) ($Is (BucketsLib.__default.BucketListFlushPartial $ly@@19 |parent#0@@5| |children#0@@1| |pivots#0@@25| |i#0@@23|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.552:12| :skolemid |1499| :pattern ( (BucketsLib.__default.BucketListFlushPartial $ly@@19 |parent#0@@5| |children#0@@1| |pivots#0@@25| |i#0@@23|)) ))))
(assert (forall (($ly@@20 T@U) (|parent#0@@6| T@U) (|children#0@@2| T@U) (|pivots#0@@26| T@U) (|i#0@@24| Int) ) (!  (=> (and (and (and (and (= (type $ly@@20) LayerTypeType) (= (type |parent#0@@6|) DatatypeTypeType)) (= (type |children#0@@2|) (SeqType BoxType))) (= (type |pivots#0@@26|) (SeqType BoxType))) (and (and ($Is |parent#0@@6| Tclass.BucketsLib.Bucket) ($Is |children#0@@2| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@26| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketListFlushPartial#requires| $ly@@20 |parent#0@@6| |children#0@@2| |pivots#0@@26| |i#0@@24|) (and (PivotsLib.__default.WFPivots |pivots#0@@26|) (and (<= (LitInt 0) |i#0@@24|) (<= |i#0@@24| (|Seq#Length| |children#0@@2|))))) (=> (and (PivotsLib.__default.WFPivots |pivots#0@@26|) (and (<= (LitInt 0) |i#0@@24|) (<= |i#0@@24| (|Seq#Length| |children#0@@2|)))) (|BucketsLib.__default.BucketListFlushPartial#requires| $ly@@20 |parent#0@@6| |children#0@@2| |pivots#0@@26| |i#0@@24|)))) :qid |BucketsL.552:12| :skolemid |1500| :pattern ( (|BucketsLib.__default.BucketListFlushPartial#requires| $ly@@20 |parent#0@@6| |children#0@@2| |pivots#0@@26| |i#0@@24|)) )))
(assert  (=> (<= 48 $FunctionContextHeight) (forall (($ly@@21 T@U) (|parent#0@@7| T@U) (|children#0@@3| T@U) (|pivots#0@@27| T@U) (|i#0@@25| Int) ) (!  (=> (and (and (and (and (= (type $ly@@21) LayerTypeType) (= (type |parent#0@@7|) DatatypeTypeType)) (= (type |children#0@@3|) (SeqType BoxType))) (= (type |pivots#0@@27|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlushPartial#canCall| |parent#0@@7| |children#0@@3| |pivots#0@@27| |i#0@@25|) (and (not (= 48 $FunctionContextHeight)) (and (and (and ($Is |parent#0@@7| Tclass.BucketsLib.Bucket) ($Is |children#0@@3| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@27| (TSeq Tclass.KeyType.Key))) (and (PivotsLib.__default.WFPivots |pivots#0@@27|) (and (<= (LitInt 0) |i#0@@25|) (<= |i#0@@25| (|Seq#Length| |children#0@@3|)))))))) (and (=> (not (= |i#0@@25| (LitInt 0))) (and (|BucketsLib.__default.BucketListFlushPartial#canCall| |parent#0@@7| |children#0@@3| |pivots#0@@27| (- |i#0@@25| 1)) (|BucketsLib.__default.BucketListItemFlush#canCall| |parent#0@@7| ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@3| (- |i#0@@25| 1))) |pivots#0@@27| (- |i#0@@25| 1)))) (= (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@21) |parent#0@@7| |children#0@@3| |pivots#0@@27| |i#0@@25|) (ite (= |i#0@@25| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.BucketListFlushPartial $ly@@21 |parent#0@@7| |children#0@@3| |pivots#0@@27| (- |i#0@@25| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.BucketListItemFlush |parent#0@@7| ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@3| (- |i#0@@25| 1))) |pivots#0@@27| (- |i#0@@25| 1))))))))) :qid |BucketsL.552:12| :skolemid |1501| :pattern ( (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@21) |parent#0@@7| |children#0@@3| |pivots#0@@27| |i#0@@25|)) ))))
(assert  (=> (<= 48 $FunctionContextHeight) (forall (($ly@@22 T@U) (|parent#0@@8| T@U) (|children#0@@4| T@U) (|pivots#0@@28| T@U) (|i#0@@26| Int) ) (!  (=> (and (and (and (and (= (type $ly@@22) LayerTypeType) (= (type |parent#0@@8|) DatatypeTypeType)) (= (type |children#0@@4|) (SeqType BoxType))) (= (type |pivots#0@@28|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlushPartial#canCall| (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@28|) (LitInt |i#0@@26|)) (and (not (= 48 $FunctionContextHeight)) (and (and (and ($Is |parent#0@@8| Tclass.BucketsLib.Bucket) ($Is |children#0@@4| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@28| (TSeq Tclass.KeyType.Key))) (and (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@28|))))) (and (<= (LitInt 0) (LitInt |i#0@@26|)) (<= (LitInt |i#0@@26|) (|Seq#Length| (Lit |children#0@@4|))))))))) (and (=> (not (= (LitInt |i#0@@26|) (LitInt 0))) (and (|BucketsLib.__default.BucketListFlushPartial#canCall| (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@28|) (LitInt (- |i#0@@26| 1))) (|BucketsLib.__default.BucketListItemFlush#canCall| (Lit |parent#0@@8|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |children#0@@4|) (LitInt (- |i#0@@26| 1)))) (Lit |pivots#0@@28|) (LitInt (- |i#0@@26| 1))))) (= (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@22) (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@28|) (LitInt |i#0@@26|)) (ite (= (LitInt |i#0@@26|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@22) (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@28|) (LitInt (- |i#0@@26| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.BucketListItemFlush (Lit |parent#0@@8|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |children#0@@4|) (LitInt (- |i#0@@26| 1)))) (Lit |pivots#0@@28|) (LitInt (- |i#0@@26| 1)))))))))) :qid |BucketsL.552:12| :weight 3 :skolemid |1502| :pattern ( (BucketsLib.__default.BucketListFlushPartial ($LS $ly@@22) (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@28|) (LitInt |i#0@@26|))) ))))
(assert (forall ((arg0@@364 T@U) (arg1@@178 T@U) (arg2@@121 T@U) ) (! (= (type (BucketsLib.__default.BucketListFlush arg0@@364 arg1@@178 arg2@@121)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.BucketListFlush| :pattern ( (BucketsLib.__default.BucketListFlush arg0@@364 arg1@@178 arg2@@121)) )))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((|parent#0@@9| T@U) (|children#0@@5| T@U) (|pivots#0@@29| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@9|) DatatypeTypeType) (= (type |children#0@@5|) (SeqType BoxType))) (= (type |pivots#0@@29|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlush#canCall| |parent#0@@9| |children#0@@5| |pivots#0@@29|) (and (not (= 50 $FunctionContextHeight)) (and (and (and ($Is |parent#0@@9| Tclass.BucketsLib.Bucket) ($Is |children#0@@5| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@29| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@29|))))) (and (and (and (= (|Seq#Length| (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@29|)) (|Seq#Length| |children#0@@5|)) (BucketsLib.__default.BucketListWellMarshalled (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@29|))) (forall ((|h#0@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |h#0@@0|) (< |h#0@@0| (|Seq#Length| (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@29|)))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@29|) |h#0@@0|)) (BucketsLib.__default.BucketListItemFlush |parent#0@@9| ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@5| |h#0@@0|)) |pivots#0@@29| |h#0@@0|)))) :qid |BucketsL.585:18| :skolemid |1515| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@5| |h#0@@0|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@29|) |h#0@@0|))) ))) ($Is (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@29|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.581:28| :skolemid |1516| :pattern ( (BucketsLib.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@29|)) ))))
(assert (forall ((|parent#0@@10| T@U) (|children#0@@6| T@U) (|pivots#0@@30| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@10|) DatatypeTypeType) (= (type |children#0@@6|) (SeqType BoxType))) (= (type |pivots#0@@30|) (SeqType BoxType))) (and (and ($Is |parent#0@@10| Tclass.BucketsLib.Bucket) ($Is |children#0@@6| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@30| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketListFlush#requires| |parent#0@@10| |children#0@@6| |pivots#0@@30|) (PivotsLib.__default.WFPivots |pivots#0@@30|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@30|) (|BucketsLib.__default.BucketListFlush#requires| |parent#0@@10| |children#0@@6| |pivots#0@@30|)))) :qid |BucketsL.581:28| :skolemid |1517| :pattern ( (|BucketsLib.__default.BucketListFlush#requires| |parent#0@@10| |children#0@@6| |pivots#0@@30|)) )))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((|parent#0@@11| T@U) (|children#0@@7| T@U) (|pivots#0@@31| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@11|) DatatypeTypeType) (= (type |children#0@@7|) (SeqType BoxType))) (= (type |pivots#0@@31|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlush#canCall| |parent#0@@11| |children#0@@7| |pivots#0@@31|) (and (not (= 50 $FunctionContextHeight)) (and (and (and ($Is |parent#0@@11| Tclass.BucketsLib.Bucket) ($Is |children#0@@7| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@31| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@31|))))) (and (|BucketsLib.__default.BucketListFlushPartial#canCall| |parent#0@@11| |children#0@@7| |pivots#0@@31| (|Seq#Length| |children#0@@7|)) (= (BucketsLib.__default.BucketListFlush |parent#0@@11| |children#0@@7| |pivots#0@@31|) (BucketsLib.__default.BucketListFlushPartial ($LS $LZ) |parent#0@@11| |children#0@@7| |pivots#0@@31| (|Seq#Length| |children#0@@7|))))) :qid |BucketsL.581:28| :skolemid |1518| :pattern ( (BucketsLib.__default.BucketListFlush |parent#0@@11| |children#0@@7| |pivots#0@@31|)) ))))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((|parent#0@@12| T@U) (|children#0@@8| T@U) (|pivots#0@@32| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@12|) DatatypeTypeType) (= (type |children#0@@8|) (SeqType BoxType))) (= (type |pivots#0@@32|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListFlush#canCall| (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@32|)) (and (not (= 50 $FunctionContextHeight)) (and (and (and ($Is |parent#0@@12| Tclass.BucketsLib.Bucket) ($Is |children#0@@8| (TSeq Tclass.BucketsLib.Bucket))) ($Is |pivots#0@@32| (TSeq Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@32|))))))))) (and (|BucketsLib.__default.BucketListFlushPartial#canCall| (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@32|) (|Seq#Length| (Lit |children#0@@8|))) (= (BucketsLib.__default.BucketListFlush (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@32|)) (BucketsLib.__default.BucketListFlushPartial ($LS $LZ) (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@32|) (|Seq#Length| (Lit |children#0@@8|)))))) :qid |BucketsL.581:28| :weight 3 :skolemid |1519| :pattern ( (BucketsLib.__default.BucketListFlush (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@32|))) ))))
(assert (forall ((arg0@@365 T@U) (arg1@@179 T@U) ) (! (= (type (BucketsLib.__default.JoinBucketList arg0@@365 arg1@@179)) DatatypeTypeType) :qid |funType:BucketsLib.__default.JoinBucketList| :pattern ( (BucketsLib.__default.JoinBucketList arg0@@365 arg1@@179)) )))
(assert (forall (($ly@@23 T@U) (|buckets#0| T@U) ) (!  (=> (and (= (type $ly@@23) LayerTypeType) (= (type |buckets#0|) (SeqType BoxType))) (= (BucketsLib.__default.JoinBucketList ($LS $ly@@23) |buckets#0|) (BucketsLib.__default.JoinBucketList $ly@@23 |buckets#0|))) :qid |BucketsL.590:12| :skolemid |1526| :pattern ( (BucketsLib.__default.JoinBucketList ($LS $ly@@23) |buckets#0|)) )))
(assert (forall (($ly@@24 T@U) (|buckets#0@@0| T@U) ) (!  (=> (and (= (type $ly@@24) LayerTypeType) (= (type |buckets#0@@0|) (SeqType BoxType))) (= (BucketsLib.__default.JoinBucketList $ly@@24 |buckets#0@@0|) (BucketsLib.__default.JoinBucketList $LZ |buckets#0@@0|))) :qid |BucketsL.590:12| :skolemid |1527| :pattern ( (BucketsLib.__default.JoinBucketList (AsFuelBottom $ly@@24) |buckets#0@@0|)) )))
(assert  (=> (<= 51 $FunctionContextHeight) (forall (($ly@@25 T@U) (|buckets#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@25) LayerTypeType) (= (type |buckets#0@@1|) (SeqType BoxType))) (or (|BucketsLib.__default.JoinBucketList#canCall| |buckets#0@@1|) (and (not (= 51 $FunctionContextHeight)) ($Is |buckets#0@@1| (TSeq Tclass.BucketsLib.Bucket))))) (and (and (and (BucketsLib.__default.PreWFBucket (BucketsLib.__default.JoinBucketList $ly@@25 |buckets#0@@1|)) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.JoinBucketList $ly@@25 |buckets#0@@1|))) (=> (forall ((|i#0@@27| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| (|Seq#Length| |buckets#0@@1|))) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@1| |i#0@@27|))))) :qid |BucketsL.593:21| :skolemid |1528| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@1| |i#0@@27|))) )) (BucketsLib.__default.WFBucket (BucketsLib.__default.JoinBucketList $ly@@25 |buckets#0@@1|)))) ($Is (BucketsLib.__default.JoinBucketList $ly@@25 |buckets#0@@1|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.590:12| :skolemid |1529| :pattern ( (BucketsLib.__default.JoinBucketList $ly@@25 |buckets#0@@1|)) ))))
(assert (forall (($ly@@26 T@U) (|buckets#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@26) LayerTypeType) (= (type |buckets#0@@2|) (SeqType BoxType))) ($Is |buckets#0@@2| (TSeq Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.JoinBucketList#requires| $ly@@26 |buckets#0@@2|) true) (=> true (|BucketsLib.__default.JoinBucketList#requires| $ly@@26 |buckets#0@@2|)))) :qid |BucketsL.590:12| :skolemid |1530| :pattern ( (|BucketsLib.__default.JoinBucketList#requires| $ly@@26 |buckets#0@@2|)) )))
(assert  (and (forall ((arg0@@366 T@U) (arg1@@180 T@U) (arg2@@122 T@U) (arg3@@92 T@U) (arg4@@79 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@366 arg1@@180 arg2@@122 arg3@@92 arg4@@79)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@366 arg1@@180 arg2@@122 arg3@@92 arg4@@79)) )) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)))
(assert  (=> (<= 51 $FunctionContextHeight) (forall (($ly@@27 T@U) (|buckets#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@27) LayerTypeType) (= (type |buckets#0@@3|) (SeqType BoxType))) (or (|BucketsLib.__default.JoinBucketList#canCall| |buckets#0@@3|) (and (not (= 51 $FunctionContextHeight)) ($Is |buckets#0@@3| (TSeq Tclass.BucketsLib.Bucket))))) (and (and (=> (= (|Seq#Length| |buckets#0@@3|) (LitInt 0)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (=> (not (= (|Seq#Length| |buckets#0@@3|) (LitInt 0))) (and (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket |buckets#0@@3|) (|BucketsLib.__default.JoinBucketList#canCall| (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|))) (BucketsLib.Bucket.BucketMapWithSeq_q (BucketsLib.__default.JoinBucketList $ly@@27 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|)))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket |buckets#0@@3|) (BucketsLib.Bucket.BucketMapWithSeq_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@3|))))) (|Maps.__default.MapUnion#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BucketsLib.Bucket.b (BucketsLib.__default.JoinBucketList $ly@@27 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|))) (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@3|))))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapUnion Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnion (BucketsLib.Bucket.b (BucketsLib.__default.JoinBucketList $ly@@27 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|))) (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@3|)))))))) (= (BucketsLib.__default.JoinBucketList ($LS $ly@@27) |buckets#0@@3|) (ite (= (|Seq#Length| |buckets#0@@3|) (LitInt 0)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapUnion Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnion (BucketsLib.Bucket.b (BucketsLib.__default.JoinBucketList $ly@@27 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@3|))) (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@3|))))))))) :qid |BucketsL.590:12| :skolemid |1531| :pattern ( (BucketsLib.__default.JoinBucketList ($LS $ly@@27) |buckets#0@@3|)) ))))
(assert  (=> (<= 51 $FunctionContextHeight) (forall (($ly@@28 T@U) (|buckets#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@28) LayerTypeType) (= (type |buckets#0@@4|) (SeqType BoxType))) (or (|BucketsLib.__default.JoinBucketList#canCall| (Lit |buckets#0@@4|)) (and (not (= 51 $FunctionContextHeight)) ($Is |buckets#0@@4| (TSeq Tclass.BucketsLib.Bucket))))) (and (and (=> (= (|Seq#Length| (Lit |buckets#0@@4|)) (LitInt 0)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (=> (not (= (|Seq#Length| (Lit |buckets#0@@4|)) (LitInt 0))) (and (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|)) (|BucketsLib.__default.JoinBucketList#canCall| (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit (BucketsLib.__default.JoinBucketList ($LS $ly@@28) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (|Maps.__default.MapUnion#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.b (Lit (BucketsLib.__default.JoinBucketList ($LS $ly@@28) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (Lit (BucketsLib.Bucket.b (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|)))))))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapUnion Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnion (Lit (BucketsLib.Bucket.b (Lit (BucketsLib.__default.JoinBucketList ($LS $ly@@28) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (Lit (BucketsLib.Bucket.b (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))))))) (= (BucketsLib.__default.JoinBucketList ($LS $ly@@28) (Lit |buckets#0@@4|)) (ite (= (|Seq#Length| (Lit |buckets#0@@4|)) (LitInt 0)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapUnion Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnion (Lit (BucketsLib.Bucket.b (Lit (BucketsLib.__default.JoinBucketList ($LS $ly@@28) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|))))))) (Lit (BucketsLib.Bucket.b (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@4|)))))))))))) :qid |BucketsL.590:12| :weight 3 :skolemid |1532| :pattern ( (BucketsLib.__default.JoinBucketList ($LS $ly@@28) (Lit |buckets#0@@4|))) ))))
(assert (forall ((arg0@@367 T@U) (arg1@@181 T@U) (arg2@@123 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketOnPivots arg0@@367 arg1@@181 arg2@@123)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketOnPivots| :pattern ( (BucketsLib.__default.SplitBucketOnPivots arg0@@367 arg1@@181 arg2@@123)) )))
(assert (forall (($ly@@29 T@U) (|bucket#0@@31| T@U) (|pivots#0@@33| T@U) ) (!  (=> (and (and (= (type $ly@@29) LayerTypeType) (= (type |bucket#0@@31|) DatatypeTypeType)) (= (type |pivots#0@@33|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@29) |bucket#0@@31| |pivots#0@@33|) (BucketsLib.__default.SplitBucketOnPivots $ly@@29 |bucket#0@@31| |pivots#0@@33|))) :qid |BucketsL.598:12| :skolemid |1546| :pattern ( (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@29) |bucket#0@@31| |pivots#0@@33|)) )))
(assert (forall (($ly@@30 T@U) (|bucket#0@@32| T@U) (|pivots#0@@34| T@U) ) (!  (=> (and (and (= (type $ly@@30) LayerTypeType) (= (type |bucket#0@@32|) DatatypeTypeType)) (= (type |pivots#0@@34|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketOnPivots $ly@@30 |bucket#0@@32| |pivots#0@@34|) (BucketsLib.__default.SplitBucketOnPivots $LZ |bucket#0@@32| |pivots#0@@34|))) :qid |BucketsL.598:12| :skolemid |1547| :pattern ( (BucketsLib.__default.SplitBucketOnPivots (AsFuelBottom $ly@@30) |bucket#0@@32| |pivots#0@@34|)) )))
(assert  (=> (<= 52 $FunctionContextHeight) (forall (($ly@@31 T@U) (|bucket#0@@33| T@U) (|pivots#0@@35| T@U) ) (!  (=> (and (and (and (= (type $ly@@31) LayerTypeType) (= (type |bucket#0@@33|) DatatypeTypeType)) (= (type |pivots#0@@35|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketOnPivots#canCall| |bucket#0@@33| |pivots#0@@35|) (and (not (= 52 $FunctionContextHeight)) (and ($Is |bucket#0@@33| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@35| (TSeq Tclass.KeyType.Key)))))) (and (and (and (and (and (and (and (= (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|)) (+ (|Seq#Length| |pivots#0@@35|) 1)) (forall ((|i#0@@28| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|)))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#0@@28|)))) :qid |BucketsL.600:20| :skolemid |1548| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#0@@28|))) ))) (BucketsLib.__default.BucketListWellMarshalled (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|))) (forall ((|i#1@@13| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@13|) (< |i#1@@13| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|)))) (|Set#Subset| (|Map#Domain| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#1@@13|)))) (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@33|)))) :qid |BucketsL.602:20| :skolemid |1549| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#1@@13|))) ))) (forall ((|i#2| Int) ) (!  (=> (and (<= (LitInt 0) |i#2|) (< |i#2| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|)))) (|Set#Subset| (|Map#Values| (BucketsLib.Bucket.b ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#2|)))) (|Map#Values| (BucketsLib.Bucket.b |bucket#0@@33|)))) :qid |BucketsL.603:20| :skolemid |1550| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#2|))) ))) (forall ((|i#3| Int) ) (!  (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|)))) (= (|Seq#Length| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#3|)))) (|Seq#Length| (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#3|)))))) :qid |BucketsL.604:20| :skolemid |1551| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#3|))) ))) (=> (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@33|)) (forall ((|i#4| Int) ) (!  (=> (and (<= (LitInt 0) |i#4|) (< |i#4| (|Seq#Length| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#4|)))) :qid |BucketsL.605:46| :skolemid |1552| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) |i#4|))) )))) ($Is (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.598:12| :skolemid |1553| :pattern ( (BucketsLib.__default.SplitBucketOnPivots $ly@@31 |bucket#0@@33| |pivots#0@@35|)) ))))
(assert (forall (($ly@@32 T@U) (|bucket#0@@34| T@U) (|pivots#0@@36| T@U) ) (!  (=> (and (and (and (= (type $ly@@32) LayerTypeType) (= (type |bucket#0@@34|) DatatypeTypeType)) (= (type |pivots#0@@36|) (SeqType BoxType))) (and ($Is |bucket#0@@34| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@36| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.SplitBucketOnPivots#requires| $ly@@32 |bucket#0@@34| |pivots#0@@36|) true) (=> true (|BucketsLib.__default.SplitBucketOnPivots#requires| $ly@@32 |bucket#0@@34| |pivots#0@@36|)))) :qid |BucketsL.598:12| :skolemid |1554| :pattern ( (|BucketsLib.__default.SplitBucketOnPivots#requires| $ly@@32 |bucket#0@@34| |pivots#0@@36|)) )))
(assert  (and (and (forall ((arg0@@368 T@U) (arg1@@182 T@U) (arg2@@124 T@U) ) (! (= (type (|lambda#101| arg0@@368 arg1@@182 arg2@@124)) (MapType0Type BoxType boolType)) :qid |funType:lambda#101| :pattern ( (|lambda#101| arg0@@368 arg1@@182 arg2@@124)) )) (forall ((arg0@@369 T@U) ) (! (= (type (|lambda#102| arg0@@369)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#102| :pattern ( (|lambda#102| arg0@@369)) ))) (forall ((arg0@@370 T@U) (arg1@@183 T@U) (arg2@@125 T@U) ) (! (= (type (|lambda#103| arg0@@370 arg1@@183 arg2@@125)) (MapType0Type BoxType boolType)) :qid |funType:lambda#103| :pattern ( (|lambda#103| arg0@@370 arg1@@183 arg2@@125)) ))))
(assert  (=> (<= 52 $FunctionContextHeight) (forall (($ly@@33 T@U) (|bucket#0@@35| T@U) (|pivots#0@@37| T@U) ) (!  (=> (and (and (and (= (type $ly@@33) LayerTypeType) (= (type |bucket#0@@35|) DatatypeTypeType)) (= (type |pivots#0@@37|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketOnPivots#canCall| |bucket#0@@35| |pivots#0@@37|) (and (not (= 52 $FunctionContextHeight)) (and ($Is |bucket#0@@35| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@37| (TSeq Tclass.KeyType.Key)))))) (and (and (=> (= (|Seq#Length| |pivots#0@@37|) (LitInt 0)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|) (|BucketsLib.__default.B#canCall| (BucketsLib.Bucket.b |bucket#0@@35|)))) (=> (not (= (|Seq#Length| |pivots#0@@37|) (LitInt 0))) (and (and (forall ((|key#0@@29| T@U) ) (!  (=> (and (= (type |key#0@@29|) (SeqType BoxType)) ($Is |key#0@@29| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#0@@29|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key |pivots#0@@37|) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@29| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|)))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#0@@29|))) (Lexicographic__Byte__Order.__default.lt |key#0@@29| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|)))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|)))) :qid |BucketsL.611:22| :skolemid |1555| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#0@@29|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@29| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#0@@29|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (let ((|l#0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (forall ((|key#1@@5| T@U) ) (!  (=> (and (= (type |key#1@@5|) (SeqType BoxType)) ($Is |key#1@@5| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#1@@5|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key |pivots#0@@37|) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|)) |key#1@@5|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#1@@5|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|)) |key#1@@5|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@35|)))) :qid |BucketsL.612:22| :skolemid |1556| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#1@@5|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|)) |key#1@@5|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Box |key#1@@5|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key |pivots#0@@37|) (|BucketsLib.__default.SplitBucketOnPivots#canCall| |l#0| (Sequences.__default.DropLast Tclass.KeyType.Key |pivots#0@@37|)))))))) (= (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@33) |bucket#0@@35| |pivots#0@@37|) (ite (= (|Seq#Length| |pivots#0@@37|) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (BucketsLib.Bucket.b |bucket#0@@35|)))) (let ((|l#0@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (let ((|r#0@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@35|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@37|))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@35|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (|Seq#Append| (BucketsLib.__default.SplitBucketOnPivots $ly@@33 |l#0@@0| (Sequences.__default.DropLast Tclass.KeyType.Key |pivots#0@@37|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |r#0@@0|))))))))) :qid |BucketsL.598:12| :skolemid |1557| :pattern ( (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@33) |bucket#0@@35| |pivots#0@@37|)) ))))
(assert  (=> (<= 52 $FunctionContextHeight) (forall (($ly@@34 T@U) (|bucket#0@@36| T@U) (|pivots#0@@38| T@U) ) (!  (=> (and (and (and (= (type $ly@@34) LayerTypeType) (= (type |bucket#0@@36|) DatatypeTypeType)) (= (type |pivots#0@@38|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketOnPivots#canCall| |bucket#0@@36| (Lit |pivots#0@@38|)) (and (not (= 52 $FunctionContextHeight)) (and ($Is |bucket#0@@36| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@38| (TSeq Tclass.KeyType.Key)))))) (and (and (=> (= (|Seq#Length| (Lit |pivots#0@@38|)) (LitInt 0)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|) (|BucketsLib.__default.B#canCall| (BucketsLib.Bucket.b |bucket#0@@36|)))) (=> (not (= (|Seq#Length| (Lit |pivots#0@@38|)) (LitInt 0))) (and (and (forall ((|key#0@@30| T@U) ) (!  (=> (and (= (type |key#0@@30|) (SeqType BoxType)) ($Is |key#0@@30| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#0@@30|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |pivots#0@@38|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@30| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@38|)))))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#0@@30|))) (Lexicographic__Byte__Order.__default.lt |key#0@@30| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@38|)))))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|)))) :qid |BucketsL.611:22| :skolemid |1558| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#0@@30|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@30| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@38|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#0@@30|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@38|))))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (let ((|l#1| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@38|))))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (forall ((|key#1@@6| T@U) ) (!  (=> (and (= (type |key#1@@6|) (SeqType BoxType)) ($Is |key#1@@6| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#1@@6|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |pivots#0@@38|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@38|)))) |key#1@@6|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#1@@6|))) (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@38|)))) |key#1@@6|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@36|)))) :qid |BucketsL.612:22| :skolemid |1559| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#1@@6|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@38|)) |key#1@@6|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) ($Box |key#1@@6|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@38|))))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (Lit |pivots#0@@38|)) (|BucketsLib.__default.SplitBucketOnPivots#canCall| |l#1| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |pivots#0@@38|)))))))))) (= (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@34) |bucket#0@@36| (Lit |pivots#0@@38|)) (ite (= (|Seq#Length| (Lit |pivots#0@@38|)) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (BucketsLib.Bucket.b |bucket#0@@36|)))) (let ((|l#1@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@38|))))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (let ((|r#1@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@36|)) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@38|))))) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@36|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (|Seq#Append| (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@34) |l#1@@0| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |pivots#0@@38|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |r#1@@0|))))))))) :qid |BucketsL.598:12| :weight 3 :skolemid |1560| :pattern ( (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@34) |bucket#0@@36| (Lit |pivots#0@@38|))) ))))
(assert  (=> (<= 52 $FunctionContextHeight) (forall (($ly@@35 T@U) (|bucket#0@@37| T@U) (|pivots#0@@39| T@U) ) (!  (=> (and (and (and (= (type $ly@@35) LayerTypeType) (= (type |bucket#0@@37|) DatatypeTypeType)) (= (type |pivots#0@@39|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketOnPivots#canCall| (Lit |bucket#0@@37|) (Lit |pivots#0@@39|)) (and (not (= 52 $FunctionContextHeight)) (and ($Is |bucket#0@@37| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@39| (TSeq Tclass.KeyType.Key)))))) (and (and (=> (= (|Seq#Length| (Lit |pivots#0@@39|)) (LitInt 0)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|)) (|BucketsLib.__default.B#canCall| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|)))))) (=> (not (= (|Seq#Length| (Lit |pivots#0@@39|)) (LitInt 0))) (and (and (forall ((|key#0@@31| T@U) ) (!  (=> (and (= (type |key#0@@31|) (SeqType BoxType)) ($Is |key#0@@31| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) ($Box |key#0@@31|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |pivots#0@@39|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@31| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@39|)))))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) ($Box |key#0@@31|))) (Lexicographic__Byte__Order.__default.lt |key#0@@31| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@39|)))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|))))) :qid |BucketsL.611:22| :skolemid |1561| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@37|)) ($Box |key#0@@31|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@31| ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@39|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@37|)) ($Box |key#0@@31|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@39|))))) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (let ((|l#2| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@39|))))) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (and (forall ((|key#1@@7| T@U) ) (!  (=> (and (= (type |key#1@@7|) (SeqType BoxType)) ($Is |key#1@@7| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) ($Box |key#1@@7|))) (and (|Sequences.__default.Last#canCall| Tclass.KeyType.Key (Lit |pivots#0@@39|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@39|)))) |key#1@@7|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) ($Box |key#1@@7|))) (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@39|)))) |key#1@@7|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@37|))))) :qid |BucketsL.612:22| :skolemid |1562| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@37|)) ($Box |key#1@@7|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key |pivots#0@@39|)) |key#1@@7|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@37|)) ($Box |key#1@@7|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@39|))))) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (Lit |pivots#0@@39|)) (|BucketsLib.__default.SplitBucketOnPivots#canCall| |l#2| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |pivots#0@@39|)))))))))) (= (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@35) (Lit |bucket#0@@37|) (Lit |pivots#0@@39|)) (ite (= (|Seq#Length| (Lit |pivots#0@@39|)) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|)))))) (let ((|l#2@@0| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@39|))))) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (let ((|r#2| (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@37|))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last Tclass.KeyType.Key (Lit |pivots#0@@39|))))) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@37|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (|Seq#Append| (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@35) |l#2@@0| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit |pivots#0@@39|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |r#2|))))))))) :qid |BucketsL.598:12| :weight 3 :skolemid |1563| :pattern ( (BucketsLib.__default.SplitBucketOnPivots ($LS $ly@@35) (Lit |bucket#0@@37|) (Lit |pivots#0@@39|))) ))))
(assert (forall ((arg0@@371 T@U) (arg1@@184 T@U) (arg2@@126 Int) ) (! (= (type (BucketsLib.__default.ClampToSlot arg0@@371 arg1@@184 arg2@@126)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ClampToSlot| :pattern ( (BucketsLib.__default.ClampToSlot arg0@@371 arg1@@184 arg2@@126)) )))
(assert  (=> (<= 46 $FunctionContextHeight) (forall ((|bucket#0@@38| T@U) (|pivots#0@@40| T@U) (|i#0@@29| Int) ) (!  (=> (and (and (= (type |bucket#0@@38|) DatatypeTypeType) (= (type |pivots#0@@40|) (SeqType BoxType))) (or (|BucketsLib.__default.ClampToSlot#canCall| |bucket#0@@38| |pivots#0@@40| |i#0@@29|) (and (not (= 46 $FunctionContextHeight)) (and (and ($Is |bucket#0@@38| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@40| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@40|))))) ($Is (BucketsLib.__default.ClampToSlot |bucket#0@@38| |pivots#0@@40| |i#0@@29|) Tclass.BucketsLib.Bucket)) :qid |BucketsL.618:24| :skolemid |1588| :pattern ( (BucketsLib.__default.ClampToSlot |bucket#0@@38| |pivots#0@@40| |i#0@@29|)) ))))
(assert (forall ((|bucket#0@@39| T@U) (|pivots#0@@41| T@U) (|i#0@@30| Int) ) (!  (=> (and (and (= (type |bucket#0@@39|) DatatypeTypeType) (= (type |pivots#0@@41|) (SeqType BoxType))) (and ($Is |bucket#0@@39| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@41| (TSeq Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.ClampToSlot#requires| |bucket#0@@39| |pivots#0@@41| |i#0@@30|) (PivotsLib.__default.WFPivots |pivots#0@@41|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@41|) (|BucketsLib.__default.ClampToSlot#requires| |bucket#0@@39| |pivots#0@@41| |i#0@@30|)))) :qid |BucketsL.618:24| :skolemid |1589| :pattern ( (|BucketsLib.__default.ClampToSlot#requires| |bucket#0@@39| |pivots#0@@41| |i#0@@30|)) )))
(assert (forall ((arg0@@372 T@U) (arg1@@185 T@U) (arg2@@127 T@U) (arg3@@93 Int) ) (! (= (type (|lambda#153| arg0@@372 arg1@@185 arg2@@127 arg3@@93)) (MapType0Type BoxType boolType)) :qid |funType:lambda#153| :pattern ( (|lambda#153| arg0@@372 arg1@@185 arg2@@127 arg3@@93)) )))
(assert  (=> (<= 46 $FunctionContextHeight) (forall ((|bucket#0@@40| T@U) (|pivots#0@@42| T@U) (|i#0@@31| Int) ) (!  (=> (and (and (= (type |bucket#0@@40|) DatatypeTypeType) (= (type |pivots#0@@42|) (SeqType BoxType))) (or (|BucketsLib.__default.ClampToSlot#canCall| |bucket#0@@40| |pivots#0@@42| |i#0@@31|) (and (not (= 46 $FunctionContextHeight)) (and (and ($Is |bucket#0@@40| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@42| (TSeq Tclass.KeyType.Key))) (PivotsLib.__default.WFPivots |pivots#0@@42|))))) (and (and (forall ((|key#0@@32| T@U) ) (!  (=> (and (= (type |key#0@@32|) (SeqType BoxType)) ($Is |key#0@@32| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@40|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) ($Box |key#0@@32|))) (|PivotsLib.__default.Route#canCall| |pivots#0@@42| |key#0@@32|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) ($Box |key#0@@32|))) (= (PivotsLib.__default.Route |pivots#0@@42| |key#0@@32|) |i#0@@31|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@40|)))) :qid |BucketsL.621:11| :skolemid |1590| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@40|)) ($Box |key#0@@32|)))) :pattern ( (PivotsLib.__default.Route |pivots#0@@42| |key#0@@32|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) ($Box |key#0@@32|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#153| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) |pivots#0@@42| |i#0@@31|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@40|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampToSlot |bucket#0@@40| |pivots#0@@42| |i#0@@31|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#153| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@40|)) |pivots#0@@42| |i#0@@31|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@40|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.618:24| :skolemid |1591| :pattern ( (BucketsLib.__default.ClampToSlot |bucket#0@@40| |pivots#0@@42| |i#0@@31|)) ))))
(assert  (=> (<= 46 $FunctionContextHeight) (forall ((|bucket#0@@41| T@U) (|pivots#0@@43| T@U) (|i#0@@32| Int) ) (!  (=> (and (and (= (type |bucket#0@@41|) DatatypeTypeType) (= (type |pivots#0@@43|) (SeqType BoxType))) (or (|BucketsLib.__default.ClampToSlot#canCall| (Lit |bucket#0@@41|) (Lit |pivots#0@@43|) (LitInt |i#0@@32|)) (and (not (= 46 $FunctionContextHeight)) (and (and ($Is |bucket#0@@41| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@43| (TSeq Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@43|))))))))) (and (and (forall ((|key#0@@33| T@U) ) (!  (=> (and (= (type |key#0@@33|) (SeqType BoxType)) ($Is |key#0@@33| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@41|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@41|))) ($Box |key#0@@33|))) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@43|) |key#0@@33|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@41|))) ($Box |key#0@@33|))) (= (PivotsLib.__default.Route (Lit |pivots#0@@43|) |key#0@@33|) (LitInt |i#0@@32|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@41|))))) :qid |BucketsL.621:11| :skolemid |1592| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@41|)) ($Box |key#0@@33|)))) :pattern ( (PivotsLib.__default.Route |pivots#0@@43| |key#0@@33|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@41|)) ($Box |key#0@@33|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#153| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@41|))) (Lit |pivots#0@@43|) (LitInt |i#0@@32|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@41|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampToSlot (Lit |bucket#0@@41|) (Lit |pivots#0@@43|) (LitInt |i#0@@32|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#153| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@41|))) (Lit |pivots#0@@43|) (LitInt |i#0@@32|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@41|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.618:24| :weight 3 :skolemid |1593| :pattern ( (BucketsLib.__default.ClampToSlot (Lit |bucket#0@@41|) (Lit |pivots#0@@43|) (LitInt |i#0@@32|))) ))))
(assert (forall ((arg0@@373 T@U) (arg1@@186 T@U) (arg2@@128 T@U) ) (! (= (type (BucketsLib.__default.BucketIntersect arg0@@373 arg1@@186 arg2@@128)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketIntersect| :pattern ( (BucketsLib.__default.BucketIntersect arg0@@373 arg1@@186 arg2@@128)) )))
(assert (forall (($ly@@36 T@U) (|bucket#0@@42| T@U) (|keys#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@36) LayerTypeType) (= (type |bucket#0@@42|) DatatypeTypeType)) (= (type |keys#0@@9|) (MapType0Type BoxType boolType))) (= (BucketsLib.__default.BucketIntersect ($LS $ly@@36) |bucket#0@@42| |keys#0@@9|) (BucketsLib.__default.BucketIntersect $ly@@36 |bucket#0@@42| |keys#0@@9|))) :qid |BucketsL.624:22| :skolemid |1598| :pattern ( (BucketsLib.__default.BucketIntersect ($LS $ly@@36) |bucket#0@@42| |keys#0@@9|)) )))
(assert (forall (($ly@@37 T@U) (|bucket#0@@43| T@U) (|keys#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@37) LayerTypeType) (= (type |bucket#0@@43|) DatatypeTypeType)) (= (type |keys#0@@10|) (MapType0Type BoxType boolType))) (= (BucketsLib.__default.BucketIntersect $ly@@37 |bucket#0@@43| |keys#0@@10|) (BucketsLib.__default.BucketIntersect $LZ |bucket#0@@43| |keys#0@@10|))) :qid |BucketsL.624:22| :skolemid |1599| :pattern ( (BucketsLib.__default.BucketIntersect (AsFuelBottom $ly@@37) |bucket#0@@43| |keys#0@@10|)) )))
(assert  (=> (<= 53 $FunctionContextHeight) (forall (($ly@@38 T@U) (|bucket#0@@44| T@U) (|keys#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@38) LayerTypeType) (= (type |bucket#0@@44|) DatatypeTypeType)) (= (type |keys#0@@11|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketIntersect#canCall| |bucket#0@@44| |keys#0@@11|) (and (not (= 53 $FunctionContextHeight)) (and ($Is |bucket#0@@44| Tclass.BucketsLib.Bucket) ($Is |keys#0@@11| (TSet Tclass.KeyType.Key)))))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.BucketIntersect $ly@@38 |bucket#0@@44| |keys#0@@11|)) ($Is (BucketsLib.__default.BucketIntersect $ly@@38 |bucket#0@@44| |keys#0@@11|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.624:22| :skolemid |1600| :pattern ( (BucketsLib.__default.BucketIntersect $ly@@38 |bucket#0@@44| |keys#0@@11|)) ))))
(assert (forall (($ly@@39 T@U) (|bucket#0@@45| T@U) (|keys#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@39) LayerTypeType) (= (type |bucket#0@@45|) DatatypeTypeType)) (= (type |keys#0@@12|) (MapType0Type BoxType boolType))) (and ($Is |bucket#0@@45| Tclass.BucketsLib.Bucket) ($Is |keys#0@@12| (TSet Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketIntersect#requires| $ly@@39 |bucket#0@@45| |keys#0@@12|) true) (=> true (|BucketsLib.__default.BucketIntersect#requires| $ly@@39 |bucket#0@@45| |keys#0@@12|)))) :qid |BucketsL.624:22| :skolemid |1601| :pattern ( (|BucketsLib.__default.BucketIntersect#requires| $ly@@39 |bucket#0@@45| |keys#0@@12|)) )))
(assert (forall ((arg0@@374 T@U) (arg1@@187 T@U) (arg2@@129 T@U) ) (! (= (type (|lambda#173| arg0@@374 arg1@@187 arg2@@129)) (MapType0Type BoxType boolType)) :qid |funType:lambda#173| :pattern ( (|lambda#173| arg0@@374 arg1@@187 arg2@@129)) )))
(assert  (=> (<= 53 $FunctionContextHeight) (forall (($ly@@40 T@U) (|bucket#0@@46| T@U) (|keys#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@40) LayerTypeType) (= (type |bucket#0@@46|) DatatypeTypeType)) (= (type |keys#0@@13|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketIntersect#canCall| |bucket#0@@46| |keys#0@@13|) (and (not (= 53 $FunctionContextHeight)) (and ($Is |bucket#0@@46| Tclass.BucketsLib.Bucket) ($Is |keys#0@@13| (TSet Tclass.KeyType.Key)))))) (and (and (forall ((|key#0@@34| T@U) ) (!  (=> (and (= (type |key#0@@34|) (SeqType BoxType)) ($Is |key#0@@34| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@46|) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@46|)) ($Box |key#0@@34|))) (U_2_bool (MapType0Select |keys#0@@13| ($Box |key#0@@34|)))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@46|)))) :qid |BucketsL.627:11| :skolemid |1602| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@46|)) ($Box |key#0@@34|)))) :pattern ( (MapType0Select |keys#0@@13| ($Box |key#0@@34|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@46|)) ($Box |key#0@@34|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#173| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@46|)) |keys#0@@13|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@46|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketIntersect ($LS $ly@@40) |bucket#0@@46| |keys#0@@13|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#173| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@46|)) |keys#0@@13|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@46|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.624:22| :skolemid |1603| :pattern ( (BucketsLib.__default.BucketIntersect ($LS $ly@@40) |bucket#0@@46| |keys#0@@13|)) ))))
(assert  (=> (<= 53 $FunctionContextHeight) (forall (($ly@@41 T@U) (|bucket#0@@47| T@U) (|keys#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@41) LayerTypeType) (= (type |bucket#0@@47|) DatatypeTypeType)) (= (type |keys#0@@14|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketIntersect#canCall| (Lit |bucket#0@@47|) (Lit |keys#0@@14|)) (and (not (= 53 $FunctionContextHeight)) (and ($Is |bucket#0@@47| Tclass.BucketsLib.Bucket) ($Is |keys#0@@14| (TSet Tclass.KeyType.Key)))))) (and (and (forall ((|key#0@@35| T@U) ) (!  (=> (and (= (type |key#0@@35|) (SeqType BoxType)) ($Is |key#0@@35| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@47|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@47|))) ($Box |key#0@@35|))) (U_2_bool (MapType0Select (Lit |keys#0@@14|) ($Box |key#0@@35|)))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@47|))))) :qid |BucketsL.627:11| :skolemid |1604| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@47|)) ($Box |key#0@@35|)))) :pattern ( (MapType0Select |keys#0@@14| ($Box |key#0@@35|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@47|)) ($Box |key#0@@35|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#173| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@47|))) (Lit |keys#0@@14|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@47|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketIntersect ($LS $ly@@41) (Lit |bucket#0@@47|) (Lit |keys#0@@14|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#173| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@47|))) (Lit |keys#0@@14|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@47|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.624:22| :weight 3 :skolemid |1605| :pattern ( (BucketsLib.__default.BucketIntersect ($LS $ly@@41) (Lit |bucket#0@@47|) (Lit |keys#0@@14|))) ))))
(assert (forall ((arg0@@375 T@U) (arg1@@188 T@U) (arg2@@130 T@U) ) (! (= (type (BucketsLib.__default.BucketComplement arg0@@375 arg1@@188 arg2@@130)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketComplement| :pattern ( (BucketsLib.__default.BucketComplement arg0@@375 arg1@@188 arg2@@130)) )))
(assert (forall (($ly@@42 T@U) (|bucket#0@@48| T@U) (|keys#0@@15| T@U) ) (!  (=> (and (and (= (type $ly@@42) LayerTypeType) (= (type |bucket#0@@48|) DatatypeTypeType)) (= (type |keys#0@@15|) (MapType0Type BoxType boolType))) (= (BucketsLib.__default.BucketComplement ($LS $ly@@42) |bucket#0@@48| |keys#0@@15|) (BucketsLib.__default.BucketComplement $ly@@42 |bucket#0@@48| |keys#0@@15|))) :qid |BucketsL.630:22| :skolemid |1608| :pattern ( (BucketsLib.__default.BucketComplement ($LS $ly@@42) |bucket#0@@48| |keys#0@@15|)) )))
(assert (forall (($ly@@43 T@U) (|bucket#0@@49| T@U) (|keys#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@43) LayerTypeType) (= (type |bucket#0@@49|) DatatypeTypeType)) (= (type |keys#0@@16|) (MapType0Type BoxType boolType))) (= (BucketsLib.__default.BucketComplement $ly@@43 |bucket#0@@49| |keys#0@@16|) (BucketsLib.__default.BucketComplement $LZ |bucket#0@@49| |keys#0@@16|))) :qid |BucketsL.630:22| :skolemid |1609| :pattern ( (BucketsLib.__default.BucketComplement (AsFuelBottom $ly@@43) |bucket#0@@49| |keys#0@@16|)) )))
(assert  (=> (<= 54 $FunctionContextHeight) (forall (($ly@@44 T@U) (|bucket#0@@50| T@U) (|keys#0@@17| T@U) ) (!  (=> (and (and (and (= (type $ly@@44) LayerTypeType) (= (type |bucket#0@@50|) DatatypeTypeType)) (= (type |keys#0@@17|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketComplement#canCall| |bucket#0@@50| |keys#0@@17|) (and (not (= 54 $FunctionContextHeight)) (and ($Is |bucket#0@@50| Tclass.BucketsLib.Bucket) ($Is |keys#0@@17| (TSet Tclass.KeyType.Key)))))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.BucketComplement $ly@@44 |bucket#0@@50| |keys#0@@17|)) ($Is (BucketsLib.__default.BucketComplement $ly@@44 |bucket#0@@50| |keys#0@@17|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.630:22| :skolemid |1610| :pattern ( (BucketsLib.__default.BucketComplement $ly@@44 |bucket#0@@50| |keys#0@@17|)) ))))
(assert (forall (($ly@@45 T@U) (|bucket#0@@51| T@U) (|keys#0@@18| T@U) ) (!  (=> (and (and (and (= (type $ly@@45) LayerTypeType) (= (type |bucket#0@@51|) DatatypeTypeType)) (= (type |keys#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |bucket#0@@51| Tclass.BucketsLib.Bucket) ($Is |keys#0@@18| (TSet Tclass.KeyType.Key)))) (and (=> (|BucketsLib.__default.BucketComplement#requires| $ly@@45 |bucket#0@@51| |keys#0@@18|) true) (=> true (|BucketsLib.__default.BucketComplement#requires| $ly@@45 |bucket#0@@51| |keys#0@@18|)))) :qid |BucketsL.630:22| :skolemid |1611| :pattern ( (|BucketsLib.__default.BucketComplement#requires| $ly@@45 |bucket#0@@51| |keys#0@@18|)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@189 T@U) (arg2@@131 T@U) ) (! (= (type (|lambda#193| arg0@@376 arg1@@189 arg2@@131)) (MapType0Type BoxType boolType)) :qid |funType:lambda#193| :pattern ( (|lambda#193| arg0@@376 arg1@@189 arg2@@131)) )))
(assert  (=> (<= 54 $FunctionContextHeight) (forall (($ly@@46 T@U) (|bucket#0@@52| T@U) (|keys#0@@19| T@U) ) (!  (=> (and (and (and (= (type $ly@@46) LayerTypeType) (= (type |bucket#0@@52|) DatatypeTypeType)) (= (type |keys#0@@19|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketComplement#canCall| |bucket#0@@52| |keys#0@@19|) (and (not (= 54 $FunctionContextHeight)) (and ($Is |bucket#0@@52| Tclass.BucketsLib.Bucket) ($Is |keys#0@@19| (TSet Tclass.KeyType.Key)))))) (and (and (forall ((|key#0@@36| T@U) ) (!  (=> (and (= (type |key#0@@36|) (SeqType BoxType)) ($Is |key#0@@36| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@52|) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@52|)) ($Box |key#0@@36|))) (not (U_2_bool (MapType0Select |keys#0@@19| ($Box |key#0@@36|))))) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@52|)))) :qid |BucketsL.633:11| :skolemid |1612| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@52|)) ($Box |key#0@@36|)))) :pattern ( (MapType0Select |keys#0@@19| ($Box |key#0@@36|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@52|)) ($Box |key#0@@36|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#193| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@52|)) |keys#0@@19|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@52|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketComplement ($LS $ly@@46) |bucket#0@@52| |keys#0@@19|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#193| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@52|)) |keys#0@@19|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@52|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.630:22| :skolemid |1613| :pattern ( (BucketsLib.__default.BucketComplement ($LS $ly@@46) |bucket#0@@52| |keys#0@@19|)) ))))
(assert  (=> (<= 54 $FunctionContextHeight) (forall (($ly@@47 T@U) (|bucket#0@@53| T@U) (|keys#0@@20| T@U) ) (!  (=> (and (and (and (= (type $ly@@47) LayerTypeType) (= (type |bucket#0@@53|) DatatypeTypeType)) (= (type |keys#0@@20|) (MapType0Type BoxType boolType))) (or (|BucketsLib.__default.BucketComplement#canCall| (Lit |bucket#0@@53|) (Lit |keys#0@@20|)) (and (not (= 54 $FunctionContextHeight)) (and ($Is |bucket#0@@53| Tclass.BucketsLib.Bucket) ($Is |keys#0@@20| (TSet Tclass.KeyType.Key)))))) (and (and (forall ((|key#0@@37| T@U) ) (!  (=> (and (= (type |key#0@@37|) (SeqType BoxType)) ($Is |key#0@@37| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@53|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@53|))) ($Box |key#0@@37|))) (not (U_2_bool (MapType0Select (Lit |keys#0@@20|) ($Box |key#0@@37|))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@53|))))) :qid |BucketsL.633:11| :skolemid |1614| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@53|)) ($Box |key#0@@37|)))) :pattern ( (MapType0Select |keys#0@@20| ($Box |key#0@@37|))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@53|)) ($Box |key#0@@37|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#193| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@53|))) (Lit |keys#0@@20|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@53|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.BucketComplement ($LS $ly@@47) (Lit |bucket#0@@53|) (Lit |keys#0@@20|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#193| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@53|))) (Lit |keys#0@@20|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@53|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.630:22| :weight 3 :skolemid |1615| :pattern ( (BucketsLib.__default.BucketComplement ($LS $ly@@47) (Lit |bucket#0@@53|) (Lit |keys#0@@20|))) ))))
(assert  (=> (<= 59 $FunctionContextHeight) (forall ((|a#0@@1| T@U) (|b#0@@10| T@U) (|key#0@@38| T@U) ) (!  (=> (and (and (and (= (type |a#0@@1|) DatatypeTypeType) (= (type |b#0@@10|) DatatypeTypeType)) (= (type |key#0@@38|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketsEquivalentForKey#canCall| |a#0@@1| |b#0@@10| |key#0@@38|) (and (not (= 59 $FunctionContextHeight)) (and (and ($Is |a#0@@1| Tclass.BucketsLib.Bucket) ($Is |b#0@@10| Tclass.BucketsLib.Bucket)) ($Is |key#0@@38| Tclass.KeyType.Key))))) true) :qid |BucketsL.654:37| :skolemid |1660| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@1| |b#0@@10| |key#0@@38|)) ))))
(assert (forall ((|a#0@@2| T@U) (|b#0@@11| T@U) (|key#0@@39| T@U) ) (!  (=> (and (and (and (= (type |a#0@@2|) DatatypeTypeType) (= (type |b#0@@11|) DatatypeTypeType)) (= (type |key#0@@39|) (SeqType BoxType))) (and (and ($Is |a#0@@2| Tclass.BucketsLib.Bucket) ($Is |b#0@@11| Tclass.BucketsLib.Bucket)) ($Is |key#0@@39| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.BucketsEquivalentForKey#requires| |a#0@@2| |b#0@@11| |key#0@@39|) true) (=> true (|BucketsLib.__default.BucketsEquivalentForKey#requires| |a#0@@2| |b#0@@11| |key#0@@39|)))) :qid |BucketsL.654:37| :skolemid |1661| :pattern ( (|BucketsLib.__default.BucketsEquivalentForKey#requires| |a#0@@2| |b#0@@11| |key#0@@39|)) )))
(assert  (=> (<= 59 $FunctionContextHeight) (forall ((|a#0@@3| T@U) (|b#0@@12| T@U) (|key#0@@40| T@U) ) (!  (=> (and (and (and (= (type |a#0@@3|) DatatypeTypeType) (= (type |b#0@@12|) DatatypeTypeType)) (= (type |key#0@@40|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketsEquivalentForKey#canCall| |a#0@@3| |b#0@@12| |key#0@@40|) (and (not (= 59 $FunctionContextHeight)) (and (and ($Is |a#0@@3| Tclass.BucketsLib.Bucket) ($Is |b#0@@12| Tclass.BucketsLib.Bucket)) ($Is |key#0@@40| Tclass.KeyType.Key))))) (and (and (and (|$IsA#ValueMessage.Message| (BucketsLib.__default.BucketGet |a#0@@3| |key#0@@40|)) (|$IsA#ValueMessage.Message| (BucketsLib.__default.BucketGet |b#0@@12| |key#0@@40|))) (and (|BucketsLib.__default.BucketGet#canCall| |a#0@@3| |key#0@@40|) (|BucketsLib.__default.BucketGet#canCall| |b#0@@12| |key#0@@40|))) (and (=> (BucketsLib.__default.BucketsEquivalentForKey |a#0@@3| |b#0@@12| |key#0@@40|) (|ValueMessage.Message#Equal| (BucketsLib.__default.BucketGet |a#0@@3| |key#0@@40|) (BucketsLib.__default.BucketGet |b#0@@12| |key#0@@40|))) (=> (|ValueMessage.Message#Equal| (BucketsLib.__default.BucketGet |a#0@@3| |key#0@@40|) (BucketsLib.__default.BucketGet |b#0@@12| |key#0@@40|)) (BucketsLib.__default.BucketsEquivalentForKey |a#0@@3| |b#0@@12| |key#0@@40|))))) :qid |BucketsL.654:37| :skolemid |1662| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@3| |b#0@@12| |key#0@@40|)) ))))
(assert  (=> (<= 59 $FunctionContextHeight) (forall ((|a#0@@4| T@U) (|b#0@@13| T@U) (|key#0@@41| T@U) ) (!  (=> (and (and (and (= (type |a#0@@4|) DatatypeTypeType) (= (type |b#0@@13|) DatatypeTypeType)) (= (type |key#0@@41|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketsEquivalentForKey#canCall| (Lit |a#0@@4|) (Lit |b#0@@13|) (Lit |key#0@@41|)) (and (not (= 59 $FunctionContextHeight)) (and (and ($Is |a#0@@4| Tclass.BucketsLib.Bucket) ($Is |b#0@@13| Tclass.BucketsLib.Bucket)) ($Is |key#0@@41| Tclass.KeyType.Key))))) (and (and (and (|$IsA#ValueMessage.Message| (Lit (BucketsLib.__default.BucketGet (Lit |a#0@@4|) (Lit |key#0@@41|)))) (|$IsA#ValueMessage.Message| (Lit (BucketsLib.__default.BucketGet (Lit |b#0@@13|) (Lit |key#0@@41|))))) (and (|BucketsLib.__default.BucketGet#canCall| (Lit |a#0@@4|) (Lit |key#0@@41|)) (|BucketsLib.__default.BucketGet#canCall| (Lit |b#0@@13|) (Lit |key#0@@41|)))) (and (=> (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@4|) (Lit |b#0@@13|) (Lit |key#0@@41|)) (|ValueMessage.Message#Equal| (BucketsLib.__default.BucketGet (Lit |a#0@@4|) (Lit |key#0@@41|)) (BucketsLib.__default.BucketGet (Lit |b#0@@13|) (Lit |key#0@@41|)))) (=> (|ValueMessage.Message#Equal| (BucketsLib.__default.BucketGet (Lit |a#0@@4|) (Lit |key#0@@41|)) (BucketsLib.__default.BucketGet (Lit |b#0@@13|) (Lit |key#0@@41|))) (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@4|) (Lit |b#0@@13|) (Lit |key#0@@41|)))))) :qid |BucketsL.654:37| :weight 3 :skolemid |1663| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@4|) (Lit |b#0@@13|) (Lit |key#0@@41|))) ))))
(assert  (=> (<= 60 $FunctionContextHeight) (forall ((|a#0@@5| T@U) (|b#0@@14| T@U) ) (!  (=> (and (and (= (type |a#0@@5|) DatatypeTypeType) (= (type |b#0@@14|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketsEquivalent#canCall| |a#0@@5| |b#0@@14|) (and (not (= 60 $FunctionContextHeight)) (and ($Is |a#0@@5| Tclass.BucketsLib.Bucket) ($Is |b#0@@14| Tclass.BucketsLib.Bucket))))) true) :qid |BucketsL.659:31| :skolemid |1666| :pattern ( (BucketsLib.__default.BucketsEquivalent |a#0@@5| |b#0@@14|)) ))))
(assert (forall ((|a#0@@6| T@U) (|b#0@@15| T@U) ) (!  (=> (and (and (= (type |a#0@@6|) DatatypeTypeType) (= (type |b#0@@15|) DatatypeTypeType)) (and ($Is |a#0@@6| Tclass.BucketsLib.Bucket) ($Is |b#0@@15| Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.BucketsEquivalent#requires| |a#0@@6| |b#0@@15|) true) (=> true (|BucketsLib.__default.BucketsEquivalent#requires| |a#0@@6| |b#0@@15|)))) :qid |BucketsL.659:31| :skolemid |1667| :pattern ( (|BucketsLib.__default.BucketsEquivalent#requires| |a#0@@6| |b#0@@15|)) )))
(assert  (=> (<= 60 $FunctionContextHeight) (forall ((|a#0@@7| T@U) (|b#0@@16| T@U) ) (!  (=> (and (and (= (type |a#0@@7|) DatatypeTypeType) (= (type |b#0@@16|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketsEquivalent#canCall| |a#0@@7| |b#0@@16|) (and (not (= 60 $FunctionContextHeight)) (and ($Is |a#0@@7| Tclass.BucketsLib.Bucket) ($Is |b#0@@16| Tclass.BucketsLib.Bucket))))) (and (forall ((|key#0@@42| T@U) ) (!  (=> (and (= (type |key#0@@42|) (SeqType BoxType)) ($Is |key#0@@42| Tclass.KeyType.Key)) (|BucketsLib.__default.BucketsEquivalentForKey#canCall| |a#0@@7| |b#0@@16| |key#0@@42|)) :qid |BucketsL.661:12| :skolemid |1668| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@7| |b#0@@16| |key#0@@42|)) )) (and (=> (BucketsLib.__default.BucketsEquivalent |a#0@@7| |b#0@@16|) (forall ((|key#0@@43| T@U) ) (!  (=> (and (= (type |key#0@@43|) (SeqType BoxType)) ($Is |key#0@@43| Tclass.KeyType.Key)) (BucketsLib.__default.BucketsEquivalentForKey |a#0@@7| |b#0@@16| |key#0@@43|)) :qid |BucketsL.661:12| :skolemid |1669| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@7| |b#0@@16| |key#0@@43|)) ))) (=> (forall ((|key#0@@44| T@U) ) (!  (=> (and (= (type |key#0@@44|) (SeqType BoxType)) ($Is |key#0@@44| Tclass.KeyType.Key)) (BucketsLib.__default.BucketsEquivalentForKey |a#0@@7| |b#0@@16| |key#0@@44|)) :qid |BucketsL.661:12| :skolemid |1669| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@7| |b#0@@16| |key#0@@44|)) )) (BucketsLib.__default.BucketsEquivalent |a#0@@7| |b#0@@16|))))) :qid |BucketsL.659:31| :skolemid |1670| :pattern ( (BucketsLib.__default.BucketsEquivalent |a#0@@7| |b#0@@16|)) ))))
(assert  (=> (<= 60 $FunctionContextHeight) (forall ((|a#0@@8| T@U) (|b#0@@17| T@U) ) (!  (=> (and (and (= (type |a#0@@8|) DatatypeTypeType) (= (type |b#0@@17|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketsEquivalent#canCall| (Lit |a#0@@8|) (Lit |b#0@@17|)) (and (not (= 60 $FunctionContextHeight)) (and ($Is |a#0@@8| Tclass.BucketsLib.Bucket) ($Is |b#0@@17| Tclass.BucketsLib.Bucket))))) (and (forall ((|key#1@@8| T@U) ) (!  (=> (and (= (type |key#1@@8|) (SeqType BoxType)) ($Is |key#1@@8| Tclass.KeyType.Key)) (|BucketsLib.__default.BucketsEquivalentForKey#canCall| (Lit |a#0@@8|) (Lit |b#0@@17|) |key#1@@8|)) :qid |BucketsL.661:12| :skolemid |1671| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@8| |b#0@@17| |key#1@@8|)) )) (and (=> (BucketsLib.__default.BucketsEquivalent (Lit |a#0@@8|) (Lit |b#0@@17|)) (forall ((|key#1@@9| T@U) ) (!  (=> (and (= (type |key#1@@9|) (SeqType BoxType)) ($Is |key#1@@9| Tclass.KeyType.Key)) (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@8|) (Lit |b#0@@17|) |key#1@@9|)) :qid |BucketsL.661:12| :skolemid |1672| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@8| |b#0@@17| |key#1@@9|)) ))) (=> (forall ((|key#1@@10| T@U) ) (!  (=> (and (= (type |key#1@@10|) (SeqType BoxType)) ($Is |key#1@@10| Tclass.KeyType.Key)) (BucketsLib.__default.BucketsEquivalentForKey (Lit |a#0@@8|) (Lit |b#0@@17|) |key#1@@10|)) :qid |BucketsL.661:12| :skolemid |1672| :pattern ( (BucketsLib.__default.BucketsEquivalentForKey |a#0@@8| |b#0@@17| |key#1@@10|)) )) (BucketsLib.__default.BucketsEquivalent (Lit |a#0@@8|) (Lit |b#0@@17|)))))) :qid |BucketsL.659:31| :weight 3 :skolemid |1673| :pattern ( (BucketsLib.__default.BucketsEquivalent (Lit |a#0@@8|) (Lit |b#0@@17|))) ))))
(assert (forall ((arg0@@377 T@U) (arg1@@190 T@U) (arg2@@132 T@U) ) (! (= (type (BucketsLib.__default.Compose arg0@@377 arg1@@190 arg2@@132)) DatatypeTypeType) :qid |funType:BucketsLib.__default.Compose| :pattern ( (BucketsLib.__default.Compose arg0@@377 arg1@@190 arg2@@132)) )))
(assert (forall (($ly@@48 T@U) (|top#0| T@U) (|bot#0| T@U) ) (!  (=> (and (and (= (type $ly@@48) LayerTypeType) (= (type |top#0|) DatatypeTypeType)) (= (type |bot#0|) DatatypeTypeType)) (= (BucketsLib.__default.Compose ($LS $ly@@48) |top#0| |bot#0|) (BucketsLib.__default.Compose $ly@@48 |top#0| |bot#0|))) :qid |BucketsL.666:22| :skolemid |1677| :pattern ( (BucketsLib.__default.Compose ($LS $ly@@48) |top#0| |bot#0|)) )))
(assert (forall (($ly@@49 T@U) (|top#0@@0| T@U) (|bot#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@49) LayerTypeType) (= (type |top#0@@0|) DatatypeTypeType)) (= (type |bot#0@@0|) DatatypeTypeType)) (= (BucketsLib.__default.Compose $ly@@49 |top#0@@0| |bot#0@@0|) (BucketsLib.__default.Compose $LZ |top#0@@0| |bot#0@@0|))) :qid |BucketsL.666:22| :skolemid |1678| :pattern ( (BucketsLib.__default.Compose (AsFuelBottom $ly@@49) |top#0@@0| |bot#0@@0|)) )))
(assert  (=> (<= 61 $FunctionContextHeight) (forall (($ly@@50 T@U) (|top#0@@1| T@U) (|bot#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@50) LayerTypeType) (= (type |top#0@@1|) DatatypeTypeType)) (= (type |bot#0@@1|) DatatypeTypeType)) (or (|BucketsLib.__default.Compose#canCall| |top#0@@1| |bot#0@@1|) (and (not (= 61 $FunctionContextHeight)) (and ($Is |top#0@@1| Tclass.BucketsLib.Bucket) ($Is |bot#0@@1| Tclass.BucketsLib.Bucket))))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.Compose $ly@@50 |top#0@@1| |bot#0@@1|)) ($Is (BucketsLib.__default.Compose $ly@@50 |top#0@@1| |bot#0@@1|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.666:22| :skolemid |1679| :pattern ( (BucketsLib.__default.Compose $ly@@50 |top#0@@1| |bot#0@@1|)) ))))
(assert (forall (($ly@@51 T@U) (|top#0@@2| T@U) (|bot#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@51) LayerTypeType) (= (type |top#0@@2|) DatatypeTypeType)) (= (type |bot#0@@2|) DatatypeTypeType)) (and ($Is |top#0@@2| Tclass.BucketsLib.Bucket) ($Is |bot#0@@2| Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.Compose#requires| $ly@@51 |top#0@@2| |bot#0@@2|) true) (=> true (|BucketsLib.__default.Compose#requires| $ly@@51 |top#0@@2| |bot#0@@2|)))) :qid |BucketsL.666:22| :skolemid |1680| :pattern ( (|BucketsLib.__default.Compose#requires| $ly@@51 |top#0@@2| |bot#0@@2|)) )))
(assert (forall ((arg0@@378 T@U) (arg1@@191 T@U) (arg2@@133 T@U) ) (! (= (type (|lambda#219| arg0@@378 arg1@@191 arg2@@133)) (MapType0Type BoxType boolType)) :qid |funType:lambda#219| :pattern ( (|lambda#219| arg0@@378 arg1@@191 arg2@@133)) )))
(assert  (=> (<= 61 $FunctionContextHeight) (forall (($ly@@52 T@U) (|top#0@@3| T@U) (|bot#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@52) LayerTypeType) (= (type |top#0@@3|) DatatypeTypeType)) (= (type |bot#0@@3|) DatatypeTypeType)) (or (|BucketsLib.__default.Compose#canCall| |top#0@@3| |bot#0@@3|) (and (not (= 61 $FunctionContextHeight)) (and ($Is |top#0@@3| Tclass.BucketsLib.Bucket) ($Is |bot#0@@3| Tclass.BucketsLib.Bucket))))) (and (and (forall ((|key#0@@45| T@U) ) (!  (=> (and (= (type |key#0@@45|) (SeqType BoxType)) ($Is |key#0@@45| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |top#0@@3|) (BucketsLib.Bucket.BucketMapWithSeq_q |bot#0@@3|)) (=> (or (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |top#0@@3|)) ($Box |key#0@@45|))) (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bot#0@@3|)) ($Box |key#0@@45|)))) (and (and (|BucketsLib.__default.BucketGet#canCall| |top#0@@3| |key#0@@45|) (|BucketsLib.__default.BucketGet#canCall| |bot#0@@3| |key#0@@45|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet |top#0@@3| |key#0@@45|) (BucketsLib.__default.BucketGet |bot#0@@3| |key#0@@45|)))))) :qid |BucketsL.669:11| :skolemid |1681| :pattern ( (BucketsLib.__default.BucketGet |bot#0@@3| |key#0@@45|)) :pattern ( (BucketsLib.__default.BucketGet |top#0@@3| |key#0@@45|)) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#219| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |top#0@@3|)) (|Map#Domain| (BucketsLib.Bucket.b |bot#0@@3|))) (|lambda#66| |top#0@@3| |bot#0@@3|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.Compose ($LS $ly@@52) |top#0@@3| |bot#0@@3|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#219| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |top#0@@3|)) (|Map#Domain| (BucketsLib.Bucket.b |bot#0@@3|))) (|lambda#66| |top#0@@3| |bot#0@@3|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.666:22| :skolemid |1682| :pattern ( (BucketsLib.__default.Compose ($LS $ly@@52) |top#0@@3| |bot#0@@3|)) ))))
(assert  (=> (<= 61 $FunctionContextHeight) (forall (($ly@@53 T@U) (|top#0@@4| T@U) (|bot#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@53) LayerTypeType) (= (type |top#0@@4|) DatatypeTypeType)) (= (type |bot#0@@4|) DatatypeTypeType)) (or (|BucketsLib.__default.Compose#canCall| (Lit |top#0@@4|) (Lit |bot#0@@4|)) (and (not (= 61 $FunctionContextHeight)) (and ($Is |top#0@@4| Tclass.BucketsLib.Bucket) ($Is |bot#0@@4| Tclass.BucketsLib.Bucket))))) (and (and (forall ((|key#0@@46| T@U) ) (!  (=> (and (= (type |key#0@@46|) (SeqType BoxType)) ($Is |key#0@@46| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |top#0@@4|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bot#0@@4|))) (=> (or (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |top#0@@4|))))) ($Box |key#0@@46|))) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |bot#0@@4|))))) ($Box |key#0@@46|)))) (and (and (|BucketsLib.__default.BucketGet#canCall| (Lit |top#0@@4|) |key#0@@46|) (|BucketsLib.__default.BucketGet#canCall| (Lit |bot#0@@4|) |key#0@@46|)) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.BucketGet (Lit |top#0@@4|) |key#0@@46|) (BucketsLib.__default.BucketGet (Lit |bot#0@@4|) |key#0@@46|)))))) :qid |BucketsL.669:11| :skolemid |1683| :pattern ( (BucketsLib.__default.BucketGet |bot#0@@4| |key#0@@46|)) :pattern ( (BucketsLib.__default.BucketGet |top#0@@4| |key#0@@46|)) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#219| Tclass.KeyType.Key (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |top#0@@4|))))) (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |bot#0@@4|)))))) (|lambda#66| (Lit |top#0@@4|) (Lit |bot#0@@4|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.Compose ($LS $ly@@53) (Lit |top#0@@4|) (Lit |bot#0@@4|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#219| Tclass.KeyType.Key (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |top#0@@4|))))) (Lit (|Map#Domain| (Lit (BucketsLib.Bucket.b (Lit |bot#0@@4|)))))) (|lambda#66| (Lit |top#0@@4|) (Lit |bot#0@@4|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.666:22| :weight 3 :skolemid |1684| :pattern ( (BucketsLib.__default.Compose ($LS $ly@@53) (Lit |top#0@@4|) (Lit |bot#0@@4|))) ))))
(assert (forall ((arg0@@379 T@U) (arg1@@192 T@U) ) (! (= (type (BucketsLib.__default.ComposeSeq arg0@@379 arg1@@192)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ComposeSeq| :pattern ( (BucketsLib.__default.ComposeSeq arg0@@379 arg1@@192)) )))
(assert (forall (($ly@@54 T@U) (|buckets#0@@5| T@U) ) (!  (=> (and (= (type $ly@@54) LayerTypeType) (= (type |buckets#0@@5|) (SeqType BoxType))) (= (BucketsLib.__default.ComposeSeq ($LS $ly@@54) |buckets#0@@5|) (BucketsLib.__default.ComposeSeq $ly@@54 |buckets#0@@5|))) :qid |BucketsL.675:22| :skolemid |1690| :pattern ( (BucketsLib.__default.ComposeSeq ($LS $ly@@54) |buckets#0@@5|)) )))
(assert (forall (($ly@@55 T@U) (|buckets#0@@6| T@U) ) (!  (=> (and (= (type $ly@@55) LayerTypeType) (= (type |buckets#0@@6|) (SeqType BoxType))) (= (BucketsLib.__default.ComposeSeq $ly@@55 |buckets#0@@6|) (BucketsLib.__default.ComposeSeq $LZ |buckets#0@@6|))) :qid |BucketsL.675:22| :skolemid |1691| :pattern ( (BucketsLib.__default.ComposeSeq (AsFuelBottom $ly@@55) |buckets#0@@6|)) )))
(assert  (=> (<= 62 $FunctionContextHeight) (forall (($ly@@56 T@U) (|buckets#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@56) LayerTypeType) (= (type |buckets#0@@7|) (SeqType BoxType))) (or (|BucketsLib.__default.ComposeSeq#canCall| |buckets#0@@7|) (and (not (= 62 $FunctionContextHeight)) ($Is |buckets#0@@7| (TSeq Tclass.BucketsLib.Bucket))))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.ComposeSeq $ly@@56 |buckets#0@@7|)) ($Is (BucketsLib.__default.ComposeSeq $ly@@56 |buckets#0@@7|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.675:22| :skolemid |1692| :pattern ( (BucketsLib.__default.ComposeSeq $ly@@56 |buckets#0@@7|)) ))))
(assert (forall (($ly@@57 T@U) (|buckets#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@57) LayerTypeType) (= (type |buckets#0@@8|) (SeqType BoxType))) ($Is |buckets#0@@8| (TSeq Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.ComposeSeq#requires| $ly@@57 |buckets#0@@8|) true) (=> true (|BucketsLib.__default.ComposeSeq#requires| $ly@@57 |buckets#0@@8|)))) :qid |BucketsL.675:22| :skolemid |1693| :pattern ( (|BucketsLib.__default.ComposeSeq#requires| $ly@@57 |buckets#0@@8|)) )))
(assert (= (type StartFuel_BucketsLib._default.Compose) LayerTypeType))
(assert  (=> (<= 62 $FunctionContextHeight) (forall (($ly@@58 T@U) (|buckets#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@58) LayerTypeType) (= (type |buckets#0@@9|) (SeqType BoxType))) (or (|BucketsLib.__default.ComposeSeq#canCall| |buckets#0@@9|) (and (not (= 62 $FunctionContextHeight)) ($Is |buckets#0@@9| (TSeq Tclass.BucketsLib.Bucket))))) (and (and (=> (= (|Seq#Length| |buckets#0@@9|) (LitInt 0)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (=> (not (= (|Seq#Length| |buckets#0@@9|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket |buckets#0@@9|) (|BucketsLib.__default.ComposeSeq#canCall| (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@9|))) (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket |buckets#0@@9|)) (|BucketsLib.__default.Compose#canCall| (BucketsLib.__default.ComposeSeq $ly@@58 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@9|)) ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@9|)))))) (= (BucketsLib.__default.ComposeSeq ($LS $ly@@58) |buckets#0@@9|) (ite (= (|Seq#Length| |buckets#0@@9|) (LitInt 0)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (BucketsLib.__default.ComposeSeq $ly@@58 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@9|)) ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@9|))))))) :qid |BucketsL.675:22| :skolemid |1694| :pattern ( (BucketsLib.__default.ComposeSeq ($LS $ly@@58) |buckets#0@@9|)) ))))
(assert  (=> (<= 62 $FunctionContextHeight) (forall (($ly@@59 T@U) (|buckets#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@59) LayerTypeType) (= (type |buckets#0@@10|) (SeqType BoxType))) (or (|BucketsLib.__default.ComposeSeq#canCall| (Lit |buckets#0@@10|)) (and (not (= 62 $FunctionContextHeight)) ($Is |buckets#0@@10| (TSeq Tclass.BucketsLib.Bucket))))) (and (and (=> (= (|Seq#Length| (Lit |buckets#0@@10|)) (LitInt 0)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType)))) (=> (not (= (|Seq#Length| (Lit |buckets#0@@10|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)) (|BucketsLib.__default.ComposeSeq#canCall| (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|))))) (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|))) (|BucketsLib.__default.Compose#canCall| (BucketsLib.__default.ComposeSeq ($LS $ly@@59) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)))) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)))))))) (= (BucketsLib.__default.ComposeSeq ($LS $ly@@59) (Lit |buckets#0@@10|)) (ite (= (|Seq#Length| (Lit |buckets#0@@10|)) (LitInt 0)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (BucketsLib.__default.ComposeSeq ($LS $ly@@59) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)))) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|))))))))) :qid |BucketsL.675:22| :weight 3 :skolemid |1695| :pattern ( (BucketsLib.__default.ComposeSeq ($LS $ly@@59) (Lit |buckets#0@@10|))) ))))
(assert  (=> (<= 68 $FunctionContextHeight) (forall ((|oldparent#0| T@U) (|oldchild#0| T@U) (|newparent#0| T@U) (|newchild#0| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0|) DatatypeTypeType) (= (type |oldchild#0|) DatatypeTypeType)) (= (type |newparent#0|) DatatypeTypeType)) (= (type |newchild#0|) DatatypeTypeType)) (or (|BucketsLib.__default.FlushEquivalentParentChild#canCall| |oldparent#0| |oldchild#0| |newparent#0| |newchild#0|) (and (not (= 68 $FunctionContextHeight)) (and (and (and ($Is |oldparent#0| Tclass.BucketsLib.Bucket) ($Is |oldchild#0| Tclass.BucketsLib.Bucket)) ($Is |newparent#0| Tclass.BucketsLib.Bucket)) ($Is |newchild#0| Tclass.BucketsLib.Bucket))))) true) :qid |BucketsL.742:40| :skolemid |1712| :pattern ( (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0| |oldchild#0| |newparent#0| |newchild#0|)) ))))
(assert (forall ((|oldparent#0@@0| T@U) (|oldchild#0@@0| T@U) (|newparent#0@@0| T@U) (|newchild#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@0|) DatatypeTypeType) (= (type |oldchild#0@@0|) DatatypeTypeType)) (= (type |newparent#0@@0|) DatatypeTypeType)) (= (type |newchild#0@@0|) DatatypeTypeType)) (and (and (and ($Is |oldparent#0@@0| Tclass.BucketsLib.Bucket) ($Is |oldchild#0@@0| Tclass.BucketsLib.Bucket)) ($Is |newparent#0@@0| Tclass.BucketsLib.Bucket)) ($Is |newchild#0@@0| Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.FlushEquivalentParentChild#requires| |oldparent#0@@0| |oldchild#0@@0| |newparent#0@@0| |newchild#0@@0|) true) (=> true (|BucketsLib.__default.FlushEquivalentParentChild#requires| |oldparent#0@@0| |oldchild#0@@0| |newparent#0@@0| |newchild#0@@0|)))) :qid |BucketsL.742:40| :skolemid |1713| :pattern ( (|BucketsLib.__default.FlushEquivalentParentChild#requires| |oldparent#0@@0| |oldchild#0@@0| |newparent#0@@0| |newchild#0@@0|)) )))
(assert  (=> (<= 68 $FunctionContextHeight) (forall ((|oldparent#0@@1| T@U) (|oldchild#0@@1| T@U) (|newparent#0@@1| T@U) (|newchild#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@1|) DatatypeTypeType) (= (type |oldchild#0@@1|) DatatypeTypeType)) (= (type |newparent#0@@1|) DatatypeTypeType)) (= (type |newchild#0@@1|) DatatypeTypeType)) (or (|BucketsLib.__default.FlushEquivalentParentChild#canCall| |oldparent#0@@1| |oldchild#0@@1| |newparent#0@@1| |newchild#0@@1|) (and (not (= 68 $FunctionContextHeight)) (and (and (and ($Is |oldparent#0@@1| Tclass.BucketsLib.Bucket) ($Is |oldchild#0@@1| Tclass.BucketsLib.Bucket)) ($Is |newparent#0@@1| Tclass.BucketsLib.Bucket)) ($Is |newchild#0@@1| Tclass.BucketsLib.Bucket))))) (and (and (and (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |oldparent#0@@1| |oldchild#0@@1|)) (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |newparent#0@@1| |newchild#0@@1|))) (and (|BucketsLib.__default.Compose#canCall| |oldparent#0@@1| |oldchild#0@@1|) (|BucketsLib.__default.Compose#canCall| |newparent#0@@1| |newchild#0@@1|))) (and (=> (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@1| |oldchild#0@@1| |newparent#0@@1| |newchild#0@@1|) (|BucketsLib.Bucket#Equal| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |oldparent#0@@1| |oldchild#0@@1|) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |newparent#0@@1| |newchild#0@@1|))) (=> (|BucketsLib.Bucket#Equal| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |oldparent#0@@1| |oldchild#0@@1|) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose |newparent#0@@1| |newchild#0@@1|)) (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@1| |oldchild#0@@1| |newparent#0@@1| |newchild#0@@1|))))) :qid |BucketsL.742:40| :skolemid |1714| :pattern ( (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@1| |oldchild#0@@1| |newparent#0@@1| |newchild#0@@1|)) ))))
(assert  (=> (<= 68 $FunctionContextHeight) (forall ((|oldparent#0@@2| T@U) (|oldchild#0@@2| T@U) (|newparent#0@@2| T@U) (|newchild#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@2|) DatatypeTypeType) (= (type |oldchild#0@@2|) DatatypeTypeType)) (= (type |newparent#0@@2|) DatatypeTypeType)) (= (type |newchild#0@@2|) DatatypeTypeType)) (or (|BucketsLib.__default.FlushEquivalentParentChild#canCall| (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|) (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)) (and (not (= 68 $FunctionContextHeight)) (and (and (and ($Is |oldparent#0@@2| Tclass.BucketsLib.Bucket) ($Is |oldchild#0@@2| Tclass.BucketsLib.Bucket)) ($Is |newparent#0@@2| Tclass.BucketsLib.Bucket)) ($Is |newchild#0@@2| Tclass.BucketsLib.Bucket))))) (and (and (and (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|))) (|$IsA#BucketsLib.Bucket| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)))) (and (|BucketsLib.__default.Compose#canCall| (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|)) (|BucketsLib.__default.Compose#canCall| (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)))) (and (=> (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|) (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)) (|BucketsLib.Bucket#Equal| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|)) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)))) (=> (|BucketsLib.Bucket#Equal| (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|)) (BucketsLib.__default.Compose StartFuel_BucketsLib._default.Compose (Lit |newparent#0@@2|) (Lit |newchild#0@@2|))) (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|) (Lit |newparent#0@@2|) (Lit |newchild#0@@2|)))))) :qid |BucketsL.742:40| :weight 3 :skolemid |1715| :pattern ( (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@2|) (Lit |oldchild#0@@2|) (Lit |newparent#0@@2|) (Lit |newchild#0@@2|))) ))))
(assert  (=> (<= 69 $FunctionContextHeight) (forall ((|oldparent#0@@3| T@U) (|oldchildren#0| T@U) (|newparent#0@@3| T@U) (|newchildren#0| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@3|) DatatypeTypeType) (= (type |oldchildren#0|) (SeqType BoxType))) (= (type |newparent#0@@3|) DatatypeTypeType)) (= (type |newchildren#0|) (SeqType BoxType))) (or (|BucketsLib.__default.FlushEquivalent#canCall| |oldparent#0@@3| |oldchildren#0| |newparent#0@@3| |newchildren#0|) (and (not (= 69 $FunctionContextHeight)) (and (and (and ($Is |oldparent#0@@3| Tclass.BucketsLib.Bucket) ($Is |oldchildren#0| (TSeq Tclass.BucketsLib.Bucket))) ($Is |newparent#0@@3| Tclass.BucketsLib.Bucket)) ($Is |newchildren#0| (TSeq Tclass.BucketsLib.Bucket)))))) true) :qid |BucketsL.747:29| :skolemid |1718| :pattern ( (BucketsLib.__default.FlushEquivalent |oldparent#0@@3| |oldchildren#0| |newparent#0@@3| |newchildren#0|)) ))))
(assert (forall ((|oldparent#0@@4| T@U) (|oldchildren#0@@0| T@U) (|newparent#0@@4| T@U) (|newchildren#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@4|) DatatypeTypeType) (= (type |oldchildren#0@@0|) (SeqType BoxType))) (= (type |newparent#0@@4|) DatatypeTypeType)) (= (type |newchildren#0@@0|) (SeqType BoxType))) (and (and (and ($Is |oldparent#0@@4| Tclass.BucketsLib.Bucket) ($Is |oldchildren#0@@0| (TSeq Tclass.BucketsLib.Bucket))) ($Is |newparent#0@@4| Tclass.BucketsLib.Bucket)) ($Is |newchildren#0@@0| (TSeq Tclass.BucketsLib.Bucket)))) (and (=> (|BucketsLib.__default.FlushEquivalent#requires| |oldparent#0@@4| |oldchildren#0@@0| |newparent#0@@4| |newchildren#0@@0|) true) (=> true (|BucketsLib.__default.FlushEquivalent#requires| |oldparent#0@@4| |oldchildren#0@@0| |newparent#0@@4| |newchildren#0@@0|)))) :qid |BucketsL.747:29| :skolemid |1719| :pattern ( (|BucketsLib.__default.FlushEquivalent#requires| |oldparent#0@@4| |oldchildren#0@@0| |newparent#0@@4| |newchildren#0@@0|)) )))
(assert  (=> (<= 69 $FunctionContextHeight) (forall ((|oldparent#0@@5| T@U) (|oldchildren#0@@1| T@U) (|newparent#0@@5| T@U) (|newchildren#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@5|) DatatypeTypeType) (= (type |oldchildren#0@@1|) (SeqType BoxType))) (= (type |newparent#0@@5|) DatatypeTypeType)) (= (type |newchildren#0@@1|) (SeqType BoxType))) (or (|BucketsLib.__default.FlushEquivalent#canCall| |oldparent#0@@5| |oldchildren#0@@1| |newparent#0@@5| |newchildren#0@@1|) (and (not (= 69 $FunctionContextHeight)) (and (and (and ($Is |oldparent#0@@5| Tclass.BucketsLib.Bucket) ($Is |oldchildren#0@@1| (TSeq Tclass.BucketsLib.Bucket))) ($Is |newparent#0@@5| Tclass.BucketsLib.Bucket)) ($Is |newchildren#0@@1| (TSeq Tclass.BucketsLib.Bucket)))))) (and (=> (= (|Seq#Length| |oldchildren#0@@1|) (|Seq#Length| |newchildren#0@@1|)) (forall ((|i#0@@33| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@33|) (< |i#0@@33| (|Seq#Length| |oldchildren#0@@1|))) (|BucketsLib.__default.FlushEquivalentParentChild#canCall| |oldparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@33|)) |newparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@33|)))) :qid |BucketsL.750:16| :skolemid |1720| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@33|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@33|))) ))) (and (=> (BucketsLib.__default.FlushEquivalent |oldparent#0@@5| |oldchildren#0@@1| |newparent#0@@5| |newchildren#0@@1|) (and (= (|Seq#Length| |oldchildren#0@@1|) (|Seq#Length| |newchildren#0@@1|)) (forall ((|i#0@@34| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| (|Seq#Length| |oldchildren#0@@1|))) (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@34|)) |newparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@34|)))) :qid |BucketsL.750:16| :skolemid |1721| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@34|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@34|))) )))) (=> (and (= (|Seq#Length| |oldchildren#0@@1|) (|Seq#Length| |newchildren#0@@1|)) (forall ((|i#0@@35| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| (|Seq#Length| |oldchildren#0@@1|))) (BucketsLib.__default.FlushEquivalentParentChild |oldparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@35|)) |newparent#0@@5| ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@35|)))) :qid |BucketsL.750:16| :skolemid |1721| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@1| |i#0@@35|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@1| |i#0@@35|))) ))) (BucketsLib.__default.FlushEquivalent |oldparent#0@@5| |oldchildren#0@@1| |newparent#0@@5| |newchildren#0@@1|))))) :qid |BucketsL.747:29| :skolemid |1722| :pattern ( (BucketsLib.__default.FlushEquivalent |oldparent#0@@5| |oldchildren#0@@1| |newparent#0@@5| |newchildren#0@@1|)) ))))
(assert  (=> (<= 69 $FunctionContextHeight) (forall ((|oldparent#0@@6| T@U) (|oldchildren#0@@2| T@U) (|newparent#0@@6| T@U) (|newchildren#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |oldparent#0@@6|) DatatypeTypeType) (= (type |oldchildren#0@@2|) (SeqType BoxType))) (= (type |newparent#0@@6|) DatatypeTypeType)) (= (type |newchildren#0@@2|) (SeqType BoxType))) (or (|BucketsLib.__default.FlushEquivalent#canCall| (Lit |oldparent#0@@6|) (Lit |oldchildren#0@@2|) (Lit |newparent#0@@6|) (Lit |newchildren#0@@2|)) (and (not (= 69 $FunctionContextHeight)) (and (and (and ($Is |oldparent#0@@6| Tclass.BucketsLib.Bucket) ($Is |oldchildren#0@@2| (TSeq Tclass.BucketsLib.Bucket))) ($Is |newparent#0@@6| Tclass.BucketsLib.Bucket)) ($Is |newchildren#0@@2| (TSeq Tclass.BucketsLib.Bucket)))))) (and (=> (= (|Seq#Length| (Lit |oldchildren#0@@2|)) (|Seq#Length| (Lit |newchildren#0@@2|))) (forall ((|i#1@@14| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@14|) (< |i#1@@14| (|Seq#Length| (Lit |oldchildren#0@@2|)))) (|BucketsLib.__default.FlushEquivalentParentChild#canCall| (Lit |oldparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |oldchildren#0@@2|) |i#1@@14|)) (Lit |newparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |newchildren#0@@2|) |i#1@@14|)))) :qid |BucketsL.750:16| :skolemid |1723| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@2| |i#1@@14|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@2| |i#1@@14|))) ))) (and (=> (BucketsLib.__default.FlushEquivalent (Lit |oldparent#0@@6|) (Lit |oldchildren#0@@2|) (Lit |newparent#0@@6|) (Lit |newchildren#0@@2|)) (and (= (|Seq#Length| (Lit |oldchildren#0@@2|)) (|Seq#Length| (Lit |newchildren#0@@2|))) (forall ((|i#1@@15| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@15|) (< |i#1@@15| (|Seq#Length| (Lit |oldchildren#0@@2|)))) (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |oldchildren#0@@2|) |i#1@@15|)) (Lit |newparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |newchildren#0@@2|) |i#1@@15|)))) :qid |BucketsL.750:16| :skolemid |1724| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@2| |i#1@@15|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@2| |i#1@@15|))) )))) (=> (and (= (|Seq#Length| (Lit |oldchildren#0@@2|)) (|Seq#Length| (Lit |newchildren#0@@2|))) (forall ((|i#1@@16| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@16|) (< |i#1@@16| (|Seq#Length| (Lit |oldchildren#0@@2|)))) (BucketsLib.__default.FlushEquivalentParentChild (Lit |oldparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |oldchildren#0@@2|) |i#1@@16|)) (Lit |newparent#0@@6|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |newchildren#0@@2|) |i#1@@16|)))) :qid |BucketsL.750:16| :skolemid |1724| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |newchildren#0@@2| |i#1@@16|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |oldchildren#0@@2| |i#1@@16|))) ))) (BucketsLib.__default.FlushEquivalent (Lit |oldparent#0@@6|) (Lit |oldchildren#0@@2|) (Lit |newparent#0@@6|) (Lit |newchildren#0@@2|)))))) :qid |BucketsL.747:29| :weight 3 :skolemid |1725| :pattern ( (BucketsLib.__default.FlushEquivalent (Lit |oldparent#0@@6|) (Lit |oldchildren#0@@2|) (Lit |newparent#0@@6|) (Lit |newchildren#0@@2|))) ))))
(assert (forall ((arg0@@380 T@U) (arg1@@193 T@U) (arg2@@134 T@U) ) (! (= (type (BucketsLib.__default.InterpretBucketStack arg0@@380 arg1@@193 arg2@@134)) DatatypeTypeType) :qid |funType:BucketsLib.__default.InterpretBucketStack| :pattern ( (BucketsLib.__default.InterpretBucketStack arg0@@380 arg1@@193 arg2@@134)) )))
(assert (forall (($ly@@60 T@U) (|buckets#0@@11| T@U) (|key#0@@47| T@U) ) (!  (=> (and (and (= (type $ly@@60) LayerTypeType) (= (type |buckets#0@@11|) (SeqType BoxType))) (= (type |key#0@@47|) (SeqType BoxType))) (= (BucketsLib.__default.InterpretBucketStack ($LS $ly@@60) |buckets#0@@11| |key#0@@47|) (BucketsLib.__default.InterpretBucketStack $ly@@60 |buckets#0@@11| |key#0@@47|))) :qid |BucketsL.753:12| :skolemid |1729| :pattern ( (BucketsLib.__default.InterpretBucketStack ($LS $ly@@60) |buckets#0@@11| |key#0@@47|)) )))
(assert (forall (($ly@@61 T@U) (|buckets#0@@12| T@U) (|key#0@@48| T@U) ) (!  (=> (and (and (= (type $ly@@61) LayerTypeType) (= (type |buckets#0@@12|) (SeqType BoxType))) (= (type |key#0@@48|) (SeqType BoxType))) (= (BucketsLib.__default.InterpretBucketStack $ly@@61 |buckets#0@@12| |key#0@@48|) (BucketsLib.__default.InterpretBucketStack $LZ |buckets#0@@12| |key#0@@48|))) :qid |BucketsL.753:12| :skolemid |1730| :pattern ( (BucketsLib.__default.InterpretBucketStack (AsFuelBottom $ly@@61) |buckets#0@@12| |key#0@@48|)) )))
(assert  (=> (<= 70 $FunctionContextHeight) (forall (($ly@@62 T@U) (|buckets#0@@13| T@U) (|key#0@@49| T@U) ) (!  (=> (and (and (and (= (type $ly@@62) LayerTypeType) (= (type |buckets#0@@13|) (SeqType BoxType))) (= (type |key#0@@49|) (SeqType BoxType))) (or (|BucketsLib.__default.InterpretBucketStack#canCall| |buckets#0@@13| |key#0@@49|) (and (not (= 70 $FunctionContextHeight)) (and ($Is |buckets#0@@13| (TSeq Tclass.BucketsLib.Bucket)) ($Is |key#0@@49| Tclass.KeyType.Key))))) ($Is (BucketsLib.__default.InterpretBucketStack $ly@@62 |buckets#0@@13| |key#0@@49|) Tclass.ValueMessage.Message)) :qid |BucketsL.753:12| :skolemid |1731| :pattern ( (BucketsLib.__default.InterpretBucketStack $ly@@62 |buckets#0@@13| |key#0@@49|)) ))))
(assert (forall (($ly@@63 T@U) (|buckets#0@@14| T@U) (|key#0@@50| T@U) ) (!  (=> (and (and (and (= (type $ly@@63) LayerTypeType) (= (type |buckets#0@@14|) (SeqType BoxType))) (= (type |key#0@@50|) (SeqType BoxType))) (and ($Is |buckets#0@@14| (TSeq Tclass.BucketsLib.Bucket)) ($Is |key#0@@50| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.InterpretBucketStack#requires| $ly@@63 |buckets#0@@14| |key#0@@50|) true) (=> true (|BucketsLib.__default.InterpretBucketStack#requires| $ly@@63 |buckets#0@@14| |key#0@@50|)))) :qid |BucketsL.753:12| :skolemid |1732| :pattern ( (|BucketsLib.__default.InterpretBucketStack#requires| $ly@@63 |buckets#0@@14| |key#0@@50|)) )))
(assert  (and (forall ((arg0@@381 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@381)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Update| :pattern ( (|#ValueMessage.Message.Update| arg0@@381)) )) (= (type ValueMessage.__default.NopDelta) BoxType)))
(assert  (=> (<= 70 $FunctionContextHeight) (forall (($ly@@64 T@U) (|buckets#0@@15| T@U) (|key#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@64) LayerTypeType) (= (type |buckets#0@@15|) (SeqType BoxType))) (= (type |key#0@@51|) (SeqType BoxType))) (or (|BucketsLib.__default.InterpretBucketStack#canCall| |buckets#0@@15| |key#0@@51|) (and (not (= 70 $FunctionContextHeight)) (and ($Is |buckets#0@@15| (TSeq Tclass.BucketsLib.Bucket)) ($Is |key#0@@51| Tclass.KeyType.Key))))) (and (and (=> (= (|Seq#Length| |buckets#0@@15|) (LitInt 0)) |ValueMessage.__default.NopDelta#canCall|) (=> (not (= (|Seq#Length| |buckets#0@@15|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket |buckets#0@@15|) (|BucketsLib.__default.InterpretBucketStack#canCall| (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@15|) |key#0@@51|)) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket |buckets#0@@15|) (|BucketsLib.__default.BucketGet#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@15|)) |key#0@@51|))) (|ValueMessage.__default.Merge#canCall| (BucketsLib.__default.InterpretBucketStack $ly@@64 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@15|) |key#0@@51|) (BucketsLib.__default.BucketGet ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@15|)) |key#0@@51|))))) (= (BucketsLib.__default.InterpretBucketStack ($LS $ly@@64) |buckets#0@@15| |key#0@@51|) (ite (= (|Seq#Length| |buckets#0@@15|) (LitInt 0)) (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta) (ValueMessage.__default.Merge (BucketsLib.__default.InterpretBucketStack $ly@@64 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@15|) |key#0@@51|) (BucketsLib.__default.BucketGet ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@15|)) |key#0@@51|)))))) :qid |BucketsL.753:12| :skolemid |1733| :pattern ( (BucketsLib.__default.InterpretBucketStack ($LS $ly@@64) |buckets#0@@15| |key#0@@51|)) ))))
(assert  (=> (<= 70 $FunctionContextHeight) (forall (($ly@@65 T@U) (|buckets#0@@16| T@U) (|key#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@65) LayerTypeType) (= (type |buckets#0@@16|) (SeqType BoxType))) (= (type |key#0@@52|) (SeqType BoxType))) (or (|BucketsLib.__default.InterpretBucketStack#canCall| (Lit |buckets#0@@16|) (Lit |key#0@@52|)) (and (not (= 70 $FunctionContextHeight)) (and ($Is |buckets#0@@16| (TSeq Tclass.BucketsLib.Bucket)) ($Is |key#0@@52| Tclass.KeyType.Key))))) (and (and (=> (= (|Seq#Length| (Lit |buckets#0@@16|)) (LitInt 0)) |ValueMessage.__default.NopDelta#canCall|) (=> (not (= (|Seq#Length| (Lit |buckets#0@@16|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)) (|BucketsLib.__default.InterpretBucketStack#canCall| (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|))) (Lit |key#0@@52|))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)) (|BucketsLib.__default.BucketGet#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)))) (Lit |key#0@@52|)))) (|ValueMessage.__default.Merge#canCall| (Lit (BucketsLib.__default.InterpretBucketStack ($LS $ly@@65) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|))) (Lit |key#0@@52|))) (Lit (BucketsLib.__default.BucketGet (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)))) (Lit |key#0@@52|))))))) (= (BucketsLib.__default.InterpretBucketStack ($LS $ly@@65) (Lit |buckets#0@@16|) (Lit |key#0@@52|)) (ite (= (|Seq#Length| (Lit |buckets#0@@16|)) (LitInt 0)) (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta) (ValueMessage.__default.Merge (Lit (BucketsLib.__default.InterpretBucketStack ($LS $ly@@65) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|))) (Lit |key#0@@52|))) (Lit (BucketsLib.__default.BucketGet (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@16|)))) (Lit |key#0@@52|)))))))) :qid |BucketsL.753:12| :weight 3 :skolemid |1734| :pattern ( (BucketsLib.__default.InterpretBucketStack ($LS $ly@@65) (Lit |buckets#0@@16|) (Lit |key#0@@52|))) ))))
(assert (forall ((arg0@@382 T@U) (arg1@@194 T@U) (arg2@@135 T@U) (arg3@@94 T@U) ) (! (= (type (BucketsLib.__default.ClampRange arg0@@382 arg1@@194 arg2@@135 arg3@@94)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ClampRange| :pattern ( (BucketsLib.__default.ClampRange arg0@@382 arg1@@194 arg2@@135 arg3@@94)) )))
(assert (forall (($ly@@66 T@U) (|bucket#0@@54| T@U) (|start#0| T@U) (|end#0| T@U) ) (!  (=> (and (and (and (= (type $ly@@66) LayerTypeType) (= (type |bucket#0@@54|) DatatypeTypeType)) (= (type |start#0|) DatatypeTypeType)) (= (type |end#0|) DatatypeTypeType)) (= (BucketsLib.__default.ClampRange ($LS $ly@@66) |bucket#0@@54| |start#0| |end#0|) (BucketsLib.__default.ClampRange $ly@@66 |bucket#0@@54| |start#0| |end#0|))) :qid |BucketsL.774:22| :skolemid |1745| :pattern ( (BucketsLib.__default.ClampRange ($LS $ly@@66) |bucket#0@@54| |start#0| |end#0|)) )))
(assert (forall (($ly@@67 T@U) (|bucket#0@@55| T@U) (|start#0@@0| T@U) (|end#0@@0| T@U) ) (!  (=> (and (and (and (= (type $ly@@67) LayerTypeType) (= (type |bucket#0@@55|) DatatypeTypeType)) (= (type |start#0@@0|) DatatypeTypeType)) (= (type |end#0@@0|) DatatypeTypeType)) (= (BucketsLib.__default.ClampRange $ly@@67 |bucket#0@@55| |start#0@@0| |end#0@@0|) (BucketsLib.__default.ClampRange $LZ |bucket#0@@55| |start#0@@0| |end#0@@0|))) :qid |BucketsL.774:22| :skolemid |1746| :pattern ( (BucketsLib.__default.ClampRange (AsFuelBottom $ly@@67) |bucket#0@@55| |start#0@@0| |end#0@@0|)) )))
(assert (= (type Tclass.UI.RangeStart) TyType))
(assert (= (Tag Tclass.UI.RangeStart) Tagclass.UI.RangeStart))
(assert (forall ((bx@@117 T@U) ) (!  (=> (and (= (type bx@@117) BoxType) ($IsBox bx@@117 Tclass.UI.RangeStart)) (and (= ($Box ($Unbox DatatypeTypeType bx@@117)) bx@@117) ($Is ($Unbox DatatypeTypeType bx@@117) Tclass.UI.RangeStart))) :qid |unknown.0:0| :skolemid |1747| :pattern ( ($IsBox bx@@117 Tclass.UI.RangeStart)) )))
(assert (= (type Tclass.UI.RangeEnd) TyType))
(assert (= (Tag Tclass.UI.RangeEnd) Tagclass.UI.RangeEnd))
(assert (forall ((bx@@118 T@U) ) (!  (=> (and (= (type bx@@118) BoxType) ($IsBox bx@@118 Tclass.UI.RangeEnd)) (and (= ($Box ($Unbox DatatypeTypeType bx@@118)) bx@@118) ($Is ($Unbox DatatypeTypeType bx@@118) Tclass.UI.RangeEnd))) :qid |unknown.0:0| :skolemid |1748| :pattern ( ($IsBox bx@@118 Tclass.UI.RangeEnd)) )))
(assert  (=> (<= 74 $FunctionContextHeight) (forall (($ly@@68 T@U) (|bucket#0@@56| T@U) (|start#0@@1| T@U) (|end#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@68) LayerTypeType) (= (type |bucket#0@@56|) DatatypeTypeType)) (= (type |start#0@@1|) DatatypeTypeType)) (= (type |end#0@@1|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampRange#canCall| |bucket#0@@56| |start#0@@1| |end#0@@1|) (and (not (= 74 $FunctionContextHeight)) (and (and ($Is |bucket#0@@56| Tclass.BucketsLib.Bucket) ($Is |start#0@@1| Tclass.UI.RangeStart)) ($Is |end#0@@1| Tclass.UI.RangeEnd))))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.ClampRange $ly@@68 |bucket#0@@56| |start#0@@1| |end#0@@1|)) ($Is (BucketsLib.__default.ClampRange $ly@@68 |bucket#0@@56| |start#0@@1| |end#0@@1|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.774:22| :skolemid |1749| :pattern ( (BucketsLib.__default.ClampRange $ly@@68 |bucket#0@@56| |start#0@@1| |end#0@@1|)) ))))
(assert (forall (($ly@@69 T@U) (|bucket#0@@57| T@U) (|start#0@@2| T@U) (|end#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@69) LayerTypeType) (= (type |bucket#0@@57|) DatatypeTypeType)) (= (type |start#0@@2|) DatatypeTypeType)) (= (type |end#0@@2|) DatatypeTypeType)) (and (and ($Is |bucket#0@@57| Tclass.BucketsLib.Bucket) ($Is |start#0@@2| Tclass.UI.RangeStart)) ($Is |end#0@@2| Tclass.UI.RangeEnd))) (and (=> (|BucketsLib.__default.ClampRange#requires| $ly@@69 |bucket#0@@57| |start#0@@2| |end#0@@2|) true) (=> true (|BucketsLib.__default.ClampRange#requires| $ly@@69 |bucket#0@@57| |start#0@@2| |end#0@@2|)))) :qid |BucketsL.774:22| :skolemid |1750| :pattern ( (|BucketsLib.__default.ClampRange#requires| $ly@@69 |bucket#0@@57| |start#0@@2| |end#0@@2|)) )))
(assert (forall ((arg0@@383 T@U) (arg1@@195 T@U) (arg2@@136 T@U) (arg3@@95 T@U) ) (! (= (type (|lambda#251| arg0@@383 arg1@@195 arg2@@136 arg3@@95)) (MapType0Type BoxType boolType)) :qid |funType:lambda#251| :pattern ( (|lambda#251| arg0@@383 arg1@@195 arg2@@136 arg3@@95)) )))
(assert  (=> (<= 74 $FunctionContextHeight) (forall (($ly@@70 T@U) (|bucket#0@@58| T@U) (|start#0@@3| T@U) (|end#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@70) LayerTypeType) (= (type |bucket#0@@58|) DatatypeTypeType)) (= (type |start#0@@3|) DatatypeTypeType)) (= (type |end#0@@3|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampRange#canCall| |bucket#0@@58| |start#0@@3| |end#0@@3|) (and (not (= 74 $FunctionContextHeight)) (and (and ($Is |bucket#0@@58| Tclass.BucketsLib.Bucket) ($Is |start#0@@3| Tclass.UI.RangeStart)) ($Is |end#0@@3| Tclass.UI.RangeEnd))))) (and (and (forall ((|key#0@@53| T@U) ) (!  (=> (and (= (type |key#0@@53|) (SeqType BoxType)) ($Is |key#0@@53| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@58|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) ($Box |key#0@@53|))) (|MapSpec.__default.InRange#canCall| |start#0@@3| |key#0@@53| |end#0@@3|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) ($Box |key#0@@53|))) (MapSpec.__default.InRange |start#0@@3| |key#0@@53| |end#0@@3|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@58|)))) :qid |BucketsL.777:11| :skolemid |1751| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@58|)) ($Box |key#0@@53|)))) :pattern ( (MapSpec.__default.InRange |start#0@@3| |key#0@@53| |end#0@@3|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) ($Box |key#0@@53|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#251| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) |start#0@@3| |end#0@@3|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@58|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampRange ($LS $ly@@70) |bucket#0@@58| |start#0@@3| |end#0@@3|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#251| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@58|)) |start#0@@3| |end#0@@3|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@58|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.774:22| :skolemid |1752| :pattern ( (BucketsLib.__default.ClampRange ($LS $ly@@70) |bucket#0@@58| |start#0@@3| |end#0@@3|)) ))))
(assert  (=> (<= 74 $FunctionContextHeight) (forall (($ly@@71 T@U) (|bucket#0@@59| T@U) (|start#0@@4| T@U) (|end#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@71) LayerTypeType) (= (type |bucket#0@@59|) DatatypeTypeType)) (= (type |start#0@@4|) DatatypeTypeType)) (= (type |end#0@@4|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampRange#canCall| (Lit |bucket#0@@59|) (Lit |start#0@@4|) (Lit |end#0@@4|)) (and (not (= 74 $FunctionContextHeight)) (and (and ($Is |bucket#0@@59| Tclass.BucketsLib.Bucket) ($Is |start#0@@4| Tclass.UI.RangeStart)) ($Is |end#0@@4| Tclass.UI.RangeEnd))))) (and (and (forall ((|key#0@@54| T@U) ) (!  (=> (and (= (type |key#0@@54|) (SeqType BoxType)) ($Is |key#0@@54| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@59|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@59|))) ($Box |key#0@@54|))) (|MapSpec.__default.InRange#canCall| (Lit |start#0@@4|) |key#0@@54| (Lit |end#0@@4|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@59|))) ($Box |key#0@@54|))) (MapSpec.__default.InRange (Lit |start#0@@4|) |key#0@@54| (Lit |end#0@@4|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@59|))))) :qid |BucketsL.777:11| :skolemid |1753| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@59|)) ($Box |key#0@@54|)))) :pattern ( (MapSpec.__default.InRange |start#0@@4| |key#0@@54| |end#0@@4|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@59|)) ($Box |key#0@@54|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#251| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@59|))) (Lit |start#0@@4|) (Lit |end#0@@4|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@59|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampRange ($LS $ly@@71) (Lit |bucket#0@@59|) (Lit |start#0@@4|) (Lit |end#0@@4|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#251| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@59|))) (Lit |start#0@@4|) (Lit |end#0@@4|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@59|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.774:22| :weight 3 :skolemid |1754| :pattern ( (BucketsLib.__default.ClampRange ($LS $ly@@71) (Lit |bucket#0@@59|) (Lit |start#0@@4|) (Lit |end#0@@4|))) ))))
(assert (forall ((arg0@@384 T@U) (arg1@@196 T@U) (arg2@@137 T@U) ) (! (= (type (BucketsLib.__default.ClampStart arg0@@384 arg1@@196 arg2@@137)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ClampStart| :pattern ( (BucketsLib.__default.ClampStart arg0@@384 arg1@@196 arg2@@137)) )))
(assert (forall (($ly@@72 T@U) (|bucket#0@@60| T@U) (|start#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@72) LayerTypeType) (= (type |bucket#0@@60|) DatatypeTypeType)) (= (type |start#0@@5|) DatatypeTypeType)) (= (BucketsLib.__default.ClampStart ($LS $ly@@72) |bucket#0@@60| |start#0@@5|) (BucketsLib.__default.ClampStart $ly@@72 |bucket#0@@60| |start#0@@5|))) :qid |BucketsL.780:22| :skolemid |1758| :pattern ( (BucketsLib.__default.ClampStart ($LS $ly@@72) |bucket#0@@60| |start#0@@5|)) )))
(assert (forall (($ly@@73 T@U) (|bucket#0@@61| T@U) (|start#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@73) LayerTypeType) (= (type |bucket#0@@61|) DatatypeTypeType)) (= (type |start#0@@6|) DatatypeTypeType)) (= (BucketsLib.__default.ClampStart $ly@@73 |bucket#0@@61| |start#0@@6|) (BucketsLib.__default.ClampStart $LZ |bucket#0@@61| |start#0@@6|))) :qid |BucketsL.780:22| :skolemid |1759| :pattern ( (BucketsLib.__default.ClampStart (AsFuelBottom $ly@@73) |bucket#0@@61| |start#0@@6|)) )))
(assert  (=> (<= 75 $FunctionContextHeight) (forall (($ly@@74 T@U) (|bucket#0@@62| T@U) (|start#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@74) LayerTypeType) (= (type |bucket#0@@62|) DatatypeTypeType)) (= (type |start#0@@7|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampStart#canCall| |bucket#0@@62| |start#0@@7|) (and (not (= 75 $FunctionContextHeight)) (and ($Is |bucket#0@@62| Tclass.BucketsLib.Bucket) ($Is |start#0@@7| Tclass.UI.RangeStart))))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.ClampStart $ly@@74 |bucket#0@@62| |start#0@@7|)) ($Is (BucketsLib.__default.ClampStart $ly@@74 |bucket#0@@62| |start#0@@7|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.780:22| :skolemid |1760| :pattern ( (BucketsLib.__default.ClampStart $ly@@74 |bucket#0@@62| |start#0@@7|)) ))))
(assert (forall (($ly@@75 T@U) (|bucket#0@@63| T@U) (|start#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@75) LayerTypeType) (= (type |bucket#0@@63|) DatatypeTypeType)) (= (type |start#0@@8|) DatatypeTypeType)) (and ($Is |bucket#0@@63| Tclass.BucketsLib.Bucket) ($Is |start#0@@8| Tclass.UI.RangeStart))) (and (=> (|BucketsLib.__default.ClampStart#requires| $ly@@75 |bucket#0@@63| |start#0@@8|) true) (=> true (|BucketsLib.__default.ClampStart#requires| $ly@@75 |bucket#0@@63| |start#0@@8|)))) :qid |BucketsL.780:22| :skolemid |1761| :pattern ( (|BucketsLib.__default.ClampStart#requires| $ly@@75 |bucket#0@@63| |start#0@@8|)) )))
(assert (forall ((arg0@@385 T@U) (arg1@@197 T@U) (arg2@@138 T@U) ) (! (= (type (|lambda#271| arg0@@385 arg1@@197 arg2@@138)) (MapType0Type BoxType boolType)) :qid |funType:lambda#271| :pattern ( (|lambda#271| arg0@@385 arg1@@197 arg2@@138)) )))
(assert  (=> (<= 75 $FunctionContextHeight) (forall (($ly@@76 T@U) (|bucket#0@@64| T@U) (|start#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@76) LayerTypeType) (= (type |bucket#0@@64|) DatatypeTypeType)) (= (type |start#0@@9|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampStart#canCall| |bucket#0@@64| |start#0@@9|) (and (not (= 75 $FunctionContextHeight)) (and ($Is |bucket#0@@64| Tclass.BucketsLib.Bucket) ($Is |start#0@@9| Tclass.UI.RangeStart))))) (and (and (forall ((|key#0@@55| T@U) ) (!  (=> (and (= (type |key#0@@55|) (SeqType BoxType)) ($Is |key#0@@55| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@64|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) ($Box |key#0@@55|))) (|MapSpec.__default.LowerBound#canCall| |start#0@@9| |key#0@@55|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) ($Box |key#0@@55|))) (MapSpec.__default.LowerBound |start#0@@9| |key#0@@55|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@64|)))) :qid |BucketsL.783:11| :skolemid |1762| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@64|)) ($Box |key#0@@55|)))) :pattern ( (MapSpec.__default.LowerBound |start#0@@9| |key#0@@55|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) ($Box |key#0@@55|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#271| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) |start#0@@9|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@64|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampStart ($LS $ly@@76) |bucket#0@@64| |start#0@@9|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#271| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@64|)) |start#0@@9|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@64|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.780:22| :skolemid |1763| :pattern ( (BucketsLib.__default.ClampStart ($LS $ly@@76) |bucket#0@@64| |start#0@@9|)) ))))
(assert  (=> (<= 75 $FunctionContextHeight) (forall (($ly@@77 T@U) (|bucket#0@@65| T@U) (|start#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@77) LayerTypeType) (= (type |bucket#0@@65|) DatatypeTypeType)) (= (type |start#0@@10|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampStart#canCall| (Lit |bucket#0@@65|) (Lit |start#0@@10|)) (and (not (= 75 $FunctionContextHeight)) (and ($Is |bucket#0@@65| Tclass.BucketsLib.Bucket) ($Is |start#0@@10| Tclass.UI.RangeStart))))) (and (and (forall ((|key#0@@56| T@U) ) (!  (=> (and (= (type |key#0@@56|) (SeqType BoxType)) ($Is |key#0@@56| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@65|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@65|))) ($Box |key#0@@56|))) (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@10|) |key#0@@56|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@65|))) ($Box |key#0@@56|))) (MapSpec.__default.LowerBound (Lit |start#0@@10|) |key#0@@56|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@65|))))) :qid |BucketsL.783:11| :skolemid |1764| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@65|)) ($Box |key#0@@56|)))) :pattern ( (MapSpec.__default.LowerBound |start#0@@10| |key#0@@56|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@65|)) ($Box |key#0@@56|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#271| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@65|))) (Lit |start#0@@10|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@65|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampStart ($LS $ly@@77) (Lit |bucket#0@@65|) (Lit |start#0@@10|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#271| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@65|))) (Lit |start#0@@10|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@65|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.780:22| :weight 3 :skolemid |1765| :pattern ( (BucketsLib.__default.ClampStart ($LS $ly@@77) (Lit |bucket#0@@65|) (Lit |start#0@@10|))) ))))
(assert (forall ((arg0@@386 T@U) (arg1@@198 T@U) (arg2@@139 T@U) ) (! (= (type (BucketsLib.__default.ClampEnd arg0@@386 arg1@@198 arg2@@139)) DatatypeTypeType) :qid |funType:BucketsLib.__default.ClampEnd| :pattern ( (BucketsLib.__default.ClampEnd arg0@@386 arg1@@198 arg2@@139)) )))
(assert (forall (($ly@@78 T@U) (|bucket#0@@66| T@U) (|end#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@78) LayerTypeType) (= (type |bucket#0@@66|) DatatypeTypeType)) (= (type |end#0@@5|) DatatypeTypeType)) (= (BucketsLib.__default.ClampEnd ($LS $ly@@78) |bucket#0@@66| |end#0@@5|) (BucketsLib.__default.ClampEnd $ly@@78 |bucket#0@@66| |end#0@@5|))) :qid |BucketsL.786:22| :skolemid |1769| :pattern ( (BucketsLib.__default.ClampEnd ($LS $ly@@78) |bucket#0@@66| |end#0@@5|)) )))
(assert (forall (($ly@@79 T@U) (|bucket#0@@67| T@U) (|end#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@79) LayerTypeType) (= (type |bucket#0@@67|) DatatypeTypeType)) (= (type |end#0@@6|) DatatypeTypeType)) (= (BucketsLib.__default.ClampEnd $ly@@79 |bucket#0@@67| |end#0@@6|) (BucketsLib.__default.ClampEnd $LZ |bucket#0@@67| |end#0@@6|))) :qid |BucketsL.786:22| :skolemid |1770| :pattern ( (BucketsLib.__default.ClampEnd (AsFuelBottom $ly@@79) |bucket#0@@67| |end#0@@6|)) )))
(assert  (=> (<= 76 $FunctionContextHeight) (forall (($ly@@80 T@U) (|bucket#0@@68| T@U) (|end#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@80) LayerTypeType) (= (type |bucket#0@@68|) DatatypeTypeType)) (= (type |end#0@@7|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampEnd#canCall| |bucket#0@@68| |end#0@@7|) (and (not (= 76 $FunctionContextHeight)) (and ($Is |bucket#0@@68| Tclass.BucketsLib.Bucket) ($Is |end#0@@7| Tclass.UI.RangeEnd))))) (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.ClampEnd $ly@@80 |bucket#0@@68| |end#0@@7|)) ($Is (BucketsLib.__default.ClampEnd $ly@@80 |bucket#0@@68| |end#0@@7|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.786:22| :skolemid |1771| :pattern ( (BucketsLib.__default.ClampEnd $ly@@80 |bucket#0@@68| |end#0@@7|)) ))))
(assert (forall (($ly@@81 T@U) (|bucket#0@@69| T@U) (|end#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@81) LayerTypeType) (= (type |bucket#0@@69|) DatatypeTypeType)) (= (type |end#0@@8|) DatatypeTypeType)) (and ($Is |bucket#0@@69| Tclass.BucketsLib.Bucket) ($Is |end#0@@8| Tclass.UI.RangeEnd))) (and (=> (|BucketsLib.__default.ClampEnd#requires| $ly@@81 |bucket#0@@69| |end#0@@8|) true) (=> true (|BucketsLib.__default.ClampEnd#requires| $ly@@81 |bucket#0@@69| |end#0@@8|)))) :qid |BucketsL.786:22| :skolemid |1772| :pattern ( (|BucketsLib.__default.ClampEnd#requires| $ly@@81 |bucket#0@@69| |end#0@@8|)) )))
(assert (forall ((arg0@@387 T@U) (arg1@@199 T@U) (arg2@@140 T@U) ) (! (= (type (|lambda#291| arg0@@387 arg1@@199 arg2@@140)) (MapType0Type BoxType boolType)) :qid |funType:lambda#291| :pattern ( (|lambda#291| arg0@@387 arg1@@199 arg2@@140)) )))
(assert  (=> (<= 76 $FunctionContextHeight) (forall (($ly@@82 T@U) (|bucket#0@@70| T@U) (|end#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@82) LayerTypeType) (= (type |bucket#0@@70|) DatatypeTypeType)) (= (type |end#0@@9|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampEnd#canCall| |bucket#0@@70| |end#0@@9|) (and (not (= 76 $FunctionContextHeight)) (and ($Is |bucket#0@@70| Tclass.BucketsLib.Bucket) ($Is |end#0@@9| Tclass.UI.RangeEnd))))) (and (and (forall ((|key#0@@57| T@U) ) (!  (=> (and (= (type |key#0@@57|) (SeqType BoxType)) ($Is |key#0@@57| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@70|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) ($Box |key#0@@57|))) (|MapSpec.__default.UpperBound#canCall| |key#0@@57| |end#0@@9|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) ($Box |key#0@@57|))) (MapSpec.__default.UpperBound |key#0@@57| |end#0@@9|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@70|)))) :qid |BucketsL.789:11| :skolemid |1773| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@70|)) ($Box |key#0@@57|)))) :pattern ( (MapSpec.__default.UpperBound |key#0@@57| |end#0@@9|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) ($Box |key#0@@57|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#291| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) |end#0@@9|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@70|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampEnd ($LS $ly@@82) |bucket#0@@70| |end#0@@9|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#291| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@70|)) |end#0@@9|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@70|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.786:22| :skolemid |1774| :pattern ( (BucketsLib.__default.ClampEnd ($LS $ly@@82) |bucket#0@@70| |end#0@@9|)) ))))
(assert  (=> (<= 76 $FunctionContextHeight) (forall (($ly@@83 T@U) (|bucket#0@@71| T@U) (|end#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@83) LayerTypeType) (= (type |bucket#0@@71|) DatatypeTypeType)) (= (type |end#0@@10|) DatatypeTypeType)) (or (|BucketsLib.__default.ClampEnd#canCall| (Lit |bucket#0@@71|) (Lit |end#0@@10|)) (and (not (= 76 $FunctionContextHeight)) (and ($Is |bucket#0@@71| Tclass.BucketsLib.Bucket) ($Is |end#0@@10| Tclass.UI.RangeEnd))))) (and (and (forall ((|key#0@@58| T@U) ) (!  (=> (and (= (type |key#0@@58|) (SeqType BoxType)) ($Is |key#0@@58| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@71|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@71|))) ($Box |key#0@@58|))) (|MapSpec.__default.UpperBound#canCall| |key#0@@58| (Lit |end#0@@10|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@71|))) ($Box |key#0@@58|))) (MapSpec.__default.UpperBound |key#0@@58| (Lit |end#0@@10|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@71|))))) :qid |BucketsL.789:11| :skolemid |1775| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@71|)) ($Box |key#0@@58|)))) :pattern ( (MapSpec.__default.UpperBound |key#0@@58| |end#0@@10|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@71|)) ($Box |key#0@@58|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#291| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@71|))) (Lit |end#0@@10|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@71|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.ClampEnd ($LS $ly@@83) (Lit |bucket#0@@71|) (Lit |end#0@@10|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#291| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@71|))) (Lit |end#0@@10|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@71|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.786:22| :weight 3 :skolemid |1776| :pattern ( (BucketsLib.__default.ClampEnd ($LS $ly@@83) (Lit |bucket#0@@71|) (Lit |end#0@@10|))) ))))
(assert (forall ((arg0@@388 T@U) (arg1@@200 T@U) ) (! (= (type (BucketsLib.__default.KeyValueMapOfBucket arg0@@388 arg1@@200)) (MapType BoxType BoxType)) :qid |funType:BucketsLib.__default.KeyValueMapOfBucket| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket arg0@@388 arg1@@200)) )))
(assert (forall (($ly@@84 T@U) (|bucket#0@@72| T@U) ) (!  (=> (and (= (type $ly@@84) LayerTypeType) (= (type |bucket#0@@72|) DatatypeTypeType)) (= (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@84) |bucket#0@@72|) (BucketsLib.__default.KeyValueMapOfBucket $ly@@84 |bucket#0@@72|))) :qid |BucketsL.794:22| :skolemid |1780| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@84) |bucket#0@@72|)) )))
(assert (forall (($ly@@85 T@U) (|bucket#0@@73| T@U) ) (!  (=> (and (= (type $ly@@85) LayerTypeType) (= (type |bucket#0@@73|) DatatypeTypeType)) (= (BucketsLib.__default.KeyValueMapOfBucket $ly@@85 |bucket#0@@73|) (BucketsLib.__default.KeyValueMapOfBucket $LZ |bucket#0@@73|))) :qid |BucketsL.794:22| :skolemid |1781| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket (AsFuelBottom $ly@@85) |bucket#0@@73|)) )))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (forall ((bx@@119 T@U) ) (!  (=> (and (= (type bx@@119) BoxType) ($IsBox bx@@119 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@119)) bx@@119) ($Is ($Unbox (SeqType BoxType) bx@@119) Tclass.ValueType.Value))) :qid |unknown.0:0| :skolemid |1782| :pattern ( ($IsBox bx@@119 Tclass.ValueType.Value)) )))
(assert  (=> (<= 78 $FunctionContextHeight) (forall (($ly@@86 T@U) (|bucket#0@@74| T@U) ) (!  (=> (and (and (= (type $ly@@86) LayerTypeType) (= (type |bucket#0@@74|) DatatypeTypeType)) (or (|BucketsLib.__default.KeyValueMapOfBucket#canCall| |bucket#0@@74|) (and (not (= 78 $FunctionContextHeight)) ($Is |bucket#0@@74| Tclass.BucketsLib.Bucket)))) ($Is (BucketsLib.__default.KeyValueMapOfBucket $ly@@86 |bucket#0@@74|) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))) :qid |BucketsL.794:22| :skolemid |1783| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket $ly@@86 |bucket#0@@74|)) ))))
(assert (forall (($ly@@87 T@U) (|bucket#0@@75| T@U) ) (!  (=> (and (and (= (type $ly@@87) LayerTypeType) (= (type |bucket#0@@75|) DatatypeTypeType)) ($Is |bucket#0@@75| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.KeyValueMapOfBucket#requires| $ly@@87 |bucket#0@@75|) true) (=> true (|BucketsLib.__default.KeyValueMapOfBucket#requires| $ly@@87 |bucket#0@@75|)))) :qid |BucketsL.794:22| :skolemid |1784| :pattern ( (|BucketsLib.__default.KeyValueMapOfBucket#requires| $ly@@87 |bucket#0@@75|)) )))
(assert  (and (and (and (and (= (type ValueMessage.__default.DefineDefault) DatatypeTypeType) (forall ((arg0@@389 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@389)) (SeqType BoxType)) :qid |funType:ValueMessage.Message.value| :pattern ( (ValueMessage.Message.value arg0@@389)) ))) (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType))) (forall ((arg0@@390 T@U) (arg1@@201 T@U) (arg2@@141 T@U) (arg3@@96 T@U) (arg4@@80 T@U) ) (! (= (type (|lambda#311| arg0@@390 arg1@@201 arg2@@141 arg3@@96 arg4@@80)) (MapType0Type BoxType boolType)) :qid |funType:lambda#311| :pattern ( (|lambda#311| arg0@@390 arg1@@201 arg2@@141 arg3@@96 arg4@@80)) ))) (forall ((arg0@@391 T@U) (arg1@@202 T@U) ) (! (= (type (|lambda#312| arg0@@391 arg1@@202)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#312| :pattern ( (|lambda#312| arg0@@391 arg1@@202)) ))))
(assert  (=> (<= 78 $FunctionContextHeight) (forall (($ly@@88 T@U) (|bucket#0@@76| T@U) ) (!  (=> (and (and (= (type $ly@@88) LayerTypeType) (= (type |bucket#0@@76|) DatatypeTypeType)) (or (|BucketsLib.__default.KeyValueMapOfBucket#canCall| |bucket#0@@76|) (and (not (= 78 $FunctionContextHeight)) ($Is |bucket#0@@76| Tclass.BucketsLib.Bucket)))) (and (forall ((|key#0@@59| T@U) ) (!  (=> (and (= (type |key#0@@59|) (SeqType BoxType)) ($Is |key#0@@59| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@76|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@59|))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@76|) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@59|))) (Lit ValueMessage.__default.DefineDefault))) |ValueMessage.__default.DefaultValue#canCall|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@59|))) (not (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@59|))) (Lit ValueMessage.__default.DefineDefault))) ValueMessage.__default.DefaultValue))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@76|) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@59|))) (Lit ValueMessage.__default.DefineDefault)))))) :qid |BucketsL.796:9| :skolemid |1785| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@59|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@76|)) ($Box |key#0@@59|))) )) (= (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@88) |bucket#0@@76|) (|Map#Glue| (|lambda#311| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@76|)) (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) (Lit ValueMessage.__default.DefineDefault) ValueMessage.__default.DefaultValue) (|lambda#312| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@76|)) (Lit ValueMessage.__default.DefineDefault)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))))) :qid |BucketsL.794:22| :skolemid |1786| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@88) |bucket#0@@76|)) ))))
(assert  (=> (<= 78 $FunctionContextHeight) (forall (($ly@@89 T@U) (|bucket#0@@77| T@U) ) (!  (=> (and (and (= (type $ly@@89) LayerTypeType) (= (type |bucket#0@@77|) DatatypeTypeType)) (or (|BucketsLib.__default.KeyValueMapOfBucket#canCall| (Lit |bucket#0@@77|)) (and (not (= 78 $FunctionContextHeight)) ($Is |bucket#0@@77| Tclass.BucketsLib.Bucket)))) (and (forall ((|key#0@@60| T@U) ) (!  (=> (and (= (type |key#0@@60|) (SeqType BoxType)) ($Is |key#0@@60| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@77|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@77|))) ($Box |key#0@@60|))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@77|)) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) ($Box |key#0@@60|))) (Lit ValueMessage.__default.DefineDefault))) |ValueMessage.__default.DefaultValue#canCall|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@77|))) ($Box |key#0@@60|))) (not (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) ($Box |key#0@@60|))) (Lit ValueMessage.__default.DefineDefault))) ValueMessage.__default.DefaultValue))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@77|)) |ValueMessage.__default.DefineDefault#canCall|) (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) ($Box |key#0@@60|))) (Lit ValueMessage.__default.DefineDefault)))))) :qid |BucketsL.796:9| :skolemid |1787| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@77|)) ($Box |key#0@@60|)))) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@77|)) ($Box |key#0@@60|))) )) (= (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@89) (Lit |bucket#0@@77|)) (|Map#Glue| (|lambda#311| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@77|))) (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) (Lit ValueMessage.__default.DefineDefault) ValueMessage.__default.DefaultValue) (|lambda#312| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@77|)))) (Lit ValueMessage.__default.DefineDefault)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))))) :qid |BucketsL.794:22| :weight 3 :skolemid |1788| :pattern ( (BucketsLib.__default.KeyValueMapOfBucket ($LS $ly@@89) (Lit |bucket#0@@77|))) ))))
(assert (forall ((arg0@@392 T@U) (arg1@@203 T@U) ) (! (= (type (BucketsLib.__default.SortedSeqOfKeyValueMap arg0@@392 arg1@@203)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SortedSeqOfKeyValueMap| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap arg0@@392 arg1@@203)) )))
(assert (forall (($ly@@90 T@U) (|m#0@@13| T@U) ) (!  (=> (and (= (type $ly@@90) LayerTypeType) (= (type |m#0@@13|) (MapType BoxType BoxType))) (= (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@90) |m#0@@13|) (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@90 |m#0@@13|))) :qid |BucketsL.800:22| :skolemid |1795| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@90) |m#0@@13|)) )))
(assert (forall (($ly@@91 T@U) (|m#0@@14| T@U) ) (!  (=> (and (= (type $ly@@91) LayerTypeType) (= (type |m#0@@14|) (MapType BoxType BoxType))) (= (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@91 |m#0@@14|) (BucketsLib.__default.SortedSeqOfKeyValueMap $LZ |m#0@@14|))) :qid |BucketsL.800:22| :skolemid |1796| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap (AsFuelBottom $ly@@91) |m#0@@14|)) )))
(assert (= (type Tclass.UI.SuccResult) TyType))
(assert (= (Tag Tclass.UI.SuccResult) Tagclass.UI.SuccResult))
(assert (forall ((bx@@120 T@U) ) (!  (=> (and (= (type bx@@120) BoxType) ($IsBox bx@@120 Tclass.UI.SuccResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@120)) bx@@120) ($Is ($Unbox DatatypeTypeType bx@@120) Tclass.UI.SuccResult))) :qid |unknown.0:0| :skolemid |1797| :pattern ( ($IsBox bx@@120 Tclass.UI.SuccResult)) )))
(assert  (=> (<= 80 $FunctionContextHeight) (forall (($ly@@92 T@U) (|m#0@@15| T@U) ) (!  (=> (and (and (= (type $ly@@92) LayerTypeType) (= (type |m#0@@15|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@15|) (and (not (= 80 $FunctionContextHeight)) ($Is |m#0@@15| (TMap Tclass.KeyType.Key Tclass.ValueType.Value))))) ($Is (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@92 |m#0@@15|) (TSeq Tclass.UI.SuccResult))) :qid |BucketsL.800:22| :skolemid |1798| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@92 |m#0@@15|)) ))))
(assert (forall (($ly@@93 T@U) (|m#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@93) LayerTypeType) (= (type |m#0@@16|) (MapType BoxType BoxType))) ($Is |m#0@@16| (TMap Tclass.KeyType.Key Tclass.ValueType.Value))) (and (=> (|BucketsLib.__default.SortedSeqOfKeyValueMap#requires| $ly@@93 |m#0@@16|) true) (=> true (|BucketsLib.__default.SortedSeqOfKeyValueMap#requires| $ly@@93 |m#0@@16|)))) :qid |BucketsL.800:22| :skolemid |1799| :pattern ( (|BucketsLib.__default.SortedSeqOfKeyValueMap#requires| $ly@@93 |m#0@@16|)) )))
(assert (forall ((arg0@@393 T@U) (arg1@@204 T@U) ) (! (= (type (|#UI.SuccResult.SuccResult| arg0@@393 arg1@@204)) DatatypeTypeType) :qid |funType:#UI.SuccResult.SuccResult| :pattern ( (|#UI.SuccResult.SuccResult| arg0@@393 arg1@@204)) )))
(assert  (=> (<= 80 $FunctionContextHeight) (forall (($ly@@94 T@U) (|m#0@@17| T@U) ) (!  (=> (and (and (= (type $ly@@94) LayerTypeType) (= (type |m#0@@17|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@17|) (and (not (= 80 $FunctionContextHeight)) ($Is |m#0@@17| (TMap Tclass.KeyType.Key Tclass.ValueType.Value))))) (and (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (|Map#Domain| |m#0@@17|)) (let ((|max#0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (|Map#Domain| |m#0@@17|)))) (=> (not (Options.Option.None_q |max#0|)) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@17| (Options.Option.value |max#0|)) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@17| (Options.Option.value |max#0|))))))) (= (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@94) |m#0@@17|) (let ((|max#0@@0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (|Map#Domain| |m#0@@17|)))) (ite (Options.Option.None_q |max#0@@0|) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.SortedSeqOfKeyValueMap $ly@@94 (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@17| (Options.Option.value |max#0@@0|))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#UI.SuccResult.SuccResult| ($Unbox (SeqType BoxType) (Options.Option.value |max#0@@0|)) ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |m#0@@17|) (Options.Option.value |max#0@@0|)))))))))))) :qid |BucketsL.800:22| :skolemid |1800| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@94) |m#0@@17|)) ))))
(assert  (=> (<= 80 $FunctionContextHeight) (forall (($ly@@95 T@U) (|m#0@@18| T@U) ) (!  (=> (and (and (= (type $ly@@95) LayerTypeType) (= (type |m#0@@18|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Lit |m#0@@18|)) (and (not (= 80 $FunctionContextHeight)) ($Is |m#0@@18| (TMap Tclass.KeyType.Key Tclass.ValueType.Value))))) (and (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit (|Map#Domain| (Lit |m#0@@18|)))) (let ((|max#1| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (Lit (|Map#Domain| (Lit |m#0@@18|)))))) (=> (not (Options.Option.None_q |max#1|)) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value (Lit |m#0@@18|) (Options.Option.value |max#1|)) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 (Lit |m#0@@18|) (Options.Option.value |max#1|))))))) (= (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@95) (Lit |m#0@@18|)) (let ((|max#1@@0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (Lit (|Map#Domain| (Lit |m#0@@18|)))))) (ite (Options.Option.None_q |max#1@@0|) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@95) (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 (Lit |m#0@@18|) (Options.Option.value |max#1@@0|))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#UI.SuccResult.SuccResult| ($Unbox (SeqType BoxType) (Options.Option.value |max#1@@0|)) ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit |m#0@@18|)) (Options.Option.value |max#1@@0|)))))))))))) :qid |BucketsL.800:22| :weight 3 :skolemid |1801| :pattern ( (BucketsLib.__default.SortedSeqOfKeyValueMap ($LS $ly@@95) (Lit |m#0@@18|))) ))))
(assert (forall ((arg0@@394 T@U) (arg1@@205 T@U) (arg2@@142 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketLeft arg0@@394 arg1@@205 arg2@@142)) DatatypeTypeType) :qid |funType:BucketsLib.__default.SplitBucketLeft| :pattern ( (BucketsLib.__default.SplitBucketLeft arg0@@394 arg1@@205 arg2@@142)) )))
(assert (forall (($ly@@96 T@U) (|bucket#0@@78| T@U) (|pivot#0| T@U) ) (!  (=> (and (and (= (type $ly@@96) LayerTypeType) (= (type |bucket#0@@78|) DatatypeTypeType)) (= (type |pivot#0|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketLeft ($LS $ly@@96) |bucket#0@@78| |pivot#0|) (BucketsLib.__default.SplitBucketLeft $ly@@96 |bucket#0@@78| |pivot#0|))) :qid |BucketsL.865:22| :skolemid |1833| :pattern ( (BucketsLib.__default.SplitBucketLeft ($LS $ly@@96) |bucket#0@@78| |pivot#0|)) )))
(assert (forall (($ly@@97 T@U) (|bucket#0@@79| T@U) (|pivot#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@97) LayerTypeType) (= (type |bucket#0@@79|) DatatypeTypeType)) (= (type |pivot#0@@0|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketLeft $ly@@97 |bucket#0@@79| |pivot#0@@0|) (BucketsLib.__default.SplitBucketLeft $LZ |bucket#0@@79| |pivot#0@@0|))) :qid |BucketsL.865:22| :skolemid |1834| :pattern ( (BucketsLib.__default.SplitBucketLeft (AsFuelBottom $ly@@97) |bucket#0@@79| |pivot#0@@0|)) )))
(assert  (=> (<= 85 $FunctionContextHeight) (forall (($ly@@98 T@U) (|bucket#0@@80| T@U) (|pivot#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@98) LayerTypeType) (= (type |bucket#0@@80|) DatatypeTypeType)) (= (type |pivot#0@@1|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketLeft#canCall| |bucket#0@@80| |pivot#0@@1|) (and (not (= 85 $FunctionContextHeight)) (and ($Is |bucket#0@@80| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@1| Tclass.KeyType.Key))))) (and (and (and (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SplitBucketLeft $ly@@98 |bucket#0@@80| |pivot#0@@1|)) (= (|Seq#Length| (BucketsLib.Bucket.keys (BucketsLib.__default.SplitBucketLeft $ly@@98 |bucket#0@@80| |pivot#0@@1|))) (|Seq#Length| (BucketsLib.Bucket.msgs (BucketsLib.__default.SplitBucketLeft $ly@@98 |bucket#0@@80| |pivot#0@@1|))))) (=> (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@80|)) (BucketsLib.__default.WFBucket (BucketsLib.__default.SplitBucketLeft $ly@@98 |bucket#0@@80| |pivot#0@@1|)))) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SplitBucketLeft $ly@@98 |bucket#0@@80| |pivot#0@@1|))) ($Is (BucketsLib.__default.SplitBucketLeft $ly@@98 |bucket#0@@80| |pivot#0@@1|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.865:22| :skolemid |1835| :pattern ( (BucketsLib.__default.SplitBucketLeft $ly@@98 |bucket#0@@80| |pivot#0@@1|)) ))))
(assert (forall (($ly@@99 T@U) (|bucket#0@@81| T@U) (|pivot#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@99) LayerTypeType) (= (type |bucket#0@@81|) DatatypeTypeType)) (= (type |pivot#0@@2|) (SeqType BoxType))) (and ($Is |bucket#0@@81| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@2| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketLeft#requires| $ly@@99 |bucket#0@@81| |pivot#0@@2|) true) (=> true (|BucketsLib.__default.SplitBucketLeft#requires| $ly@@99 |bucket#0@@81| |pivot#0@@2|)))) :qid |BucketsL.865:22| :skolemid |1836| :pattern ( (|BucketsLib.__default.SplitBucketLeft#requires| $ly@@99 |bucket#0@@81| |pivot#0@@2|)) )))
(assert  (=> (<= 85 $FunctionContextHeight) (forall (($ly@@100 T@U) (|bucket#0@@82| T@U) (|pivot#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@100) LayerTypeType) (= (type |bucket#0@@82|) DatatypeTypeType)) (= (type |pivot#0@@3|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketLeft#canCall| |bucket#0@@82| |pivot#0@@3|) (and (not (= 85 $FunctionContextHeight)) (and ($Is |bucket#0@@82| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@3| Tclass.KeyType.Key))))) (and (and (forall ((|key#0@@61| T@U) ) (!  (=> (and (= (type |key#0@@61|) (SeqType BoxType)) ($Is |key#0@@61| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@82|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) ($Box |key#0@@61|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@61| |pivot#0@@3|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) ($Box |key#0@@61|))) (Lexicographic__Byte__Order.__default.lt |key#0@@61| |pivot#0@@3|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@82|)))) :qid |BucketsL.871:11| :skolemid |1837| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@82|)) ($Box |key#0@@61|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@61| |pivot#0@@3|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) ($Box |key#0@@61|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) |pivot#0@@3|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@82|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SplitBucketLeft ($LS $ly@@100) |bucket#0@@82| |pivot#0@@3|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@82|)) |pivot#0@@3|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@82|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.865:22| :skolemid |1838| :pattern ( (BucketsLib.__default.SplitBucketLeft ($LS $ly@@100) |bucket#0@@82| |pivot#0@@3|)) ))))
(assert  (=> (<= 85 $FunctionContextHeight) (forall (($ly@@101 T@U) (|bucket#0@@83| T@U) (|pivot#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@101) LayerTypeType) (= (type |bucket#0@@83|) DatatypeTypeType)) (= (type |pivot#0@@4|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketLeft#canCall| (Lit |bucket#0@@83|) (Lit |pivot#0@@4|)) (and (not (= 85 $FunctionContextHeight)) (and ($Is |bucket#0@@83| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@4| Tclass.KeyType.Key))))) (and (and (forall ((|key#0@@62| T@U) ) (!  (=> (and (= (type |key#0@@62|) (SeqType BoxType)) ($Is |key#0@@62| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@83|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@83|))) ($Box |key#0@@62|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@62| (Lit |pivot#0@@4|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@83|))) ($Box |key#0@@62|))) (Lexicographic__Byte__Order.__default.lt |key#0@@62| (Lit |pivot#0@@4|))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@83|))))) :qid |BucketsL.871:11| :skolemid |1839| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@83|)) ($Box |key#0@@62|)))) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@62| |pivot#0@@4|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@83|)) ($Box |key#0@@62|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@83|))) (Lit |pivot#0@@4|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@83|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SplitBucketLeft ($LS $ly@@101) (Lit |bucket#0@@83|) (Lit |pivot#0@@4|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#101| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@83|))) (Lit |pivot#0@@4|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@83|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.865:22| :weight 3 :skolemid |1840| :pattern ( (BucketsLib.__default.SplitBucketLeft ($LS $ly@@101) (Lit |bucket#0@@83|) (Lit |pivot#0@@4|))) ))))
(assert (forall ((arg0@@395 T@U) (arg1@@206 T@U) (arg2@@143 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketRight arg0@@395 arg1@@206 arg2@@143)) DatatypeTypeType) :qid |funType:BucketsLib.__default.SplitBucketRight| :pattern ( (BucketsLib.__default.SplitBucketRight arg0@@395 arg1@@206 arg2@@143)) )))
(assert (forall (($ly@@102 T@U) (|bucket#0@@84| T@U) (|pivot#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@102) LayerTypeType) (= (type |bucket#0@@84|) DatatypeTypeType)) (= (type |pivot#0@@5|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketRight ($LS $ly@@102) |bucket#0@@84| |pivot#0@@5|) (BucketsLib.__default.SplitBucketRight $ly@@102 |bucket#0@@84| |pivot#0@@5|))) :qid |BucketsL.874:22| :skolemid |1848| :pattern ( (BucketsLib.__default.SplitBucketRight ($LS $ly@@102) |bucket#0@@84| |pivot#0@@5|)) )))
(assert (forall (($ly@@103 T@U) (|bucket#0@@85| T@U) (|pivot#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@103) LayerTypeType) (= (type |bucket#0@@85|) DatatypeTypeType)) (= (type |pivot#0@@6|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketRight $ly@@103 |bucket#0@@85| |pivot#0@@6|) (BucketsLib.__default.SplitBucketRight $LZ |bucket#0@@85| |pivot#0@@6|))) :qid |BucketsL.874:22| :skolemid |1849| :pattern ( (BucketsLib.__default.SplitBucketRight (AsFuelBottom $ly@@103) |bucket#0@@85| |pivot#0@@6|)) )))
(assert  (=> (<= 86 $FunctionContextHeight) (forall (($ly@@104 T@U) (|bucket#0@@86| T@U) (|pivot#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@104) LayerTypeType) (= (type |bucket#0@@86|) DatatypeTypeType)) (= (type |pivot#0@@7|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketRight#canCall| |bucket#0@@86| |pivot#0@@7|) (and (not (= 86 $FunctionContextHeight)) (and ($Is |bucket#0@@86| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@7| Tclass.KeyType.Key))))) (and (and (and (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SplitBucketRight $ly@@104 |bucket#0@@86| |pivot#0@@7|)) (= (|Seq#Length| (BucketsLib.Bucket.keys (BucketsLib.__default.SplitBucketRight $ly@@104 |bucket#0@@86| |pivot#0@@7|))) (|Seq#Length| (BucketsLib.Bucket.msgs (BucketsLib.__default.SplitBucketRight $ly@@104 |bucket#0@@86| |pivot#0@@7|))))) (=> (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |bucket#0@@86|)) (BucketsLib.__default.WFBucket (BucketsLib.__default.SplitBucketRight $ly@@104 |bucket#0@@86| |pivot#0@@7|)))) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SplitBucketRight $ly@@104 |bucket#0@@86| |pivot#0@@7|))) ($Is (BucketsLib.__default.SplitBucketRight $ly@@104 |bucket#0@@86| |pivot#0@@7|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.874:22| :skolemid |1850| :pattern ( (BucketsLib.__default.SplitBucketRight $ly@@104 |bucket#0@@86| |pivot#0@@7|)) ))))
(assert (forall (($ly@@105 T@U) (|bucket#0@@87| T@U) (|pivot#0@@8| T@U) ) (!  (=> (and (and (and (= (type $ly@@105) LayerTypeType) (= (type |bucket#0@@87|) DatatypeTypeType)) (= (type |pivot#0@@8|) (SeqType BoxType))) (and ($Is |bucket#0@@87| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@8| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketRight#requires| $ly@@105 |bucket#0@@87| |pivot#0@@8|) true) (=> true (|BucketsLib.__default.SplitBucketRight#requires| $ly@@105 |bucket#0@@87| |pivot#0@@8|)))) :qid |BucketsL.874:22| :skolemid |1851| :pattern ( (|BucketsLib.__default.SplitBucketRight#requires| $ly@@105 |bucket#0@@87| |pivot#0@@8|)) )))
(assert  (=> (<= 86 $FunctionContextHeight) (forall (($ly@@106 T@U) (|bucket#0@@88| T@U) (|pivot#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@106) LayerTypeType) (= (type |bucket#0@@88|) DatatypeTypeType)) (= (type |pivot#0@@9|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketRight#canCall| |bucket#0@@88| |pivot#0@@9|) (and (not (= 86 $FunctionContextHeight)) (and ($Is |bucket#0@@88| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@9| Tclass.KeyType.Key))))) (and (and (forall ((|key#0@@63| T@U) ) (!  (=> (and (= (type |key#0@@63|) (SeqType BoxType)) ($Is |key#0@@63| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@88|) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) ($Box |key#0@@63|))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@9| |key#0@@63|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) ($Box |key#0@@63|))) (Lexicographic__Byte__Order.__default.lte |pivot#0@@9| |key#0@@63|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@88|)))) :qid |BucketsL.880:11| :skolemid |1852| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@88|)) ($Box |key#0@@63|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@9| |key#0@@63|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) ($Box |key#0@@63|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) |pivot#0@@9|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@88|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SplitBucketRight ($LS $ly@@106) |bucket#0@@88| |pivot#0@@9|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@88|)) |pivot#0@@9|) (|lambda#102| (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@88|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.874:22| :skolemid |1853| :pattern ( (BucketsLib.__default.SplitBucketRight ($LS $ly@@106) |bucket#0@@88| |pivot#0@@9|)) ))))
(assert  (=> (<= 86 $FunctionContextHeight) (forall (($ly@@107 T@U) (|bucket#0@@89| T@U) (|pivot#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@107) LayerTypeType) (= (type |bucket#0@@89|) DatatypeTypeType)) (= (type |pivot#0@@10|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketRight#canCall| (Lit |bucket#0@@89|) (Lit |pivot#0@@10|)) (and (not (= 86 $FunctionContextHeight)) (and ($Is |bucket#0@@89| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@10| Tclass.KeyType.Key))))) (and (and (forall ((|key#0@@64| T@U) ) (!  (=> (and (= (type |key#0@@64|) (SeqType BoxType)) ($Is |key#0@@64| Tclass.KeyType.Key)) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@89|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@89|))) ($Box |key#0@@64|))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@10|) |key#0@@64|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@89|))) ($Box |key#0@@64|))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@10|) |key#0@@64|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@89|))))) :qid |BucketsL.880:11| :skolemid |1854| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@89|)) ($Box |key#0@@64|)))) :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@10| |key#0@@64|)) :pattern ( (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@89|)) ($Box |key#0@@64|))) )) (|BucketsLib.__default.B#canCall| (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@89|))) (Lit |pivot#0@@10|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@89|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SplitBucketRight ($LS $ly@@107) (Lit |bucket#0@@89|) (Lit |pivot#0@@10|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Glue| (|lambda#103| Tclass.KeyType.Key (|Map#Domain| (BucketsLib.Bucket.b (Lit |bucket#0@@89|))) (Lit |pivot#0@@10|)) (|lambda#102| (|Map#Elements| (Lit (BucketsLib.Bucket.b (Lit |bucket#0@@89|))))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketsL.874:22| :weight 3 :skolemid |1855| :pattern ( (BucketsLib.__default.SplitBucketRight ($LS $ly@@107) (Lit |bucket#0@@89|) (Lit |pivot#0@@10|))) ))))
(assert  (and (forall ((arg0@@396 T@U) (arg1@@207 T@U) (arg2@@144 Int) (arg3@@97 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketListLeft arg0@@396 arg1@@207 arg2@@144 arg3@@97)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketListLeft| :pattern ( (BucketsLib.__default.SplitBucketListLeft arg0@@396 arg1@@207 arg2@@144 arg3@@97)) )) (= (type StartFuel_PivotsLib._default.CutoffForLeft) LayerTypeType)))
(assert  (=> (<= 87 $FunctionContextHeight) (forall ((|blist#0@@19| T@U) (|pivots#0@@44| T@U) (|cLeft#0| Int) (|key#0@@65| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@19|) (SeqType BoxType)) (= (type |pivots#0@@44|) (SeqType BoxType))) (= (type |key#0@@65|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListLeft#canCall| |blist#0@@19| |pivots#0@@44| |cLeft#0| |key#0@@65|) (and (not (= 87 $FunctionContextHeight)) (and (and (and ($Is |blist#0@@19| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@44| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@65| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@19| |pivots#0@@44|) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft |pivots#0@@44| |key#0@@65|) |cLeft#0|)))))) ($Is (BucketsLib.__default.SplitBucketListLeft |blist#0@@19| |pivots#0@@44| |cLeft#0| |key#0@@65|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsL.883:32| :skolemid |1863| :pattern ( (BucketsLib.__default.SplitBucketListLeft |blist#0@@19| |pivots#0@@44| |cLeft#0| |key#0@@65|)) ))))
(assert (forall ((|blist#0@@20| T@U) (|pivots#0@@45| T@U) (|cLeft#0@@0| Int) (|key#0@@66| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@20|) (SeqType BoxType)) (= (type |pivots#0@@45|) (SeqType BoxType))) (= (type |key#0@@66|) (SeqType BoxType))) (and (and ($Is |blist#0@@20| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@45| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@66| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketListLeft#requires| |blist#0@@20| |pivots#0@@45| |cLeft#0@@0| |key#0@@66|) (and (BucketsLib.__default.WFBucketList |blist#0@@20| |pivots#0@@45|) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft |pivots#0@@45| |key#0@@66|) |cLeft#0@@0|))) (=> (and (BucketsLib.__default.WFBucketList |blist#0@@20| |pivots#0@@45|) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft |pivots#0@@45| |key#0@@66|) |cLeft#0@@0|)) (|BucketsLib.__default.SplitBucketListLeft#requires| |blist#0@@20| |pivots#0@@45| |cLeft#0@@0| |key#0@@66|)))) :qid |BucketsL.883:32| :skolemid |1864| :pattern ( (|BucketsLib.__default.SplitBucketListLeft#requires| |blist#0@@20| |pivots#0@@45| |cLeft#0@@0| |key#0@@66|)) )))
(assert (= (type StartFuel_BucketsLib._default.SplitBucketLeft) LayerTypeType))
(assert  (=> (<= 87 $FunctionContextHeight) (forall ((|blist#0@@21| T@U) (|pivots#0@@46| T@U) (|cLeft#0@@1| Int) (|key#0@@67| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@21|) (SeqType BoxType)) (= (type |pivots#0@@46|) (SeqType BoxType))) (= (type |key#0@@67|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListLeft#canCall| |blist#0@@21| |pivots#0@@46| |cLeft#0@@1| |key#0@@67|) (and (not (= 87 $FunctionContextHeight)) (and (and (and ($Is |blist#0@@21| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@46| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@67| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@21| |pivots#0@@46|) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft |pivots#0@@46| |key#0@@67|) |cLeft#0@@1|)))))) (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@21| |cLeft#0@@1|)) |key#0@@67|) (= (BucketsLib.__default.SplitBucketListLeft |blist#0@@21| |pivots#0@@46| |cLeft#0@@1| |key#0@@67|) (|Seq#Append| (|Seq#Take| |blist#0@@21| |cLeft#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@21| |cLeft#0@@1|)) |key#0@@67|))))))) :qid |BucketsL.883:32| :skolemid |1865| :pattern ( (BucketsLib.__default.SplitBucketListLeft |blist#0@@21| |pivots#0@@46| |cLeft#0@@1| |key#0@@67|)) ))))
(assert  (=> (<= 87 $FunctionContextHeight) (forall ((|blist#0@@22| T@U) (|pivots#0@@47| T@U) (|cLeft#0@@2| Int) (|key#0@@68| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@22|) (SeqType BoxType)) (= (type |pivots#0@@47|) (SeqType BoxType))) (= (type |key#0@@68|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListLeft#canCall| (Lit |blist#0@@22|) (Lit |pivots#0@@47|) (LitInt |cLeft#0@@2|) (Lit |key#0@@68|)) (and (not (= 87 $FunctionContextHeight)) (and (and (and ($Is |blist#0@@22| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@47| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@68| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@22|) (Lit |pivots#0@@47|))))) (= (PivotsLib.__default.CutoffForLeft StartFuel_PivotsLib._default.CutoffForLeft (Lit |pivots#0@@47|) (Lit |key#0@@68|)) (LitInt |cLeft#0@@2|))))))) (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@22|) (LitInt |cLeft#0@@2|))) (Lit |key#0@@68|)) (= (BucketsLib.__default.SplitBucketListLeft (Lit |blist#0@@22|) (Lit |pivots#0@@47|) (LitInt |cLeft#0@@2|) (Lit |key#0@@68|)) (|Seq#Append| (|Seq#Take| (Lit |blist#0@@22|) (LitInt |cLeft#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@22|) (LitInt |cLeft#0@@2|))) (Lit |key#0@@68|)))))))) :qid |BucketsL.883:32| :weight 3 :skolemid |1866| :pattern ( (BucketsLib.__default.SplitBucketListLeft (Lit |blist#0@@22|) (Lit |pivots#0@@47|) (LitInt |cLeft#0@@2|) (Lit |key#0@@68|))) ))))
(assert  (and (forall ((arg0@@397 T@U) (arg1@@208 T@U) (arg2@@145 Int) (arg3@@98 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketListRight arg0@@397 arg1@@208 arg2@@145 arg3@@98)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketListRight| :pattern ( (BucketsLib.__default.SplitBucketListRight arg0@@397 arg1@@208 arg2@@145 arg3@@98)) )) (= (type StartFuel_PivotsLib._default.CutoffForRight) LayerTypeType)))
(assert  (=> (<= 88 $FunctionContextHeight) (forall ((|blist#0@@23| T@U) (|pivots#0@@48| T@U) (|cRight#0| Int) (|key#0@@69| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@23|) (SeqType BoxType)) (= (type |pivots#0@@48|) (SeqType BoxType))) (= (type |key#0@@69|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListRight#canCall| |blist#0@@23| |pivots#0@@48| |cRight#0| |key#0@@69|) (and (not (= 88 $FunctionContextHeight)) (and (and (and ($Is |blist#0@@23| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@48| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@69| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@23| |pivots#0@@48|) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight |pivots#0@@48| |key#0@@69|) |cRight#0|)))))) ($Is (BucketsLib.__default.SplitBucketListRight |blist#0@@23| |pivots#0@@48| |cRight#0| |key#0@@69|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsL.890:33| :skolemid |1870| :pattern ( (BucketsLib.__default.SplitBucketListRight |blist#0@@23| |pivots#0@@48| |cRight#0| |key#0@@69|)) ))))
(assert (forall ((|blist#0@@24| T@U) (|pivots#0@@49| T@U) (|cRight#0@@0| Int) (|key#0@@70| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@24|) (SeqType BoxType)) (= (type |pivots#0@@49|) (SeqType BoxType))) (= (type |key#0@@70|) (SeqType BoxType))) (and (and ($Is |blist#0@@24| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@49| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@70| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketListRight#requires| |blist#0@@24| |pivots#0@@49| |cRight#0@@0| |key#0@@70|) (and (BucketsLib.__default.WFBucketList |blist#0@@24| |pivots#0@@49|) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight |pivots#0@@49| |key#0@@70|) |cRight#0@@0|))) (=> (and (BucketsLib.__default.WFBucketList |blist#0@@24| |pivots#0@@49|) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight |pivots#0@@49| |key#0@@70|) |cRight#0@@0|)) (|BucketsLib.__default.SplitBucketListRight#requires| |blist#0@@24| |pivots#0@@49| |cRight#0@@0| |key#0@@70|)))) :qid |BucketsL.890:33| :skolemid |1871| :pattern ( (|BucketsLib.__default.SplitBucketListRight#requires| |blist#0@@24| |pivots#0@@49| |cRight#0@@0| |key#0@@70|)) )))
(assert (= (type StartFuel_BucketsLib._default.SplitBucketRight) LayerTypeType))
(assert  (=> (<= 88 $FunctionContextHeight) (forall ((|blist#0@@25| T@U) (|pivots#0@@50| T@U) (|cRight#0@@1| Int) (|key#0@@71| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@25|) (SeqType BoxType)) (= (type |pivots#0@@50|) (SeqType BoxType))) (= (type |key#0@@71|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListRight#canCall| |blist#0@@25| |pivots#0@@50| |cRight#0@@1| |key#0@@71|) (and (not (= 88 $FunctionContextHeight)) (and (and (and ($Is |blist#0@@25| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@50| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@71| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@25| |pivots#0@@50|) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight |pivots#0@@50| |key#0@@71|) |cRight#0@@1|)))))) (and (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@25| |cRight#0@@1|)) |key#0@@71|) (= (BucketsLib.__default.SplitBucketListRight |blist#0@@25| |pivots#0@@50| |cRight#0@@1| |key#0@@71|) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@25| |cRight#0@@1|)) |key#0@@71|))) (|Seq#Drop| |blist#0@@25| (+ |cRight#0@@1| 1)))))) :qid |BucketsL.890:33| :skolemid |1872| :pattern ( (BucketsLib.__default.SplitBucketListRight |blist#0@@25| |pivots#0@@50| |cRight#0@@1| |key#0@@71|)) ))))
(assert  (=> (<= 88 $FunctionContextHeight) (forall ((|blist#0@@26| T@U) (|pivots#0@@51| T@U) (|cRight#0@@2| Int) (|key#0@@72| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@26|) (SeqType BoxType)) (= (type |pivots#0@@51|) (SeqType BoxType))) (= (type |key#0@@72|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListRight#canCall| (Lit |blist#0@@26|) (Lit |pivots#0@@51|) (LitInt |cRight#0@@2|) (Lit |key#0@@72|)) (and (not (= 88 $FunctionContextHeight)) (and (and (and ($Is |blist#0@@26| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@51| (TSeq Tclass.KeyType.Key))) ($Is |key#0@@72| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@26|) (Lit |pivots#0@@51|))))) (= (PivotsLib.__default.CutoffForRight StartFuel_PivotsLib._default.CutoffForRight (Lit |pivots#0@@51|) (Lit |key#0@@72|)) (LitInt |cRight#0@@2|))))))) (and (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@26|) (LitInt |cRight#0@@2|))) (Lit |key#0@@72|)) (= (BucketsLib.__default.SplitBucketListRight (Lit |blist#0@@26|) (Lit |pivots#0@@51|) (LitInt |cRight#0@@2|) (Lit |key#0@@72|)) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@26|) (LitInt |cRight#0@@2|))) (Lit |key#0@@72|)))) (|Seq#Drop| (Lit |blist#0@@26|) (LitInt (+ |cRight#0@@2| 1))))))) :qid |BucketsL.890:33| :weight 3 :skolemid |1873| :pattern ( (BucketsLib.__default.SplitBucketListRight (Lit |blist#0@@26|) (Lit |pivots#0@@51|) (LitInt |cRight#0@@2|) (Lit |key#0@@72|))) ))))
(assert (forall ((arg0@@398 T@U) (arg1@@209 T@U) (arg2@@146 Int) (arg3@@99 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketInList arg0@@398 arg1@@209 arg2@@146 arg3@@99)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketInList| :pattern ( (BucketsLib.__default.SplitBucketInList arg0@@398 arg1@@209 arg2@@146 arg3@@99)) )))
(assert (forall (($ly@@108 T@U) (|blist#0@@27| T@U) (|slot#0| Int) (|pivot#0@@11| T@U) ) (!  (=> (and (and (= (type $ly@@108) LayerTypeType) (= (type |blist#0@@27|) (SeqType BoxType))) (= (type |pivot#0@@11|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketInList ($LS $ly@@108) |blist#0@@27| |slot#0| |pivot#0@@11|) (BucketsLib.__default.SplitBucketInList $ly@@108 |blist#0@@27| |slot#0| |pivot#0@@11|))) :qid |BucketsL.897:22| :skolemid |1877| :pattern ( (BucketsLib.__default.SplitBucketInList ($LS $ly@@108) |blist#0@@27| |slot#0| |pivot#0@@11|)) )))
(assert (forall (($ly@@109 T@U) (|blist#0@@28| T@U) (|slot#0@@0| Int) (|pivot#0@@12| T@U) ) (!  (=> (and (and (= (type $ly@@109) LayerTypeType) (= (type |blist#0@@28|) (SeqType BoxType))) (= (type |pivot#0@@12|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketInList $ly@@109 |blist#0@@28| |slot#0@@0| |pivot#0@@12|) (BucketsLib.__default.SplitBucketInList $LZ |blist#0@@28| |slot#0@@0| |pivot#0@@12|))) :qid |BucketsL.897:22| :skolemid |1878| :pattern ( (BucketsLib.__default.SplitBucketInList (AsFuelBottom $ly@@109) |blist#0@@28| |slot#0@@0| |pivot#0@@12|)) )))
(assert  (=> (<= 89 $FunctionContextHeight) (forall (($ly@@110 T@U) (|blist#0@@29| T@U) (|slot#0@@1| Int) (|pivot#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@110) LayerTypeType) (= (type |blist#0@@29|) (SeqType BoxType))) (= (type |pivot#0@@13|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketInList#canCall| |blist#0@@29| |slot#0@@1| |pivot#0@@13|) (and (not (= 89 $FunctionContextHeight)) (and (and ($Is |blist#0@@29| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@13| Tclass.KeyType.Key)) (and (<= (LitInt 0) |slot#0@@1|) (< |slot#0@@1| (|Seq#Length| |blist#0@@29|))))))) ($Is (BucketsLib.__default.SplitBucketInList $ly@@110 |blist#0@@29| |slot#0@@1| |pivot#0@@13|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsL.897:22| :skolemid |1879| :pattern ( (BucketsLib.__default.SplitBucketInList $ly@@110 |blist#0@@29| |slot#0@@1| |pivot#0@@13|)) ))))
(assert (forall (($ly@@111 T@U) (|blist#0@@30| T@U) (|slot#0@@2| Int) (|pivot#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@111) LayerTypeType) (= (type |blist#0@@30|) (SeqType BoxType))) (= (type |pivot#0@@14|) (SeqType BoxType))) (and ($Is |blist#0@@30| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@14| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.SplitBucketInList#requires| $ly@@111 |blist#0@@30| |slot#0@@2| |pivot#0@@14|) (and (<= (LitInt 0) |slot#0@@2|) (< |slot#0@@2| (|Seq#Length| |blist#0@@30|)))) (=> (and (<= (LitInt 0) |slot#0@@2|) (< |slot#0@@2| (|Seq#Length| |blist#0@@30|))) (|BucketsLib.__default.SplitBucketInList#requires| $ly@@111 |blist#0@@30| |slot#0@@2| |pivot#0@@14|)))) :qid |BucketsL.897:22| :skolemid |1880| :pattern ( (|BucketsLib.__default.SplitBucketInList#requires| $ly@@111 |blist#0@@30| |slot#0@@2| |pivot#0@@14|)) )))
(assert  (and (forall ((arg0@@399 T@U) (arg1@@210 T@U) (arg2@@147 T@U) (arg3@@100 T@U) (arg4@@81 T@U) (arg5@@64 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@399 arg1@@210 arg2@@147 arg3@@100 arg4@@81 arg5@@64)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@399 arg1@@210 arg2@@147 arg3@@100 arg4@@81 arg5@@64)) )) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)))
(assert  (=> (<= 89 $FunctionContextHeight) (forall (($ly@@112 T@U) (|blist#0@@31| T@U) (|slot#0@@3| Int) (|pivot#0@@15| T@U) ) (!  (=> (and (and (and (= (type $ly@@112) LayerTypeType) (= (type |blist#0@@31|) (SeqType BoxType))) (= (type |pivot#0@@15|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketInList#canCall| |blist#0@@31| |slot#0@@3| |pivot#0@@15|) (and (not (= 89 $FunctionContextHeight)) (and (and ($Is |blist#0@@31| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@15| Tclass.KeyType.Key)) (and (<= (LitInt 0) |slot#0@@3|) (< |slot#0@@3| (|Seq#Length| |blist#0@@31|))))))) (and (and (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@15|) (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@15|)) (|Sequences.__default.replace1with2#canCall| Tclass.BucketsLib.Bucket |blist#0@@31| ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@15|)) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@15|)) |slot#0@@3|)) (= (BucketsLib.__default.SplitBucketInList ($LS $ly@@112) |blist#0@@31| |slot#0@@3| |pivot#0@@15|) (Sequences.__default.replace1with2 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace1with2 |blist#0@@31| ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@15|)) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@31| |slot#0@@3|)) |pivot#0@@15|)) |slot#0@@3|)))) :qid |BucketsL.897:22| :skolemid |1881| :pattern ( (BucketsLib.__default.SplitBucketInList ($LS $ly@@112) |blist#0@@31| |slot#0@@3| |pivot#0@@15|)) ))))
(assert  (=> (<= 89 $FunctionContextHeight) (forall (($ly@@113 T@U) (|blist#0@@32| T@U) (|slot#0@@4| Int) (|pivot#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@113) LayerTypeType) (= (type |blist#0@@32|) (SeqType BoxType))) (= (type |pivot#0@@16|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketInList#canCall| (Lit |blist#0@@32|) (LitInt |slot#0@@4|) (Lit |pivot#0@@16|)) (and (not (= 89 $FunctionContextHeight)) (and (and ($Is |blist#0@@32| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@16| Tclass.KeyType.Key)) (and (<= (LitInt 0) (LitInt |slot#0@@4|)) (< |slot#0@@4| (|Seq#Length| (Lit |blist#0@@32|)))))))) (and (and (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@16|)) (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@16|))) (|Sequences.__default.replace1with2#canCall| Tclass.BucketsLib.Bucket (Lit |blist#0@@32|) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@16|))) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@16|))) (LitInt |slot#0@@4|))) (= (BucketsLib.__default.SplitBucketInList ($LS $ly@@113) (Lit |blist#0@@32|) (LitInt |slot#0@@4|) (Lit |pivot#0@@16|)) (Sequences.__default.replace1with2 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace1with2 (Lit |blist#0@@32|) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@16|))) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@32|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@16|))) (LitInt |slot#0@@4|))))) :qid |BucketsL.897:22| :weight 3 :skolemid |1882| :pattern ( (BucketsLib.__default.SplitBucketInList ($LS $ly@@113) (Lit |blist#0@@32|) (LitInt |slot#0@@4|) (Lit |pivot#0@@16|))) ))))
(assert (forall ((arg0@@400 T@U) (arg1@@211 T@U) (arg2@@148 T@U) ) (! (= (type (BucketsLib.__default.MergeBuckets arg0@@400 arg1@@211 arg2@@148)) DatatypeTypeType) :qid |funType:BucketsLib.__default.MergeBuckets| :pattern ( (BucketsLib.__default.MergeBuckets arg0@@400 arg1@@211 arg2@@148)) )))
(assert (forall (($ly@@114 T@U) (|left#0| T@U) (|right#0| T@U) ) (!  (=> (and (and (= (type $ly@@114) LayerTypeType) (= (type |left#0|) DatatypeTypeType)) (= (type |right#0|) DatatypeTypeType)) (= (BucketsLib.__default.MergeBuckets ($LS $ly@@114) |left#0| |right#0|) (BucketsLib.__default.MergeBuckets $ly@@114 |left#0| |right#0|))) :qid |BucketsL.906:22| :skolemid |1886| :pattern ( (BucketsLib.__default.MergeBuckets ($LS $ly@@114) |left#0| |right#0|)) )))
(assert (forall (($ly@@115 T@U) (|left#0@@0| T@U) (|right#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@115) LayerTypeType) (= (type |left#0@@0|) DatatypeTypeType)) (= (type |right#0@@0|) DatatypeTypeType)) (= (BucketsLib.__default.MergeBuckets $ly@@115 |left#0@@0| |right#0@@0|) (BucketsLib.__default.MergeBuckets $LZ |left#0@@0| |right#0@@0|))) :qid |BucketsL.906:22| :skolemid |1887| :pattern ( (BucketsLib.__default.MergeBuckets (AsFuelBottom $ly@@115) |left#0@@0| |right#0@@0|)) )))
(assert  (=> (<= 90 $FunctionContextHeight) (forall (($ly@@116 T@U) (|left#0@@1| T@U) (|right#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@116) LayerTypeType) (= (type |left#0@@1|) DatatypeTypeType)) (= (type |right#0@@1|) DatatypeTypeType)) (or (|BucketsLib.__default.MergeBuckets#canCall| |left#0@@1| |right#0@@1|) (and (not (= 90 $FunctionContextHeight)) (and ($Is |left#0@@1| Tclass.BucketsLib.Bucket) ($Is |right#0@@1| Tclass.BucketsLib.Bucket))))) (and (and (and (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.MergeBuckets $ly@@116 |left#0@@1| |right#0@@1|)) (BucketsLib.__default.PreWFBucket (BucketsLib.__default.MergeBuckets $ly@@116 |left#0@@1| |right#0@@1|))) (=> (and (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |left#0@@1|)) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.b |right#0@@1|))) (BucketsLib.__default.WFBucket (BucketsLib.__default.MergeBuckets $ly@@116 |left#0@@1| |right#0@@1|)))) ($Is (BucketsLib.__default.MergeBuckets $ly@@116 |left#0@@1| |right#0@@1|) Tclass.BucketsLib.Bucket))) :qid |BucketsL.906:22| :skolemid |1888| :pattern ( (BucketsLib.__default.MergeBuckets $ly@@116 |left#0@@1| |right#0@@1|)) ))))
(assert (forall (($ly@@117 T@U) (|left#0@@2| T@U) (|right#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@117) LayerTypeType) (= (type |left#0@@2|) DatatypeTypeType)) (= (type |right#0@@2|) DatatypeTypeType)) (and ($Is |left#0@@2| Tclass.BucketsLib.Bucket) ($Is |right#0@@2| Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.MergeBuckets#requires| $ly@@117 |left#0@@2| |right#0@@2|) true) (=> true (|BucketsLib.__default.MergeBuckets#requires| $ly@@117 |left#0@@2| |right#0@@2|)))) :qid |BucketsL.906:22| :skolemid |1889| :pattern ( (|BucketsLib.__default.MergeBuckets#requires| $ly@@117 |left#0@@2| |right#0@@2|)) )))
(assert  (and (forall ((arg0@@401 T@U) (arg1@@212 T@U) (arg2@@149 T@U) (arg3@@101 T@U) (arg4@@82 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@401 arg1@@212 arg2@@149 arg3@@101 arg4@@82)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@401 arg1@@212 arg2@@149 arg3@@101 arg4@@82)) )) (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType)))
(assert  (=> (<= 90 $FunctionContextHeight) (forall (($ly@@118 T@U) (|left#0@@3| T@U) (|right#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@118) LayerTypeType) (= (type |left#0@@3|) DatatypeTypeType)) (= (type |right#0@@3|) DatatypeTypeType)) (or (|BucketsLib.__default.MergeBuckets#canCall| |left#0@@3| |right#0@@3|) (and (not (= 90 $FunctionContextHeight)) (and ($Is |left#0@@3| Tclass.BucketsLib.Bucket) ($Is |right#0@@3| Tclass.BucketsLib.Bucket))))) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |left#0@@3|) (BucketsLib.Bucket.BucketMapWithSeq_q |right#0@@3|)) (|Maps.__default.MapUnionPreferA#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (BucketsLib.Bucket.b |left#0@@3|) (BucketsLib.Bucket.b |right#0@@3|))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapUnionPreferA Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnionPreferA (BucketsLib.Bucket.b |left#0@@3|) (BucketsLib.Bucket.b |right#0@@3|)))) (= (BucketsLib.__default.MergeBuckets ($LS $ly@@118) |left#0@@3| |right#0@@3|) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapUnionPreferA Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnionPreferA (BucketsLib.Bucket.b |left#0@@3|) (BucketsLib.Bucket.b |right#0@@3|)))))) :qid |BucketsL.906:22| :skolemid |1890| :pattern ( (BucketsLib.__default.MergeBuckets ($LS $ly@@118) |left#0@@3| |right#0@@3|)) ))))
(assert  (=> (<= 90 $FunctionContextHeight) (forall (($ly@@119 T@U) (|left#0@@4| T@U) (|right#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@119) LayerTypeType) (= (type |left#0@@4|) DatatypeTypeType)) (= (type |right#0@@4|) DatatypeTypeType)) (or (|BucketsLib.__default.MergeBuckets#canCall| (Lit |left#0@@4|) (Lit |right#0@@4|)) (and (not (= 90 $FunctionContextHeight)) (and ($Is |left#0@@4| Tclass.BucketsLib.Bucket) ($Is |right#0@@4| Tclass.BucketsLib.Bucket))))) (and (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |left#0@@4|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |right#0@@4|))) (|Maps.__default.MapUnionPreferA#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.b (Lit |left#0@@4|))) (Lit (BucketsLib.Bucket.b (Lit |right#0@@4|))))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapUnionPreferA Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnionPreferA (Lit (BucketsLib.Bucket.b (Lit |left#0@@4|))) (Lit (BucketsLib.Bucket.b (Lit |right#0@@4|)))))) (= (BucketsLib.__default.MergeBuckets ($LS $ly@@119) (Lit |left#0@@4|) (Lit |right#0@@4|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapUnionPreferA Tclass.KeyType.Key Tclass.ValueMessage.Message StartFuel_Maps._default.MapUnionPreferA (Lit (BucketsLib.Bucket.b (Lit |left#0@@4|))) (Lit (BucketsLib.Bucket.b (Lit |right#0@@4|)))))))) :qid |BucketsL.906:22| :weight 3 :skolemid |1891| :pattern ( (BucketsLib.__default.MergeBuckets ($LS $ly@@119) (Lit |left#0@@4|) (Lit |right#0@@4|))) ))))
(assert (forall ((arg0@@402 T@U) (arg1@@213 T@U) (arg2@@150 Int) ) (! (= (type (BucketsLib.__default.MergeBucketsInList arg0@@402 arg1@@213 arg2@@150)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.MergeBucketsInList| :pattern ( (BucketsLib.__default.MergeBucketsInList arg0@@402 arg1@@213 arg2@@150)) )))
(assert (forall (($ly@@120 T@U) (|blist#0@@33| T@U) (|slot#0@@5| Int) ) (!  (=> (and (= (type $ly@@120) LayerTypeType) (= (type |blist#0@@33|) (SeqType BoxType))) (= (BucketsLib.__default.MergeBucketsInList ($LS $ly@@120) |blist#0@@33| |slot#0@@5|) (BucketsLib.__default.MergeBucketsInList $ly@@120 |blist#0@@33| |slot#0@@5|))) :qid |BucketsL.914:22| :skolemid |1898| :pattern ( (BucketsLib.__default.MergeBucketsInList ($LS $ly@@120) |blist#0@@33| |slot#0@@5|)) )))
(assert (forall (($ly@@121 T@U) (|blist#0@@34| T@U) (|slot#0@@6| Int) ) (!  (=> (and (= (type $ly@@121) LayerTypeType) (= (type |blist#0@@34|) (SeqType BoxType))) (= (BucketsLib.__default.MergeBucketsInList $ly@@121 |blist#0@@34| |slot#0@@6|) (BucketsLib.__default.MergeBucketsInList $LZ |blist#0@@34| |slot#0@@6|))) :qid |BucketsL.914:22| :skolemid |1899| :pattern ( (BucketsLib.__default.MergeBucketsInList (AsFuelBottom $ly@@121) |blist#0@@34| |slot#0@@6|)) )))
(assert  (=> (<= 91 $FunctionContextHeight) (forall (($ly@@122 T@U) (|blist#0@@35| T@U) (|slot#0@@7| Int) ) (!  (=> (and (and (= (type $ly@@122) LayerTypeType) (= (type |blist#0@@35|) (SeqType BoxType))) (or (|BucketsLib.__default.MergeBucketsInList#canCall| |blist#0@@35| |slot#0@@7|) (and (not (= 91 $FunctionContextHeight)) (and ($Is |blist#0@@35| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) |slot#0@@7|) (< |slot#0@@7| (- (|Seq#Length| |blist#0@@35|) 1))))))) (and (and (= (|Seq#Length| (BucketsLib.__default.MergeBucketsInList $ly@@122 |blist#0@@35| |slot#0@@7|)) (- (|Seq#Length| |blist#0@@35|) 1)) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.MergeBucketsInList $ly@@122 |blist#0@@35| |slot#0@@7|) |slot#0@@7|)))) ($Is (BucketsLib.__default.MergeBucketsInList $ly@@122 |blist#0@@35| |slot#0@@7|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.914:22| :skolemid |1900| :pattern ( (BucketsLib.__default.MergeBucketsInList $ly@@122 |blist#0@@35| |slot#0@@7|)) ))))
(assert (forall (($ly@@123 T@U) (|blist#0@@36| T@U) (|slot#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@123) LayerTypeType) (= (type |blist#0@@36|) (SeqType BoxType))) ($Is |blist#0@@36| (TSeq Tclass.BucketsLib.Bucket))) (and (=> (|BucketsLib.__default.MergeBucketsInList#requires| $ly@@123 |blist#0@@36| |slot#0@@8|) (and (<= (LitInt 0) |slot#0@@8|) (< |slot#0@@8| (- (|Seq#Length| |blist#0@@36|) 1)))) (=> (and (<= (LitInt 0) |slot#0@@8|) (< |slot#0@@8| (- (|Seq#Length| |blist#0@@36|) 1))) (|BucketsLib.__default.MergeBucketsInList#requires| $ly@@123 |blist#0@@36| |slot#0@@8|)))) :qid |BucketsL.914:22| :skolemid |1901| :pattern ( (|BucketsLib.__default.MergeBucketsInList#requires| $ly@@123 |blist#0@@36| |slot#0@@8|)) )))
(assert  (and (and (= (type StartFuel_BucketsLib._default.MergeBuckets) LayerTypeType) (forall ((arg0@@403 T@U) (arg1@@214 T@U) (arg2@@151 T@U) (arg3@@102 T@U) (arg4@@83 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@403 arg1@@214 arg2@@151 arg3@@102 arg4@@83)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@403 arg1@@214 arg2@@151 arg3@@102 arg4@@83)) ))) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)))
(assert  (=> (<= 91 $FunctionContextHeight) (forall (($ly@@124 T@U) (|blist#0@@37| T@U) (|slot#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@124) LayerTypeType) (= (type |blist#0@@37|) (SeqType BoxType))) (or (|BucketsLib.__default.MergeBucketsInList#canCall| |blist#0@@37| |slot#0@@9|) (and (not (= 91 $FunctionContextHeight)) (and ($Is |blist#0@@37| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) |slot#0@@9|) (< |slot#0@@9| (- (|Seq#Length| |blist#0@@37|) 1))))))) (and (and (|BucketsLib.__default.MergeBuckets#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| |slot#0@@9|)) ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| (+ |slot#0@@9| 1)))) (|Sequences.__default.replace2with1#canCall| Tclass.BucketsLib.Bucket |blist#0@@37| ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| |slot#0@@9|)) ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| (+ |slot#0@@9| 1))))) |slot#0@@9|)) (= (BucketsLib.__default.MergeBucketsInList ($LS $ly@@124) |blist#0@@37| |slot#0@@9|) (Sequences.__default.replace2with1 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace2with1 |blist#0@@37| ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| |slot#0@@9|)) ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@37| (+ |slot#0@@9| 1))))) |slot#0@@9|)))) :qid |BucketsL.914:22| :skolemid |1902| :pattern ( (BucketsLib.__default.MergeBucketsInList ($LS $ly@@124) |blist#0@@37| |slot#0@@9|)) ))))
(assert  (=> (<= 91 $FunctionContextHeight) (forall (($ly@@125 T@U) (|blist#0@@38| T@U) (|slot#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@125) LayerTypeType) (= (type |blist#0@@38|) (SeqType BoxType))) (or (|BucketsLib.__default.MergeBucketsInList#canCall| (Lit |blist#0@@38|) (LitInt |slot#0@@10|)) (and (not (= 91 $FunctionContextHeight)) (and ($Is |blist#0@@38| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) (LitInt |slot#0@@10|)) (< |slot#0@@10| (- (|Seq#Length| (Lit |blist#0@@38|)) 1))))))) (and (and (|BucketsLib.__default.MergeBuckets#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt |slot#0@@10|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt (+ |slot#0@@10| 1))))) (|Sequences.__default.replace2with1#canCall| Tclass.BucketsLib.Bucket (Lit |blist#0@@38|) ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt |slot#0@@10|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt (+ |slot#0@@10| 1)))))) (LitInt |slot#0@@10|))) (= (BucketsLib.__default.MergeBucketsInList ($LS $ly@@125) (Lit |blist#0@@38|) (LitInt |slot#0@@10|)) (Sequences.__default.replace2with1 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace2with1 (Lit |blist#0@@38|) ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt |slot#0@@10|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@38|) (LitInt (+ |slot#0@@10| 1)))))) (LitInt |slot#0@@10|))))) :qid |BucketsL.914:22| :weight 3 :skolemid |1903| :pattern ( (BucketsLib.__default.MergeBucketsInList ($LS $ly@@125) (Lit |blist#0@@38|) (LitInt |slot#0@@10|))) ))))
(assert (forall ((arg0@@404 T@U) (arg1@@215 Int) ) (! (= (type (BucketsLib.__default.emptyList arg0@@404 arg1@@215)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.emptyList| :pattern ( (BucketsLib.__default.emptyList arg0@@404 arg1@@215)) )))
(assert (forall (($ly@@126 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@126) LayerTypeType) (= (BucketsLib.__default.emptyList ($LS $ly@@126) |n#0|) (BucketsLib.__default.emptyList $ly@@126 |n#0|))) :qid |BucketsL.1463:12| :skolemid |2311| :pattern ( (BucketsLib.__default.emptyList ($LS $ly@@126) |n#0|)) )))
(assert (forall (($ly@@127 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@127) LayerTypeType) (= (BucketsLib.__default.emptyList $ly@@127 |n#0@@0|) (BucketsLib.__default.emptyList $LZ |n#0@@0|))) :qid |BucketsL.1463:12| :skolemid |2312| :pattern ( (BucketsLib.__default.emptyList (AsFuelBottom $ly@@127) |n#0@@0|)) )))
(assert  (=> (<= 120 $FunctionContextHeight) (forall (($ly@@128 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@128) LayerTypeType) (or (|BucketsLib.__default.emptyList#canCall| |n#0@@1|) (and (not (= 120 $FunctionContextHeight)) (>= |n#0@@1| (LitInt 0))))) (and (and (= (|Seq#Length| (BucketsLib.__default.emptyList $ly@@128 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@36| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@36|) (< |i#0@@36| (|Seq#Length| (BucketsLib.__default.emptyList $ly@@128 |n#0@@1|)))) (|BucketsLib.Bucket#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.emptyList $ly@@128 |n#0@@1|) |i#0@@36|)) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType))))) :qid |BucketsL.1466:18| :skolemid |2313| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.emptyList $ly@@128 |n#0@@1|) |i#0@@36|))) ))) ($Is (BucketsLib.__default.emptyList $ly@@128 |n#0@@1|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsL.1463:12| :skolemid |2314| :pattern ( (BucketsLib.__default.emptyList $ly@@128 |n#0@@1|)) ))))
(assert (forall (($ly@@129 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@129) LayerTypeType) (and (=> (|BucketsLib.__default.emptyList#requires| $ly@@129 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|BucketsLib.__default.emptyList#requires| $ly@@129 |n#0@@2|)))) :qid |BucketsL.1463:12| :skolemid |2315| :pattern ( (|BucketsLib.__default.emptyList#requires| $ly@@129 |n#0@@2|)) )))
(assert  (=> (<= 120 $FunctionContextHeight) (forall (($ly@@130 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@130) LayerTypeType) (or (|BucketsLib.__default.emptyList#canCall| |n#0@@3|) (and (not (= 120 $FunctionContextHeight)) (>= |n#0@@3| (LitInt 0))))) (and (=> (not (= |n#0@@3| (LitInt 0))) (and (|BucketsLib.__default.emptyList#canCall| (- |n#0@@3| 1)) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType))))) (= (BucketsLib.__default.emptyList ($LS $ly@@130) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.emptyList $ly@@130 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType)))))))))) :qid |BucketsL.1463:12| :skolemid |2316| :pattern ( (BucketsLib.__default.emptyList ($LS $ly@@130) |n#0@@3|)) ))))
(assert  (=> (<= 120 $FunctionContextHeight) (forall (($ly@@131 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@131) LayerTypeType) (or (|BucketsLib.__default.emptyList#canCall| (LitInt |n#0@@4|)) (and (not (= 120 $FunctionContextHeight)) (>= (LitInt |n#0@@4|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (and (|BucketsLib.__default.emptyList#canCall| (LitInt (- |n#0@@4| 1))) (|BucketsLib.__default.B#canCall| (Lit (|Map#Empty| BoxType BoxType))))) (= (BucketsLib.__default.emptyList ($LS $ly@@131) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketsLib.__default.emptyList ($LS $ly@@131) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (|Map#Empty| BoxType BoxType)))))))))) :qid |BucketsL.1463:12| :weight 3 :skolemid |2317| :pattern ( (BucketsLib.__default.emptyList ($LS $ly@@131) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@405 T@U) (arg1@@216 T@U) (arg2@@152 T@U) ) (! (= (type (BucketsLib.__default.binarySearch arg0@@405 arg1@@216 arg2@@152)) DatatypeTypeType) :qid |funType:BucketsLib.__default.binarySearch| :pattern ( (BucketsLib.__default.binarySearch arg0@@405 arg1@@216 arg2@@152)) )))
(assert (forall (($ly@@132 T@U) (|keys#0@@21| T@U) (|key#0@@73| T@U) ) (!  (=> (and (and (= (type $ly@@132) LayerTypeType) (= (type |keys#0@@21|) (SeqType BoxType))) (= (type |key#0@@73|) (SeqType BoxType))) (= (BucketsLib.__default.binarySearch ($LS $ly@@132) |keys#0@@21| |key#0@@73|) (BucketsLib.__default.binarySearch $ly@@132 |keys#0@@21| |key#0@@73|))) :qid |BucketsL.1590:12| :skolemid |2431| :pattern ( (BucketsLib.__default.binarySearch ($LS $ly@@132) |keys#0@@21| |key#0@@73|)) )))
(assert (forall (($ly@@133 T@U) (|keys#0@@22| T@U) (|key#0@@74| T@U) ) (!  (=> (and (and (= (type $ly@@133) LayerTypeType) (= (type |keys#0@@22|) (SeqType BoxType))) (= (type |key#0@@74|) (SeqType BoxType))) (= (BucketsLib.__default.binarySearch $ly@@133 |keys#0@@22| |key#0@@74|) (BucketsLib.__default.binarySearch $LZ |keys#0@@22| |key#0@@74|))) :qid |BucketsL.1590:12| :skolemid |2432| :pattern ( (BucketsLib.__default.binarySearch (AsFuelBottom $ly@@133) |keys#0@@22| |key#0@@74|)) )))
(assert  (=> (<= 125 $FunctionContextHeight) (forall (($ly@@134 T@U) (|keys#0@@23| T@U) (|key#0@@75| T@U) ) (!  (=> (and (and (and (= (type $ly@@134) LayerTypeType) (= (type |keys#0@@23|) (SeqType BoxType))) (= (type |key#0@@75|) (SeqType BoxType))) (or (|BucketsLib.__default.binarySearch#canCall| |keys#0@@23| |key#0@@75|) (and (not (= 125 $FunctionContextHeight)) (and ($Is |keys#0@@23| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@75| Tclass.KeyType.Key))))) (and (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |keys#0@@23|) (=> (Options.Option.None_q (BucketsLib.__default.binarySearch $ly@@134 |keys#0@@23| |key#0@@75|)) (not (|Seq#Contains| |keys#0@@23| ($Box |key#0@@75|))))) (=> (Options.Option.Some_q (BucketsLib.__default.binarySearch $ly@@134 |keys#0@@23| |key#0@@75|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (BucketsLib.__default.binarySearch $ly@@134 |keys#0@@23| |key#0@@75|))))) (< (U_2_int ($Unbox intType (Options.Option.value (BucketsLib.__default.binarySearch $ly@@134 |keys#0@@23| |key#0@@75|)))) (|Seq#Length| |keys#0@@23|))) (|Seq#Equal| |key#0@@75| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@23| (U_2_int ($Unbox intType (Options.Option.value (BucketsLib.__default.binarySearch $ly@@134 |keys#0@@23| |key#0@@75|)))))))))) ($Is (BucketsLib.__default.binarySearch $ly@@134 |keys#0@@23| |key#0@@75|) (Tclass.Options.Option Tclass._System.nat)))) :qid |BucketsL.1590:12| :skolemid |2433| :pattern ( (BucketsLib.__default.binarySearch $ly@@134 |keys#0@@23| |key#0@@75|)) ))))
(assert (forall (($ly@@135 T@U) (|keys#0@@24| T@U) (|key#0@@76| T@U) ) (!  (=> (and (and (and (= (type $ly@@135) LayerTypeType) (= (type |keys#0@@24|) (SeqType BoxType))) (= (type |key#0@@76|) (SeqType BoxType))) (and ($Is |keys#0@@24| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@76| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.binarySearch#requires| $ly@@135 |keys#0@@24| |key#0@@76|) true) (=> true (|BucketsLib.__default.binarySearch#requires| $ly@@135 |keys#0@@24| |key#0@@76|)))) :qid |BucketsL.1590:12| :skolemid |2434| :pattern ( (|BucketsLib.__default.binarySearch#requires| $ly@@135 |keys#0@@24| |key#0@@76|)) )))
(assert  (=> (<= 125 $FunctionContextHeight) (forall (($ly@@136 T@U) (|keys#0@@25| T@U) (|key#0@@77| T@U) ) (!  (=> (and (and (and (= (type $ly@@136) LayerTypeType) (= (type |keys#0@@25|) (SeqType BoxType))) (= (type |key#0@@77|) (SeqType BoxType))) (or (|BucketsLib.__default.binarySearch#canCall| |keys#0@@25| |key#0@@77|) (and (not (= 125 $FunctionContextHeight)) (and ($Is |keys#0@@25| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@77| Tclass.KeyType.Key))))) (and (=> (not (= (|Seq#Length| |keys#0@@25|) (LitInt 0))) (let ((|mid#0| (Div (|Seq#Length| |keys#0@@25|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@77| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0|))) (=> (Lexicographic__Byte__Order.__default.lt |key#0@@77| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0|))) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Take| |keys#0@@25| |mid#0|) |key#0@@77|))) (=> (not (Lexicographic__Byte__Order.__default.lt |key#0@@77| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0|)))) (=> (not (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0|)) |key#0@@77|)) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Drop| |keys#0@@25| (+ |mid#0| 1)) |key#0@@77|)))))) (= (BucketsLib.__default.binarySearch ($LS $ly@@136) |keys#0@@25| |key#0@@77|) (ite (= (|Seq#Length| |keys#0@@25|) (LitInt 0)) |#Options.Option.None| (let ((|mid#0@@0| (Div (|Seq#Length| |keys#0@@25|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt |key#0@@77| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0@@0|))) (BucketsLib.__default.binarySearch $ly@@136 (|Seq#Take| |keys#0@@25| |mid#0@@0|) |key#0@@77|) (ite (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| |mid#0@@0|)) |key#0@@77|) (|#Options.Option.Some| ($Box (int_2_U |mid#0@@0|))) (let ((|sub#0| (BucketsLib.__default.binarySearch $ly@@136 (|Seq#Drop| |keys#0@@25| (+ |mid#0@@0| 1)) |key#0@@77|))) (ite (Options.Option.Some_q |sub#0|) (|#Options.Option.Some| ($Box (int_2_U (+ (+ |mid#0@@0| 1) (U_2_int ($Unbox intType (Options.Option.value |sub#0|))))))) |#Options.Option.None|))))))))) :qid |BucketsL.1590:12| :skolemid |2435| :pattern ( (BucketsLib.__default.binarySearch ($LS $ly@@136) |keys#0@@25| |key#0@@77|)) ))))
(assert  (=> (<= 125 $FunctionContextHeight) (forall (($ly@@137 T@U) (|keys#0@@26| T@U) (|key#0@@78| T@U) ) (!  (=> (and (and (and (= (type $ly@@137) LayerTypeType) (= (type |keys#0@@26|) (SeqType BoxType))) (= (type |key#0@@78|) (SeqType BoxType))) (or (|BucketsLib.__default.binarySearch#canCall| (Lit |keys#0@@26|) (Lit |key#0@@78|)) (and (not (= 125 $FunctionContextHeight)) (and ($Is |keys#0@@26| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@78| Tclass.KeyType.Key))))) (and (=> (not (= (|Seq#Length| (Lit |keys#0@@26|)) (LitInt 0))) (let ((|mid#1| (Div (|Seq#Length| (Lit |keys#0@@26|)) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@78|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1|))) (=> (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@78|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1|))) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Take| (Lit |keys#0@@26|) |mid#1|) (Lit |key#0@@78|)))) (=> (not (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@78|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1|)))) (=> (not (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1|)) |key#0@@78|)) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Drop| (Lit |keys#0@@26|) (+ |mid#1| 1)) (Lit |key#0@@78|))))))) (= (BucketsLib.__default.binarySearch ($LS $ly@@137) (Lit |keys#0@@26|) (Lit |key#0@@78|)) (ite (= (|Seq#Length| (Lit |keys#0@@26|)) (LitInt 0)) |#Options.Option.None| (let ((|mid#1@@0| (Div (|Seq#Length| (Lit |keys#0@@26|)) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@78|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1@@0|))) (BucketsLib.__default.binarySearch ($LS $ly@@137) (|Seq#Take| (Lit |keys#0@@26|) |mid#1@@0|) (Lit |key#0@@78|)) (ite (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@26|) |mid#1@@0|)) |key#0@@78|) (|#Options.Option.Some| ($Box (int_2_U |mid#1@@0|))) (let ((|sub#1| (BucketsLib.__default.binarySearch ($LS $ly@@137) (|Seq#Drop| (Lit |keys#0@@26|) (+ |mid#1@@0| 1)) (Lit |key#0@@78|)))) (ite (Options.Option.Some_q |sub#1|) (|#Options.Option.Some| ($Box (int_2_U (+ (+ |mid#1@@0| 1) (U_2_int ($Unbox intType (Options.Option.value |sub#1|))))))) |#Options.Option.None|))))))))) :qid |BucketsL.1590:12| :weight 3 :skolemid |2436| :pattern ( (BucketsLib.__default.binarySearch ($LS $ly@@137) (Lit |keys#0@@26|) (Lit |key#0@@78|))) ))))
(assert (forall ((arg0@@406 T@U) (arg1@@217 T@U) ) (! (= (type (BucketsLib.__default.bucketBinarySearchLookup arg0@@406 arg1@@217)) DatatypeTypeType) :qid |funType:BucketsLib.__default.bucketBinarySearchLookup| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup arg0@@406 arg1@@217)) )))
(assert  (=> (<= 126 $FunctionContextHeight) (forall ((|bucket#0@@90| T@U) (|key#0@@79| T@U) ) (!  (=> (and (and (= (type |bucket#0@@90|) DatatypeTypeType) (= (type |key#0@@79|) (SeqType BoxType))) (or (|BucketsLib.__default.bucketBinarySearchLookup#canCall| |bucket#0@@90| |key#0@@79|) (and (not (= 126 $FunctionContextHeight)) (and (and ($Is |bucket#0@@90| Tclass.BucketsLib.Bucket) ($Is |key#0@@79| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucket |bucket#0@@90|))))) (and (and (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@90|) (=> (Options.Option.None_q (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@79|)) (not (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@90|)) ($Box |key#0@@79|)))))) (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@90|) (=> (Options.Option.Some_q (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@79|)) (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.b |bucket#0@@90|)) ($Box |key#0@@79|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.b |bucket#0@@90|)) ($Box |key#0@@79|))) ($Unbox DatatypeTypeType (Options.Option.value (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@79|)))))))) ($Is (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@79|) (Tclass.Options.Option Tclass.ValueMessage.Message)))) :qid |BucketsL.1614:37| :skolemid |2440| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@90| |key#0@@79|)) ))))
(assert (forall ((|bucket#0@@91| T@U) (|key#0@@80| T@U) ) (!  (=> (and (and (= (type |bucket#0@@91|) DatatypeTypeType) (= (type |key#0@@80|) (SeqType BoxType))) (and ($Is |bucket#0@@91| Tclass.BucketsLib.Bucket) ($Is |key#0@@80| Tclass.KeyType.Key))) (and (=> (|BucketsLib.__default.bucketBinarySearchLookup#requires| |bucket#0@@91| |key#0@@80|) (BucketsLib.__default.WFBucket |bucket#0@@91|)) (=> (BucketsLib.__default.WFBucket |bucket#0@@91|) (|BucketsLib.__default.bucketBinarySearchLookup#requires| |bucket#0@@91| |key#0@@80|)))) :qid |BucketsL.1614:37| :skolemid |2441| :pattern ( (|BucketsLib.__default.bucketBinarySearchLookup#requires| |bucket#0@@91| |key#0@@80|)) )))
(assert  (=> (<= 126 $FunctionContextHeight) (forall ((|bucket#0@@92| T@U) (|key#0@@81| T@U) ) (!  (=> (and (and (= (type |bucket#0@@92|) DatatypeTypeType) (= (type |key#0@@81|) (SeqType BoxType))) (or (|BucketsLib.__default.bucketBinarySearchLookup#canCall| |bucket#0@@92| |key#0@@81|) (and (not (= 126 $FunctionContextHeight)) (and (and ($Is |bucket#0@@92| Tclass.BucketsLib.Bucket) ($Is |key#0@@81| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucket |bucket#0@@92|))))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@92|) (|BucketsLib.__default.binarySearch#canCall| (BucketsLib.Bucket.keys |bucket#0@@92|) |key#0@@81|)) (let ((|i#0@@37| (BucketsLib.__default.binarySearch ($LS $LZ) (BucketsLib.Bucket.keys |bucket#0@@92|) |key#0@@81|))) (=> (Options.Option.Some_q |i#0@@37|) (and (and (|BucketsLib.__default.BucketWellMarshalled#canCall| |bucket#0@@92|) (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@92|) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@92|))) (=> (not (BucketsLib.__default.BucketWellMarshalled |bucket#0@@92|)) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@92|)))))) (= (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@92| |key#0@@81|) (let ((|i#0@@38| (BucketsLib.__default.binarySearch ($LS $LZ) (BucketsLib.Bucket.keys |bucket#0@@92|) |key#0@@81|))) (ite (Options.Option.Some_q |i#0@@38|) (ite (BucketsLib.__default.BucketWellMarshalled |bucket#0@@92|) (|#Options.Option.Some| (|Seq#Index| (BucketsLib.Bucket.msgs |bucket#0@@92|) (U_2_int ($Unbox intType (Options.Option.value |i#0@@38|))))) (|#Options.Option.Some| (|Seq#Index| (BucketsLib.Bucket.msgs |bucket#0@@92|) (U_2_int ($Unbox intType (Options.Option.value |i#0@@38|)))))) |#Options.Option.None|))))) :qid |BucketsL.1614:37| :skolemid |2442| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@92| |key#0@@81|)) ))))
(assert  (=> (<= 126 $FunctionContextHeight) (forall ((|bucket#0@@93| T@U) (|key#0@@82| T@U) ) (!  (=> (and (and (= (type |bucket#0@@93|) DatatypeTypeType) (= (type |key#0@@82|) (SeqType BoxType))) (or (|BucketsLib.__default.bucketBinarySearchLookup#canCall| (Lit |bucket#0@@93|) (Lit |key#0@@82|)) (and (not (= 126 $FunctionContextHeight)) (and (and ($Is |bucket#0@@93| Tclass.BucketsLib.Bucket) ($Is |key#0@@82| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |bucket#0@@93|))))))))) (and (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@93|)) (|BucketsLib.__default.binarySearch#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@93|))) (Lit |key#0@@82|))) (let ((|i#1@@17| (Lit (BucketsLib.__default.binarySearch ($LS $LZ) (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@93|))) (Lit |key#0@@82|))))) (=> (Options.Option.Some_q |i#1@@17|) (and (and (|BucketsLib.__default.BucketWellMarshalled#canCall| (Lit |bucket#0@@93|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@93|))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@93|)))) (=> (not (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@93|)))))) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@93|))))))) (= (BucketsLib.__default.bucketBinarySearchLookup (Lit |bucket#0@@93|) (Lit |key#0@@82|)) (let ((|i#1@@18| (Lit (BucketsLib.__default.binarySearch ($LS $LZ) (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@93|))) (Lit |key#0@@82|))))) (ite (Options.Option.Some_q |i#1@@18|) (ite (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@93|)) (|#Options.Option.Some| (|Seq#Index| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@93|))) (LitInt (U_2_int ($Unbox intType (Options.Option.value |i#1@@18|)))))) (|#Options.Option.Some| (|Seq#Index| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@93|))) (LitInt (U_2_int ($Unbox intType (Options.Option.value |i#1@@18|))))))) |#Options.Option.None|))))) :qid |BucketsL.1614:37| :weight 3 :skolemid |2443| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup (Lit |bucket#0@@93|) (Lit |key#0@@82|))) ))))
(assert (forall ((arg0@@407 T@U) ) (! (= (type (BucketsLib.__default.getMiddleKey arg0@@407)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.getMiddleKey| :pattern ( (BucketsLib.__default.getMiddleKey arg0@@407)) )))
(assert  (=> (<= 127 $FunctionContextHeight) (forall ((|bucket#0@@94| T@U) ) (!  (=> (and (= (type |bucket#0@@94|) DatatypeTypeType) (or (|BucketsLib.__default.getMiddleKey#canCall| |bucket#0@@94|) (and (not (= 127 $FunctionContextHeight)) (and ($Is |bucket#0@@94| Tclass.BucketsLib.Bucket) (BucketsLib.__default.WFBucket |bucket#0@@94|))))) ($Is (BucketsLib.__default.getMiddleKey |bucket#0@@94|) Tclass.KeyType.Key)) :qid |BucketsL.1633:25| :skolemid |2447| :pattern ( (BucketsLib.__default.getMiddleKey |bucket#0@@94|)) ))))
(assert (forall ((|bucket#0@@95| T@U) ) (!  (=> (and (= (type |bucket#0@@95|) DatatypeTypeType) ($Is |bucket#0@@95| Tclass.BucketsLib.Bucket)) (and (=> (|BucketsLib.__default.getMiddleKey#requires| |bucket#0@@95|) (BucketsLib.__default.WFBucket |bucket#0@@95|)) (=> (BucketsLib.__default.WFBucket |bucket#0@@95|) (|BucketsLib.__default.getMiddleKey#requires| |bucket#0@@95|)))) :qid |BucketsL.1633:25| :skolemid |2448| :pattern ( (|BucketsLib.__default.getMiddleKey#requires| |bucket#0@@95|)) )))
(assert  (=> (<= 127 $FunctionContextHeight) (forall ((|bucket#0@@96| T@U) ) (!  (=> (and (= (type |bucket#0@@96|) DatatypeTypeType) (or (|BucketsLib.__default.getMiddleKey#canCall| |bucket#0@@96|) (and (not (= 127 $FunctionContextHeight)) (and ($Is |bucket#0@@96| Tclass.BucketsLib.Bucket) (BucketsLib.__default.WFBucket |bucket#0@@96|))))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@96|) (=> (not (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@96|)) (LitInt 0))) (and (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@96|) (BucketsLib.Bucket.BucketMapWithSeq_q |bucket#0@@96|)))) (= (BucketsLib.__default.getMiddleKey |bucket#0@@96|) (ite (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@96|)) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) (let ((|key#0@@83| ($Unbox (SeqType BoxType) (|Seq#Index| (BucketsLib.Bucket.keys |bucket#0@@96|) (Div (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@96|)) (LitInt 2)))))) (ite (= (|Seq#Length| |key#0@@83|) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) |key#0@@83|)))))) :qid |BucketsL.1633:25| :skolemid |2449| :pattern ( (BucketsLib.__default.getMiddleKey |bucket#0@@96|)) ))))
(assert  (=> (<= 127 $FunctionContextHeight) (forall ((|bucket#0@@97| T@U) ) (!  (=> (and (= (type |bucket#0@@97|) DatatypeTypeType) (or (|BucketsLib.__default.getMiddleKey#canCall| (Lit |bucket#0@@97|)) (and (not (= 127 $FunctionContextHeight)) (and ($Is |bucket#0@@97| Tclass.BucketsLib.Bucket) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |bucket#0@@97|))))))))) (and (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@97|)) (=> (not (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@97|)))) (LitInt 0))) (and (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@97|)) (BucketsLib.Bucket.BucketMapWithSeq_q (Lit |bucket#0@@97|))))) (= (BucketsLib.__default.getMiddleKey (Lit |bucket#0@@97|)) (ite (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@97|)))) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) (let ((|key#1@@11| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@97|))) (Div (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@97|)))) (LitInt 2)))))) (ite (= (|Seq#Length| |key#1@@11|) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) |key#1@@11|)))))) :qid |BucketsL.1633:25| :weight 3 :skolemid |2450| :pattern ( (BucketsLib.__default.getMiddleKey (Lit |bucket#0@@97|))) ))))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@18 T@U) ) (!  (=> (= (type d@@18) DatatypeTypeType) (and (=> (Options.Option.None_q d@@18) (= (DatatypeCtorId d@@18) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@18) |##Options.Option.None|) (Options.Option.None_q d@@18)))) :qid |unknown.0:0| :skolemid |2471| :pattern ( (Options.Option.None_q d@@18)) )))
(assert (forall ((d@@19 T@U) ) (!  (=> (and (= (type d@@19) DatatypeTypeType) (Options.Option.None_q d@@19)) (= d@@19 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |2472| :pattern ( (Options.Option.None_q d@@19)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |2473| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@33 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@33) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@33)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@33)) :qid |unknown.0:0| :skolemid |2474| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@33)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |2475| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@20 T@U) ) (!  (=> (= (type d@@20) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@20) (= (DatatypeCtorId d@@20) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@20) |##Options.Option.Some|) (Options.Option.Some_q d@@20)))) :qid |unknown.0:0| :skolemid |2476| :pattern ( (Options.Option.Some_q d@@20)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) (Options.Option.Some_q d@@21)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@21 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsd.2:36| :skolemid |2477| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |2478| :pattern ( (Options.Option.Some_q d@@21)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4)) (=> ($IsBox |a#7#0#0@@0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |2479| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@34 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@34) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@34)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@34) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@34)) (=> ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@34) ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@34)))) :qid |unknown.0:0| :skolemid |2480| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@34)) )))
(assert (forall ((d@@22 T@U) (Options.Option$V@@6 T@U) ($h@@35 T@U) ) (!  (=> (and (and (and (= (type d@@22) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@35) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@35) (and (Options.Option.Some_q d@@22) ($IsAlloc d@@22 (Tclass.Options.Option Options.Option$V@@6) $h@@35)))) ($IsAllocBox (Options.Option.value d@@22) Options.Option$V@@6 $h@@35)) :qid |unknown.0:0| :skolemid |2481| :pattern ( ($IsAllocBox (Options.Option.value d@@22) Options.Option$V@@6 $h@@35)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsd.2:36| :skolemid |2482| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsd.2:36| :skolemid |2483| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsd.2:36| :skolemid |2484| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (and (= (type d@@23) DatatypeTypeType) (|$IsA#Options.Option| d@@23)) (or (Options.Option.None_q d@@23) (Options.Option.Some_q d@@23))) :qid |unknown.0:0| :skolemid |2485| :pattern ( (|$IsA#Options.Option| d@@23)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@24 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@24) DatatypeTypeType)) ($Is d@@24 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@24) (Options.Option.Some_q d@@24))) :qid |unknown.0:0| :skolemid |2486| :pattern ( (Options.Option.Some_q d@@24) ($Is d@@24 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@24) ($Is d@@24 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@136 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (Options.Option.None_q a@@136) (Options.Option.None_q b@@67))) (and (=> (|Options.Option#Equal| a@@136 b@@67) true) (=> true (|Options.Option#Equal| a@@136 b@@67)))) :qid |unknown.0:0| :skolemid |2487| :pattern ( (|Options.Option#Equal| a@@136 b@@67) (Options.Option.None_q a@@136)) :pattern ( (|Options.Option#Equal| a@@136 b@@67) (Options.Option.None_q b@@67)) )))
(assert (forall ((a@@137 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@137) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (Options.Option.Some_q a@@137) (Options.Option.Some_q b@@68))) (and (=> (|Options.Option#Equal| a@@137 b@@68) (= (Options.Option.value a@@137) (Options.Option.value b@@68))) (=> (= (Options.Option.value a@@137) (Options.Option.value b@@68)) (|Options.Option#Equal| a@@137 b@@68)))) :qid |unknown.0:0| :skolemid |2488| :pattern ( (|Options.Option#Equal| a@@137 b@@68) (Options.Option.Some_q a@@137)) :pattern ( (|Options.Option#Equal| a@@137 b@@68) (Options.Option.Some_q b@@68)) )))
(assert (forall ((a@@138 T@U) (b@@69 T@U) ) (!  (=> (and (= (type a@@138) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@138 b@@69) (= a@@138 b@@69)) (=> (= a@@138 b@@69) (|Options.Option#Equal| a@@138 b@@69)))) :qid |unknown.0:0| :skolemid |2489| :pattern ( (|Options.Option#Equal| a@@138 b@@69)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@121 T@U) ) (!  (=> (and (= (type bx@@121) BoxType) ($IsBox bx@@121 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@121)) bx@@121) ($Is ($Unbox refType bx@@121) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |2490| :pattern ( ($IsBox bx@@121 Tclass.Options.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (and (=> ($Is $o@@11 Tclass.Options.__default) (or (= $o@@11 null) (= (dtype $o@@11) Tclass.Options.__default))) (=> (or (= $o@@11 null) (= (dtype $o@@11) Tclass.Options.__default)) ($Is $o@@11 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |2491| :pattern ( ($Is $o@@11 Tclass.Options.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@36 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@36) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@12 Tclass.Options.__default $h@@36) (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@36 $o@@12) alloc)))) (=> (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@36 $o@@12) alloc))) ($IsAlloc $o@@12 Tclass.Options.__default $h@@36)))) :qid |unknown.0:0| :skolemid |2492| :pattern ( ($IsAlloc $o@@12 Tclass.Options.__default $h@@36)) )))
(assert (forall ((arg0@@408 T@U) (arg1@@218 T@U) (arg2@@153 T@U) (arg3@@103 T@U) (arg4@@84 T@U) ) (! (= (type (Options.__default.MapOption arg0@@408 arg1@@218 arg2@@153 arg3@@103 arg4@@84)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@408 arg1@@218 arg2@@153 arg3@@103 arg4@@84)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@31| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@31|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@31|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@31| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@13 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@13) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@13 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@31| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@13))))) (= (MapType1Select (MapType0Select $h0 $o@@13) $f) (MapType1Select (MapType0Select $h1 $o@@13) $f)))) :qid |unknown.0:0| :skolemid |2493| :no-pattern (type $o@@13) :no-pattern (type $f) :no-pattern (U_2_int $o@@13) :no-pattern (U_2_bool $o@@13) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@31|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@31|))) :qid |unknown.0:0| :skolemid |2494| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@31|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap T@U) (|opt#0@@0| T@U) (|f#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@32|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|) (and (and (and ($IsGoodHeap $Heap) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@32| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@32| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@32| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |2495| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@0 T@U) (|opt#0@@1| T@U) (|f#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@33|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@0) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@33| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@33|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@33| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@33| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@33|)))) :qid |unknown.0:0| :skolemid |2496| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@33|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@1 T@U) (|opt#0@@2| T@U) (|f#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@34|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@34|) (and (and (and ($IsGoodHeap $Heap@@1) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@34| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@34| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@34|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#1| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@34| |v#1|)))))) :qid |unknown.0:0| :skolemid |2497| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@34|)) ))))
(assert (forall ((arg0@@409 T@U) (arg1@@219 T@U) (arg2@@154 T@U) (arg3@@104 T@U) (arg4@@85 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@409 arg1@@219 arg2@@154 arg3@@104 arg4@@85)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@409 arg1@@219 arg2@@154 arg3@@104 arg4@@85)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@35|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@35|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@35| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@14 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@14) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@14 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@35| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@14))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@14) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@14) $f@@0)))) :qid |unknown.0:0| :skolemid |2498| :no-pattern (type $o@@14) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@14) :no-pattern (U_2_bool $o@@14) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@35|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@35|))) :qid |unknown.0:0| :skolemid |2499| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@35|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@4| T@U) (|f#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@36|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@36| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |2500| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@5| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@37|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@37| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@37|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@37| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@37| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@37|)))) :qid |unknown.0:0| :skolemid |2501| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@37|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@6| T@U) (|f#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@38|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@38|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@38| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@38| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@38|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#1@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@38| |v#1@@0|)))))) :qid |unknown.0:0| :skolemid |2502| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@38|)) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@122 T@U) ) (!  (=> (and (= (type bx@@122) BoxType) ($IsBox bx@@122 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@122)) bx@@122) ($Is ($Unbox intType bx@@122) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |2503| :pattern ( ($IsBox bx@@122 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@39| T@U) ) (!  (=> (= (type |i#0@@39|) intType) (and (=> ($Is |i#0@@39| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@39|)) (< (U_2_int |i#0@@39|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@39|)) (< (U_2_int |i#0@@39|) 128)) ($Is |i#0@@39| Tclass.NativeTypes.sbyte)))) :qid |unknown.0:0| :skolemid |2504| :pattern ( ($Is |i#0@@39| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@40| T@U) ($h@@37 T@U) ) (!  (=> (and (= (type |i#0@@40|) intType) (= (type $h@@37) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@40| Tclass.NativeTypes.sbyte $h@@37)) :qid |unknown.0:0| :skolemid |2505| :pattern ( ($IsAlloc |i#0@@40| Tclass.NativeTypes.sbyte $h@@37)) )))
(assert (forall ((|i#0@@41| T@U) ) (!  (=> (= (type |i#0@@41|) intType) (and (=> ($Is |i#0@@41| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@41|)) (< (U_2_int |i#0@@41|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@41|)) (< (U_2_int |i#0@@41|) 256)) ($Is |i#0@@41| Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |2506| :pattern ( ($Is |i#0@@41| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@42| T@U) ($h@@38 T@U) ) (!  (=> (and (= (type |i#0@@42|) intType) (= (type $h@@38) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@42| Tclass.NativeTypes.byte $h@@38)) :qid |unknown.0:0| :skolemid |2507| :pattern ( ($IsAlloc |i#0@@42| Tclass.NativeTypes.byte $h@@38)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@123 T@U) ) (!  (=> (and (= (type bx@@123) BoxType) ($IsBox bx@@123 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@123)) bx@@123) ($Is ($Unbox intType bx@@123) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |2508| :pattern ( ($IsBox bx@@123 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@43| T@U) ) (!  (=> (= (type |i#0@@43|) intType) (and (=> ($Is |i#0@@43| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@43|)) (< (U_2_int |i#0@@43|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@43|)) (< (U_2_int |i#0@@43|) 32768)) ($Is |i#0@@43| Tclass.NativeTypes.int16)))) :qid |unknown.0:0| :skolemid |2509| :pattern ( ($Is |i#0@@43| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@44| T@U) ($h@@39 T@U) ) (!  (=> (and (= (type |i#0@@44|) intType) (= (type $h@@39) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@44| Tclass.NativeTypes.int16 $h@@39)) :qid |unknown.0:0| :skolemid |2510| :pattern ( ($IsAlloc |i#0@@44| Tclass.NativeTypes.int16 $h@@39)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@124 T@U) ) (!  (=> (and (= (type bx@@124) BoxType) ($IsBox bx@@124 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@124)) bx@@124) ($Is ($Unbox intType bx@@124) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |2511| :pattern ( ($IsBox bx@@124 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@45| T@U) ) (!  (=> (= (type |i#0@@45|) intType) (and (=> ($Is |i#0@@45| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@45|)) (< (U_2_int |i#0@@45|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@45|)) (< (U_2_int |i#0@@45|) 65536)) ($Is |i#0@@45| Tclass.NativeTypes.uint16)))) :qid |unknown.0:0| :skolemid |2512| :pattern ( ($Is |i#0@@45| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@46| T@U) ($h@@40 T@U) ) (!  (=> (and (= (type |i#0@@46|) intType) (= (type $h@@40) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@46| Tclass.NativeTypes.uint16 $h@@40)) :qid |unknown.0:0| :skolemid |2513| :pattern ( ($IsAlloc |i#0@@46| Tclass.NativeTypes.uint16 $h@@40)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@125 T@U) ) (!  (=> (and (= (type bx@@125) BoxType) ($IsBox bx@@125 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@125)) bx@@125) ($Is ($Unbox intType bx@@125) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |2514| :pattern ( ($IsBox bx@@125 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@47| T@U) ) (!  (=> (= (type |i#0@@47|) intType) (and (=> ($Is |i#0@@47| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@47|)) (< (U_2_int |i#0@@47|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@47|)) (< (U_2_int |i#0@@47|) 2147483648)) ($Is |i#0@@47| Tclass.NativeTypes.int32)))) :qid |unknown.0:0| :skolemid |2515| :pattern ( ($Is |i#0@@47| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@48| T@U) ($h@@41 T@U) ) (!  (=> (and (= (type |i#0@@48|) intType) (= (type $h@@41) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@48| Tclass.NativeTypes.int32 $h@@41)) :qid |unknown.0:0| :skolemid |2516| :pattern ( ($IsAlloc |i#0@@48| Tclass.NativeTypes.int32 $h@@41)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@126 T@U) ) (!  (=> (and (= (type bx@@126) BoxType) ($IsBox bx@@126 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@126)) bx@@126) ($Is ($Unbox intType bx@@126) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |2517| :pattern ( ($IsBox bx@@126 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@49| T@U) ) (!  (=> (= (type |i#0@@49|) intType) (and (=> ($Is |i#0@@49| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@49|)) (< (U_2_int |i#0@@49|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@49|)) (< (U_2_int |i#0@@49|) 4294967296)) ($Is |i#0@@49| Tclass.NativeTypes.uint32)))) :qid |unknown.0:0| :skolemid |2518| :pattern ( ($Is |i#0@@49| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@50| T@U) ($h@@42 T@U) ) (!  (=> (and (= (type |i#0@@50|) intType) (= (type $h@@42) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@50| Tclass.NativeTypes.uint32 $h@@42)) :qid |unknown.0:0| :skolemid |2519| :pattern ( ($IsAlloc |i#0@@50| Tclass.NativeTypes.uint32 $h@@42)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@127 T@U) ) (!  (=> (and (= (type bx@@127) BoxType) ($IsBox bx@@127 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@127)) bx@@127) ($Is ($Unbox intType bx@@127) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |2520| :pattern ( ($IsBox bx@@127 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@51| T@U) ) (!  (=> (= (type |i#0@@51|) intType) (and (=> ($Is |i#0@@51| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@51|)) (< (U_2_int |i#0@@51|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@51|)) (< (U_2_int |i#0@@51|) 9223372036854775808)) ($Is |i#0@@51| Tclass.NativeTypes.int64)))) :qid |unknown.0:0| :skolemid |2521| :pattern ( ($Is |i#0@@51| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@52| T@U) ($h@@43 T@U) ) (!  (=> (and (= (type |i#0@@52|) intType) (= (type $h@@43) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@52| Tclass.NativeTypes.int64 $h@@43)) :qid |unknown.0:0| :skolemid |2522| :pattern ( ($IsAlloc |i#0@@52| Tclass.NativeTypes.int64 $h@@43)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@128 T@U) ) (!  (=> (and (= (type bx@@128) BoxType) ($IsBox bx@@128 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@128)) bx@@128) ($Is ($Unbox intType bx@@128) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |2523| :pattern ( ($IsBox bx@@128 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@53| T@U) ) (!  (=> (= (type |i#0@@53|) intType) (and (=> ($Is |i#0@@53| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@53|)) (< (U_2_int |i#0@@53|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@53|)) (< (U_2_int |i#0@@53|) 18446744073709551616)) ($Is |i#0@@53| Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |2524| :pattern ( ($Is |i#0@@53| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@54| T@U) ($h@@44 T@U) ) (!  (=> (and (= (type |i#0@@54|) intType) (= (type $h@@44) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@54| Tclass.NativeTypes.uint64 $h@@44)) :qid |unknown.0:0| :skolemid |2525| :pattern ( ($IsAlloc |i#0@@54| Tclass.NativeTypes.uint64 $h@@44)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@129 T@U) ) (!  (=> (and (= (type bx@@129) BoxType) ($IsBox bx@@129 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@129)) bx@@129) ($Is ($Unbox intType bx@@129) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |2526| :pattern ( ($IsBox bx@@129 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@55| T@U) ) (!  (=> (= (type |i#0@@55|) intType) (and (=> ($Is |i#0@@55| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@55|)) (< (U_2_int |i#0@@55|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@55|)) (< (U_2_int |i#0@@55|) 128)) ($Is |i#0@@55| Tclass.NativeTypes.nat8)))) :qid |unknown.0:0| :skolemid |2527| :pattern ( ($Is |i#0@@55| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@56| T@U) ($h@@45 T@U) ) (!  (=> (and (= (type |i#0@@56|) intType) (= (type $h@@45) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@56| Tclass.NativeTypes.nat8 $h@@45)) :qid |unknown.0:0| :skolemid |2528| :pattern ( ($IsAlloc |i#0@@56| Tclass.NativeTypes.nat8 $h@@45)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@130 T@U) ) (!  (=> (and (= (type bx@@130) BoxType) ($IsBox bx@@130 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@130)) bx@@130) ($Is ($Unbox intType bx@@130) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |2529| :pattern ( ($IsBox bx@@130 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@57| T@U) ) (!  (=> (= (type |i#0@@57|) intType) (and (=> ($Is |i#0@@57| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@57|)) (< (U_2_int |i#0@@57|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@57|)) (< (U_2_int |i#0@@57|) 32768)) ($Is |i#0@@57| Tclass.NativeTypes.nat16)))) :qid |unknown.0:0| :skolemid |2530| :pattern ( ($Is |i#0@@57| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@58| T@U) ($h@@46 T@U) ) (!  (=> (and (= (type |i#0@@58|) intType) (= (type $h@@46) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@58| Tclass.NativeTypes.nat16 $h@@46)) :qid |unknown.0:0| :skolemid |2531| :pattern ( ($IsAlloc |i#0@@58| Tclass.NativeTypes.nat16 $h@@46)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@131 T@U) ) (!  (=> (and (= (type bx@@131) BoxType) ($IsBox bx@@131 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@131)) bx@@131) ($Is ($Unbox intType bx@@131) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |2532| :pattern ( ($IsBox bx@@131 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@59| T@U) ) (!  (=> (= (type |i#0@@59|) intType) (and (=> ($Is |i#0@@59| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@59|)) (< (U_2_int |i#0@@59|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@59|)) (< (U_2_int |i#0@@59|) 2147483648)) ($Is |i#0@@59| Tclass.NativeTypes.nat32)))) :qid |unknown.0:0| :skolemid |2533| :pattern ( ($Is |i#0@@59| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@60| T@U) ($h@@47 T@U) ) (!  (=> (and (= (type |i#0@@60|) intType) (= (type $h@@47) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@60| Tclass.NativeTypes.nat32 $h@@47)) :qid |unknown.0:0| :skolemid |2534| :pattern ( ($IsAlloc |i#0@@60| Tclass.NativeTypes.nat32 $h@@47)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@132 T@U) ) (!  (=> (and (= (type bx@@132) BoxType) ($IsBox bx@@132 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@132)) bx@@132) ($Is ($Unbox intType bx@@132) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |2535| :pattern ( ($IsBox bx@@132 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@61| T@U) ) (!  (=> (= (type |i#0@@61|) intType) (and (=> ($Is |i#0@@61| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@61|)) (< (U_2_int |i#0@@61|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@61|)) (< (U_2_int |i#0@@61|) 9223372036854775808)) ($Is |i#0@@61| Tclass.NativeTypes.nat64)))) :qid |unknown.0:0| :skolemid |2536| :pattern ( ($Is |i#0@@61| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@62| T@U) ($h@@48 T@U) ) (!  (=> (and (= (type |i#0@@62|) intType) (= (type $h@@48) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@62| Tclass.NativeTypes.nat64 $h@@48)) :qid |unknown.0:0| :skolemid |2537| :pattern ( ($IsAlloc |i#0@@62| Tclass.NativeTypes.nat64 $h@@48)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@133 T@U) ) (!  (=> (and (= (type bx@@133) BoxType) ($IsBox bx@@133 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@133)) bx@@133) ($Is ($Unbox refType bx@@133) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |2538| :pattern ( ($IsBox bx@@133 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (and (=> ($Is $o@@15 Tclass.NativeTypes.__default) (or (= $o@@15 null) (= (dtype $o@@15) Tclass.NativeTypes.__default))) (=> (or (= $o@@15 null) (= (dtype $o@@15) Tclass.NativeTypes.__default)) ($Is $o@@15 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |2539| :pattern ( ($Is $o@@15 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@49 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@49) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@16 Tclass.NativeTypes.__default $h@@49) (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@49 $o@@16) alloc)))) (=> (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@49 $o@@16) alloc))) ($IsAlloc $o@@16 Tclass.NativeTypes.__default $h@@49)))) :qid |unknown.0:0| :skolemid |2540| :pattern ( ($IsAlloc $o@@16 Tclass.NativeTypes.__default $h@@49)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (forall ((bx@@134 T@U) ) (!  (=> (and (= (type bx@@134) BoxType) ($IsBox bx@@134 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@134)) bx@@134) ($Is ($Unbox refType bx@@134) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |2541| :pattern ( ($IsBox bx@@134 Tclass.Sequences.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (and (=> ($Is $o@@17 Tclass.Sequences.__default) (or (= $o@@17 null) (= (dtype $o@@17) Tclass.Sequences.__default))) (=> (or (= $o@@17 null) (= (dtype $o@@17) Tclass.Sequences.__default)) ($Is $o@@17 Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |2542| :pattern ( ($Is $o@@17 Tclass.Sequences.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@50 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@50) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@18 Tclass.Sequences.__default $h@@50) (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@50 $o@@18) alloc)))) (=> (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@50 $o@@18) alloc))) ($IsAlloc $o@@18 Tclass.Sequences.__default $h@@50)))) :qid |unknown.0:0| :skolemid |2543| :pattern ( ($IsAlloc $o@@18 Tclass.Sequences.__default $h@@50)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0|) (and ($Is |run#0| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |2544| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq Sequences._default.Last$E@@0))) (and (=> (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0)) (=> (> (|Seq#Length| |run#0@@0|) 0) (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)))) :qid |unknown.0:0| :skolemid |2545| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |2546| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2547| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |2548| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq Sequences._default.DropLast$E@@0))) (and (=> (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0)) (=> (> (|Seq#Length| |run#0@@4|) 0) (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)))) :qid |unknown.0:0| :skolemid |2549| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |2550| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2551| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@7|) ($Is |run#0@@7| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |2552| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Set$T@@0))) (and (=> (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|) true) (=> true (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)))) :qid |unknown.0:0| :skolemid |2553| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)) )))
(assert (forall ((arg0@@410 T@U) (arg1@@220 T@U) (arg2@@155 Int) ) (! (= (type (|lambda#469| arg0@@410 arg1@@220 arg2@@155)) (MapType0Type BoxType boolType)) :qid |funType:lambda#469| :pattern ( (|lambda#469| arg0@@410 arg1@@220 arg2@@155)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@9|) ($Is |run#0@@9| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|) (|lambda#469| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@9|) 0))) :qid |unknown.0:0| :skolemid |2554| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@10|)) ($Is |run#0@@10| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|)) (|lambda#469| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@10|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2555| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@411 T@U) (arg1@@221 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@411 arg1@@221)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@411 arg1@@221)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |2556| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.ISet$T@@0))) (and (=> (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|) true) (=> true (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)))) :qid |unknown.0:0| :skolemid |2557| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|) (|lambda#469| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@13|) 0))) :qid |unknown.0:0| :skolemid |2558| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) (|lambda#469| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@14|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2559| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@138 T@U) (|a#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |a#0@@9|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@138) |a#0@@9|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@138 |a#0@@9|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@138 |a#0@@9|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@138) |a#0@@9|)))) :qid |unknown.0:0| :skolemid |2560| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@138) |a#0@@9|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@139 T@U) (|a#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |a#0@@10|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@139 |a#0@@10|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@10|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@10|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@139 |a#0@@10|)))) :qid |unknown.0:0| :skolemid |2561| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@139) |a#0@@10|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@140 T@U) (|a#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |a#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@11|) ($Is |a#0@@11| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |2562| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@140 |a#0@@11|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@141 T@U) (|a#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |a#0@@12|) (SeqType BoxType))) ($Is |a#0@@12| (TSeq Sequences._default.NoDupes$T@@2))) (and (=> (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@141 |a#0@@12|) true) (=> true (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@141 |a#0@@12|)))) :qid |unknown.0:0| :skolemid |2563| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@141 |a#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@142 T@U) (|a#0@@13| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |a#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@13|) ($Is |a#0@@13| (TSeq Sequences._default.NoDupes$T@@3)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@142) |a#0@@13|) (forall ((|i#0@@63| Int) (|j#0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| (|Seq#Length| |a#0@@13|))) (and (<= (LitInt 0) |j#0|) (< |j#0| (|Seq#Length| |a#0@@13|)))) (not (= |i#0@@63| |j#0|))) (not (= (|Seq#Index| |a#0@@13| |i#0@@63|) (|Seq#Index| |a#0@@13| |j#0|))))) :qid |sequence.54:13| :skolemid |2564| :pattern ( (|Seq#Index| |a#0@@13| |j#0|) (|Seq#Index| |a#0@@13| |i#0@@63|)) ))) (=> (forall ((|i#0@@64| Int) (|j#0@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| (|Seq#Length| |a#0@@13|))) (and (<= (LitInt 0) |j#0@@0|) (< |j#0@@0| (|Seq#Length| |a#0@@13|)))) (not (= |i#0@@64| |j#0@@0|))) (not (= (|Seq#Index| |a#0@@13| |i#0@@64|) (|Seq#Index| |a#0@@13| |j#0@@0|))))) :qid |sequence.54:13| :skolemid |2564| :pattern ( (|Seq#Index| |a#0@@13| |j#0@@0|) (|Seq#Index| |a#0@@13| |i#0@@64|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@142) |a#0@@13|)))) :qid |unknown.0:0| :skolemid |2565| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@142) |a#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@143 T@U) (|a#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |a#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@14|)) ($Is |a#0@@14| (TSeq Sequences._default.NoDupes$T@@4)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@143) (Lit |a#0@@14|)) (forall ((|i#1@@19| Int) (|j#1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@19|) (< |i#1@@19| (|Seq#Length| (Lit |a#0@@14|)))) (and (<= (LitInt 0) |j#1|) (< |j#1| (|Seq#Length| (Lit |a#0@@14|))))) (not (= |i#1@@19| |j#1|))) (not (= (|Seq#Index| (Lit |a#0@@14|) |i#1@@19|) (|Seq#Index| (Lit |a#0@@14|) |j#1|))))) :qid |sequence.54:13| :skolemid |2566| :pattern ( (|Seq#Index| |a#0@@14| |j#1|) (|Seq#Index| |a#0@@14| |i#1@@19|)) ))) (=> (forall ((|i#1@@20| Int) (|j#1@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@20|) (< |i#1@@20| (|Seq#Length| (Lit |a#0@@14|)))) (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| (|Seq#Length| (Lit |a#0@@14|))))) (not (= |i#1@@20| |j#1@@0|))) (not (= (|Seq#Index| (Lit |a#0@@14|) |i#1@@20|) (|Seq#Index| (Lit |a#0@@14|) |j#1@@0|))))) :qid |sequence.54:13| :skolemid |2566| :pattern ( (|Seq#Index| |a#0@@14| |j#1@@0|) (|Seq#Index| |a#0@@14| |i#1@@20|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@143) (Lit |a#0@@14|))))) :qid |unknown.0:0| :weight 3 :skolemid |2567| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@143) (Lit |a#0@@14|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0| |e#0|) (and (and ($Is |s#0| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|) (|Seq#Length| |s#0|))) (= (|Seq#Index| |s#0| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |2569| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@5 T@U) (|s#0@@0| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@5) ($Is |s#0@@0| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (and (=> (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) (|Seq#Contains| |s#0@@0| |e#0@@0|)) (=> (|Seq#Contains| |s#0@@0| |e#0@@0|) (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|)))) :qid |unknown.0:0| :skolemid |2570| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) ($IsGoodHeap $Heap@@5)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@45 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@45) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@45 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e) (|Seq#Length| s@@45))) (= (|Seq#Index| s@@45 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) e))) :qid |sequence.105:5| :skolemid |2571| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@6 T@U) (|s#0@@1| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@6) ($Is |s#0@@1| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@1| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (let ((|i#0@@65| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|))) |i#0@@65|)))) :qid |unknown.0:0| :skolemid |2572| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) ($IsGoodHeap $Heap@@6)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@7 T@U) (|s#0@@2| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |s#0@@2| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@2| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (let ((|i#1@@21| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|))) |i#1@@21|)))) :qid |unknown.0:0| :weight 3 :skolemid |2573| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) ($IsGoodHeap $Heap@@7)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@8 T@U) (|s#0@@3| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@3| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@3| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (let ((|i#2@@0| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)))) |i#2@@0|)))) :qid |unknown.0:0| :weight 3 :skolemid |2574| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@8)) ))))
(assert (forall ((arg0@@412 T@U) (arg1@@222 Int) ) (! (= (type (Sequences.__default.Range arg0@@412 arg1@@222)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@412 arg1@@222)) )))
(assert (forall (($ly@@144 T@U) (|n#0@@5| Int) ) (!  (=> (= (type $ly@@144) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@144) |n#0@@5|) (Sequences.__default.Range $ly@@144 |n#0@@5|))) :qid |sequence.109:22| :skolemid |2575| :pattern ( (Sequences.__default.Range ($LS $ly@@144) |n#0@@5|)) )))
(assert (forall (($ly@@145 T@U) (|n#0@@6| Int) ) (!  (=> (= (type $ly@@145) LayerTypeType) (= (Sequences.__default.Range $ly@@145 |n#0@@6|) (Sequences.__default.Range $LZ |n#0@@6|))) :qid |sequence.109:22| :skolemid |2576| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@145) |n#0@@6|)) )))
(assert  (=> true (forall (($ly@@146 T@U) (|n#0@@7| Int) ) (!  (=> (and (= (type $ly@@146) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@7|) (>= |n#0@@7| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@146 |n#0@@7|)) |n#0@@7|) (forall ((|i#0@@66| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@66|) (< |i#0@@66| |n#0@@7|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@146 |n#0@@7|) |i#0@@66|))) |i#0@@66|)) :qid |sequence.112:20| :skolemid |2577| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@146 |n#0@@7|) |i#0@@66|))) ))) ($Is (Sequences.__default.Range $ly@@146 |n#0@@7|) (TSeq TInt)))) :qid |sequence.109:22| :skolemid |2578| :pattern ( (Sequences.__default.Range $ly@@146 |n#0@@7|)) ))))
(assert (forall (($ly@@147 T@U) (|n#0@@8| Int) ) (!  (=> (= (type $ly@@147) LayerTypeType) (and (=> (|Sequences.__default.Range#requires| $ly@@147 |n#0@@8|) (>= |n#0@@8| (LitInt 0))) (=> (>= |n#0@@8| (LitInt 0)) (|Sequences.__default.Range#requires| $ly@@147 |n#0@@8|)))) :qid |sequence.109:22| :skolemid |2579| :pattern ( (|Sequences.__default.Range#requires| $ly@@147 |n#0@@8|)) )))
(assert  (=> true (forall (($ly@@148 T@U) (|n#0@@9| Int) ) (!  (=> (and (= (type $ly@@148) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@9|) (>= |n#0@@9| (LitInt 0)))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@9| 1))) (= (Sequences.__default.Range ($LS $ly@@148) |n#0@@9|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@148 (- |n#0@@9| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@9| 1))))))))) :qid |sequence.109:22| :skolemid |2580| :pattern ( (Sequences.__default.Range ($LS $ly@@148) |n#0@@9|)) ))))
(assert  (=> true (forall (($ly@@149 T@U) (|n#0@@10| Int) ) (!  (=> (and (= (type $ly@@149) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@10|)) (>= (LitInt |n#0@@10|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@10| 1)))) (= (Sequences.__default.Range ($LS $ly@@149) (LitInt |n#0@@10|)) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@149) (LitInt (- |n#0@@10| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@10| 1)))))))))) :qid |sequence.109:22| :weight 3 :skolemid |2581| :pattern ( (Sequences.__default.Range ($LS $ly@@149) (LitInt |n#0@@10|))) ))))
(assert (forall ((arg0@@413 T@U) (arg1@@223 T@U) (arg2@@156 T@U) (arg3@@105 T@U) (arg4@@86 T@U) (arg5@@65 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@413 arg1@@223 arg2@@156 arg3@@105 arg4@@86 arg5@@65)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@413 arg1@@223 arg2@@156 arg3@@105 arg4@@86 arg5@@65)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@150 T@U) ($Heap@@9 T@U) (|f#0@@39| T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@150) LayerTypeType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@15|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@150) $Heap@@9 |f#0@@39| |run#0@@15|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@150 $Heap@@9 |f#0@@39| |run#0@@15|))) :qid |unknown.0:0| :skolemid |2582| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@150) $Heap@@9 |f#0@@39| |run#0@@15|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@151 T@U) ($Heap@@10 T@U) (|f#0@@40| T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@151) LayerTypeType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@16|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@151 $Heap@@10 |f#0@@40| |run#0@@16|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@10 |f#0@@40| |run#0@@16|))) :qid |unknown.0:0| :skolemid |2583| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@151) $Heap@@10 |f#0@@40| |run#0@@16|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@152 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@41| T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@152) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@17|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@41| |run#0@@17|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@17| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@19 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@19) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@19 null)) (exists ((|i#0@@67| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@67|) (< |i#0@@67| (|Seq#Length| |run#0@@17|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@41| (|Seq#Index| |run#0@@17| |i#0@@67|)) ($Box |o#0|))))) (= ($Box $o@@19) ($Box |o#0|)))) :qid |sequence.121:15| :skolemid |2584| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@41| (|Seq#Index| |run#0@@17| |i#0@@67|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@19) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@19) $f@@1)))) :qid |unknown.0:0| :skolemid |2585| :no-pattern (type $o@@19) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@19) :no-pattern (U_2_bool $o@@19) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@152 $h0@@1 |f#0@@41| |run#0@@17|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@152 $h1@@1 |f#0@@41| |run#0@@17|))) :qid |unknown.0:0| :skolemid |2586| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@152 $h1@@1 |f#0@@41| |run#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@153 T@U) ($Heap@@11 T@U) (|f#0@@42| T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@153) LayerTypeType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@42| |run#0@@18|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@18| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@22| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@22|) (< |i#1@@22| (|Seq#Length| |run#0@@18|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@42| (|Seq#Index| |run#0@@18| |i#1@@22|)))) :qid |sequence.118:21| :skolemid |2587| :pattern ( (|Seq#Index| |run#0@@18| |i#1@@22|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@153 $Heap@@11 |f#0@@42| |run#0@@18|)) (|Seq#Length| |run#0@@18|)) (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |run#0@@18|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@153 $Heap@@11 |f#0@@42| |run#0@@18|) |i#2@@1|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@42| (|Seq#Index| |run#0@@18| |i#2@@1|))))) :qid |sequence.120:20| :skolemid |2588| :pattern ( (|Seq#Index| |run#0@@18| |i#2@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@153 $Heap@@11 |f#0@@42| |run#0@@18|) |i#2@@1|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@153 $Heap@@11 |f#0@@42| |run#0@@18|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |2589| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@153 $Heap@@11 |f#0@@42| |run#0@@18|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@154 T@U) ($Heap@@12 T@U) (|f#0@@43| T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@154) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@12) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@19| (TSeq Sequences._default.Apply$E@@3)))) (and (=> (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@154 $Heap@@12 |f#0@@43| |run#0@@19|) (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@43| (|Seq#Index| |run#0@@19| |i#3@@0|)))) :qid |sequence.118:21| :skolemid |2590| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@0|)) ))) (=> (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@43| (|Seq#Index| |run#0@@19| |i#3@@1|)))) :qid |sequence.118:21| :skolemid |2590| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@1|)) )) (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@154 $Heap@@12 |f#0@@43| |run#0@@19|)))) :qid |unknown.0:0| :skolemid |2591| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@154 $Heap@@12 |f#0@@43| |run#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@155 T@U) ($Heap@@13 T@U) (|f#0@@44| T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@155) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| |run#0@@20|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@20| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@20|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| (|Seq#Index| |run#0@@20| |i#3@@2|)))) :qid |sequence.118:21| :skolemid |2590| :pattern ( (|Seq#Index| |run#0@@20| |i#3@@2|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@20|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| (|Seq#Drop| |run#0@@20| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@155) $Heap@@13 |f#0@@44| |run#0@@20|) (ite (= (|Seq#Length| |run#0@@20|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| (|Seq#Index| |run#0@@20| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@155 $Heap@@13 |f#0@@44| (|Seq#Drop| |run#0@@20| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2592| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@155) $Heap@@13 |f#0@@44| |run#0@@20|)) ))))
(assert (forall ((arg0@@414 T@U) (arg1@@224 T@U) (arg2@@157 T@U) (arg3@@106 T@U) (arg4@@87 T@U) (arg5@@66 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@414 arg1@@224 arg2@@157 arg3@@106 arg4@@87 arg5@@66)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@414 arg1@@224 arg2@@157 arg3@@106 arg4@@87 arg5@@66)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@156 T@U) ($Heap@@14 T@U) (|f#0@@45| T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@156) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@45|) HandleTypeType)) (= (type |run#0@@21|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@156) $Heap@@14 |f#0@@45| |run#0@@21|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@156 $Heap@@14 |f#0@@45| |run#0@@21|))) :qid |unknown.0:0| :skolemid |2593| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@156) $Heap@@14 |f#0@@45| |run#0@@21|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@157 T@U) ($Heap@@15 T@U) (|f#0@@46| T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@157) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@46|) HandleTypeType)) (= (type |run#0@@22|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@157 $Heap@@15 |f#0@@46| |run#0@@22|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@15 |f#0@@46| |run#0@@22|))) :qid |unknown.0:0| :skolemid |2594| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@157) $Heap@@15 |f#0@@46| |run#0@@22|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@158 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@47| T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@158) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@47|) HandleTypeType)) (= (type |run#0@@23|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@47| |run#0@@23|) (and ($Is |f#0@@47| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@23| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@20 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@20) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@20 null)) (exists ((|i#0@@68| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@68|) (< |i#0@@68| (|Seq#Length| |run#0@@23|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@47| (|Seq#Index| |run#0@@23| |i#0@@68|)) ($Box |o#0@@0|))))) (= ($Box $o@@20) ($Box |o#0@@0|)))) :qid |sequence.132:15| :skolemid |2595| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@47| (|Seq#Index| |run#0@@23| |i#0@@68|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@20) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@20) $f@@2)))) :qid |unknown.0:0| :skolemid |2596| :no-pattern (type $o@@20) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@20) :no-pattern (U_2_bool $o@@20) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@158 $h0@@2 |f#0@@47| |run#0@@23|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@158 $h1@@2 |f#0@@47| |run#0@@23|))) :qid |unknown.0:0| :skolemid |2597| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@158 $h1@@2 |f#0@@47| |run#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@159 T@U) ($Heap@@16 T@U) (|f#0@@48| T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@159) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |run#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@48| |run#0@@24|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@48| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@24| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@23| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@23|) (< |i#1@@23| (|Seq#Length| |run#0@@24|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@48| (|Seq#Index| |run#0@@24| |i#1@@23|)))) :qid |sequence.129:21| :skolemid |2598| :pattern ( (|Seq#Index| |run#0@@24| |i#1@@23|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@159 $Heap@@16 |f#0@@48| |run#0@@24|)) (|Seq#Length| |run#0@@24|)) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |run#0@@24|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@159 $Heap@@16 |f#0@@48| |run#0@@24|) |i#2@@2|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@48| (|Seq#Index| |run#0@@24| |i#2@@2|))))) :qid |sequence.131:20| :skolemid |2599| :pattern ( (|Seq#Index| |run#0@@24| |i#2@@2|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@159 $Heap@@16 |f#0@@48| |run#0@@24|) |i#2@@2|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@159 $Heap@@16 |f#0@@48| |run#0@@24|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |2600| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@159 $Heap@@16 |f#0@@48| |run#0@@24|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@160 T@U) ($Heap@@17 T@U) (|f#0@@49| T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@160) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |run#0@@25|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@49| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@25| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (and (=> (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@160 $Heap@@17 |f#0@@49| |run#0@@25|) (forall ((|i#3@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@49| (|Seq#Index| |run#0@@25| |i#3@@3|)))) :qid |sequence.129:21| :skolemid |2601| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@3|)) ))) (=> (forall ((|i#3@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@49| (|Seq#Index| |run#0@@25| |i#3@@4|)))) :qid |sequence.129:21| :skolemid |2601| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@4|)) )) (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@160 $Heap@@17 |f#0@@49| |run#0@@25|)))) :qid |unknown.0:0| :skolemid |2602| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@160 $Heap@@17 |f#0@@49| |run#0@@25|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@161 T@U) ($Heap@@18 T@U) (|f#0@@50| T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@161) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@50| |run#0@@26|) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@50| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@26| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@5|) (< |i#3@@5| (|Seq#Length| |run#0@@26|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@50| (|Seq#Index| |run#0@@26| |i#3@@5|)))) :qid |sequence.129:21| :skolemid |2601| :pattern ( (|Seq#Index| |run#0@@26| |i#3@@5|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@50| |run#0@@26|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@161) $Heap@@18 |f#0@@50| |run#0@@26|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@18 |f#0@@50| |run#0@@26|)))) :qid |unknown.0:0| :skolemid |2603| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@161) $Heap@@18 |f#0@@50| |run#0@@26|)) ))))
(assert (forall ((arg0@@415 T@U) (arg1@@225 T@U) (arg2@@158 T@U) (arg3@@107 T@U) (arg4@@88 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@415 arg1@@225 arg2@@158 arg3@@107 arg4@@88)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@415 arg1@@225 arg2@@158 arg3@@107 arg4@@88)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@162 T@U) ($Heap@@19 T@U) (|f#0@@51| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@162) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@162) $Heap@@19 |f#0@@51| |run#0@@27|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@162 $Heap@@19 |f#0@@51| |run#0@@27|))) :qid |unknown.0:0| :skolemid |2604| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@162) $Heap@@19 |f#0@@51| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@163 T@U) ($Heap@@20 T@U) (|f#0@@52| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@163) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@52|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@163 $Heap@@20 |f#0@@52| |run#0@@28|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@20 |f#0@@52| |run#0@@28|))) :qid |unknown.0:0| :skolemid |2605| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@163) $Heap@@20 |f#0@@52| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@164 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@53| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@164) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@53|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@53| |run#0@@29|) (and ($Is |f#0@@53| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@29| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@21 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@21) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@21 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@53| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@21) ($Box |_o0#0|)))) :qid |sequence.141:13| :skolemid |2606| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@21) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@21) $f@@3)))) :qid |unknown.0:0| :skolemid |2607| :no-pattern (type $o@@21) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@21) :no-pattern (U_2_bool $o@@21) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@164 $h0@@3 |f#0@@53| |run#0@@29|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@164 $h1@@3 |f#0@@53| |run#0@@29|))) :qid |unknown.0:0| :skolemid |2608| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@164 $h1@@3 |f#0@@53| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@165 T@U) ($Heap@@21 T@U) (|f#0@@54| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@165) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@54|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@21 |f#0@@54| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@54| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@30| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@69| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@69|) (< |i#0@@69| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@54| (|Seq#Index| |run#0@@30| |i#0@@69|)))) :qid |sequence.138:21| :skolemid |2609| :pattern ( (|Seq#Index| |run#0@@30| |i#0@@69|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@165 $Heap@@21 |f#0@@54| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#1@@24| Int) ) (!  (=> (<= (LitInt 0) |i#1@@24|) (=> (and (< |i#1@@24| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@165 $Heap@@21 |f#0@@54| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@54| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@165 $Heap@@21 |f#0@@54| |run#0@@30|) |i#1@@24|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@54| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@165 $Heap@@21 |f#0@@54| |run#0@@30|) |i#1@@24|)))))) :qid |sequence.140:20| :skolemid |2610| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@165 $Heap@@21 |f#0@@54| |run#0@@30|) |i#1@@24|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@165 $Heap@@21 |f#0@@54| |run#0@@30|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |2611| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@165 $Heap@@21 |f#0@@54| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@166 T@U) ($Heap@@22 T@U) (|f#0@@55| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@166) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@55| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@31| (TSeq Sequences._default.Filter$E@@3)))) (and (=> (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@166 $Heap@@22 |f#0@@55| |run#0@@31|) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@55| (|Seq#Index| |run#0@@31| |i#2@@3|)))) :qid |sequence.138:21| :skolemid |2612| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@3|)) ))) (=> (forall ((|i#2@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@4|) (< |i#2@@4| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@55| (|Seq#Index| |run#0@@31| |i#2@@4|)))) :qid |sequence.138:21| :skolemid |2612| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@4|)) )) (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@166 $Heap@@22 |f#0@@55| |run#0@@31|)))) :qid |unknown.0:0| :skolemid |2613| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@166 $Heap@@22 |f#0@@55| |run#0@@31|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@167 T@U) ($Heap@@23 T@U) (|f#0@@56| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@167) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@56| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@56| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@32| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@56| (|Seq#Index| |run#0@@32| |i#2@@5|)))) :qid |sequence.138:21| :skolemid |2612| :pattern ( (|Seq#Index| |run#0@@32| |i#2@@5|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@56| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@167) $Heap@@23 |f#0@@56| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@56| (|Seq#Index| |run#0@@32| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@32| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@167 $Heap@@23 |f#0@@56| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2614| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@167) $Heap@@23 |f#0@@56| |run#0@@32|)) ))))
(assert (forall ((arg0@@416 T@U) (arg1@@226 T@U) (arg2@@159 T@U) (arg3@@108 T@U) (arg4@@89 T@U) (arg5@@67 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@416 arg1@@226 arg2@@159 arg3@@108 arg4@@89 arg5@@67)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@416 arg1@@226 arg2@@159 arg3@@108 arg4@@89 arg5@@67)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@168 T@U) (|f#0@@57| T@U) (|init#0| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@168) LayerTypeType)) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@168) |f#0@@57| |init#0| |run#0@@33|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@168 |f#0@@57| |init#0| |run#0@@33|))) :qid |unknown.0:0| :skolemid |2615| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@168) |f#0@@57| |init#0| |run#0@@33|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@169 T@U) (|f#0@@58| T@U) (|init#0@@0| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@169) LayerTypeType)) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@169 |f#0@@58| |init#0@@0| |run#0@@34|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@58| |init#0@@0| |run#0@@34|))) :qid |unknown.0:0| :skolemid |2616| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@169) |f#0@@58| |init#0@@0| |run#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@170 T@U) (|f#0@@59| T@U) (|init#0@@1| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@170) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@59| |init#0@@1| |run#0@@35|) (and (and ($Is |f#0@@59| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@35| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@170 |f#0@@59| |init#0@@1| |run#0@@35|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |2617| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@170 |f#0@@59| |init#0@@1| |run#0@@35|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@171 T@U) ($Heap@@24 T@U) (|f#0@@60| T@U) (|init#0@@2| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@171) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@36|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@60| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@36| (TSeq Sequences._default.FoldLeft$E@@2)))) (and (=> (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@171 |f#0@@60| |init#0@@2| |run#0@@36|) true) (=> true (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@171 |f#0@@60| |init#0@@2| |run#0@@36|)))) :qid |unknown.0:0| :skolemid |2618| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@171 |f#0@@60| |init#0@@2| |run#0@@36|) ($IsGoodHeap $Heap@@24)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@172 T@U) ($Heap@@25 T@U) (|f#0@@61| T@U) (|init#0@@3| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@172) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@61| |init#0@@3| |run#0@@37|) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@37| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@37|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@61| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@61| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@172) |f#0@@61| |init#0@@3| |run#0@@37|) (ite (= (|Seq#Length| |run#0@@37|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@172 |f#0@@61| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@61| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |2619| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@172) |f#0@@61| |init#0@@3| |run#0@@37|) ($IsGoodHeap $Heap@@25)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@173 T@U) ($Heap@@26 T@U) (|f#0@@62| T@U) (|init#0@@4| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@173) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@62| |init#0@@4| (Lit |run#0@@38|)) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@38| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@62| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@62| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@173) |f#0@@62| |init#0@@4| (Lit |run#0@@38|)) (ite (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@173) |f#0@@62| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@62| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2620| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@173) |f#0@@62| |init#0@@4| (Lit |run#0@@38|)) ($IsGoodHeap $Heap@@26)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@174 T@U) ($Heap@@27 T@U) (|f#0@@63| T@U) (|init#0@@5| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@174) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@63|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@39| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@63|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@63|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@174) (Lit |f#0@@63|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (ite (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@174) (Lit |f#0@@63|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@63|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2621| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@174) (Lit |f#0@@63|) (Lit |init#0@@5|) (Lit |run#0@@39|)) ($IsGoodHeap $Heap@@27)) ))))
(assert (forall ((arg0@@417 T@U) (arg1@@227 T@U) (arg2@@160 T@U) (arg3@@109 T@U) (arg4@@90 T@U) (arg5@@68 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@417 arg1@@227 arg2@@160 arg3@@109 arg4@@90 arg5@@68)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@417 arg1@@227 arg2@@160 arg3@@109 arg4@@90 arg5@@68)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@175 T@U) (|f#0@@64| T@U) (|init#0@@6| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@175) LayerTypeType)) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@175) |f#0@@64| |init#0@@6| |run#0@@40|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@175 |f#0@@64| |init#0@@6| |run#0@@40|))) :qid |unknown.0:0| :skolemid |2622| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@175) |f#0@@64| |init#0@@6| |run#0@@40|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@176 T@U) (|f#0@@65| T@U) (|init#0@@7| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@176) LayerTypeType)) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@41|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@176 |f#0@@65| |init#0@@7| |run#0@@41|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@65| |init#0@@7| |run#0@@41|))) :qid |unknown.0:0| :skolemid |2623| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@176) |f#0@@65| |init#0@@7| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@177 T@U) (|f#0@@66| T@U) (|init#0@@8| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@177) LayerTypeType)) (= (type |f#0@@66|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@66| |init#0@@8| |run#0@@42|) (and (and ($Is |f#0@@66| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@42| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@177 |f#0@@66| |init#0@@8| |run#0@@42|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |2624| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@177 |f#0@@66| |init#0@@8| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@178 T@U) ($Heap@@28 T@U) (|f#0@@67| T@U) (|init#0@@9| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@178) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@67|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@67| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@43| (TSeq Sequences._default.FoldRight$E@@2)))) (and (=> (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@178 |f#0@@67| |init#0@@9| |run#0@@43|) true) (=> true (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@178 |f#0@@67| |init#0@@9| |run#0@@43|)))) :qid |unknown.0:0| :skolemid |2625| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@178 |f#0@@67| |init#0@@9| |run#0@@43|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@179 T@U) ($Heap@@29 T@U) (|f#0@@68| T@U) (|init#0@@10| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@179) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@68|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@68| |init#0@@10| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@68| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@44| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@68| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@179) |f#0@@68| |init#0@@10| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@29 |f#0@@68| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@179 |f#0@@68| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1))) (|Seq#Index| |run#0@@44| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |2626| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@179) |f#0@@68| |init#0@@10| |run#0@@44|) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@180 T@U) ($Heap@@30 T@U) (|f#0@@69| T@U) (|init#0@@11| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@180) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@69|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@69| |init#0@@11| (Lit |run#0@@45|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@69| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@45| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@69| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@180) |f#0@@69| |init#0@@11| (Lit |run#0@@45|)) (ite (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@30 |f#0@@69| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@180) |f#0@@69| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@45|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2627| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@180) |f#0@@69| |init#0@@11| (Lit |run#0@@45|)) ($IsGoodHeap $Heap@@30)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@181 T@U) ($Heap@@31 T@U) (|f#0@@70| T@U) (|init#0@@12| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@181) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@70|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@70| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@46| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@181) (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (ite (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@31 (Lit |f#0@@70|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@181) (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@46|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2628| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@181) (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit |run#0@@46|)) ($IsGoodHeap $Heap@@31)) ))))
(assert (forall ((arg0@@418 T@U) (arg1@@228 T@U) (arg2@@161 T@U) (arg3@@110 T@U) (arg4@@91 T@U) (arg5@@69 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@418 arg1@@228 arg2@@161 arg3@@110 arg4@@91 arg5@@69)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@418 arg1@@228 arg2@@161 arg3@@110 arg4@@91 arg5@@69)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@182 T@U) (|f#0@@71| T@U) (|init#0@@13| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@182) LayerTypeType)) (= (type |f#0@@71|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@182) |f#0@@71| |init#0@@13| |run#0@@47|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@182 |f#0@@71| |init#0@@13| |run#0@@47|))) :qid |unknown.0:0| :skolemid |2629| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@182) |f#0@@71| |init#0@@13| |run#0@@47|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@183 T@U) (|f#0@@72| T@U) (|init#0@@14| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@183) LayerTypeType)) (= (type |f#0@@72|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@183 |f#0@@72| |init#0@@14| |run#0@@48|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@72| |init#0@@14| |run#0@@48|))) :qid |unknown.0:0| :skolemid |2630| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@183) |f#0@@72| |init#0@@14| |run#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@184 T@U) (|f#0@@73| T@U) (|init#0@@15| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@184) LayerTypeType)) (= (type |f#0@@73|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@73| |init#0@@15| |run#0@@49|) (and (and ($Is |f#0@@73| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@49| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@184 |f#0@@73| |init#0@@15| |run#0@@49|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |2631| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@184 |f#0@@73| |init#0@@15| |run#0@@49|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@185 T@U) ($Heap@@32 T@U) (|f#0@@74| T@U) (|init#0@@16| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@185) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@74|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@74| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@50| (TSeq Sequences._default.FoldFromRight$E@@2)))) (and (=> (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@185 |f#0@@74| |init#0@@16| |run#0@@50|) true) (=> true (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@185 |f#0@@74| |init#0@@16| |run#0@@50|)))) :qid |unknown.0:0| :skolemid |2632| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@185 |f#0@@74| |init#0@@16| |run#0@@50|) ($IsGoodHeap $Heap@@32)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@186 T@U) ($Heap@@33 T@U) (|f#0@@75| T@U) (|init#0@@17| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@186) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@75|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@75| |init#0@@17| |run#0@@51|) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@75| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@51| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@51|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@75| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@186) |f#0@@75| |init#0@@17| |run#0@@51|) (ite (= (|Seq#Length| |run#0@@51|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@33 |f#0@@75| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@186 |f#0@@75| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@51|)))))) :qid |unknown.0:0| :skolemid |2633| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@186) |f#0@@75| |init#0@@17| |run#0@@51|) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@187 T@U) ($Heap@@34 T@U) (|f#0@@76| T@U) (|init#0@@18| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@187) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@76|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@76| |init#0@@18| (Lit |run#0@@52|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@76| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@52| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@76| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@187) |f#0@@76| |init#0@@18| (Lit |run#0@@52|)) (ite (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@34 |f#0@@76| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@187) |f#0@@76| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2634| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@187) |f#0@@76| |init#0@@18| (Lit |run#0@@52|)) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@188 T@U) ($Heap@@35 T@U) (|f#0@@77| T@U) (|init#0@@19| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@188) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@77|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@77| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@53| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@188) (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (ite (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@35 (Lit |f#0@@77|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@188) (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2635| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@188) (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit |run#0@@53|)) ($IsGoodHeap $Heap@@35)) ))))
(assert (forall ((arg0@@419 T@U) (arg1@@229 T@U) (arg2@@162 T@U) (arg3@@111 Int) ) (! (= (type (Sequences.__default.remove arg0@@419 arg1@@229 arg2@@162 arg3@@111)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@419 arg1@@229 arg2@@162 arg3@@111)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@189 T@U) (|s#0@@4| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |s#0@@4|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@189) |s#0@@4| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@189 |s#0@@4| |pos#0|))) :qid |unknown.0:0| :skolemid |2636| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@189) |s#0@@4| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@190 T@U) (|s#0@@5| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |s#0@@5|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@190 |s#0@@5| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@5| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |2637| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@190) |s#0@@5| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@191 T@U) (|s#0@@6| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |s#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@6| |pos#0@@1|) (and ($Is |s#0@@6| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@6|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@191 |s#0@@6| |pos#0@@1|)) (- (|Seq#Length| |s#0@@6|) 1)) (forall ((|i#0@@70| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@70|) (< |i#0@@70| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@191 |s#0@@6| |pos#0@@1|) |i#0@@70|) (|Seq#Index| |s#0@@6| |i#0@@70|))) :qid |sequence.168:18| :skolemid |2638| :pattern ( (|Seq#Index| |s#0@@6| |i#0@@70|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@191 |s#0@@6| |pos#0@@1|) |i#0@@70|)) ))) (forall ((|i#1@@25| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@25|) (< |i#1@@25| (- (|Seq#Length| |s#0@@6|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@191 |s#0@@6| |pos#0@@1|) |i#1@@25|) (|Seq#Index| |s#0@@6| (+ |i#1@@25| 1)))) :qid |sequence.169:18| :skolemid |2639| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@191 |s#0@@6| |pos#0@@1|) |i#1@@25|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@191 |s#0@@6| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |2640| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@191 |s#0@@6| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@192 T@U) (|s#0@@7| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |s#0@@7|) (SeqType BoxType))) ($Is |s#0@@7| (TSeq Sequences._default.remove$A@@2))) (and (=> (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@192 |s#0@@7| |pos#0@@2|) (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|)))) (=> (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|))) (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@192 |s#0@@7| |pos#0@@2|)))) :qid |unknown.0:0| :skolemid |2641| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@192 |s#0@@7| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@193 T@U) (|s#0@@8| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |s#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@8| |pos#0@@3|) (and ($Is |s#0@@8| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@8|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@193) |s#0@@8| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@8| |pos#0@@3|) (|Seq#Drop| |s#0@@8| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |2642| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@193) |s#0@@8| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@194 T@U) (|s#0@@9| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@194) LayerTypeType)) (= (type |s#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@9| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@9|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@194) (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@9|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2643| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@194) (Lit |s#0@@9|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@420 T@U) (arg1@@230 T@U) (arg2@@163 T@U) (arg3@@112 T@U) (arg4@@92 Int) ) (! (= (type (Sequences.__default.insert arg0@@420 arg1@@230 arg2@@163 arg3@@112 arg4@@92)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@420 arg1@@230 arg2@@163 arg3@@112 arg4@@92)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@195 T@U) (|s#0@@10| T@U) (|a#0@@15| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@195) LayerTypeType)) (= (type |s#0@@10|) (SeqType BoxType))) (= (type |a#0@@15|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@195) |s#0@@10| |a#0@@15| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@195 |s#0@@10| |a#0@@15| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |2644| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@195) |s#0@@10| |a#0@@15| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@196 T@U) (|s#0@@11| T@U) (|a#0@@16| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@196) LayerTypeType)) (= (type |s#0@@11|) (SeqType BoxType))) (= (type |a#0@@16|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@196 |s#0@@11| |a#0@@16| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@11| |a#0@@16| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |2645| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@196) |s#0@@11| |a#0@@16| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@197 T@U) (|s#0@@12| T@U) (|a#0@@17| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@197) LayerTypeType)) (= (type |s#0@@12|) (SeqType BoxType))) (= (type |a#0@@17|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@12| |a#0@@17| |pos#0@@7|) (and (and ($Is |s#0@@12| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@17| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@12|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@197 |s#0@@12| |a#0@@17| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@12|) 1)) (forall ((|i#0@@71| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@71|) (< |i#0@@71| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@197 |s#0@@12| |a#0@@17| |pos#0@@7|) |i#0@@71|) (|Seq#Index| |s#0@@12| |i#0@@71|)))) :qid |sequence.177:18| :skolemid |2646| :pattern ( (|Seq#Index| |s#0@@12| |i#0@@71|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@197 |s#0@@12| |a#0@@17| |pos#0@@7|) |i#0@@71|)) ))) (forall ((|i#1@@26| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@26|) (< |i#1@@26| (|Seq#Length| |s#0@@12|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@197 |s#0@@12| |a#0@@17| |pos#0@@7|) (+ |i#1@@26| 1)) (|Seq#Index| |s#0@@12| |i#1@@26|)))) :qid |sequence.178:18| :skolemid |2647| :pattern ( (|Seq#Index| |s#0@@12| |i#1@@26|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@197 |s#0@@12| |a#0@@17| |pos#0@@7|) |pos#0@@7|) |a#0@@17|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@197 |s#0@@12| |a#0@@17| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |2648| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@197 |s#0@@12| |a#0@@17| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@198 T@U) (|s#0@@13| T@U) (|a#0@@18| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@198) LayerTypeType)) (= (type |s#0@@13|) (SeqType BoxType))) (= (type |a#0@@18|) BoxType)) (and ($Is |s#0@@13| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@18| Sequences._default.insert$A@@2))) (and (=> (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@198 |s#0@@13| |a#0@@18| |pos#0@@8|) (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@13|)))) (=> (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@13|))) (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@198 |s#0@@13| |a#0@@18| |pos#0@@8|)))) :qid |unknown.0:0| :skolemid |2649| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@198 |s#0@@13| |a#0@@18| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@199 T@U) (|s#0@@14| T@U) (|a#0@@19| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@199) LayerTypeType)) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |a#0@@19|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@14| |a#0@@19| |pos#0@@9|) (and (and ($Is |s#0@@14| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@19| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@14|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@199) |s#0@@14| |a#0@@19| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@14| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@19|)) (|Seq#Drop| |s#0@@14| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |2650| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@199) |s#0@@14| |a#0@@19| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@200 T@U) (|s#0@@15| T@U) (|a#0@@20| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@200) LayerTypeType)) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |a#0@@20|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@15|) |a#0@@20| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@15| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@20| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@15|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@200) (Lit |s#0@@15|) |a#0@@20| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@15|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@20|)) (|Seq#Drop| (Lit |s#0@@15|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |2651| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@200) (Lit |s#0@@15|) |a#0@@20| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@201 T@U) (|s#0@@16| T@U) (|a#0@@21| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@201) LayerTypeType)) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |a#0@@21|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@16|) (Lit |a#0@@21|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@16| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@21| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@16|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@201) (Lit |s#0@@16|) (Lit |a#0@@21|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@16|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@21|))) (|Seq#Drop| (Lit |s#0@@16|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |2652| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@201) (Lit |s#0@@16|) (Lit |a#0@@21|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@202 T@U) (|s#0@@17| T@U) (|a#0@@22| T@U) (|b#0@@18| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@202) LayerTypeType)) (= (type |s#0@@17|) (SeqType BoxType))) (= (type |a#0@@22|) BoxType)) (= (type |b#0@@18|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@202) |s#0@@17| |a#0@@22| |b#0@@18| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@202 |s#0@@17| |a#0@@22| |b#0@@18| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |2653| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@202) |s#0@@17| |a#0@@22| |b#0@@18| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@203 T@U) (|s#0@@18| T@U) (|a#0@@23| T@U) (|b#0@@19| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@203) LayerTypeType)) (= (type |s#0@@18|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (= (type |b#0@@19|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@203 |s#0@@18| |a#0@@23| |b#0@@19| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@18| |a#0@@23| |b#0@@19| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |2654| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@203) |s#0@@18| |a#0@@23| |b#0@@19| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@204 T@U) (|s#0@@19| T@U) (|a#0@@24| T@U) (|b#0@@20| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@204) LayerTypeType)) (= (type |s#0@@19|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (= (type |b#0@@20|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@19| |a#0@@24| |b#0@@20| |pos#0@@14|) (and (and (and ($Is |s#0@@19| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@24| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@20| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@19|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@204 |s#0@@19| |a#0@@24| |b#0@@20| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@19|) 1)) (forall ((|i#0@@72| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@72|) (< |i#0@@72| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@204 |s#0@@19| |a#0@@24| |b#0@@20| |pos#0@@14|) |i#0@@72|) (|Seq#Index| |s#0@@19| |i#0@@72|)))) :qid |sequence.202:18| :skolemid |2655| :pattern ( (|Seq#Index| |s#0@@19| |i#0@@72|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@204 |s#0@@19| |a#0@@24| |b#0@@20| |pos#0@@14|) |i#0@@72|)) ))) (forall ((|i#1@@27| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@27|) (< |i#1@@27| (|Seq#Length| |s#0@@19|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@204 |s#0@@19| |a#0@@24| |b#0@@20| |pos#0@@14|) (+ |i#1@@27| 1)) (|Seq#Index| |s#0@@19| |i#1@@27|)))) :qid |sequence.203:18| :skolemid |2656| :pattern ( (|Seq#Index| |s#0@@19| |i#1@@27|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@204 |s#0@@19| |a#0@@24| |b#0@@20| |pos#0@@14|) |pos#0@@14|) |a#0@@24|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@204 |s#0@@19| |a#0@@24| |b#0@@20| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@20|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@204 |s#0@@19| |a#0@@24| |b#0@@20| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |2657| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@204 |s#0@@19| |a#0@@24| |b#0@@20| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@205 T@U) (|s#0@@20| T@U) (|a#0@@25| T@U) (|b#0@@21| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@205) LayerTypeType)) (= (type |s#0@@20|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (= (type |b#0@@21|) BoxType)) (and (and ($Is |s#0@@20| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@25| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@21| Sequences._default.replace1with2$A@@2))) (and (=> (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@205 |s#0@@20| |a#0@@25| |b#0@@21| |pos#0@@15|) (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@20|)))) (=> (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@20|))) (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@205 |s#0@@20| |a#0@@25| |b#0@@21| |pos#0@@15|)))) :qid |unknown.0:0| :skolemid |2658| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@205 |s#0@@20| |a#0@@25| |b#0@@21| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@206 T@U) (|s#0@@21| T@U) (|a#0@@26| T@U) (|b#0@@22| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@206) LayerTypeType)) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (= (type |b#0@@22|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@21| |a#0@@26| |b#0@@22| |pos#0@@16|) (and (and (and ($Is |s#0@@21| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@26| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@22| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@21|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@206) |s#0@@21| |a#0@@26| |b#0@@22| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@21| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@26|) |b#0@@22|)) (|Seq#Drop| |s#0@@21| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |2659| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@206) |s#0@@21| |a#0@@26| |b#0@@22| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@207 T@U) (|s#0@@22| T@U) (|a#0@@27| T@U) (|b#0@@23| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@207) LayerTypeType)) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (= (type |b#0@@23|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@22|) |a#0@@27| |b#0@@23| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@22| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@27| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@23| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@22|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@207) (Lit |s#0@@22|) |a#0@@27| |b#0@@23| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@22|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@27|) |b#0@@23|)) (|Seq#Drop| (Lit |s#0@@22|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2660| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@207) (Lit |s#0@@22|) |a#0@@27| |b#0@@23| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@208 T@U) (|s#0@@23| T@U) (|a#0@@28| T@U) (|b#0@@24| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@208) LayerTypeType)) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (= (type |b#0@@24|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@23|) (Lit |a#0@@28|) (Lit |b#0@@24|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@23| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@28| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@24| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@23|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@208) (Lit |s#0@@23|) (Lit |a#0@@28|) (Lit |b#0@@24|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@23|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@28|)) (Lit |b#0@@24|))) (|Seq#Drop| (Lit |s#0@@23|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2661| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@208) (Lit |s#0@@23|) (Lit |a#0@@28|) (Lit |b#0@@24|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@209 T@U) (|s#0@@24| T@U) (|a#0@@29| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@209) LayerTypeType)) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@209) |s#0@@24| |a#0@@29| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@209 |s#0@@24| |a#0@@29| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |2662| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@209) |s#0@@24| |a#0@@29| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@210 T@U) (|s#0@@25| T@U) (|a#0@@30| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@210) LayerTypeType)) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@210 |s#0@@25| |a#0@@30| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@25| |a#0@@30| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |2663| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@210) |s#0@@25| |a#0@@30| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@211 T@U) (|s#0@@26| T@U) (|a#0@@31| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@211) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@26| |a#0@@31| |pos#0@@21|) (and (and ($Is |s#0@@26| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@31| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@26|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@211 |s#0@@26| |a#0@@31| |pos#0@@21|)) (- (|Seq#Length| |s#0@@26|) 1)) (forall ((|i#0@@73| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@73|) (< |i#0@@73| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@211 |s#0@@26| |a#0@@31| |pos#0@@21|) |i#0@@73|) (|Seq#Index| |s#0@@26| |i#0@@73|)))) :qid |sequence.221:18| :skolemid |2664| :pattern ( (|Seq#Index| |s#0@@26| |i#0@@73|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@211 |s#0@@26| |a#0@@31| |pos#0@@21|) |i#0@@73|)) ))) (forall ((|i#1@@28| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@28|) (< |i#1@@28| (- (|Seq#Length| |s#0@@26|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@211 |s#0@@26| |a#0@@31| |pos#0@@21|) |i#1@@28|) (|Seq#Index| |s#0@@26| (+ |i#1@@28| 1))))) :qid |sequence.222:18| :skolemid |2665| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@211 |s#0@@26| |a#0@@31| |pos#0@@21|) |i#1@@28|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@211 |s#0@@26| |a#0@@31| |pos#0@@21|) |pos#0@@21|) |a#0@@31|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@211 |s#0@@26| |a#0@@31| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |2666| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@211 |s#0@@26| |a#0@@31| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@212 T@U) (|s#0@@27| T@U) (|a#0@@32| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@212) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (and ($Is |s#0@@27| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@32| Sequences._default.replace2with1$A@@2))) (and (=> (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@212 |s#0@@27| |a#0@@32| |pos#0@@22|) (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@27|) 1)))) (=> (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@27|) 1))) (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@212 |s#0@@27| |a#0@@32| |pos#0@@22|)))) :qid |unknown.0:0| :skolemid |2667| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@212 |s#0@@27| |a#0@@32| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@213 T@U) (|s#0@@28| T@U) (|a#0@@33| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@213) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@28| |a#0@@33| |pos#0@@23|) (and (and ($Is |s#0@@28| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@33| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@28|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@213) |s#0@@28| |a#0@@33| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@28| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@33|)) (|Seq#Drop| |s#0@@28| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |2668| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@213) |s#0@@28| |a#0@@33| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@214 T@U) (|s#0@@29| T@U) (|a#0@@34| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@214) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@29|) |a#0@@34| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@29| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@34| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@29|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@214) (Lit |s#0@@29|) |a#0@@34| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@29|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@34|)) (|Seq#Drop| (Lit |s#0@@29|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2669| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@214) (Lit |s#0@@29|) |a#0@@34| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@215 T@U) (|s#0@@30| T@U) (|a#0@@35| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@215) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@30|) (Lit |a#0@@35|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@30| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@35| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@30|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@215) (Lit |s#0@@30|) (Lit |a#0@@35|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@30|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@35|))) (|Seq#Drop| (Lit |s#0@@30|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2670| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@215) (Lit |s#0@@30|) (Lit |a#0@@35|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@421 T@U) (arg1@@231 T@U) (arg2@@164 T@U) (arg3@@113 T@U) ) (! (= (type (Sequences.__default.concat arg0@@421 arg1@@231 arg2@@164 arg3@@113)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@421 arg1@@231 arg2@@164 arg3@@113)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@216 T@U) (|a#0@@36| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@216) LayerTypeType)) (= (type |a#0@@36|) (SeqType BoxType))) (= (type |b#0@@25|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@216) |a#0@@36| |b#0@@25|) (Sequences.__default.concat Sequences._default.concat$A $ly@@216 |a#0@@36| |b#0@@25|))) :qid |unknown.0:0| :skolemid |2671| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@216) |a#0@@36| |b#0@@25|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@217 T@U) (|a#0@@37| T@U) (|b#0@@26| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@217) LayerTypeType)) (= (type |a#0@@37|) (SeqType BoxType))) (= (type |b#0@@26|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@217 |a#0@@37| |b#0@@26|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@37| |b#0@@26|))) :qid |unknown.0:0| :skolemid |2672| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@217) |a#0@@37| |b#0@@26|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@218 T@U) (|a#0@@38| T@U) (|b#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@218) LayerTypeType)) (= (type |a#0@@38|) (SeqType BoxType))) (= (type |b#0@@27|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@38| |b#0@@27|) (and ($Is |a#0@@38| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@27| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@218 |a#0@@38| |b#0@@27|)) (+ (|Seq#Length| |a#0@@38|) (|Seq#Length| |b#0@@27|))) (forall ((|i#0@@74| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@74|) (< |i#0@@74| (|Seq#Length| |a#0@@38|))) (= (|Seq#Index| |a#0@@38| |i#0@@74|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@218 |a#0@@38| |b#0@@27|) |i#0@@74|)))) :qid |sequence.230:18| :skolemid |2673| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@218 |a#0@@38| |b#0@@27|) |i#0@@74|)) :pattern ( (|Seq#Index| |a#0@@38| |i#0@@74|)) ))) (forall ((|i#1@@29| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@29|) (< |i#1@@29| (|Seq#Length| |b#0@@27|))) (= (|Seq#Index| |b#0@@27| |i#1@@29|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@218 |a#0@@38| |b#0@@27|) (+ (|Seq#Length| |a#0@@38|) |i#1@@29|))))) :qid |sequence.231:18| :skolemid |2674| :pattern ( (|Seq#Index| |b#0@@27| |i#1@@29|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@218 |a#0@@38| |b#0@@27|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |2675| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@218 |a#0@@38| |b#0@@27|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@219 T@U) (|a#0@@39| T@U) (|b#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@219) LayerTypeType)) (= (type |a#0@@39|) (SeqType BoxType))) (= (type |b#0@@28|) (SeqType BoxType))) (and ($Is |a#0@@39| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@28| (TSeq Sequences._default.concat$A@@2)))) (and (=> (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@219 |a#0@@39| |b#0@@28|) true) (=> true (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@219 |a#0@@39| |b#0@@28|)))) :qid |unknown.0:0| :skolemid |2676| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@219 |a#0@@39| |b#0@@28|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@220 T@U) (|a#0@@40| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@220) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@40| |b#0@@29|) (and ($Is |a#0@@40| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@29| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@220) |a#0@@40| |b#0@@29|) (|Seq#Append| |a#0@@40| |b#0@@29|))) :qid |unknown.0:0| :skolemid |2677| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@220) |a#0@@40| |b#0@@29|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@221 T@U) (|a#0@@41| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@221) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (= (type |b#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@41|) (Lit |b#0@@30|)) (and ($Is |a#0@@41| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@30| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@221) (Lit |a#0@@41|) (Lit |b#0@@30|)) (|Seq#Append| |a#0@@41| |b#0@@30|))) :qid |unknown.0:0| :weight 3 :skolemid |2678| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@221) (Lit |a#0@@41|) (Lit |b#0@@30|))) ))))
(assert (forall ((arg0@@422 T@U) (arg1@@232 T@U) (arg2@@165 T@U) (arg3@@114 T@U) (arg4@@93 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@422 arg1@@232 arg2@@165 arg3@@114 arg4@@93)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@422 arg1@@232 arg2@@165 arg3@@114 arg4@@93)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@222 T@U) (|a#0@@42| T@U) (|b#0@@31| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@222) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (= (type |b#0@@31|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@222) |a#0@@42| |b#0@@31| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@222 |a#0@@42| |b#0@@31| |c#0@@3|))) :qid |unknown.0:0| :skolemid |2679| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@222) |a#0@@42| |b#0@@31| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@223 T@U) (|a#0@@43| T@U) (|b#0@@32| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@223) LayerTypeType)) (= (type |a#0@@43|) (SeqType BoxType))) (= (type |b#0@@32|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@223 |a#0@@43| |b#0@@32| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@43| |b#0@@32| |c#0@@4|))) :qid |unknown.0:0| :skolemid |2680| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@223) |a#0@@43| |b#0@@32| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@224 T@U) (|a#0@@44| T@U) (|b#0@@33| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@224) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) (= (type |b#0@@33|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@44| |b#0@@33| |c#0@@5|) (and (and ($Is |a#0@@44| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@33| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@224 |a#0@@44| |b#0@@33| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@44|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@75| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@75|) (< |i#0@@75| (|Seq#Length| |a#0@@44|))) (= (|Seq#Index| |a#0@@44| |i#0@@75|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@224 |a#0@@44| |b#0@@33| |c#0@@5|) |i#0@@75|)))) :qid |sequence.238:18| :skolemid |2681| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@224 |a#0@@44| |b#0@@33| |c#0@@5|) |i#0@@75|)) :pattern ( (|Seq#Index| |a#0@@44| |i#0@@75|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@224 |a#0@@44| |b#0@@33| |c#0@@5|) (|Seq#Length| |a#0@@44|)) |b#0@@33|)) (forall ((|i#1@@30| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@30|) (< |i#1@@30| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@30|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@224 |a#0@@44| |b#0@@33| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@44|) 1) |i#1@@30|))))) :qid |sequence.240:18| :skolemid |2682| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@30|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@224 |a#0@@44| |b#0@@33| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |2683| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@224 |a#0@@44| |b#0@@33| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@225 T@U) (|a#0@@45| T@U) (|b#0@@34| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@225) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (= (type |b#0@@34|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@45| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@34| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (and (=> (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@225 |a#0@@45| |b#0@@34| |c#0@@6|) true) (=> true (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@225 |a#0@@45| |b#0@@34| |c#0@@6|)))) :qid |unknown.0:0| :skolemid |2684| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@225 |a#0@@45| |b#0@@34| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@226 T@U) (|a#0@@46| T@U) (|b#0@@35| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@226) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (= (type |b#0@@35|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@46| |b#0@@35| |c#0@@7|) (and (and ($Is |a#0@@46| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@35| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@226) |a#0@@46| |b#0@@35| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@46| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@35|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |2685| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@226) |a#0@@46| |b#0@@35| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@227 T@U) (|a#0@@47| T@U) (|b#0@@36| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@227) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@36|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@47|) |b#0@@36| (Lit |c#0@@8|)) (and (and ($Is |a#0@@47| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@36| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@227) (Lit |a#0@@47|) |b#0@@36| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@47| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@36|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |2686| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@227) (Lit |a#0@@47|) |b#0@@36| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@228 T@U) (|a#0@@48| T@U) (|b#0@@37| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@228) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@37|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@48|) (Lit |b#0@@37|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@48| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@37| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@228) (Lit |a#0@@48|) (Lit |b#0@@37|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@48| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@37|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |2687| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@228) (Lit |a#0@@48|) (Lit |b#0@@37|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@423 T@U) (arg1@@233 T@U) (arg2@@166 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@423 arg1@@233 arg2@@166)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@423 arg1@@233 arg2@@166)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@229 T@U) (|a#0@@49| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@229) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@229) |a#0@@49|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@229 |a#0@@49|))) :qid |unknown.0:0| :skolemid |2688| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@229) |a#0@@49|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@230 T@U) (|a#0@@50| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@230) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@230 |a#0@@50|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@50|))) :qid |unknown.0:0| :skolemid |2689| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@230) |a#0@@50|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@231 T@U) (|a#0@@51| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@231) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@51|) ($Is |a#0@@51| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@231 |a#0@@51|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |2690| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@231 |a#0@@51|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@232 T@U) (|a#0@@52| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@232) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) ($Is |a#0@@52| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (and (=> (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@232 |a#0@@52|) true) (=> true (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@232 |a#0@@52|)))) :qid |unknown.0:0| :skolemid |2691| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@232 |a#0@@52|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@233 T@U) (|a#0@@53| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@233) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@53|) ($Is |a#0@@53| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@53|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@233) |a#0@@53|) (ite (= (|Seq#Length| |a#0@@53|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@233 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@53|))))))) :qid |unknown.0:0| :skolemid |2692| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@233) |a#0@@53|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@234 T@U) (|a#0@@54| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@234) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@54|)) ($Is |a#0@@54| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@54|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@234) (Lit |a#0@@54|)) (ite (= (|Seq#Length| (Lit |a#0@@54|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@234) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@54|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2693| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@234) (Lit |a#0@@54|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@235 T@U) (|a#0@@55| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@235) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@235) |a#0@@55| |b#0@@38|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@235 |a#0@@55| |b#0@@38|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@235 |a#0@@55| |b#0@@38|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@235) |a#0@@55| |b#0@@38|)))) :qid |unknown.0:0| :skolemid |2694| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@235) |a#0@@55| |b#0@@38|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@236 T@U) (|a#0@@56| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@236) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@236 |a#0@@56| |b#0@@39|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@56| |b#0@@39|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@56| |b#0@@39|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@236 |a#0@@56| |b#0@@39|)))) :qid |unknown.0:0| :skolemid |2695| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@236) |a#0@@56| |b#0@@39|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@237 T@U) (|a#0@@57| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@237) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@57| |b#0@@40|) (and ($Is |a#0@@57| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@40| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@237 |a#0@@57| |b#0@@40|)) (<= (|Seq#Length| |a#0@@57|) (|Seq#Length| |b#0@@40|))) :qid |unknown.0:0| :skolemid |2696| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@237 |a#0@@57| |b#0@@40|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@238 T@U) (|a#0@@58| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@238) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (and ($Is |a#0@@58| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@41| (TSeq Sequences._default.IsPrefix$A@@2)))) (and (=> (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@238 |a#0@@58| |b#0@@41|) true) (=> true (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@238 |a#0@@58| |b#0@@41|)))) :qid |unknown.0:0| :skolemid |2697| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@238 |a#0@@58| |b#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@239 T@U) (|a#0@@59| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@239) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@59| |b#0@@42|) (and ($Is |a#0@@59| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@42| (TSeq Sequences._default.IsPrefix$A@@3))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@239) |a#0@@59| |b#0@@42|) (and (<= (|Seq#Length| |a#0@@59|) (|Seq#Length| |b#0@@42|)) (|Seq#Equal| |a#0@@59| (|Seq#Take| |b#0@@42| (|Seq#Length| |a#0@@59|))))) (=> (and (<= (|Seq#Length| |a#0@@59|) (|Seq#Length| |b#0@@42|)) (|Seq#Equal| |a#0@@59| (|Seq#Take| |b#0@@42| (|Seq#Length| |a#0@@59|)))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@239) |a#0@@59| |b#0@@42|)))) :qid |unknown.0:0| :skolemid |2698| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@239) |a#0@@59| |b#0@@42|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@240 T@U) (|a#0@@60| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@240) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@60|) (Lit |b#0@@43|)) (and ($Is |a#0@@60| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@43| (TSeq Sequences._default.IsPrefix$A@@4))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@240) (Lit |a#0@@60|) (Lit |b#0@@43|)) (and (<= (|Seq#Length| (Lit |a#0@@60|)) (|Seq#Length| (Lit |b#0@@43|))) (|Seq#Equal| |a#0@@60| (|Seq#Take| (Lit |b#0@@43|) (|Seq#Length| (Lit |a#0@@60|)))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@60|)) (|Seq#Length| (Lit |b#0@@43|))) (|Seq#Equal| |a#0@@60| (|Seq#Take| (Lit |b#0@@43|) (|Seq#Length| (Lit |a#0@@60|))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@240) (Lit |a#0@@60|) (Lit |b#0@@43|))))) :qid |unknown.0:0| :weight 3 :skolemid |2699| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@240) (Lit |a#0@@60|) (Lit |b#0@@43|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@241 T@U) (|a#0@@61| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@241) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@241) |a#0@@61| |b#0@@44|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@241 |a#0@@61| |b#0@@44|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@241 |a#0@@61| |b#0@@44|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@241) |a#0@@61| |b#0@@44|)))) :qid |unknown.0:0| :skolemid |2700| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@241) |a#0@@61| |b#0@@44|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@242 T@U) (|a#0@@62| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@242) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@242 |a#0@@62| |b#0@@45|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@62| |b#0@@45|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@62| |b#0@@45|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@242 |a#0@@62| |b#0@@45|)))) :qid |unknown.0:0| :skolemid |2701| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@242) |a#0@@62| |b#0@@45|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@243 T@U) (|a#0@@63| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@243) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@63| |b#0@@46|) (and ($Is |a#0@@63| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@46| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |2702| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@243 |a#0@@63| |b#0@@46|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@244 T@U) (|a#0@@64| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@244) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (and ($Is |a#0@@64| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@47| (TSeq Sequences._default.IsSuffix$A@@2)))) (and (=> (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@244 |a#0@@64| |b#0@@47|) true) (=> true (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@244 |a#0@@64| |b#0@@47|)))) :qid |unknown.0:0| :skolemid |2703| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@244 |a#0@@64| |b#0@@47|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@245 T@U) (|a#0@@65| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@245) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@65| |b#0@@48|) (and ($Is |a#0@@65| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@48| (TSeq Sequences._default.IsSuffix$A@@3))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@245) |a#0@@65| |b#0@@48|) (and (<= (|Seq#Length| |a#0@@65|) (|Seq#Length| |b#0@@48|)) (|Seq#Equal| |a#0@@65| (|Seq#Drop| |b#0@@48| (- (|Seq#Length| |b#0@@48|) (|Seq#Length| |a#0@@65|)))))) (=> (and (<= (|Seq#Length| |a#0@@65|) (|Seq#Length| |b#0@@48|)) (|Seq#Equal| |a#0@@65| (|Seq#Drop| |b#0@@48| (- (|Seq#Length| |b#0@@48|) (|Seq#Length| |a#0@@65|))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@245) |a#0@@65| |b#0@@48|)))) :qid |unknown.0:0| :skolemid |2704| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@245) |a#0@@65| |b#0@@48|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@246 T@U) (|a#0@@66| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@246) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@66|) (Lit |b#0@@49|)) (and ($Is |a#0@@66| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@49| (TSeq Sequences._default.IsSuffix$A@@4))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@246) (Lit |a#0@@66|) (Lit |b#0@@49|)) (and (<= (|Seq#Length| (Lit |a#0@@66|)) (|Seq#Length| (Lit |b#0@@49|))) (|Seq#Equal| |a#0@@66| (|Seq#Drop| (Lit |b#0@@49|) (- (|Seq#Length| (Lit |b#0@@49|)) (|Seq#Length| (Lit |a#0@@66|))))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@66|)) (|Seq#Length| (Lit |b#0@@49|))) (|Seq#Equal| |a#0@@66| (|Seq#Drop| (Lit |b#0@@49|) (- (|Seq#Length| (Lit |b#0@@49|)) (|Seq#Length| (Lit |a#0@@66|)))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@246) (Lit |a#0@@66|) (Lit |b#0@@49|))))) :qid |unknown.0:0| :weight 3 :skolemid |2705| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@246) (Lit |a#0@@66|) (Lit |b#0@@49|))) ))))
(assert (forall ((arg0@@424 T@U) (arg1@@234 T@U) (arg2@@167 T@U) (arg3@@115 T@U) (arg4@@94 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@424 arg1@@234 arg2@@167 arg3@@115 arg4@@94)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@424 arg1@@234 arg2@@167 arg3@@115 arg4@@94)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@247 T@U) (|run#0@@54| T@U) (|needle#0| T@U) (|i#0@@76| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@247) LayerTypeType)) (= (type |run#0@@54|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@247) |run#0@@54| |needle#0| |i#0@@76|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@247 |run#0@@54| |needle#0| |i#0@@76|))) :qid |unknown.0:0| :skolemid |2706| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@247) |run#0@@54| |needle#0| |i#0@@76|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@248 T@U) (|run#0@@55| T@U) (|needle#0@@0| T@U) (|i#0@@77| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@248) LayerTypeType)) (= (type |run#0@@55|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@248 |run#0@@55| |needle#0@@0| |i#0@@77|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@55| |needle#0@@0| |i#0@@77|))) :qid |unknown.0:0| :skolemid |2707| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@248) |run#0@@55| |needle#0@@0| |i#0@@77|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@249 T@U) (|run#0@@56| T@U) (|needle#0@@1| T@U) (|i#0@@78| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@249) LayerTypeType)) (= (type |run#0@@56|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@56| |needle#0@@1| |i#0@@78|) (and (and ($Is |run#0@@56| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@78|) (<= |i#0@@78| (|Seq#Length| |run#0@@56|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@249 |run#0@@56| |needle#0@@1| |i#0@@78|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@249 |run#0@@56| |needle#0@@1| |i#0@@78|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@249 |run#0@@56| |needle#0@@1| |i#0@@78|)))) (|Seq#Length| |run#0@@56|))) (= (|Seq#Index| |run#0@@56| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@249 |run#0@@56| |needle#0@@1| |i#0@@78|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@249 |run#0@@56| |needle#0@@1| |i#0@@78|)) (forall ((|j#0@@1| Int) ) (!  (=> (and (<= |i#0@@78| |j#0@@1|) (< |j#0@@1| (|Seq#Length| |run#0@@56|))) (not (= (|Seq#Index| |run#0@@56| |j#0@@1|) |needle#0@@1|))) :qid |sequence.340:32| :skolemid |2708| :pattern ( (|Seq#Index| |run#0@@56| |j#0@@1|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@249 |run#0@@56| |needle#0@@1| |i#0@@78|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2709| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@249 |run#0@@56| |needle#0@@1| |i#0@@78|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@250 T@U) (|run#0@@57| T@U) (|needle#0@@2| T@U) (|i#0@@79| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@250) LayerTypeType)) (= (type |run#0@@57|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@57| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (and (=> (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@250 |run#0@@57| |needle#0@@2| |i#0@@79|) (and (<= (LitInt 0) |i#0@@79|) (<= |i#0@@79| (|Seq#Length| |run#0@@57|)))) (=> (and (<= (LitInt 0) |i#0@@79|) (<= |i#0@@79| (|Seq#Length| |run#0@@57|))) (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@250 |run#0@@57| |needle#0@@2| |i#0@@79|)))) :qid |unknown.0:0| :skolemid |2710| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@250 |run#0@@57| |needle#0@@2| |i#0@@79|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@251 T@U) (|run#0@@58| T@U) (|needle#0@@3| T@U) (|i#0@@80| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@251) LayerTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| |i#0@@80|) (and (and ($Is |run#0@@58| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@80|) (<= |i#0@@80| (|Seq#Length| |run#0@@58|)))))) (and (=> (not (= |i#0@@80| (|Seq#Length| |run#0@@58|))) (=> (not (= (|Seq#Index| |run#0@@58| |i#0@@80|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| (+ |i#0@@80| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@251) |run#0@@58| |needle#0@@3| |i#0@@80|) (ite (= |i#0@@80| (|Seq#Length| |run#0@@58|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@58| |i#0@@80|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@80|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@251 |run#0@@58| |needle#0@@3| (+ |i#0@@80| 1))))))) :qid |unknown.0:0| :skolemid |2711| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@251) |run#0@@58| |needle#0@@3| |i#0@@80|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@252 T@U) (|run#0@@59| T@U) (|needle#0@@4| T@U) (|i#0@@81| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@252) LayerTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@81|)) (and (and ($Is |run#0@@59| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@81|)) (<= (LitInt |i#0@@81|) (|Seq#Length| (Lit |run#0@@59|))))))) (and (=> (not (= (LitInt |i#0@@81|) (|Seq#Length| (Lit |run#0@@59|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@81|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@81| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@252) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@81|)) (ite (= (LitInt |i#0@@81|) (|Seq#Length| (Lit |run#0@@59|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@81|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@81|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@252) (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@81| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2712| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@252) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@81|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@253 T@U) (|run#0@@60| T@U) (|needle#0@@5| T@U) (|i#0@@82| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@253) LayerTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@82|)) (and (and ($Is |run#0@@60| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@82|)) (<= (LitInt |i#0@@82|) (|Seq#Length| (Lit |run#0@@60|))))))) (and (=> (not (= (LitInt |i#0@@82|) (|Seq#Length| (Lit |run#0@@60|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@82|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@82| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@253) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@82|)) (ite (= (LitInt |i#0@@82|) (|Seq#Length| (Lit |run#0@@60|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@82|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@82|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@253) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@82| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2713| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@253) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@82|))) ))))
(assert (forall ((arg0@@425 T@U) (arg1@@235 T@U) (arg2@@168 T@U) (arg3@@116 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@425 arg1@@235 arg2@@168 arg3@@116)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@425 arg1@@235 arg2@@168 arg3@@116)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@254 T@U) (|run#0@@61| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@254) LayerTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@254) |run#0@@61| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@254 |run#0@@61| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |2714| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@254) |run#0@@61| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@255 T@U) (|run#0@@62| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@255) LayerTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@255 |run#0@@62| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@62| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |2715| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@255) |run#0@@62| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@256 T@U) (|run#0@@63| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@256) LayerTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@63| |needle#0@@8|) (and ($Is |run#0@@63| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@256 |run#0@@63| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@256 |run#0@@63| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@256 |run#0@@63| |needle#0@@8|)))) (|Seq#Length| |run#0@@63|))) (= (|Seq#Index| |run#0@@63| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@256 |run#0@@63| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@256 |run#0@@63| |needle#0@@8|)) (forall ((|i#0@@83| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| (|Seq#Length| |run#0@@63|))) (not (= (|Seq#Index| |run#0@@63| |i#0@@83|) |needle#0@@8|))) :qid |sequence.350:32| :skolemid |2716| :pattern ( (|Seq#Index| |run#0@@63| |i#0@@83|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@256 |run#0@@63| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2717| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@256 |run#0@@63| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@257 T@U) (|run#0@@64| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@257) LayerTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@64| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (and (=> (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@257 |run#0@@64| |needle#0@@9|) true) (=> true (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@257 |run#0@@64| |needle#0@@9|)))) :qid |unknown.0:0| :skolemid |2718| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@257 |run#0@@64| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@258 T@U) (|run#0@@65| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@258) LayerTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10|) (and ($Is |run#0@@65| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@258) |run#0@@65| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@65| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |2719| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@258) |run#0@@65| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@259 T@U) (|run#0@@66| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@259) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11|) (and ($Is |run#0@@66| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@259) (Lit |run#0@@66|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@66|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2720| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@259) (Lit |run#0@@66|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@260 T@U) (|run#0@@67| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@260) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|)) (and ($Is |run#0@@67| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@260) (Lit |run#0@@67|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2721| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@260) (Lit |run#0@@67|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@426 T@U) (arg1@@236 T@U) (arg2@@169 Int) (arg3@@117 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@426 arg1@@236 arg2@@169 arg3@@117)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@426 arg1@@236 arg2@@169 arg3@@117)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@261 T@U) (|length#0| Int) (|v#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@261) LayerTypeType)) (= (type |v#0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@261) |length#0| |v#0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@261 |length#0| |v#0|))) :qid |unknown.0:0| :skolemid |2722| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@261) |length#0| |v#0|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@262 T@U) (|length#0@@0| Int) (|v#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@262) LayerTypeType)) (= (type |v#0@@0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@262 |length#0@@0| |v#0@@0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@0|))) :qid |unknown.0:0| :skolemid |2723| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@262) |length#0@@0| |v#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@263 T@U) (|length#0@@1| Int) (|v#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@263) LayerTypeType)) (= (type |v#0@@1|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@1|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@1| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@263 |length#0@@1| |v#0@@1|)) |length#0@@1|) (forall ((|i#0@@84| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@263 |length#0@@1| |v#0@@1|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@263 |length#0@@1| |v#0@@1|) |i#0@@84|) |v#0@@1|)) :qid |sequence.357:18| :skolemid |2724| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@263 |length#0@@1| |v#0@@1|) |i#0@@84|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@263 |length#0@@1| |v#0@@1|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |2725| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@263 |length#0@@1| |v#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@264 T@U) (|length#0@@2| Int) (|v#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@264) LayerTypeType)) (= (type |v#0@@2|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@2| Sequences._default.SeqOfLength$V@@2))) (and (=> (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@264 |length#0@@2| |v#0@@2|) true) (=> true (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@264 |length#0@@2| |v#0@@2|)))) :qid |unknown.0:0| :skolemid |2726| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@264 |length#0@@2| |v#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@265 T@U) (|length#0@@3| Int) (|v#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@265) LayerTypeType)) (= (type |v#0@@3|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@3|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@3| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@3|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@265) |length#0@@3| |v#0@@3|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@3|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@265 (- |length#0@@3| 1) |v#0@@3|)))))) :qid |unknown.0:0| :skolemid |2727| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@265) |length#0@@3| |v#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@266 T@U) (|length#0@@4| Int) (|v#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@266) LayerTypeType)) (= (type |v#0@@4|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@4|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@4| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@4|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@266) (LitInt |length#0@@4|) |v#0@@4|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@4|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@266) (LitInt (- |length#0@@4| 1)) |v#0@@4|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2728| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@266) (LitInt |length#0@@4|) |v#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@267 T@U) (|length#0@@5| Int) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@267) LayerTypeType)) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@5|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@5| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@267) (LitInt |length#0@@5|) (Lit |v#0@@5|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@5|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@267) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2729| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@267) (LitInt |length#0@@5|) (Lit |v#0@@5|))) ))))
(assert (forall ((arg0@@427 T@U) (arg1@@237 T@U) (arg2@@170 T@U) (arg3@@118 Int) (arg4@@95 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@427 arg1@@237 arg2@@170 arg3@@118 arg4@@95)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@427 arg1@@237 arg2@@170 arg3@@118 arg4@@95)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@268 T@U) (|s#0@@31| T@U) (|i#0@@85| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@268) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@268) |s#0@@31| |i#0@@85| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@268 |s#0@@31| |i#0@@85| |t#0|))) :qid |unknown.0:0| :skolemid |2730| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@268) |s#0@@31| |i#0@@85| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@269 T@U) (|s#0@@32| T@U) (|i#0@@86| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@269) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@269 |s#0@@32| |i#0@@86| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@32| |i#0@@86| |t#0@@0|))) :qid |unknown.0:0| :skolemid |2731| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@269) |s#0@@32| |i#0@@86| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@270 T@U) (|s#0@@33| T@U) (|i#0@@87| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@270) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@33| |i#0@@87| |t#0@@1|) (and (and (and ($Is |s#0@@33| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@87| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| (|Seq#Length| |s#0@@33|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@270 |s#0@@33| |i#0@@87| |t#0@@1|) (|Seq#Update| |s#0@@33| |i#0@@87| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@270 |s#0@@33| |i#0@@87| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |2732| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@270 |s#0@@33| |i#0@@87| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@271 T@U) (|s#0@@34| T@U) (|i#0@@88| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@271) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@34| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (and (=> (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@271 |s#0@@34| |i#0@@88| |t#0@@2|) (and (< (+ |i#0@@88| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| (|Seq#Length| |s#0@@34|))))) (=> (and (< (+ |i#0@@88| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| (|Seq#Length| |s#0@@34|)))) (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@271 |s#0@@34| |i#0@@88| |t#0@@2|)))) :qid |unknown.0:0| :skolemid |2733| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@271 |s#0@@34| |i#0@@88| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@272 T@U) (|s#0@@35| T@U) (|i#0@@89| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@272) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@35| |i#0@@89| |t#0@@3|) (and (and (and ($Is |s#0@@35| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@89| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| (|Seq#Length| |s#0@@35|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@272) |s#0@@35| |i#0@@89| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@35| |i#0@@89|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@35| (+ |i#0@@89| 1))))) :qid |unknown.0:0| :skolemid |2734| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@272) |s#0@@35| |i#0@@89| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@273 T@U) (|s#0@@36| T@U) (|i#0@@90| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@273) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@36|) (LitInt |i#0@@90|) |t#0@@4|) (and (and (and ($Is |s#0@@36| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@90|) (< |i#0@@90| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@90| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@90|)) (< |i#0@@90| (|Seq#Length| (Lit |s#0@@36|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@273) (Lit |s#0@@36|) (LitInt |i#0@@90|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@36|) (LitInt |i#0@@90|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@36|) (LitInt (+ |i#0@@90| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2735| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@273) (Lit |s#0@@36|) (LitInt |i#0@@90|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@274 T@U) (|s#0@@37| T@U) (|i#0@@91| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@274) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@37|) (LitInt |i#0@@91|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@37| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@91|) (< |i#0@@91| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@91| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@91|)) (< |i#0@@91| (|Seq#Length| (Lit |s#0@@37|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@274) (Lit |s#0@@37|) (LitInt |i#0@@91|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@37|) (LitInt |i#0@@91|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@37|) (LitInt (+ |i#0@@91| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2736| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@274) (Lit |s#0@@37|) (LitInt |i#0@@91|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@428 T@U) (arg1@@238 T@U) (arg2@@171 T@U) (arg3@@119 T@U) (arg4@@96 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@428 arg1@@238 arg2@@171 arg3@@119 arg4@@96)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@428 arg1@@238 arg2@@171 arg3@@119 arg4@@96)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@275 T@U) (|a#0@@67| T@U) (|b#0@@50| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@275) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@50|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@275) |a#0@@67| |b#0@@50|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@275 |a#0@@67| |b#0@@50|))) :qid |unknown.0:0| :skolemid |2737| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@275) |a#0@@67| |b#0@@50|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@276 T@U) (|a#0@@68| T@U) (|b#0@@51| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@276) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@51|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@276 |a#0@@68| |b#0@@51|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@68| |b#0@@51|))) :qid |unknown.0:0| :skolemid |2738| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@276) |a#0@@68| |b#0@@51|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@277 T@U) (|a#0@@69| T@U) (|b#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@69| |b#0@@52|) (and (and ($Is |a#0@@69| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@52| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@69|) (|Seq#Length| |b#0@@52|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@277 |a#0@@69| |b#0@@52|)) (|Seq#Length| |a#0@@69|)) (forall ((|i#0@@92| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@92|) (< |i#0@@92| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@277 |a#0@@69| |b#0@@52|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@277 |a#0@@69| |b#0@@52|) |i#0@@92|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@69| |i#0@@92|) (|Seq#Index| |b#0@@52| |i#0@@92|))))) :qid |sequence.378:20| :skolemid |2739| :pattern ( (|Seq#Index| |b#0@@52| |i#0@@92|)) :pattern ( (|Seq#Index| |a#0@@69| |i#0@@92|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@277 |a#0@@69| |b#0@@52|) |i#0@@92|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@277 |a#0@@69| |b#0@@52|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |2740| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@277 |a#0@@69| |b#0@@52|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@278 T@U) (|a#0@@70| T@U) (|b#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@278) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@53|) (SeqType BoxType))) (and ($Is |a#0@@70| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@53| (TSeq Sequences._default.Zip$B@@2)))) (and (=> (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@278 |a#0@@70| |b#0@@53|) (= (|Seq#Length| |a#0@@70|) (|Seq#Length| |b#0@@53|))) (=> (= (|Seq#Length| |a#0@@70|) (|Seq#Length| |b#0@@53|)) (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@278 |a#0@@70| |b#0@@53|)))) :qid |unknown.0:0| :skolemid |2741| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@278 |a#0@@70| |b#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@279 T@U) (|a#0@@71| T@U) (|b#0@@54| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@279) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@71| |b#0@@54|) (and (and ($Is |a#0@@71| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@54| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@71|) (|Seq#Length| |b#0@@54|))))) (and (=> (not (= (|Seq#Length| |a#0@@71|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@71|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@54|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@71|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@54|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@71|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@54|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@279) |a#0@@71| |b#0@@54|) (ite (= (|Seq#Length| |a#0@@71|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@279 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@71|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@54|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@71|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@54|))))))))) :qid |unknown.0:0| :skolemid |2742| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@279) |a#0@@71| |b#0@@54|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@280 T@U) (|a#0@@72| T@U) (|b#0@@55| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@280) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@55|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@72|) (Lit |b#0@@55|)) (and (and ($Is |a#0@@72| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@55| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@72|)) (|Seq#Length| (Lit |b#0@@55|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@72|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@72|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@55|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@72|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@55|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@72|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@55|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@280) (Lit |a#0@@72|) (Lit |b#0@@55|)) (ite (= (|Seq#Length| (Lit |a#0@@72|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@280) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@72|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@55|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@72|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@55|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2743| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@280) (Lit |a#0@@72|) (Lit |b#0@@55|))) ))))
(assert (forall ((arg0@@429 T@U) (arg1@@239 T@U) (arg2@@172 T@U) (arg3@@120 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@429 arg1@@239 arg2@@172 arg3@@120)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@429 arg1@@239 arg2@@172 arg3@@120)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@281 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@281) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@281) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@281 |z#0|))) :qid |unknown.0:0| :skolemid |2744| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@281) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@282 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@282) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@282 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |2745| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@282) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@283 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@283) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@283 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@283 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@283 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@93| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@93|) (< |i#0@@93| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@283 |z#0@@1|))) |i#0@@93|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@283 |z#0@@1|))) |i#0@@93|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@93|))))) :qid |sequence.386:20| :skolemid |2746| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@93|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@283 |z#0@@1|))) |i#0@@93|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@283 |z#0@@1|))) |i#0@@93|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@283 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |2747| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@283 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@284 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@284) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (and (=> (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@284 |z#0@@2|) true) (=> true (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@284 |z#0@@2|)))) :qid |unknown.0:0| :skolemid |2748| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@284 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@285 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@285) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@285) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@56| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@285 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@73| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@285 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@73| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@56| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |2749| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@285) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@286 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@286) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@286) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@286) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@286) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1@@0| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2750| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@286) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@430 T@U) (arg1@@240 T@U) (arg2@@173 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@430 arg1@@240 arg2@@173)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@430 arg1@@240 arg2@@173)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@287 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@287) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@287) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@287 |seqs#0|))) :qid |unknown.0:0| :skolemid |2751| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@287) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@288 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@288) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@288 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |2752| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@288) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@289 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@289) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@289 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@94| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@289 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@289 |seqs#0@@1|) |i#0@@94|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@94|)))))) :qid |sequence.408:20| :skolemid |2753| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@94|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@289 |seqs#0@@1|) |i#0@@94|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@289 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |2754| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@289 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@290 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@290) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (and (=> (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@290 |seqs#0@@2|) true) (=> true (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@290 |seqs#0@@2|)))) :qid |unknown.0:0| :skolemid |2755| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@290 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@291 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@291) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@291) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@291 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |2756| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@291) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@292 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@292) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@292) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@292) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2757| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@292) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@293 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@293) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@293) |shape#0|) (Sequences.__default.FlattenLength $ly@@293 |shape#0|))) :qid |sequence.419:22| :skolemid |2758| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@293) |shape#0|)) )))
(assert (forall (($ly@@294 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@294) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@294 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |sequence.419:22| :skolemid |2759| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@294) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@295 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@295) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@295 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@295 |shape#0@@1|)))) :qid |sequence.419:22| :skolemid |2760| :pattern ( (Sequences.__default.FlattenLength $ly@@295 |shape#0@@1|)) ))))
(assert (forall (($ly@@296 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@296) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (and (=> (|Sequences.__default.FlattenLength#requires| $ly@@296 |shape#0@@2|) true) (=> true (|Sequences.__default.FlattenLength#requires| $ly@@296 |shape#0@@2|)))) :qid |sequence.419:22| :skolemid |2761| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@296 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@297 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@297) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@297) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@297 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |sequence.419:22| :skolemid |2762| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@297) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@298 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@298) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@298) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@298) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |sequence.419:22| :weight 3 :skolemid |2763| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@298) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@431 T@U) (arg1@@241 T@U) (arg2@@174 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@431 arg1@@241 arg2@@174)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@431 arg1@@241 arg2@@174)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@299 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@299) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@299) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@299 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |2764| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@299) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@300 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@300) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@300 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |2765| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@300) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@301 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@301) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@301 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@301 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@301 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |2766| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@301 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@302 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@302) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (and (=> (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@302 |seqs#0@@8|) true) (=> true (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@302 |seqs#0@@8|)))) :qid |unknown.0:0| :skolemid |2767| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@302 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@303 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@303) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@303) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@303 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |2768| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@303) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@304 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@304) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@304) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@304) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2769| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@304) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@95| Int) (|j#0@@2| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@95| |j#0@@2|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@95|)) (<= (LitInt 0) |j#0@@2|)) (and (< |i#0@@95| (|Seq#Length| |shape#0@@5|)) (< |j#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@95|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@95| |j#0@@2|))) :qid |sequence.488:25| :skolemid |2770| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@95| |j#0@@2|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@96| Int) (|j#0@@3| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@96|)) (<= (LitInt 0) |j#0@@3|)) (and (=> (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@96| |j#0@@3|) (and (< |i#0@@96| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@96|)))))) (=> (and (< |i#0@@96| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@96|))))) (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@96| |j#0@@3|))))) :qid |sequence.488:25| :skolemid |2771| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@96| |j#0@@3|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@97| Int) (|j#0@@4| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@97| |j#0@@4|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@97|)) (<= (LitInt 0) |j#0@@4|)) (and (< |i#0@@97| (|Seq#Length| |shape#0@@7|)) (< |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@97|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@97|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@97| |j#0@@4|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@97|)) |j#0@@4|)))) :qid |sequence.488:25| :skolemid |2772| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@97| |j#0@@4|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@98| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@98|) (LitInt |j#0@@5|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@98|)) (<= (LitInt 0) |j#0@@5|)) (and (< |i#0@@98| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@98|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@98|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@98|) (LitInt |j#0@@5|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@98|)))) |j#0@@5|)))) :qid |sequence.488:25| :weight 3 :skolemid |2773| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@98|) (LitInt |j#0@@5|))) ))))
(assert (forall ((arg0@@432 T@U) (arg1@@242 T@U) (arg2@@175 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@432 arg1@@242 arg2@@175)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@432 arg1@@242 arg2@@175)) )))
(assert (forall (($ly@@305 T@U) (|shape#0@@9| T@U) (|i#0@@99| Int) ) (!  (=> (and (= (type $ly@@305) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@305) |shape#0@@9| |i#0@@99|) (Sequences.__default.UnflattenIndex $ly@@305 |shape#0@@9| |i#0@@99|))) :qid |sequence.495:12| :skolemid |2774| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@305) |shape#0@@9| |i#0@@99|)) )))
(assert (forall (($ly@@306 T@U) (|shape#0@@10| T@U) (|i#0@@100| Int) ) (!  (=> (and (= (type $ly@@306) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@306 |shape#0@@10| |i#0@@100|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@100|))) :qid |sequence.495:12| :skolemid |2775| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@306) |shape#0@@10| |i#0@@100|)) )))
(assert  (=> true (forall (($ly@@307 T@U) (|shape#0@@11| T@U) (|i#0@@101| Int) ) (!  (=> (and (and (= (type $ly@@307) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@101|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@101|)) (< |i#0@@101| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@307 |shape#0@@11| |i#0@@101|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |sequence.495:12| :skolemid |2776| :pattern ( (Sequences.__default.UnflattenIndex $ly@@307 |shape#0@@11| |i#0@@101|)) ))))
(assert (forall (($ly@@308 T@U) (|shape#0@@12| T@U) (|i#0@@102| Int) ) (!  (=> (and (and (= (type $ly@@308) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@102|))) (and (=> (|Sequences.__default.UnflattenIndex#requires| $ly@@308 |shape#0@@12| |i#0@@102|) (< |i#0@@102| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))) (=> (< |i#0@@102| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)) (|Sequences.__default.UnflattenIndex#requires| $ly@@308 |shape#0@@12| |i#0@@102|)))) :qid |sequence.495:12| :skolemid |2777| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@308 |shape#0@@12| |i#0@@102|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@309 T@U) (|shape#0@@13| T@U) (|i#0@@103| Int) ) (!  (=> (and (and (= (type $ly@@309) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@103|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@103|)) (< |i#0@@103| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@103| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@103|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@103|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@309) |shape#0@@13| |i#0@@103|) (ite (< |i#0@@103| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@309 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@103|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@103| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |sequence.495:12| :skolemid |2778| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@309) |shape#0@@13| |i#0@@103|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@310 T@U) (|shape#0@@14| T@U) (|i#0@@104| Int) ) (!  (=> (and (and (= (type $ly@@310) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@104|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@104|)) (< |i#0@@104| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@104| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@104|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@104|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@310) (Lit |shape#0@@14|) (LitInt |i#0@@104|)) (ite (< |i#0@@104| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@310) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@104|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@104| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |sequence.495:12| :weight 3 :skolemid |2779| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@310) (Lit |shape#0@@14|) (LitInt |i#0@@104|))) ))))
(assert (forall ((arg0@@433 T@U) (arg1@@243 T@U) (arg2@@176 Int) (arg3@@121 T@U) ) (! (= (type (Sequences.__default.fill arg0@@433 arg1@@243 arg2@@176 arg3@@121)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@433 arg1@@243 arg2@@176 arg3@@121)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@311 T@U) (|n#0@@11| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@311) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@311) |n#0@@11| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@311 |n#0@@11| |t#0@@6|))) :qid |unknown.0:0| :skolemid |2780| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@311) |n#0@@11| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@312 T@U) (|n#0@@12| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@312) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@312 |n#0@@12| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@12| |t#0@@7|))) :qid |unknown.0:0| :skolemid |2781| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@312) |n#0@@12| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@313 T@U) (|n#0@@13| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@313) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@13| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@13| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@313 |n#0@@13| |t#0@@8|)) |n#0@@13|) (forall ((|i#0@@105| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@105|) (< |i#0@@105| |n#0@@13|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@313 |n#0@@13| |t#0@@8|) |i#0@@105|) |t#0@@8|)) :qid |sequence.680:18| :skolemid |2782| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@313 |n#0@@13| |t#0@@8|) |i#0@@105|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@313 |n#0@@13| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |2783| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@313 |n#0@@13| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@314 T@U) (|n#0@@14| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@314) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (and (=> (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@314 |n#0@@14| |t#0@@9|) (>= |n#0@@14| (LitInt 0))) (=> (>= |n#0@@14| (LitInt 0)) (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@314 |n#0@@14| |t#0@@9|)))) :qid |unknown.0:0| :skolemid |2784| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@314 |n#0@@14| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@315 T@U) (|n#0@@15| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@315) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@15| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@15| (LitInt 0))))) (and (=> (not (= |n#0@@15| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@15| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@315) |n#0@@15| |t#0@@10|) (ite (= |n#0@@15| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@315 (- |n#0@@15| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |2785| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@315) |n#0@@15| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@316 T@U) (|n#0@@16| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@316) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@16|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@16|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@16|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@16| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@316) (LitInt |n#0@@16|) |t#0@@11|) (ite (= (LitInt |n#0@@16|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@316) (LitInt (- |n#0@@16| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2786| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@316) (LitInt |n#0@@16|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@317 T@U) (|n#0@@17| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@317) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@17|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@17|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@17|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@17| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@317) (LitInt |n#0@@17|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@17|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@317) (LitInt (- |n#0@@17| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2787| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@317) (LitInt |n#0@@17|) (Lit |t#0@@12|))) ))))
(assert (forall ((|s#0@@38| T@U) ) (!  (=> (= (type |s#0@@38|) (SeqType BoxType)) (and (=> ($Is |s#0@@38| Tclass.KeyType.Key) (and ($Is |s#0@@38| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@38|) (LitInt 1024)))) (=> (and ($Is |s#0@@38| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@38|) (LitInt 1024))) ($Is |s#0@@38| Tclass.KeyType.Key)))) :qid |unknown.0:0| :skolemid |2788| :pattern ( ($Is |s#0@@38| Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@39| T@U) ($h@@51 T@U) ) (!  (=> (and (= (type |s#0@@39|) (SeqType BoxType)) (= (type $h@@51) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |s#0@@39| Tclass.KeyType.Key $h@@51) ($IsAlloc |s#0@@39| (TSeq Tclass.NativeTypes.byte) $h@@51)) (=> ($IsAlloc |s#0@@39| (TSeq Tclass.NativeTypes.byte) $h@@51) ($IsAlloc |s#0@@39| Tclass.KeyType.Key $h@@51)))) :qid |unknown.0:0| :skolemid |2789| :pattern ( ($IsAlloc |s#0@@39| Tclass.KeyType.Key $h@@51)) )))
(assert (= (type Tclass.KeyType.__default) TyType))
(assert (= (Tag Tclass.KeyType.__default) Tagclass.KeyType.__default))
(assert (forall ((bx@@135 T@U) ) (!  (=> (and (= (type bx@@135) BoxType) ($IsBox bx@@135 Tclass.KeyType.__default)) (and (= ($Box ($Unbox refType bx@@135)) bx@@135) ($Is ($Unbox refType bx@@135) Tclass.KeyType.__default))) :qid |unknown.0:0| :skolemid |2790| :pattern ( ($IsBox bx@@135 Tclass.KeyType.__default)) )))
(assert (forall (($o@@22 T@U) ) (!  (=> (= (type $o@@22) refType) (and (=> ($Is $o@@22 Tclass.KeyType.__default) (or (= $o@@22 null) (= (dtype $o@@22) Tclass.KeyType.__default))) (=> (or (= $o@@22 null) (= (dtype $o@@22) Tclass.KeyType.__default)) ($Is $o@@22 Tclass.KeyType.__default)))) :qid |unknown.0:0| :skolemid |2791| :pattern ( ($Is $o@@22 Tclass.KeyType.__default)) )))
(assert (forall (($o@@23 T@U) ($h@@52 T@U) ) (!  (=> (and (= (type $o@@23) refType) (= (type $h@@52) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@23 Tclass.KeyType.__default $h@@52) (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@52 $o@@23) alloc)))) (=> (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@52 $o@@23) alloc))) ($IsAlloc $o@@23 Tclass.KeyType.__default $h@@52)))) :qid |unknown.0:0| :skolemid |2792| :pattern ( ($IsAlloc $o@@23 Tclass.KeyType.__default $h@@52)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) KeyType.__default.MaxLen) (< KeyType.__default.MaxLen 18446744073709551616)))))
(assert  (=> |KeyType.__default.MaxLen#requires| true))
(assert  (=> true |KeyType.__default.MaxLen#requires|))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (forall ((bx@@136 T@U) ) (!  (=> (and (= (type bx@@136) BoxType) ($IsBox bx@@136 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@136)) bx@@136) ($Is ($Unbox refType bx@@136) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |2793| :pattern ( ($IsBox bx@@136 Tclass.Maps.__default)) )))
(assert (forall (($o@@24 T@U) ) (!  (=> (= (type $o@@24) refType) (and (=> ($Is $o@@24 Tclass.Maps.__default) (or (= $o@@24 null) (= (dtype $o@@24) Tclass.Maps.__default))) (=> (or (= $o@@24 null) (= (dtype $o@@24) Tclass.Maps.__default)) ($Is $o@@24 Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |2794| :pattern ( ($Is $o@@24 Tclass.Maps.__default)) )))
(assert (forall (($o@@25 T@U) ($h@@53 T@U) ) (!  (=> (and (= (type $o@@25) refType) (= (type $h@@53) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@25 Tclass.Maps.__default $h@@53) (or (= $o@@25 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@25) alloc)))) (=> (or (= $o@@25 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@25) alloc))) ($IsAlloc $o@@25 Tclass.Maps.__default $h@@53)))) :qid |unknown.0:0| :skolemid |2795| :pattern ( ($IsAlloc $o@@25 Tclass.Maps.__default $h@@53)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0@@19| T@U) (|k#0@@1| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0@@19|) (IMapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (= (type |v#0@@6|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@19| |k#0@@1| |v#0@@6|) (and (and ($Is |m#0@@19| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0@@1| Maps._default.IMapsTo$K)) ($IsBox |v#0@@6| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2796| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@19| |k#0@@1| |v#0@@6|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@20| T@U) (|k#0@@2| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@20|) (IMapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (= (type |v#0@@7|) BoxType)) (and (and ($Is |m#0@@20| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@2| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@7| Maps._default.IMapsTo$V@@0))) (and (=> (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@20| |k#0@@2| |v#0@@7|) true) (=> true (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@20| |k#0@@2| |v#0@@7|)))) :qid |unknown.0:0| :skolemid |2797| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@20| |k#0@@2| |v#0@@7|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@21| T@U) (|k#0@@3| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@21|) (IMapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (= (type |v#0@@8|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@21| |k#0@@3| |v#0@@8|) (and (and ($Is |m#0@@21| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@3| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@8| Maps._default.IMapsTo$V@@1)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@21| |k#0@@3| |v#0@@8|) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@21|) |k#0@@3|)) (= (MapType0Select (|IMap#Elements| |m#0@@21|) |k#0@@3|) |v#0@@8|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@21|) |k#0@@3|)) (= (MapType0Select (|IMap#Elements| |m#0@@21|) |k#0@@3|) |v#0@@8|)) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@21| |k#0@@3| |v#0@@8|)))) :qid |unknown.0:0| :skolemid |2798| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@21| |k#0@@3| |v#0@@8|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@22| T@U) (|k#0@@4| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@22|) (IMapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (= (type |v#0@@9|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@22|) (Lit |k#0@@4|) (Lit |v#0@@9|)) (and (and ($Is |m#0@@22| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@4| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@9| Maps._default.IMapsTo$V@@2)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@22|) (Lit |k#0@@4|) (Lit |v#0@@9|)) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@22|) |k#0@@4|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@22|)) (Lit |k#0@@4|)) (Lit |v#0@@9|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@22|) |k#0@@4|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@22|)) (Lit |k#0@@4|)) (Lit |v#0@@9|))) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@22|) (Lit |k#0@@4|) (Lit |v#0@@9|))))) :qid |unknown.0:0| :weight 3 :skolemid |2799| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@22|) (Lit |k#0@@4|) (Lit |v#0@@9|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@23| T@U) (|k#0@@5| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@23|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (= (type |v#0@@10|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@23| |k#0@@5| |v#0@@10|) (and (and ($Is |m#0@@23| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@5| Maps._default.MapsTo$K)) ($IsBox |v#0@@10| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2800| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@23| |k#0@@5| |v#0@@10|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@24| T@U) (|k#0@@6| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (= (type |v#0@@11|) BoxType)) (and (and ($Is |m#0@@24| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@6| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@11| Maps._default.MapsTo$V@@0))) (and (=> (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@24| |k#0@@6| |v#0@@11|) true) (=> true (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@24| |k#0@@6| |v#0@@11|)))) :qid |unknown.0:0| :skolemid |2801| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@24| |k#0@@6| |v#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@25| T@U) (|k#0@@7| T@U) (|v#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |k#0@@7|) BoxType)) (= (type |v#0@@12|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@25| |k#0@@7| |v#0@@12|) (and (and ($Is |m#0@@25| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@7| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@12| Maps._default.MapsTo$V@@1)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@25| |k#0@@7| |v#0@@12|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@25|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| |m#0@@25|) |k#0@@7|) |v#0@@12|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@25|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| |m#0@@25|) |k#0@@7|) |v#0@@12|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@25| |k#0@@7| |v#0@@12|)))) :qid |unknown.0:0| :skolemid |2802| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@25| |k#0@@7| |v#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@26| T@U) (|k#0@@8| T@U) (|v#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |k#0@@8|) BoxType)) (= (type |v#0@@13|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@26|) |k#0@@8| |v#0@@13|) (and (and ($Is |m#0@@26| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@8| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@13| Maps._default.MapsTo$V@@2)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@26|) |k#0@@8| |v#0@@13|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@8|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@26|)) |k#0@@8|) |v#0@@13|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@8|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@26|)) |k#0@@8|) |v#0@@13|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@26|) |k#0@@8| |v#0@@13|)))) :qid |unknown.0:0| :weight 3 :skolemid |2803| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@26|) |k#0@@8| |v#0@@13|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@27| T@U) (|k#0@@9| T@U) (|v#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |k#0@@9|) BoxType)) (= (type |v#0@@14|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@27|) (Lit |k#0@@9|) (Lit |v#0@@14|)) (and (and ($Is |m#0@@27| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@9| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@14| Maps._default.MapsTo$V@@3)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@27|) (Lit |k#0@@9|) (Lit |v#0@@14|)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@27|) |k#0@@9|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@27|)) (Lit |k#0@@9|)) (Lit |v#0@@14|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@27|) |k#0@@9|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@27|)) (Lit |k#0@@9|)) (Lit |v#0@@14|))) (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@27|) (Lit |k#0@@9|) (Lit |v#0@@14|))))) :qid |unknown.0:0| :weight 3 :skolemid |2804| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@27|) (Lit |k#0@@9|) (Lit |v#0@@14|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@28| T@U) (|m'#0| T@U) (|k#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |m'#0|) (MapType BoxType BoxType))) (= (type |k#0@@10|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@28| |m'#0| |k#0@@10|) (and (and ($Is |m#0@@28| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@10| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2805| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@28| |m'#0| |k#0@@10|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@29| T@U) (|m'#0@@0| T@U) (|k#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@11|) BoxType)) (and (and ($Is |m#0@@29| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@11| Maps._default.MapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@29| |m'#0@@0| |k#0@@11|) true) (=> true (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@29| |m'#0@@0| |k#0@@11|)))) :qid |unknown.0:0| :skolemid |2806| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@29| |m'#0@@0| |k#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@30| T@U) (|m'#0@@1| T@U) (|k#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@12|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@30| |m'#0@@1| |k#0@@12|) (and (and ($Is |m#0@@30| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@12| Maps._default.MapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@30| |m'#0@@1| |k#0@@12|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@30|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@30|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| |m#0@@30|) |k#0@@12|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@12|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@30|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@30|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| |m#0@@30|) |k#0@@12|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@12|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@30| |m'#0@@1| |k#0@@12|)))) :qid |unknown.0:0| :skolemid |2807| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@30| |m'#0@@1| |k#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@31| T@U) (|m'#0@@2| T@U) (|k#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@13|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@31|) (Lit |m'#0@@2|) |k#0@@13|) (and (and ($Is |m#0@@31| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@13| Maps._default.MapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@31|) (Lit |m'#0@@2|) |k#0@@13|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@13|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@13|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@13|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@13|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@31|)) |k#0@@13|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@13|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@13|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@13|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@13|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@13|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@31|)) |k#0@@13|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@13|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@31|) (Lit |m'#0@@2|) |k#0@@13|)))) :qid |unknown.0:0| :weight 3 :skolemid |2808| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@31|) (Lit |m'#0@@2|) |k#0@@13|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@32| T@U) (|m'#0@@3| T@U) (|k#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@14|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@32|) (Lit |m'#0@@3|) (Lit |k#0@@14|)) (and (and ($Is |m#0@@32| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@14| Maps._default.MapsAgreeOnKey$K@@3)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@32|) (Lit |m'#0@@3|) (Lit |k#0@@14|)) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@32|) |k#0@@14|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@14|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@32|) |k#0@@14|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@14|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@32|)) (Lit |k#0@@14|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@14|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@32|) |k#0@@14|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@14|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@32|) |k#0@@14|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@14|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@32|)) (Lit |k#0@@14|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@14|))))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@32|) (Lit |m'#0@@3|) (Lit |k#0@@14|))))) :qid |unknown.0:0| :weight 3 :skolemid |2809| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@32|) (Lit |m'#0@@3|) (Lit |k#0@@14|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@33| T@U) (|m'#0@@4| T@U) (|k#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@33|) (IMapType BoxType BoxType))) (= (type |m'#0@@4|) (IMapType BoxType BoxType))) (= (type |k#0@@15|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@33| |m'#0@@4| |k#0@@15|) (and (and ($Is |m#0@@33| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@4| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@15| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2810| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@33| |m'#0@@4| |k#0@@15|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@34| T@U) (|m'#0@@5| T@U) (|k#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@34|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@16|) BoxType)) (and (and ($Is |m#0@@34| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@16| Maps._default.IMapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@34| |m'#0@@5| |k#0@@16|) true) (=> true (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@34| |m'#0@@5| |k#0@@16|)))) :qid |unknown.0:0| :skolemid |2811| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@34| |m'#0@@5| |k#0@@16|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@35| T@U) (|m'#0@@6| T@U) (|k#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@35|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@17|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@35| |m'#0@@6| |k#0@@17|) (and (and ($Is |m#0@@35| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@17| Maps._default.IMapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@35| |m'#0@@6| |k#0@@17|) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@35|) |k#0@@17|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@17|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@35|) |k#0@@17|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@17|))) (= (MapType0Select (|IMap#Elements| |m#0@@35|) |k#0@@17|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@17|))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@35|) |k#0@@17|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@17|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@35|) |k#0@@17|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@17|))) (= (MapType0Select (|IMap#Elements| |m#0@@35|) |k#0@@17|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@17|)))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@35| |m'#0@@6| |k#0@@17|)))) :qid |unknown.0:0| :skolemid |2812| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@35| |m'#0@@6| |k#0@@17|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@36| T@U) (|m'#0@@7| T@U) (|k#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@36|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@18|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@36|) (Lit |m'#0@@7|) (Lit |k#0@@18|)) (and (and ($Is |m#0@@36| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@18| Maps._default.IMapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@36|) (Lit |m'#0@@7|) (Lit |k#0@@18|)) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@36|) |k#0@@18|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@18|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@36|) |k#0@@18|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@18|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@36|)) (Lit |k#0@@18|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@18|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@36|) |k#0@@18|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@18|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@36|) |k#0@@18|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@18|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@36|)) (Lit |k#0@@18|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@18|))))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@36|) (Lit |m'#0@@7|) (Lit |k#0@@18|))))) :qid |unknown.0:0| :weight 3 :skolemid |2813| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@36|) (Lit |m'#0@@7|) (Lit |k#0@@18|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0@@0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0@@0| |sup#0|) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |2814| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0@@0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@1| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (and (=> (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@1| |sup#0@@0|) true) (=> true (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@1| |sup#0@@0|)))) :qid |unknown.0:0| :skolemid |2815| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@1| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@2| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1|) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@2|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@84| T@U) ) (!  (=> (and (and (= (type |key#0@@84|) BoxType) ($IsBox |key#0@@84| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#0@@84|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1| |key#0@@84|)) :qid |Mapssdfy.28:16| :skolemid |2816| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1| |key#0@@84|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#0@@84|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1|) (and (|ISet#Subset| (|IMap#Domain| |sub#0@@2|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@85| T@U) ) (!  (=> (and (and (= (type |key#0@@85|) BoxType) ($IsBox |key#0@@85| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#0@@85|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1| |key#0@@85|)) :qid |Mapssdfy.28:16| :skolemid |2817| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1| |key#0@@85|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#0@@85|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| |sub#0@@2|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@86| T@U) ) (!  (=> (and (and (= (type |key#0@@86|) BoxType) ($IsBox |key#0@@86| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#0@@86|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1| |key#0@@86|)) :qid |Mapssdfy.28:16| :skolemid |2817| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1| |key#0@@86|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#0@@86|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1|))))) :qid |unknown.0:0| :skolemid |2818| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@2| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@3| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@3|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@3|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@3| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@3|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@12| T@U) ) (!  (=> (and (and (= (type |key#1@@12|) BoxType) ($IsBox |key#1@@12| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@3|))) |key#1@@12|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@3|) (Lit |sup#0@@2|) |key#1@@12|)) :qid |Mapssdfy.28:16| :skolemid |2819| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@3| |sup#0@@2| |key#1@@12|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@3|) |key#1@@12|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@3|) (Lit |sup#0@@2|)) (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@3|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@13| T@U) ) (!  (=> (and (and (= (type |key#1@@13|) BoxType) ($IsBox |key#1@@13| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@3|))) |key#1@@13|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@3|) (Lit |sup#0@@2|) |key#1@@13|)) :qid |Mapssdfy.28:16| :skolemid |2820| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@3| |sup#0@@2| |key#1@@13|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@3|) |key#1@@13|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@3|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@14| T@U) ) (!  (=> (and (and (= (type |key#1@@14|) BoxType) ($IsBox |key#1@@14| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@3|))) |key#1@@14|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@3|) (Lit |sup#0@@2|) |key#1@@14|)) :qid |Mapssdfy.28:16| :skolemid |2820| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@3| |sup#0@@2| |key#1@@14|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@3|) |key#1@@14|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@3|) (Lit |sup#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2821| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@3|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@4| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@4| |sup#0@@3|) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |2822| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@4| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@5| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (and (=> (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@5| |sup#0@@4|) true) (=> true (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@5| |sup#0@@4|)))) :qid |unknown.0:0| :skolemid |2823| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@5| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@6| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5|) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@6|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@87| T@U) ) (!  (=> (and (and (= (type |key#0@@87|) BoxType) ($IsBox |key#0@@87| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@6|) |key#0@@87|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5| |key#0@@87|)) :qid |Mapssdfy.33:16| :skolemid |2824| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5| |key#0@@87|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#0@@87|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5|) (and (|Set#Subset| (|Map#Domain| |sub#0@@6|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@88| T@U) ) (!  (=> (and (and (= (type |key#0@@88|) BoxType) ($IsBox |key#0@@88| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@6|) |key#0@@88|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5| |key#0@@88|)) :qid |Mapssdfy.33:16| :skolemid |2825| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5| |key#0@@88|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#0@@88|)) )))) (=> (and (|Set#Subset| (|Map#Domain| |sub#0@@6|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@89| T@U) ) (!  (=> (and (and (= (type |key#0@@89|) BoxType) ($IsBox |key#0@@89| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@6|) |key#0@@89|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5| |key#0@@89|)) :qid |Mapssdfy.33:16| :skolemid |2825| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5| |key#0@@89|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#0@@89|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5|))))) :qid |unknown.0:0| :skolemid |2826| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@6| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@7| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@7|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@7|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@7| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@7|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@15| T@U) ) (!  (=> (and (and (= (type |key#1@@15|) BoxType) ($IsBox |key#1@@15| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@7|))) |key#1@@15|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@7|) (Lit |sup#0@@6|) |key#1@@15|)) :qid |Mapssdfy.33:16| :skolemid |2827| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@7| |sup#0@@6| |key#1@@15|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@7|) |key#1@@15|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@7|) (Lit |sup#0@@6|)) (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@7|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@16| T@U) ) (!  (=> (and (and (= (type |key#1@@16|) BoxType) ($IsBox |key#1@@16| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@7|))) |key#1@@16|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@7|) (Lit |sup#0@@6|) |key#1@@16|)) :qid |Mapssdfy.33:16| :skolemid |2828| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@7| |sup#0@@6| |key#1@@16|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@7|) |key#1@@16|)) )))) (=> (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@7|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@17| T@U) ) (!  (=> (and (and (= (type |key#1@@17|) BoxType) ($IsBox |key#1@@17| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@7|))) |key#1@@17|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@7|) (Lit |sup#0@@6|) |key#1@@17|)) :qid |Mapssdfy.33:16| :skolemid |2828| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@7| |sup#0@@6| |key#1@@17|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@7|) |key#1@@17|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@7|) (Lit |sup#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2829| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@7|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@434 T@U) (arg1@@244 T@U) (arg2@@177 T@U) (arg3@@122 T@U) (arg4@@97 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@434 arg1@@244 arg2@@177 arg3@@122 arg4@@97)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@434 arg1@@244 arg2@@177 arg3@@122 arg4@@97)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@318 T@U) (|m#0@@37| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@318) LayerTypeType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@318) |m#0@@37| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@318 |m#0@@37| |ks#0|))) :qid |unknown.0:0| :skolemid |2830| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@318) |m#0@@37| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@319 T@U) (|m#0@@38| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@319) LayerTypeType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@319 |m#0@@38| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@38| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |2831| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@319) |m#0@@38| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@320 T@U) (|m#0@@39| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@320) LayerTypeType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@39| |ks#0@@1|) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@19| T@U) ) (!  (=> (and (and (= (type |k#0@@19|) BoxType) ($IsBox |k#0@@19| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@39|) |k#0@@19|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@19|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) |k#0@@19|))) :qid |Mapssdfy.37:20| :skolemid |2832| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) |k#0@@19|)) :pattern ( (MapType0Select |ks#0@@1| |k#0@@19|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@39|) |k#0@@19|)) )) (forall ((|k#1@@1| T@U) ) (!  (=> (and (= (type |k#1@@1|) BoxType) ($IsBox |k#1@@1| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) |k#1@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@39|) |k#1@@1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) |k#1@@1|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1@@1|)))))) :qid |Mapssdfy.38:20| :skolemid |2833| :pattern ( (MapType0Select |ks#0@@1| |k#1@@1|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@39|) |k#1@@1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) |k#1@@1|)) ))) (forall ((|j#0@@6| T@U) ) (!  (=> (and (and (= (type |j#0@@6|) BoxType) ($IsBox |j#0@@6| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) |j#0@@6|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) |j#0@@6|) (MapType0Select (|Map#Elements| |m#0@@39|) |j#0@@6|))) :qid |Mapssdfy.39:20| :skolemid |2834| :pattern ( (MapType0Select (|Map#Elements| |m#0@@39|) |j#0@@6|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) |j#0@@6|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) |j#0@@6|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@39|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) (|Map#Card| |m#0@@39|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2835| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@320 |m#0@@39| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@321 T@U) (|m#0@@40| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@321) LayerTypeType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (and (=> (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@321 |m#0@@40| |ks#0@@2|) true) (=> true (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@321 |m#0@@40| |ks#0@@2|)))) :qid |unknown.0:0| :skolemid |2836| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@321 |m#0@@40| |ks#0@@2|)) )))
(assert (forall ((arg0@@435 T@U) (arg1@@245 T@U) (arg2@@178 T@U) ) (! (= (type (|lambda#473| arg0@@435 arg1@@245 arg2@@178)) (MapType0Type BoxType boolType)) :qid |funType:lambda#473| :pattern ( (|lambda#473| arg0@@435 arg1@@245 arg2@@178)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@322 T@U) (|m#0@@41| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@322) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@41| |ks#0@@3|) (and ($Is |m#0@@41| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@322) |m#0@@41| |ks#0@@3|) (let ((|m'#0@@8| (|Map#Glue| (|lambda#473| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@41|) |ks#0@@3|) (|lambda#102| (|Map#Elements| |m#0@@41|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#0@@8|))) :qid |unknown.0:0| :skolemid |2837| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@322) |m#0@@41| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@323 T@U) (|m#0@@42| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@323) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@42|) (Lit |ks#0@@4|)) (and ($Is |m#0@@42| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@323) (Lit |m#0@@42|) (Lit |ks#0@@4|)) (let ((|m'#1| (|Map#Glue| (|lambda#473| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@42|) (Lit |ks#0@@4|)) (|lambda#102| (|Map#Elements| (Lit |m#0@@42|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |2838| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@323) (Lit |m#0@@42|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@436 T@U) (arg1@@246 T@U) (arg2@@179 T@U) (arg3@@123 T@U) (arg4@@98 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@436 arg1@@246 arg2@@179 arg3@@123 arg4@@98)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@436 arg1@@246 arg2@@179 arg3@@123 arg4@@98)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@324 T@U) (|m#0@@43| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@324) LayerTypeType)) (= (type |m#0@@43|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@324) |m#0@@43| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@324 |m#0@@43| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |2839| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@324) |m#0@@43| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@325 T@U) (|m#0@@44| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@325) LayerTypeType)) (= (type |m#0@@44|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@325 |m#0@@44| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@44| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |2840| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@325) |m#0@@44| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@326 T@U) (|m#0@@45| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@326) LayerTypeType)) (= (type |m#0@@45|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@45| |ks#0@@7|) (and ($Is |m#0@@45| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@326 |m#0@@45| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@45|) |ks#0@@7|)) (forall ((|j#0@@7| T@U) ) (!  (=> (and (and (= (type |j#0@@7|) BoxType) ($IsBox |j#0@@7| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@326 |m#0@@45| |ks#0@@7|)) |j#0@@7|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@326 |m#0@@45| |ks#0@@7|)) |j#0@@7|) (MapType0Select (|Map#Elements| |m#0@@45|) |j#0@@7|))) :qid |Mapssdfy.50:20| :skolemid |2841| :pattern ( (MapType0Select (|Map#Elements| |m#0@@45|) |j#0@@7|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@326 |m#0@@45| |ks#0@@7|)) |j#0@@7|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@326 |m#0@@45| |ks#0@@7|)) |j#0@@7|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@326 |m#0@@45| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@45|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@326 |m#0@@45| |ks#0@@7|)) (|Map#Card| |m#0@@45|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@326 |m#0@@45| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |2842| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@326 |m#0@@45| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@327 T@U) (|m#0@@46| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@327) LayerTypeType)) (= (type |m#0@@46|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@46| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (and (=> (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@327 |m#0@@46| |ks#0@@8|) true) (=> true (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@327 |m#0@@46| |ks#0@@8|)))) :qid |unknown.0:0| :skolemid |2843| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@327 |m#0@@46| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@328 T@U) (|m#0@@47| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@328) LayerTypeType)) (= (type |m#0@@47|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@47| |ks#0@@9|) (and ($Is |m#0@@47| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@47| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@328) |m#0@@47| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@47| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |2844| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@328) |m#0@@47| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@329 T@U) (|m#0@@48| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@329) LayerTypeType)) (= (type |m#0@@48|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@48|) (Lit |ks#0@@10|)) (and ($Is |m#0@@48| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@48|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@329) (Lit |m#0@@48|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@48|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2845| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@329) (Lit |m#0@@48|) (Lit |ks#0@@10|))) ))))
(assert (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) ($ly@@330 T@U) (|m#0@@49| T@U) (|k#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type $ly@@330) LayerTypeType)) (= (type |m#0@@49|) (MapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@330) |m#0@@49| |k#0@@20|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V $ly@@330 |m#0@@49| |k#0@@20|))) :qid |unknown.0:0| :skolemid |2846| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@330) |m#0@@49| |k#0@@20|)) )))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) ($ly@@331 T@U) (|m#0@@50| T@U) (|k#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type $ly@@331) LayerTypeType)) (= (type |m#0@@50|) (MapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $ly@@331 |m#0@@50| |k#0@@21|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $LZ |m#0@@50| |k#0@@21|))) :qid |unknown.0:0| :skolemid |2847| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 (AsFuelBottom $ly@@331) |m#0@@50| |k#0@@21|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) ($ly@@332 T@U) (|m#0@@51| T@U) (|k#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type $ly@@332) LayerTypeType)) (= (type |m#0@@51|) (MapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@51| |k#0@@22|) (and ($Is |m#0@@51| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@22| Maps._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@8| T@U) ) (!  (=> (and (and (= (type |j#0@@8|) BoxType) ($IsBox |j#0@@8| Maps._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@51|) |j#0@@8|)) (not (= |j#0@@8| |k#0@@22|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) |j#0@@8|))) :qid |Mapssdfy.59:20| :skolemid |2848| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) |j#0@@8|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@51|) |j#0@@8|)) )) (forall ((|j#1@@1| T@U) ) (!  (=> (and (= (type |j#1@@1|) BoxType) ($IsBox |j#1@@1| Maps._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) |j#1@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@51|) |j#1@@1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) |j#1@@1|)) (not (= |j#1@@1| |k#0@@22|))))) :qid |Mapssdfy.60:20| :skolemid |2849| :pattern ( (MapType0Select (|Map#Domain| |m#0@@51|) |j#1@@1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) |j#1@@1|)) ))) (forall ((|j#2| T@U) ) (!  (=> (and (and (= (type |j#2|) BoxType) ($IsBox |j#2| Maps._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) |j#2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) |j#2|) (MapType0Select (|Map#Elements| |m#0@@51|) |j#2|))) :qid |Mapssdfy.61:20| :skolemid |2850| :pattern ( (MapType0Select (|Map#Elements| |m#0@@51|) |j#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) |j#2|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) |j#2|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|))) (|Set#Card| (|Map#Domain| |m#0@@51|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@51|) |k#0@@22|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) (- (|Map#Card| |m#0@@51|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@51|) |k#0@@22|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) (|Map#Card| |m#0@@51|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|) (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2851| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@332 |m#0@@51| |k#0@@22|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) ($ly@@333 T@U) (|m#0@@52| T@U) (|k#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type $ly@@333) LayerTypeType)) (= (type |m#0@@52|) (MapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (and ($Is |m#0@@52| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@23| Maps._default.MapRemove1$K@@2))) (and (=> (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@333 |m#0@@52| |k#0@@23|) true) (=> true (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@333 |m#0@@52| |k#0@@23|)))) :qid |unknown.0:0| :skolemid |2852| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@333 |m#0@@52| |k#0@@23|)) )))
(assert (forall ((arg0@@437 T@U) (arg1@@247 T@U) (arg2@@180 T@U) ) (! (= (type (|lambda#477| arg0@@437 arg1@@247 arg2@@180)) (MapType0Type BoxType boolType)) :qid |funType:lambda#477| :pattern ( (|lambda#477| arg0@@437 arg1@@247 arg2@@180)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) ($ly@@334 T@U) (|m#0@@53| T@U) (|k#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type $ly@@334) LayerTypeType)) (= (type |m#0@@53|) (MapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 |m#0@@53| |k#0@@24|) (and ($Is |m#0@@53| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@24| Maps._default.MapRemove1$K@@3)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@334) |m#0@@53| |k#0@@24|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#477| Maps._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@53|) |k#0@@24|) (|lambda#102| (|Map#Elements| |m#0@@53|)) (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)))) |m'#0@@9|))) :qid |unknown.0:0| :skolemid |2853| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@334) |m#0@@53| |k#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@4 T@U) (Maps._default.MapRemove1$V@@4 T@U) ($ly@@335 T@U) (|m#0@@54| T@U) (|k#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@4) TyType) (= (type Maps._default.MapRemove1$V@@4) TyType)) (= (type $ly@@335) LayerTypeType)) (= (type |m#0@@54|) (MapType BoxType BoxType))) (= (type |k#0@@25|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 (Lit |m#0@@54|) |k#0@@25|) (and ($Is |m#0@@54| (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)) ($IsBox |k#0@@25| Maps._default.MapRemove1$K@@4)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@335) (Lit |m#0@@54|) |k#0@@25|) (let ((|m'#1@@0| (|Map#Glue| (|lambda#477| Maps._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@54|) |k#0@@25|) (|lambda#102| (|Map#Elements| (Lit |m#0@@54|))) (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)))) |m'#1@@0|))) :qid |unknown.0:0| :weight 3 :skolemid |2854| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@335) (Lit |m#0@@54|) |k#0@@25|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@5 T@U) (Maps._default.MapRemove1$V@@5 T@U) ($ly@@336 T@U) (|m#0@@55| T@U) (|k#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@5) TyType) (= (type Maps._default.MapRemove1$V@@5) TyType)) (= (type $ly@@336) LayerTypeType)) (= (type |m#0@@55|) (MapType BoxType BoxType))) (= (type |k#0@@26|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 (Lit |m#0@@55|) (Lit |k#0@@26|)) (and ($Is |m#0@@55| (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)) ($IsBox |k#0@@26| Maps._default.MapRemove1$K@@5)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@336) (Lit |m#0@@55|) (Lit |k#0@@26|)) (let ((|m'#2| (|Map#Glue| (|lambda#477| Maps._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@55|) |k#0@@26|) (|lambda#102| (|Map#Elements| (Lit |m#0@@55|))) (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |2855| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@336) (Lit |m#0@@55|) (Lit |k#0@@26|))) ))))
(assert (forall ((arg0@@438 T@U) (arg1@@248 T@U) (arg2@@181 T@U) (arg3@@124 T@U) (arg4@@99 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@438 arg1@@248 arg2@@181 arg3@@124 arg4@@99)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@438 arg1@@248 arg2@@181 arg3@@124 arg4@@99)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@337 T@U) (|m#0@@56| T@U) (|k#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@337) LayerTypeType)) (= (type |m#0@@56|) (MapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@337) |m#0@@56| |k#0@@27|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@337 |m#0@@56| |k#0@@27|))) :qid |unknown.0:0| :skolemid |2856| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@337) |m#0@@56| |k#0@@27|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@338 T@U) (|m#0@@57| T@U) (|k#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@338) LayerTypeType)) (= (type |m#0@@57|) (MapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@338 |m#0@@57| |k#0@@28|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@57| |k#0@@28|))) :qid |unknown.0:0| :skolemid |2857| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@338) |m#0@@57| |k#0@@28|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@339 T@U) (|m#0@@58| T@U) (|k#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@339) LayerTypeType)) (= (type |m#0@@58|) (MapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@58| |k#0@@29|) (and ($Is |m#0@@58| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@29| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@339 |m#0@@58| |k#0@@29|)) (|Set#Difference| (|Map#Domain| |m#0@@58|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@29|))) (forall ((|j#0@@9| T@U) ) (!  (=> (and (and (= (type |j#0@@9|) BoxType) ($IsBox |j#0@@9| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@339 |m#0@@58| |k#0@@29|)) |j#0@@9|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@339 |m#0@@58| |k#0@@29|)) |j#0@@9|) (MapType0Select (|Map#Elements| |m#0@@58|) |j#0@@9|))) :qid |Mapssdfy.76:20| :skolemid |2858| :pattern ( (MapType0Select (|Map#Elements| |m#0@@58|) |j#0@@9|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@339 |m#0@@58| |k#0@@29|)) |j#0@@9|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@339 |m#0@@58| |k#0@@29|)) |j#0@@9|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@339 |m#0@@58| |k#0@@29|))) (|Set#Card| (|Map#Domain| |m#0@@58|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@339 |m#0@@58| |k#0@@29|)) (|Map#Card| |m#0@@58|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@339 |m#0@@58| |k#0@@29|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |2859| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@339 |m#0@@58| |k#0@@29|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@340 T@U) (|m#0@@59| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@340) LayerTypeType)) (= (type |m#0@@59|) (MapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (and ($Is |m#0@@59| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@30| Maps._default.MapRemove1Strong$K@@2))) (and (=> (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@340 |m#0@@59| |k#0@@30|) true) (=> true (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@340 |m#0@@59| |k#0@@30|)))) :qid |unknown.0:0| :skolemid |2860| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@340 |m#0@@59| |k#0@@30|)) )))
(assert  (and (= (type MoreFuel_Maps._default.MapRemove10) LayerTypeType) (= (type StartFuelAssert_Maps._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@341 T@U) (|m#0@@60| T@U) (|k#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@341) LayerTypeType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |k#0@@31|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@60| |k#0@@31|) (and ($Is |m#0@@60| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@31| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@60| |k#0@@31|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove10)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove10) MoreFuel_Maps._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@341) |m#0@@60| |k#0@@31|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 StartFuel_Maps._default.MapRemove1 |m#0@@60| |k#0@@31|))))) :qid |unknown.0:0| :skolemid |2861| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@341) |m#0@@60| |k#0@@31|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@342 T@U) (|m#0@@61| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@342) LayerTypeType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@61|) |k#0@@32|) (and ($Is |m#0@@61| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@32| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@61|) |k#0@@32|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove11)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove11) MoreFuel_Maps._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@342) (Lit |m#0@@61|) |k#0@@32|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@61|) |k#0@@32|))))) :qid |unknown.0:0| :weight 3 :skolemid |2862| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@342) (Lit |m#0@@61|) |k#0@@32|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@343 T@U) (|m#0@@62| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@343) LayerTypeType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@62|) (Lit |k#0@@33|)) (and ($Is |m#0@@62| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@33| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@62|) (Lit |k#0@@33|)) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove12)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove12) MoreFuel_Maps._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@343) (Lit |m#0@@62|) (Lit |k#0@@33|)) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@62|) (Lit |k#0@@33|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2863| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@343) (Lit |m#0@@62|) (Lit |k#0@@33|))) ))))
(assert (forall ((arg0@@439 T@U) (arg1@@249 T@U) (arg2@@182 T@U) (arg3@@125 T@U) (arg4@@100 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@439 arg1@@249 arg2@@182 arg3@@125 arg4@@100)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@439 arg1@@249 arg2@@182 arg3@@125 arg4@@100)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@344 T@U) (|m#0@@63| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@344) LayerTypeType)) (= (type |m#0@@63|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@344) |m#0@@63| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@344 |m#0@@63| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |2864| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@344) |m#0@@63| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@345 T@U) (|m#0@@64| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@345) LayerTypeType)) (= (type |m#0@@64|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@345 |m#0@@64| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@64| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |2865| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@345) |m#0@@64| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@346 T@U) (|m#0@@65| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@346) LayerTypeType)) (= (type |m#0@@65|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@65| |ks#0@@13|) (and ($Is |m#0@@65| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@346 |m#0@@65| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@65|) |ks#0@@13|)) (forall ((|j#0@@10| T@U) ) (!  (=> (and (and (= (type |j#0@@10|) BoxType) ($IsBox |j#0@@10| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@346 |m#0@@65| |ks#0@@13|)) |j#0@@10|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@346 |m#0@@65| |ks#0@@13|)) |j#0@@10|) (MapType0Select (|IMap#Elements| |m#0@@65|) |j#0@@10|))) :qid |Mapssdfy.86:20| :skolemid |2866| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@65|) |j#0@@10|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@346 |m#0@@65| |ks#0@@13|)) |j#0@@10|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@346 |m#0@@65| |ks#0@@13|)) |j#0@@10|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@346 |m#0@@65| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2867| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@346 |m#0@@65| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@347 T@U) (|m#0@@66| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@347) LayerTypeType)) (= (type |m#0@@66|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@66| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (and (=> (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@347 |m#0@@66| |ks#0@@14|) true) (=> true (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@347 |m#0@@66| |ks#0@@14|)))) :qid |unknown.0:0| :skolemid |2868| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@347 |m#0@@66| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@348 T@U) (|m#0@@67| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@348) LayerTypeType)) (= (type |m#0@@67|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@67| |ks#0@@15|) (and ($Is |m#0@@67| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@348) |m#0@@67| |ks#0@@15|) (|IMap#Glue| (|lambda#473| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@67|) |ks#0@@15|) (|lambda#102| (|IMap#Elements| |m#0@@67|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |2869| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@348) |m#0@@67| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@349 T@U) (|m#0@@68| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@349) LayerTypeType)) (= (type |m#0@@68|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@68|) (Lit |ks#0@@16|)) (and ($Is |m#0@@68| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@349) (Lit |m#0@@68|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#473| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@68|) (Lit |ks#0@@16|)) (|lambda#102| (|IMap#Elements| (Lit |m#0@@68|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2870| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@349) (Lit |m#0@@68|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@440 T@U) (arg1@@250 T@U) (arg2@@183 T@U) (arg3@@126 T@U) (arg4@@101 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@440 arg1@@250 arg2@@183 arg3@@126 arg4@@101)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@440 arg1@@250 arg2@@183 arg3@@126 arg4@@101)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@350 T@U) (|m#0@@69| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@350) LayerTypeType)) (= (type |m#0@@69|) (IMapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@350) |m#0@@69| |k#0@@34|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@350 |m#0@@69| |k#0@@34|))) :qid |unknown.0:0| :skolemid |2871| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@350) |m#0@@69| |k#0@@34|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@351 T@U) (|m#0@@70| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@351) LayerTypeType)) (= (type |m#0@@70|) (IMapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@351 |m#0@@70| |k#0@@35|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@70| |k#0@@35|))) :qid |unknown.0:0| :skolemid |2872| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@351) |m#0@@70| |k#0@@35|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@352 T@U) (|m#0@@71| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@352) LayerTypeType)) (= (type |m#0@@71|) (IMapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@71| |k#0@@36|) (and ($Is |m#0@@71| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@36| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@352 |m#0@@71| |k#0@@36|)) (|ISet#Difference| (|IMap#Domain| |m#0@@71|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@36|))) (forall ((|j#0@@11| T@U) ) (!  (=> (and (and (= (type |j#0@@11|) BoxType) ($IsBox |j#0@@11| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@352 |m#0@@71| |k#0@@36|)) |j#0@@11|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@352 |m#0@@71| |k#0@@36|)) |j#0@@11|) (MapType0Select (|IMap#Elements| |m#0@@71|) |j#0@@11|))) :qid |Mapssdfy.93:20| :skolemid |2873| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@71|) |j#0@@11|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@352 |m#0@@71| |k#0@@36|)) |j#0@@11|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@352 |m#0@@71| |k#0@@36|)) |j#0@@11|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@352 |m#0@@71| |k#0@@36|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2874| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@352 |m#0@@71| |k#0@@36|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@353 T@U) (|m#0@@72| T@U) (|k#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@353) LayerTypeType)) (= (type |m#0@@72|) (IMapType BoxType BoxType))) (= (type |k#0@@37|) BoxType)) (and ($Is |m#0@@72| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@37| Maps._default.IMapRemove1$K@@2))) (and (=> (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@353 |m#0@@72| |k#0@@37|) true) (=> true (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@353 |m#0@@72| |k#0@@37|)))) :qid |unknown.0:0| :skolemid |2875| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@353 |m#0@@72| |k#0@@37|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@354 T@U) (|m#0@@73| T@U) (|k#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@354) LayerTypeType)) (= (type |m#0@@73|) (IMapType BoxType BoxType))) (= (type |k#0@@38|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@73| |k#0@@38|) (and ($Is |m#0@@73| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@38| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@354) |m#0@@73| |k#0@@38|) (|IMap#Glue| (|lambda#477| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@73|) |k#0@@38|) (|lambda#102| (|IMap#Elements| |m#0@@73|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |2876| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@354) |m#0@@73| |k#0@@38|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@355 T@U) (|m#0@@74| T@U) (|k#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@355) LayerTypeType)) (= (type |m#0@@74|) (IMapType BoxType BoxType))) (= (type |k#0@@39|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@74|) (Lit |k#0@@39|)) (and ($Is |m#0@@74| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@39| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@355) (Lit |m#0@@74|) (Lit |k#0@@39|)) (|IMap#Glue| (|lambda#477| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@74|) |k#0@@39|) (|lambda#102| (|IMap#Elements| (Lit |m#0@@74|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2877| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@355) (Lit |m#0@@74|) (Lit |k#0@@39|))) ))))
(assert (forall ((arg0@@441 T@U) (arg1@@251 T@U) (arg2@@184 T@U) (arg3@@127 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@441 arg1@@251 arg2@@184 arg3@@127)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@441 arg1@@251 arg2@@184 arg3@@127)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@75| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@75| |ks#0@@17|) (and ($Is |m#0@@75| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@75| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |2878| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@75| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@76| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@76| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (and (=> (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@76| |ks#0@@18|) true) (=> true (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@76| |ks#0@@18|)))) :qid |unknown.0:0| :skolemid |2879| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@76| |ks#0@@18|)) )))
(assert (forall ((arg0@@442 T@U) (arg1@@252 T@U) (arg2@@185 T@U) ) (! (= (type (|lambda#491| arg0@@442 arg1@@252 arg2@@185)) (MapType0Type BoxType boolType)) :qid |funType:lambda#491| :pattern ( (|lambda#491| arg0@@442 arg1@@252 arg2@@185)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@77| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@77|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@77| |ks#0@@19|) (and ($Is |m#0@@77| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@77| |ks#0@@19|) (|Map#Glue| (|lambda#491| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@77|)) (|lambda#102| (|Map#Elements| |m#0@@77|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2880| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@77| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@78| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@78|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@78|) (Lit |ks#0@@20|)) (and ($Is |m#0@@78| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@78|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#491| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@78|)) (|lambda#102| (|Map#Elements| (Lit |m#0@@78|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2881| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@78|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@443 T@U) (arg1@@253 T@U) (arg2@@186 T@U) (arg3@@128 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@443 arg1@@253 arg2@@186 arg3@@128)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@443 arg1@@253 arg2@@186 arg3@@128)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@79| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@79|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@79| |ks#0@@21|) (and ($Is |m#0@@79| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@79| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |2882| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@79| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@80| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@80|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@80| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (and (=> (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@80| |ks#0@@22|) true) (=> true (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@80| |ks#0@@22|)))) :qid |unknown.0:0| :skolemid |2883| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@80| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@81| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@81|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@81| |ks#0@@23|) (and ($Is |m#0@@81| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@81| |ks#0@@23|) (|Map#Glue| (|lambda#491| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@81|) |ks#0@@23|) (|lambda#102| (|Map#Elements| |m#0@@81|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2884| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@81| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@82| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@82|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@82|) |ks#0@@24|) (and ($Is |m#0@@82| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@82|) |ks#0@@24|) (|Map#Glue| (|lambda#491| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@82|) |ks#0@@24|) (|lambda#102| (|Map#Elements| (Lit |m#0@@82|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2885| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@82|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@83| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@83|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@83|) (Lit |ks#0@@25|)) (and ($Is |m#0@@83| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@83|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#491| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@83|) (Lit |ks#0@@25|)) (|lambda#102| (|Map#Elements| (Lit |m#0@@83|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |2886| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@83|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@444 T@U) (arg1@@254 T@U) (arg2@@187 T@U) (arg3@@129 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@444 arg1@@254 arg2@@187 arg3@@129)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@444 arg1@@254 arg2@@187 arg3@@129)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@84| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@84|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@84| |ks#0@@26|) (and ($Is |m#0@@84| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@84| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |2887| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@84| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@85| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@85|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@85| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (and (=> (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@85| |ks#0@@27|) true) (=> true (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@85| |ks#0@@27|)))) :qid |unknown.0:0| :skolemid |2888| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@85| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@86| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@86|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@86| |ks#0@@28|) (and ($Is |m#0@@86| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@86| |ks#0@@28|) (|IMap#Glue| (|lambda#491| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@86|)) (|lambda#102| (|IMap#Elements| |m#0@@86|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2889| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@86| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@87| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@87|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@87|) (Lit |ks#0@@29|)) (and ($Is |m#0@@87| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@87|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#491| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@87|)) (|lambda#102| (|IMap#Elements| (Lit |m#0@@87|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2890| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@87|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@445 T@U) (arg1@@255 T@U) (arg2@@188 T@U) (arg3@@130 T@U) (arg4@@102 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@445 arg1@@255 arg2@@188 arg3@@130 arg4@@102)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@445 arg1@@255 arg2@@188 arg3@@130 arg4@@102)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@356 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@356) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@356) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@356 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |2891| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@356) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@357 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@357) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@357 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |2892| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@357) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@358 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@358) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@358 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@40| T@U) ) (!  (=> (and (and (= (type |k#0@@40|) BoxType) ($IsBox |k#0@@40| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@40|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@40|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@358 |mapa#0@@1| |mapb#0@@1|)) |k#0@@40|))) :qid |Mapssdfy.114:18| :skolemid |2893| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@358 |mapa#0@@1| |mapb#0@@1|)) |k#0@@40|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@40|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@40|)) ))) (forall ((|k#1@@2| T@U) ) (!  (=> (and (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@2|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@2|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@358 |mapa#0@@1| |mapb#0@@1|)) |k#1@@2|))) :qid |Mapssdfy.115:18| :skolemid |2894| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@358 |mapa#0@@1| |mapb#0@@1|)) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@2|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@358 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2895| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@358 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@359 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@359) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@359 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)) (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@359 |mapa#0@@2| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |2896| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@359 |mapa#0@@2| |mapb#0@@2|)) )))
(assert  (and (forall ((arg0@@446 T@U) (arg1@@256 T@U) (arg2@@189 T@U) ) (! (= (type (|lambda#505| arg0@@446 arg1@@256 arg2@@189)) (MapType0Type BoxType boolType)) :qid |funType:lambda#505| :pattern ( (|lambda#505| arg0@@446 arg1@@256 arg2@@189)) )) (forall ((arg0@@447 T@U) (arg1@@257 T@U) (arg2@@190 T@U) ) (! (= (type (|lambda#506| arg0@@447 arg1@@257 arg2@@190)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#506| :pattern ( (|lambda#506| arg0@@447 arg1@@257 arg2@@190)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@360 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@360) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@360) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#505| Maps._default.MapDisjointUnion$U@@3 (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|)) (|lambda#506| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |2897| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@360) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@361 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@361) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@361) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#505| Maps._default.MapDisjointUnion$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@4|))) (Lit (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#506| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2898| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@361) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@362 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@362) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@362) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@362 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |2899| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@362) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@363 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@363) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@363 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |2900| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@363) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@364 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@364) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@364 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@41| T@U) ) (!  (=> (and (and (= (type |k#0@@41|) BoxType) ($IsBox |k#0@@41| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@41|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@364 |mapa#0@@7| |mapb#0@@7|)) |k#0@@41|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@41|))) :qid |Mapssdfy.124:20| :skolemid |2901| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@41|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@364 |mapa#0@@7| |mapb#0@@7|)) |k#0@@41|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@41|)) ))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#1@@3|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#1@@3|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@364 |mapa#0@@7| |mapb#0@@7|)) |k#1@@3|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@3|))) :qid |Mapssdfy.125:20| :skolemid |2902| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@364 |mapa#0@@7| |mapb#0@@7|)) |k#1@@3|)) ))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@364 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))) :qid |Mapssdfy.126:20| :skolemid |2903| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@364 |mapa#0@@7| |mapb#0@@7|)) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@364 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2904| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@364 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@365 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@365) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@365 |mapa#0@@8| |mapb#0@@8|) true) (=> true (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@365 |mapa#0@@8| |mapb#0@@8|)))) :qid |unknown.0:0| :skolemid |2905| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@365 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@366 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@366) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@366) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#505| Maps._default.MapUnionPreferA$U@@3 (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|)) (|lambda#506| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2906| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@366) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@367 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@367) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@367) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#505| Maps._default.MapUnionPreferA$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@10|))) (Lit (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#506| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2907| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@367) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@448 T@U) (arg1@@258 T@U) (arg2@@191 T@U) (arg3@@131 T@U) (arg4@@103 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@448 arg1@@258 arg2@@191 arg3@@131 arg4@@103)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@448 arg1@@258 arg2@@191 arg3@@131 arg4@@103)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@368 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@368) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@368) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@368 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |2908| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@368) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@369 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@369) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@369 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |2909| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@369) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@370 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@370) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@370 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@42| T@U) ) (!  (=> (and (and (= (type |k#0@@42|) BoxType) ($IsBox |k#0@@42| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@42|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@370 |mapa#0@@13| |mapb#0@@13|)) |k#0@@42|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@42|))) :qid |Mapssdfy.133:20| :skolemid |2910| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@42|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@370 |mapa#0@@13| |mapb#0@@13|)) |k#0@@42|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@42|)) ))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#1@@4|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#1@@4|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@370 |mapa#0@@13| |mapb#0@@13|)) |k#1@@4|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@4|))) :qid |Mapssdfy.134:20| :skolemid |2911| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@4|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@370 |mapa#0@@13| |mapb#0@@13|)) |k#1@@4|)) ))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@370 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))) :qid |Mapssdfy.135:20| :skolemid |2912| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@370 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@370 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2913| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@370 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@371 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@371) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@371 |mapa#0@@14| |mapb#0@@14|) true) (=> true (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@371 |mapa#0@@14| |mapb#0@@14|)))) :qid |unknown.0:0| :skolemid |2914| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@371 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@372 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@372) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@372) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#505| Maps._default.MapUnionPreferB$U@@3 (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|)) (|lambda#506| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2915| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@372) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@373 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@373) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@373) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#505| Maps._default.MapUnionPreferB$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@16|))) (Lit (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#506| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2916| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@373) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@374 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@374) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@374) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@374 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |2917| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@374) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@375 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@375) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@375 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |2918| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@375) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@376 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@376) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@43| T@U) ) (!  (=> (and (and (= (type |k#0@@43|) BoxType) ($IsBox |k#0@@43| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#0@@43|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#0@@43|))))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@43|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|)) |k#0@@43|))) :qid |Mapssdfy.144:18| :skolemid |2919| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|)) |k#0@@43|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@43|)) ))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#1@@5|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#1@@5|))))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|)) |k#1@@5|))) :qid |Mapssdfy.145:18| :skolemid |2920| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|)) |k#1@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@5|)) ))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#2@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#2@@1|)))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)))) :qid |Mapssdfy.146:18| :skolemid |2921| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2922| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@376 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@377 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@377) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (and (=> (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@377 |mapa#0@@20| |mapb#0@@20|) true) (=> true (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@377 |mapa#0@@20| |mapb#0@@20|)))) :qid |unknown.0:0| :skolemid |2923| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@377 |mapa#0@@20| |mapb#0@@20|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@378 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@378) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@378) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |2924| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@378) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@379 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@379) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@379) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |2925| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@379) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@449 T@U) (arg1@@259 T@U) (arg2@@192 T@U) (arg3@@132 T@U) (arg4@@104 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@449 arg1@@259 arg2@@192 arg3@@132 arg4@@104)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@449 arg1@@259 arg2@@192 arg3@@132 arg4@@104)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@380 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@380) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@380) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@380 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |2926| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@380) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@381 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@381) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@381 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |2927| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@381) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@382 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@382) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@382 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@44| T@U) ) (!  (=> (and (and (= (type |k#0@@44|) BoxType) ($IsBox |k#0@@44| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@44|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@382 |mapa#0@@25| |mapb#0@@25|)) |k#0@@44|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@44|))) :qid |Mapssdfy.153:20| :skolemid |2928| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@44|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@382 |mapa#0@@25| |mapb#0@@25|)) |k#0@@44|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@44|)) ))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#1@@6|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#1@@6|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@382 |mapa#0@@25| |mapb#0@@25|)) |k#1@@6|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@6|))) :qid |Mapssdfy.154:20| :skolemid |2929| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@6|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@382 |mapa#0@@25| |mapb#0@@25|)) |k#1@@6|)) ))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@382 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))) :qid |Mapssdfy.155:20| :skolemid |2930| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@382 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@382 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2931| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@382 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@383 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@383) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@383 |mapa#0@@26| |mapb#0@@26|) true) (=> true (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@383 |mapa#0@@26| |mapb#0@@26|)))) :qid |unknown.0:0| :skolemid |2932| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@383 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@384 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@384) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@384) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#505| Maps._default.IMapUnionPreferA$U@@3 (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|)) (|lambda#506| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2933| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@384) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@385 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@385) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@385) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#505| Maps._default.IMapUnionPreferA$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@28|))) (Lit (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#506| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2934| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@385) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@450 T@U) (arg1@@260 T@U) (arg2@@193 T@U) (arg3@@133 T@U) (arg4@@105 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@450 arg1@@260 arg2@@193 arg3@@133 arg4@@105)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@450 arg1@@260 arg2@@193 arg3@@133 arg4@@105)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@386 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@386) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@386) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@386 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |2935| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@386) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@387 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@387) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@387 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |2936| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@387) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@388 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@388) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@388 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@45| T@U) ) (!  (=> (and (and (= (type |k#0@@45|) BoxType) ($IsBox |k#0@@45| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@45|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@388 |mapa#0@@31| |mapb#0@@31|)) |k#0@@45|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@45|))) :qid |Mapssdfy.162:20| :skolemid |2937| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@45|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@388 |mapa#0@@31| |mapb#0@@31|)) |k#0@@45|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@45|)) ))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#1@@7|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#1@@7|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@388 |mapa#0@@31| |mapb#0@@31|)) |k#1@@7|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@7|))) :qid |Mapssdfy.163:20| :skolemid |2938| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@7|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@388 |mapa#0@@31| |mapb#0@@31|)) |k#1@@7|)) ))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@388 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))) :qid |Mapssdfy.164:20| :skolemid |2939| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@388 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@388 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2940| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@388 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@389 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@389) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@389 |mapa#0@@32| |mapb#0@@32|) true) (=> true (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@389 |mapa#0@@32| |mapb#0@@32|)))) :qid |unknown.0:0| :skolemid |2941| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@389 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@390 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@390) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@390) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#505| Maps._default.IMapUnionPreferB$U@@3 (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|)) (|lambda#506| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2942| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@390) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@391 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@391) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@391) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#505| Maps._default.IMapUnionPreferB$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@34|))) (Lit (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#506| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2943| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@391) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@451 T@U) (arg1@@261 T@U) (arg2@@194 T@U) (arg3@@134 T@U) (arg4@@106 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@451 arg1@@261 arg2@@194 arg3@@134 arg4@@106)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@451 arg1@@261 arg2@@194 arg3@@134 arg4@@106)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@392 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@392) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@392) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@392 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |2944| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@392) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@393 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@393) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@393 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |2945| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@393) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@394 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@394) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@46| T@U) ) (!  (=> (and (and (= (type |k#0@@46|) BoxType) ($IsBox |k#0@@46| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#0@@46|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#0@@46|))))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@46|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|)) |k#0@@46|))) :qid |Mapssdfy.173:18| :skolemid |2946| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|)) |k#0@@46|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@46|)) ))) (forall ((|k#1@@8| T@U) ) (!  (=> (and (and (= (type |k#1@@8|) BoxType) ($IsBox |k#1@@8| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#1@@8|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#1@@8|))))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@8|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|)) |k#1@@8|))) :qid |Mapssdfy.174:18| :skolemid |2947| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|)) |k#1@@8|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@8|)) ))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#2@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#2@@4|)))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)))) :qid |Mapssdfy.175:18| :skolemid |2948| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2949| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@394 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@395 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@395) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (and (=> (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@395 |mapa#0@@38| |mapb#0@@38|) true) (=> true (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@395 |mapa#0@@38| |mapb#0@@38|)))) :qid |unknown.0:0| :skolemid |2950| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@395 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@396 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@396) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@396) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |2951| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@396) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@397 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@397) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@397) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |2952| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@397) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@452 T@U) (arg1@@262 T@U) (arg2@@195 T@U) (arg3@@135 T@U) (arg4@@107 T@U) (arg5@@70 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@452 arg1@@262 arg2@@195 arg3@@135 arg4@@107 arg5@@70)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@452 arg1@@262 arg2@@195 arg3@@135 arg4@@107 arg5@@70)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@398 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@398) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@398) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@398 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |2953| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@398) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@399 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@399) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@399 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |2954| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@399) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@400 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@400) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@47| T@U) ) (!  (=> (and (and (= (type |k#0@@47|) BoxType) ($IsBox |k#0@@47| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@47|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@47|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@47|))) :qid |Mapssdfy.185:18| :skolemid |2955| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@47|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@47|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@47|)) ))) (forall ((|k#1@@9| T@U) ) (!  (=> (and (and (= (type |k#1@@9|) BoxType) ($IsBox |k#1@@9| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@9|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@9|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@9|))) :qid |Mapssdfy.186:18| :skolemid |2956| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@9|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@9|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@9|)) ))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))) :qid |Mapssdfy.187:18| :skolemid |2957| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |2958| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@400 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@401 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@401) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@401 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|)))) (=> (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))) (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@401 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)))) :qid |unknown.0:0| :skolemid |2959| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@401 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert  (and (forall ((arg0@@453 T@U) (arg1@@263 T@U) (arg2@@196 T@U) (arg3@@136 T@U) ) (! (= (type (|lambda#525| arg0@@453 arg1@@263 arg2@@196 arg3@@136)) (MapType0Type BoxType boolType)) :qid |funType:lambda#525| :pattern ( (|lambda#525| arg0@@453 arg1@@263 arg2@@196 arg3@@136)) )) (forall ((arg0@@454 T@U) (arg1@@264 T@U) (arg2@@197 T@U) (arg3@@137 T@U) (arg4@@108 T@U) ) (! (= (type (|lambda#526| arg0@@454 arg1@@264 arg2@@197 arg3@@137 arg4@@108)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#526| :pattern ( (|lambda#526| arg0@@454 arg1@@264 arg2@@197 arg3@@137 arg4@@108)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@402 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@402) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@402) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#525| Maps._default.MapDisjointUnion3$U@@3 (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Domain| |mapc#0@@3|)) (|lambda#526| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |2960| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@402) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@403 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@403) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@403) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#525| Maps._default.MapDisjointUnion3$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@46|))) (Lit (|Map#Domain| (Lit |mapb#0@@46|))) (Lit (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#526| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2961| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@403) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@455 T@U) (arg1@@265 T@U) (arg2@@198 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@455 arg1@@265 arg2@@198)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@455 arg1@@265 arg2@@198)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@88| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@88|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@88|) ($Is |m#0@@88| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@88|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |2962| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@88|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@89| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@89|) (MapType BoxType BoxType))) ($Is |m#0@@89| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (and (=> (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@89|) true) (=> true (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@89|)))) :qid |unknown.0:0| :skolemid |2963| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@89|)) )))
(assert (forall ((arg0@@456 T@U) (arg1@@266 T@U) ) (! (= (type (|lambda#529| arg0@@456 arg1@@266)) (MapType0Type BoxType boolType)) :qid |funType:lambda#529| :pattern ( (|lambda#529| arg0@@456 arg1@@266)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@90| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@90|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@90|) ($Is |m#0@@90| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@90|) (|IMap#Glue| (|lambda#529| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@90|)) (|lambda#102| (|Map#Elements| |m#0@@90|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |2964| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@90|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@91| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@91|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@91|)) ($Is |m#0@@91| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@91|)) (|IMap#Glue| (|lambda#529| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@91|)) (|lambda#102| (|Map#Elements| (Lit |m#0@@91|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2965| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@91|))) ))))
(assert (forall ((arg0@@457 T@U) (arg1@@267 T@U) (arg2@@199 T@U) (arg3@@138 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@457 arg1@@267 arg2@@199 arg3@@138)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@457 arg1@@267 arg2@@199 arg3@@138)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@92| T@U) (|key#0@@90| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@92|) (MapType BoxType BoxType))) (= (type |key#0@@90|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@92| |key#0@@90|) (and ($Is |m#0@@92| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@90| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@92| |key#0@@90|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |2966| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@92| |key#0@@90|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@93| T@U) (|key#0@@91| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@93|) (MapType BoxType BoxType))) (= (type |key#0@@91|) BoxType)) (and ($Is |m#0@@93| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@91| Maps._default.MapLookupOption$K@@0))) (and (=> (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@93| |key#0@@91|) true) (=> true (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@93| |key#0@@91|)))) :qid |unknown.0:0| :skolemid |2967| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@93| |key#0@@91|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@94| T@U) (|key#0@@92| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@94|) (MapType BoxType BoxType))) (= (type |key#0@@92|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@94| |key#0@@92|) (and ($Is |m#0@@94| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@92| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@94| |key#0@@92|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@94|) |key#0@@92|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@94|) |key#0@@92|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2968| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@94| |key#0@@92|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@95| T@U) (|key#0@@93| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@95|) (MapType BoxType BoxType))) (= (type |key#0@@93|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@95|) |key#0@@93|) (and ($Is |m#0@@95| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@93| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@95|) |key#0@@93|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@95|) |key#0@@93|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@95|)) |key#0@@93|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2969| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@95|) |key#0@@93|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@96| T@U) (|key#0@@94| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@96|) (MapType BoxType BoxType))) (= (type |key#0@@94|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@96|) (Lit |key#0@@94|)) (and ($Is |m#0@@96| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@94| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@96|) (Lit |key#0@@94|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@96|) |key#0@@94|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@96|)) (Lit |key#0@@94|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2970| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@96|) (Lit |key#0@@94|))) ))))
(assert (forall ((arg0@@458 T@U) (arg1@@268 T@U) (arg2@@200 T@U) (arg3@@139 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@458 arg1@@268 arg2@@200 arg3@@139)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@458 arg1@@268 arg2@@200 arg3@@139)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@97| T@U) (|key#0@@95| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@97|) (IMapType BoxType BoxType))) (= (type |key#0@@95|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@97| |key#0@@95|) (and ($Is |m#0@@97| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@95| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@97| |key#0@@95|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |2971| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@97| |key#0@@95|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@98| T@U) (|key#0@@96| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@98|) (IMapType BoxType BoxType))) (= (type |key#0@@96|) BoxType)) (and ($Is |m#0@@98| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@96| Maps._default.ImapLookupOption$K@@0))) (and (=> (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@98| |key#0@@96|) true) (=> true (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@98| |key#0@@96|)))) :qid |unknown.0:0| :skolemid |2972| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@98| |key#0@@96|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@99| T@U) (|key#0@@97| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@99|) (IMapType BoxType BoxType))) (= (type |key#0@@97|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@99| |key#0@@97|) (and ($Is |m#0@@99| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@97| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@99| |key#0@@97|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@99|) |key#0@@97|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@99|) |key#0@@97|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2973| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@99| |key#0@@97|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@100| T@U) (|key#0@@98| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@100|) (IMapType BoxType BoxType))) (= (type |key#0@@98|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@100|) (Lit |key#0@@98|)) (and ($Is |m#0@@100| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@98| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@100|) (Lit |key#0@@98|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@100|) |key#0@@98|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@100|)) (Lit |key#0@@98|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2974| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@100|) (Lit |key#0@@98|))) ))))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (forall ((bx@@137 T@U) ) (!  (=> (and (= (type bx@@137) BoxType) ($IsBox bx@@137 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@137)) bx@@137) ($Is ($Unbox refType bx@@137) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |2975| :pattern ( ($IsBox bx@@137 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@26 T@U) ) (!  (=> (= (type $o@@26) refType) (and (=> ($Is $o@@26 Tclass.SeqComparison.__default) (or (= $o@@26 null) (= (dtype $o@@26) Tclass.SeqComparison.__default))) (=> (or (= $o@@26 null) (= (dtype $o@@26) Tclass.SeqComparison.__default)) ($Is $o@@26 Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |2976| :pattern ( ($Is $o@@26 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@27 T@U) ($h@@54 T@U) ) (!  (=> (and (= (type $o@@27) refType) (= (type $h@@54) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@27 Tclass.SeqComparison.__default $h@@54) (or (= $o@@27 null) (U_2_bool (MapType1Select (MapType0Select $h@@54 $o@@27) alloc)))) (=> (or (= $o@@27 null) (U_2_bool (MapType1Select (MapType0Select $h@@54 $o@@27) alloc))) ($IsAlloc $o@@27 Tclass.SeqComparison.__default $h@@54)))) :qid |unknown.0:0| :skolemid |2977| :pattern ( ($IsAlloc $o@@27 Tclass.SeqComparison.__default $h@@54)) )))
(assert (forall (($ly@@404 T@U) (|a#0@@74| T@U) (|b#0@@57| T@U) ) (!  (=> (and (and (= (type $ly@@404) LayerTypeType) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@57|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte ($LS $ly@@404) |a#0@@74| |b#0@@57|) (SeqComparison.__default.lte $ly@@404 |a#0@@74| |b#0@@57|)) (=> (SeqComparison.__default.lte $ly@@404 |a#0@@74| |b#0@@57|) (SeqComparison.__default.lte ($LS $ly@@404) |a#0@@74| |b#0@@57|)))) :qid |SeqCompa.9:23| :skolemid |2978| :pattern ( (SeqComparison.__default.lte ($LS $ly@@404) |a#0@@74| |b#0@@57|)) )))
(assert (forall (($ly@@405 T@U) (|a#0@@75| T@U) (|b#0@@58| T@U) ) (!  (=> (and (and (= (type $ly@@405) LayerTypeType) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@58|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte $ly@@405 |a#0@@75| |b#0@@58|) (SeqComparison.__default.lte $LZ |a#0@@75| |b#0@@58|)) (=> (SeqComparison.__default.lte $LZ |a#0@@75| |b#0@@58|) (SeqComparison.__default.lte $ly@@405 |a#0@@75| |b#0@@58|)))) :qid |SeqCompa.9:23| :skolemid |2979| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@405) |a#0@@75| |b#0@@58|)) )))
(assert  (=> true (forall (($ly@@406 T@U) (|a#0@@76| T@U) (|b#0@@59| T@U) ) (!  (=> (and (and (and (= (type $ly@@406) LayerTypeType) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@59|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@76| |b#0@@59|) (and ($Is |a#0@@76| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@59| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.9:23| :skolemid |2980| :pattern ( (SeqComparison.__default.lte $ly@@406 |a#0@@76| |b#0@@59|)) ))))
(assert (forall (($ly@@407 T@U) (|a#0@@77| T@U) (|b#0@@60| T@U) ) (!  (=> (and (and (and (= (type $ly@@407) LayerTypeType) (= (type |a#0@@77|) (SeqType BoxType))) (= (type |b#0@@60|) (SeqType BoxType))) (and ($Is |a#0@@77| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@60| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lte#requires| $ly@@407 |a#0@@77| |b#0@@60|) true) (=> true (|SeqComparison.__default.lte#requires| $ly@@407 |a#0@@77| |b#0@@60|)))) :qid |SeqCompa.9:23| :skolemid |2981| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@407 |a#0@@77| |b#0@@60|)) )))
(assert  (=> true (forall (($ly@@408 T@U) (|a#0@@78| T@U) (|b#0@@61| T@U) ) (!  (=> (and (and (and (= (type $ly@@408) LayerTypeType) (= (type |a#0@@78|) (SeqType BoxType))) (= (type |b#0@@61|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@78| |b#0@@61|) (and ($Is |a#0@@78| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@61| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@78|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@61|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@61| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@78| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@78| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@61| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@78| (LitInt 1)) (|Seq#Drop| |b#0@@61| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@408) |a#0@@78| |b#0@@61|) (ite (= (|Seq#Length| |a#0@@78|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@61|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@78| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@61| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@61| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@78| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@408 (|Seq#Drop| |a#0@@78| (LitInt 1)) (|Seq#Drop| |b#0@@61| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| |a#0@@78|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@61|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@78| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@61| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@61| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@78| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@408 (|Seq#Drop| |a#0@@78| (LitInt 1)) (|Seq#Drop| |b#0@@61| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@408) |a#0@@78| |b#0@@61|))))) :qid |SeqCompa.9:23| :skolemid |2982| :pattern ( (SeqComparison.__default.lte ($LS $ly@@408) |a#0@@78| |b#0@@61|)) ))))
(assert  (=> true (forall (($ly@@409 T@U) (|a#0@@79| T@U) (|b#0@@62| T@U) ) (!  (=> (and (and (and (= (type $ly@@409) LayerTypeType) (= (type |a#0@@79|) (SeqType BoxType))) (= (type |b#0@@62|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@79|) |b#0@@62|) (and ($Is |a#0@@79| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@62| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@79|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@62|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@62| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@79|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@79|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@62| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@79|) (LitInt 1))) (|Seq#Drop| |b#0@@62| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@409) (Lit |a#0@@79|) |b#0@@62|) (ite (= (|Seq#Length| (Lit |a#0@@79|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@62|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@79|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@62| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@62| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@79|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@409) (Lit (|Seq#Drop| (Lit |a#0@@79|) (LitInt 1))) (|Seq#Drop| |b#0@@62| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@79|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@62|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@79|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@62| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@62| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@79|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@409) (Lit (|Seq#Drop| (Lit |a#0@@79|) (LitInt 1))) (|Seq#Drop| |b#0@@62| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@409) (Lit |a#0@@79|) |b#0@@62|))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |2983| :pattern ( (SeqComparison.__default.lte ($LS $ly@@409) (Lit |a#0@@79|) |b#0@@62|)) ))))
(assert  (=> true (forall (($ly@@410 T@U) (|a#0@@80| T@U) (|b#0@@63| T@U) ) (!  (=> (and (and (and (= (type $ly@@410) LayerTypeType) (= (type |a#0@@80|) (SeqType BoxType))) (= (type |b#0@@63|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@80|) (Lit |b#0@@63|)) (and ($Is |a#0@@80| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@63| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@80|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@63|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@63|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@80|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@80|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@63|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@80|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@63|) (LitInt 1)))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@410) (Lit |a#0@@80|) (Lit |b#0@@63|)) (ite (= (|Seq#Length| (Lit |a#0@@80|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@63|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@80|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@63|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@63|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@80|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@410) (Lit (|Seq#Drop| (Lit |a#0@@80|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@63|) (LitInt 1))))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@80|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@63|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@80|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@63|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@63|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@80|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@410) (Lit (|Seq#Drop| (Lit |a#0@@80|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@63|) (LitInt 1)))))))) (SeqComparison.__default.lte ($LS $ly@@410) (Lit |a#0@@80|) (Lit |b#0@@63|)))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |2984| :pattern ( (SeqComparison.__default.lte ($LS $ly@@410) (Lit |a#0@@80|) (Lit |b#0@@63|))) ))))
(assert  (=> true (forall ((|a#0@@81| T@U) (|b#0@@64| T@U) ) (!  (=> (and (and (= (type |a#0@@81|) (SeqType BoxType)) (= (type |b#0@@64|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@81| |b#0@@64|) (and ($Is |a#0@@81| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@64| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.25:16| :skolemid |2985| :pattern ( (SeqComparison.__default.lt |a#0@@81| |b#0@@64|)) ))))
(assert (forall ((|a#0@@82| T@U) (|b#0@@65| T@U) ) (!  (=> (and (and (= (type |a#0@@82|) (SeqType BoxType)) (= (type |b#0@@65|) (SeqType BoxType))) (and ($Is |a#0@@82| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@65| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lt#requires| |a#0@@82| |b#0@@65|) true) (=> true (|SeqComparison.__default.lt#requires| |a#0@@82| |b#0@@65|)))) :qid |SeqCompa.25:16| :skolemid |2986| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@82| |b#0@@65|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@83| T@U) (|b#0@@66| T@U) ) (!  (=> (and (and (= (type |a#0@@83|) (SeqType BoxType)) (= (type |b#0@@66|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@83| |b#0@@66|) (and ($Is |a#0@@83| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@66| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@83| |b#0@@66|) (and (=> (SeqComparison.__default.lt |a#0@@83| |b#0@@66|) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@83| |b#0@@66|) (not (|Seq#Equal| |a#0@@83| |b#0@@66|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@83| |b#0@@66|) (not (|Seq#Equal| |a#0@@83| |b#0@@66|))) (SeqComparison.__default.lt |a#0@@83| |b#0@@66|))))) :qid |SeqCompa.25:16| :skolemid |2987| :pattern ( (SeqComparison.__default.lt |a#0@@83| |b#0@@66|)) ))))
(assert  (=> true (forall ((|a#0@@84| T@U) (|b#0@@67| T@U) ) (!  (=> (and (and (= (type |a#0@@84|) (SeqType BoxType)) (= (type |b#0@@67|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@84|) (Lit |b#0@@67|)) (and ($Is |a#0@@84| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@67| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@84|) (Lit |b#0@@67|)) (and (=> (SeqComparison.__default.lt (Lit |a#0@@84|) (Lit |b#0@@67|)) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@84|) (Lit |b#0@@67|)) (not (|Seq#Equal| |a#0@@84| |b#0@@67|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@84|) (Lit |b#0@@67|)) (not (|Seq#Equal| |a#0@@84| |b#0@@67|))) (SeqComparison.__default.lt (Lit |a#0@@84|) (Lit |b#0@@67|)))))) :qid |SeqCompa.25:16| :weight 3 :skolemid |2988| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@84|) (Lit |b#0@@67|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (forall ((bx@@138 T@U) ) (!  (=> (and (= (type bx@@138) BoxType) ($IsBox bx@@138 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@138)) bx@@138) ($Is ($Unbox refType bx@@138) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |2989| :pattern ( ($IsBox bx@@138 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@28 T@U) ) (!  (=> (= (type $o@@28) refType) (and (=> ($Is $o@@28 Tclass.NativeArrays.__default) (or (= $o@@28 null) (= (dtype $o@@28) Tclass.NativeArrays.__default))) (=> (or (= $o@@28 null) (= (dtype $o@@28) Tclass.NativeArrays.__default)) ($Is $o@@28 Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |2990| :pattern ( ($Is $o@@28 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@29 T@U) ($h@@55 T@U) ) (!  (=> (and (= (type $o@@29) refType) (= (type $h@@55) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@29 Tclass.NativeArrays.__default $h@@55) (or (= $o@@29 null) (U_2_bool (MapType1Select (MapType0Select $h@@55 $o@@29) alloc)))) (=> (or (= $o@@29 null) (U_2_bool (MapType1Select (MapType0Select $h@@55 $o@@29) alloc))) ($IsAlloc $o@@29 Tclass.NativeArrays.__default $h@@55)))) :qid |unknown.0:0| :skolemid |2991| :pattern ( ($IsAlloc $o@@29 Tclass.NativeArrays.__default $h@@55)) )))
(assert (= (type Tclass.Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Byte__Order.__default) Tagclass.Byte__Order.__default))
(assert (forall ((bx@@139 T@U) ) (!  (=> (and (= (type bx@@139) BoxType) ($IsBox bx@@139 Tclass.Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@139)) bx@@139) ($Is ($Unbox refType bx@@139) Tclass.Byte__Order.__default))) :qid |unknown.0:0| :skolemid |2992| :pattern ( ($IsBox bx@@139 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@30 T@U) ) (!  (=> (= (type $o@@30) refType) (and (=> ($Is $o@@30 Tclass.Byte__Order.__default) (or (= $o@@30 null) (= (dtype $o@@30) Tclass.Byte__Order.__default))) (=> (or (= $o@@30 null) (= (dtype $o@@30) Tclass.Byte__Order.__default)) ($Is $o@@30 Tclass.Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |2993| :pattern ( ($Is $o@@30 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@31 T@U) ($h@@56 T@U) ) (!  (=> (and (= (type $o@@31) refType) (= (type $h@@56) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@31 Tclass.Byte__Order.__default $h@@56) (or (= $o@@31 null) (U_2_bool (MapType1Select (MapType0Select $h@@56 $o@@31) alloc)))) (=> (or (= $o@@31 null) (U_2_bool (MapType1Select (MapType0Select $h@@56 $o@@31) alloc))) ($IsAlloc $o@@31 Tclass.Byte__Order.__default $h@@56)))) :qid |unknown.0:0| :skolemid |2994| :pattern ( ($IsAlloc $o@@31 Tclass.Byte__Order.__default $h@@56)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Byte__Order.__default.SomeElement) (< Byte__Order.__default.SomeElement 256)))))
(assert  (=> |Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true |Byte__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert (forall (($ly@@411 T@U) (|a#0@@85| Int) (|b#0@@68| Int) ) (!  (=> (= (type $ly@@411) LayerTypeType) (and (=> (Byte__Order.__default.lte ($LS $ly@@411) |a#0@@85| |b#0@@68|) (Byte__Order.__default.lte $ly@@411 |a#0@@85| |b#0@@68|)) (=> (Byte__Order.__default.lte $ly@@411 |a#0@@85| |b#0@@68|) (Byte__Order.__default.lte ($LS $ly@@411) |a#0@@85| |b#0@@68|)))) :qid |totalord.926:30| :skolemid |2995| :pattern ( (Byte__Order.__default.lte ($LS $ly@@411) |a#0@@85| |b#0@@68|)) )))
(assert (forall (($ly@@412 T@U) (|a#0@@86| Int) (|b#0@@69| Int) ) (!  (=> (= (type $ly@@412) LayerTypeType) (and (=> (Byte__Order.__default.lte $ly@@412 |a#0@@86| |b#0@@69|) (Byte__Order.__default.lte $LZ |a#0@@86| |b#0@@69|)) (=> (Byte__Order.__default.lte $LZ |a#0@@86| |b#0@@69|) (Byte__Order.__default.lte $ly@@412 |a#0@@86| |b#0@@69|)))) :qid |totalord.926:30| :skolemid |2996| :pattern ( (Byte__Order.__default.lte (AsFuelBottom $ly@@412) |a#0@@86| |b#0@@69|)) )))
(assert (= (type StartFuel_Byte_Order._default.ltedef) LayerTypeType))
(assert  (=> true (forall (($ly@@413 T@U) (|a#0@@87| Int) (|b#0@@70| Int) ) (!  (=> (and (= (type $ly@@413) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@87| |b#0@@70|) (and (and (<= (LitInt 0) |a#0@@87|) (< |a#0@@87| 256)) (and (<= (LitInt 0) |b#0@@70|) (< |b#0@@70| 256))))) (and (and (and (and (and (and (and (=> (Byte__Order.__default.lte $ly@@413 |a#0@@87| |b#0@@70|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@70|)) (=> (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@70|) (Byte__Order.__default.lte $ly@@413 |a#0@@87| |b#0@@70|))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@70|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@70| |a#0@@87|))) (forall ((|a#1@@0| Int) (|b#1@@1| Int) (|c#0@@10| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#1@@0|) (< |a#1@@0| 256)) (and (<= (LitInt 0) |b#1@@1|) (< |b#1@@1| 256))) (and (<= (LitInt 0) |c#0@@10|) (< |c#0@@10| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@1| |c#0@@10|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|))) :qid |totalord.20:18| :skolemid |2997| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@1| |c#0@@10|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@1| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@1|)) ))) (and (=> (Byte__Order.__default.lte $ly@@413 |a#0@@87| |b#0@@70|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@70|)) (=> (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@70|) (Byte__Order.__default.lte $ly@@413 |a#0@@87| |b#0@@70|)))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@70|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@70| |a#0@@87|))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@70|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@70| |a#0@@87|)) (= |a#0@@87| |b#0@@70|))) (forall ((|a#2| Int) (|b#2| Int) (|c#1| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#2|) (< |a#2| 256)) (and (<= (LitInt 0) |b#2|) (< |b#2| 256))) (and (<= (LitInt 0) |c#1|) (< |c#1| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|))) :qid |totalord.188:18| :skolemid |2998| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|)) )))) :qid |totalord.926:30| :skolemid |2999| :pattern ( (Byte__Order.__default.lte $ly@@413 |a#0@@87| |b#0@@70|)) ))))
(assert (forall (($ly@@414 T@U) (|a#0@@88| Int) (|b#0@@71| Int) ) (!  (=> (= (type $ly@@414) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@88|) (< |a#0@@88| 256)) (and (<= (LitInt 0) |b#0@@71|) (< |b#0@@71| 256))) (and (=> (|Byte__Order.__default.lte#requires| $ly@@414 |a#0@@88| |b#0@@71|) true) (=> true (|Byte__Order.__default.lte#requires| $ly@@414 |a#0@@88| |b#0@@71|))))) :qid |totalord.926:30| :skolemid |3000| :pattern ( (|Byte__Order.__default.lte#requires| $ly@@414 |a#0@@88| |b#0@@71|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.ltedef0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.ltedef) LayerTypeType)))
(assert  (=> true (forall (($ly@@415 T@U) (|a#0@@89| Int) (|b#0@@72| Int) ) (!  (=> (and (= (type $ly@@415) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@89| |b#0@@72|) (and (and (<= (LitInt 0) |a#0@@89|) (< |a#0@@89| 256)) (and (<= (LitInt 0) |b#0@@72|) (< |b#0@@72| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef0)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef0) MoreFuel_Byte_Order._default.ltedef0)) (and (=> (Byte__Order.__default.lte ($LS $ly@@415) |a#0@@89| |b#0@@72|) (<= |a#0@@89| |b#0@@72|)) (=> (<= |a#0@@89| |b#0@@72|) (Byte__Order.__default.lte ($LS $ly@@415) |a#0@@89| |b#0@@72|))))) :qid |totalord.926:30| :skolemid |3001| :pattern ( (Byte__Order.__default.lte ($LS $ly@@415) |a#0@@89| |b#0@@72|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.ltedef1) LayerTypeType))
(assert  (=> true (forall (($ly@@416 T@U) (|a#0@@90| Int) (|b#0@@73| Int) ) (!  (=> (and (= (type $ly@@416) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@90|) (LitInt |b#0@@73|)) (and (and (<= (LitInt 0) |a#0@@90|) (< |a#0@@90| 256)) (and (<= (LitInt 0) |b#0@@73|) (< |b#0@@73| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef1)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef1) MoreFuel_Byte_Order._default.ltedef1)) (and (=> (Byte__Order.__default.lte ($LS $ly@@416) (LitInt |a#0@@90|) (LitInt |b#0@@73|)) (<= (LitInt |a#0@@90|) (LitInt |b#0@@73|))) (=> (<= (LitInt |a#0@@90|) (LitInt |b#0@@73|)) (Byte__Order.__default.lte ($LS $ly@@416) (LitInt |a#0@@90|) (LitInt |b#0@@73|)))))) :qid |totalord.926:30| :weight 3 :skolemid |3002| :pattern ( (Byte__Order.__default.lte ($LS $ly@@416) (LitInt |a#0@@90|) (LitInt |b#0@@73|))) ))))
(assert (forall (($ly@@417 T@U) (|a#0@@91| Int) (|b#0@@74| Int) ) (!  (=> (= (type $ly@@417) LayerTypeType) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@417) |a#0@@91| |b#0@@74|) (Byte__Order.__default.ltedef $ly@@417 |a#0@@91| |b#0@@74|)) (=> (Byte__Order.__default.ltedef $ly@@417 |a#0@@91| |b#0@@74|) (Byte__Order.__default.ltedef ($LS $ly@@417) |a#0@@91| |b#0@@74|)))) :qid |totalord.931:30| :skolemid |3003| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@417) |a#0@@91| |b#0@@74|)) )))
(assert (forall (($ly@@418 T@U) (|a#0@@92| Int) (|b#0@@75| Int) ) (!  (=> (= (type $ly@@418) LayerTypeType) (and (=> (Byte__Order.__default.ltedef $ly@@418 |a#0@@92| |b#0@@75|) (Byte__Order.__default.ltedef $LZ |a#0@@92| |b#0@@75|)) (=> (Byte__Order.__default.ltedef $LZ |a#0@@92| |b#0@@75|) (Byte__Order.__default.ltedef $ly@@418 |a#0@@92| |b#0@@75|)))) :qid |totalord.931:30| :skolemid |3004| :pattern ( (Byte__Order.__default.ltedef (AsFuelBottom $ly@@418) |a#0@@92| |b#0@@75|)) )))
(assert  (=> true (forall (($ly@@419 T@U) (|a#0@@93| Int) (|b#0@@76| Int) ) (!  (=> (and (= (type $ly@@419) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@93| |b#0@@76|) (and (and (<= (LitInt 0) |a#0@@93|) (< |a#0@@93| 256)) (and (<= (LitInt 0) |b#0@@76|) (< |b#0@@76| 256))))) true) :qid |totalord.931:30| :skolemid |3005| :pattern ( (Byte__Order.__default.ltedef $ly@@419 |a#0@@93| |b#0@@76|)) ))))
(assert (forall (($ly@@420 T@U) (|a#0@@94| Int) (|b#0@@77| Int) ) (!  (=> (= (type $ly@@420) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@94|) (< |a#0@@94| 256)) (and (<= (LitInt 0) |b#0@@77|) (< |b#0@@77| 256))) (and (=> (|Byte__Order.__default.ltedef#requires| $ly@@420 |a#0@@94| |b#0@@77|) true) (=> true (|Byte__Order.__default.ltedef#requires| $ly@@420 |a#0@@94| |b#0@@77|))))) :qid |totalord.931:30| :skolemid |3006| :pattern ( (|Byte__Order.__default.ltedef#requires| $ly@@420 |a#0@@94| |b#0@@77|)) )))
(assert  (=> true (forall (($ly@@421 T@U) (|a#0@@95| Int) (|b#0@@78| Int) ) (!  (=> (and (= (type $ly@@421) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@95| |b#0@@78|) (and (and (<= (LitInt 0) |a#0@@95|) (< |a#0@@95| 256)) (and (<= (LitInt 0) |b#0@@78|) (< |b#0@@78| 256))))) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@421) |a#0@@95| |b#0@@78|) (<= |a#0@@95| |b#0@@78|)) (=> (<= |a#0@@95| |b#0@@78|) (Byte__Order.__default.ltedef ($LS $ly@@421) |a#0@@95| |b#0@@78|)))) :qid |totalord.931:30| :skolemid |3007| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@421) |a#0@@95| |b#0@@78|)) ))))
(assert  (=> true (forall (($ly@@422 T@U) (|a#0@@96| Int) (|b#0@@79| Int) ) (!  (=> (and (= (type $ly@@422) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| (LitInt |a#0@@96|) (LitInt |b#0@@79|)) (and (and (<= (LitInt 0) |a#0@@96|) (< |a#0@@96| 256)) (and (<= (LitInt 0) |b#0@@79|) (< |b#0@@79| 256))))) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@422) (LitInt |a#0@@96|) (LitInt |b#0@@79|)) (<= (LitInt |a#0@@96|) (LitInt |b#0@@79|))) (=> (<= (LitInt |a#0@@96|) (LitInt |b#0@@79|)) (Byte__Order.__default.ltedef ($LS $ly@@422) (LitInt |a#0@@96|) (LitInt |b#0@@79|))))) :qid |totalord.931:30| :weight 3 :skolemid |3008| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@422) (LitInt |a#0@@96|) (LitInt |b#0@@79|))) ))))
(assert (forall (($ly@@423 T@U) (|run#0@@68| T@U) (|needle#0@@13| Int) ) (!  (=> (and (= (type $ly@@423) LayerTypeType) (= (type |run#0@@68|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte ($LS $ly@@423) |run#0@@68| |needle#0@@13|) (Byte__Order.__default.LargestLte $ly@@423 |run#0@@68| |needle#0@@13|))) :qid |totalord.253:12| :skolemid |3009| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@423) |run#0@@68| |needle#0@@13|)) )))
(assert (forall (($ly@@424 T@U) (|run#0@@69| T@U) (|needle#0@@14| Int) ) (!  (=> (and (= (type $ly@@424) LayerTypeType) (= (type |run#0@@69|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte $ly@@424 |run#0@@69| |needle#0@@14|) (Byte__Order.__default.LargestLte $LZ |run#0@@69| |needle#0@@14|))) :qid |totalord.253:12| :skolemid |3010| :pattern ( (Byte__Order.__default.LargestLte (AsFuelBottom $ly@@424) |run#0@@69| |needle#0@@14|)) )))
(assert  (and (= (type StartFuel_Byte_Order._default.IsSorted) LayerTypeType) (= (type StartFuel_Byte_Order._default.lte) LayerTypeType)))
(assert  (=> true (forall (($ly@@425 T@U) (|run#0@@70| T@U) (|needle#0@@15| Int) ) (!  (=> (and (and (= (type $ly@@425) LayerTypeType) (= (type |run#0@@70|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@70| |needle#0@@15|) (and (and ($Is |run#0@@70| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@15|) (< |needle#0@@15| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@70|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLte $ly@@425 |run#0@@70| |needle#0@@15|)) (< (Byte__Order.__default.LargestLte $ly@@425 |run#0@@70| |needle#0@@15|) (|Seq#Length| |run#0@@70|))) (forall ((|i#0@@106| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@106|) (<= |i#0@@106| (Byte__Order.__default.LargestLte $ly@@425 |run#0@@70| |needle#0@@15|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| |i#0@@106|))) |needle#0@@15|))) :qid |totalord.256:20| :skolemid |3011| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@70| |i#0@@106|))) ))) (forall ((|i#1@@31| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLte $ly@@425 |run#0@@70| |needle#0@@15|) |i#1@@31|) (< |i#1@@31| (|Seq#Length| |run#0@@70|))) (Byte__Order.__default.lt |needle#0@@15| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| |i#1@@31|)))))) :qid |totalord.257:20| :skolemid |3012| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@70| |i#1@@31|))) ))) (=> (|Seq#Contains| |run#0@@70| ($Box (int_2_U |needle#0@@15|))) (and (<= (LitInt 0) (Byte__Order.__default.LargestLte $ly@@425 |run#0@@70| |needle#0@@15|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| (Byte__Order.__default.LargestLte $ly@@425 |run#0@@70| |needle#0@@15|)))) |needle#0@@15|))))) :qid |totalord.253:12| :skolemid |3013| :pattern ( (Byte__Order.__default.LargestLte $ly@@425 |run#0@@70| |needle#0@@15|)) ))))
(assert (forall (($ly@@426 T@U) (|run#0@@71| T@U) (|needle#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@426) LayerTypeType) (= (type |run#0@@71|) (SeqType BoxType))) (and ($Is |run#0@@71| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@16|) (< |needle#0@@16| 256)))) (and (=> (|Byte__Order.__default.LargestLte#requires| $ly@@426 |run#0@@71| |needle#0@@16|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@71|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@71|) (|Byte__Order.__default.LargestLte#requires| $ly@@426 |run#0@@71| |needle#0@@16|)))) :qid |totalord.253:12| :skolemid |3014| :pattern ( (|Byte__Order.__default.LargestLte#requires| $ly@@426 |run#0@@71| |needle#0@@16|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@427 T@U) (|run#0@@72| T@U) (|needle#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@427) LayerTypeType) (= (type |run#0@@72|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@72| |needle#0@@17|) (and (and ($Is |run#0@@72| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@17|) (< |needle#0@@17| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@72|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@72|) (LitInt 0))) (|Byte__Order.__default.lt#canCall| |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@72|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@72| (LitInt 1)) |needle#0@@17|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted0) MoreFuel_Byte_Order._default.IsSorted0)) (= (Byte__Order.__default.LargestLte ($LS $ly@@427) |run#0@@72| |needle#0@@17|) (ite  (or (= (|Seq#Length| |run#0@@72|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte $ly@@427 (|Seq#Drop| |run#0@@72| (LitInt 1)) |needle#0@@17|))))))) :qid |totalord.253:12| :skolemid |3015| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@427) |run#0@@72| |needle#0@@17|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@428 T@U) (|run#0@@73| T@U) (|needle#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@428) LayerTypeType) (= (type |run#0@@73|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@73|) (LitInt |needle#0@@18|)) (and (and ($Is |run#0@@73| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@18|) (< |needle#0@@18| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@73|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0))) (|Byte__Order.__default.lt#canCall| (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@73|) (LitInt 1))) (LitInt |needle#0@@18|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted1) MoreFuel_Byte_Order._default.IsSorted1)) (= (Byte__Order.__default.LargestLte ($LS $ly@@428) (Lit |run#0@@73|) (LitInt |needle#0@@18|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte ($LS $ly@@428) (Lit (|Seq#Drop| (Lit |run#0@@73|) (LitInt 1))) (LitInt |needle#0@@18|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |3016| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@428) (Lit |run#0@@73|) (LitInt |needle#0@@18|))) ))))
(assert (forall (($ly@@429 T@U) (|run#0@@74| T@U) (|needle#0@@19| Int) ) (!  (=> (and (= (type $ly@@429) LayerTypeType) (= (type |run#0@@74|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt ($LS $ly@@429) |run#0@@74| |needle#0@@19|) (Byte__Order.__default.LargestLt $ly@@429 |run#0@@74| |needle#0@@19|))) :qid |totalord.356:12| :skolemid |3017| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@429) |run#0@@74| |needle#0@@19|)) )))
(assert (forall (($ly@@430 T@U) (|run#0@@75| T@U) (|needle#0@@20| Int) ) (!  (=> (and (= (type $ly@@430) LayerTypeType) (= (type |run#0@@75|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt $ly@@430 |run#0@@75| |needle#0@@20|) (Byte__Order.__default.LargestLt $LZ |run#0@@75| |needle#0@@20|))) :qid |totalord.356:12| :skolemid |3018| :pattern ( (Byte__Order.__default.LargestLt (AsFuelBottom $ly@@430) |run#0@@75| |needle#0@@20|)) )))
(assert  (=> true (forall (($ly@@431 T@U) (|run#0@@76| T@U) (|needle#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@431) LayerTypeType) (= (type |run#0@@76|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@76| |needle#0@@21|) (and (and ($Is |run#0@@76| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@21|) (< |needle#0@@21| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@76|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLt $ly@@431 |run#0@@76| |needle#0@@21|)) (< (Byte__Order.__default.LargestLt $ly@@431 |run#0@@76| |needle#0@@21|) (|Seq#Length| |run#0@@76|))) (forall ((|i#0@@107| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@107|) (<= |i#0@@107| (Byte__Order.__default.LargestLt $ly@@431 |run#0@@76| |needle#0@@21|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| |i#0@@107|))) |needle#0@@21|))) :qid |totalord.359:20| :skolemid |3019| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@76| |i#0@@107|))) ))) (forall ((|i#1@@32| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLt $ly@@431 |run#0@@76| |needle#0@@21|) |i#1@@32|) (< |i#1@@32| (|Seq#Length| |run#0@@76|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@21| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| |i#1@@32|)))))) :qid |totalord.360:20| :skolemid |3020| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@76| |i#1@@32|))) ))) (=> (|Seq#Contains| |run#0@@76| ($Box (int_2_U |needle#0@@21|))) (and (< (+ (Byte__Order.__default.LargestLt $ly@@431 |run#0@@76| |needle#0@@21|) 1) (|Seq#Length| |run#0@@76|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| (+ (Byte__Order.__default.LargestLt $ly@@431 |run#0@@76| |needle#0@@21|) 1)))) |needle#0@@21|))))) :qid |totalord.356:12| :skolemid |3021| :pattern ( (Byte__Order.__default.LargestLt $ly@@431 |run#0@@76| |needle#0@@21|)) ))))
(assert (forall (($ly@@432 T@U) (|run#0@@77| T@U) (|needle#0@@22| Int) ) (!  (=> (and (and (= (type $ly@@432) LayerTypeType) (= (type |run#0@@77|) (SeqType BoxType))) (and ($Is |run#0@@77| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@22|) (< |needle#0@@22| 256)))) (and (=> (|Byte__Order.__default.LargestLt#requires| $ly@@432 |run#0@@77| |needle#0@@22|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@77|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@77|) (|Byte__Order.__default.LargestLt#requires| $ly@@432 |run#0@@77| |needle#0@@22|)))) :qid |totalord.356:12| :skolemid |3022| :pattern ( (|Byte__Order.__default.LargestLt#requires| $ly@@432 |run#0@@77| |needle#0@@22|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@433 T@U) (|run#0@@78| T@U) (|needle#0@@23| Int) ) (!  (=> (and (and (= (type $ly@@433) LayerTypeType) (= (type |run#0@@78|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@78| |needle#0@@23|) (and (and ($Is |run#0@@78| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@23|) (< |needle#0@@23| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@78|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@78|) (LitInt 0))) (|Byte__Order.__default.lte#canCall| |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@78|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@78| (LitInt 1)) |needle#0@@23|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted2) MoreFuel_Byte_Order._default.IsSorted2)) (= (Byte__Order.__default.LargestLt ($LS $ly@@433) |run#0@@78| |needle#0@@23|) (ite  (or (= (|Seq#Length| |run#0@@78|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt $ly@@433 (|Seq#Drop| |run#0@@78| (LitInt 1)) |needle#0@@23|))))))) :qid |totalord.356:12| :skolemid |3023| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@433) |run#0@@78| |needle#0@@23|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@434 T@U) (|run#0@@79| T@U) (|needle#0@@24| Int) ) (!  (=> (and (and (= (type $ly@@434) LayerTypeType) (= (type |run#0@@79|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@79|) (LitInt |needle#0@@24|)) (and (and ($Is |run#0@@79| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@24|) (< |needle#0@@24| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@79|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0))) (|Byte__Order.__default.lte#canCall| (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1))) (LitInt |needle#0@@24|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted3) MoreFuel_Byte_Order._default.IsSorted3)) (= (Byte__Order.__default.LargestLt ($LS $ly@@434) (Lit |run#0@@79|) (LitInt |needle#0@@24|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt ($LS $ly@@434) (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1))) (LitInt |needle#0@@24|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |3024| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@434) (Lit |run#0@@79|) (LitInt |needle#0@@24|))) ))))
(assert (forall (($ly@@435 T@U) (|run#0@@80| T@U) (|needle#0@@25| Int) ) (!  (=> (and (= (type $ly@@435) LayerTypeType) (= (type |run#0@@80|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@435) |run#0@@80| |needle#0@@25|) (Byte__Order.__default.IndexOfFirstGte $ly@@435 |run#0@@80| |needle#0@@25|))) :qid |totalord.388:12| :skolemid |3025| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@435) |run#0@@80| |needle#0@@25|)) )))
(assert (forall (($ly@@436 T@U) (|run#0@@81| T@U) (|needle#0@@26| Int) ) (!  (=> (and (= (type $ly@@436) LayerTypeType) (= (type |run#0@@81|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte $ly@@436 |run#0@@81| |needle#0@@26|) (Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@81| |needle#0@@26|))) :qid |totalord.388:12| :skolemid |3026| :pattern ( (Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@436) |run#0@@81| |needle#0@@26|)) )))
(assert  (=> true (forall (($ly@@437 T@U) (|run#0@@82| T@U) (|needle#0@@27| Int) ) (!  (=> (and (and (= (type $ly@@437) LayerTypeType) (= (type |run#0@@82|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@82| |needle#0@@27|) (and (and ($Is |run#0@@82| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@27|) (< |needle#0@@27| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@82|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@437 |run#0@@82| |needle#0@@27|) (|Seq#Length| |run#0@@82|)) (forall ((|i#0@@108| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@108|) (< |i#0@@108| (Byte__Order.__default.IndexOfFirstGte $ly@@437 |run#0@@82| |needle#0@@27|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@108|))) |needle#0@@27|)) :qid |totalord.391:20| :skolemid |3027| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@108|))) ))) (forall ((|i#1@@33| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@437 |run#0@@82| |needle#0@@27|) |i#1@@33|) (< |i#1@@33| (|Seq#Length| |run#0@@82|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@27| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@33|))))) :qid |totalord.392:20| :skolemid |3028| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@33|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGte $ly@@437 |run#0@@82| |needle#0@@27|)))) :qid |totalord.388:12| :skolemid |3029| :pattern ( (Byte__Order.__default.IndexOfFirstGte $ly@@437 |run#0@@82| |needle#0@@27|)) ))))
(assert (forall (($ly@@438 T@U) (|run#0@@83| T@U) (|needle#0@@28| Int) ) (!  (=> (and (and (= (type $ly@@438) LayerTypeType) (= (type |run#0@@83|) (SeqType BoxType))) (and ($Is |run#0@@83| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@28|) (< |needle#0@@28| 256)))) (and (=> (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@438 |run#0@@83| |needle#0@@28|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|) (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@438 |run#0@@83| |needle#0@@28|)))) :qid |totalord.388:12| :skolemid |3030| :pattern ( (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@438 |run#0@@83| |needle#0@@28|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@439 T@U) (|run#0@@84| T@U) (|needle#0@@29| Int) ) (!  (=> (and (and (= (type $ly@@439) LayerTypeType) (= (type |run#0@@84|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@84| |needle#0@@29|) (and (and ($Is |run#0@@84| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@29|) (< |needle#0@@29| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@84|)))) (and (=> (not (= (|Seq#Length| |run#0@@84|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@84|) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|)) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@84|) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@84|) |needle#0@@29|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted4) MoreFuel_Byte_Order._default.IsSorted4)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@439) |run#0@@84| |needle#0@@29|) (ite (= (|Seq#Length| |run#0@@84|) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|) (|Seq#Length| |run#0@@84|) (Byte__Order.__default.IndexOfFirstGte $ly@@439 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@84|) |needle#0@@29|))))))) :qid |totalord.388:12| :skolemid |3031| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@439) |run#0@@84| |needle#0@@29|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@440 T@U) (|run#0@@85| T@U) (|needle#0@@30| Int) ) (!  (=> (and (and (= (type $ly@@440) LayerTypeType) (= (type |run#0@@85|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@85|) (LitInt |needle#0@@30|)) (and (and ($Is |run#0@@85| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@30|) (< |needle#0@@30| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@85|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@85|)) (|Byte__Order.__default.lt#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|))) (=> (not (U_2_bool (Lit (bool_2_U (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@85|)) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@85|))) (LitInt |needle#0@@30|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted5) MoreFuel_Byte_Order._default.IsSorted5)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@440) (Lit |run#0@@85|) (LitInt |needle#0@@30|)) (ite (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|)) (|Seq#Length| (Lit |run#0@@85|)) (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@440) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@85|))) (LitInt |needle#0@@30|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |3032| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@440) (Lit |run#0@@85|) (LitInt |needle#0@@30|))) ))))
(assert (forall (($ly@@441 T@U) (|s#0@@40| T@U) (|key#0@@99| Int) (|lo#0| Int) (|hi#0| Int) ) (!  (=> (and (= (type $ly@@441) LayerTypeType) (= (type |s#0@@40|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@441) |s#0@@40| |key#0@@99| |lo#0| |hi#0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@441 |s#0@@40| |key#0@@99| |lo#0| |hi#0|))) :qid |totalord.421:12| :skolemid |3033| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@441) |s#0@@40| |key#0@@99| |lo#0| |hi#0|)) )))
(assert (forall (($ly@@442 T@U) (|s#0@@41| T@U) (|key#0@@100| Int) (|lo#0@@0| Int) (|hi#0@@0| Int) ) (!  (=> (and (= (type $ly@@442) LayerTypeType) (= (type |s#0@@41|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@442 |s#0@@41| |key#0@@100| |lo#0@@0| |hi#0@@0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@41| |key#0@@100| |lo#0@@0| |hi#0@@0|))) :qid |totalord.421:12| :skolemid |3034| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@442) |s#0@@41| |key#0@@100| |lo#0@@0| |hi#0@@0|)) )))
(assert  (=> true (forall (($ly@@443 T@U) (|s#0@@42| T@U) (|key#0@@101| Int) (|lo#0@@1| Int) (|hi#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@443) LayerTypeType) (= (type |s#0@@42|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@42| |key#0@@101| |lo#0@@1| |hi#0@@1|) (and (and ($Is |s#0@@42| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@101|) (< |key#0@@101| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@1|) (< |lo#0@@1| |hi#0@@1|)) (<= |hi#0@@1| (+ (|Seq#Length| |s#0@@42|) 1))) (=> (> |lo#0@@1| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |lo#0@@1| 1)))) |key#0@@101|))) (=> (<= |hi#0@@1| (|Seq#Length| |s#0@@42|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@101| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |hi#0@@1| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@443 |s#0@@42| |key#0@@101| |lo#0@@1| |hi#0@@1|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@443 |s#0@@42| |key#0@@101| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@42|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@443 |s#0@@42| |key#0@@101| |lo#0@@1| |hi#0@@1|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@443 |s#0@@42| |key#0@@101| |lo#0@@1| |hi#0@@1|) 1)))) |key#0@@101|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@443 |s#0@@42| |key#0@@101| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@42|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@101| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@443 |s#0@@42| |key#0@@101| |lo#0@@1| |hi#0@@1|)))))))) :qid |totalord.421:12| :skolemid |3035| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@443 |s#0@@42| |key#0@@101| |lo#0@@1| |hi#0@@1|)) ))))
(assert (forall (($ly@@444 T@U) (|s#0@@43| T@U) (|key#0@@102| Int) (|lo#0@@2| Int) (|hi#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@444) LayerTypeType) (= (type |s#0@@43|) (SeqType BoxType))) (and ($Is |s#0@@43| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@102|) (< |key#0@@102| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@444 |s#0@@43| |key#0@@102| |lo#0@@2| |hi#0@@2|) (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@43|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |lo#0@@2| 1)))) |key#0@@102|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@43|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@102| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |hi#0@@2| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@43|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |lo#0@@2| 1)))) |key#0@@102|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@43|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@102| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |hi#0@@2| 1))))))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@444 |s#0@@43| |key#0@@102| |lo#0@@2| |hi#0@@2|)))) :qid |totalord.421:12| :skolemid |3036| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@444 |s#0@@43| |key#0@@102| |lo#0@@2| |hi#0@@2|)) )))
(assert  (=> true (forall (($ly@@445 T@U) (|s#0@@44| T@U) (|key#0@@103| Int) (|lo#0@@3| Int) (|hi#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@445) LayerTypeType) (= (type |s#0@@44|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@44| |key#0@@103| |lo#0@@3| |hi#0@@3|) (and (and ($Is |s#0@@44| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@103|) (< |key#0@@103| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@3|) (< |lo#0@@3| |hi#0@@3|)) (<= |hi#0@@3| (+ (|Seq#Length| |s#0@@44|) 1))) (=> (> |lo#0@@3| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@44| (- |lo#0@@3| 1)))) |key#0@@103|))) (=> (<= |hi#0@@3| (|Seq#Length| |s#0@@44|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@103| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@44| (- |hi#0@@3| 1)))))))))) (and (=> (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0@@1| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@44| (- |mid#0@@1| 1)))) |key#0@@103|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@44| (- |mid#0@@1| 1)))) |key#0@@103|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@44| |key#0@@103| |mid#0@@1| |hi#0@@3|))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@44| (- |mid#0@@1| 1)))) |key#0@@103|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@44| |key#0@@103| |lo#0@@3| |mid#0@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@445) |s#0@@44| |key#0@@103| |lo#0@@3| |hi#0@@3|) (ite (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0@@2| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@44| (- |mid#0@@2| 1)))) |key#0@@103|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@445 |s#0@@44| |key#0@@103| |mid#0@@2| |hi#0@@3|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@445 |s#0@@44| |key#0@@103| |lo#0@@3| |mid#0@@2|))) |lo#0@@3|)))) :qid |totalord.421:12| :skolemid |3037| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@445) |s#0@@44| |key#0@@103| |lo#0@@3| |hi#0@@3|)) ))))
(assert  (=> true (forall (($ly@@446 T@U) (|s#0@@45| T@U) (|key#0@@104| Int) (|lo#0@@4| Int) (|hi#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@446) LayerTypeType) (= (type |s#0@@45|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@45| |key#0@@104| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (and (and ($Is |s#0@@45| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@104|) (< |key#0@@104| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@4|)) (< |lo#0@@4| |hi#0@@4|)) (<= (LitInt |hi#0@@4|) (+ (|Seq#Length| |s#0@@45|) 1))) (=> (> |lo#0@@4| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@45| (LitInt (- |lo#0@@4| 1))))) |key#0@@104|))) (=> (<= (LitInt |hi#0@@4|) (|Seq#Length| |s#0@@45|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@104| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@45| (LitInt (- |hi#0@@4| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@4| 1) |hi#0@@4|)))) (let ((|mid#1@@1| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@45| (- |mid#1@@1| 1)))) |key#0@@104|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@45| (- |mid#1@@1| 1)))) |key#0@@104|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@45| |key#0@@104| |mid#1@@1| (LitInt |hi#0@@4|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@45| (- |mid#1@@1| 1)))) |key#0@@104|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@45| |key#0@@104| (LitInt |lo#0@@4|) |mid#1@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@446) |s#0@@45| |key#0@@104| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (ite (< (+ |lo#0@@4| 1) |hi#0@@4|) (let ((|mid#1@@2| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@45| (LitInt (- |mid#1@@2| 1))))) |key#0@@104|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@446) |s#0@@45| |key#0@@104| |mid#1@@2| (LitInt |hi#0@@4|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@446) |s#0@@45| |key#0@@104| (LitInt |lo#0@@4|) |mid#1@@2|))) |lo#0@@4|)))) :qid |totalord.421:12| :weight 3 :skolemid |3038| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@446) |s#0@@45| |key#0@@104| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|))) ))))
(assert  (=> true (forall (($ly@@447 T@U) (|s#0@@46| T@U) (|key#0@@105| Int) (|lo#0@@5| Int) (|hi#0@@5| Int) ) (!  (=> (and (and (= (type $ly@@447) LayerTypeType) (= (type |s#0@@46|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@46|) (LitInt |key#0@@105|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (and (and ($Is |s#0@@46| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@105|) (< |key#0@@105| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@5|)) (< |lo#0@@5| |hi#0@@5|)) (<= (LitInt |hi#0@@5|) (+ (|Seq#Length| (Lit |s#0@@46|)) 1))) (=> (> |lo#0@@5| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@46|) (LitInt (- |lo#0@@5| 1))))) (LitInt |key#0@@105|)))) (=> (<= (LitInt |hi#0@@5|) (|Seq#Length| (Lit |s#0@@46|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |key#0@@105|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@46|) (LitInt (- |hi#0@@5| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@5| 1) |hi#0@@5|)))) (let ((|mid#2| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@46|) (- |mid#2| 1)))) (LitInt |key#0@@105|)) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@46|) (- |mid#2| 1)))) (LitInt |key#0@@105|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@46|) (LitInt |key#0@@105|) |mid#2| (LitInt |hi#0@@5|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@46|) (- |mid#2| 1)))) (LitInt |key#0@@105|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@46|) (LitInt |key#0@@105|) (LitInt |lo#0@@5|) |mid#2|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@447) (Lit |s#0@@46|) (LitInt |key#0@@105|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (ite (< (+ |lo#0@@5| 1) |hi#0@@5|) (let ((|mid#2@@0| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@46|) (LitInt (- |mid#2@@0| 1))))) (LitInt |key#0@@105|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@447) (Lit |s#0@@46|) (LitInt |key#0@@105|) |mid#2@@0| (LitInt |hi#0@@5|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@447) (Lit |s#0@@46|) (LitInt |key#0@@105|) (LitInt |lo#0@@5|) |mid#2@@0|))) |lo#0@@5|)))) :qid |totalord.421:12| :weight 3 :skolemid |3039| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@447) (Lit |s#0@@46|) (LitInt |key#0@@105|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|))) ))))
(assert (forall (($ly@@448 T@U) (|s#0@@47| T@U) (|key#0@@106| Int) ) (!  (=> (and (= (type $ly@@448) LayerTypeType) (= (type |s#0@@47|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@448) |s#0@@47| |key#0@@106|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@448 |s#0@@47| |key#0@@106|))) :qid |totalord.441:22| :skolemid |3040| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@448) |s#0@@47| |key#0@@106|)) )))
(assert (forall (($ly@@449 T@U) (|s#0@@48| T@U) (|key#0@@107| Int) ) (!  (=> (and (= (type $ly@@449) LayerTypeType) (= (type |s#0@@48|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@449 |s#0@@48| |key#0@@107|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@48| |key#0@@107|))) :qid |totalord.441:22| :skolemid |3041| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@449) |s#0@@48| |key#0@@107|)) )))
(assert  (=> true (forall (($ly@@450 T@U) (|s#0@@49| T@U) (|key#0@@108| Int) ) (!  (=> (and (and (= (type $ly@@450) LayerTypeType) (= (type |s#0@@49|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@49| |key#0@@108|) (and ($Is |s#0@@49| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@108|) (< |key#0@@108| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@450 |s#0@@49| |key#0@@108|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@450 |s#0@@49| |key#0@@108|) (|Seq#Length| |s#0@@49|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@450 |s#0@@49| |key#0@@108|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@49| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@450 |s#0@@49| |key#0@@108|) 1)))) |key#0@@108|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@450 |s#0@@49| |key#0@@108|) (|Seq#Length| |s#0@@49|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@108| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@49| (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@450 |s#0@@49| |key#0@@108|)))))))) :qid |totalord.441:22| :skolemid |3042| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@450 |s#0@@49| |key#0@@108|)) ))))
(assert (forall (($ly@@451 T@U) (|s#0@@50| T@U) (|key#0@@109| Int) ) (!  (=> (and (and (= (type $ly@@451) LayerTypeType) (= (type |s#0@@50|) (SeqType BoxType))) (and ($Is |s#0@@50| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@109|) (< |key#0@@109| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@451 |s#0@@50| |key#0@@109|) true) (=> true (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@451 |s#0@@50| |key#0@@109|)))) :qid |totalord.441:22| :skolemid |3043| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@451 |s#0@@50| |key#0@@109|)) )))
(assert  (=> true (forall (($ly@@452 T@U) (|s#0@@51| T@U) (|key#0@@110| Int) ) (!  (=> (and (and (= (type $ly@@452) LayerTypeType) (= (type |s#0@@51|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@51| |key#0@@110|) (and ($Is |s#0@@51| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@110|) (< |key#0@@110| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@51| |key#0@@110| (LitInt 0) (+ (|Seq#Length| |s#0@@51|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@452) |s#0@@51| |key#0@@110|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@51| |key#0@@110| (LitInt 0) (+ (|Seq#Length| |s#0@@51|) 1))))) :qid |totalord.441:22| :skolemid |3044| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@452) |s#0@@51| |key#0@@110|)) ))))
(assert  (=> true (forall (($ly@@453 T@U) (|s#0@@52| T@U) (|key#0@@111| Int) ) (!  (=> (and (and (= (type $ly@@453) LayerTypeType) (= (type |s#0@@52|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@52|) (LitInt |key#0@@111|)) (and ($Is |s#0@@52| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@111|) (< |key#0@@111| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@52|) (LitInt |key#0@@111|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@52|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@453) (Lit |s#0@@52|) (LitInt |key#0@@111|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@52|) (LitInt |key#0@@111|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@52|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |3045| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@453) (Lit |s#0@@52|) (LitInt |key#0@@111|))) ))))
(assert (forall (($ly@@454 T@U) (|run#0@@86| T@U) (|needle#0@@31| Int) ) (!  (=> (and (= (type $ly@@454) LayerTypeType) (= (type |run#0@@86|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@454) |run#0@@86| |needle#0@@31|) (Byte__Order.__default.IndexOfFirstGt $ly@@454 |run#0@@86| |needle#0@@31|))) :qid |totalord.449:12| :skolemid |3046| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@454) |run#0@@86| |needle#0@@31|)) )))
(assert (forall (($ly@@455 T@U) (|run#0@@87| T@U) (|needle#0@@32| Int) ) (!  (=> (and (= (type $ly@@455) LayerTypeType) (= (type |run#0@@87|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt $ly@@455 |run#0@@87| |needle#0@@32|) (Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@87| |needle#0@@32|))) :qid |totalord.449:12| :skolemid |3047| :pattern ( (Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@455) |run#0@@87| |needle#0@@32|)) )))
(assert  (=> true (forall (($ly@@456 T@U) (|run#0@@88| T@U) (|needle#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@456) LayerTypeType) (= (type |run#0@@88|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@88| |needle#0@@33|) (and (and ($Is |run#0@@88| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@33|) (< |needle#0@@33| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@88|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@456 |run#0@@88| |needle#0@@33|) (|Seq#Length| |run#0@@88|)) (forall ((|i#0@@109| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@109|) (< |i#0@@109| (Byte__Order.__default.IndexOfFirstGt $ly@@456 |run#0@@88| |needle#0@@33|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@109|))) |needle#0@@33|)) :qid |totalord.452:20| :skolemid |3048| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@109|))) ))) (forall ((|i#1@@34| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@456 |run#0@@88| |needle#0@@33|) |i#1@@34|) (< |i#1@@34| (|Seq#Length| |run#0@@88|))) (Byte__Order.__default.lt |needle#0@@33| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@34|))))) :qid |totalord.453:20| :skolemid |3049| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@34|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGt $ly@@456 |run#0@@88| |needle#0@@33|)))) :qid |totalord.449:12| :skolemid |3050| :pattern ( (Byte__Order.__default.IndexOfFirstGt $ly@@456 |run#0@@88| |needle#0@@33|)) ))))
(assert (forall (($ly@@457 T@U) (|run#0@@89| T@U) (|needle#0@@34| Int) ) (!  (=> (and (and (= (type $ly@@457) LayerTypeType) (= (type |run#0@@89|) (SeqType BoxType))) (and ($Is |run#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@34|) (< |needle#0@@34| 256)))) (and (=> (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@457 |run#0@@89| |needle#0@@34|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|) (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@457 |run#0@@89| |needle#0@@34|)))) :qid |totalord.449:12| :skolemid |3051| :pattern ( (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@457 |run#0@@89| |needle#0@@34|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@458 T@U) (|run#0@@90| T@U) (|needle#0@@35| Int) ) (!  (=> (and (and (= (type $ly@@458) LayerTypeType) (= (type |run#0@@90|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@90| |needle#0@@35|) (and (and ($Is |run#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@35|) (< |needle#0@@35| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@90|)))) (and (=> (not (= (|Seq#Length| |run#0@@90|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@90|) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|)) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@90|) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@90|) |needle#0@@35|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted6) MoreFuel_Byte_Order._default.IsSorted6)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@458) |run#0@@90| |needle#0@@35|) (ite (= (|Seq#Length| |run#0@@90|) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|) (|Seq#Length| |run#0@@90|) (Byte__Order.__default.IndexOfFirstGt $ly@@458 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@90|) |needle#0@@35|))))))) :qid |totalord.449:12| :skolemid |3052| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@458) |run#0@@90| |needle#0@@35|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@459 T@U) (|run#0@@91| T@U) (|needle#0@@36| Int) ) (!  (=> (and (and (= (type $ly@@459) LayerTypeType) (= (type |run#0@@91|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@91|) (LitInt |needle#0@@36|)) (and (and ($Is |run#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@36|) (< |needle#0@@36| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@91|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@91|)) (|Byte__Order.__default.lte#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@91|)) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@91|))) (LitInt |needle#0@@36|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted7) MoreFuel_Byte_Order._default.IsSorted7)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@459) (Lit |run#0@@91|) (LitInt |needle#0@@36|)) (ite (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|)) (|Seq#Length| (Lit |run#0@@91|)) (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@459) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@91|))) (LitInt |needle#0@@36|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |3053| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@459) (Lit |run#0@@91|) (LitInt |needle#0@@36|))) ))))
(assert (forall (($ly@@460 T@U) (|s#0@@53| T@U) (|key#0@@112| Int) (|lo#0@@6| Int) (|hi#0@@6| Int) ) (!  (=> (and (= (type $ly@@460) LayerTypeType) (= (type |s#0@@53|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@460) |s#0@@53| |key#0@@112| |lo#0@@6| |hi#0@@6|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@460 |s#0@@53| |key#0@@112| |lo#0@@6| |hi#0@@6|))) :qid |totalord.482:12| :skolemid |3054| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@460) |s#0@@53| |key#0@@112| |lo#0@@6| |hi#0@@6|)) )))
(assert (forall (($ly@@461 T@U) (|s#0@@54| T@U) (|key#0@@113| Int) (|lo#0@@7| Int) (|hi#0@@7| Int) ) (!  (=> (and (= (type $ly@@461) LayerTypeType) (= (type |s#0@@54|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@461 |s#0@@54| |key#0@@113| |lo#0@@7| |hi#0@@7|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@54| |key#0@@113| |lo#0@@7| |hi#0@@7|))) :qid |totalord.482:12| :skolemid |3055| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@461) |s#0@@54| |key#0@@113| |lo#0@@7| |hi#0@@7|)) )))
(assert  (=> true (forall (($ly@@462 T@U) (|s#0@@55| T@U) (|key#0@@114| Int) (|lo#0@@8| Int) (|hi#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@462) LayerTypeType) (= (type |s#0@@55|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@55| |key#0@@114| |lo#0@@8| |hi#0@@8|) (and (and ($Is |s#0@@55| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@114|) (< |key#0@@114| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@8|) (< |lo#0@@8| |hi#0@@8|)) (<= |hi#0@@8| (+ (|Seq#Length| |s#0@@55|) 1))) (=> (> |lo#0@@8| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |lo#0@@8| 1)))) |key#0@@114|))) (=> (<= |hi#0@@8| (|Seq#Length| |s#0@@55|)) (Byte__Order.__default.lt |key#0@@114| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |hi#0@@8| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@462 |s#0@@55| |key#0@@114| |lo#0@@8| |hi#0@@8|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@462 |s#0@@55| |key#0@@114| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@55|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@462 |s#0@@55| |key#0@@114| |lo#0@@8| |hi#0@@8|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@462 |s#0@@55| |key#0@@114| |lo#0@@8| |hi#0@@8|) 1)))) |key#0@@114|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@462 |s#0@@55| |key#0@@114| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@55|)) (Byte__Order.__default.lt |key#0@@114| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@462 |s#0@@55| |key#0@@114| |lo#0@@8| |hi#0@@8|)))))))) :qid |totalord.482:12| :skolemid |3056| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@462 |s#0@@55| |key#0@@114| |lo#0@@8| |hi#0@@8|)) ))))
(assert (forall (($ly@@463 T@U) (|s#0@@56| T@U) (|key#0@@115| Int) (|lo#0@@9| Int) (|hi#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@463) LayerTypeType) (= (type |s#0@@56|) (SeqType BoxType))) (and ($Is |s#0@@56| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@115|) (< |key#0@@115| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@463 |s#0@@56| |key#0@@115| |lo#0@@9| |hi#0@@9|) (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@56|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |lo#0@@9| 1)))) |key#0@@115|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@56|)) (Byte__Order.__default.lt |key#0@@115| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |hi#0@@9| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@56|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |lo#0@@9| 1)))) |key#0@@115|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@56|)) (Byte__Order.__default.lt |key#0@@115| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |hi#0@@9| 1))))))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@463 |s#0@@56| |key#0@@115| |lo#0@@9| |hi#0@@9|)))) :qid |totalord.482:12| :skolemid |3057| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@463 |s#0@@56| |key#0@@115| |lo#0@@9| |hi#0@@9|)) )))
(assert  (=> true (forall (($ly@@464 T@U) (|s#0@@57| T@U) (|key#0@@116| Int) (|lo#0@@10| Int) (|hi#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@464) LayerTypeType) (= (type |s#0@@57|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@57| |key#0@@116| |lo#0@@10| |hi#0@@10|) (and (and ($Is |s#0@@57| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@116|) (< |key#0@@116| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@10|) (< |lo#0@@10| |hi#0@@10|)) (<= |hi#0@@10| (+ (|Seq#Length| |s#0@@57|) 1))) (=> (> |lo#0@@10| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@57| (- |lo#0@@10| 1)))) |key#0@@116|))) (=> (<= |hi#0@@10| (|Seq#Length| |s#0@@57|)) (Byte__Order.__default.lt |key#0@@116| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@57| (- |hi#0@@10| 1)))))))))) (and (=> (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@3| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@57| (- |mid#0@@3| 1)))) |key#0@@116|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@57| (- |mid#0@@3| 1)))) |key#0@@116|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@57| |key#0@@116| |mid#0@@3| |hi#0@@10|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@57| (- |mid#0@@3| 1)))) |key#0@@116|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@57| |key#0@@116| |lo#0@@10| |mid#0@@3|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@464) |s#0@@57| |key#0@@116| |lo#0@@10| |hi#0@@10|) (ite (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@4| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@57| (- |mid#0@@4| 1)))) |key#0@@116|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@464 |s#0@@57| |key#0@@116| |mid#0@@4| |hi#0@@10|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@464 |s#0@@57| |key#0@@116| |lo#0@@10| |mid#0@@4|))) |lo#0@@10|)))) :qid |totalord.482:12| :skolemid |3058| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@464) |s#0@@57| |key#0@@116| |lo#0@@10| |hi#0@@10|)) ))))
(assert  (=> true (forall (($ly@@465 T@U) (|s#0@@58| T@U) (|key#0@@117| Int) (|lo#0@@11| Int) (|hi#0@@11| Int) ) (!  (=> (and (and (= (type $ly@@465) LayerTypeType) (= (type |s#0@@58|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@58| |key#0@@117| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (and (and ($Is |s#0@@58| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@117|) (< |key#0@@117| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@11|)) (< |lo#0@@11| |hi#0@@11|)) (<= (LitInt |hi#0@@11|) (+ (|Seq#Length| |s#0@@58|) 1))) (=> (> |lo#0@@11| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@58| (LitInt (- |lo#0@@11| 1))))) |key#0@@117|))) (=> (<= (LitInt |hi#0@@11|) (|Seq#Length| |s#0@@58|)) (Byte__Order.__default.lt |key#0@@117| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@58| (LitInt (- |hi#0@@11| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@11| 1) |hi#0@@11|)))) (let ((|mid#1@@3| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@58| (- |mid#1@@3| 1)))) |key#0@@117|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@58| (- |mid#1@@3| 1)))) |key#0@@117|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@58| |key#0@@117| |mid#1@@3| (LitInt |hi#0@@11|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@58| (- |mid#1@@3| 1)))) |key#0@@117|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@58| |key#0@@117| (LitInt |lo#0@@11|) |mid#1@@3|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@465) |s#0@@58| |key#0@@117| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (ite (< (+ |lo#0@@11| 1) |hi#0@@11|) (let ((|mid#1@@4| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@58| (LitInt (- |mid#1@@4| 1))))) |key#0@@117|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@465) |s#0@@58| |key#0@@117| |mid#1@@4| (LitInt |hi#0@@11|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@465) |s#0@@58| |key#0@@117| (LitInt |lo#0@@11|) |mid#1@@4|))) |lo#0@@11|)))) :qid |totalord.482:12| :weight 3 :skolemid |3059| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@465) |s#0@@58| |key#0@@117| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|))) ))))
(assert  (=> true (forall (($ly@@466 T@U) (|s#0@@59| T@U) (|key#0@@118| Int) (|lo#0@@12| Int) (|hi#0@@12| Int) ) (!  (=> (and (and (= (type $ly@@466) LayerTypeType) (= (type |s#0@@59|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@59|) (LitInt |key#0@@118|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (and (and ($Is |s#0@@59| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@118|) (< |key#0@@118| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@12|)) (< |lo#0@@12| |hi#0@@12|)) (<= (LitInt |hi#0@@12|) (+ (|Seq#Length| (Lit |s#0@@59|)) 1))) (=> (> |lo#0@@12| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@59|) (LitInt (- |lo#0@@12| 1))))) (LitInt |key#0@@118|)))) (=> (<= (LitInt |hi#0@@12|) (|Seq#Length| (Lit |s#0@@59|))) (Byte__Order.__default.lt (LitInt |key#0@@118|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@59|) (LitInt (- |hi#0@@12| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@12| 1) |hi#0@@12|)))) (let ((|mid#2@@1| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@59|) (- |mid#2@@1| 1)))) (LitInt |key#0@@118|)) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@59|) (- |mid#2@@1| 1)))) (LitInt |key#0@@118|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@59|) (LitInt |key#0@@118|) |mid#2@@1| (LitInt |hi#0@@12|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@59|) (- |mid#2@@1| 1)))) (LitInt |key#0@@118|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@59|) (LitInt |key#0@@118|) (LitInt |lo#0@@12|) |mid#2@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@466) (Lit |s#0@@59|) (LitInt |key#0@@118|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (ite (< (+ |lo#0@@12| 1) |hi#0@@12|) (let ((|mid#2@@2| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@59|) (LitInt (- |mid#2@@2| 1))))) (LitInt |key#0@@118|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@466) (Lit |s#0@@59|) (LitInt |key#0@@118|) |mid#2@@2| (LitInt |hi#0@@12|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@466) (Lit |s#0@@59|) (LitInt |key#0@@118|) (LitInt |lo#0@@12|) |mid#2@@2|))) |lo#0@@12|)))) :qid |totalord.482:12| :weight 3 :skolemid |3060| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@466) (Lit |s#0@@59|) (LitInt |key#0@@118|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|))) ))))
(assert (forall (($ly@@467 T@U) (|s#0@@60| T@U) (|key#0@@119| Int) ) (!  (=> (and (= (type $ly@@467) LayerTypeType) (= (type |s#0@@60|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@467) |s#0@@60| |key#0@@119|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@467 |s#0@@60| |key#0@@119|))) :qid |totalord.502:22| :skolemid |3061| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@467) |s#0@@60| |key#0@@119|)) )))
(assert (forall (($ly@@468 T@U) (|s#0@@61| T@U) (|key#0@@120| Int) ) (!  (=> (and (= (type $ly@@468) LayerTypeType) (= (type |s#0@@61|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@468 |s#0@@61| |key#0@@120|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@61| |key#0@@120|))) :qid |totalord.502:22| :skolemid |3062| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@468) |s#0@@61| |key#0@@120|)) )))
(assert  (=> true (forall (($ly@@469 T@U) (|s#0@@62| T@U) (|key#0@@121| Int) ) (!  (=> (and (and (= (type $ly@@469) LayerTypeType) (= (type |s#0@@62|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@62| |key#0@@121|) (and ($Is |s#0@@62| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@121|) (< |key#0@@121| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@469 |s#0@@62| |key#0@@121|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@469 |s#0@@62| |key#0@@121|) (|Seq#Length| |s#0@@62|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@469 |s#0@@62| |key#0@@121|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@62| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@469 |s#0@@62| |key#0@@121|) 1)))) |key#0@@121|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@469 |s#0@@62| |key#0@@121|) (|Seq#Length| |s#0@@62|)) (Byte__Order.__default.lt |key#0@@121| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@62| (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@469 |s#0@@62| |key#0@@121|)))))))) :qid |totalord.502:22| :skolemid |3063| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@469 |s#0@@62| |key#0@@121|)) ))))
(assert (forall (($ly@@470 T@U) (|s#0@@63| T@U) (|key#0@@122| Int) ) (!  (=> (and (and (= (type $ly@@470) LayerTypeType) (= (type |s#0@@63|) (SeqType BoxType))) (and ($Is |s#0@@63| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@122|) (< |key#0@@122| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@470 |s#0@@63| |key#0@@122|) true) (=> true (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@470 |s#0@@63| |key#0@@122|)))) :qid |totalord.502:22| :skolemid |3064| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@470 |s#0@@63| |key#0@@122|)) )))
(assert  (=> true (forall (($ly@@471 T@U) (|s#0@@64| T@U) (|key#0@@123| Int) ) (!  (=> (and (and (= (type $ly@@471) LayerTypeType) (= (type |s#0@@64|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@64| |key#0@@123|) (and ($Is |s#0@@64| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@123|) (< |key#0@@123| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@64| |key#0@@123| (LitInt 0) (+ (|Seq#Length| |s#0@@64|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@471) |s#0@@64| |key#0@@123|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@64| |key#0@@123| (LitInt 0) (+ (|Seq#Length| |s#0@@64|) 1))))) :qid |totalord.502:22| :skolemid |3065| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@471) |s#0@@64| |key#0@@123|)) ))))
(assert  (=> true (forall (($ly@@472 T@U) (|s#0@@65| T@U) (|key#0@@124| Int) ) (!  (=> (and (and (= (type $ly@@472) LayerTypeType) (= (type |s#0@@65|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@65|) (LitInt |key#0@@124|)) (and ($Is |s#0@@65| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@124|) (< |key#0@@124| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@65|) (LitInt |key#0@@124|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@65|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@472) (Lit |s#0@@65|) (LitInt |key#0@@124|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@65|) (LitInt |key#0@@124|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@65|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |3066| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@472) (Lit |s#0@@65|) (LitInt |key#0@@124|))) ))))
(assert  (=> true (forall ((|a#0@@97| T@U) (|b#0@@80| T@U) ) (!  (=> (and (and (= (type |a#0@@97|) (MapType0Type BoxType boolType)) (= (type |b#0@@80|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@97| |b#0@@80|) (and ($Is |a#0@@97| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@80| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalord.675:23| :skolemid |3067| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@97| |b#0@@80|)) ))))
(assert (forall ((|a#0@@98| T@U) (|b#0@@81| T@U) ) (!  (=> (and (and (= (type |a#0@@98|) (MapType0Type BoxType boolType)) (= (type |b#0@@81|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@98| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@81| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.SetAllLte#requires| |a#0@@98| |b#0@@81|) true) (=> true (|Byte__Order.__default.SetAllLte#requires| |a#0@@98| |b#0@@81|)))) :qid |totalord.675:23| :skolemid |3068| :pattern ( (|Byte__Order.__default.SetAllLte#requires| |a#0@@98| |b#0@@81|)) )))
(assert  (=> true (forall ((|a#0@@99| T@U) (|b#0@@82| T@U) ) (!  (=> (and (and (= (type |a#0@@99|) (MapType0Type BoxType boolType)) (= (type |b#0@@82|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@99| |b#0@@82|) (and ($Is |a#0@@99| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@82| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@1| Int) (|y#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@1|) (< |x#0@@1| 256)) (and (<= (LitInt 0) |y#0|) (< |y#0| 256))) (=> (U_2_bool (MapType0Select |b#0@@82| ($Box (int_2_U |y#0|)))) (|Byte__Order.__default.lte#canCall| |x#0@@1| |y#0|))) :qid |totalord.676:12| :skolemid |3069| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@1| |y#0|)) :pattern ( (MapType0Select |b#0@@82| ($Box (int_2_U |y#0|))) (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@1|)))) )) (and (=> (Byte__Order.__default.SetAllLte |a#0@@99| |b#0@@82|) (forall ((|x#0@@2| Int) (|y#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@2|) (< |x#0@@2| 256)) (and (<= (LitInt 0) |y#0@@0|) (< |y#0@@0| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@2|)))) (U_2_bool (MapType0Select |b#0@@82| ($Box (int_2_U |y#0@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@2| |y#0@@0|))) :qid |totalord.676:12| :skolemid |3070| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@2| |y#0@@0|)) :pattern ( (MapType0Select |b#0@@82| ($Box (int_2_U |y#0@@0|))) (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@2|)))) ))) (=> (forall ((|x#0@@3| Int) (|y#0@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@3|) (< |x#0@@3| 256)) (and (<= (LitInt 0) |y#0@@1|) (< |y#0@@1| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@3|)))) (U_2_bool (MapType0Select |b#0@@82| ($Box (int_2_U |y#0@@1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@1|))) :qid |totalord.676:12| :skolemid |3070| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@1|)) :pattern ( (MapType0Select |b#0@@82| ($Box (int_2_U |y#0@@1|))) (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@3|)))) )) (Byte__Order.__default.SetAllLte |a#0@@99| |b#0@@82|))))) :qid |totalord.675:23| :skolemid |3071| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@99| |b#0@@82|)) ))))
(assert  (=> true (forall ((|a#0@@100| T@U) (|b#0@@83| T@U) ) (!  (=> (and (and (= (type |a#0@@100|) (MapType0Type BoxType boolType)) (= (type |b#0@@83|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@100|) (Lit |b#0@@83|)) (and ($Is |a#0@@100| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@83| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1| Int) (|y#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1|) (< |x#1| 256)) (and (<= (LitInt 0) |y#1|) (< |y#1| 256))) (=> (U_2_bool (MapType0Select (Lit |b#0@@83|) ($Box (int_2_U |y#1|)))) (|Byte__Order.__default.lte#canCall| |x#1| |y#1|))) :qid |totalord.676:12| :skolemid |3072| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1| |y#1|)) :pattern ( (MapType0Select |b#0@@83| ($Box (int_2_U |y#1|))) (MapType0Select |a#0@@100| ($Box (int_2_U |x#1|)))) )) (and (=> (Byte__Order.__default.SetAllLte (Lit |a#0@@100|) (Lit |b#0@@83|)) (forall ((|x#1@@0| Int) (|y#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@0|) (< |x#1@@0| 256)) (and (<= (LitInt 0) |y#1@@0|) (< |y#1@@0| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@100|) ($Box (int_2_U |x#1@@0|)))) (U_2_bool (MapType0Select (Lit |b#0@@83|) ($Box (int_2_U |y#1@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|))) :qid |totalord.676:12| :skolemid |3073| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|)) :pattern ( (MapType0Select |b#0@@83| ($Box (int_2_U |y#1@@0|))) (MapType0Select |a#0@@100| ($Box (int_2_U |x#1@@0|)))) ))) (=> (forall ((|x#1@@1| Int) (|y#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@1|) (< |x#1@@1| 256)) (and (<= (LitInt 0) |y#1@@1|) (< |y#1@@1| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@100|) ($Box (int_2_U |x#1@@1|)))) (U_2_bool (MapType0Select (Lit |b#0@@83|) ($Box (int_2_U |y#1@@1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@1| |y#1@@1|))) :qid |totalord.676:12| :skolemid |3073| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@1| |y#1@@1|)) :pattern ( (MapType0Select |b#0@@83| ($Box (int_2_U |y#1@@1|))) (MapType0Select |a#0@@100| ($Box (int_2_U |x#1@@1|)))) )) (Byte__Order.__default.SetAllLte (Lit |a#0@@100|) (Lit |b#0@@83|)))))) :qid |totalord.675:23| :weight 3 :skolemid |3074| :pattern ( (Byte__Order.__default.SetAllLte (Lit |a#0@@100|) (Lit |b#0@@83|))) ))))
(assert  (=> true (forall ((|a#0@@101| T@U) (|b#0@@84| T@U) ) (!  (=> (and (and (= (type |a#0@@101|) (MapType0Type BoxType boolType)) (= (type |b#0@@84|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@101| |b#0@@84|) (and ($Is |a#0@@101| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@84| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalord.679:22| :skolemid |3075| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@101| |b#0@@84|)) ))))
(assert (forall ((|a#0@@102| T@U) (|b#0@@85| T@U) ) (!  (=> (and (and (= (type |a#0@@102|) (MapType0Type BoxType boolType)) (= (type |b#0@@85|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@102| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@85| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.SetAllLt#requires| |a#0@@102| |b#0@@85|) true) (=> true (|Byte__Order.__default.SetAllLt#requires| |a#0@@102| |b#0@@85|)))) :qid |totalord.679:22| :skolemid |3076| :pattern ( (|Byte__Order.__default.SetAllLt#requires| |a#0@@102| |b#0@@85|)) )))
(assert  (=> true (forall ((|a#0@@103| T@U) (|b#0@@86| T@U) ) (!  (=> (and (and (= (type |a#0@@103|) (MapType0Type BoxType boolType)) (= (type |b#0@@86|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@103| |b#0@@86|) (and ($Is |a#0@@103| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@86| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@4| Int) (|y#0@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@4|) (< |x#0@@4| 256)) (and (<= (LitInt 0) |y#0@@2|) (< |y#0@@2| 256))) (=> (U_2_bool (MapType0Select |b#0@@86| ($Box (int_2_U |y#0@@2|)))) (|Byte__Order.__default.lt#canCall| |x#0@@4| |y#0@@2|))) :qid |totalord.680:12| :skolemid |3077| :pattern ( (Byte__Order.__default.lt |x#0@@4| |y#0@@2|)) :pattern ( (MapType0Select |b#0@@86| ($Box (int_2_U |y#0@@2|))) (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@4|)))) )) (and (=> (Byte__Order.__default.SetAllLt |a#0@@103| |b#0@@86|) (forall ((|x#0@@5| Int) (|y#0@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@5|) (< |x#0@@5| 256)) (and (<= (LitInt 0) |y#0@@3|) (< |y#0@@3| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@5|)))) (U_2_bool (MapType0Select |b#0@@86| ($Box (int_2_U |y#0@@3|))))) (Byte__Order.__default.lt |x#0@@5| |y#0@@3|))) :qid |totalord.680:12| :skolemid |3078| :pattern ( (Byte__Order.__default.lt |x#0@@5| |y#0@@3|)) :pattern ( (MapType0Select |b#0@@86| ($Box (int_2_U |y#0@@3|))) (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@5|)))) ))) (=> (forall ((|x#0@@6| Int) (|y#0@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@6|) (< |x#0@@6| 256)) (and (<= (LitInt 0) |y#0@@4|) (< |y#0@@4| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@6|)))) (U_2_bool (MapType0Select |b#0@@86| ($Box (int_2_U |y#0@@4|))))) (Byte__Order.__default.lt |x#0@@6| |y#0@@4|))) :qid |totalord.680:12| :skolemid |3078| :pattern ( (Byte__Order.__default.lt |x#0@@6| |y#0@@4|)) :pattern ( (MapType0Select |b#0@@86| ($Box (int_2_U |y#0@@4|))) (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@6|)))) )) (Byte__Order.__default.SetAllLt |a#0@@103| |b#0@@86|))))) :qid |totalord.679:22| :skolemid |3079| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@103| |b#0@@86|)) ))))
(assert  (=> true (forall ((|a#0@@104| T@U) (|b#0@@87| T@U) ) (!  (=> (and (and (= (type |a#0@@104|) (MapType0Type BoxType boolType)) (= (type |b#0@@87|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@104|) (Lit |b#0@@87|)) (and ($Is |a#0@@104| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@87| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1@@2| Int) (|y#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@2|) (< |x#1@@2| 256)) (and (<= (LitInt 0) |y#1@@2|) (< |y#1@@2| 256))) (=> (U_2_bool (MapType0Select (Lit |b#0@@87|) ($Box (int_2_U |y#1@@2|)))) (|Byte__Order.__default.lt#canCall| |x#1@@2| |y#1@@2|))) :qid |totalord.680:12| :skolemid |3080| :pattern ( (Byte__Order.__default.lt |x#1@@2| |y#1@@2|)) :pattern ( (MapType0Select |b#0@@87| ($Box (int_2_U |y#1@@2|))) (MapType0Select |a#0@@104| ($Box (int_2_U |x#1@@2|)))) )) (and (=> (Byte__Order.__default.SetAllLt (Lit |a#0@@104|) (Lit |b#0@@87|)) (forall ((|x#1@@3| Int) (|y#1@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@3|) (< |x#1@@3| 256)) (and (<= (LitInt 0) |y#1@@3|) (< |y#1@@3| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@104|) ($Box (int_2_U |x#1@@3|)))) (U_2_bool (MapType0Select (Lit |b#0@@87|) ($Box (int_2_U |y#1@@3|))))) (Byte__Order.__default.lt |x#1@@3| |y#1@@3|))) :qid |totalord.680:12| :skolemid |3081| :pattern ( (Byte__Order.__default.lt |x#1@@3| |y#1@@3|)) :pattern ( (MapType0Select |b#0@@87| ($Box (int_2_U |y#1@@3|))) (MapType0Select |a#0@@104| ($Box (int_2_U |x#1@@3|)))) ))) (=> (forall ((|x#1@@4| Int) (|y#1@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@4|) (< |x#1@@4| 256)) (and (<= (LitInt 0) |y#1@@4|) (< |y#1@@4| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@104|) ($Box (int_2_U |x#1@@4|)))) (U_2_bool (MapType0Select (Lit |b#0@@87|) ($Box (int_2_U |y#1@@4|))))) (Byte__Order.__default.lt |x#1@@4| |y#1@@4|))) :qid |totalord.680:12| :skolemid |3081| :pattern ( (Byte__Order.__default.lt |x#1@@4| |y#1@@4|)) :pattern ( (MapType0Select |b#0@@87| ($Box (int_2_U |y#1@@4|))) (MapType0Select |a#0@@104| ($Box (int_2_U |x#1@@4|)))) )) (Byte__Order.__default.SetAllLt (Lit |a#0@@104|) (Lit |b#0@@87|)))))) :qid |totalord.679:22| :weight 3 :skolemid |3082| :pattern ( (Byte__Order.__default.SetAllLt (Lit |a#0@@104|) (Lit |b#0@@87|))) ))))
(assert (forall (($ly@@473 T@U) (|a#0@@105| Int) ) (!  (=> (= (type $ly@@473) LayerTypeType) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@473) |a#0@@105|) (Byte__Order.__default.NotMinimum $ly@@473 |a#0@@105|)) (=> (Byte__Order.__default.NotMinimum $ly@@473 |a#0@@105|) (Byte__Order.__default.NotMinimum ($LS $ly@@473) |a#0@@105|)))) :qid |totalord.696:23| :skolemid |3083| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@473) |a#0@@105|)) )))
(assert (forall (($ly@@474 T@U) (|a#0@@106| Int) ) (!  (=> (= (type $ly@@474) LayerTypeType) (and (=> (Byte__Order.__default.NotMinimum $ly@@474 |a#0@@106|) (Byte__Order.__default.NotMinimum $LZ |a#0@@106|)) (=> (Byte__Order.__default.NotMinimum $LZ |a#0@@106|) (Byte__Order.__default.NotMinimum $ly@@474 |a#0@@106|)))) :qid |totalord.696:23| :skolemid |3084| :pattern ( (Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@474) |a#0@@106|)) )))
(assert  (=> true (forall (($ly@@475 T@U) (|a#0@@107| Int) ) (!  (=> (and (= (type $ly@@475) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@107|) (and (<= (LitInt 0) |a#0@@107|) (< |a#0@@107| 256)))) true) :qid |totalord.696:23| :skolemid |3085| :pattern ( (Byte__Order.__default.NotMinimum $ly@@475 |a#0@@107|)) ))))
(assert (forall (($ly@@476 T@U) (|a#0@@108| Int) ) (!  (=> (= (type $ly@@476) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@108|) (< |a#0@@108| 256)) (and (=> (|Byte__Order.__default.NotMinimum#requires| $ly@@476 |a#0@@108|) true) (=> true (|Byte__Order.__default.NotMinimum#requires| $ly@@476 |a#0@@108|))))) :qid |totalord.696:23| :skolemid |3086| :pattern ( (|Byte__Order.__default.NotMinimum#requires| $ly@@476 |a#0@@108|)) )))
(assert  (=> true (forall (($ly@@477 T@U) (|a#0@@109| Int) ) (!  (=> (and (= (type $ly@@477) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@109|) (and (<= (LitInt 0) |a#0@@109|) (< |a#0@@109| 256)))) (and (forall ((|b#0@@88| Int) ) (!  (=> (and (<= (LitInt 0) |b#0@@88|) (< |b#0@@88| 256)) (|Byte__Order.__default.lt#canCall| |b#0@@88| |a#0@@109|)) :qid |totalord.697:12| :skolemid |3087| :pattern ( (Byte__Order.__default.lt |b#0@@88| |a#0@@109|)) )) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@477) |a#0@@109|) (exists ((|b#0@@89| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@89|) (< |b#0@@89| 256)) (Byte__Order.__default.lt |b#0@@89| |a#0@@109|)) :qid |totalord.697:12| :skolemid |3088| :pattern ( (Byte__Order.__default.lt |b#0@@89| |a#0@@109|)) ))) (=> (exists ((|b#0@@90| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@90|) (< |b#0@@90| 256)) (Byte__Order.__default.lt |b#0@@90| |a#0@@109|)) :qid |totalord.697:12| :skolemid |3088| :pattern ( (Byte__Order.__default.lt |b#0@@90| |a#0@@109|)) )) (Byte__Order.__default.NotMinimum ($LS $ly@@477) |a#0@@109|))))) :qid |totalord.696:23| :skolemid |3089| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@477) |a#0@@109|)) ))))
(assert  (=> true (forall (($ly@@478 T@U) (|a#0@@110| Int) ) (!  (=> (and (= (type $ly@@478) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| (LitInt |a#0@@110|)) (and (<= (LitInt 0) |a#0@@110|) (< |a#0@@110| 256)))) (and (forall ((|b#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |b#1@@2|) (< |b#1@@2| 256)) (|Byte__Order.__default.lt#canCall| |b#1@@2| (LitInt |a#0@@110|))) :qid |totalord.697:12| :skolemid |3090| :pattern ( (Byte__Order.__default.lt |b#1@@2| |a#0@@110|)) )) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@478) (LitInt |a#0@@110|)) (exists ((|b#1@@3| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@3|) (< |b#1@@3| 256)) (Byte__Order.__default.lt |b#1@@3| (LitInt |a#0@@110|))) :qid |totalord.697:12| :skolemid |3091| :pattern ( (Byte__Order.__default.lt |b#1@@3| |a#0@@110|)) ))) (=> (exists ((|b#1@@4| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@4|) (< |b#1@@4| 256)) (Byte__Order.__default.lt |b#1@@4| (LitInt |a#0@@110|))) :qid |totalord.697:12| :skolemid |3091| :pattern ( (Byte__Order.__default.lt |b#1@@4| |a#0@@110|)) )) (Byte__Order.__default.NotMinimum ($LS $ly@@478) (LitInt |a#0@@110|)))))) :qid |totalord.696:23| :weight 3 :skolemid |3092| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@478) (LitInt |a#0@@110|))) ))))
(assert (forall ((arg0@@459 T@U) (arg1@@269 T@U) (arg2@@201 Int) (arg3@@140 T@U) ) (! (= (type (Byte__Order.__default.MapPivotedUnion arg0@@459 arg1@@269 arg2@@201 arg3@@140)) (MapType BoxType BoxType)) :qid |funType:Byte__Order.__default.MapPivotedUnion| :pattern ( (Byte__Order.__default.MapPivotedUnion arg0@@459 arg1@@269 arg2@@201 arg3@@140)) )))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0@@5| T@U) (|pivot#0@@17| Int) (|right#0@@5| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@5|) (MapType BoxType BoxType))) (= (type |right#0@@5|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value |left#0@@5| |pivot#0@@17| |right#0@@5|) (and (and ($Is |left#0@@5| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value)) (and (<= (LitInt 0) |pivot#0@@17|) (< |pivot#0@@17| 256))) ($Is |right#0@@5| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0@@5| |pivot#0@@17| |right#0@@5|) (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |3093| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0@@5| |pivot#0@@17| |right#0@@5|)) ))))
(assert (forall ((Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@6| T@U) (|pivot#0@@18| Int) (|right#0@@6| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@6|) (MapType BoxType BoxType))) (= (type |right#0@@6|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@6| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)) (and (<= (LitInt 0) |pivot#0@@18|) (< |pivot#0@@18| 256))) ($Is |right#0@@6| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@6| |pivot#0@@18| |right#0@@6|) true) (=> true (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@6| |pivot#0@@18| |right#0@@6|)))) :qid |unknown.0:0| :skolemid |3094| :pattern ( (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@6| |pivot#0@@18| |right#0@@6|)) )))
(assert  (and (forall ((arg0@@460 T@U) (arg1@@270 Int) ) (! (= (type (|lambda#533| arg0@@460 arg1@@270)) (MapType0Type BoxType boolType)) :qid |funType:lambda#533| :pattern ( (|lambda#533| arg0@@460 arg1@@270)) )) (forall ((arg0@@461 T@U) (arg1@@271 T@U) (arg2@@202 Int) ) (! (= (type (|lambda#534| arg0@@461 arg1@@271 arg2@@202)) (MapType0Type BoxType boolType)) :qid |funType:lambda#534| :pattern ( (|lambda#534| arg0@@461 arg1@@271 arg2@@202)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@7| T@U) (|pivot#0@@19| Int) (|right#0@@7| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@7|) (MapType BoxType BoxType))) (= (type |right#0@@7|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@7| |pivot#0@@19| |right#0@@7|) (and (and ($Is |left#0@@7| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1)) (and (<= (LitInt 0) |pivot#0@@19|) (< |pivot#0@@19| 256))) ($Is |right#0@@7| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@48| Int) ) (!  (=> (and (<= (LitInt 0) |k#0@@48|) (< |k#0@@48| 256)) (|Byte__Order.__default.lt#canCall| |k#0@@48| |pivot#0@@19|)) :qid |totalord.716:57| :skolemid |3095| :pattern ( (Byte__Order.__default.lt |k#0@@48| |pivot#0@@19|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@7| (|lambda#533| Tclass.NativeTypes.byte |pivot#0@@19|))) (let ((|restricted_left#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@7| (|lambda#533| Tclass.NativeTypes.byte |pivot#0@@19|)))) (and (and (forall ((|k#1@@10| Int) ) (!  (=> (and (<= (LitInt 0) |k#1@@10|) (< |k#1@@10| 256)) (|Byte__Order.__default.lte#canCall| |pivot#0@@19| |k#1@@10|)) :qid |totalord.717:59| :skolemid |3096| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@19| |k#1@@10|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@7| (|lambda#534| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@19|))) (let ((|restricted_right#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@7| (|lambda#534| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@19|)))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0| |restricted_right#0|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@7| |pivot#0@@19| |right#0@@7|) (let ((|restricted_left#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@7| (|lambda#533| Tclass.NativeTypes.byte |pivot#0@@19|)))) (let ((|restricted_right#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@7| (|lambda#534| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@19|)))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@0| |restricted_right#0@@0|)))))) :qid |unknown.0:0| :skolemid |3097| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@7| |pivot#0@@19| |right#0@@7|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@8| T@U) (|pivot#0@@20| Int) (|right#0@@8| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@8|) (MapType BoxType BoxType))) (= (type |right#0@@8|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@8|) (LitInt |pivot#0@@20|) (Lit |right#0@@8|)) (and (and ($Is |left#0@@8| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2)) (and (<= (LitInt 0) |pivot#0@@20|) (< |pivot#0@@20| 256))) ($Is |right#0@@8| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@6| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@6|) (< |k#2@@6| 256)) (|Byte__Order.__default.lt#canCall| |k#2@@6| (LitInt |pivot#0@@20|))) :qid |totalord.716:57| :skolemid |3098| :pattern ( (Byte__Order.__default.lt |k#2@@6| |pivot#0@@20|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@8|) (|lambda#533| Tclass.NativeTypes.byte (LitInt |pivot#0@@20|)))) (let ((|restricted_left#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@8|) (|lambda#533| Tclass.NativeTypes.byte (LitInt |pivot#0@@20|))))) (and (and (forall ((|k#3| Int) ) (!  (=> (and (<= (LitInt 0) |k#3|) (< |k#3| 256)) (|Byte__Order.__default.lte#canCall| (LitInt |pivot#0@@20|) |k#3|)) :qid |totalord.717:59| :skolemid |3099| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@20| |k#3|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@8|) (|lambda#534| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@20|)))) (let ((|restricted_right#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@8|) (|lambda#534| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@20|))))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1| |restricted_right#1|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@8|) (LitInt |pivot#0@@20|) (Lit |right#0@@8|)) (let ((|restricted_left#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@8|) (|lambda#533| Tclass.NativeTypes.byte (LitInt |pivot#0@@20|))))) (let ((|restricted_right#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@8|) (|lambda#534| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@20|))))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@0| |restricted_right#1@@0|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3100| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@8|) (LitInt |pivot#0@@20|) (Lit |right#0@@8|))) ))))
(assert (forall ((arg0@@462 T@U) (arg1@@272 Int) ) (! (= (type (Byte__Order.__default.SetSuccessor arg0@@462 arg1@@272)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SetSuccessor| :pattern ( (Byte__Order.__default.SetSuccessor arg0@@462 arg1@@272)) )))
(assert  (=> true (forall ((|m#0@@101| T@U) (|key#0@@125| Int) ) (!  (=> (and (= (type |m#0@@101|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@101| |key#0@@125|) (and ($Is |m#0@@101| (TSet Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@125|) (< |key#0@@125| 256))))) ($Is (Byte__Order.__default.SetSuccessor |m#0@@101| |key#0@@125|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalord.721:25| :skolemid |3101| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@101| |key#0@@125|)) ))))
(assert (forall (($Heap@@36 T@U) (|m#0@@102| T@U) (|key#0@@126| Int) ) (!  (=> (and (= (type $Heap@@36) (MapType0Type refType MapType1Type)) (= (type |m#0@@102|) (MapType0Type BoxType boolType))) (=> (and (and ($IsGoodHeap $Heap@@36) ($Is |m#0@@102| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@126|) (< |key#0@@126| 256))) (and (=> (|Byte__Order.__default.SetSuccessor#requires| |m#0@@102| |key#0@@126|) true) (=> true (|Byte__Order.__default.SetSuccessor#requires| |m#0@@102| |key#0@@126|))))) :qid |totalord.721:12| :skolemid |3102| :pattern ( (|Byte__Order.__default.SetSuccessor#requires| |m#0@@102| |key#0@@126|) ($IsGoodHeap $Heap@@36)) )))
(assert (forall ((m@@76 T@U) (key Int) ) (!  (=> (and (= (type m@@76) (MapType0Type BoxType boolType)) (|$let#4$canCall| m@@76 key)) (and (and (<= (LitInt 0) (|$let#4_next| m@@76 key)) (< (|$let#4_next| m@@76 key) 256)) (and (and (U_2_bool (MapType0Select m@@76 ($Box (int_2_U (|$let#4_next| m@@76 key))))) (Byte__Order.__default.lt key (|$let#4_next| m@@76 key))) (forall ((|other#1| Int) ) (!  (=> (and (<= (LitInt 0) |other#1|) (< |other#1| 256)) (=> (and (and (U_2_bool (MapType0Select m@@76 ($Box (int_2_U |other#1|)))) (not (= |other#1| (|$let#4_next| m@@76 key)))) (Byte__Order.__default.lt key |other#1|)) (Byte__Order.__default.lt (|$let#4_next| m@@76 key) |other#1|))) :qid |totalord.726:18| :skolemid |3107| :pattern ( (Byte__Order.__default.lt (|$let#4_next| m@@76 key) |other#1|)) :pattern ( (Byte__Order.__default.lt key |other#1|)) :pattern ( (MapType0Select m@@76 ($Box (int_2_U |other#1|)))) ))))) :qid |totalord.723:8| :skolemid |3108| :pattern ( (|$let#4_next| m@@76 key)) )))
(assert  (=> true (forall (($Heap@@37 T@U) (|m#0@@103| T@U) (|key#0@@127| Int) ) (!  (=> (and (and (= (type $Heap@@37) (MapType0Type refType MapType1Type)) (= (type |m#0@@103|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@103| |key#0@@127|) (and (and ($IsGoodHeap $Heap@@37) ($Is |m#0@@103| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@127|) (< |key#0@@127| 256))))) (and (and (forall ((|next#0| Int) ) (!  (=> (and (<= (LitInt 0) |next#0|) (< |next#0| 256)) (and (=> (U_2_bool (MapType0Select |m#0@@103| ($Box (int_2_U |next#0|)))) (|Byte__Order.__default.lt#canCall| |key#0@@127| |next#0|)) (=> (and (|Byte__Order.__default.lt#canCall| |key#0@@127| |next#0|) (Byte__Order.__default.lt |key#0@@127| |next#0|)) (forall ((|other#0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0|) (< |other#0| 256)) (and (=> (not (= |other#0| |next#0|)) (|Byte__Order.__default.lt#canCall| |key#0@@127| |other#0|)) (=> (and (|Byte__Order.__default.lt#canCall| |key#0@@127| |other#0|) (Byte__Order.__default.lt |key#0@@127| |other#0|)) (|Byte__Order.__default.lt#canCall| |next#0| |other#0|)))) :qid |totalord.726:18| :skolemid |3103| :pattern ( (Byte__Order.__default.lt |next#0| |other#0|)) :pattern ( (Byte__Order.__default.lt |key#0@@127| |other#0|)) :pattern ( (MapType0Select |m#0@@103| ($Box (int_2_U |other#0|)))) ))))) :qid |totalord.723:8| :skolemid |3104| :pattern ( (Byte__Order.__default.lt |key#0@@127| |next#0|)) :pattern ( (MapType0Select |m#0@@103| ($Box (int_2_U |next#0|)))) )) (=> (exists ((|next#0@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@0|) (< |next#0@@0| 256)) (and (and (U_2_bool (MapType0Select |m#0@@103| ($Box (int_2_U |next#0@@0|)))) (Byte__Order.__default.lt |key#0@@127| |next#0@@0|)) (forall ((|other#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@0|) (< |other#0@@0| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@103| ($Box (int_2_U |other#0@@0|)))) (not (= |other#0@@0| |next#0@@0|))) (Byte__Order.__default.lt |key#0@@127| |other#0@@0|)) (Byte__Order.__default.lt |next#0@@0| |other#0@@0|))) :qid |totalord.726:18| :skolemid |3105| :pattern ( (Byte__Order.__default.lt |next#0@@0| |other#0@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@127| |other#0@@0|)) :pattern ( (MapType0Select |m#0@@103| ($Box (int_2_U |other#0@@0|)))) )))) :qid |totalord.723:8| :skolemid |3106| :pattern ( (Byte__Order.__default.lt |key#0@@127| |next#0@@0|)) :pattern ( (MapType0Select |m#0@@103| ($Box (int_2_U |next#0@@0|)))) )) (|$let#4$canCall| |m#0@@103| |key#0@@127|))) (= (Byte__Order.__default.SetSuccessor |m#0@@103| |key#0@@127|) (ite (exists ((|next#0@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@1|) (< |next#0@@1| 256)) (and (and (U_2_bool (MapType0Select |m#0@@103| ($Box (int_2_U |next#0@@1|)))) (Byte__Order.__default.lt |key#0@@127| |next#0@@1|)) (forall ((|other#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@1|) (< |other#0@@1| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@103| ($Box (int_2_U |other#0@@1|)))) (not (= |other#0@@1| |next#0@@1|))) (Byte__Order.__default.lt |key#0@@127| |other#0@@1|)) (Byte__Order.__default.lt |next#0@@1| |other#0@@1|))) :qid |totalord.726:18| :skolemid |3109| :pattern ( (Byte__Order.__default.lt |next#0@@1| |other#0@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@127| |other#0@@1|)) :pattern ( (MapType0Select |m#0@@103| ($Box (int_2_U |other#0@@1|)))) )))) :qid |totalord.723:8| :skolemid |3110| :pattern ( (Byte__Order.__default.lt |key#0@@127| |next#0@@1|)) :pattern ( (MapType0Select |m#0@@103| ($Box (int_2_U |next#0@@1|)))) )) (let ((|next#1| (|$let#4_next| |m#0@@103| |key#0@@127|))) (|#Options.Option.Some| ($Box (int_2_U |next#1|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |3111| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@103| |key#0@@127|) ($IsGoodHeap $Heap@@37)) ))))
(assert  (=> true (forall (($Heap@@38 T@U) (|m#0@@104| T@U) (|key#0@@128| Int) ) (!  (=> (and (and (= (type $Heap@@38) (MapType0Type refType MapType1Type)) (= (type |m#0@@104|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@104|) (LitInt |key#0@@128|)) (and (and ($IsGoodHeap $Heap@@38) ($Is |m#0@@104| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@128|) (< |key#0@@128| 256))))) (and (and (forall ((|next#2| Int) ) (!  (=> (and (<= (LitInt 0) |next#2|) (< |next#2| 256)) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@104|) ($Box (int_2_U |next#2|)))) (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@128|) |next#2|)) (=> (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@128|) |next#2|) (Byte__Order.__default.lt (LitInt |key#0@@128|) |next#2|)) (forall ((|other#2| Int) ) (!  (=> (and (<= (LitInt 0) |other#2|) (< |other#2| 256)) (and (=> (not (= |other#2| |next#2|)) (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@128|) |other#2|)) (=> (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@128|) |other#2|) (Byte__Order.__default.lt (LitInt |key#0@@128|) |other#2|)) (|Byte__Order.__default.lt#canCall| |next#2| |other#2|)))) :qid |totalord.726:18| :skolemid |3112| :pattern ( (Byte__Order.__default.lt |next#2| |other#2|)) :pattern ( (Byte__Order.__default.lt |key#0@@128| |other#2|)) :pattern ( (MapType0Select |m#0@@104| ($Box (int_2_U |other#2|)))) ))))) :qid |totalord.723:8| :skolemid |3113| :pattern ( (Byte__Order.__default.lt |key#0@@128| |next#2|)) :pattern ( (MapType0Select |m#0@@104| ($Box (int_2_U |next#2|)))) )) (=> (exists ((|next#2@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@0|) (< |next#2@@0| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@104|) ($Box (int_2_U |next#2@@0|)))) (Byte__Order.__default.lt (LitInt |key#0@@128|) |next#2@@0|)) (forall ((|other#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@0|) (< |other#2@@0| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@104|) ($Box (int_2_U |other#2@@0|)))) (not (= |other#2@@0| |next#2@@0|))) (Byte__Order.__default.lt (LitInt |key#0@@128|) |other#2@@0|)) (Byte__Order.__default.lt |next#2@@0| |other#2@@0|))) :qid |totalord.726:18| :skolemid |3114| :pattern ( (Byte__Order.__default.lt |next#2@@0| |other#2@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@128| |other#2@@0|)) :pattern ( (MapType0Select |m#0@@104| ($Box (int_2_U |other#2@@0|)))) )))) :qid |totalord.723:8| :skolemid |3115| :pattern ( (Byte__Order.__default.lt |key#0@@128| |next#2@@0|)) :pattern ( (MapType0Select |m#0@@104| ($Box (int_2_U |next#2@@0|)))) )) (|$let#4$canCall| (Lit |m#0@@104|) (LitInt |key#0@@128|)))) (= (Byte__Order.__default.SetSuccessor (Lit |m#0@@104|) (LitInt |key#0@@128|)) (ite (exists ((|next#2@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@1|) (< |next#2@@1| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@104|) ($Box (int_2_U |next#2@@1|)))) (Byte__Order.__default.lt (LitInt |key#0@@128|) |next#2@@1|)) (forall ((|other#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@1|) (< |other#2@@1| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@104|) ($Box (int_2_U |other#2@@1|)))) (not (= |other#2@@1| |next#2@@1|))) (Byte__Order.__default.lt (LitInt |key#0@@128|) |other#2@@1|)) (Byte__Order.__default.lt |next#2@@1| |other#2@@1|))) :qid |totalord.726:18| :skolemid |3116| :pattern ( (Byte__Order.__default.lt |next#2@@1| |other#2@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@128| |other#2@@1|)) :pattern ( (MapType0Select |m#0@@104| ($Box (int_2_U |other#2@@1|)))) )))) :qid |totalord.723:8| :skolemid |3117| :pattern ( (Byte__Order.__default.lt |key#0@@128| |next#2@@1|)) :pattern ( (MapType0Select |m#0@@104| ($Box (int_2_U |next#2@@1|)))) )) (let ((|next#3| (|$let#4_next| (Lit |m#0@@104|) (LitInt |key#0@@128|)))) (|#Options.Option.Some| ($Box (int_2_U |next#3|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |3118| :pattern ( (Byte__Order.__default.SetSuccessor (Lit |m#0@@104|) (LitInt |key#0@@128|)) ($IsGoodHeap $Heap@@38)) ))))
(assert (forall ((arg0@@463 T@U) (arg1@@273 T@U) (arg2@@203 Int) ) (! (= (type (Byte__Order.__default.MapSuccessor arg0@@463 arg1@@273 arg2@@203)) DatatypeTypeType) :qid |funType:Byte__Order.__default.MapSuccessor| :pattern ( (Byte__Order.__default.MapSuccessor arg0@@463 arg1@@273 arg2@@203)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V T@U) (|m#0@@105| T@U) (|key#0@@129| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@105|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V |m#0@@105| |key#0@@129|) (and ($Is |m#0@@105| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V)) (and (<= (LitInt 0) |key#0@@129|) (< |key#0@@129| 256))))) ($Is (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@105| |key#0@@129|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |3119| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@105| |key#0@@129|)) ))))
(assert (forall ((Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@106| T@U) (|key#0@@130| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@106|) (MapType BoxType BoxType))) (and ($Is |m#0@@106| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@0)) (and (<= (LitInt 0) |key#0@@130|) (< |key#0@@130| 256)))) (and (=> (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@106| |key#0@@130|) true) (=> true (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@106| |key#0@@130|)))) :qid |unknown.0:0| :skolemid |3120| :pattern ( (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@106| |key#0@@130|)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@107| T@U) (|key#0@@131| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@107|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@1 |m#0@@107| |key#0@@131|) (and ($Is |m#0@@107| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@1)) (and (<= (LitInt 0) |key#0@@131|) (< |key#0@@131| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@107|) |key#0@@131|) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@107| |key#0@@131|) (Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@107|) |key#0@@131|)))) :qid |unknown.0:0| :skolemid |3121| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@107| |key#0@@131|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@108| T@U) (|key#0@@132| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@108|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@108|) (LitInt |key#0@@132|)) (and ($Is |m#0@@108| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@2)) (and (<= (LitInt 0) |key#0@@132|) (< |key#0@@132| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@108|))) (LitInt |key#0@@132|)) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@108|) (LitInt |key#0@@132|)) (Lit (Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@108|))) (LitInt |key#0@@132|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3122| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@108|) (LitInt |key#0@@132|))) ))))
(assert (forall ((arg0@@464 T@U) (arg1@@274 Int) ) (! (= (type (Byte__Order.__default.SeqSuccessor arg0@@464 arg1@@274)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SeqSuccessor| :pattern ( (Byte__Order.__default.SeqSuccessor arg0@@464 arg1@@274)) )))
(assert  (=> true (forall ((|m#0@@109| T@U) (|key#0@@133| Int) ) (!  (=> (and (= (type |m#0@@109|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@109| |key#0@@133|) (and ($Is |m#0@@109| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@133|) (< |key#0@@133| 256))))) ($Is (Byte__Order.__default.SeqSuccessor |m#0@@109| |key#0@@133|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalord.737:25| :skolemid |3123| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@109| |key#0@@133|)) ))))
(assert (forall ((|m#0@@110| T@U) (|key#0@@134| Int) ) (!  (=> (= (type |m#0@@110|) (SeqType BoxType)) (=> (and ($Is |m#0@@110| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@134|) (< |key#0@@134| 256))) (and (=> (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@110| |key#0@@134|) true) (=> true (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@110| |key#0@@134|))))) :qid |totalord.737:25| :skolemid |3124| :pattern ( (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@110| |key#0@@134|)) )))
(assert (forall ((arg0@@465 T@U) (arg1@@275 T@U) ) (! (= (type (|lambda#545| arg0@@465 arg1@@275)) (MapType0Type BoxType boolType)) :qid |funType:lambda#545| :pattern ( (|lambda#545| arg0@@465 arg1@@275)) )))
(assert  (=> true (forall ((|m#0@@111| T@U) (|key#0@@135| Int) ) (!  (=> (and (= (type |m#0@@111|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@111| |key#0@@135|) (and ($Is |m#0@@111| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@135|) (< |key#0@@135| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#545| Tclass.NativeTypes.byte |m#0@@111|) |key#0@@135|) (= (Byte__Order.__default.SeqSuccessor |m#0@@111| |key#0@@135|) (Byte__Order.__default.SetSuccessor (|lambda#545| Tclass.NativeTypes.byte |m#0@@111|) |key#0@@135|)))) :qid |totalord.737:25| :skolemid |3125| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@111| |key#0@@135|)) ))))
(assert  (=> true (forall ((|m#0@@112| T@U) (|key#0@@136| Int) ) (!  (=> (and (= (type |m#0@@112|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@112|) (LitInt |key#0@@136|)) (and ($Is |m#0@@112| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@136|) (< |key#0@@136| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#545| Tclass.NativeTypes.byte |m#0@@112|) (LitInt |key#0@@136|)) (= (Byte__Order.__default.SeqSuccessor (Lit |m#0@@112|) (LitInt |key#0@@136|)) (Byte__Order.__default.SetSuccessor (|lambda#545| Tclass.NativeTypes.byte |m#0@@112|) (LitInt |key#0@@136|))))) :qid |totalord.737:25| :weight 3 :skolemid |3126| :pattern ( (Byte__Order.__default.SeqSuccessor (Lit |m#0@@112|) (LitInt |key#0@@136|))) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@479 T@U) (|s#0@@66| T@U) (|m#0@@113| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@479) LayerTypeType)) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |m#0@@113|) (MapType BoxType BoxType))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@479) |s#0@@66| |m#0@@113|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@479 |s#0@@66| |m#0@@113|)) (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@479 |s#0@@66| |m#0@@113|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@479) |s#0@@66| |m#0@@113|)))) :qid |unknown.0:0| :skolemid |3127| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@479) |s#0@@66| |m#0@@113|)) )))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@480 T@U) (|s#0@@67| T@U) (|m#0@@114| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@480) LayerTypeType)) (= (type |s#0@@67|) (SeqType BoxType))) (= (type |m#0@@114|) (MapType BoxType BoxType))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@480 |s#0@@67| |m#0@@114|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@67| |m#0@@114|)) (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@67| |m#0@@114|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@480 |s#0@@67| |m#0@@114|)))) :qid |unknown.0:0| :skolemid |3128| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@480) |s#0@@67| |m#0@@114|)) )))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@481 T@U) (|s#0@@68| T@U) (|m#0@@115| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@481) LayerTypeType)) (= (type |s#0@@68|) (SeqType BoxType))) (= (type |m#0@@115|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@68| |m#0@@115|) (and ($Is |s#0@@68| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@115| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |3129| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@1 $ly@@481 |s#0@@68| |m#0@@115|)) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@482 T@U) (|s#0@@69| T@U) (|m#0@@116| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@482) LayerTypeType)) (= (type |s#0@@69|) (SeqType BoxType))) (= (type |m#0@@116|) (MapType BoxType BoxType))) (and ($Is |s#0@@69| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@116| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@482 |s#0@@69| |m#0@@116|) true) (=> true (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@482 |s#0@@69| |m#0@@116|)))) :qid |unknown.0:0| :skolemid |3130| :pattern ( (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@482 |s#0@@69| |m#0@@116|)) )))
(assert  (and (= (type StartFuel_Sequences._default.Unzip) LayerTypeType) (= (type StartFuel_Byte_Order._default.IsStrictlySorted) LayerTypeType)))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@483 T@U) (|s#0@@70| T@U) (|m#0@@117| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@483) LayerTypeType)) (= (type |s#0@@70|) (SeqType BoxType))) (= (type |m#0@@117|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@70| |m#0@@117|) (and ($Is |s#0@@70| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@117| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@70|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@70|))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@70|))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@70|)))) (forall ((|i#0@@110| Int) ) (!  (and (=> (< |i#0@@110| (|Seq#Length| |s#0@@70|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@110|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@110|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@117|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@110|)))))) (=> (< |i#0@@110| (|Seq#Length| |s#0@@70|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@110|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@110|))))))) :qid |totalord.761:16| :skolemid |3131| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@110|))) )))) (=> (and (forall ((|i#0@@111| Int) ) (!  (and (=> (< |i#0@@111| (|Seq#Length| |s#0@@70|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@111|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@111|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@117|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@111|)))))) (=> (< |i#0@@111| (|Seq#Length| |s#0@@70|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@111|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@111|))))))) :qid |totalord.761:16| :skolemid |3134| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@111|))) )) (forall ((|i#0@@112| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@112|) (< |i#0@@112| (|Seq#Length| |s#0@@70|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@117|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@112|)))))) (=> (and (<= (LitInt 0) |i#0@@112|) (< |i#0@@112| (|Seq#Length| |s#0@@70|))) (= (MapType0Select (|Map#Elements| |m#0@@117|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@112|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@112|))))))) :qid |totalord.761:16| :skolemid |3135| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@112|))) ))) (forall ((|key#0@@137| T@U) ) (!  (=> (= (type |key#0@@137|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@137|)) (< (U_2_int |key#0@@137|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@117|) ($Box |key#0@@137|))) (forall ((|i#1@@35| Int) ) (!  (and (=> (< |i#1@@35| (|Seq#Length| |s#0@@70|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@35|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@35|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@35|))))) (U_2_int |key#0@@137|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@35|))))) :qid |totalord.762:44| :skolemid |3132| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@35|))) ))))) :qid |totalord.762:16| :skolemid |3133| :pattern ( (MapType0Select (|Map#Elements| |m#0@@117|) ($Box |key#0@@137|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@117|) ($Box |key#0@@137|))) )))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@483) |s#0@@70| |m#0@@117|) (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@70|)))) (forall ((|i#0@@113| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@113|) (< |i#0@@113| (|Seq#Length| |s#0@@70|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@117|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@113|)))))) (=> (and (<= (LitInt 0) |i#0@@113|) (< |i#0@@113| (|Seq#Length| |s#0@@70|))) (= (MapType0Select (|Map#Elements| |m#0@@117|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@113|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@113|))))))) :qid |totalord.761:16| :skolemid |3136| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@113|))) ))) (forall ((|key#0@@138| T@U) ) (!  (=> (= (type |key#0@@138|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@138|)) (< (U_2_int |key#0@@138|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@117|) ($Box |key#0@@138|))) (exists ((|i#1@@36| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@36|) (< |i#1@@36| (|Seq#Length| |s#0@@70|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@36|))))) (U_2_int |key#0@@138|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@36|))) (MapType0Select (|Map#Elements| |m#0@@117|) ($Box |key#0@@138|)))) :qid |totalord.762:44| :skolemid |3137| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@36|))) ))))) :qid |totalord.762:16| :skolemid |3138| :pattern ( (MapType0Select (|Map#Elements| |m#0@@117|) ($Box |key#0@@138|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@117|) ($Box |key#0@@138|))) )))) (=> (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@70|)))) (forall ((|i#0@@114| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@114|) (< |i#0@@114| (|Seq#Length| |s#0@@70|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@117|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@114|)))))) (=> (and (<= (LitInt 0) |i#0@@114|) (< |i#0@@114| (|Seq#Length| |s#0@@70|))) (= (MapType0Select (|Map#Elements| |m#0@@117|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@114|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@114|))))))) :qid |totalord.761:16| :skolemid |3136| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#0@@114|))) ))) (forall ((|key#0@@139| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@139|) (< |key#0@@139| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@117|) ($Box (int_2_U |key#0@@139|)))) (exists ((|i#1@@37| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@37|) (< |i#1@@37| (|Seq#Length| |s#0@@70|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@37|))))) |key#0@@139|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@37|))) (MapType0Select (|Map#Elements| |m#0@@117|) ($Box (int_2_U |key#0@@139|))))) :qid |totalord.762:44| :skolemid |3137| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@70| |i#1@@37|))) )))) :qid |totalord.762:16| :skolemid |3138| :pattern ( (MapType0Select (|Map#Elements| |m#0@@117|) ($Box (int_2_U |key#0@@139|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@117|) ($Box (int_2_U |key#0@@139|)))) ))) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@483) |s#0@@70| |m#0@@117|))))) :qid |unknown.0:0| :skolemid |3139| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@483) |s#0@@70| |m#0@@117|)) ))))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@484 T@U) (|s#0@@71| T@U) (|m#0@@118| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@484) LayerTypeType)) (= (type |s#0@@71|) (SeqType BoxType))) (= (type |m#0@@118|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@71|) (Lit |m#0@@118|)) (and ($Is |s#0@@71| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@118| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@71|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@71|)))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@71|)))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@71|))))) (forall ((|i#2@@6| Int) ) (!  (and (=> (< |i#2@@6| (|Seq#Length| (Lit |s#0@@71|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@6|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@6|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@118|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@6|)))))) (=> (< |i#2@@6| (|Seq#Length| (Lit |s#0@@71|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@6|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@6|))))))) :qid |totalord.761:16| :skolemid |3140| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@71| |i#2@@6|))) )))) (=> (and (forall ((|i#2@@7| Int) ) (!  (and (=> (< |i#2@@7| (|Seq#Length| (Lit |s#0@@71|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@7|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@7|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@118|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@7|)))))) (=> (< |i#2@@7| (|Seq#Length| (Lit |s#0@@71|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@7|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@7|))))))) :qid |totalord.761:16| :skolemid |3143| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@71| |i#2@@7|))) )) (forall ((|i#2@@8| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@8|) (< |i#2@@8| (|Seq#Length| (Lit |s#0@@71|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@118|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@8|)))))) (=> (and (<= (LitInt 0) |i#2@@8|) (< |i#2@@8| (|Seq#Length| (Lit |s#0@@71|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@118|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@8|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@8|))))))) :qid |totalord.761:16| :skolemid |3144| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@71| |i#2@@8|))) ))) (forall ((|key#1@@18| T@U) ) (!  (=> (= (type |key#1@@18|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@18|)) (< (U_2_int |key#1@@18|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@118|) ($Box |key#1@@18|))) (forall ((|i#3@@6| Int) ) (!  (and (=> (< |i#3@@6| (|Seq#Length| (Lit |s#0@@71|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#3@@6|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#3@@6|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#3@@6|))))) (U_2_int |key#1@@18|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#3@@6|))))) :qid |totalord.762:44| :skolemid |3141| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@71| |i#3@@6|))) ))))) :qid |totalord.762:16| :skolemid |3142| :pattern ( (MapType0Select (|Map#Elements| |m#0@@118|) ($Box |key#1@@18|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@118|) ($Box |key#1@@18|))) )))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@484) (Lit |s#0@@71|) (Lit |m#0@@118|)) (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@71|))))) (forall ((|i#2@@9| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| (Lit |s#0@@71|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@118|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@9|)))))) (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| (Lit |s#0@@71|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@118|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@9|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@9|))))))) :qid |totalord.761:16| :skolemid |3145| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@71| |i#2@@9|))) ))) (forall ((|key#1@@19| T@U) ) (!  (=> (= (type |key#1@@19|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@19|)) (< (U_2_int |key#1@@19|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@118|) ($Box |key#1@@19|))) (exists ((|i#3@@7| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@7|) (< |i#3@@7| (|Seq#Length| (Lit |s#0@@71|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#3@@7|))))) (U_2_int |key#1@@19|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#3@@7|))) (MapType0Select (|Map#Elements| (Lit |m#0@@118|)) ($Box |key#1@@19|)))) :qid |totalord.762:44| :skolemid |3146| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@71| |i#3@@7|))) ))))) :qid |totalord.762:16| :skolemid |3147| :pattern ( (MapType0Select (|Map#Elements| |m#0@@118|) ($Box |key#1@@19|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@118|) ($Box |key#1@@19|))) )))) (=> (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@71|))))) (forall ((|i#2@@10| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@10|) (< |i#2@@10| (|Seq#Length| (Lit |s#0@@71|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@118|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@10|)))))) (=> (and (<= (LitInt 0) |i#2@@10|) (< |i#2@@10| (|Seq#Length| (Lit |s#0@@71|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@118|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@10|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#2@@10|))))))) :qid |totalord.761:16| :skolemid |3145| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@71| |i#2@@10|))) ))) (forall ((|key#1@@20| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@20|) (< |key#1@@20| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@118|) ($Box (int_2_U |key#1@@20|)))) (exists ((|i#3@@8| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@8|) (< |i#3@@8| (|Seq#Length| (Lit |s#0@@71|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#3@@8|))))) |key#1@@20|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@71|) |i#3@@8|))) (MapType0Select (|Map#Elements| (Lit |m#0@@118|)) ($Box (int_2_U |key#1@@20|))))) :qid |totalord.762:44| :skolemid |3146| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@71| |i#3@@8|))) )))) :qid |totalord.762:16| :skolemid |3147| :pattern ( (MapType0Select (|Map#Elements| |m#0@@118|) ($Box (int_2_U |key#1@@20|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@118|) ($Box (int_2_U |key#1@@20|)))) ))) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@484) (Lit |s#0@@71|) (Lit |m#0@@118|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3148| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@484) (Lit |s#0@@71|) (Lit |m#0@@118|))) ))))
(assert (forall (($ly@@485 T@U) (|s#0@@72| T@U) ) (!  (=> (and (= (type $ly@@485) LayerTypeType) (= (type |s#0@@72|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum ($LS $ly@@485) |s#0@@72|) (Byte__Order.__default.minimum $ly@@485 |s#0@@72|))) :qid |totalord.765:22| :skolemid |3149| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@485) |s#0@@72|)) )))
(assert (forall (($ly@@486 T@U) (|s#0@@73| T@U) ) (!  (=> (and (= (type $ly@@486) LayerTypeType) (= (type |s#0@@73|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum $ly@@486 |s#0@@73|) (Byte__Order.__default.minimum $LZ |s#0@@73|))) :qid |totalord.765:22| :skolemid |3150| :pattern ( (Byte__Order.__default.minimum (AsFuelBottom $ly@@486) |s#0@@73|)) )))
(assert  (=> true (forall (($ly@@487 T@U) (|s#0@@74| T@U) ) (!  (=> (and (and (= (type $ly@@487) LayerTypeType) (= (type |s#0@@74|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@74|) (and ($Is |s#0@@74| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@74|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@74| ($Box (int_2_U (Byte__Order.__default.minimum $ly@@487 |s#0@@74|))))) (forall ((|y#0@@5| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@5|) (< |y#0@@5| 256)) (U_2_bool (MapType0Select |s#0@@74| ($Box (int_2_U |y#0@@5|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@487 |s#0@@74|) |y#0@@5|)) :qid |totalord.768:18| :skolemid |3151| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@487 |s#0@@74|) |y#0@@5|)) :pattern ( (MapType0Select |s#0@@74| ($Box (int_2_U |y#0@@5|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.minimum $ly@@487 |s#0@@74|)) (< (Byte__Order.__default.minimum $ly@@487 |s#0@@74|) 256)))) :qid |totalord.765:22| :skolemid |3152| :pattern ( (Byte__Order.__default.minimum $ly@@487 |s#0@@74|)) ))))
(assert (forall (($ly@@488 T@U) ($Heap@@39 T@U) (|s#0@@75| T@U) ) (!  (=> (and (and (and (= (type $ly@@488) LayerTypeType) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |s#0@@75|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@39) ($Is |s#0@@75| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.minimum#requires| $ly@@488 |s#0@@75|) (>= (|Set#Card| |s#0@@75|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@75|) (LitInt 1)) (|Byte__Order.__default.minimum#requires| $ly@@488 |s#0@@75|)))) :qid |totalord.765:22| :skolemid |3153| :pattern ( (|Byte__Order.__default.minimum#requires| $ly@@488 |s#0@@75|) ($IsGoodHeap $Heap@@39)) )))
(assert (forall ((s@@46 T@U) ) (!  (=> (and (= (type s@@46) (MapType0Type BoxType boolType)) (|$let#7$canCall| s@@46)) (and (and (<= (LitInt 0) (|$let#7_a| s@@46)) (< (|$let#7_a| s@@46) 256)) (U_2_bool (MapType0Select s@@46 ($Box (int_2_U (|$let#7_a| s@@46))))))) :qid |totalord.772:5| :skolemid |3154| :pattern ( (|$let#7_a| s@@46)) )))
(assert  (=> true (forall (($ly@@489 T@U) ($Heap@@40 T@U) (|s#0@@76| T@U) ) (!  (=> (and (and (and (= (type $ly@@489) LayerTypeType) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type |s#0@@76|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@76|) (and (and ($IsGoodHeap $Heap@@40) ($Is |s#0@@76| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@76|) (LitInt 1))))) (and (and (|$let#7$canCall| |s#0@@76|) (let ((|s'#0| (|Set#Difference| |s#0@@76| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#7_a| |s#0@@76|))))))) (=> (not (|Set#Equal| |s'#0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#0|) (let ((|m'#0@@10| (Byte__Order.__default.minimum $ly@@489 |s'#0|))) (|Byte__Order.__default.lt#canCall| (|$let#7_a| |s#0@@76|) |m'#0@@10|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@489) |s#0@@76|) (let ((|a#0@@111| (|$let#7_a| |s#0@@76|))) (let ((|s'#1| (|Set#Difference| |s#0@@76| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@111|)))))) (ite (|Set#Equal| |s'#1| (|Set#Empty| BoxType)) |a#0@@111| (let ((|m'#1@@1| (Byte__Order.__default.minimum $ly@@489 |s'#1|))) (ite (Byte__Order.__default.lt |a#0@@111| |m'#1@@1|) |a#0@@111| |m'#1@@1|)))))))) :qid |totalord.765:22| :skolemid |3155| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@489) |s#0@@76|) ($IsGoodHeap $Heap@@40)) ))))
(assert  (=> true (forall (($ly@@490 T@U) ($Heap@@41 T@U) (|s#0@@77| T@U) ) (!  (=> (and (and (and (= (type $ly@@490) LayerTypeType) (= (type $Heap@@41) (MapType0Type refType MapType1Type))) (= (type |s#0@@77|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@77|)) (and (and ($IsGoodHeap $Heap@@41) ($Is |s#0@@77| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@77|)) (LitInt 1))))) (and (and (|$let#7$canCall| (Lit |s#0@@77|)) (let ((|s'#2| (|Set#Difference| |s#0@@77| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#7_a| (Lit |s#0@@77|)))))))) (=> (not (|Set#Equal| |s'#2| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#2|) (let ((|m'#2@@0| (Byte__Order.__default.minimum ($LS $ly@@490) |s'#2|))) (|Byte__Order.__default.lt#canCall| (|$let#7_a| (Lit |s#0@@77|)) |m'#2@@0|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@490) (Lit |s#0@@77|)) (let ((|a#1@@1| (|$let#7_a| (Lit |s#0@@77|)))) (let ((|s'#3| (|Set#Difference| |s#0@@77| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@1|)))))) (ite (|Set#Equal| |s'#3| (|Set#Empty| BoxType)) |a#1@@1| (let ((|m'#3| (Byte__Order.__default.minimum ($LS $ly@@490) |s'#3|))) (ite (Byte__Order.__default.lt |a#1@@1| |m'#3|) |a#1@@1| |m'#3|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |3156| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@490) (Lit |s#0@@77|)) ($IsGoodHeap $Heap@@41)) ))))
(assert (forall ((arg0@@466 T@U) (arg1@@276 T@U) ) (! (= (type (Byte__Order.__default.minimumOpt arg0@@466 arg1@@276)) DatatypeTypeType) :qid |funType:Byte__Order.__default.minimumOpt| :pattern ( (Byte__Order.__default.minimumOpt arg0@@466 arg1@@276)) )))
(assert (forall (($ly@@491 T@U) (|s#0@@78| T@U) ) (!  (=> (and (= (type $ly@@491) LayerTypeType) (= (type |s#0@@78|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@491) |s#0@@78|) (Byte__Order.__default.minimumOpt $ly@@491 |s#0@@78|))) :qid |totalord.788:22| :skolemid |3157| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@491) |s#0@@78|)) )))
(assert (forall (($ly@@492 T@U) (|s#0@@79| T@U) ) (!  (=> (and (= (type $ly@@492) LayerTypeType) (= (type |s#0@@79|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt $ly@@492 |s#0@@79|) (Byte__Order.__default.minimumOpt $LZ |s#0@@79|))) :qid |totalord.788:22| :skolemid |3158| :pattern ( (Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@492) |s#0@@79|)) )))
(assert  (=> true (forall (($ly@@493 T@U) (|s#0@@80| T@U) ) (!  (=> (and (and (= (type $ly@@493) LayerTypeType) (= (type |s#0@@80|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@80|) ($Is |s#0@@80| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@493 |s#0@@80|)) (U_2_bool (MapType0Select |s#0@@80| (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@493 |s#0@@80|))))) (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@493 |s#0@@80|)) (forall ((|y#0@@6| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@6|) (< |y#0@@6| 256)) (U_2_bool (MapType0Select |s#0@@80| ($Box (int_2_U |y#0@@6|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@493 |s#0@@80|)))) |y#0@@6|)) :qid |totalord.790:30| :skolemid |3159| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@493 |s#0@@80|)))) |y#0@@6|)) :pattern ( (MapType0Select |s#0@@80| ($Box (int_2_U |y#0@@6|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.minimumOpt $ly@@493 |s#0@@80|)) (|Set#Equal| |s#0@@80| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.minimumOpt $ly@@493 |s#0@@80|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalord.788:22| :skolemid |3160| :pattern ( (Byte__Order.__default.minimumOpt $ly@@493 |s#0@@80|)) ))))
(assert (forall (($ly@@494 T@U) (|s#0@@81| T@U) ) (!  (=> (and (and (= (type $ly@@494) LayerTypeType) (= (type |s#0@@81|) (MapType0Type BoxType boolType))) ($Is |s#0@@81| (TSet Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.minimumOpt#requires| $ly@@494 |s#0@@81|) true) (=> true (|Byte__Order.__default.minimumOpt#requires| $ly@@494 |s#0@@81|)))) :qid |totalord.788:22| :skolemid |3161| :pattern ( (|Byte__Order.__default.minimumOpt#requires| $ly@@494 |s#0@@81|)) )))
(assert (= (type StartFuel_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@495 T@U) (|s#0@@82| T@U) ) (!  (=> (and (and (= (type $ly@@495) LayerTypeType) (= (type |s#0@@82|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@82|) ($Is |s#0@@82| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@82| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| |s#0@@82|)) (= (Byte__Order.__default.minimumOpt ($LS $ly@@495) |s#0@@82|) (ite (|Set#Equal| |s#0@@82| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum |s#0@@82|)))))))) :qid |totalord.788:22| :skolemid |3162| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@495) |s#0@@82|)) ))))
(assert  (=> true (forall (($ly@@496 T@U) (|s#0@@83| T@U) ) (!  (=> (and (and (= (type $ly@@496) LayerTypeType) (= (type |s#0@@83|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@83|)) ($Is |s#0@@83| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@83| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@83|))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@496) (Lit |s#0@@83|)) (ite (|Set#Equal| |s#0@@83| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum (Lit |s#0@@83|))))))))) :qid |totalord.788:22| :weight 3 :skolemid |3163| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@496) (Lit |s#0@@83|))) ))))
(assert (forall (($ly@@497 T@U) (|s#0@@84| T@U) ) (!  (=> (and (= (type $ly@@497) LayerTypeType) (= (type |s#0@@84|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum ($LS $ly@@497) |s#0@@84|) (Byte__Order.__default.maximum $ly@@497 |s#0@@84|))) :qid |totalord.796:22| :skolemid |3164| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@497) |s#0@@84|)) )))
(assert (forall (($ly@@498 T@U) (|s#0@@85| T@U) ) (!  (=> (and (= (type $ly@@498) LayerTypeType) (= (type |s#0@@85|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum $ly@@498 |s#0@@85|) (Byte__Order.__default.maximum $LZ |s#0@@85|))) :qid |totalord.796:22| :skolemid |3165| :pattern ( (Byte__Order.__default.maximum (AsFuelBottom $ly@@498) |s#0@@85|)) )))
(assert  (=> true (forall (($ly@@499 T@U) (|s#0@@86| T@U) ) (!  (=> (and (and (= (type $ly@@499) LayerTypeType) (= (type |s#0@@86|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@86|) (and ($Is |s#0@@86| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@86|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@86| ($Box (int_2_U (Byte__Order.__default.maximum $ly@@499 |s#0@@86|))))) (forall ((|y#0@@7| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@7|) (< |y#0@@7| 256)) (U_2_bool (MapType0Select |s#0@@86| ($Box (int_2_U |y#0@@7|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@7| (Byte__Order.__default.maximum $ly@@499 |s#0@@86|))) :qid |totalord.799:18| :skolemid |3166| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@7| (Byte__Order.__default.maximum $ly@@499 |s#0@@86|))) :pattern ( (MapType0Select |s#0@@86| ($Box (int_2_U |y#0@@7|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.maximum $ly@@499 |s#0@@86|)) (< (Byte__Order.__default.maximum $ly@@499 |s#0@@86|) 256)))) :qid |totalord.796:22| :skolemid |3167| :pattern ( (Byte__Order.__default.maximum $ly@@499 |s#0@@86|)) ))))
(assert (forall (($ly@@500 T@U) ($Heap@@42 T@U) (|s#0@@87| T@U) ) (!  (=> (and (and (and (= (type $ly@@500) LayerTypeType) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |s#0@@87|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@42) ($Is |s#0@@87| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.maximum#requires| $ly@@500 |s#0@@87|) (>= (|Set#Card| |s#0@@87|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@87|) (LitInt 1)) (|Byte__Order.__default.maximum#requires| $ly@@500 |s#0@@87|)))) :qid |totalord.796:22| :skolemid |3168| :pattern ( (|Byte__Order.__default.maximum#requires| $ly@@500 |s#0@@87|) ($IsGoodHeap $Heap@@42)) )))
(assert (forall ((s@@47 T@U) ) (!  (=> (and (= (type s@@47) (MapType0Type BoxType boolType)) (|$let#10$canCall| s@@47)) (and (and (<= (LitInt 0) (|$let#10_a| s@@47)) (< (|$let#10_a| s@@47) 256)) (U_2_bool (MapType0Select s@@47 ($Box (int_2_U (|$let#10_a| s@@47))))))) :qid |totalord.801:5| :skolemid |3169| :pattern ( (|$let#10_a| s@@47)) )))
(assert  (=> true (forall (($ly@@501 T@U) ($Heap@@43 T@U) (|s#0@@88| T@U) ) (!  (=> (and (and (and (= (type $ly@@501) LayerTypeType) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |s#0@@88|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@88|) (and (and ($IsGoodHeap $Heap@@43) ($Is |s#0@@88| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@88|) (LitInt 1))))) (and (and (|$let#10$canCall| |s#0@@88|) (let ((|s'#0@@0| (|Set#Difference| |s#0@@88| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#10_a| |s#0@@88|))))))) (=> (not (|Set#Equal| |s'#0@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#0@@0|) (let ((|m'#0@@11| (Byte__Order.__default.maximum $ly@@501 |s'#0@@0|))) (|Byte__Order.__default.lt#canCall| |m'#0@@11| (|$let#10_a| |s#0@@88|))))))) (= (Byte__Order.__default.maximum ($LS $ly@@501) |s#0@@88|) (let ((|a#0@@112| (|$let#10_a| |s#0@@88|))) (let ((|s'#1@@0| (|Set#Difference| |s#0@@88| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@112|)))))) (ite (|Set#Equal| |s'#1@@0| (|Set#Empty| BoxType)) |a#0@@112| (let ((|m'#1@@2| (Byte__Order.__default.maximum $ly@@501 |s'#1@@0|))) (ite (Byte__Order.__default.lt |m'#1@@2| |a#0@@112|) |a#0@@112| |m'#1@@2|)))))))) :qid |totalord.796:22| :skolemid |3170| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@501) |s#0@@88|) ($IsGoodHeap $Heap@@43)) ))))
(assert  (=> true (forall (($ly@@502 T@U) ($Heap@@44 T@U) (|s#0@@89| T@U) ) (!  (=> (and (and (and (= (type $ly@@502) LayerTypeType) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |s#0@@89|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@89|)) (and (and ($IsGoodHeap $Heap@@44) ($Is |s#0@@89| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@89|)) (LitInt 1))))) (and (and (|$let#10$canCall| (Lit |s#0@@89|)) (let ((|s'#2@@0| (|Set#Difference| |s#0@@89| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#10_a| (Lit |s#0@@89|)))))))) (=> (not (|Set#Equal| |s'#2@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#2@@0|) (let ((|m'#2@@1| (Byte__Order.__default.maximum ($LS $ly@@502) |s'#2@@0|))) (|Byte__Order.__default.lt#canCall| |m'#2@@1| (|$let#10_a| (Lit |s#0@@89|)))))))) (= (Byte__Order.__default.maximum ($LS $ly@@502) (Lit |s#0@@89|)) (let ((|a#1@@2| (|$let#10_a| (Lit |s#0@@89|)))) (let ((|s'#3@@0| (|Set#Difference| |s#0@@89| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@2|)))))) (ite (|Set#Equal| |s'#3@@0| (|Set#Empty| BoxType)) |a#1@@2| (let ((|m'#3@@0| (Byte__Order.__default.maximum ($LS $ly@@502) |s'#3@@0|))) (ite (Byte__Order.__default.lt |m'#3@@0| |a#1@@2|) |a#1@@2| |m'#3@@0|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |3171| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@502) (Lit |s#0@@89|)) ($IsGoodHeap $Heap@@44)) ))))
(assert (forall ((arg0@@467 T@U) (arg1@@277 T@U) ) (! (= (type (Byte__Order.__default.maximumOpt arg0@@467 arg1@@277)) DatatypeTypeType) :qid |funType:Byte__Order.__default.maximumOpt| :pattern ( (Byte__Order.__default.maximumOpt arg0@@467 arg1@@277)) )))
(assert (forall (($ly@@503 T@U) (|s#0@@90| T@U) ) (!  (=> (and (= (type $ly@@503) LayerTypeType) (= (type |s#0@@90|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@503) |s#0@@90|) (Byte__Order.__default.maximumOpt $ly@@503 |s#0@@90|))) :qid |totalord.817:22| :skolemid |3172| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@503) |s#0@@90|)) )))
(assert (forall (($ly@@504 T@U) (|s#0@@91| T@U) ) (!  (=> (and (= (type $ly@@504) LayerTypeType) (= (type |s#0@@91|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt $ly@@504 |s#0@@91|) (Byte__Order.__default.maximumOpt $LZ |s#0@@91|))) :qid |totalord.817:22| :skolemid |3173| :pattern ( (Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@504) |s#0@@91|)) )))
(assert  (=> true (forall (($ly@@505 T@U) (|s#0@@92| T@U) ) (!  (=> (and (and (= (type $ly@@505) LayerTypeType) (= (type |s#0@@92|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@92|) ($Is |s#0@@92| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@505 |s#0@@92|)) (U_2_bool (MapType0Select |s#0@@92| (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@505 |s#0@@92|))))) (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@505 |s#0@@92|)) (forall ((|y#0@@8| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@8|) (< |y#0@@8| 256)) (U_2_bool (MapType0Select |s#0@@92| ($Box (int_2_U |y#0@@8|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@8| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@505 |s#0@@92|)))))) :qid |totalord.819:30| :skolemid |3174| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@8| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@505 |s#0@@92|)))))) :pattern ( (MapType0Select |s#0@@92| ($Box (int_2_U |y#0@@8|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.maximumOpt $ly@@505 |s#0@@92|)) (|Set#Equal| |s#0@@92| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.maximumOpt $ly@@505 |s#0@@92|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalord.817:22| :skolemid |3175| :pattern ( (Byte__Order.__default.maximumOpt $ly@@505 |s#0@@92|)) ))))
(assert (forall (($ly@@506 T@U) (|s#0@@93| T@U) ) (!  (=> (and (and (= (type $ly@@506) LayerTypeType) (= (type |s#0@@93|) (MapType0Type BoxType boolType))) ($Is |s#0@@93| (TSet Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.maximumOpt#requires| $ly@@506 |s#0@@93|) true) (=> true (|Byte__Order.__default.maximumOpt#requires| $ly@@506 |s#0@@93|)))) :qid |totalord.817:22| :skolemid |3176| :pattern ( (|Byte__Order.__default.maximumOpt#requires| $ly@@506 |s#0@@93|)) )))
(assert (= (type StartFuel_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@507 T@U) (|s#0@@94| T@U) ) (!  (=> (and (and (= (type $ly@@507) LayerTypeType) (= (type |s#0@@94|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@94|) ($Is |s#0@@94| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@94| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| |s#0@@94|)) (= (Byte__Order.__default.maximumOpt ($LS $ly@@507) |s#0@@94|) (ite (|Set#Equal| |s#0@@94| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum |s#0@@94|)))))))) :qid |totalord.817:22| :skolemid |3177| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@507) |s#0@@94|)) ))))
(assert  (=> true (forall (($ly@@508 T@U) (|s#0@@95| T@U) ) (!  (=> (and (and (= (type $ly@@508) LayerTypeType) (= (type |s#0@@95|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@95|)) ($Is |s#0@@95| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@95| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@95|))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@508) (Lit |s#0@@95|)) (ite (|Set#Equal| |s#0@@95| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum (Lit |s#0@@95|))))))))) :qid |totalord.817:22| :weight 3 :skolemid |3178| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@508) (Lit |s#0@@95|))) ))))
(assert  (=> true (forall ((|a#0@@113| Int) (|b#0@@91| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@113| |b#0@@91|) (and (and (<= (LitInt 0) |a#0@@113|) (< |a#0@@113| 256)) (and (<= (LitInt 0) |b#0@@91|) (< |b#0@@91| 256)))) true) :qid |totalord.12:15| :skolemid |3179| :pattern ( (Byte__Order.__default.lt |a#0@@113| |b#0@@91|)) ))))
(assert (forall ((|a#0@@114| Int) (|b#0@@92| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@114|) (< |a#0@@114| 256)) (and (<= (LitInt 0) |b#0@@92|) (< |b#0@@92| 256))) (and (=> (|Byte__Order.__default.lt#requires| |a#0@@114| |b#0@@92|) true) (=> true (|Byte__Order.__default.lt#requires| |a#0@@114| |b#0@@92|)))) :qid |totalord.12:15| :skolemid |3180| :pattern ( (|Byte__Order.__default.lt#requires| |a#0@@114| |b#0@@92|)) )))
(assert  (=> true (forall ((|a#0@@115| Int) (|b#0@@93| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@115| |b#0@@93|) (and (and (<= (LitInt 0) |a#0@@115|) (< |a#0@@115| 256)) (and (<= (LitInt 0) |b#0@@93|) (< |b#0@@93| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@115| |b#0@@93|) (and (=> (Byte__Order.__default.lt |a#0@@115| |b#0@@93|) (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@115| |b#0@@93|) (not (= |a#0@@115| |b#0@@93|)))) (=> (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@115| |b#0@@93|) (not (= |a#0@@115| |b#0@@93|))) (Byte__Order.__default.lt |a#0@@115| |b#0@@93|))))) :qid |totalord.12:15| :skolemid |3181| :pattern ( (Byte__Order.__default.lt |a#0@@115| |b#0@@93|)) ))))
(assert  (=> true (forall ((|a#0@@116| Int) (|b#0@@94| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| (LitInt |a#0@@116|) (LitInt |b#0@@94|)) (and (and (<= (LitInt 0) |a#0@@116|) (< |a#0@@116| 256)) (and (<= (LitInt 0) |b#0@@94|) (< |b#0@@94| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@116|) (LitInt |b#0@@94|)) (and (=> (Byte__Order.__default.lt (LitInt |a#0@@116|) (LitInt |b#0@@94|)) (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@116|) (LitInt |b#0@@94|)) (not (= |a#0@@116| |b#0@@94|)))) (=> (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@116|) (LitInt |b#0@@94|)) (not (= |a#0@@116| |b#0@@94|))) (Byte__Order.__default.lt (LitInt |a#0@@116|) (LitInt |b#0@@94|)))))) :qid |totalord.12:15| :weight 3 :skolemid |3182| :pattern ( (Byte__Order.__default.lt (LitInt |a#0@@116|) (LitInt |b#0@@94|))) ))))
(assert  (=> true (forall ((|a#0@@117| Int) (|b#0@@95| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@117| |b#0@@95|) (and (and (<= (LitInt 0) |a#0@@117|) (< |a#0@@117| 256)) (and (<= (LitInt 0) |b#0@@95|) (< |b#0@@95| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Min |a#0@@117| |b#0@@95|)) (< (Byte__Order.__default.Min |a#0@@117| |b#0@@95|) 256))) :qid |totalord.24:16| :skolemid |3183| :pattern ( (Byte__Order.__default.Min |a#0@@117| |b#0@@95|)) ))))
(assert (forall ((|a#0@@118| Int) (|b#0@@96| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@118|) (< |a#0@@118| 256)) (and (<= (LitInt 0) |b#0@@96|) (< |b#0@@96| 256))) (and (=> (|Byte__Order.__default.Min#requires| |a#0@@118| |b#0@@96|) true) (=> true (|Byte__Order.__default.Min#requires| |a#0@@118| |b#0@@96|)))) :qid |totalord.24:16| :skolemid |3184| :pattern ( (|Byte__Order.__default.Min#requires| |a#0@@118| |b#0@@96|)) )))
(assert  (=> true (forall ((|a#0@@119| Int) (|b#0@@97| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@119| |b#0@@97|) (and (and (<= (LitInt 0) |a#0@@119|) (< |a#0@@119| 256)) (and (<= (LitInt 0) |b#0@@97|) (< |b#0@@97| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@119| |b#0@@97|) (= (Byte__Order.__default.Min |a#0@@119| |b#0@@97|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@119| |b#0@@97|) |a#0@@119| |b#0@@97|)))) :qid |totalord.24:16| :skolemid |3185| :pattern ( (Byte__Order.__default.Min |a#0@@119| |b#0@@97|)) ))))
(assert  (=> true (forall ((|a#0@@120| Int) (|b#0@@98| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| (LitInt |a#0@@120|) (LitInt |b#0@@98|)) (and (and (<= (LitInt 0) |a#0@@120|) (< |a#0@@120| 256)) (and (<= (LitInt 0) |b#0@@98|) (< |b#0@@98| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@120|) (LitInt |b#0@@98|)) (= (Byte__Order.__default.Min (LitInt |a#0@@120|) (LitInt |b#0@@98|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@120|) (LitInt |b#0@@98|)) |a#0@@120| |b#0@@98|)))) :qid |totalord.24:16| :weight 3 :skolemid |3186| :pattern ( (Byte__Order.__default.Min (LitInt |a#0@@120|) (LitInt |b#0@@98|))) ))))
(assert  (=> true (forall ((|a#0@@121| Int) (|b#0@@99| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@121| |b#0@@99|) (and (and (<= (LitInt 0) |a#0@@121|) (< |a#0@@121| 256)) (and (<= (LitInt 0) |b#0@@99|) (< |b#0@@99| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Max |a#0@@121| |b#0@@99|)) (< (Byte__Order.__default.Max |a#0@@121| |b#0@@99|) 256))) :qid |totalord.29:16| :skolemid |3187| :pattern ( (Byte__Order.__default.Max |a#0@@121| |b#0@@99|)) ))))
(assert (forall ((|a#0@@122| Int) (|b#0@@100| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@122|) (< |a#0@@122| 256)) (and (<= (LitInt 0) |b#0@@100|) (< |b#0@@100| 256))) (and (=> (|Byte__Order.__default.Max#requires| |a#0@@122| |b#0@@100|) true) (=> true (|Byte__Order.__default.Max#requires| |a#0@@122| |b#0@@100|)))) :qid |totalord.29:16| :skolemid |3188| :pattern ( (|Byte__Order.__default.Max#requires| |a#0@@122| |b#0@@100|)) )))
(assert  (=> true (forall ((|a#0@@123| Int) (|b#0@@101| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@123| |b#0@@101|) (and (and (<= (LitInt 0) |a#0@@123|) (< |a#0@@123| 256)) (and (<= (LitInt 0) |b#0@@101|) (< |b#0@@101| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@123| |b#0@@101|) (= (Byte__Order.__default.Max |a#0@@123| |b#0@@101|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@123| |b#0@@101|) |b#0@@101| |a#0@@123|)))) :qid |totalord.29:16| :skolemid |3189| :pattern ( (Byte__Order.__default.Max |a#0@@123| |b#0@@101|)) ))))
(assert  (=> true (forall ((|a#0@@124| Int) (|b#0@@102| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| (LitInt |a#0@@124|) (LitInt |b#0@@102|)) (and (and (<= (LitInt 0) |a#0@@124|) (< |a#0@@124| 256)) (and (<= (LitInt 0) |b#0@@102|) (< |b#0@@102| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@124|) (LitInt |b#0@@102|)) (= (Byte__Order.__default.Max (LitInt |a#0@@124|) (LitInt |b#0@@102|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@124|) (LitInt |b#0@@102|)) |b#0@@102| |a#0@@124|)))) :qid |totalord.29:16| :weight 3 :skolemid |3190| :pattern ( (Byte__Order.__default.Max (LitInt |a#0@@124|) (LitInt |b#0@@102|))) ))))
(assert (forall (($ly@@509 T@U) (|run#0@@92| T@U) ) (!  (=> (and (= (type $ly@@509) LayerTypeType) (= (type |run#0@@92|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@509) |run#0@@92|) (Byte__Order.__default.IsSorted $ly@@509 |run#0@@92|)) (=> (Byte__Order.__default.IsSorted $ly@@509 |run#0@@92|) (Byte__Order.__default.IsSorted ($LS $ly@@509) |run#0@@92|)))) :qid |totalord.41:23| :skolemid |3191| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@509) |run#0@@92|)) )))
(assert (forall (($ly@@510 T@U) (|run#0@@93| T@U) ) (!  (=> (and (= (type $ly@@510) LayerTypeType) (= (type |run#0@@93|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsSorted $ly@@510 |run#0@@93|) (Byte__Order.__default.IsSorted $LZ |run#0@@93|)) (=> (Byte__Order.__default.IsSorted $LZ |run#0@@93|) (Byte__Order.__default.IsSorted $ly@@510 |run#0@@93|)))) :qid |totalord.41:23| :skolemid |3192| :pattern ( (Byte__Order.__default.IsSorted (AsFuelBottom $ly@@510) |run#0@@93|)) )))
(assert  (=> true (forall (($ly@@511 T@U) (|run#0@@94| T@U) ) (!  (=> (and (and (= (type $ly@@511) LayerTypeType) (= (type |run#0@@94|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@94|) ($Is |run#0@@94| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| |run#0@@94|) (LitInt 0)) (Byte__Order.__default.IsSorted $ly@@511 |run#0@@94|)) (=> (= (|Seq#Length| |run#0@@94|) (LitInt 1)) (Byte__Order.__default.IsSorted $ly@@511 |run#0@@94|)))) :qid |totalord.41:23| :skolemid |3193| :pattern ( (Byte__Order.__default.IsSorted $ly@@511 |run#0@@94|)) ))))
(assert (forall (($ly@@512 T@U) (|run#0@@95| T@U) ) (!  (=> (and (and (= (type $ly@@512) LayerTypeType) (= (type |run#0@@95|) (SeqType BoxType))) ($Is |run#0@@95| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsSorted#requires| $ly@@512 |run#0@@95|) true) (=> true (|Byte__Order.__default.IsSorted#requires| $ly@@512 |run#0@@95|)))) :qid |totalord.41:23| :skolemid |3194| :pattern ( (|Byte__Order.__default.IsSorted#requires| $ly@@512 |run#0@@95|)) )))
(assert  (=> true (forall (($ly@@513 T@U) (|run#0@@96| T@U) ) (!  (=> (and (and (= (type $ly@@513) LayerTypeType) (= (type |run#0@@96|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@96|) ($Is |run#0@@96| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@115| Int) (|j#0@@12| Int) ) (!  (=> (< |j#0@@12| (|Seq#Length| |run#0@@96|)) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@115|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@12|))))) :qid |totalord.45:12| :skolemid |3195| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@12|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@115|))) )) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@513) |run#0@@96|) (forall ((|i#0@@116| Int) (|j#0@@13| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@116|) (<= |i#0@@116| |j#0@@13|)) (< |j#0@@13| (|Seq#Length| |run#0@@96|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@116|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@13|)))))) :qid |totalord.45:12| :skolemid |3196| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@13|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@116|))) ))) (=> (forall ((|i#0@@117| Int) (|j#0@@14| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@117|) (<= |i#0@@117| |j#0@@14|)) (< |j#0@@14| (|Seq#Length| |run#0@@96|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@117|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@14|)))))) :qid |totalord.45:12| :skolemid |3196| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@14|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@117|))) )) (Byte__Order.__default.IsSorted ($LS $ly@@513) |run#0@@96|))))) :qid |totalord.41:23| :skolemid |3197| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@513) |run#0@@96|)) ))))
(assert  (=> true (forall (($ly@@514 T@U) (|run#0@@97| T@U) ) (!  (=> (and (and (= (type $ly@@514) LayerTypeType) (= (type |run#0@@97|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@97|)) ($Is |run#0@@97| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@38| Int) (|j#1@@2| Int) ) (!  (=> (< |j#1@@2| (|Seq#Length| (Lit |run#0@@97|))) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#1@@38|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#1@@2|))))) :qid |totalord.45:12| :skolemid |3198| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#1@@2|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#1@@38|))) )) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@514) (Lit |run#0@@97|)) (forall ((|i#1@@39| Int) (|j#1@@3| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@39|) (<= |i#1@@39| |j#1@@3|)) (< |j#1@@3| (|Seq#Length| (Lit |run#0@@97|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#1@@39|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#1@@3|)))))) :qid |totalord.45:12| :skolemid |3199| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#1@@3|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#1@@39|))) ))) (=> (forall ((|i#1@@40| Int) (|j#1@@4| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@40|) (<= |i#1@@40| |j#1@@4|)) (< |j#1@@4| (|Seq#Length| (Lit |run#0@@97|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#1@@40|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#1@@4|)))))) :qid |totalord.45:12| :skolemid |3199| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#1@@4|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#1@@40|))) )) (Byte__Order.__default.IsSorted ($LS $ly@@514) (Lit |run#0@@97|)))))) :qid |totalord.41:23| :weight 3 :skolemid |3200| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@514) (Lit |run#0@@97|))) ))))
(assert  (=> true (forall ((|run#0@@98| T@U) ) (!  (=> (and (= (type |run#0@@98|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@98|) ($Is |run#0@@98| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalord.48:38| :skolemid |3201| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@98|)) ))))
(assert (forall ((|run#0@@99| T@U) ) (!  (=> (and (= (type |run#0@@99|) (SeqType BoxType)) ($Is |run#0@@99| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|) true) (=> true (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|)))) :qid |totalord.48:38| :skolemid |3202| :pattern ( (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|)) )))
(assert  (=> true (forall ((|run#0@@100| T@U) ) (!  (=> (and (= (type |run#0@@100|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@100|) ($Is |run#0@@100| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@118| Int) (|j#0@@15| Int) ) (!  (=> (< |j#0@@15| (|Seq#Length| |run#0@@100|)) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@118|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@15|))))) :qid |totalord.50:12| :skolemid |3203| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@15|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@118|))) )) (and (=> (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|) (forall ((|i#0@@119| Int) (|j#0@@16| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@119|) (< |i#0@@119| |j#0@@16|)) (< |j#0@@16| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@119|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@16|)))))) :qid |totalord.50:12| :skolemid |3204| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@16|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@119|))) ))) (=> (forall ((|i#0@@120| Int) (|j#0@@17| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@120|) (< |i#0@@120| |j#0@@17|)) (< |j#0@@17| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@120|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@17|)))))) :qid |totalord.50:12| :skolemid |3204| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@17|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@120|))) )) (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|))))) :qid |totalord.48:38| :skolemid |3205| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|)) ))))
(assert  (=> true (forall ((|run#0@@101| T@U) ) (!  (=> (and (= (type |run#0@@101|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@101|)) ($Is |run#0@@101| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@41| Int) (|j#1@@5| Int) ) (!  (=> (< |j#1@@5| (|Seq#Length| (Lit |run#0@@101|))) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#1@@41|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#1@@5|))))) :qid |totalord.50:12| :skolemid |3206| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#1@@5|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#1@@41|))) )) (and (=> (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|)) (forall ((|i#1@@42| Int) (|j#1@@6| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@42|) (< |i#1@@42| |j#1@@6|)) (< |j#1@@6| (|Seq#Length| (Lit |run#0@@101|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#1@@42|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#1@@6|)))))) :qid |totalord.50:12| :skolemid |3207| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#1@@6|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#1@@42|))) ))) (=> (forall ((|i#1@@43| Int) (|j#1@@7| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@43|) (< |i#1@@43| |j#1@@7|)) (< |j#1@@7| (|Seq#Length| (Lit |run#0@@101|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#1@@43|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#1@@7|)))))) :qid |totalord.50:12| :skolemid |3207| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#1@@7|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#1@@43|))) )) (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|)))))) :qid |totalord.48:38| :weight 3 :skolemid |3208| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|))) ))))
(assert (forall (($ly@@515 T@U) (|run#0@@102| T@U) ) (!  (=> (and (= (type $ly@@515) LayerTypeType) (= (type |run#0@@102|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@515) |run#0@@102|) (Byte__Order.__default.IsStrictlySorted $ly@@515 |run#0@@102|)) (=> (Byte__Order.__default.IsStrictlySorted $ly@@515 |run#0@@102|) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@515) |run#0@@102|)))) :qid |totalord.64:23| :skolemid |3209| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@515) |run#0@@102|)) )))
(assert (forall (($ly@@516 T@U) (|run#0@@103| T@U) ) (!  (=> (and (= (type $ly@@516) LayerTypeType) (= (type |run#0@@103|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsStrictlySorted $ly@@516 |run#0@@103|) (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@103|)) (=> (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@103|) (Byte__Order.__default.IsStrictlySorted $ly@@516 |run#0@@103|)))) :qid |totalord.64:23| :skolemid |3210| :pattern ( (Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@516) |run#0@@103|)) )))
(assert  (=> true (forall (($ly@@517 T@U) (|run#0@@104| T@U) ) (!  (=> (and (and (= (type $ly@@517) LayerTypeType) (= (type |run#0@@104|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@104|) ($Is |run#0@@104| (TSeq Tclass.NativeTypes.byte)))) (and (and (=> (= (|Seq#Length| |run#0@@104|) (LitInt 0)) (Byte__Order.__default.IsStrictlySorted $ly@@517 |run#0@@104|)) (=> (= (|Seq#Length| |run#0@@104|) (LitInt 1)) (Byte__Order.__default.IsStrictlySorted $ly@@517 |run#0@@104|))) (=> (Byte__Order.__default.IsStrictlySorted $ly@@517 |run#0@@104|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@104|)))) :qid |totalord.64:23| :skolemid |3211| :pattern ( (Byte__Order.__default.IsStrictlySorted $ly@@517 |run#0@@104|)) ))))
(assert (forall (($ly@@518 T@U) (|run#0@@105| T@U) ) (!  (=> (and (and (= (type $ly@@518) LayerTypeType) (= (type |run#0@@105|) (SeqType BoxType))) ($Is |run#0@@105| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@518 |run#0@@105|) true) (=> true (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@518 |run#0@@105|)))) :qid |totalord.64:23| :skolemid |3212| :pattern ( (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@518 |run#0@@105|)) )))
(assert  (=> true (forall (($ly@@519 T@U) (|run#0@@106| T@U) ) (!  (=> (and (and (= (type $ly@@519) LayerTypeType) (= (type |run#0@@106|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@106|) ($Is |run#0@@106| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@106|) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@519) |run#0@@106|) (let ((|b#0@@103| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@106|))) (ite |b#0@@103| |b#0@@103| |b#0@@103|))) (=> (let ((|b#0@@104| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@106|))) (ite |b#0@@104| |b#0@@104| |b#0@@104|)) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@519) |run#0@@106|))))) :qid |totalord.64:23| :skolemid |3213| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@519) |run#0@@106|)) ))))
(assert  (=> true (forall (($ly@@520 T@U) (|run#0@@107| T@U) ) (!  (=> (and (and (= (type $ly@@520) LayerTypeType) (= (type |run#0@@107|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@107|)) ($Is |run#0@@107| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@107|)) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@520) (Lit |run#0@@107|)) (let ((|b#1@@5| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@107|))))))) (ite |b#1@@5| |b#1@@5| |b#1@@5|))) (=> (let ((|b#1@@6| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@107|))))))) (ite |b#1@@6| |b#1@@6| |b#1@@6|)) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@520) (Lit |run#0@@107|)))))) :qid |totalord.64:23| :weight 3 :skolemid |3214| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@520) (Lit |run#0@@107|))) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order.__default) Tagclass.Lexicographic__Byte__Order.__default))
(assert (forall ((bx@@140 T@U) ) (!  (=> (and (= (type bx@@140) BoxType) ($IsBox bx@@140 Tclass.Lexicographic__Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@140)) bx@@140) ($Is ($Unbox refType bx@@140) Tclass.Lexicographic__Byte__Order.__default))) :qid |unknown.0:0| :skolemid |3215| :pattern ( ($IsBox bx@@140 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@32 T@U) ) (!  (=> (= (type $o@@32) refType) (and (=> ($Is $o@@32 Tclass.Lexicographic__Byte__Order.__default) (or (= $o@@32 null) (= (dtype $o@@32) Tclass.Lexicographic__Byte__Order.__default))) (=> (or (= $o@@32 null) (= (dtype $o@@32) Tclass.Lexicographic__Byte__Order.__default)) ($Is $o@@32 Tclass.Lexicographic__Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |3216| :pattern ( ($Is $o@@32 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@33 T@U) ($h@@57 T@U) ) (!  (=> (and (= (type $o@@33) refType) (= (type $h@@57) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@33 Tclass.Lexicographic__Byte__Order.__default $h@@57) (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@57 $o@@33) alloc)))) (=> (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@57 $o@@33) alloc))) ($IsAlloc $o@@33 Tclass.Lexicographic__Byte__Order.__default $h@@57)))) :qid |unknown.0:0| :skolemid |3217| :pattern ( ($IsAlloc $o@@33 Tclass.Lexicographic__Byte__Order.__default $h@@57)) )))
(assert (= (type Lexicographic__Byte__Order.__default.SomeElement) (SeqType BoxType)))
(assert  (=> true (=> true ($Is Lexicographic__Byte__Order.__default.SomeElement (TSeq Tclass.NativeTypes.byte)))))
(assert  (=> |Lexicographic__Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true |Lexicographic__Byte__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|a#0@@125| T@U) (|b#0@@105| T@U) ) (!  (=> (and (and (= (type |a#0@@125|) (SeqType BoxType)) (= (type |b#0@@105|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@125| |b#0@@105|) (and ($Is |a#0@@125| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@105| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (and (and (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@105|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@105|)) (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@105|) (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@105|))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@105|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@105| |a#0@@125|))) (forall ((|a#1@@3| T@U) (|b#1@@7| T@U) (|c#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |a#1@@3|) (SeqType BoxType)) (= (type |b#1@@7|) (SeqType BoxType))) (= (type |c#0@@11|) (SeqType BoxType))) (and (and ($Is |a#1@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#1@@7| (TSeq Tclass.NativeTypes.byte))) ($Is |c#0@@11| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@7|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@7| |c#0@@11|))) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|)) :qid |totalord.20:18| :skolemid |3218| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@7| |c#0@@11|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#1@@7| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@7|)) ))) (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@105|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@105|)) (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@105|) (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@105|)))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@105|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@105| |a#0@@125|))) (=> (and (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@105|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@105| |a#0@@125|)) (|Seq#Equal| |a#0@@125| |b#0@@105|))) (forall ((|a#2@@0| T@U) (|b#2@@0| T@U) (|c#1@@0| T@U) ) (!  (=> (and (and (and (and (= (type |a#2@@0|) (SeqType BoxType)) (= (type |b#2@@0|) (SeqType BoxType))) (= (type |c#1@@0|) (SeqType BoxType))) (and (and ($Is |a#2@@0| (TSeq Tclass.NativeTypes.byte)) ($Is |b#2@@0| (TSeq Tclass.NativeTypes.byte))) ($Is |c#1@@0| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|))) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|)) :qid |totalord.188:18| :skolemid |3219| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|)) )))) :qid |totalord.17:16| :skolemid |3220| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@105|)) ))))
(assert (forall ((|a#0@@126| T@U) (|b#0@@106| T@U) ) (!  (=> (and (and (= (type |a#0@@126|) (SeqType BoxType)) (= (type |b#0@@106|) (SeqType BoxType))) (and ($Is |a#0@@126| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@106| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@126| |b#0@@106|) true) (=> true (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@126| |b#0@@106|)))) :qid |totalord.17:16| :skolemid |3221| :pattern ( (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@126| |b#0@@106|)) )))
(assert  (=> true (forall ((|a#0@@127| T@U) (|b#0@@107| T@U) ) (!  (=> (and (and (= (type |a#0@@127|) (SeqType BoxType)) (= (type |b#0@@107|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@127| |b#0@@107|) (and ($Is |a#0@@127| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@107| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@127| |b#0@@107|) (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@127| |b#0@@107|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@127| |b#0@@107|)) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@127| |b#0@@107|) (Lexicographic__Byte__Order.__default.lte |a#0@@127| |b#0@@107|))))) :qid |totalord.17:16| :skolemid |3222| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@127| |b#0@@107|)) ))))
(assert  (=> true (forall ((|a#0@@128| T@U) (|b#0@@108| T@U) ) (!  (=> (and (and (= (type |a#0@@128|) (SeqType BoxType)) (= (type |b#0@@108|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@128|) (Lit |b#0@@108|)) (and ($Is |a#0@@128| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@108| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@128|) (Lit |b#0@@108|)) (and (=> (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@128|) (Lit |b#0@@108|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@128|) (Lit |b#0@@108|))) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@128|) (Lit |b#0@@108|)) (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@128|) (Lit |b#0@@108|)))))) :qid |totalord.17:16| :weight 3 :skolemid |3223| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@128|) (Lit |b#0@@108|))) ))))
(assert  (=> true (forall ((|a#0@@129| T@U) (|b#0@@109| T@U) ) (!  (=> (and (and (= (type |a#0@@129|) (SeqType BoxType)) (= (type |b#0@@109|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@129| |b#0@@109|) (and ($Is |a#0@@129| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@109| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.22:19| :skolemid |3224| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@129| |b#0@@109|)) ))))
(assert (forall ((|a#0@@130| T@U) (|b#0@@110| T@U) ) (!  (=> (and (and (= (type |a#0@@130|) (SeqType BoxType)) (= (type |b#0@@110|) (SeqType BoxType))) (and ($Is |a#0@@130| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@110| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@130| |b#0@@110|) true) (=> true (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@130| |b#0@@110|)))) :qid |totalord.22:19| :skolemid |3225| :pattern ( (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@130| |b#0@@110|)) )))
(assert  (=> true (forall ((|a#0@@131| T@U) (|b#0@@111| T@U) ) (!  (=> (and (and (= (type |a#0@@131|) (SeqType BoxType)) (= (type |b#0@@111|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@131| |b#0@@111|) (and ($Is |a#0@@131| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@111| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@131| |b#0@@111|) (and (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@131| |b#0@@111|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@131| |b#0@@111|)) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@131| |b#0@@111|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@131| |b#0@@111|))))) :qid |totalord.22:19| :skolemid |3226| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@131| |b#0@@111|)) ))))
(assert  (=> true (forall ((|a#0@@132| T@U) (|b#0@@112| T@U) ) (!  (=> (and (and (= (type |a#0@@132|) (SeqType BoxType)) (= (type |b#0@@112|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| (Lit |a#0@@132|) (Lit |b#0@@112|)) (and ($Is |a#0@@132| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@112| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@132|) (Lit |b#0@@112|)) (and (=> (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@132|) (Lit |b#0@@112|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@132|) (Lit |b#0@@112|))) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@132|) (Lit |b#0@@112|)) (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@132|) (Lit |b#0@@112|)))))) :qid |totalord.22:19| :weight 3 :skolemid |3227| :pattern ( (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@132|) (Lit |b#0@@112|))) ))))
(assert (forall (($ly@@521 T@U) (|run#0@@108| T@U) (|needle#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@521) LayerTypeType) (= (type |run#0@@108|) (SeqType BoxType))) (= (type |needle#0@@37|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@521) |run#0@@108| |needle#0@@37|) (Lexicographic__Byte__Order.__default.LargestLte $ly@@521 |run#0@@108| |needle#0@@37|))) :qid |totalord.253:12| :skolemid |3228| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@521) |run#0@@108| |needle#0@@37|)) )))
(assert (forall (($ly@@522 T@U) (|run#0@@109| T@U) (|needle#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@522) LayerTypeType) (= (type |run#0@@109|) (SeqType BoxType))) (= (type |needle#0@@38|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte $ly@@522 |run#0@@109| |needle#0@@38|) (Lexicographic__Byte__Order.__default.LargestLte $LZ |run#0@@109| |needle#0@@38|))) :qid |totalord.253:12| :skolemid |3229| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte (AsFuelBottom $ly@@522) |run#0@@109| |needle#0@@38|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@523 T@U) (|run#0@@110| T@U) (|needle#0@@39| T@U) ) (!  (=> (and (and (and (= (type $ly@@523) LayerTypeType) (= (type |run#0@@110|) (SeqType BoxType))) (= (type |needle#0@@39|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@110| |needle#0@@39|) (and (and ($Is |run#0@@110| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@39| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@110|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLte $ly@@523 |run#0@@110| |needle#0@@39|)) (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@523 |run#0@@110| |needle#0@@39|) (|Seq#Length| |run#0@@110|))) (forall ((|i#0@@121| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@121|) (<= |i#0@@121| (Lexicographic__Byte__Order.__default.LargestLte $ly@@523 |run#0@@110| |needle#0@@39|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#0@@121|)) |needle#0@@39|))) :qid |totalord.256:20| :skolemid |3230| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#0@@121|))) ))) (forall ((|i#1@@44| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@523 |run#0@@110| |needle#0@@39|) |i#1@@44|) (< |i#1@@44| (|Seq#Length| |run#0@@110|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@39| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#1@@44|))))) :qid |totalord.257:20| :skolemid |3231| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#1@@44|))) ))) (=> (|Seq#Contains| |run#0@@110| ($Box |needle#0@@39|)) (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.LargestLte $ly@@523 |run#0@@110| |needle#0@@39|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| (Lexicographic__Byte__Order.__default.LargestLte $ly@@523 |run#0@@110| |needle#0@@39|))) |needle#0@@39|))))) :qid |totalord.253:12| :skolemid |3232| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte $ly@@523 |run#0@@110| |needle#0@@39|)) ))))
(assert (forall (($ly@@524 T@U) (|run#0@@111| T@U) (|needle#0@@40| T@U) ) (!  (=> (and (and (and (= (type $ly@@524) LayerTypeType) (= (type |run#0@@111|) (SeqType BoxType))) (= (type |needle#0@@40|) (SeqType BoxType))) (and ($Is |run#0@@111| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@40| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@524 |run#0@@111| |needle#0@@40|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@111|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@111|) (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@524 |run#0@@111| |needle#0@@40|)))) :qid |totalord.253:12| :skolemid |3233| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@524 |run#0@@111| |needle#0@@40|)) )))
(assert  (and (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@525 T@U) (|run#0@@112| T@U) (|needle#0@@41| T@U) ) (!  (=> (and (and (and (= (type $ly@@525) LayerTypeType) (= (type |run#0@@112|) (SeqType BoxType))) (= (type |needle#0@@41|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@112| |needle#0@@41|) (and (and ($Is |run#0@@112| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@41| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@112|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@112|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@112|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@112| (LitInt 1)) |needle#0@@41|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@525) |run#0@@112| |needle#0@@41|) (ite  (or (= (|Seq#Length| |run#0@@112|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte $ly@@525 (|Seq#Drop| |run#0@@112| (LitInt 1)) |needle#0@@41|))))))) :qid |totalord.253:12| :skolemid |3234| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@525) |run#0@@112| |needle#0@@41|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@526 T@U) (|run#0@@113| T@U) (|needle#0@@42| T@U) ) (!  (=> (and (and (and (= (type $ly@@526) LayerTypeType) (= (type |run#0@@113|) (SeqType BoxType))) (= (type |needle#0@@42|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@113|) (Lit |needle#0@@42|)) (and (and ($Is |run#0@@113| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@42| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@113|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@113|) (LitInt 1))) (Lit |needle#0@@42|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@526) (Lit |run#0@@113|) (Lit |needle#0@@42|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@526) (Lit (|Seq#Drop| (Lit |run#0@@113|) (LitInt 1))) (Lit |needle#0@@42|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |3235| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@526) (Lit |run#0@@113|) (Lit |needle#0@@42|))) ))))
(assert (forall (($ly@@527 T@U) (|run#0@@114| T@U) (|needle#0@@43| T@U) ) (!  (=> (and (and (= (type $ly@@527) LayerTypeType) (= (type |run#0@@114|) (SeqType BoxType))) (= (type |needle#0@@43|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@527) |run#0@@114| |needle#0@@43|) (Lexicographic__Byte__Order.__default.LargestLt $ly@@527 |run#0@@114| |needle#0@@43|))) :qid |totalord.356:12| :skolemid |3236| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@527) |run#0@@114| |needle#0@@43|)) )))
(assert (forall (($ly@@528 T@U) (|run#0@@115| T@U) (|needle#0@@44| T@U) ) (!  (=> (and (and (= (type $ly@@528) LayerTypeType) (= (type |run#0@@115|) (SeqType BoxType))) (= (type |needle#0@@44|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt $ly@@528 |run#0@@115| |needle#0@@44|) (Lexicographic__Byte__Order.__default.LargestLt $LZ |run#0@@115| |needle#0@@44|))) :qid |totalord.356:12| :skolemid |3237| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt (AsFuelBottom $ly@@528) |run#0@@115| |needle#0@@44|)) )))
(assert  (=> true (forall (($ly@@529 T@U) (|run#0@@116| T@U) (|needle#0@@45| T@U) ) (!  (=> (and (and (and (= (type $ly@@529) LayerTypeType) (= (type |run#0@@116|) (SeqType BoxType))) (= (type |needle#0@@45|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@116| |needle#0@@45|) (and (and ($Is |run#0@@116| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@45| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@116|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLt $ly@@529 |run#0@@116| |needle#0@@45|)) (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@529 |run#0@@116| |needle#0@@45|) (|Seq#Length| |run#0@@116|))) (forall ((|i#0@@122| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@122|) (<= |i#0@@122| (Lexicographic__Byte__Order.__default.LargestLt $ly@@529 |run#0@@116| |needle#0@@45|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#0@@122|)) |needle#0@@45|))) :qid |totalord.359:20| :skolemid |3238| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#0@@122|))) ))) (forall ((|i#1@@45| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@529 |run#0@@116| |needle#0@@45|) |i#1@@45|) (< |i#1@@45| (|Seq#Length| |run#0@@116|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@45| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#1@@45|))))) :qid |totalord.360:20| :skolemid |3239| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#1@@45|))) ))) (=> (|Seq#Contains| |run#0@@116| ($Box |needle#0@@45|)) (and (< (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@529 |run#0@@116| |needle#0@@45|) 1) (|Seq#Length| |run#0@@116|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@529 |run#0@@116| |needle#0@@45|) 1))) |needle#0@@45|))))) :qid |totalord.356:12| :skolemid |3240| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt $ly@@529 |run#0@@116| |needle#0@@45|)) ))))
(assert (forall (($ly@@530 T@U) (|run#0@@117| T@U) (|needle#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@530) LayerTypeType) (= (type |run#0@@117|) (SeqType BoxType))) (= (type |needle#0@@46|) (SeqType BoxType))) (and ($Is |run#0@@117| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@46| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@530 |run#0@@117| |needle#0@@46|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@117|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@117|) (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@530 |run#0@@117| |needle#0@@46|)))) :qid |totalord.356:12| :skolemid |3241| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@530 |run#0@@117| |needle#0@@46|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@531 T@U) (|run#0@@118| T@U) (|needle#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@531) LayerTypeType) (= (type |run#0@@118|) (SeqType BoxType))) (= (type |needle#0@@47|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@118| |needle#0@@47|) (and (and ($Is |run#0@@118| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@47| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@118|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@118|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@118|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@118| (LitInt 1)) |needle#0@@47|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@531) |run#0@@118| |needle#0@@47|) (ite  (or (= (|Seq#Length| |run#0@@118|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt $ly@@531 (|Seq#Drop| |run#0@@118| (LitInt 1)) |needle#0@@47|))))))) :qid |totalord.356:12| :skolemid |3242| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@531) |run#0@@118| |needle#0@@47|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@532 T@U) (|run#0@@119| T@U) (|needle#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@532) LayerTypeType) (= (type |run#0@@119|) (SeqType BoxType))) (= (type |needle#0@@48|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@119|) (Lit |needle#0@@48|)) (and (and ($Is |run#0@@119| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@48| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@119|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@119|) (LitInt 1))) (Lit |needle#0@@48|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@532) (Lit |run#0@@119|) (Lit |needle#0@@48|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@532) (Lit (|Seq#Drop| (Lit |run#0@@119|) (LitInt 1))) (Lit |needle#0@@48|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |3243| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@532) (Lit |run#0@@119|) (Lit |needle#0@@48|))) ))))
(assert (forall (($ly@@533 T@U) (|run#0@@120| T@U) (|needle#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@533) LayerTypeType) (= (type |run#0@@120|) (SeqType BoxType))) (= (type |needle#0@@49|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@533) |run#0@@120| |needle#0@@49|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@533 |run#0@@120| |needle#0@@49|))) :qid |totalord.388:12| :skolemid |3244| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@533) |run#0@@120| |needle#0@@49|)) )))
(assert (forall (($ly@@534 T@U) (|run#0@@121| T@U) (|needle#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@534) LayerTypeType) (= (type |run#0@@121|) (SeqType BoxType))) (= (type |needle#0@@50|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@534 |run#0@@121| |needle#0@@50|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@121| |needle#0@@50|))) :qid |totalord.388:12| :skolemid |3245| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@534) |run#0@@121| |needle#0@@50|)) )))
(assert  (=> true (forall (($ly@@535 T@U) (|run#0@@122| T@U) (|needle#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@535) LayerTypeType) (= (type |run#0@@122|) (SeqType BoxType))) (= (type |needle#0@@51|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@122| |needle#0@@51|) (and (and ($Is |run#0@@122| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@51| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@122|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@535 |run#0@@122| |needle#0@@51|) (|Seq#Length| |run#0@@122|)) (forall ((|i#0@@123| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@123|) (< |i#0@@123| (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@535 |run#0@@122| |needle#0@@51|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@123|)) |needle#0@@51|)) :qid |totalord.391:20| :skolemid |3246| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@123|))) ))) (forall ((|i#1@@46| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@535 |run#0@@122| |needle#0@@51|) |i#1@@46|) (< |i#1@@46| (|Seq#Length| |run#0@@122|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@51| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@46|)))) :qid |totalord.392:20| :skolemid |3247| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@46|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@535 |run#0@@122| |needle#0@@51|)))) :qid |totalord.388:12| :skolemid |3248| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@535 |run#0@@122| |needle#0@@51|)) ))))
(assert (forall (($ly@@536 T@U) (|run#0@@123| T@U) (|needle#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@536) LayerTypeType) (= (type |run#0@@123|) (SeqType BoxType))) (= (type |needle#0@@52|) (SeqType BoxType))) (and ($Is |run#0@@123| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@52| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@536 |run#0@@123| |needle#0@@52|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@536 |run#0@@123| |needle#0@@52|)))) :qid |totalord.388:12| :skolemid |3249| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@536 |run#0@@123| |needle#0@@52|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@537 T@U) (|run#0@@124| T@U) (|needle#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@537) LayerTypeType) (= (type |run#0@@124|) (SeqType BoxType))) (= (type |needle#0@@53|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@124| |needle#0@@53|) (and (and ($Is |run#0@@124| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@53| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@124|)))) (and (=> (not (= (|Seq#Length| |run#0@@124|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@124|) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|)) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@124|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@124|) |needle#0@@53|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@537) |run#0@@124| |needle#0@@53|) (ite (= (|Seq#Length| |run#0@@124|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|) (|Seq#Length| |run#0@@124|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@537 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@124|) |needle#0@@53|))))))) :qid |totalord.388:12| :skolemid |3250| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@537) |run#0@@124| |needle#0@@53|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@538 T@U) (|run#0@@125| T@U) (|needle#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@538) LayerTypeType) (= (type |run#0@@125|) (SeqType BoxType))) (= (type |needle#0@@54|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@125|) (Lit |needle#0@@54|)) (and (and ($Is |run#0@@125| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@54| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@125|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|))) (Lit |needle#0@@54|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@538) (Lit |run#0@@125|) (Lit |needle#0@@54|)) (ite (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|)) (|Seq#Length| (Lit |run#0@@125|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@538) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|))) (Lit |needle#0@@54|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |3251| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@538) (Lit |run#0@@125|) (Lit |needle#0@@54|))) ))))
(assert (forall (($ly@@539 T@U) (|s#0@@96| T@U) (|key#0@@140| T@U) (|lo#0@@13| Int) (|hi#0@@13| Int) ) (!  (=> (and (and (= (type $ly@@539) LayerTypeType) (= (type |s#0@@96|) (SeqType BoxType))) (= (type |key#0@@140|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@539) |s#0@@96| |key#0@@140| |lo#0@@13| |hi#0@@13|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@539 |s#0@@96| |key#0@@140| |lo#0@@13| |hi#0@@13|))) :qid |totalord.421:12| :skolemid |3252| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@539) |s#0@@96| |key#0@@140| |lo#0@@13| |hi#0@@13|)) )))
(assert (forall (($ly@@540 T@U) (|s#0@@97| T@U) (|key#0@@141| T@U) (|lo#0@@14| Int) (|hi#0@@14| Int) ) (!  (=> (and (and (= (type $ly@@540) LayerTypeType) (= (type |s#0@@97|) (SeqType BoxType))) (= (type |key#0@@141|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@540 |s#0@@97| |key#0@@141| |lo#0@@14| |hi#0@@14|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@97| |key#0@@141| |lo#0@@14| |hi#0@@14|))) :qid |totalord.421:12| :skolemid |3253| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@540) |s#0@@97| |key#0@@141| |lo#0@@14| |hi#0@@14|)) )))
(assert  (=> true (forall (($ly@@541 T@U) (|s#0@@98| T@U) (|key#0@@142| T@U) (|lo#0@@15| Int) (|hi#0@@15| Int) ) (!  (=> (and (and (and (= (type $ly@@541) LayerTypeType) (= (type |s#0@@98|) (SeqType BoxType))) (= (type |key#0@@142|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@98| |key#0@@142| |lo#0@@15| |hi#0@@15|) (and (and ($Is |s#0@@98| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@142| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@15|) (< |lo#0@@15| |hi#0@@15|)) (<= |hi#0@@15| (+ (|Seq#Length| |s#0@@98|) 1))) (=> (> |lo#0@@15| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |lo#0@@15| 1))) |key#0@@142|))) (=> (<= |hi#0@@15| (|Seq#Length| |s#0@@98|)) (Lexicographic__Byte__Order.__default.lte |key#0@@142| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |hi#0@@15| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@541 |s#0@@98| |key#0@@142| |lo#0@@15| |hi#0@@15|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@541 |s#0@@98| |key#0@@142| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@98|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@541 |s#0@@98| |key#0@@142| |lo#0@@15| |hi#0@@15|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@541 |s#0@@98| |key#0@@142| |lo#0@@15| |hi#0@@15|) 1))) |key#0@@142|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@541 |s#0@@98| |key#0@@142| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@98|)) (Lexicographic__Byte__Order.__default.lte |key#0@@142| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@541 |s#0@@98| |key#0@@142| |lo#0@@15| |hi#0@@15|))))))) :qid |totalord.421:12| :skolemid |3254| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@541 |s#0@@98| |key#0@@142| |lo#0@@15| |hi#0@@15|)) ))))
(assert (forall (($ly@@542 T@U) (|s#0@@99| T@U) (|key#0@@143| T@U) (|lo#0@@16| Int) (|hi#0@@16| Int) ) (!  (=> (and (and (and (= (type $ly@@542) LayerTypeType) (= (type |s#0@@99|) (SeqType BoxType))) (= (type |key#0@@143|) (SeqType BoxType))) (and ($Is |s#0@@99| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@143| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@542 |s#0@@99| |key#0@@143| |lo#0@@16| |hi#0@@16|) (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@99|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |lo#0@@16| 1))) |key#0@@143|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@99|)) (Lexicographic__Byte__Order.__default.lte |key#0@@143| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |hi#0@@16| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@99|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |lo#0@@16| 1))) |key#0@@143|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@99|)) (Lexicographic__Byte__Order.__default.lte |key#0@@143| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |hi#0@@16| 1)))))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@542 |s#0@@99| |key#0@@143| |lo#0@@16| |hi#0@@16|)))) :qid |totalord.421:12| :skolemid |3255| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@542 |s#0@@99| |key#0@@143| |lo#0@@16| |hi#0@@16|)) )))
(assert  (=> true (forall (($ly@@543 T@U) (|s#0@@100| T@U) (|key#0@@144| T@U) (|lo#0@@17| Int) (|hi#0@@17| Int) ) (!  (=> (and (and (and (= (type $ly@@543) LayerTypeType) (= (type |s#0@@100|) (SeqType BoxType))) (= (type |key#0@@144|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@100| |key#0@@144| |lo#0@@17| |hi#0@@17|) (and (and ($Is |s#0@@100| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@144| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@17|) (< |lo#0@@17| |hi#0@@17|)) (<= |hi#0@@17| (+ (|Seq#Length| |s#0@@100|) 1))) (=> (> |lo#0@@17| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@100| (- |lo#0@@17| 1))) |key#0@@144|))) (=> (<= |hi#0@@17| (|Seq#Length| |s#0@@100|)) (Lexicographic__Byte__Order.__default.lte |key#0@@144| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@100| (- |hi#0@@17| 1))))))))) (and (=> (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@5| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@100| (- |mid#0@@5| 1))) |key#0@@144|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@100| (- |mid#0@@5| 1))) |key#0@@144|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@100| |key#0@@144| |mid#0@@5| |hi#0@@17|))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@100| (- |mid#0@@5| 1))) |key#0@@144|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@100| |key#0@@144| |lo#0@@17| |mid#0@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@543) |s#0@@100| |key#0@@144| |lo#0@@17| |hi#0@@17|) (ite (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@6| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@100| (- |mid#0@@6| 1))) |key#0@@144|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@543 |s#0@@100| |key#0@@144| |mid#0@@6| |hi#0@@17|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@543 |s#0@@100| |key#0@@144| |lo#0@@17| |mid#0@@6|))) |lo#0@@17|)))) :qid |totalord.421:12| :skolemid |3256| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@543) |s#0@@100| |key#0@@144| |lo#0@@17| |hi#0@@17|)) ))))
(assert  (=> true (forall (($ly@@544 T@U) (|s#0@@101| T@U) (|key#0@@145| T@U) (|lo#0@@18| Int) (|hi#0@@18| Int) ) (!  (=> (and (and (and (= (type $ly@@544) LayerTypeType) (= (type |s#0@@101|) (SeqType BoxType))) (= (type |key#0@@145|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@101| |key#0@@145| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (and (and ($Is |s#0@@101| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@145| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@18|)) (< |lo#0@@18| |hi#0@@18|)) (<= (LitInt |hi#0@@18|) (+ (|Seq#Length| |s#0@@101|) 1))) (=> (> |lo#0@@18| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@101| (LitInt (- |lo#0@@18| 1)))) |key#0@@145|))) (=> (<= (LitInt |hi#0@@18|) (|Seq#Length| |s#0@@101|)) (Lexicographic__Byte__Order.__default.lte |key#0@@145| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@101| (LitInt (- |hi#0@@18| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@18| 1) |hi#0@@18|)))) (let ((|mid#1@@5| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@101| (- |mid#1@@5| 1))) |key#0@@145|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@101| (- |mid#1@@5| 1))) |key#0@@145|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@101| |key#0@@145| |mid#1@@5| (LitInt |hi#0@@18|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@101| (- |mid#1@@5| 1))) |key#0@@145|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@101| |key#0@@145| (LitInt |lo#0@@18|) |mid#1@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@544) |s#0@@101| |key#0@@145| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (ite (< (+ |lo#0@@18| 1) |hi#0@@18|) (let ((|mid#1@@6| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@101| (LitInt (- |mid#1@@6| 1)))) |key#0@@145|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@544) |s#0@@101| |key#0@@145| |mid#1@@6| (LitInt |hi#0@@18|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@544) |s#0@@101| |key#0@@145| (LitInt |lo#0@@18|) |mid#1@@6|))) |lo#0@@18|)))) :qid |totalord.421:12| :weight 3 :skolemid |3257| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@544) |s#0@@101| |key#0@@145| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|))) ))))
(assert  (=> true (forall (($ly@@545 T@U) (|s#0@@102| T@U) (|key#0@@146| T@U) (|lo#0@@19| Int) (|hi#0@@19| Int) ) (!  (=> (and (and (and (= (type $ly@@545) LayerTypeType) (= (type |s#0@@102|) (SeqType BoxType))) (= (type |key#0@@146|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@102|) (Lit |key#0@@146|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (and (and ($Is |s#0@@102| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@146| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@19|)) (< |lo#0@@19| |hi#0@@19|)) (<= (LitInt |hi#0@@19|) (+ (|Seq#Length| (Lit |s#0@@102|)) 1))) (=> (> |lo#0@@19| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@102|) (LitInt (- |lo#0@@19| 1)))) (Lit |key#0@@146|)))) (=> (<= (LitInt |hi#0@@19|) (|Seq#Length| (Lit |s#0@@102|))) (Lexicographic__Byte__Order.__default.lte (Lit |key#0@@146|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@102|) (LitInt (- |hi#0@@19| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@19| 1) |hi#0@@19|)))) (let ((|mid#2@@3| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@102|) (- |mid#2@@3| 1))) (Lit |key#0@@146|)) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@102|) (- |mid#2@@3| 1))) (Lit |key#0@@146|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@102|) (Lit |key#0@@146|) |mid#2@@3| (LitInt |hi#0@@19|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@102|) (- |mid#2@@3| 1))) (Lit |key#0@@146|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@102|) (Lit |key#0@@146|) (LitInt |lo#0@@19|) |mid#2@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@545) (Lit |s#0@@102|) (Lit |key#0@@146|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (ite (< (+ |lo#0@@19| 1) |hi#0@@19|) (let ((|mid#2@@4| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@102|) (LitInt (- |mid#2@@4| 1)))) (Lit |key#0@@146|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@545) (Lit |s#0@@102|) (Lit |key#0@@146|) |mid#2@@4| (LitInt |hi#0@@19|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@545) (Lit |s#0@@102|) (Lit |key#0@@146|) (LitInt |lo#0@@19|) |mid#2@@4|))) |lo#0@@19|)))) :qid |totalord.421:12| :weight 3 :skolemid |3258| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@545) (Lit |s#0@@102|) (Lit |key#0@@146|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|))) ))))
(assert (forall (($ly@@546 T@U) (|s#0@@103| T@U) (|key#0@@147| T@U) ) (!  (=> (and (and (= (type $ly@@546) LayerTypeType) (= (type |s#0@@103|) (SeqType BoxType))) (= (type |key#0@@147|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@546) |s#0@@103| |key#0@@147|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@546 |s#0@@103| |key#0@@147|))) :qid |totalord.441:22| :skolemid |3259| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@546) |s#0@@103| |key#0@@147|)) )))
(assert (forall (($ly@@547 T@U) (|s#0@@104| T@U) (|key#0@@148| T@U) ) (!  (=> (and (and (= (type $ly@@547) LayerTypeType) (= (type |s#0@@104|) (SeqType BoxType))) (= (type |key#0@@148|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@547 |s#0@@104| |key#0@@148|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@104| |key#0@@148|))) :qid |totalord.441:22| :skolemid |3260| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@547) |s#0@@104| |key#0@@148|)) )))
(assert  (=> true (forall (($ly@@548 T@U) (|s#0@@105| T@U) (|key#0@@149| T@U) ) (!  (=> (and (and (and (= (type $ly@@548) LayerTypeType) (= (type |s#0@@105|) (SeqType BoxType))) (= (type |key#0@@149|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@105| |key#0@@149|) (and ($Is |s#0@@105| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@149| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@548 |s#0@@105| |key#0@@149|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@548 |s#0@@105| |key#0@@149|) (|Seq#Length| |s#0@@105|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@548 |s#0@@105| |key#0@@149|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@105| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@548 |s#0@@105| |key#0@@149|) 1))) |key#0@@149|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@548 |s#0@@105| |key#0@@149|) (|Seq#Length| |s#0@@105|)) (Lexicographic__Byte__Order.__default.lte |key#0@@149| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@105| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@548 |s#0@@105| |key#0@@149|))))))) :qid |totalord.441:22| :skolemid |3261| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@548 |s#0@@105| |key#0@@149|)) ))))
(assert (forall (($ly@@549 T@U) (|s#0@@106| T@U) (|key#0@@150| T@U) ) (!  (=> (and (and (and (= (type $ly@@549) LayerTypeType) (= (type |s#0@@106|) (SeqType BoxType))) (= (type |key#0@@150|) (SeqType BoxType))) (and ($Is |s#0@@106| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@150| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@549 |s#0@@106| |key#0@@150|) true) (=> true (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@549 |s#0@@106| |key#0@@150|)))) :qid |totalord.441:22| :skolemid |3262| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@549 |s#0@@106| |key#0@@150|)) )))
(assert  (=> true (forall (($ly@@550 T@U) (|s#0@@107| T@U) (|key#0@@151| T@U) ) (!  (=> (and (and (and (= (type $ly@@550) LayerTypeType) (= (type |s#0@@107|) (SeqType BoxType))) (= (type |key#0@@151|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@107| |key#0@@151|) (and ($Is |s#0@@107| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@151| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@107| |key#0@@151| (LitInt 0) (+ (|Seq#Length| |s#0@@107|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@550) |s#0@@107| |key#0@@151|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@107| |key#0@@151| (LitInt 0) (+ (|Seq#Length| |s#0@@107|) 1))))) :qid |totalord.441:22| :skolemid |3263| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@550) |s#0@@107| |key#0@@151|)) ))))
(assert  (=> true (forall (($ly@@551 T@U) (|s#0@@108| T@U) (|key#0@@152| T@U) ) (!  (=> (and (and (and (= (type $ly@@551) LayerTypeType) (= (type |s#0@@108|) (SeqType BoxType))) (= (type |key#0@@152|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@108|) (Lit |key#0@@152|)) (and ($Is |s#0@@108| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@152| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@108|) (Lit |key#0@@152|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@108|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@551) (Lit |s#0@@108|) (Lit |key#0@@152|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@108|) (Lit |key#0@@152|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@108|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |3264| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@551) (Lit |s#0@@108|) (Lit |key#0@@152|))) ))))
(assert (forall (($ly@@552 T@U) (|run#0@@126| T@U) (|needle#0@@55| T@U) ) (!  (=> (and (and (= (type $ly@@552) LayerTypeType) (= (type |run#0@@126|) (SeqType BoxType))) (= (type |needle#0@@55|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@552) |run#0@@126| |needle#0@@55|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@552 |run#0@@126| |needle#0@@55|))) :qid |totalord.449:12| :skolemid |3265| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@552) |run#0@@126| |needle#0@@55|)) )))
(assert (forall (($ly@@553 T@U) (|run#0@@127| T@U) (|needle#0@@56| T@U) ) (!  (=> (and (and (= (type $ly@@553) LayerTypeType) (= (type |run#0@@127|) (SeqType BoxType))) (= (type |needle#0@@56|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@553 |run#0@@127| |needle#0@@56|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@127| |needle#0@@56|))) :qid |totalord.449:12| :skolemid |3266| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@553) |run#0@@127| |needle#0@@56|)) )))
(assert  (=> true (forall (($ly@@554 T@U) (|run#0@@128| T@U) (|needle#0@@57| T@U) ) (!  (=> (and (and (and (= (type $ly@@554) LayerTypeType) (= (type |run#0@@128|) (SeqType BoxType))) (= (type |needle#0@@57|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@128| |needle#0@@57|) (and (and ($Is |run#0@@128| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@57| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@128|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@554 |run#0@@128| |needle#0@@57|) (|Seq#Length| |run#0@@128|)) (forall ((|i#0@@124| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@124|) (< |i#0@@124| (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@554 |run#0@@128| |needle#0@@57|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@124|)) |needle#0@@57|)) :qid |totalord.452:20| :skolemid |3267| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@124|))) ))) (forall ((|i#1@@47| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@554 |run#0@@128| |needle#0@@57|) |i#1@@47|) (< |i#1@@47| (|Seq#Length| |run#0@@128|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@57| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@47|)))) :qid |totalord.453:20| :skolemid |3268| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@47|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@554 |run#0@@128| |needle#0@@57|)))) :qid |totalord.449:12| :skolemid |3269| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@554 |run#0@@128| |needle#0@@57|)) ))))
(assert (forall (($ly@@555 T@U) (|run#0@@129| T@U) (|needle#0@@58| T@U) ) (!  (=> (and (and (and (= (type $ly@@555) LayerTypeType) (= (type |run#0@@129|) (SeqType BoxType))) (= (type |needle#0@@58|) (SeqType BoxType))) (and ($Is |run#0@@129| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@58| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@555 |run#0@@129| |needle#0@@58|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@555 |run#0@@129| |needle#0@@58|)))) :qid |totalord.449:12| :skolemid |3270| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@555 |run#0@@129| |needle#0@@58|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@556 T@U) (|run#0@@130| T@U) (|needle#0@@59| T@U) ) (!  (=> (and (and (and (= (type $ly@@556) LayerTypeType) (= (type |run#0@@130|) (SeqType BoxType))) (= (type |needle#0@@59|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@130| |needle#0@@59|) (and (and ($Is |run#0@@130| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@59| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@130|)))) (and (=> (not (= (|Seq#Length| |run#0@@130|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@130|) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|)) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@130|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@130|) |needle#0@@59|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@556) |run#0@@130| |needle#0@@59|) (ite (= (|Seq#Length| |run#0@@130|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|) (|Seq#Length| |run#0@@130|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@556 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@130|) |needle#0@@59|))))))) :qid |totalord.449:12| :skolemid |3271| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@556) |run#0@@130| |needle#0@@59|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@557 T@U) (|run#0@@131| T@U) (|needle#0@@60| T@U) ) (!  (=> (and (and (and (= (type $ly@@557) LayerTypeType) (= (type |run#0@@131|) (SeqType BoxType))) (= (type |needle#0@@60|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@131|) (Lit |needle#0@@60|)) (and (and ($Is |run#0@@131| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@60| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@131|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|))) (Lit |needle#0@@60|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@557) (Lit |run#0@@131|) (Lit |needle#0@@60|)) (ite (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|)) (|Seq#Length| (Lit |run#0@@131|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@557) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|))) (Lit |needle#0@@60|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |3272| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@557) (Lit |run#0@@131|) (Lit |needle#0@@60|))) ))))
(assert (forall (($ly@@558 T@U) (|s#0@@109| T@U) (|key#0@@153| T@U) (|lo#0@@20| Int) (|hi#0@@20| Int) ) (!  (=> (and (and (= (type $ly@@558) LayerTypeType) (= (type |s#0@@109|) (SeqType BoxType))) (= (type |key#0@@153|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@558) |s#0@@109| |key#0@@153| |lo#0@@20| |hi#0@@20|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@558 |s#0@@109| |key#0@@153| |lo#0@@20| |hi#0@@20|))) :qid |totalord.482:12| :skolemid |3273| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@558) |s#0@@109| |key#0@@153| |lo#0@@20| |hi#0@@20|)) )))
(assert (forall (($ly@@559 T@U) (|s#0@@110| T@U) (|key#0@@154| T@U) (|lo#0@@21| Int) (|hi#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@559) LayerTypeType) (= (type |s#0@@110|) (SeqType BoxType))) (= (type |key#0@@154|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@559 |s#0@@110| |key#0@@154| |lo#0@@21| |hi#0@@21|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@110| |key#0@@154| |lo#0@@21| |hi#0@@21|))) :qid |totalord.482:12| :skolemid |3274| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@559) |s#0@@110| |key#0@@154| |lo#0@@21| |hi#0@@21|)) )))
(assert  (=> true (forall (($ly@@560 T@U) (|s#0@@111| T@U) (|key#0@@155| T@U) (|lo#0@@22| Int) (|hi#0@@22| Int) ) (!  (=> (and (and (and (= (type $ly@@560) LayerTypeType) (= (type |s#0@@111|) (SeqType BoxType))) (= (type |key#0@@155|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@111| |key#0@@155| |lo#0@@22| |hi#0@@22|) (and (and ($Is |s#0@@111| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@155| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@22|) (< |lo#0@@22| |hi#0@@22|)) (<= |hi#0@@22| (+ (|Seq#Length| |s#0@@111|) 1))) (=> (> |lo#0@@22| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |lo#0@@22| 1))) |key#0@@155|))) (=> (<= |hi#0@@22| (|Seq#Length| |s#0@@111|)) (Lexicographic__Byte__Order.__default.lt |key#0@@155| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |hi#0@@22| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@560 |s#0@@111| |key#0@@155| |lo#0@@22| |hi#0@@22|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@560 |s#0@@111| |key#0@@155| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@111|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@560 |s#0@@111| |key#0@@155| |lo#0@@22| |hi#0@@22|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@560 |s#0@@111| |key#0@@155| |lo#0@@22| |hi#0@@22|) 1))) |key#0@@155|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@560 |s#0@@111| |key#0@@155| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@111|)) (Lexicographic__Byte__Order.__default.lt |key#0@@155| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@560 |s#0@@111| |key#0@@155| |lo#0@@22| |hi#0@@22|))))))) :qid |totalord.482:12| :skolemid |3275| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@560 |s#0@@111| |key#0@@155| |lo#0@@22| |hi#0@@22|)) ))))
(assert (forall (($ly@@561 T@U) (|s#0@@112| T@U) (|key#0@@156| T@U) (|lo#0@@23| Int) (|hi#0@@23| Int) ) (!  (=> (and (and (and (= (type $ly@@561) LayerTypeType) (= (type |s#0@@112|) (SeqType BoxType))) (= (type |key#0@@156|) (SeqType BoxType))) (and ($Is |s#0@@112| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@156| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@561 |s#0@@112| |key#0@@156| |lo#0@@23| |hi#0@@23|) (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@112|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |lo#0@@23| 1))) |key#0@@156|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@112|)) (Lexicographic__Byte__Order.__default.lt |key#0@@156| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |hi#0@@23| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@112|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |lo#0@@23| 1))) |key#0@@156|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@112|)) (Lexicographic__Byte__Order.__default.lt |key#0@@156| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |hi#0@@23| 1)))))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@561 |s#0@@112| |key#0@@156| |lo#0@@23| |hi#0@@23|)))) :qid |totalord.482:12| :skolemid |3276| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@561 |s#0@@112| |key#0@@156| |lo#0@@23| |hi#0@@23|)) )))
(assert  (=> true (forall (($ly@@562 T@U) (|s#0@@113| T@U) (|key#0@@157| T@U) (|lo#0@@24| Int) (|hi#0@@24| Int) ) (!  (=> (and (and (and (= (type $ly@@562) LayerTypeType) (= (type |s#0@@113|) (SeqType BoxType))) (= (type |key#0@@157|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@113| |key#0@@157| |lo#0@@24| |hi#0@@24|) (and (and ($Is |s#0@@113| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@157| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@24|) (< |lo#0@@24| |hi#0@@24|)) (<= |hi#0@@24| (+ (|Seq#Length| |s#0@@113|) 1))) (=> (> |lo#0@@24| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@113| (- |lo#0@@24| 1))) |key#0@@157|))) (=> (<= |hi#0@@24| (|Seq#Length| |s#0@@113|)) (Lexicographic__Byte__Order.__default.lt |key#0@@157| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@113| (- |hi#0@@24| 1))))))))) (and (=> (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@7| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@113| (- |mid#0@@7| 1))) |key#0@@157|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@113| (- |mid#0@@7| 1))) |key#0@@157|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@113| |key#0@@157| |mid#0@@7| |hi#0@@24|))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@113| (- |mid#0@@7| 1))) |key#0@@157|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@113| |key#0@@157| |lo#0@@24| |mid#0@@7|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@562) |s#0@@113| |key#0@@157| |lo#0@@24| |hi#0@@24|) (ite (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@8| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@113| (- |mid#0@@8| 1))) |key#0@@157|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@562 |s#0@@113| |key#0@@157| |mid#0@@8| |hi#0@@24|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@562 |s#0@@113| |key#0@@157| |lo#0@@24| |mid#0@@8|))) |lo#0@@24|)))) :qid |totalord.482:12| :skolemid |3277| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@562) |s#0@@113| |key#0@@157| |lo#0@@24| |hi#0@@24|)) ))))
(assert  (=> true (forall (($ly@@563 T@U) (|s#0@@114| T@U) (|key#0@@158| T@U) (|lo#0@@25| Int) (|hi#0@@25| Int) ) (!  (=> (and (and (and (= (type $ly@@563) LayerTypeType) (= (type |s#0@@114|) (SeqType BoxType))) (= (type |key#0@@158|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@114| |key#0@@158| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (and (and ($Is |s#0@@114| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@158| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@25|)) (< |lo#0@@25| |hi#0@@25|)) (<= (LitInt |hi#0@@25|) (+ (|Seq#Length| |s#0@@114|) 1))) (=> (> |lo#0@@25| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@114| (LitInt (- |lo#0@@25| 1)))) |key#0@@158|))) (=> (<= (LitInt |hi#0@@25|) (|Seq#Length| |s#0@@114|)) (Lexicographic__Byte__Order.__default.lt |key#0@@158| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@114| (LitInt (- |hi#0@@25| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@25| 1) |hi#0@@25|)))) (let ((|mid#1@@7| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@114| (- |mid#1@@7| 1))) |key#0@@158|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@114| (- |mid#1@@7| 1))) |key#0@@158|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@114| |key#0@@158| |mid#1@@7| (LitInt |hi#0@@25|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@114| (- |mid#1@@7| 1))) |key#0@@158|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@114| |key#0@@158| (LitInt |lo#0@@25|) |mid#1@@7|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@563) |s#0@@114| |key#0@@158| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (ite (< (+ |lo#0@@25| 1) |hi#0@@25|) (let ((|mid#1@@8| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@114| (LitInt (- |mid#1@@8| 1)))) |key#0@@158|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@563) |s#0@@114| |key#0@@158| |mid#1@@8| (LitInt |hi#0@@25|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@563) |s#0@@114| |key#0@@158| (LitInt |lo#0@@25|) |mid#1@@8|))) |lo#0@@25|)))) :qid |totalord.482:12| :weight 3 :skolemid |3278| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@563) |s#0@@114| |key#0@@158| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|))) ))))
(assert  (=> true (forall (($ly@@564 T@U) (|s#0@@115| T@U) (|key#0@@159| T@U) (|lo#0@@26| Int) (|hi#0@@26| Int) ) (!  (=> (and (and (and (= (type $ly@@564) LayerTypeType) (= (type |s#0@@115|) (SeqType BoxType))) (= (type |key#0@@159|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@115|) (Lit |key#0@@159|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (and (and ($Is |s#0@@115| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@159| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@26|)) (< |lo#0@@26| |hi#0@@26|)) (<= (LitInt |hi#0@@26|) (+ (|Seq#Length| (Lit |s#0@@115|)) 1))) (=> (> |lo#0@@26| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@115|) (LitInt (- |lo#0@@26| 1)))) (Lit |key#0@@159|)))) (=> (<= (LitInt |hi#0@@26|) (|Seq#Length| (Lit |s#0@@115|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@159|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@115|) (LitInt (- |hi#0@@26| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@26| 1) |hi#0@@26|)))) (let ((|mid#2@@5| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@115|) (- |mid#2@@5| 1))) (Lit |key#0@@159|)) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@115|) (- |mid#2@@5| 1))) (Lit |key#0@@159|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@115|) (Lit |key#0@@159|) |mid#2@@5| (LitInt |hi#0@@26|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@115|) (- |mid#2@@5| 1))) (Lit |key#0@@159|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@115|) (Lit |key#0@@159|) (LitInt |lo#0@@26|) |mid#2@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@564) (Lit |s#0@@115|) (Lit |key#0@@159|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (ite (< (+ |lo#0@@26| 1) |hi#0@@26|) (let ((|mid#2@@6| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@115|) (LitInt (- |mid#2@@6| 1)))) (Lit |key#0@@159|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@564) (Lit |s#0@@115|) (Lit |key#0@@159|) |mid#2@@6| (LitInt |hi#0@@26|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@564) (Lit |s#0@@115|) (Lit |key#0@@159|) (LitInt |lo#0@@26|) |mid#2@@6|))) |lo#0@@26|)))) :qid |totalord.482:12| :weight 3 :skolemid |3279| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@564) (Lit |s#0@@115|) (Lit |key#0@@159|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|))) ))))
(assert (forall (($ly@@565 T@U) (|s#0@@116| T@U) (|key#0@@160| T@U) ) (!  (=> (and (and (= (type $ly@@565) LayerTypeType) (= (type |s#0@@116|) (SeqType BoxType))) (= (type |key#0@@160|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@565) |s#0@@116| |key#0@@160|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@565 |s#0@@116| |key#0@@160|))) :qid |totalord.502:22| :skolemid |3280| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@565) |s#0@@116| |key#0@@160|)) )))
(assert (forall (($ly@@566 T@U) (|s#0@@117| T@U) (|key#0@@161| T@U) ) (!  (=> (and (and (= (type $ly@@566) LayerTypeType) (= (type |s#0@@117|) (SeqType BoxType))) (= (type |key#0@@161|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@566 |s#0@@117| |key#0@@161|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@117| |key#0@@161|))) :qid |totalord.502:22| :skolemid |3281| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@566) |s#0@@117| |key#0@@161|)) )))
(assert  (=> true (forall (($ly@@567 T@U) (|s#0@@118| T@U) (|key#0@@162| T@U) ) (!  (=> (and (and (and (= (type $ly@@567) LayerTypeType) (= (type |s#0@@118|) (SeqType BoxType))) (= (type |key#0@@162|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@118| |key#0@@162|) (and ($Is |s#0@@118| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@162| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@567 |s#0@@118| |key#0@@162|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@567 |s#0@@118| |key#0@@162|) (|Seq#Length| |s#0@@118|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@567 |s#0@@118| |key#0@@162|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@118| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@567 |s#0@@118| |key#0@@162|) 1))) |key#0@@162|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@567 |s#0@@118| |key#0@@162|) (|Seq#Length| |s#0@@118|)) (Lexicographic__Byte__Order.__default.lt |key#0@@162| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@118| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@567 |s#0@@118| |key#0@@162|))))))) :qid |totalord.502:22| :skolemid |3282| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@567 |s#0@@118| |key#0@@162|)) ))))
(assert (forall (($ly@@568 T@U) (|s#0@@119| T@U) (|key#0@@163| T@U) ) (!  (=> (and (and (and (= (type $ly@@568) LayerTypeType) (= (type |s#0@@119|) (SeqType BoxType))) (= (type |key#0@@163|) (SeqType BoxType))) (and ($Is |s#0@@119| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@163| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@568 |s#0@@119| |key#0@@163|) true) (=> true (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@568 |s#0@@119| |key#0@@163|)))) :qid |totalord.502:22| :skolemid |3283| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@568 |s#0@@119| |key#0@@163|)) )))
(assert  (=> true (forall (($ly@@569 T@U) (|s#0@@120| T@U) (|key#0@@164| T@U) ) (!  (=> (and (and (and (= (type $ly@@569) LayerTypeType) (= (type |s#0@@120|) (SeqType BoxType))) (= (type |key#0@@164|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@120| |key#0@@164|) (and ($Is |s#0@@120| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@164| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@120| |key#0@@164| (LitInt 0) (+ (|Seq#Length| |s#0@@120|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@569) |s#0@@120| |key#0@@164|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@120| |key#0@@164| (LitInt 0) (+ (|Seq#Length| |s#0@@120|) 1))))) :qid |totalord.502:22| :skolemid |3284| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@569) |s#0@@120| |key#0@@164|)) ))))
(assert  (=> true (forall (($ly@@570 T@U) (|s#0@@121| T@U) (|key#0@@165| T@U) ) (!  (=> (and (and (and (= (type $ly@@570) LayerTypeType) (= (type |s#0@@121|) (SeqType BoxType))) (= (type |key#0@@165|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@121|) (Lit |key#0@@165|)) (and ($Is |s#0@@121| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@165| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@121|) (Lit |key#0@@165|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@121|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@570) (Lit |s#0@@121|) (Lit |key#0@@165|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@121|) (Lit |key#0@@165|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@121|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |3285| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@570) (Lit |s#0@@121|) (Lit |key#0@@165|))) ))))
(assert  (=> true (forall ((|a#0@@133| T@U) (|b#0@@113| T@U) ) (!  (=> (and (and (= (type |a#0@@133|) (MapType0Type BoxType boolType)) (= (type |b#0@@113|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@133| |b#0@@113|) (and ($Is |a#0@@133| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@113| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalord.675:23| :skolemid |3286| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@133| |b#0@@113|)) ))))
(assert (forall ((|a#0@@134| T@U) (|b#0@@114| T@U) ) (!  (=> (and (and (= (type |a#0@@134|) (MapType0Type BoxType boolType)) (= (type |b#0@@114|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@134| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@114| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@134| |b#0@@114|) true) (=> true (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@134| |b#0@@114|)))) :qid |totalord.675:23| :skolemid |3287| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@134| |b#0@@114|)) )))
(assert  (=> true (forall ((|a#0@@135| T@U) (|b#0@@115| T@U) ) (!  (=> (and (and (= (type |a#0@@135|) (MapType0Type BoxType boolType)) (= (type |b#0@@115|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@135| |b#0@@115|) (and ($Is |a#0@@135| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@115| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@7| T@U) (|y#0@@9| T@U) ) (!  (=> (and (and (and (= (type |x#0@@7|) (SeqType BoxType)) (= (type |y#0@@9|) (SeqType BoxType))) (and ($Is |x#0@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@9| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |b#0@@115| ($Box |y#0@@9|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#0@@7| |y#0@@9|)) :qid |totalord.676:12| :skolemid |3288| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@7| |y#0@@9|)) :pattern ( (MapType0Select |b#0@@115| ($Box |y#0@@9|)) (MapType0Select |a#0@@135| ($Box |x#0@@7|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@135| |b#0@@115|) (forall ((|x#0@@8| T@U) (|y#0@@10| T@U) ) (!  (=> (and (and (and (= (type |x#0@@8|) (SeqType BoxType)) (= (type |y#0@@10|) (SeqType BoxType))) (and ($Is |x#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@135| ($Box |x#0@@8|))) (U_2_bool (MapType0Select |b#0@@115| ($Box |y#0@@10|))))) (Lexicographic__Byte__Order.__default.lte |x#0@@8| |y#0@@10|)) :qid |totalord.676:12| :skolemid |3289| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@8| |y#0@@10|)) :pattern ( (MapType0Select |b#0@@115| ($Box |y#0@@10|)) (MapType0Select |a#0@@135| ($Box |x#0@@8|))) ))) (=> (forall ((|x#0@@9| T@U) (|y#0@@11| T@U) ) (!  (=> (and (and (and (= (type |x#0@@9|) (SeqType BoxType)) (= (type |y#0@@11|) (SeqType BoxType))) (and ($Is |x#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@11| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@135| ($Box |x#0@@9|))) (U_2_bool (MapType0Select |b#0@@115| ($Box |y#0@@11|))))) (Lexicographic__Byte__Order.__default.lte |x#0@@9| |y#0@@11|)) :qid |totalord.676:12| :skolemid |3289| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@9| |y#0@@11|)) :pattern ( (MapType0Select |b#0@@115| ($Box |y#0@@11|)) (MapType0Select |a#0@@135| ($Box |x#0@@9|))) )) (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@135| |b#0@@115|))))) :qid |totalord.675:23| :skolemid |3290| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@135| |b#0@@115|)) ))))
(assert  (=> true (forall ((|a#0@@136| T@U) (|b#0@@116| T@U) ) (!  (=> (and (and (= (type |a#0@@136|) (MapType0Type BoxType boolType)) (= (type |b#0@@116|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@136|) (Lit |b#0@@116|)) (and ($Is |a#0@@136| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@116| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@5| T@U) (|y#1@@5| T@U) ) (!  (=> (and (and (and (= (type |x#1@@5|) (SeqType BoxType)) (= (type |y#1@@5|) (SeqType BoxType))) (and ($Is |x#1@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@5| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |b#0@@116|) ($Box |y#1@@5|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#1@@5| |y#1@@5|)) :qid |totalord.676:12| :skolemid |3291| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@5| |y#1@@5|)) :pattern ( (MapType0Select |b#0@@116| ($Box |y#1@@5|)) (MapType0Select |a#0@@136| ($Box |x#1@@5|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@136|) (Lit |b#0@@116|)) (forall ((|x#1@@6| T@U) (|y#1@@6| T@U) ) (!  (=> (and (and (and (= (type |x#1@@6|) (SeqType BoxType)) (= (type |y#1@@6|) (SeqType BoxType))) (and ($Is |x#1@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@6| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@136|) ($Box |x#1@@6|))) (U_2_bool (MapType0Select (Lit |b#0@@116|) ($Box |y#1@@6|))))) (Lexicographic__Byte__Order.__default.lte |x#1@@6| |y#1@@6|)) :qid |totalord.676:12| :skolemid |3292| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@6| |y#1@@6|)) :pattern ( (MapType0Select |b#0@@116| ($Box |y#1@@6|)) (MapType0Select |a#0@@136| ($Box |x#1@@6|))) ))) (=> (forall ((|x#1@@7| T@U) (|y#1@@7| T@U) ) (!  (=> (and (and (and (= (type |x#1@@7|) (SeqType BoxType)) (= (type |y#1@@7|) (SeqType BoxType))) (and ($Is |x#1@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@7| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@136|) ($Box |x#1@@7|))) (U_2_bool (MapType0Select (Lit |b#0@@116|) ($Box |y#1@@7|))))) (Lexicographic__Byte__Order.__default.lte |x#1@@7| |y#1@@7|)) :qid |totalord.676:12| :skolemid |3292| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@7| |y#1@@7|)) :pattern ( (MapType0Select |b#0@@116| ($Box |y#1@@7|)) (MapType0Select |a#0@@136| ($Box |x#1@@7|))) )) (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@136|) (Lit |b#0@@116|)))))) :qid |totalord.675:23| :weight 3 :skolemid |3293| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@136|) (Lit |b#0@@116|))) ))))
(assert  (=> true (forall ((|a#0@@137| T@U) (|b#0@@117| T@U) ) (!  (=> (and (and (= (type |a#0@@137|) (MapType0Type BoxType boolType)) (= (type |b#0@@117|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@137| |b#0@@117|) (and ($Is |a#0@@137| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@117| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalord.679:22| :skolemid |3294| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@137| |b#0@@117|)) ))))
(assert (forall ((|a#0@@138| T@U) (|b#0@@118| T@U) ) (!  (=> (and (and (= (type |a#0@@138|) (MapType0Type BoxType boolType)) (= (type |b#0@@118|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@138| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@118| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@138| |b#0@@118|) true) (=> true (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@138| |b#0@@118|)))) :qid |totalord.679:22| :skolemid |3295| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@138| |b#0@@118|)) )))
(assert  (=> true (forall ((|a#0@@139| T@U) (|b#0@@119| T@U) ) (!  (=> (and (and (= (type |a#0@@139|) (MapType0Type BoxType boolType)) (= (type |b#0@@119|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@139| |b#0@@119|) (and ($Is |a#0@@139| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@119| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@10| T@U) (|y#0@@12| T@U) ) (!  (=> (and (and (and (= (type |x#0@@10|) (SeqType BoxType)) (= (type |y#0@@12|) (SeqType BoxType))) (and ($Is |x#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@12| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |b#0@@119| ($Box |y#0@@12|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#0@@10| |y#0@@12|)) :qid |totalord.680:12| :skolemid |3296| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@10| |y#0@@12|)) :pattern ( (MapType0Select |b#0@@119| ($Box |y#0@@12|)) (MapType0Select |a#0@@139| ($Box |x#0@@10|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@139| |b#0@@119|) (forall ((|x#0@@11| T@U) (|y#0@@13| T@U) ) (!  (=> (and (and (and (= (type |x#0@@11|) (SeqType BoxType)) (= (type |y#0@@13|) (SeqType BoxType))) (and ($Is |x#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@13| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@139| ($Box |x#0@@11|))) (U_2_bool (MapType0Select |b#0@@119| ($Box |y#0@@13|))))) (Lexicographic__Byte__Order.__default.lt |x#0@@11| |y#0@@13|)) :qid |totalord.680:12| :skolemid |3297| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@11| |y#0@@13|)) :pattern ( (MapType0Select |b#0@@119| ($Box |y#0@@13|)) (MapType0Select |a#0@@139| ($Box |x#0@@11|))) ))) (=> (forall ((|x#0@@12| T@U) (|y#0@@14| T@U) ) (!  (=> (and (and (and (= (type |x#0@@12|) (SeqType BoxType)) (= (type |y#0@@14|) (SeqType BoxType))) (and ($Is |x#0@@12| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@14| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@139| ($Box |x#0@@12|))) (U_2_bool (MapType0Select |b#0@@119| ($Box |y#0@@14|))))) (Lexicographic__Byte__Order.__default.lt |x#0@@12| |y#0@@14|)) :qid |totalord.680:12| :skolemid |3297| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@12| |y#0@@14|)) :pattern ( (MapType0Select |b#0@@119| ($Box |y#0@@14|)) (MapType0Select |a#0@@139| ($Box |x#0@@12|))) )) (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@139| |b#0@@119|))))) :qid |totalord.679:22| :skolemid |3298| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@139| |b#0@@119|)) ))))
(assert  (=> true (forall ((|a#0@@140| T@U) (|b#0@@120| T@U) ) (!  (=> (and (and (= (type |a#0@@140|) (MapType0Type BoxType boolType)) (= (type |b#0@@120|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@140|) (Lit |b#0@@120|)) (and ($Is |a#0@@140| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@120| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@8| T@U) (|y#1@@8| T@U) ) (!  (=> (and (and (and (= (type |x#1@@8|) (SeqType BoxType)) (= (type |y#1@@8|) (SeqType BoxType))) (and ($Is |x#1@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@8| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |b#0@@120|) ($Box |y#1@@8|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#1@@8| |y#1@@8|)) :qid |totalord.680:12| :skolemid |3299| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@8| |y#1@@8|)) :pattern ( (MapType0Select |b#0@@120| ($Box |y#1@@8|)) (MapType0Select |a#0@@140| ($Box |x#1@@8|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@140|) (Lit |b#0@@120|)) (forall ((|x#1@@9| T@U) (|y#1@@9| T@U) ) (!  (=> (and (and (and (= (type |x#1@@9|) (SeqType BoxType)) (= (type |y#1@@9|) (SeqType BoxType))) (and ($Is |x#1@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@9| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@140|) ($Box |x#1@@9|))) (U_2_bool (MapType0Select (Lit |b#0@@120|) ($Box |y#1@@9|))))) (Lexicographic__Byte__Order.__default.lt |x#1@@9| |y#1@@9|)) :qid |totalord.680:12| :skolemid |3300| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@9| |y#1@@9|)) :pattern ( (MapType0Select |b#0@@120| ($Box |y#1@@9|)) (MapType0Select |a#0@@140| ($Box |x#1@@9|))) ))) (=> (forall ((|x#1@@10| T@U) (|y#1@@10| T@U) ) (!  (=> (and (and (and (= (type |x#1@@10|) (SeqType BoxType)) (= (type |y#1@@10|) (SeqType BoxType))) (and ($Is |x#1@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@140|) ($Box |x#1@@10|))) (U_2_bool (MapType0Select (Lit |b#0@@120|) ($Box |y#1@@10|))))) (Lexicographic__Byte__Order.__default.lt |x#1@@10| |y#1@@10|)) :qid |totalord.680:12| :skolemid |3300| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@10| |y#1@@10|)) :pattern ( (MapType0Select |b#0@@120| ($Box |y#1@@10|)) (MapType0Select |a#0@@140| ($Box |x#1@@10|))) )) (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@140|) (Lit |b#0@@120|)))))) :qid |totalord.679:22| :weight 3 :skolemid |3301| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@140|) (Lit |b#0@@120|))) ))))
(assert (forall (($ly@@571 T@U) (|a#0@@141| T@U) ) (!  (=> (and (= (type $ly@@571) LayerTypeType) (= (type |a#0@@141|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@571) |a#0@@141|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@571 |a#0@@141|)) (=> (Lexicographic__Byte__Order.__default.NotMinimum $ly@@571 |a#0@@141|) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@571) |a#0@@141|)))) :qid |totalord.696:23| :skolemid |3302| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@571) |a#0@@141|)) )))
(assert (forall (($ly@@572 T@U) (|a#0@@142| T@U) ) (!  (=> (and (= (type $ly@@572) LayerTypeType) (= (type |a#0@@142|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum $ly@@572 |a#0@@142|) (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@142|)) (=> (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@142|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@572 |a#0@@142|)))) :qid |totalord.696:23| :skolemid |3303| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@572) |a#0@@142|)) )))
(assert  (=> true (forall (($ly@@573 T@U) (|a#0@@143| T@U) ) (!  (=> (and (and (= (type $ly@@573) LayerTypeType) (= (type |a#0@@143|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@143|) ($Is |a#0@@143| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalord.696:23| :skolemid |3304| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum $ly@@573 |a#0@@143|)) ))))
(assert (forall (($ly@@574 T@U) (|a#0@@144| T@U) ) (!  (=> (and (and (= (type $ly@@574) LayerTypeType) (= (type |a#0@@144|) (SeqType BoxType))) ($Is |a#0@@144| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@574 |a#0@@144|) true) (=> true (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@574 |a#0@@144|)))) :qid |totalord.696:23| :skolemid |3305| :pattern ( (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@574 |a#0@@144|)) )))
(assert  (=> true (forall (($ly@@575 T@U) (|a#0@@145| T@U) ) (!  (=> (and (and (= (type $ly@@575) LayerTypeType) (= (type |a#0@@145|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@145|) ($Is |a#0@@145| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#0@@121| T@U) ) (!  (=> (and (= (type |b#0@@121|) (SeqType BoxType)) ($Is |b#0@@121| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#0@@121| |a#0@@145|)) :qid |totalord.697:12| :skolemid |3306| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@121| |a#0@@145|)) )) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@575) |a#0@@145|) (exists ((|b#0@@122| T@U) ) (!  (and (= (type |b#0@@122|) (SeqType BoxType)) (and ($Is |b#0@@122| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#0@@122| |a#0@@145|))) :qid |totalord.697:12| :skolemid |3307| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@122| |a#0@@145|)) ))) (=> (exists ((|b#0@@123| T@U) ) (!  (and (= (type |b#0@@123|) (SeqType BoxType)) (and ($Is |b#0@@123| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#0@@123| |a#0@@145|))) :qid |totalord.697:12| :skolemid |3307| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@123| |a#0@@145|)) )) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@575) |a#0@@145|))))) :qid |totalord.696:23| :skolemid |3308| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@575) |a#0@@145|)) ))))
(assert  (=> true (forall (($ly@@576 T@U) (|a#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@576) LayerTypeType) (= (type |a#0@@146|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| (Lit |a#0@@146|)) ($Is |a#0@@146| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#1@@8| T@U) ) (!  (=> (and (= (type |b#1@@8|) (SeqType BoxType)) ($Is |b#1@@8| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#1@@8| (Lit |a#0@@146|))) :qid |totalord.697:12| :skolemid |3309| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@8| |a#0@@146|)) )) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@576) (Lit |a#0@@146|)) (exists ((|b#1@@9| T@U) ) (!  (and (= (type |b#1@@9|) (SeqType BoxType)) (and ($Is |b#1@@9| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#1@@9| (Lit |a#0@@146|)))) :qid |totalord.697:12| :skolemid |3310| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@9| |a#0@@146|)) ))) (=> (exists ((|b#1@@10| T@U) ) (!  (and (= (type |b#1@@10|) (SeqType BoxType)) (and ($Is |b#1@@10| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#1@@10| (Lit |a#0@@146|)))) :qid |totalord.697:12| :skolemid |3310| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@10| |a#0@@146|)) )) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@576) (Lit |a#0@@146|)))))) :qid |totalord.696:23| :weight 3 :skolemid |3311| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@576) (Lit |a#0@@146|))) ))))
(assert (forall ((arg0@@468 T@U) (arg1@@278 T@U) (arg2@@204 T@U) (arg3@@141 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@468 arg1@@278 arg2@@204 arg3@@141)) (MapType BoxType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.MapPivotedUnion| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@468 arg1@@278 arg2@@204 arg3@@141)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0@@9| T@U) (|pivot#0@@21| T@U) (|right#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@9|) (MapType BoxType BoxType))) (= (type |pivot#0@@21|) (SeqType BoxType))) (= (type |right#0@@9|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@9| |pivot#0@@21| |right#0@@9|) (and (and ($Is |left#0@@9| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value)) ($Is |pivot#0@@21| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@9| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@9| |pivot#0@@21| |right#0@@9|) (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |3312| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@9| |pivot#0@@21| |right#0@@9|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@10| T@U) (|pivot#0@@22| T@U) (|right#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@10|) (MapType BoxType BoxType))) (= (type |pivot#0@@22|) (SeqType BoxType))) (= (type |right#0@@10|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@10| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)) ($Is |pivot#0@@22| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@10| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@10| |pivot#0@@22| |right#0@@10|) true) (=> true (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@10| |pivot#0@@22| |right#0@@10|)))) :qid |unknown.0:0| :skolemid |3313| :pattern ( (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@10| |pivot#0@@22| |right#0@@10|)) )))
(assert  (and (forall ((arg0@@469 T@U) (arg1@@279 T@U) ) (! (= (type (|lambda#549| arg0@@469 arg1@@279)) (MapType0Type BoxType boolType)) :qid |funType:lambda#549| :pattern ( (|lambda#549| arg0@@469 arg1@@279)) )) (forall ((arg0@@470 T@U) (arg1@@280 T@U) ) (! (= (type (|lambda#550| arg0@@470 arg1@@280)) (MapType0Type BoxType boolType)) :qid |funType:lambda#550| :pattern ( (|lambda#550| arg0@@470 arg1@@280)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@11| T@U) (|pivot#0@@23| T@U) (|right#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@11|) (MapType BoxType BoxType))) (= (type |pivot#0@@23|) (SeqType BoxType))) (= (type |right#0@@11|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@11| |pivot#0@@23| |right#0@@11|) (and (and ($Is |left#0@@11| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1)) ($Is |pivot#0@@23| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@11| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@49| T@U) ) (!  (=> (and (= (type |k#0@@49|) (SeqType BoxType)) ($Is |k#0@@49| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#0@@49| |pivot#0@@23|)) :qid |totalord.716:57| :skolemid |3314| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@49| |pivot#0@@23|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@11| (|lambda#549| (TSeq Tclass.NativeTypes.byte) |pivot#0@@23|))) (let ((|restricted_left#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@11| (|lambda#549| (TSeq Tclass.NativeTypes.byte) |pivot#0@@23|)))) (and (and (forall ((|k#1@@11| T@U) ) (!  (=> (and (= (type |k#1@@11|) (SeqType BoxType)) ($Is |k#1@@11| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@23| |k#1@@11|)) :qid |totalord.717:59| :skolemid |3315| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@23| |k#1@@11|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@11| (|lambda#550| (TSeq Tclass.NativeTypes.byte) |pivot#0@@23|))) (let ((|restricted_right#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@11| (|lambda#550| (TSeq Tclass.NativeTypes.byte) |pivot#0@@23|)))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0@@1| |restricted_right#0@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@11| |pivot#0@@23| |right#0@@11|) (let ((|restricted_left#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@11| (|lambda#549| (TSeq Tclass.NativeTypes.byte) |pivot#0@@23|)))) (let ((|restricted_right#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@11| (|lambda#550| (TSeq Tclass.NativeTypes.byte) |pivot#0@@23|)))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@2| |restricted_right#0@@2|)))))) :qid |unknown.0:0| :skolemid |3316| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@11| |pivot#0@@23| |right#0@@11|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@12| T@U) (|pivot#0@@24| T@U) (|right#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@12|) (MapType BoxType BoxType))) (= (type |pivot#0@@24|) (SeqType BoxType))) (= (type |right#0@@12|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@12|) (Lit |pivot#0@@24|) (Lit |right#0@@12|)) (and (and ($Is |left#0@@12| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2)) ($Is |pivot#0@@24| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@12| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@7| T@U) ) (!  (=> (and (= (type |k#2@@7|) (SeqType BoxType)) ($Is |k#2@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#2@@7| (Lit |pivot#0@@24|))) :qid |totalord.716:57| :skolemid |3317| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#2@@7| |pivot#0@@24|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@12|) (|lambda#549| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@24|)))) (let ((|restricted_left#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@12|) (|lambda#549| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@24|))))) (and (and (forall ((|k#3@@0| T@U) ) (!  (=> (and (= (type |k#3@@0|) (SeqType BoxType)) ($Is |k#3@@0| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@24|) |k#3@@0|)) :qid |totalord.717:59| :skolemid |3318| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@24| |k#3@@0|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@12|) (|lambda#550| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@24|)))) (let ((|restricted_right#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@12|) (|lambda#550| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@24|))))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1@@1| |restricted_right#1@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@12|) (Lit |pivot#0@@24|) (Lit |right#0@@12|)) (let ((|restricted_left#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@12|) (|lambda#549| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@24|))))) (let ((|restricted_right#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@12|) (|lambda#550| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@24|))))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@2| |restricted_right#1@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3319| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@12|) (Lit |pivot#0@@24|) (Lit |right#0@@12|))) ))))
(assert (forall ((arg0@@471 T@U) (arg1@@281 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@471 arg1@@281)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SetSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@471 arg1@@281)) )))
(assert  (=> true (forall ((|m#0@@119| T@U) (|key#0@@166| T@U) ) (!  (=> (and (and (= (type |m#0@@119|) (MapType0Type BoxType boolType)) (= (type |key#0@@166|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@119| |key#0@@166|) (and ($Is |m#0@@119| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@166| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@119| |key#0@@166|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.721:25| :skolemid |3320| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@119| |key#0@@166|)) ))))
(assert (forall (($Heap@@45 T@U) (|m#0@@120| T@U) (|key#0@@167| T@U) ) (!  (=> (and (and (and (= (type $Heap@@45) (MapType0Type refType MapType1Type)) (= (type |m#0@@120|) (MapType0Type BoxType boolType))) (= (type |key#0@@167|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@45) ($Is |m#0@@120| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@167| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@120| |key#0@@167|) true) (=> true (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@120| |key#0@@167|)))) :qid |totalord.721:12| :skolemid |3321| :pattern ( (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@120| |key#0@@167|) ($IsGoodHeap $Heap@@45)) )))
(assert (forall ((arg0@@472 T@U) (arg1@@282 T@U) ) (! (= (type (|$let#13_next| arg0@@472 arg1@@282)) (SeqType BoxType)) :qid |funType:$let#13_next| :pattern ( (|$let#13_next| arg0@@472 arg1@@282)) )))
(assert (forall ((m@@77 T@U) (key@@0 T@U) ) (!  (=> (and (and (= (type m@@77) (MapType0Type BoxType boolType)) (= (type key@@0) (SeqType BoxType))) (|$let#13$canCall| m@@77 key@@0)) (and ($Is (|$let#13_next| m@@77 key@@0) (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select m@@77 ($Box (|$let#13_next| m@@77 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 (|$let#13_next| m@@77 key@@0))) (forall ((|other#1@@0| T@U) ) (!  (=> (and (= (type |other#1@@0|) (SeqType BoxType)) ($Is |other#1@@0| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select m@@77 ($Box |other#1@@0|))) (not (|Seq#Equal| |other#1@@0| (|$let#13_next| m@@77 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) (Lexicographic__Byte__Order.__default.lt (|$let#13_next| m@@77 key@@0) |other#1@@0|))) :qid |totalord.726:18| :skolemid |3326| :pattern ( (Lexicographic__Byte__Order.__default.lt (|$let#13_next| m@@77 key@@0) |other#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) :pattern ( (MapType0Select m@@77 ($Box |other#1@@0|))) ))))) :qid |totalord.723:8| :skolemid |3327| :pattern ( (|$let#13_next| m@@77 key@@0)) )))
(assert  (=> true (forall (($Heap@@46 T@U) (|m#0@@121| T@U) (|key#0@@168| T@U) ) (!  (=> (and (and (and (= (type $Heap@@46) (MapType0Type refType MapType1Type)) (= (type |m#0@@121|) (MapType0Type BoxType boolType))) (= (type |key#0@@168|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@121| |key#0@@168|) (and (and ($IsGoodHeap $Heap@@46) ($Is |m#0@@121| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@168| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#0@@2| T@U) ) (!  (=> (and (= (type |next#0@@2|) (SeqType BoxType)) ($Is |next#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (U_2_bool (MapType0Select |m#0@@121| ($Box |next#0@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@168| |next#0@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@168| |next#0@@2|) (Lexicographic__Byte__Order.__default.lt |key#0@@168| |next#0@@2|)) (forall ((|other#0@@2| T@U) ) (!  (=> (and (= (type |other#0@@2|) (SeqType BoxType)) ($Is |other#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (not (|Seq#Equal| |other#0@@2| |next#0@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@168| |other#0@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@168| |other#0@@2|) (Lexicographic__Byte__Order.__default.lt |key#0@@168| |other#0@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#0@@2| |other#0@@2|)))) :qid |totalord.726:18| :skolemid |3322| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@2| |other#0@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@168| |other#0@@2|)) :pattern ( (MapType0Select |m#0@@121| ($Box |other#0@@2|))) ))))) :qid |totalord.723:8| :skolemid |3323| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@168| |next#0@@2|)) :pattern ( (MapType0Select |m#0@@121| ($Box |next#0@@2|))) )) (=> (exists ((|next#0@@3| T@U) ) (!  (and (= (type |next#0@@3|) (SeqType BoxType)) (and ($Is |next#0@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@121| ($Box |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@168| |next#0@@3|)) (forall ((|other#0@@3| T@U) ) (!  (=> (and (= (type |other#0@@3|) (SeqType BoxType)) ($Is |other#0@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@121| ($Box |other#0@@3|))) (not (|Seq#Equal| |other#0@@3| |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@168| |other#0@@3|)) (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|))) :qid |totalord.726:18| :skolemid |3324| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@168| |other#0@@3|)) :pattern ( (MapType0Select |m#0@@121| ($Box |other#0@@3|))) ))))) :qid |totalord.723:8| :skolemid |3325| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@168| |next#0@@3|)) :pattern ( (MapType0Select |m#0@@121| ($Box |next#0@@3|))) )) (|$let#13$canCall| |m#0@@121| |key#0@@168|))) (= (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@121| |key#0@@168|) (ite (exists ((|next#0@@4| T@U) ) (!  (and (= (type |next#0@@4|) (SeqType BoxType)) (and ($Is |next#0@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@121| ($Box |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@168| |next#0@@4|)) (forall ((|other#0@@4| T@U) ) (!  (=> (and (= (type |other#0@@4|) (SeqType BoxType)) ($Is |other#0@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@121| ($Box |other#0@@4|))) (not (|Seq#Equal| |other#0@@4| |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@168| |other#0@@4|)) (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|))) :qid |totalord.726:18| :skolemid |3328| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@168| |other#0@@4|)) :pattern ( (MapType0Select |m#0@@121| ($Box |other#0@@4|))) ))))) :qid |totalord.723:8| :skolemid |3329| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@168| |next#0@@4|)) :pattern ( (MapType0Select |m#0@@121| ($Box |next#0@@4|))) )) (let ((|next#1@@0| (|$let#13_next| |m#0@@121| |key#0@@168|))) (|#Options.Option.Some| ($Box |next#1@@0|))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |3330| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@121| |key#0@@168|) ($IsGoodHeap $Heap@@46)) ))))
(assert  (=> true (forall (($Heap@@47 T@U) (|m#0@@122| T@U) (|key#0@@169| T@U) ) (!  (=> (and (and (and (= (type $Heap@@47) (MapType0Type refType MapType1Type)) (= (type |m#0@@122|) (MapType0Type BoxType boolType))) (= (type |key#0@@169|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@122|) (Lit |key#0@@169|)) (and (and ($IsGoodHeap $Heap@@47) ($Is |m#0@@122| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@169| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#2@@2| T@U) ) (!  (=> (and (= (type |next#2@@2|) (SeqType BoxType)) ($Is |next#2@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@122|) ($Box |next#2@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@169|) |next#2@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@169|) |next#2@@2|) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@169|) |next#2@@2|)) (forall ((|other#2@@2| T@U) ) (!  (=> (and (= (type |other#2@@2|) (SeqType BoxType)) ($Is |other#2@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (not (|Seq#Equal| |other#2@@2| |next#2@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@169|) |other#2@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@169|) |other#2@@2|) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@169|) |other#2@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#2@@2| |other#2@@2|)))) :qid |totalord.726:18| :skolemid |3331| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@2| |other#2@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@169| |other#2@@2|)) :pattern ( (MapType0Select |m#0@@122| ($Box |other#2@@2|))) ))))) :qid |totalord.723:8| :skolemid |3332| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@169| |next#2@@2|)) :pattern ( (MapType0Select |m#0@@122| ($Box |next#2@@2|))) )) (=> (exists ((|next#2@@3| T@U) ) (!  (and (= (type |next#2@@3|) (SeqType BoxType)) (and ($Is |next#2@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@122|) ($Box |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@169|) |next#2@@3|)) (forall ((|other#2@@3| T@U) ) (!  (=> (and (= (type |other#2@@3|) (SeqType BoxType)) ($Is |other#2@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@122|) ($Box |other#2@@3|))) (not (|Seq#Equal| |other#2@@3| |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@169|) |other#2@@3|)) (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|))) :qid |totalord.726:18| :skolemid |3333| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@169| |other#2@@3|)) :pattern ( (MapType0Select |m#0@@122| ($Box |other#2@@3|))) ))))) :qid |totalord.723:8| :skolemid |3334| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@169| |next#2@@3|)) :pattern ( (MapType0Select |m#0@@122| ($Box |next#2@@3|))) )) (|$let#13$canCall| (Lit |m#0@@122|) (Lit |key#0@@169|)))) (= (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@122|) (Lit |key#0@@169|)) (ite (exists ((|next#2@@4| T@U) ) (!  (and (= (type |next#2@@4|) (SeqType BoxType)) (and ($Is |next#2@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@122|) ($Box |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@169|) |next#2@@4|)) (forall ((|other#2@@4| T@U) ) (!  (=> (and (= (type |other#2@@4|) (SeqType BoxType)) ($Is |other#2@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@122|) ($Box |other#2@@4|))) (not (|Seq#Equal| |other#2@@4| |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@169|) |other#2@@4|)) (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|))) :qid |totalord.726:18| :skolemid |3335| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@169| |other#2@@4|)) :pattern ( (MapType0Select |m#0@@122| ($Box |other#2@@4|))) ))))) :qid |totalord.723:8| :skolemid |3336| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@169| |next#2@@4|)) :pattern ( (MapType0Select |m#0@@122| ($Box |next#2@@4|))) )) (let ((|next#3@@0| (|$let#13_next| (Lit |m#0@@122|) (Lit |key#0@@169|)))) (|#Options.Option.Some| ($Box |next#3@@0|))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |3337| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@122|) (Lit |key#0@@169|)) ($IsGoodHeap $Heap@@47)) ))))
(assert (forall ((arg0@@473 T@U) (arg1@@283 T@U) (arg2@@205 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@473 arg1@@283 arg2@@205)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.MapSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@473 arg1@@283 arg2@@205)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V T@U) (|m#0@@123| T@U) (|key#0@@170| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@123|) (MapType BoxType BoxType))) (= (type |key#0@@170|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@123| |key#0@@170|) (and ($Is |m#0@@123| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V)) ($Is |key#0@@170| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@123| |key#0@@170|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |3338| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@123| |key#0@@170|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@124| T@U) (|key#0@@171| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@124|) (MapType BoxType BoxType))) (= (type |key#0@@171|) (SeqType BoxType))) (and ($Is |m#0@@124| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@0)) ($Is |key#0@@171| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@124| |key#0@@171|) true) (=> true (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@124| |key#0@@171|)))) :qid |unknown.0:0| :skolemid |3339| :pattern ( (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@124| |key#0@@171|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@125| T@U) (|key#0@@172| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@125|) (MapType BoxType BoxType))) (= (type |key#0@@172|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@125| |key#0@@172|) (and ($Is |m#0@@125| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@1)) ($Is |key#0@@172| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@125|) |key#0@@172|) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@125| |key#0@@172|) (Lexicographic__Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@125|) |key#0@@172|)))) :qid |unknown.0:0| :skolemid |3340| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@125| |key#0@@172|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@126| T@U) (|key#0@@173| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@126|) (MapType BoxType BoxType))) (= (type |key#0@@173|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@126|) (Lit |key#0@@173|)) (and ($Is |m#0@@126| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@2)) ($Is |key#0@@173| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@126|))) (Lit |key#0@@173|)) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@126|) (Lit |key#0@@173|)) (Lit (Lexicographic__Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@126|))) (Lit |key#0@@173|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3341| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@126|) (Lit |key#0@@173|))) ))))
(assert (forall ((arg0@@474 T@U) (arg1@@284 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@474 arg1@@284)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SeqSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@474 arg1@@284)) )))
(assert  (=> true (forall ((|m#0@@127| T@U) (|key#0@@174| T@U) ) (!  (=> (and (and (= (type |m#0@@127|) (SeqType BoxType)) (= (type |key#0@@174|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@127| |key#0@@174|) (and ($Is |m#0@@127| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@174| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@127| |key#0@@174|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.737:25| :skolemid |3342| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@127| |key#0@@174|)) ))))
(assert (forall ((|m#0@@128| T@U) (|key#0@@175| T@U) ) (!  (=> (and (and (= (type |m#0@@128|) (SeqType BoxType)) (= (type |key#0@@175|) (SeqType BoxType))) (and ($Is |m#0@@128| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@175| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@128| |key#0@@175|) true) (=> true (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@128| |key#0@@175|)))) :qid |totalord.737:25| :skolemid |3343| :pattern ( (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@128| |key#0@@175|)) )))
(assert  (=> true (forall ((|m#0@@129| T@U) (|key#0@@176| T@U) ) (!  (=> (and (and (= (type |m#0@@129|) (SeqType BoxType)) (= (type |key#0@@176|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@129| |key#0@@176|) (and ($Is |m#0@@129| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@176| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#545| (TSeq Tclass.NativeTypes.byte) |m#0@@129|) |key#0@@176|) (= (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@129| |key#0@@176|) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#545| (TSeq Tclass.NativeTypes.byte) |m#0@@129|) |key#0@@176|)))) :qid |totalord.737:25| :skolemid |3344| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@129| |key#0@@176|)) ))))
(assert  (=> true (forall ((|m#0@@130| T@U) (|key#0@@177| T@U) ) (!  (=> (and (and (= (type |m#0@@130|) (SeqType BoxType)) (= (type |key#0@@177|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@130|) (Lit |key#0@@177|)) (and ($Is |m#0@@130| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@177| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#545| (TSeq Tclass.NativeTypes.byte) |m#0@@130|) (Lit |key#0@@177|)) (= (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@130|) (Lit |key#0@@177|)) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#545| (TSeq Tclass.NativeTypes.byte) |m#0@@130|) (Lit |key#0@@177|))))) :qid |totalord.737:25| :weight 3 :skolemid |3345| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@130|) (Lit |key#0@@177|))) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@577 T@U) (|s#0@@122| T@U) (|m#0@@131| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@577) LayerTypeType)) (= (type |s#0@@122|) (SeqType BoxType))) (= (type |m#0@@131|) (MapType BoxType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@577) |s#0@@122| |m#0@@131|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@577 |s#0@@122| |m#0@@131|)) (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@577 |s#0@@122| |m#0@@131|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@577) |s#0@@122| |m#0@@131|)))) :qid |unknown.0:0| :skolemid |3346| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@577) |s#0@@122| |m#0@@131|)) )))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@578 T@U) (|s#0@@123| T@U) (|m#0@@132| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@578) LayerTypeType)) (= (type |s#0@@123|) (SeqType BoxType))) (= (type |m#0@@132|) (MapType BoxType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@578 |s#0@@123| |m#0@@132|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@123| |m#0@@132|)) (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@123| |m#0@@132|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@578 |s#0@@123| |m#0@@132|)))) :qid |unknown.0:0| :skolemid |3347| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@578) |s#0@@123| |m#0@@132|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@579 T@U) (|s#0@@124| T@U) (|m#0@@133| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@579) LayerTypeType)) (= (type |s#0@@124|) (SeqType BoxType))) (= (type |m#0@@133|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@124| |m#0@@133|) (and ($Is |s#0@@124| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@133| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |3348| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 $ly@@579 |s#0@@124| |m#0@@133|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@580 T@U) (|s#0@@125| T@U) (|m#0@@134| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@580) LayerTypeType)) (= (type |s#0@@125|) (SeqType BoxType))) (= (type |m#0@@134|) (MapType BoxType BoxType))) (and ($Is |s#0@@125| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@134| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@580 |s#0@@125| |m#0@@134|) true) (=> true (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@580 |s#0@@125| |m#0@@134|)))) :qid |unknown.0:0| :skolemid |3349| :pattern ( (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@580 |s#0@@125| |m#0@@134|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@581 T@U) (|s#0@@126| T@U) (|m#0@@135| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@581) LayerTypeType)) (= (type |s#0@@126|) (SeqType BoxType))) (= (type |m#0@@135|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@126| |m#0@@135|) (and ($Is |s#0@@126| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@135| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@126|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@126|))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@126|))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@126|)))) (forall ((|i#0@@125| Int) ) (!  (and (=> (< |i#0@@125| (|Seq#Length| |s#0@@126|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@125|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@125|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@135|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@125|)))))) (=> (< |i#0@@125| (|Seq#Length| |s#0@@126|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@125|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@125|))))))) :qid |totalord.761:16| :skolemid |3350| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@125|))) )))) (=> (and (forall ((|i#0@@126| Int) ) (!  (and (=> (< |i#0@@126| (|Seq#Length| |s#0@@126|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@126|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@126|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@135|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@126|)))))) (=> (< |i#0@@126| (|Seq#Length| |s#0@@126|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@126|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@126|))))))) :qid |totalord.761:16| :skolemid |3353| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@126|))) )) (forall ((|i#0@@127| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@127|) (< |i#0@@127| (|Seq#Length| |s#0@@126|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@135|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@127|)))))) (=> (and (<= (LitInt 0) |i#0@@127|) (< |i#0@@127| (|Seq#Length| |s#0@@126|))) (= (MapType0Select (|Map#Elements| |m#0@@135|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@127|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@127|))))))) :qid |totalord.761:16| :skolemid |3354| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@127|))) ))) (forall ((|key#0@@178| T@U) ) (!  (=> (and (and (= (type |key#0@@178|) (SeqType BoxType)) ($Is |key#0@@178| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@135|) ($Box |key#0@@178|)))) (forall ((|i#1@@48| Int) ) (!  (and (=> (< |i#1@@48| (|Seq#Length| |s#0@@126|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@48|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@48|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@48|)))) |key#0@@178|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@48|))))) :qid |totalord.762:44| :skolemid |3351| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@48|))) ))) :qid |totalord.762:16| :skolemid |3352| :pattern ( (MapType0Select (|Map#Elements| |m#0@@135|) ($Box |key#0@@178|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@135|) ($Box |key#0@@178|))) )))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@581) |s#0@@126| |m#0@@135|) (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@126|)))) (forall ((|i#0@@128| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@128|) (< |i#0@@128| (|Seq#Length| |s#0@@126|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@135|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@128|)))))) (=> (and (<= (LitInt 0) |i#0@@128|) (< |i#0@@128| (|Seq#Length| |s#0@@126|))) (= (MapType0Select (|Map#Elements| |m#0@@135|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@128|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@128|))))))) :qid |totalord.761:16| :skolemid |3355| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@128|))) ))) (forall ((|key#0@@179| T@U) ) (!  (=> (and (and (= (type |key#0@@179|) (SeqType BoxType)) ($Is |key#0@@179| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@135|) ($Box |key#0@@179|)))) (exists ((|i#1@@49| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@49|) (< |i#1@@49| (|Seq#Length| |s#0@@126|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@49|)))) |key#0@@179|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@49|))) (MapType0Select (|Map#Elements| |m#0@@135|) ($Box |key#0@@179|)))) :qid |totalord.762:44| :skolemid |3356| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@49|))) ))) :qid |totalord.762:16| :skolemid |3357| :pattern ( (MapType0Select (|Map#Elements| |m#0@@135|) ($Box |key#0@@179|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@135|) ($Box |key#0@@179|))) )))) (=> (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@126|)))) (forall ((|i#0@@129| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@129|) (< |i#0@@129| (|Seq#Length| |s#0@@126|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@135|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@129|)))))) (=> (and (<= (LitInt 0) |i#0@@129|) (< |i#0@@129| (|Seq#Length| |s#0@@126|))) (= (MapType0Select (|Map#Elements| |m#0@@135|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@129|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@129|))))))) :qid |totalord.761:16| :skolemid |3355| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#0@@129|))) ))) (forall ((|key#0@@180| T@U) ) (!  (=> (and (and (= (type |key#0@@180|) (SeqType BoxType)) ($Is |key#0@@180| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@135|) ($Box |key#0@@180|)))) (exists ((|i#1@@50| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@50|) (< |i#1@@50| (|Seq#Length| |s#0@@126|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@50|)))) |key#0@@180|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@50|))) (MapType0Select (|Map#Elements| |m#0@@135|) ($Box |key#0@@180|)))) :qid |totalord.762:44| :skolemid |3356| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@126| |i#1@@50|))) ))) :qid |totalord.762:16| :skolemid |3357| :pattern ( (MapType0Select (|Map#Elements| |m#0@@135|) ($Box |key#0@@180|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@135|) ($Box |key#0@@180|))) ))) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@581) |s#0@@126| |m#0@@135|))))) :qid |unknown.0:0| :skolemid |3358| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@581) |s#0@@126| |m#0@@135|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@582 T@U) (|s#0@@127| T@U) (|m#0@@136| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@582) LayerTypeType)) (= (type |s#0@@127|) (SeqType BoxType))) (= (type |m#0@@136|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@127|) (Lit |m#0@@136|)) (and ($Is |s#0@@127| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@136| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@127|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@127|)))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@127|)))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@127|))))) (forall ((|i#2@@11| Int) ) (!  (and (=> (< |i#2@@11| (|Seq#Length| (Lit |s#0@@127|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@11|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@11|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@136|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@11|)))))) (=> (< |i#2@@11| (|Seq#Length| (Lit |s#0@@127|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@11|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@11|))))))) :qid |totalord.761:16| :skolemid |3359| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@127| |i#2@@11|))) )))) (=> (and (forall ((|i#2@@12| Int) ) (!  (and (=> (< |i#2@@12| (|Seq#Length| (Lit |s#0@@127|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@12|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@12|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@136|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@12|)))))) (=> (< |i#2@@12| (|Seq#Length| (Lit |s#0@@127|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@12|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@12|))))))) :qid |totalord.761:16| :skolemid |3362| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@127| |i#2@@12|))) )) (forall ((|i#2@@13| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@13|) (< |i#2@@13| (|Seq#Length| (Lit |s#0@@127|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@136|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@13|)))))) (=> (and (<= (LitInt 0) |i#2@@13|) (< |i#2@@13| (|Seq#Length| (Lit |s#0@@127|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@136|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@13|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@13|))))))) :qid |totalord.761:16| :skolemid |3363| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@127| |i#2@@13|))) ))) (forall ((|key#1@@21| T@U) ) (!  (=> (and (and (= (type |key#1@@21|) (SeqType BoxType)) ($Is |key#1@@21| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@136|) ($Box |key#1@@21|)))) (forall ((|i#3@@9| Int) ) (!  (and (=> (< |i#3@@9| (|Seq#Length| (Lit |s#0@@127|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#3@@9|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#3@@9|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#3@@9|)))) |key#1@@21|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#3@@9|))))) :qid |totalord.762:44| :skolemid |3360| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@127| |i#3@@9|))) ))) :qid |totalord.762:16| :skolemid |3361| :pattern ( (MapType0Select (|Map#Elements| |m#0@@136|) ($Box |key#1@@21|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@136|) ($Box |key#1@@21|))) )))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@582) (Lit |s#0@@127|) (Lit |m#0@@136|)) (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@127|))))) (forall ((|i#2@@14| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@14|) (< |i#2@@14| (|Seq#Length| (Lit |s#0@@127|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@136|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@14|)))))) (=> (and (<= (LitInt 0) |i#2@@14|) (< |i#2@@14| (|Seq#Length| (Lit |s#0@@127|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@136|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@14|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@14|))))))) :qid |totalord.761:16| :skolemid |3364| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@127| |i#2@@14|))) ))) (forall ((|key#1@@22| T@U) ) (!  (=> (and (and (= (type |key#1@@22|) (SeqType BoxType)) ($Is |key#1@@22| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@136|) ($Box |key#1@@22|)))) (exists ((|i#3@@10| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@10|) (< |i#3@@10| (|Seq#Length| (Lit |s#0@@127|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#3@@10|)))) |key#1@@22|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#3@@10|))) (MapType0Select (|Map#Elements| (Lit |m#0@@136|)) ($Box |key#1@@22|)))) :qid |totalord.762:44| :skolemid |3365| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@127| |i#3@@10|))) ))) :qid |totalord.762:16| :skolemid |3366| :pattern ( (MapType0Select (|Map#Elements| |m#0@@136|) ($Box |key#1@@22|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@136|) ($Box |key#1@@22|))) )))) (=> (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@127|))))) (forall ((|i#2@@15| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@15|) (< |i#2@@15| (|Seq#Length| (Lit |s#0@@127|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@136|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@15|)))))) (=> (and (<= (LitInt 0) |i#2@@15|) (< |i#2@@15| (|Seq#Length| (Lit |s#0@@127|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@136|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@15|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#2@@15|))))))) :qid |totalord.761:16| :skolemid |3364| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@127| |i#2@@15|))) ))) (forall ((|key#1@@23| T@U) ) (!  (=> (and (and (= (type |key#1@@23|) (SeqType BoxType)) ($Is |key#1@@23| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@136|) ($Box |key#1@@23|)))) (exists ((|i#3@@11| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@11|) (< |i#3@@11| (|Seq#Length| (Lit |s#0@@127|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#3@@11|)))) |key#1@@23|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@127|) |i#3@@11|))) (MapType0Select (|Map#Elements| (Lit |m#0@@136|)) ($Box |key#1@@23|)))) :qid |totalord.762:44| :skolemid |3365| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@127| |i#3@@11|))) ))) :qid |totalord.762:16| :skolemid |3366| :pattern ( (MapType0Select (|Map#Elements| |m#0@@136|) ($Box |key#1@@23|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@136|) ($Box |key#1@@23|))) ))) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@582) (Lit |s#0@@127|) (Lit |m#0@@136|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3367| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@582) (Lit |s#0@@127|) (Lit |m#0@@136|))) ))))
(assert (forall ((arg0@@475 T@U) (arg1@@285 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimum arg0@@475 arg1@@285)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.minimum| :pattern ( (Lexicographic__Byte__Order.__default.minimum arg0@@475 arg1@@285)) )))
(assert (forall (($ly@@583 T@U) (|s#0@@128| T@U) ) (!  (=> (and (= (type $ly@@583) LayerTypeType) (= (type |s#0@@128|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@583) |s#0@@128|) (Lexicographic__Byte__Order.__default.minimum $ly@@583 |s#0@@128|))) :qid |totalord.765:22| :skolemid |3368| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@583) |s#0@@128|)) )))
(assert (forall (($ly@@584 T@U) (|s#0@@129| T@U) ) (!  (=> (and (= (type $ly@@584) LayerTypeType) (= (type |s#0@@129|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum $ly@@584 |s#0@@129|) (Lexicographic__Byte__Order.__default.minimum $LZ |s#0@@129|))) :qid |totalord.765:22| :skolemid |3369| :pattern ( (Lexicographic__Byte__Order.__default.minimum (AsFuelBottom $ly@@584) |s#0@@129|)) )))
(assert  (=> true (forall (($ly@@585 T@U) (|s#0@@130| T@U) ) (!  (=> (and (and (= (type $ly@@585) LayerTypeType) (= (type |s#0@@130|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@130|) (and ($Is |s#0@@130| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@130|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@130| ($Box (Lexicographic__Byte__Order.__default.minimum $ly@@585 |s#0@@130|)))) (forall ((|y#0@@15| T@U) ) (!  (=> (= (type |y#0@@15|) (SeqType BoxType)) (=> (and ($Is |y#0@@15| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@130| ($Box |y#0@@15|)))) (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@585 |s#0@@130|) |y#0@@15|))) :qid |totalord.768:18| :skolemid |3370| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@585 |s#0@@130|) |y#0@@15|)) :pattern ( (MapType0Select |s#0@@130| ($Box |y#0@@15|))) ))) ($Is (Lexicographic__Byte__Order.__default.minimum $ly@@585 |s#0@@130|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.765:22| :skolemid |3371| :pattern ( (Lexicographic__Byte__Order.__default.minimum $ly@@585 |s#0@@130|)) ))))
(assert (forall (($ly@@586 T@U) ($Heap@@48 T@U) (|s#0@@131| T@U) ) (!  (=> (and (and (and (= (type $ly@@586) LayerTypeType) (= (type $Heap@@48) (MapType0Type refType MapType1Type))) (= (type |s#0@@131|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@48) ($Is |s#0@@131| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@586 |s#0@@131|) (>= (|Set#Card| |s#0@@131|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@131|) (LitInt 1)) (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@586 |s#0@@131|)))) :qid |totalord.765:22| :skolemid |3372| :pattern ( (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@586 |s#0@@131|) ($IsGoodHeap $Heap@@48)) )))
(assert (forall ((arg0@@476 T@U) ) (! (= (type (|$let#16_a| arg0@@476)) (SeqType BoxType)) :qid |funType:$let#16_a| :pattern ( (|$let#16_a| arg0@@476)) )))
(assert (forall ((s@@48 T@U) ) (!  (=> (and (= (type s@@48) (MapType0Type BoxType boolType)) (|$let#16$canCall| s@@48)) (and ($Is (|$let#16_a| s@@48) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@48 ($Box (|$let#16_a| s@@48)))))) :qid |totalord.772:5| :skolemid |3373| :pattern ( (|$let#16_a| s@@48)) )))
(assert  (=> true (forall (($ly@@587 T@U) ($Heap@@49 T@U) (|s#0@@132| T@U) ) (!  (=> (and (and (and (= (type $ly@@587) LayerTypeType) (= (type $Heap@@49) (MapType0Type refType MapType1Type))) (= (type |s#0@@132|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@132|) (and (and ($IsGoodHeap $Heap@@49) ($Is |s#0@@132| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@132|) (LitInt 1))))) (and (and (|$let#16$canCall| |s#0@@132|) (let ((|s'#0@@1| (|Set#Difference| |s#0@@132| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#16_a| |s#0@@132|)))))) (=> (not (|Set#Equal| |s'#0@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#0@@1|) (let ((|m'#0@@12| (Lexicographic__Byte__Order.__default.minimum $ly@@587 |s'#0@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#16_a| |s#0@@132|) |m'#0@@12|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@587) |s#0@@132|) (let ((|a#0@@147| (|$let#16_a| |s#0@@132|))) (let ((|s'#1@@1| (|Set#Difference| |s#0@@132| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@147|))))) (ite (|Set#Equal| |s'#1@@1| (|Set#Empty| BoxType)) |a#0@@147| (let ((|m'#1@@3| (Lexicographic__Byte__Order.__default.minimum $ly@@587 |s'#1@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#0@@147| |m'#1@@3|) |a#0@@147| |m'#1@@3|)))))))) :qid |totalord.765:22| :skolemid |3374| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@587) |s#0@@132|) ($IsGoodHeap $Heap@@49)) ))))
(assert  (=> true (forall (($ly@@588 T@U) ($Heap@@50 T@U) (|s#0@@133| T@U) ) (!  (=> (and (and (and (= (type $ly@@588) LayerTypeType) (= (type $Heap@@50) (MapType0Type refType MapType1Type))) (= (type |s#0@@133|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@133|)) (and (and ($IsGoodHeap $Heap@@50) ($Is |s#0@@133| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@133|)) (LitInt 1))))) (and (and (|$let#16$canCall| (Lit |s#0@@133|)) (let ((|s'#2@@1| (|Set#Difference| |s#0@@133| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#16_a| (Lit |s#0@@133|))))))) (=> (not (|Set#Equal| |s'#2@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#2@@1|) (let ((|m'#2@@2| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@588) |s'#2@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#16_a| (Lit |s#0@@133|)) |m'#2@@2|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@588) (Lit |s#0@@133|)) (let ((|a#1@@4| (|$let#16_a| (Lit |s#0@@133|)))) (let ((|s'#3@@1| (|Set#Difference| |s#0@@133| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@4|))))) (ite (|Set#Equal| |s'#3@@1| (|Set#Empty| BoxType)) |a#1@@4| (let ((|m'#3@@1| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@588) |s'#3@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#1@@4| |m'#3@@1|) |a#1@@4| |m'#3@@1|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |3375| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@588) (Lit |s#0@@133|)) ($IsGoodHeap $Heap@@50)) ))))
(assert (forall (($ly@@589 T@U) (|s#0@@134| T@U) ) (!  (=> (and (= (type $ly@@589) LayerTypeType) (= (type |s#0@@134|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@589) |s#0@@134|) (Lexicographic__Byte__Order.__default.minimumOpt $ly@@589 |s#0@@134|))) :qid |totalord.788:22| :skolemid |3376| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@589) |s#0@@134|)) )))
(assert (forall (($ly@@590 T@U) (|s#0@@135| T@U) ) (!  (=> (and (= (type $ly@@590) LayerTypeType) (= (type |s#0@@135|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt $ly@@590 |s#0@@135|) (Lexicographic__Byte__Order.__default.minimumOpt $LZ |s#0@@135|))) :qid |totalord.788:22| :skolemid |3377| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@590) |s#0@@135|)) )))
(assert  (=> true (forall (($ly@@591 T@U) (|s#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@591) LayerTypeType) (= (type |s#0@@136|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@136|) ($Is |s#0@@136| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@591 |s#0@@136|)) (U_2_bool (MapType0Select |s#0@@136| (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@591 |s#0@@136|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@591 |s#0@@136|)) (forall ((|y#0@@16| T@U) ) (!  (=> (= (type |y#0@@16|) (SeqType BoxType)) (=> (and ($Is |y#0@@16| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@136| ($Box |y#0@@16|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@591 |s#0@@136|))) |y#0@@16|))) :qid |totalord.790:30| :skolemid |3378| :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@591 |s#0@@136|))) |y#0@@16|)) :pattern ( (MapType0Select |s#0@@136| ($Box |y#0@@16|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@591 |s#0@@136|)) (|Set#Equal| |s#0@@136| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.minimumOpt $ly@@591 |s#0@@136|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalord.788:22| :skolemid |3379| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt $ly@@591 |s#0@@136|)) ))))
(assert (forall (($ly@@592 T@U) (|s#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@592) LayerTypeType) (= (type |s#0@@137|) (MapType0Type BoxType boolType))) ($Is |s#0@@137| (TSet (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@592 |s#0@@137|) true) (=> true (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@592 |s#0@@137|)))) :qid |totalord.788:22| :skolemid |3380| :pattern ( (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@592 |s#0@@137|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@593 T@U) (|s#0@@138| T@U) ) (!  (=> (and (and (= (type $ly@@593) LayerTypeType) (= (type |s#0@@138|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@138|) ($Is |s#0@@138| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@138| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@138|)) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@593) |s#0@@138|) (ite (|Set#Equal| |s#0@@138| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum |s#0@@138|))))))) :qid |totalord.788:22| :skolemid |3381| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@593) |s#0@@138|)) ))))
(assert  (=> true (forall (($ly@@594 T@U) (|s#0@@139| T@U) ) (!  (=> (and (and (= (type $ly@@594) LayerTypeType) (= (type |s#0@@139|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@139|)) ($Is |s#0@@139| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@139| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@139|))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@594) (Lit |s#0@@139|)) (ite (|Set#Equal| |s#0@@139| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum (Lit |s#0@@139|)))))))) :qid |totalord.788:22| :weight 3 :skolemid |3382| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@594) (Lit |s#0@@139|))) ))))
(assert (forall (($ly@@595 T@U) (|s#0@@140| T@U) ) (!  (=> (and (= (type $ly@@595) LayerTypeType) (= (type |s#0@@140|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@595) |s#0@@140|) (Lexicographic__Byte__Order.__default.maximum $ly@@595 |s#0@@140|))) :qid |totalord.796:22| :skolemid |3383| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@595) |s#0@@140|)) )))
(assert (forall (($ly@@596 T@U) (|s#0@@141| T@U) ) (!  (=> (and (= (type $ly@@596) LayerTypeType) (= (type |s#0@@141|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum $ly@@596 |s#0@@141|) (Lexicographic__Byte__Order.__default.maximum $LZ |s#0@@141|))) :qid |totalord.796:22| :skolemid |3384| :pattern ( (Lexicographic__Byte__Order.__default.maximum (AsFuelBottom $ly@@596) |s#0@@141|)) )))
(assert  (=> true (forall (($ly@@597 T@U) (|s#0@@142| T@U) ) (!  (=> (and (and (= (type $ly@@597) LayerTypeType) (= (type |s#0@@142|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@142|) (and ($Is |s#0@@142| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@142|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@142| ($Box (Lexicographic__Byte__Order.__default.maximum $ly@@597 |s#0@@142|)))) (forall ((|y#0@@17| T@U) ) (!  (=> (= (type |y#0@@17|) (SeqType BoxType)) (=> (and ($Is |y#0@@17| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@142| ($Box |y#0@@17|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@17| (Lexicographic__Byte__Order.__default.maximum $ly@@597 |s#0@@142|)))) :qid |totalord.799:18| :skolemid |3385| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@17| (Lexicographic__Byte__Order.__default.maximum $ly@@597 |s#0@@142|))) :pattern ( (MapType0Select |s#0@@142| ($Box |y#0@@17|))) ))) ($Is (Lexicographic__Byte__Order.__default.maximum $ly@@597 |s#0@@142|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.796:22| :skolemid |3386| :pattern ( (Lexicographic__Byte__Order.__default.maximum $ly@@597 |s#0@@142|)) ))))
(assert (forall (($ly@@598 T@U) ($Heap@@51 T@U) (|s#0@@143| T@U) ) (!  (=> (and (and (and (= (type $ly@@598) LayerTypeType) (= (type $Heap@@51) (MapType0Type refType MapType1Type))) (= (type |s#0@@143|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@51) ($Is |s#0@@143| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@598 |s#0@@143|) (>= (|Set#Card| |s#0@@143|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@143|) (LitInt 1)) (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@598 |s#0@@143|)))) :qid |totalord.796:22| :skolemid |3387| :pattern ( (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@598 |s#0@@143|) ($IsGoodHeap $Heap@@51)) )))
(assert (forall ((arg0@@477 T@U) ) (! (= (type (|$let#19_a| arg0@@477)) (SeqType BoxType)) :qid |funType:$let#19_a| :pattern ( (|$let#19_a| arg0@@477)) )))
(assert (forall ((s@@49 T@U) ) (!  (=> (and (= (type s@@49) (MapType0Type BoxType boolType)) (|$let#19$canCall| s@@49)) (and ($Is (|$let#19_a| s@@49) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@49 ($Box (|$let#19_a| s@@49)))))) :qid |totalord.801:5| :skolemid |3388| :pattern ( (|$let#19_a| s@@49)) )))
(assert  (=> true (forall (($ly@@599 T@U) ($Heap@@52 T@U) (|s#0@@144| T@U) ) (!  (=> (and (and (and (= (type $ly@@599) LayerTypeType) (= (type $Heap@@52) (MapType0Type refType MapType1Type))) (= (type |s#0@@144|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@144|) (and (and ($IsGoodHeap $Heap@@52) ($Is |s#0@@144| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@144|) (LitInt 1))))) (and (and (|$let#19$canCall| |s#0@@144|) (let ((|s'#0@@2| (|Set#Difference| |s#0@@144| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#19_a| |s#0@@144|)))))) (=> (not (|Set#Equal| |s'#0@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#0@@2|) (let ((|m'#0@@13| (Lexicographic__Byte__Order.__default.maximum $ly@@599 |s'#0@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#0@@13| (|$let#19_a| |s#0@@144|))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@599) |s#0@@144|) (let ((|a#0@@148| (|$let#19_a| |s#0@@144|))) (let ((|s'#1@@2| (|Set#Difference| |s#0@@144| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@148|))))) (ite (|Set#Equal| |s'#1@@2| (|Set#Empty| BoxType)) |a#0@@148| (let ((|m'#1@@4| (Lexicographic__Byte__Order.__default.maximum $ly@@599 |s'#1@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#1@@4| |a#0@@148|) |a#0@@148| |m'#1@@4|)))))))) :qid |totalord.796:22| :skolemid |3389| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@599) |s#0@@144|) ($IsGoodHeap $Heap@@52)) ))))
(assert  (=> true (forall (($ly@@600 T@U) ($Heap@@53 T@U) (|s#0@@145| T@U) ) (!  (=> (and (and (and (= (type $ly@@600) LayerTypeType) (= (type $Heap@@53) (MapType0Type refType MapType1Type))) (= (type |s#0@@145|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@145|)) (and (and ($IsGoodHeap $Heap@@53) ($Is |s#0@@145| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@145|)) (LitInt 1))))) (and (and (|$let#19$canCall| (Lit |s#0@@145|)) (let ((|s'#2@@2| (|Set#Difference| |s#0@@145| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#19_a| (Lit |s#0@@145|))))))) (=> (not (|Set#Equal| |s'#2@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#2@@2|) (let ((|m'#2@@3| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@600) |s'#2@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#2@@3| (|$let#19_a| (Lit |s#0@@145|)))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@600) (Lit |s#0@@145|)) (let ((|a#1@@5| (|$let#19_a| (Lit |s#0@@145|)))) (let ((|s'#3@@2| (|Set#Difference| |s#0@@145| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@5|))))) (ite (|Set#Equal| |s'#3@@2| (|Set#Empty| BoxType)) |a#1@@5| (let ((|m'#3@@2| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@600) |s'#3@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#3@@2| |a#1@@5|) |a#1@@5| |m'#3@@2|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |3390| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@600) (Lit |s#0@@145|)) ($IsGoodHeap $Heap@@53)) ))))
(assert (forall (($ly@@601 T@U) (|s#0@@146| T@U) ) (!  (=> (and (= (type $ly@@601) LayerTypeType) (= (type |s#0@@146|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@601) |s#0@@146|) (Lexicographic__Byte__Order.__default.maximumOpt $ly@@601 |s#0@@146|))) :qid |totalord.817:22| :skolemid |3391| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@601) |s#0@@146|)) )))
(assert (forall (($ly@@602 T@U) (|s#0@@147| T@U) ) (!  (=> (and (= (type $ly@@602) LayerTypeType) (= (type |s#0@@147|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt $ly@@602 |s#0@@147|) (Lexicographic__Byte__Order.__default.maximumOpt $LZ |s#0@@147|))) :qid |totalord.817:22| :skolemid |3392| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@602) |s#0@@147|)) )))
(assert  (=> true (forall (($ly@@603 T@U) (|s#0@@148| T@U) ) (!  (=> (and (and (= (type $ly@@603) LayerTypeType) (= (type |s#0@@148|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@148|) ($Is |s#0@@148| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@603 |s#0@@148|)) (U_2_bool (MapType0Select |s#0@@148| (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@603 |s#0@@148|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@603 |s#0@@148|)) (forall ((|y#0@@18| T@U) ) (!  (=> (= (type |y#0@@18|) (SeqType BoxType)) (=> (and ($Is |y#0@@18| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@148| ($Box |y#0@@18|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@18| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@603 |s#0@@148|)))))) :qid |totalord.819:30| :skolemid |3393| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@18| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@603 |s#0@@148|))))) :pattern ( (MapType0Select |s#0@@148| ($Box |y#0@@18|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@603 |s#0@@148|)) (|Set#Equal| |s#0@@148| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.maximumOpt $ly@@603 |s#0@@148|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalord.817:22| :skolemid |3394| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt $ly@@603 |s#0@@148|)) ))))
(assert (forall (($ly@@604 T@U) (|s#0@@149| T@U) ) (!  (=> (and (and (= (type $ly@@604) LayerTypeType) (= (type |s#0@@149|) (MapType0Type BoxType boolType))) ($Is |s#0@@149| (TSet (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@604 |s#0@@149|) true) (=> true (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@604 |s#0@@149|)))) :qid |totalord.817:22| :skolemid |3395| :pattern ( (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@604 |s#0@@149|)) )))
(assert  (=> true (forall (($ly@@605 T@U) (|s#0@@150| T@U) ) (!  (=> (and (and (= (type $ly@@605) LayerTypeType) (= (type |s#0@@150|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@150|) ($Is |s#0@@150| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@150| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@150|)) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@605) |s#0@@150|) (ite (|Set#Equal| |s#0@@150| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum |s#0@@150|))))))) :qid |totalord.817:22| :skolemid |3396| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@605) |s#0@@150|)) ))))
(assert  (=> true (forall (($ly@@606 T@U) (|s#0@@151| T@U) ) (!  (=> (and (and (= (type $ly@@606) LayerTypeType) (= (type |s#0@@151|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@151|)) ($Is |s#0@@151| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@151| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@151|))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@606) (Lit |s#0@@151|)) (ite (|Set#Equal| |s#0@@151| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit |s#0@@151|)))))))) :qid |totalord.817:22| :weight 3 :skolemid |3397| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@606) (Lit |s#0@@151|))) ))))
(assert  (=> true (forall ((|a#0@@149| T@U) (|b#0@@124| T@U) ) (!  (=> (and (and (= (type |a#0@@149|) (SeqType BoxType)) (= (type |b#0@@124|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@149| |b#0@@124|) (and ($Is |a#0@@149| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@124| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.12:15| :skolemid |3398| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@149| |b#0@@124|)) ))))
(assert (forall ((|a#0@@150| T@U) (|b#0@@125| T@U) ) (!  (=> (and (and (= (type |a#0@@150|) (SeqType BoxType)) (= (type |b#0@@125|) (SeqType BoxType))) (and ($Is |a#0@@150| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@125| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@150| |b#0@@125|) true) (=> true (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@150| |b#0@@125|)))) :qid |totalord.12:15| :skolemid |3399| :pattern ( (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@150| |b#0@@125|)) )))
(assert  (=> true (forall ((|a#0@@151| T@U) (|b#0@@126| T@U) ) (!  (=> (and (and (= (type |a#0@@151|) (SeqType BoxType)) (= (type |b#0@@126|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@151| |b#0@@126|) (and ($Is |a#0@@151| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@126| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@151| |b#0@@126|) (and (=> (Lexicographic__Byte__Order.__default.lt |a#0@@151| |b#0@@126|) (and (Lexicographic__Byte__Order.__default.lte |a#0@@151| |b#0@@126|) (not (|Seq#Equal| |a#0@@151| |b#0@@126|)))) (=> (and (Lexicographic__Byte__Order.__default.lte |a#0@@151| |b#0@@126|) (not (|Seq#Equal| |a#0@@151| |b#0@@126|))) (Lexicographic__Byte__Order.__default.lt |a#0@@151| |b#0@@126|))))) :qid |totalord.12:15| :skolemid |3400| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@151| |b#0@@126|)) ))))
(assert  (=> true (forall ((|a#0@@152| T@U) (|b#0@@127| T@U) ) (!  (=> (and (and (= (type |a#0@@152|) (SeqType BoxType)) (= (type |b#0@@127|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |a#0@@152|) (Lit |b#0@@127|)) (and ($Is |a#0@@152| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@127| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@152|) (Lit |b#0@@127|)) (and (=> (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@152|) (Lit |b#0@@127|)) (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@152|) (Lit |b#0@@127|)) (not (|Seq#Equal| |a#0@@152| |b#0@@127|)))) (=> (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@152|) (Lit |b#0@@127|)) (not (|Seq#Equal| |a#0@@152| |b#0@@127|))) (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@152|) (Lit |b#0@@127|)))))) :qid |totalord.12:15| :weight 3 :skolemid |3401| :pattern ( (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@152|) (Lit |b#0@@127|))) ))))
(assert (forall ((arg0@@478 T@U) (arg1@@286 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Min arg0@@478 arg1@@286)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Min| :pattern ( (Lexicographic__Byte__Order.__default.Min arg0@@478 arg1@@286)) )))
(assert  (=> true (forall ((|a#0@@153| T@U) (|b#0@@128| T@U) ) (!  (=> (and (and (= (type |a#0@@153|) (SeqType BoxType)) (= (type |b#0@@128|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@153| |b#0@@128|) (and ($Is |a#0@@153| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@128| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Min |a#0@@153| |b#0@@128|) (TSeq Tclass.NativeTypes.byte))) :qid |totalord.24:16| :skolemid |3402| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@153| |b#0@@128|)) ))))
(assert (forall ((|a#0@@154| T@U) (|b#0@@129| T@U) ) (!  (=> (and (and (= (type |a#0@@154|) (SeqType BoxType)) (= (type |b#0@@129|) (SeqType BoxType))) (and ($Is |a#0@@154| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@129| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@154| |b#0@@129|) true) (=> true (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@154| |b#0@@129|)))) :qid |totalord.24:16| :skolemid |3403| :pattern ( (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@154| |b#0@@129|)) )))
(assert  (=> true (forall ((|a#0@@155| T@U) (|b#0@@130| T@U) ) (!  (=> (and (and (= (type |a#0@@155|) (SeqType BoxType)) (= (type |b#0@@130|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@155| |b#0@@130|) (and ($Is |a#0@@155| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@130| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@155| |b#0@@130|) (= (Lexicographic__Byte__Order.__default.Min |a#0@@155| |b#0@@130|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@155| |b#0@@130|) |a#0@@155| |b#0@@130|)))) :qid |totalord.24:16| :skolemid |3404| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@155| |b#0@@130|)) ))))
(assert  (=> true (forall ((|a#0@@156| T@U) (|b#0@@131| T@U) ) (!  (=> (and (and (= (type |a#0@@156|) (SeqType BoxType)) (= (type |b#0@@131|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| (Lit |a#0@@156|) (Lit |b#0@@131|)) (and ($Is |a#0@@156| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@131| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@156|) (Lit |b#0@@131|)) (= (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@156|) (Lit |b#0@@131|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@156|) (Lit |b#0@@131|)) |a#0@@156| |b#0@@131|)))) :qid |totalord.24:16| :weight 3 :skolemid |3405| :pattern ( (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@156|) (Lit |b#0@@131|))) ))))
(assert (forall ((arg0@@479 T@U) (arg1@@287 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Max arg0@@479 arg1@@287)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Max| :pattern ( (Lexicographic__Byte__Order.__default.Max arg0@@479 arg1@@287)) )))
(assert  (=> true (forall ((|a#0@@157| T@U) (|b#0@@132| T@U) ) (!  (=> (and (and (= (type |a#0@@157|) (SeqType BoxType)) (= (type |b#0@@132|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@157| |b#0@@132|) (and ($Is |a#0@@157| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@132| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Max |a#0@@157| |b#0@@132|) (TSeq Tclass.NativeTypes.byte))) :qid |totalord.29:16| :skolemid |3406| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@157| |b#0@@132|)) ))))
(assert (forall ((|a#0@@158| T@U) (|b#0@@133| T@U) ) (!  (=> (and (and (= (type |a#0@@158|) (SeqType BoxType)) (= (type |b#0@@133|) (SeqType BoxType))) (and ($Is |a#0@@158| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@133| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@158| |b#0@@133|) true) (=> true (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@158| |b#0@@133|)))) :qid |totalord.29:16| :skolemid |3407| :pattern ( (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@158| |b#0@@133|)) )))
(assert  (=> true (forall ((|a#0@@159| T@U) (|b#0@@134| T@U) ) (!  (=> (and (and (= (type |a#0@@159|) (SeqType BoxType)) (= (type |b#0@@134|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@159| |b#0@@134|) (and ($Is |a#0@@159| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@134| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@159| |b#0@@134|) (= (Lexicographic__Byte__Order.__default.Max |a#0@@159| |b#0@@134|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@159| |b#0@@134|) |b#0@@134| |a#0@@159|)))) :qid |totalord.29:16| :skolemid |3408| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@159| |b#0@@134|)) ))))
(assert  (=> true (forall ((|a#0@@160| T@U) (|b#0@@135| T@U) ) (!  (=> (and (and (= (type |a#0@@160|) (SeqType BoxType)) (= (type |b#0@@135|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| (Lit |a#0@@160|) (Lit |b#0@@135|)) (and ($Is |a#0@@160| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@135| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@160|) (Lit |b#0@@135|)) (= (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@160|) (Lit |b#0@@135|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@160|) (Lit |b#0@@135|)) |b#0@@135| |a#0@@160|)))) :qid |totalord.29:16| :weight 3 :skolemid |3409| :pattern ( (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@160|) (Lit |b#0@@135|))) ))))
(assert (forall (($ly@@607 T@U) (|run#0@@132| T@U) ) (!  (=> (and (= (type $ly@@607) LayerTypeType) (= (type |run#0@@132|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@607) |run#0@@132|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@607 |run#0@@132|)) (=> (Lexicographic__Byte__Order.__default.IsSorted $ly@@607 |run#0@@132|) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@607) |run#0@@132|)))) :qid |totalord.41:23| :skolemid |3410| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@607) |run#0@@132|)) )))
(assert (forall (($ly@@608 T@U) (|run#0@@133| T@U) ) (!  (=> (and (= (type $ly@@608) LayerTypeType) (= (type |run#0@@133|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsSorted $ly@@608 |run#0@@133|) (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@133|)) (=> (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@133|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@608 |run#0@@133|)))) :qid |totalord.41:23| :skolemid |3411| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted (AsFuelBottom $ly@@608) |run#0@@133|)) )))
(assert  (=> true (forall (($ly@@609 T@U) (|run#0@@134| T@U) ) (!  (=> (and (and (= (type $ly@@609) LayerTypeType) (= (type |run#0@@134|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@134|) ($Is |run#0@@134| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (= (|Seq#Length| |run#0@@134|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@609 |run#0@@134|)) (=> (= (|Seq#Length| |run#0@@134|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@609 |run#0@@134|)))) :qid |totalord.41:23| :skolemid |3412| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted $ly@@609 |run#0@@134|)) ))))
(assert (forall (($ly@@610 T@U) (|run#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@610) LayerTypeType) (= (type |run#0@@135|) (SeqType BoxType))) ($Is |run#0@@135| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@610 |run#0@@135|) true) (=> true (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@610 |run#0@@135|)))) :qid |totalord.41:23| :skolemid |3413| :pattern ( (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@610 |run#0@@135|)) )))
(assert  (=> true (forall (($ly@@611 T@U) (|run#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@611) LayerTypeType) (= (type |run#0@@136|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@136|) ($Is |run#0@@136| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@130| Int) (|j#0@@18| Int) ) (!  (=> (< |j#0@@18| (|Seq#Length| |run#0@@136|)) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@130|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@18|)))) :qid |totalord.45:12| :skolemid |3414| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@18|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@130|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@611) |run#0@@136|) (forall ((|i#0@@131| Int) (|j#0@@19| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@131|) (<= |i#0@@131| |j#0@@19|)) (< |j#0@@19| (|Seq#Length| |run#0@@136|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@131|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@19|))))) :qid |totalord.45:12| :skolemid |3415| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@19|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@131|))) ))) (=> (forall ((|i#0@@132| Int) (|j#0@@20| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@132|) (<= |i#0@@132| |j#0@@20|)) (< |j#0@@20| (|Seq#Length| |run#0@@136|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@132|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@20|))))) :qid |totalord.45:12| :skolemid |3415| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@20|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@132|))) )) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@611) |run#0@@136|))))) :qid |totalord.41:23| :skolemid |3416| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@611) |run#0@@136|)) ))))
(assert  (=> true (forall (($ly@@612 T@U) (|run#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@612) LayerTypeType) (= (type |run#0@@137|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@137|)) ($Is |run#0@@137| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@51| Int) (|j#1@@8| Int) ) (!  (=> (< |j#1@@8| (|Seq#Length| (Lit |run#0@@137|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#1@@51|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#1@@8|)))) :qid |totalord.45:12| :skolemid |3417| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#1@@8|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#1@@51|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@612) (Lit |run#0@@137|)) (forall ((|i#1@@52| Int) (|j#1@@9| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@52|) (<= |i#1@@52| |j#1@@9|)) (< |j#1@@9| (|Seq#Length| (Lit |run#0@@137|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#1@@52|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#1@@9|))))) :qid |totalord.45:12| :skolemid |3418| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#1@@9|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#1@@52|))) ))) (=> (forall ((|i#1@@53| Int) (|j#1@@10| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@53|) (<= |i#1@@53| |j#1@@10|)) (< |j#1@@10| (|Seq#Length| (Lit |run#0@@137|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#1@@53|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#1@@10|))))) :qid |totalord.45:12| :skolemid |3418| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#1@@10|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#1@@53|))) )) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@612) (Lit |run#0@@137|)))))) :qid |totalord.41:23| :weight 3 :skolemid |3419| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@612) (Lit |run#0@@137|))) ))))
(assert  (=> true (forall ((|run#0@@138| T@U) ) (!  (=> (and (= (type |run#0@@138|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@138|) ($Is |run#0@@138| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.48:38| :skolemid |3420| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@138|)) ))))
(assert (forall ((|run#0@@139| T@U) ) (!  (=> (and (= (type |run#0@@139|) (SeqType BoxType)) ($Is |run#0@@139| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|) true) (=> true (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|)))) :qid |totalord.48:38| :skolemid |3421| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|)) )))
(assert  (=> true (forall ((|run#0@@140| T@U) ) (!  (=> (and (= (type |run#0@@140|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@140|) ($Is |run#0@@140| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@133| Int) (|j#0@@21| Int) ) (!  (=> (< |j#0@@21| (|Seq#Length| |run#0@@140|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@133|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@21|)))) :qid |totalord.50:12| :skolemid |3422| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@21|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@133|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|) (forall ((|i#0@@134| Int) (|j#0@@22| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@134|) (< |i#0@@134| |j#0@@22|)) (< |j#0@@22| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@134|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@22|))))) :qid |totalord.50:12| :skolemid |3423| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@22|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@134|))) ))) (=> (forall ((|i#0@@135| Int) (|j#0@@23| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@135|) (< |i#0@@135| |j#0@@23|)) (< |j#0@@23| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@135|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@23|))))) :qid |totalord.50:12| :skolemid |3423| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@23|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@135|))) )) (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|))))) :qid |totalord.48:38| :skolemid |3424| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|)) ))))
(assert  (=> true (forall ((|run#0@@141| T@U) ) (!  (=> (and (= (type |run#0@@141|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@141|)) ($Is |run#0@@141| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@54| Int) (|j#1@@11| Int) ) (!  (=> (< |j#1@@11| (|Seq#Length| (Lit |run#0@@141|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#1@@54|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#1@@11|)))) :qid |totalord.50:12| :skolemid |3425| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#1@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#1@@54|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|)) (forall ((|i#1@@55| Int) (|j#1@@12| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@55|) (< |i#1@@55| |j#1@@12|)) (< |j#1@@12| (|Seq#Length| (Lit |run#0@@141|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#1@@55|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#1@@12|))))) :qid |totalord.50:12| :skolemid |3426| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#1@@12|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#1@@55|))) ))) (=> (forall ((|i#1@@56| Int) (|j#1@@13| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@56|) (< |i#1@@56| |j#1@@13|)) (< |j#1@@13| (|Seq#Length| (Lit |run#0@@141|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#1@@56|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#1@@13|))))) :qid |totalord.50:12| :skolemid |3426| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#1@@13|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#1@@56|))) )) (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|)))))) :qid |totalord.48:38| :weight 3 :skolemid |3427| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|))) ))))
(assert (forall (($ly@@613 T@U) (|run#0@@142| T@U) ) (!  (=> (and (= (type $ly@@613) LayerTypeType) (= (type |run#0@@142|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@613) |run#0@@142|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@613 |run#0@@142|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@613 |run#0@@142|) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@613) |run#0@@142|)))) :qid |totalord.64:23| :skolemid |3428| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@613) |run#0@@142|)) )))
(assert (forall (($ly@@614 T@U) (|run#0@@143| T@U) ) (!  (=> (and (= (type $ly@@614) LayerTypeType) (= (type |run#0@@143|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@614 |run#0@@143|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@143|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@143|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@614 |run#0@@143|)))) :qid |totalord.64:23| :skolemid |3429| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@614) |run#0@@143|)) )))
(assert  (=> true (forall (($ly@@615 T@U) (|run#0@@144| T@U) ) (!  (=> (and (and (= (type $ly@@615) LayerTypeType) (= (type |run#0@@144|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@144|) ($Is |run#0@@144| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (= (|Seq#Length| |run#0@@144|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@615 |run#0@@144|)) (=> (= (|Seq#Length| |run#0@@144|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@615 |run#0@@144|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@615 |run#0@@144|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@144|)))) :qid |totalord.64:23| :skolemid |3430| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@615 |run#0@@144|)) ))))
(assert (forall (($ly@@616 T@U) (|run#0@@145| T@U) ) (!  (=> (and (and (= (type $ly@@616) LayerTypeType) (= (type |run#0@@145|) (SeqType BoxType))) ($Is |run#0@@145| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@616 |run#0@@145|) true) (=> true (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@616 |run#0@@145|)))) :qid |totalord.64:23| :skolemid |3431| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@616 |run#0@@145|)) )))
(assert  (=> true (forall (($ly@@617 T@U) (|run#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@617) LayerTypeType) (= (type |run#0@@146|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@146|) ($Is |run#0@@146| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@146|) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@617) |run#0@@146|) (let ((|b#0@@136| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@146|))) (ite |b#0@@136| |b#0@@136| |b#0@@136|))) (=> (let ((|b#0@@137| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@146|))) (ite |b#0@@137| |b#0@@137| |b#0@@137|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@617) |run#0@@146|))))) :qid |totalord.64:23| :skolemid |3432| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@617) |run#0@@146|)) ))))
(assert  (=> true (forall (($ly@@618 T@U) (|run#0@@147| T@U) ) (!  (=> (and (and (= (type $ly@@618) LayerTypeType) (= (type |run#0@@147|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@147|)) ($Is |run#0@@147| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@147|)) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@618) (Lit |run#0@@147|)) (let ((|b#1@@11| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@147|))))))) (ite |b#1@@11| |b#1@@11| |b#1@@11|))) (=> (let ((|b#1@@12| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@147|))))))) (ite |b#1@@12| |b#1@@12| |b#1@@12|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@618) (Lit |run#0@@147|)))))) :qid |totalord.64:23| :weight 3 :skolemid |3433| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@618) (Lit |run#0@@147|))) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order__Impl.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order__Impl.__default) Tagclass.Lexicographic__Byte__Order__Impl.__default))
(assert (forall ((bx@@141 T@U) ) (!  (=> (and (= (type bx@@141) BoxType) ($IsBox bx@@141 Tclass.Lexicographic__Byte__Order__Impl.__default)) (and (= ($Box ($Unbox refType bx@@141)) bx@@141) ($Is ($Unbox refType bx@@141) Tclass.Lexicographic__Byte__Order__Impl.__default))) :qid |unknown.0:0| :skolemid |3434| :pattern ( ($IsBox bx@@141 Tclass.Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (and (=> ($Is $o@@34 Tclass.Lexicographic__Byte__Order__Impl.__default) (or (= $o@@34 null) (= (dtype $o@@34) Tclass.Lexicographic__Byte__Order__Impl.__default))) (=> (or (= $o@@34 null) (= (dtype $o@@34) Tclass.Lexicographic__Byte__Order__Impl.__default)) ($Is $o@@34 Tclass.Lexicographic__Byte__Order__Impl.__default)))) :qid |unknown.0:0| :skolemid |3435| :pattern ( ($Is $o@@34 Tclass.Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@35 T@U) ($h@@58 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@58) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@35 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@58) (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@58 $o@@35) alloc)))) (=> (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@58 $o@@35) alloc))) ($IsAlloc $o@@35 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@58)))) :qid |unknown.0:0| :skolemid |3436| :pattern ( ($IsAlloc $o@@35 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@58)) )))
(assert (= (type Tclass.PivotsLib.__default) TyType))
(assert (= (Tag Tclass.PivotsLib.__default) Tagclass.PivotsLib.__default))
(assert (forall ((bx@@142 T@U) ) (!  (=> (and (= (type bx@@142) BoxType) ($IsBox bx@@142 Tclass.PivotsLib.__default)) (and (= ($Box ($Unbox refType bx@@142)) bx@@142) ($Is ($Unbox refType bx@@142) Tclass.PivotsLib.__default))) :qid |unknown.0:0| :skolemid |3437| :pattern ( ($IsBox bx@@142 Tclass.PivotsLib.__default)) )))
(assert (forall (($o@@36 T@U) ) (!  (=> (= (type $o@@36) refType) (and (=> ($Is $o@@36 Tclass.PivotsLib.__default) (or (= $o@@36 null) (= (dtype $o@@36) Tclass.PivotsLib.__default))) (=> (or (= $o@@36 null) (= (dtype $o@@36) Tclass.PivotsLib.__default)) ($Is $o@@36 Tclass.PivotsLib.__default)))) :qid |unknown.0:0| :skolemid |3438| :pattern ( ($Is $o@@36 Tclass.PivotsLib.__default)) )))
(assert (forall (($o@@37 T@U) ($h@@59 T@U) ) (!  (=> (and (= (type $o@@37) refType) (= (type $h@@59) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@37 Tclass.PivotsLib.__default $h@@59) (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@59 $o@@37) alloc)))) (=> (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@59 $o@@37) alloc))) ($IsAlloc $o@@37 Tclass.PivotsLib.__default $h@@59)))) :qid |unknown.0:0| :skolemid |3439| :pattern ( ($IsAlloc $o@@37 Tclass.PivotsLib.__default $h@@59)) )))
(assert  (=> true (forall ((|pt#0| T@U) ) (!  (=> (and (= (type |pt#0|) (SeqType BoxType)) (or (|PivotsLib.__default.WFPivots#canCall| |pt#0|) ($Is |pt#0| (TSeq Tclass.KeyType.Key)))) true) :qid |PivotsLi.27:22| :skolemid |3440| :pattern ( (PivotsLib.__default.WFPivots |pt#0|)) ))))
(assert (forall ((|pt#0@@0| T@U) ) (!  (=> (and (= (type |pt#0@@0|) (SeqType BoxType)) ($Is |pt#0@@0| (TSeq Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.WFPivots#requires| |pt#0@@0|) true) (=> true (|PivotsLib.__default.WFPivots#requires| |pt#0@@0|)))) :qid |PivotsLi.27:22| :skolemid |3441| :pattern ( (|PivotsLib.__default.WFPivots#requires| |pt#0@@0|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType))
(assert  (=> true (forall ((|pt#0@@1| T@U) ) (!  (=> (and (= (type |pt#0@@1|) (SeqType BoxType)) (or (|PivotsLib.__default.WFPivots#canCall| |pt#0@@1|) ($Is |pt#0@@1| (TSeq Tclass.KeyType.Key)))) (and (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |pt#0@@1|) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |pt#0@@1|) (=> (> (|Seq#Length| |pt#0@@1|) 0) (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@1| (LitInt 0))))))) (and (=> (PivotsLib.__default.WFPivots |pt#0@@1|) (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |pt#0@@1|) (=> (> (|Seq#Length| |pt#0@@1|) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@1| (LitInt 0))))))) (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |pt#0@@1|) (=> (> (|Seq#Length| |pt#0@@1|) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@1| (LitInt 0)))))) (PivotsLib.__default.WFPivots |pt#0@@1|))))) :qid |PivotsLi.27:22| :skolemid |3442| :pattern ( (PivotsLib.__default.WFPivots |pt#0@@1|)) ))))
(assert  (=> true (forall ((|pt#0@@2| T@U) ) (!  (=> (and (= (type |pt#0@@2|) (SeqType BoxType)) (or (|PivotsLib.__default.WFPivots#canCall| (Lit |pt#0@@2|)) ($Is |pt#0@@2| (TSeq Tclass.KeyType.Key)))) (and (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |pt#0@@2|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit |pt#0@@2|)) (=> (> (|Seq#Length| (Lit |pt#0@@2|)) 0) (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@2|) (LitInt 0))))))) (and (=> (PivotsLib.__default.WFPivots (Lit |pt#0@@2|)) (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit |pt#0@@2|)) (=> (> (|Seq#Length| (Lit |pt#0@@2|)) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@2|) (LitInt 0))))))) (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit |pt#0@@2|)) (=> (> (|Seq#Length| (Lit |pt#0@@2|)) 0) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@2|) (LitInt 0)))))) (PivotsLib.__default.WFPivots (Lit |pt#0@@2|)))))) :qid |PivotsLi.27:22| :weight 3 :skolemid |3443| :pattern ( (PivotsLib.__default.WFPivots (Lit |pt#0@@2|))) ))))
(assert  (=> true (forall ((|pt#0@@3| T@U) ) (!  (=> (and (= (type |pt#0@@3|) (SeqType BoxType)) (or (|PivotsLib.__default.NumBuckets#canCall| |pt#0@@3|) ($Is |pt#0@@3| (TSeq Tclass.KeyType.Key)))) true) :qid |PivotsLi.33:23| :skolemid |3444| :pattern ( (PivotsLib.__default.NumBuckets |pt#0@@3|)) ))))
(assert (forall ((|pt#0@@4| T@U) ) (!  (=> (and (= (type |pt#0@@4|) (SeqType BoxType)) ($Is |pt#0@@4| (TSeq Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.NumBuckets#requires| |pt#0@@4|) true) (=> true (|PivotsLib.__default.NumBuckets#requires| |pt#0@@4|)))) :qid |PivotsLi.33:23| :skolemid |3445| :pattern ( (|PivotsLib.__default.NumBuckets#requires| |pt#0@@4|)) )))
(assert  (=> true (forall ((|pt#0@@5| T@U) ) (!  (=> (and (= (type |pt#0@@5|) (SeqType BoxType)) (or (|PivotsLib.__default.NumBuckets#canCall| |pt#0@@5|) ($Is |pt#0@@5| (TSeq Tclass.KeyType.Key)))) (= (PivotsLib.__default.NumBuckets |pt#0@@5|) (+ (|Seq#Length| |pt#0@@5|) 1))) :qid |PivotsLi.33:23| :skolemid |3446| :pattern ( (PivotsLib.__default.NumBuckets |pt#0@@5|)) ))))
(assert  (=> true (forall ((|pt#0@@6| T@U) ) (!  (=> (and (= (type |pt#0@@6|) (SeqType BoxType)) (or (|PivotsLib.__default.NumBuckets#canCall| (Lit |pt#0@@6|)) ($Is |pt#0@@6| (TSeq Tclass.KeyType.Key)))) (= (PivotsLib.__default.NumBuckets (Lit |pt#0@@6|)) (+ (|Seq#Length| (Lit |pt#0@@6|)) 1))) :qid |PivotsLi.33:23| :weight 3 :skolemid |3447| :pattern ( (PivotsLib.__default.NumBuckets (Lit |pt#0@@6|))) ))))
(assert  (=> true (forall ((|pt#0@@7| T@U) (|key#0@@181| T@U) ) (!  (=> (and (and (= (type |pt#0@@7|) (SeqType BoxType)) (= (type |key#0@@181|) (SeqType BoxType))) (or (|PivotsLib.__default.Route#canCall| |pt#0@@7| |key#0@@181|) (and (and ($Is |pt#0@@7| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@181| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pt#0@@7|)))) (and (<= (LitInt 0) (PivotsLib.__default.Route |pt#0@@7| |key#0@@181|)) (< (PivotsLib.__default.Route |pt#0@@7| |key#0@@181|) (PivotsLib.__default.NumBuckets |pt#0@@7|)))) :qid |PivotsLi.38:18| :skolemid |3448| :pattern ( (PivotsLib.__default.Route |pt#0@@7| |key#0@@181|)) ))))
(assert (forall ((|pt#0@@8| T@U) (|key#0@@182| T@U) ) (!  (=> (and (and (= (type |pt#0@@8|) (SeqType BoxType)) (= (type |key#0@@182|) (SeqType BoxType))) (and ($Is |pt#0@@8| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@182| Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.Route#requires| |pt#0@@8| |key#0@@182|) (PivotsLib.__default.WFPivots |pt#0@@8|)) (=> (PivotsLib.__default.WFPivots |pt#0@@8|) (|PivotsLib.__default.Route#requires| |pt#0@@8| |key#0@@182|)))) :qid |PivotsLi.38:18| :skolemid |3449| :pattern ( (|PivotsLib.__default.Route#requires| |pt#0@@8| |key#0@@182|)) )))
(assert  (=> true (forall ((|pt#0@@9| T@U) (|key#0@@183| T@U) ) (!  (=> (and (and (= (type |pt#0@@9|) (SeqType BoxType)) (= (type |key#0@@183|) (SeqType BoxType))) (or (|PivotsLib.__default.Route#canCall| |pt#0@@9| |key#0@@183|) (and (and ($Is |pt#0@@9| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@183| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pt#0@@9|)))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |pt#0@@9| |key#0@@183|) (= (PivotsLib.__default.Route |pt#0@@9| |key#0@@183|) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) |pt#0@@9| |key#0@@183|) 1)))) :qid |PivotsLi.38:18| :skolemid |3450| :pattern ( (PivotsLib.__default.Route |pt#0@@9| |key#0@@183|)) ))))
(assert  (=> true (forall ((|pt#0@@10| T@U) (|key#0@@184| T@U) ) (!  (=> (and (and (= (type |pt#0@@10|) (SeqType BoxType)) (= (type |key#0@@184|) (SeqType BoxType))) (or (|PivotsLib.__default.Route#canCall| (Lit |pt#0@@10|) (Lit |key#0@@184|)) (and (and ($Is |pt#0@@10| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@184| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pt#0@@10|)))))))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |pt#0@@10|) (Lit |key#0@@184|)) (= (PivotsLib.__default.Route (Lit |pt#0@@10|) (Lit |key#0@@184|)) (LitInt (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit |pt#0@@10|) (Lit |key#0@@184|)) 1))))) :qid |PivotsLi.38:18| :weight 3 :skolemid |3451| :pattern ( (PivotsLib.__default.Route (Lit |pt#0@@10|) (Lit |key#0@@184|))) ))))
(assert  (=> true (forall ((|pt#0@@11| T@U) (|idx#0| Int) (|key#0@@185| T@U) ) (!  (=> (and (and (= (type |pt#0@@11|) (SeqType BoxType)) (= (type |key#0@@185|) (SeqType BoxType))) (or (|PivotsLib.__default.PivotInsertable#canCall| |pt#0@@11| |idx#0| |key#0@@185|) (and (and ($Is |pt#0@@11| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@185| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pt#0@@11|)))) true) :qid |PivotsLi.109:29| :skolemid |3452| :pattern ( (PivotsLib.__default.PivotInsertable |pt#0@@11| |idx#0| |key#0@@185|)) ))))
(assert (forall ((|pt#0@@12| T@U) (|idx#0@@0| Int) (|key#0@@186| T@U) ) (!  (=> (and (and (= (type |pt#0@@12|) (SeqType BoxType)) (= (type |key#0@@186|) (SeqType BoxType))) (and ($Is |pt#0@@12| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@186| Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.PivotInsertable#requires| |pt#0@@12| |idx#0@@0| |key#0@@186|) (PivotsLib.__default.WFPivots |pt#0@@12|)) (=> (PivotsLib.__default.WFPivots |pt#0@@12|) (|PivotsLib.__default.PivotInsertable#requires| |pt#0@@12| |idx#0@@0| |key#0@@186|)))) :qid |PivotsLi.109:29| :skolemid |3453| :pattern ( (|PivotsLib.__default.PivotInsertable#requires| |pt#0@@12| |idx#0@@0| |key#0@@186|)) )))
(assert  (=> true (forall ((|pt#0@@13| T@U) (|idx#0@@1| Int) (|key#0@@187| T@U) ) (!  (=> (and (and (= (type |pt#0@@13|) (SeqType BoxType)) (= (type |key#0@@187|) (SeqType BoxType))) (or (|PivotsLib.__default.PivotInsertable#canCall| |pt#0@@13| |idx#0@@1| |key#0@@187|) (and (and ($Is |pt#0@@13| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@187| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pt#0@@13|)))) (and (and (=> (<= |idx#0@@1| (|Seq#Length| |pt#0@@13|)) (|PivotsLib.__default.Route#canCall| |pt#0@@13| |key#0@@187|)) (=> (=> (> |idx#0@@1| 0) (not (|Seq#Equal| |key#0@@187| ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@13| (- |idx#0@@1| 1)))))) (=> (= |idx#0@@1| (LitInt 0)) (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |key#0@@187|)))) (and (=> (PivotsLib.__default.PivotInsertable |pt#0@@13| |idx#0@@1| |key#0@@187|) (and (and (and (and (<= (LitInt 0) |idx#0@@1|) (<= |idx#0@@1| (|Seq#Length| |pt#0@@13|))) (= (PivotsLib.__default.Route |pt#0@@13| |key#0@@187|) |idx#0@@1|)) (=> (> |idx#0@@1| 0) (not (|Seq#Equal| |key#0@@187| ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@13| (- |idx#0@@1| 1))))))) (=> (= |idx#0@@1| (LitInt 0)) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum |key#0@@187|)))) (=> (and (and (and (and (<= (LitInt 0) |idx#0@@1|) (<= |idx#0@@1| (|Seq#Length| |pt#0@@13|))) (= (PivotsLib.__default.Route |pt#0@@13| |key#0@@187|) |idx#0@@1|)) (=> (> |idx#0@@1| 0) (not (|Seq#Equal| |key#0@@187| ($Unbox (SeqType BoxType) (|Seq#Index| |pt#0@@13| (- |idx#0@@1| 1))))))) (=> (= |idx#0@@1| (LitInt 0)) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum |key#0@@187|))) (PivotsLib.__default.PivotInsertable |pt#0@@13| |idx#0@@1| |key#0@@187|))))) :qid |PivotsLi.109:29| :skolemid |3454| :pattern ( (PivotsLib.__default.PivotInsertable |pt#0@@13| |idx#0@@1| |key#0@@187|)) ))))
(assert  (=> true (forall ((|pt#0@@14| T@U) (|idx#0@@2| Int) (|key#0@@188| T@U) ) (!  (=> (and (and (= (type |pt#0@@14|) (SeqType BoxType)) (= (type |key#0@@188|) (SeqType BoxType))) (or (|PivotsLib.__default.PivotInsertable#canCall| (Lit |pt#0@@14|) (LitInt |idx#0@@2|) (Lit |key#0@@188|)) (and (and ($Is |pt#0@@14| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@188| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pt#0@@14|)))))))) (and (and (=> (<= (LitInt |idx#0@@2|) (|Seq#Length| (Lit |pt#0@@14|))) (|PivotsLib.__default.Route#canCall| (Lit |pt#0@@14|) (Lit |key#0@@188|))) (=> (=> (> |idx#0@@2| 0) (not (|Seq#Equal| |key#0@@188| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@14|) (LitInt (- |idx#0@@2| 1))))))) (=> (= (LitInt |idx#0@@2|) (LitInt 0)) (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| (Lit |key#0@@188|))))) (and (=> (PivotsLib.__default.PivotInsertable (Lit |pt#0@@14|) (LitInt |idx#0@@2|) (Lit |key#0@@188|)) (and (and (and (and (<= (LitInt 0) (LitInt |idx#0@@2|)) (<= (LitInt |idx#0@@2|) (|Seq#Length| (Lit |pt#0@@14|)))) (= (LitInt (PivotsLib.__default.Route (Lit |pt#0@@14|) (Lit |key#0@@188|))) (LitInt |idx#0@@2|))) (=> (> |idx#0@@2| 0) (not (|Seq#Equal| |key#0@@188| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@14|) (LitInt (- |idx#0@@2| 1)))))))) (=> (= (LitInt |idx#0@@2|) (LitInt 0)) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum (Lit |key#0@@188|))))) (=> (and (and (and (and (<= (LitInt 0) (LitInt |idx#0@@2|)) (<= (LitInt |idx#0@@2|) (|Seq#Length| (Lit |pt#0@@14|)))) (= (LitInt (PivotsLib.__default.Route (Lit |pt#0@@14|) (Lit |key#0@@188|))) (LitInt |idx#0@@2|))) (=> (> |idx#0@@2| 0) (not (|Seq#Equal| |key#0@@188| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |pt#0@@14|) (LitInt (- |idx#0@@2| 1)))))))) (=> (= (LitInt |idx#0@@2|) (LitInt 0)) (Lexicographic__Byte__Order.__default.NotMinimum StartFuel_Lexicographic_Byte_Order._default.NotMinimum (Lit |key#0@@188|)))) (PivotsLib.__default.PivotInsertable (Lit |pt#0@@14|) (LitInt |idx#0@@2|) (Lit |key#0@@188|)))))) :qid |PivotsLi.109:29| :weight 3 :skolemid |3455| :pattern ( (PivotsLib.__default.PivotInsertable (Lit |pt#0@@14|) (LitInt |idx#0@@2|) (Lit |key#0@@188|))) ))))
(assert (forall (($ly@@619 T@U) (|pivots#0@@52| T@U) (|pivot#0@@25| T@U) ) (!  (=> (and (and (= (type $ly@@619) LayerTypeType) (= (type |pivots#0@@52|) (SeqType BoxType))) (= (type |pivot#0@@25|) (SeqType BoxType))) (= (PivotsLib.__default.CutoffForLeft ($LS $ly@@619) |pivots#0@@52| |pivot#0@@25|) (PivotsLib.__default.CutoffForLeft $ly@@619 |pivots#0@@52| |pivot#0@@25|))) :qid |PivotsLi.227:22| :skolemid |3456| :pattern ( (PivotsLib.__default.CutoffForLeft ($LS $ly@@619) |pivots#0@@52| |pivot#0@@25|)) )))
(assert (forall (($ly@@620 T@U) (|pivots#0@@53| T@U) (|pivot#0@@26| T@U) ) (!  (=> (and (and (= (type $ly@@620) LayerTypeType) (= (type |pivots#0@@53|) (SeqType BoxType))) (= (type |pivot#0@@26|) (SeqType BoxType))) (= (PivotsLib.__default.CutoffForLeft $ly@@620 |pivots#0@@53| |pivot#0@@26|) (PivotsLib.__default.CutoffForLeft $LZ |pivots#0@@53| |pivot#0@@26|))) :qid |PivotsLi.227:22| :skolemid |3457| :pattern ( (PivotsLib.__default.CutoffForLeft (AsFuelBottom $ly@@620) |pivots#0@@53| |pivot#0@@26|)) )))
(assert  (=> true (forall (($ly@@621 T@U) (|pivots#0@@54| T@U) (|pivot#0@@27| T@U) ) (!  (=> (and (and (and (= (type $ly@@621) LayerTypeType) (= (type |pivots#0@@54|) (SeqType BoxType))) (= (type |pivot#0@@27|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForLeft#canCall| |pivots#0@@54| |pivot#0@@27|) (and (and ($Is |pivots#0@@54| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@27| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@54|)))) (and (and (and (<= (LitInt 0) (PivotsLib.__default.CutoffForLeft $ly@@621 |pivots#0@@54| |pivot#0@@27|)) (<= (PivotsLib.__default.CutoffForLeft $ly@@621 |pivots#0@@54| |pivot#0@@27|) (|Seq#Length| |pivots#0@@54|))) (forall ((|i#0@@136| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@136|) (< |i#0@@136| (PivotsLib.__default.CutoffForLeft $ly@@621 |pivots#0@@54| |pivot#0@@27|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@54| |i#0@@136|)) |pivot#0@@27|)) :qid |PivotsLi.230:18| :skolemid |3458| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@54| |i#0@@136|))) ))) (forall ((|i#1@@57| Int) ) (!  (=> (and (<= (PivotsLib.__default.CutoffForLeft $ly@@621 |pivots#0@@54| |pivot#0@@27|) |i#1@@57|) (< |i#1@@57| (|Seq#Length| |pivots#0@@54|))) (Lexicographic__Byte__Order.__default.lte |pivot#0@@27| ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@54| |i#1@@57|)))) :qid |PivotsLi.231:18| :skolemid |3459| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@54| |i#1@@57|))) )))) :qid |PivotsLi.227:22| :skolemid |3460| :pattern ( (PivotsLib.__default.CutoffForLeft $ly@@621 |pivots#0@@54| |pivot#0@@27|)) ))))
(assert (forall (($ly@@622 T@U) (|pivots#0@@55| T@U) (|pivot#0@@28| T@U) ) (!  (=> (and (and (and (= (type $ly@@622) LayerTypeType) (= (type |pivots#0@@55|) (SeqType BoxType))) (= (type |pivot#0@@28|) (SeqType BoxType))) (and ($Is |pivots#0@@55| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@28| Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.CutoffForLeft#requires| $ly@@622 |pivots#0@@55| |pivot#0@@28|) (PivotsLib.__default.WFPivots |pivots#0@@55|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@55|) (|PivotsLib.__default.CutoffForLeft#requires| $ly@@622 |pivots#0@@55| |pivot#0@@28|)))) :qid |PivotsLi.227:22| :skolemid |3461| :pattern ( (|PivotsLib.__default.CutoffForLeft#requires| $ly@@622 |pivots#0@@55| |pivot#0@@28|)) )))
(assert  (=> true (forall (($ly@@623 T@U) (|pivots#0@@56| T@U) (|pivot#0@@29| T@U) ) (!  (=> (and (and (and (= (type $ly@@623) LayerTypeType) (= (type |pivots#0@@56|) (SeqType BoxType))) (= (type |pivot#0@@29|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForLeft#canCall| |pivots#0@@56| |pivot#0@@29|) (and (and ($Is |pivots#0@@56| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@29| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@56|)))) (and (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |pivots#0@@56| |pivot#0@@29|) (= (PivotsLib.__default.CutoffForLeft ($LS $ly@@623) |pivots#0@@56| |pivot#0@@29|) (+ (Lexicographic__Byte__Order.__default.LargestLt ($LS $LZ) |pivots#0@@56| |pivot#0@@29|) 1)))) :qid |PivotsLi.227:22| :skolemid |3462| :pattern ( (PivotsLib.__default.CutoffForLeft ($LS $ly@@623) |pivots#0@@56| |pivot#0@@29|)) ))))
(assert  (=> true (forall (($ly@@624 T@U) (|pivots#0@@57| T@U) (|pivot#0@@30| T@U) ) (!  (=> (and (and (and (= (type $ly@@624) LayerTypeType) (= (type |pivots#0@@57|) (SeqType BoxType))) (= (type |pivot#0@@30|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForLeft#canCall| (Lit |pivots#0@@57|) (Lit |pivot#0@@30|)) (and (and ($Is |pivots#0@@57| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@30| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@57|)))))))) (and (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |pivots#0@@57|) (Lit |pivot#0@@30|)) (= (PivotsLib.__default.CutoffForLeft ($LS $ly@@624) (Lit |pivots#0@@57|) (Lit |pivot#0@@30|)) (LitInt (+ (Lexicographic__Byte__Order.__default.LargestLt ($LS $LZ) (Lit |pivots#0@@57|) (Lit |pivot#0@@30|)) 1))))) :qid |PivotsLi.227:22| :weight 3 :skolemid |3463| :pattern ( (PivotsLib.__default.CutoffForLeft ($LS $ly@@624) (Lit |pivots#0@@57|) (Lit |pivot#0@@30|))) ))))
(assert (forall (($ly@@625 T@U) (|pivots#0@@58| T@U) (|pivot#0@@31| T@U) ) (!  (=> (and (and (= (type $ly@@625) LayerTypeType) (= (type |pivots#0@@58|) (SeqType BoxType))) (= (type |pivot#0@@31|) (SeqType BoxType))) (= (PivotsLib.__default.CutoffForRight ($LS $ly@@625) |pivots#0@@58| |pivot#0@@31|) (PivotsLib.__default.CutoffForRight $ly@@625 |pivots#0@@58| |pivot#0@@31|))) :qid |PivotsLi.246:22| :skolemid |3464| :pattern ( (PivotsLib.__default.CutoffForRight ($LS $ly@@625) |pivots#0@@58| |pivot#0@@31|)) )))
(assert (forall (($ly@@626 T@U) (|pivots#0@@59| T@U) (|pivot#0@@32| T@U) ) (!  (=> (and (and (= (type $ly@@626) LayerTypeType) (= (type |pivots#0@@59|) (SeqType BoxType))) (= (type |pivot#0@@32|) (SeqType BoxType))) (= (PivotsLib.__default.CutoffForRight $ly@@626 |pivots#0@@59| |pivot#0@@32|) (PivotsLib.__default.CutoffForRight $LZ |pivots#0@@59| |pivot#0@@32|))) :qid |PivotsLi.246:22| :skolemid |3465| :pattern ( (PivotsLib.__default.CutoffForRight (AsFuelBottom $ly@@626) |pivots#0@@59| |pivot#0@@32|)) )))
(assert  (=> true (forall (($ly@@627 T@U) (|pivots#0@@60| T@U) (|pivot#0@@33| T@U) ) (!  (=> (and (and (and (= (type $ly@@627) LayerTypeType) (= (type |pivots#0@@60|) (SeqType BoxType))) (= (type |pivot#0@@33|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForRight#canCall| |pivots#0@@60| |pivot#0@@33|) (and (and ($Is |pivots#0@@60| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@33| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@60|)))) (and (and (and (<= (LitInt 0) (PivotsLib.__default.CutoffForRight $ly@@627 |pivots#0@@60| |pivot#0@@33|)) (<= (PivotsLib.__default.CutoffForRight $ly@@627 |pivots#0@@60| |pivot#0@@33|) (|Seq#Length| |pivots#0@@60|))) (forall ((|i#0@@137| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@137|) (< |i#0@@137| (PivotsLib.__default.CutoffForRight $ly@@627 |pivots#0@@60| |pivot#0@@33|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@60| |i#0@@137|)) |pivot#0@@33|)) :qid |PivotsLi.249:18| :skolemid |3466| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@60| |i#0@@137|))) ))) (forall ((|i#1@@58| Int) ) (!  (=> (and (<= (PivotsLib.__default.CutoffForRight $ly@@627 |pivots#0@@60| |pivot#0@@33|) |i#1@@58|) (< |i#1@@58| (|Seq#Length| |pivots#0@@60|))) (Lexicographic__Byte__Order.__default.lt |pivot#0@@33| ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@60| |i#1@@58|)))) :qid |PivotsLi.250:18| :skolemid |3467| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |pivots#0@@60| |i#1@@58|))) )))) :qid |PivotsLi.246:22| :skolemid |3468| :pattern ( (PivotsLib.__default.CutoffForRight $ly@@627 |pivots#0@@60| |pivot#0@@33|)) ))))
(assert (forall (($ly@@628 T@U) (|pivots#0@@61| T@U) (|pivot#0@@34| T@U) ) (!  (=> (and (and (and (= (type $ly@@628) LayerTypeType) (= (type |pivots#0@@61|) (SeqType BoxType))) (= (type |pivot#0@@34|) (SeqType BoxType))) (and ($Is |pivots#0@@61| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@34| Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.CutoffForRight#requires| $ly@@628 |pivots#0@@61| |pivot#0@@34|) (PivotsLib.__default.WFPivots |pivots#0@@61|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@61|) (|PivotsLib.__default.CutoffForRight#requires| $ly@@628 |pivots#0@@61| |pivot#0@@34|)))) :qid |PivotsLi.246:22| :skolemid |3469| :pattern ( (|PivotsLib.__default.CutoffForRight#requires| $ly@@628 |pivots#0@@61| |pivot#0@@34|)) )))
(assert  (=> true (forall (($ly@@629 T@U) (|pivots#0@@62| T@U) (|pivot#0@@35| T@U) ) (!  (=> (and (and (and (= (type $ly@@629) LayerTypeType) (= (type |pivots#0@@62|) (SeqType BoxType))) (= (type |pivot#0@@35|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForRight#canCall| |pivots#0@@62| |pivot#0@@35|) (and (and ($Is |pivots#0@@62| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@35| Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@62|)))) (and (|PivotsLib.__default.Route#canCall| |pivots#0@@62| |pivot#0@@35|) (= (PivotsLib.__default.CutoffForRight ($LS $ly@@629) |pivots#0@@62| |pivot#0@@35|) (PivotsLib.__default.Route |pivots#0@@62| |pivot#0@@35|)))) :qid |PivotsLi.246:22| :skolemid |3470| :pattern ( (PivotsLib.__default.CutoffForRight ($LS $ly@@629) |pivots#0@@62| |pivot#0@@35|)) ))))
(assert  (=> true (forall (($ly@@630 T@U) (|pivots#0@@63| T@U) (|pivot#0@@36| T@U) ) (!  (=> (and (and (and (= (type $ly@@630) LayerTypeType) (= (type |pivots#0@@63|) (SeqType BoxType))) (= (type |pivot#0@@36|) (SeqType BoxType))) (or (|PivotsLib.__default.CutoffForRight#canCall| (Lit |pivots#0@@63|) (Lit |pivot#0@@36|)) (and (and ($Is |pivots#0@@63| (TSeq Tclass.KeyType.Key)) ($Is |pivot#0@@36| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@63|)))))))) (and (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@63|) (Lit |pivot#0@@36|)) (= (PivotsLib.__default.CutoffForRight ($LS $ly@@630) (Lit |pivots#0@@63|) (Lit |pivot#0@@36|)) (LitInt (PivotsLib.__default.Route (Lit |pivots#0@@63|) (Lit |pivot#0@@36|)))))) :qid |PivotsLi.246:22| :weight 3 :skolemid |3471| :pattern ( (PivotsLib.__default.CutoffForRight ($LS $ly@@630) (Lit |pivots#0@@63|) (Lit |pivot#0@@36|))) ))))
(assert (forall ((arg0@@480 T@U) (arg1@@288 Int) ) (! (= (type (PivotsLib.__default.PivotTableBucketKeySet arg0@@480 arg1@@288)) (MapType0Type BoxType boolType)) :qid |funType:PivotsLib.__default.PivotTableBucketKeySet| :pattern ( (PivotsLib.__default.PivotTableBucketKeySet arg0@@480 arg1@@288)) )))
(assert  (=> true (forall ((|pivots#0@@64| T@U) (|i#0@@138| Int) ) (!  (=> (and (= (type |pivots#0@@64|) (SeqType BoxType)) (or (|PivotsLib.__default.PivotTableBucketKeySet#canCall| |pivots#0@@64| |i#0@@138|) (and ($Is |pivots#0@@64| (TSeq Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@64|)))) ($Is (PivotsLib.__default.PivotTableBucketKeySet |pivots#0@@64| |i#0@@138|) (TISet Tclass.KeyType.Key))) :qid |PivotsLi.275:35| :skolemid |3472| :pattern ( (PivotsLib.__default.PivotTableBucketKeySet |pivots#0@@64| |i#0@@138|)) ))))
(assert (forall ((|pivots#0@@65| T@U) (|i#0@@139| Int) ) (!  (=> (and (= (type |pivots#0@@65|) (SeqType BoxType)) ($Is |pivots#0@@65| (TSeq Tclass.KeyType.Key))) (and (=> (|PivotsLib.__default.PivotTableBucketKeySet#requires| |pivots#0@@65| |i#0@@139|) (PivotsLib.__default.WFPivots |pivots#0@@65|)) (=> (PivotsLib.__default.WFPivots |pivots#0@@65|) (|PivotsLib.__default.PivotTableBucketKeySet#requires| |pivots#0@@65| |i#0@@139|)))) :qid |PivotsLi.275:35| :skolemid |3473| :pattern ( (|PivotsLib.__default.PivotTableBucketKeySet#requires| |pivots#0@@65| |i#0@@139|)) )))
(assert (forall ((arg0@@481 T@U) (arg1@@289 T@U) (arg2@@206 Int) ) (! (= (type (|lambda#565| arg0@@481 arg1@@289 arg2@@206)) (MapType0Type BoxType boolType)) :qid |funType:lambda#565| :pattern ( (|lambda#565| arg0@@481 arg1@@289 arg2@@206)) )))
(assert  (=> true (forall ((|pivots#0@@66| T@U) (|i#0@@140| Int) ) (!  (=> (and (= (type |pivots#0@@66|) (SeqType BoxType)) (or (|PivotsLib.__default.PivotTableBucketKeySet#canCall| |pivots#0@@66| |i#0@@140|) (and ($Is |pivots#0@@66| (TSeq Tclass.KeyType.Key)) (PivotsLib.__default.WFPivots |pivots#0@@66|)))) (and (forall ((|key#0@@189| T@U) ) (!  (=> (and (= (type |key#0@@189|) (SeqType BoxType)) ($Is |key#0@@189| Tclass.KeyType.Key)) (|PivotsLib.__default.Route#canCall| |pivots#0@@66| |key#0@@189|)) :qid |PivotsLi.278:10| :skolemid |3474| :pattern ( (PivotsLib.__default.Route |pivots#0@@66| |key#0@@189|)) )) (= (PivotsLib.__default.PivotTableBucketKeySet |pivots#0@@66| |i#0@@140|) (|lambda#565| Tclass.KeyType.Key |pivots#0@@66| |i#0@@140|)))) :qid |PivotsLi.275:35| :skolemid |3475| :pattern ( (PivotsLib.__default.PivotTableBucketKeySet |pivots#0@@66| |i#0@@140|)) ))))
(assert  (=> true (forall ((|pivots#0@@67| T@U) (|i#0@@141| Int) ) (!  (=> (and (= (type |pivots#0@@67|) (SeqType BoxType)) (or (|PivotsLib.__default.PivotTableBucketKeySet#canCall| (Lit |pivots#0@@67|) (LitInt |i#0@@141|)) (and ($Is |pivots#0@@67| (TSeq Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (PivotsLib.__default.WFPivots (Lit |pivots#0@@67|)))))))) (and (forall ((|key#1@@24| T@U) ) (!  (=> (and (= (type |key#1@@24|) (SeqType BoxType)) ($Is |key#1@@24| Tclass.KeyType.Key)) (|PivotsLib.__default.Route#canCall| (Lit |pivots#0@@67|) |key#1@@24|)) :qid |PivotsLi.278:10| :skolemid |3476| :pattern ( (PivotsLib.__default.Route |pivots#0@@67| |key#1@@24|)) )) (= (PivotsLib.__default.PivotTableBucketKeySet (Lit |pivots#0@@67|) (LitInt |i#0@@141|)) (|lambda#565| Tclass.KeyType.Key (Lit |pivots#0@@67|) (LitInt |i#0@@141|))))) :qid |PivotsLi.275:35| :weight 3 :skolemid |3477| :pattern ( (PivotsLib.__default.PivotTableBucketKeySet (Lit |pivots#0@@67|) (LitInt |i#0@@141|))) ))))
(assert (forall ((|s#0@@152| T@U) ) (!  (=> (= (type |s#0@@152|) (SeqType BoxType)) (and (=> ($Is |s#0@@152| Tclass.ValueType.Value) (and ($Is |s#0@@152| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@152|) (LitInt 1024)))) (=> (and ($Is |s#0@@152| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@152|) (LitInt 1024))) ($Is |s#0@@152| Tclass.ValueType.Value)))) :qid |unknown.0:0| :skolemid |3478| :pattern ( ($Is |s#0@@152| Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@153| T@U) ($h@@60 T@U) ) (!  (=> (and (= (type |s#0@@153|) (SeqType BoxType)) (= (type $h@@60) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |s#0@@153| Tclass.ValueType.Value $h@@60) ($IsAlloc |s#0@@153| (TSeq Tclass.NativeTypes.byte) $h@@60)) (=> ($IsAlloc |s#0@@153| (TSeq Tclass.NativeTypes.byte) $h@@60) ($IsAlloc |s#0@@153| Tclass.ValueType.Value $h@@60)))) :qid |unknown.0:0| :skolemid |3479| :pattern ( ($IsAlloc |s#0@@153| Tclass.ValueType.Value $h@@60)) )))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (forall ((bx@@143 T@U) ) (!  (=> (and (= (type bx@@143) BoxType) ($IsBox bx@@143 Tclass.ValueType.__default)) (and (= ($Box ($Unbox refType bx@@143)) bx@@143) ($Is ($Unbox refType bx@@143) Tclass.ValueType.__default))) :qid |unknown.0:0| :skolemid |3480| :pattern ( ($IsBox bx@@143 Tclass.ValueType.__default)) )))
(assert (forall (($o@@38 T@U) ) (!  (=> (= (type $o@@38) refType) (and (=> ($Is $o@@38 Tclass.ValueType.__default) (or (= $o@@38 null) (= (dtype $o@@38) Tclass.ValueType.__default))) (=> (or (= $o@@38 null) (= (dtype $o@@38) Tclass.ValueType.__default)) ($Is $o@@38 Tclass.ValueType.__default)))) :qid |unknown.0:0| :skolemid |3481| :pattern ( ($Is $o@@38 Tclass.ValueType.__default)) )))
(assert (forall (($o@@39 T@U) ($h@@61 T@U) ) (!  (=> (and (= (type $o@@39) refType) (= (type $h@@61) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@39 Tclass.ValueType.__default $h@@61) (or (= $o@@39 null) (U_2_bool (MapType1Select (MapType0Select $h@@61 $o@@39) alloc)))) (=> (or (= $o@@39 null) (U_2_bool (MapType1Select (MapType0Select $h@@61 $o@@39) alloc))) ($IsAlloc $o@@39 Tclass.ValueType.__default $h@@61)))) :qid |unknown.0:0| :skolemid |3482| :pattern ( ($IsAlloc $o@@39 Tclass.ValueType.__default $h@@61)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) ValueType.__default.MaxLen) (< ValueType.__default.MaxLen 18446744073709551616)))))
(assert  (=> |ValueType.__default.MaxLen#requires| true))
(assert  (=> true |ValueType.__default.MaxLen#requires|))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true |ValueType.__default.DefaultValue#requires|))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0@@15| T@U) ) (!  (=> (and (= (type |v#0@@15|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@15|) ($Is |v#0@@15| Tclass.ValueType.Value))) (<= (LitInt 0) (ValueType.__default.Len |v#0@@15|))) :qid |KeyTypes.17:15| :skolemid |3483| :pattern ( (ValueType.__default.Len |v#0@@15|)) ))))
(assert (forall ((|v#0@@16| T@U) ) (!  (=> (and (= (type |v#0@@16|) (SeqType BoxType)) ($Is |v#0@@16| Tclass.ValueType.Value)) (and (=> (|ValueType.__default.Len#requires| |v#0@@16|) true) (=> true (|ValueType.__default.Len#requires| |v#0@@16|)))) :qid |KeyTypes.17:15| :skolemid |3484| :pattern ( (|ValueType.__default.Len#requires| |v#0@@16|)) )))
(assert  (=> true (forall ((|v#0@@17| T@U) ) (!  (=> (and (= (type |v#0@@17|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@17|) ($Is |v#0@@17| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@17|) (|Seq#Length| |v#0@@17|))) :qid |KeyTypes.17:15| :skolemid |3485| :pattern ( (ValueType.__default.Len |v#0@@17|)) ))))
(assert  (=> true (forall ((|v#0@@18| T@U) ) (!  (=> (and (= (type |v#0@@18|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@18|)) ($Is |v#0@@18| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@18|)) (|Seq#Length| (Lit |v#0@@18|)))) :qid |KeyTypes.17:15| :weight 3 :skolemid |3486| :pattern ( (ValueType.__default.Len (Lit |v#0@@18|))) ))))
(assert  (=> true (forall ((|s#0@@154| T@U) ) (!  (=> (and (= (type |s#0@@154|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@154|) ($Is |s#0@@154| (TSeq Tclass.NativeTypes.byte)))) true) :qid |KeyTypes.19:36| :skolemid |3487| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@154|)) ))))
(assert (forall ((|s#0@@155| T@U) ) (!  (=> (and (= (type |s#0@@155|) (SeqType BoxType)) ($Is |s#0@@155| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@155|) true) (=> true (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@155|)))) :qid |KeyTypes.19:36| :skolemid |3488| :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@155|)) )))
(assert  (=> true (forall ((|s#0@@156| T@U) ) (!  (=> (and (= (type |s#0@@156|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@156|) ($Is |s#0@@156| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring |s#0@@156|) (<= (|Seq#Length| |s#0@@156|) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| |s#0@@156|) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring |s#0@@156|))))) :qid |KeyTypes.19:36| :skolemid |3489| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@156|)) ))))
(assert  (=> true (forall ((|s#0@@157| T@U) ) (!  (=> (and (= (type |s#0@@157|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@157|)) ($Is |s#0@@157| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring (Lit |s#0@@157|)) (<= (|Seq#Length| (Lit |s#0@@157|)) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| (Lit |s#0@@157|)) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring (Lit |s#0@@157|)))))) :qid |KeyTypes.19:36| :weight 3 :skolemid |3490| :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@157|))) ))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |KeyTypes.24:37| :skolemid |3491| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|)) ))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true) (=> true (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)))) :qid |KeyTypes.24:37| :skolemid |3492| :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)) )))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@142| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@142|) (< |i#0@@142| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@142|)))) :qid |KeyTypes.26:12| :skolemid |3493| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@142|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#0@@143| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@143|) (< |i#0@@143| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@143|)))) :qid |KeyTypes.26:12| :skolemid |3494| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@143|))) ))) (=> (forall ((|i#0@@144| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@144|) (< |i#0@@144| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@144|)))) :qid |KeyTypes.26:12| :skolemid |3494| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@144|))) )) (ValueType.__default.ValidMessageBytestrings |strs#0@@1|))))) :qid |KeyTypes.24:37| :skolemid |3495| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|)) ))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@59| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@59|) (< |i#1@@59| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@59|)))) :qid |KeyTypes.26:12| :skolemid |3496| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@59|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#1@@60| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@60|) (< |i#1@@60| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@60|)))) :qid |KeyTypes.26:12| :skolemid |3497| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@60|))) ))) (=> (forall ((|i#1@@61| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@61|) (< |i#1@@61| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@61|)))) :qid |KeyTypes.26:12| :skolemid |3497| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@61|))) )) (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)))))) :qid |KeyTypes.24:37| :weight 3 :skolemid |3498| :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|))) ))))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (forall ((bx@@144 T@U) ) (!  (=> (and (= (type bx@@144) BoxType) ($IsBox bx@@144 Tclass.ValueMessage.__default)) (and (= ($Box ($Unbox refType bx@@144)) bx@@144) ($Is ($Unbox refType bx@@144) Tclass.ValueMessage.__default))) :qid |unknown.0:0| :skolemid |3499| :pattern ( ($IsBox bx@@144 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@40 T@U) ) (!  (=> (= (type $o@@40) refType) (and (=> ($Is $o@@40 Tclass.ValueMessage.__default) (or (= $o@@40 null) (= (dtype $o@@40) Tclass.ValueMessage.__default))) (=> (or (= $o@@40 null) (= (dtype $o@@40) Tclass.ValueMessage.__default)) ($Is $o@@40 Tclass.ValueMessage.__default)))) :qid |unknown.0:0| :skolemid |3500| :pattern ( ($Is $o@@40 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@41 T@U) ($h@@62 T@U) ) (!  (=> (and (= (type $o@@41) refType) (= (type $h@@62) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@41 Tclass.ValueMessage.__default $h@@62) (or (= $o@@41 null) (U_2_bool (MapType1Select (MapType0Select $h@@62 $o@@41) alloc)))) (=> (or (= $o@@41 null) (U_2_bool (MapType1Select (MapType0Select $h@@62 $o@@41) alloc))) ($IsAlloc $o@@41 Tclass.ValueMessage.__default $h@@62)))) :qid |unknown.0:0| :skolemid |3501| :pattern ( ($IsAlloc $o@@41 Tclass.ValueMessage.__default $h@@62)) )))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert  (=> true (=> true ($IsBox ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert  (=> |ValueMessage.__default.NopDelta#requires| true))
(assert  (=> true |ValueMessage.__default.NopDelta#requires|))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueMessage.__default.DefaultValue#requires| true))
(assert  (=> true |ValueMessage.__default.DefaultValue#requires|))
(assert (forall ((arg0@@482 T@U) (arg1@@290 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@482 arg1@@290)) BoxType) :qid |funType:ValueMessage.__default.CombineDeltas| :pattern ( (ValueMessage.__default.CombineDeltas arg0@@482 arg1@@290)) )))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) BoxType) (= (type |olddelta#0|) BoxType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($IsBox |newdelta#0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (= |newdelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (= |olddelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($IsBox (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta))) :qid |Messagei.25:32| :skolemid |3502| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|)) ))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) BoxType) (= (type |olddelta#0@@0|) BoxType)) (and ($IsBox |newdelta#0@@0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0@@0| Tclass.ValueMessage.Delta))) (and (=> (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true) (=> true (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)))) :qid |Messagei.25:32| :skolemid |3503| :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)) )))
(assert (forall ((arg0@@483 T@U) (arg1@@291 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@483 arg1@@291)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.ApplyDelta| :pattern ( (ValueMessage.__default.ApplyDelta arg0@@483 arg1@@291)) )))
(assert  (=> true (forall ((|delta#0| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0|) BoxType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0| |value#0|) (and ($IsBox |delta#0| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (= |delta#0| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) Tclass.ValueType.Value))) :qid |Messagei.29:29| :skolemid |3504| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0| |value#0|)) ))))
(assert (forall ((|delta#0@@0| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@0|) BoxType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($IsBox |delta#0@@0| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (and (=> (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|) true) (=> true (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)))) :qid |Messagei.29:29| :skolemid |3505| :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)) )))
(assert (forall ((arg0@@484 T@U) ) (! (= (type (ValueMessage.__default.bytestring__to__Message arg0@@484)) DatatypeTypeType) :qid |funType:ValueMessage.__default.bytestring__to__Message| :pattern ( (ValueMessage.__default.bytestring__to__Message arg0@@484)) )))
(assert  (=> true (forall ((|s#0@@158| T@U) ) (!  (=> (and (= (type |s#0@@158|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@158|) (and ($Is |s#0@@158| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@158|) 4294967296)))) ($Is (ValueMessage.__default.bytestring__to__Message |s#0@@158|) Tclass.ValueMessage.Message)) :qid |Messagei.100:41| :skolemid |3506| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@158|)) ))))
(assert (forall ((|s#0@@159| T@U) ) (!  (=> (and (= (type |s#0@@159|) (SeqType BoxType)) ($Is |s#0@@159| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@159|) (< (|Seq#Length| |s#0@@159|) 4294967296)) (=> (< (|Seq#Length| |s#0@@159|) 4294967296) (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@159|)))) :qid |Messagei.100:41| :skolemid |3507| :pattern ( (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@159|)) )))
(assert  (=> true (forall ((|msg#0@@11| T@U) ) (!  (=> (and (= (type |msg#0@@11|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0@@11|) ($Is |msg#0@@11| Tclass.ValueMessage.Message))) true) :qid |Messagei.113:30| :skolemid |3508| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0@@11|)) ))))
(assert (forall ((|msg#0@@12| T@U) ) (!  (=> (and (= (type |msg#0@@12|) DatatypeTypeType) ($Is |msg#0@@12| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@12|) true) (=> true (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@12|)))) :qid |Messagei.113:30| :skolemid |3509| :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@12|)) )))
(assert  (=> true (forall ((|msgs#0@@9| T@U) ) (!  (=> (and (= (type |msgs#0@@9|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0@@9|) ($Is |msgs#0@@9| (TSeq Tclass.ValueMessage.Message)))) true) :qid |Messagei.118:33| :skolemid |3510| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0@@9|)) ))))
(assert (forall ((|msgs#0@@10| T@U) ) (!  (=> (and (= (type |msgs#0@@10|) (SeqType BoxType)) ($Is |msgs#0@@10| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@10|) true) (=> true (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@10|)))) :qid |Messagei.118:33| :skolemid |3511| :pattern ( (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@10|)) )))
(assert (forall ((arg0@@485 T@U) ) (! (= (type (ValueMessage.__default.Message__to__bytestring arg0@@485)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.Message__to__bytestring| :pattern ( (ValueMessage.__default.Message__to__bytestring arg0@@485)) )))
(assert  (=> true (forall ((|msg#0@@13| T@U) ) (!  (=> (and (= (type |msg#0@@13|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@13|) (and ($Is |msg#0@@13| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@13|)))) ($Is (ValueMessage.__default.Message__to__bytestring |msg#0@@13|) (TSeq Tclass.NativeTypes.byte))) :qid |Messagei.123:41| :skolemid |3512| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@13|)) ))))
(assert (forall ((|msg#0@@14| T@U) ) (!  (=> (and (= (type |msg#0@@14|) DatatypeTypeType) ($Is |msg#0@@14| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@14|) (ValueMessage.Message.Define_q |msg#0@@14|)) (=> (ValueMessage.Message.Define_q |msg#0@@14|) (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@14|)))) :qid |Messagei.123:41| :skolemid |3513| :pattern ( (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@14|)) )))
(assert (forall ((arg0@@486 T@U) (arg1@@292 T@U) ) (! (= (type (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@486 arg1@@292)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.messageSeq__to__bytestringSeq| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@486 arg1@@292)) )))
(assert (forall (($ly@@631 T@U) (|msgs#0@@11| T@U) ) (!  (=> (and (= (type $ly@@631) LayerTypeType) (= (type |msgs#0@@11|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@631) |msgs#0@@11|) (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@631 |msgs#0@@11|))) :qid |Messagei.129:12| :skolemid |3514| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@631) |msgs#0@@11|)) )))
(assert (forall (($ly@@632 T@U) (|msgs#0@@12| T@U) ) (!  (=> (and (= (type $ly@@632) LayerTypeType) (= (type |msgs#0@@12|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@632 |msgs#0@@12|) (ValueMessage.__default.messageSeq__to__bytestringSeq $LZ |msgs#0@@12|))) :qid |Messagei.129:12| :skolemid |3515| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq (AsFuelBottom $ly@@632) |msgs#0@@12|)) )))
(assert  (=> true (forall (($ly@@633 T@U) (|msgs#0@@13| T@U) ) (!  (=> (and (and (= (type $ly@@633) LayerTypeType) (= (type |msgs#0@@13|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@13|) (and ($Is |msgs#0@@13| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@13|)))) (and (and (= (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@633 |msgs#0@@13|)) (|Seq#Length| |msgs#0@@13|)) (forall ((|i#0@@145| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@145|) (< |i#0@@145| (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@633 |msgs#0@@13|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@633 |msgs#0@@13|) |i#0@@145|)) (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@13| |i#0@@145|))))) :qid |Messagei.132:20| :skolemid |3516| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@13| |i#0@@145|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@633 |msgs#0@@13|) |i#0@@145|))) ))) ($Is (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@633 |msgs#0@@13|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |Messagei.129:12| :skolemid |3517| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@633 |msgs#0@@13|)) ))))
(assert (forall (($ly@@634 T@U) (|msgs#0@@14| T@U) ) (!  (=> (and (and (= (type $ly@@634) LayerTypeType) (= (type |msgs#0@@14|) (SeqType BoxType))) ($Is |msgs#0@@14| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@634 |msgs#0@@14|) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@14|)) (=> (ValueMessage.__default.EncodableMessageSeq |msgs#0@@14|) (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@634 |msgs#0@@14|)))) :qid |Messagei.129:12| :skolemid |3518| :pattern ( (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@634 |msgs#0@@14|)) )))
(assert (forall ((arg0@@487 T@U) (arg1@@293 T@U) ) (! (= (type (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@487 arg1@@293)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.bytestringSeq__to__MessageSeq| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@487 arg1@@293)) )))
(assert (forall (($ly@@635 T@U) (|strings#0| T@U) ) (!  (=> (and (= (type $ly@@635) LayerTypeType) (= (type |strings#0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@635) |strings#0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@635 |strings#0|))) :qid |Messagei.140:12| :skolemid |3519| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@635) |strings#0|)) )))
(assert (forall (($ly@@636 T@U) (|strings#0@@0| T@U) ) (!  (=> (and (= (type $ly@@636) LayerTypeType) (= (type |strings#0@@0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@636 |strings#0@@0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $LZ |strings#0@@0|))) :qid |Messagei.140:12| :skolemid |3520| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq (AsFuelBottom $ly@@636) |strings#0@@0|)) )))
(assert  (=> true (forall (($ly@@637 T@U) (|strings#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@637) LayerTypeType) (= (type |strings#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@1|) (and ($Is |strings#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#0@@146| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@146|) (< |i#0@@146| (|Seq#Length| |strings#0@@1|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@146|))) 4294967296)) :qid |Messagei.141:21| :skolemid |3521| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@146|))) ))))) (and (and (= (|Seq#Length| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@637 |strings#0@@1|)) (|Seq#Length| |strings#0@@1|)) (forall ((|i#1@@62| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@62|) (< |i#1@@62| (|Seq#Length| |strings#0@@1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@637 |strings#0@@1|) |i#1@@62|)) (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@62|))))) :qid |Messagei.143:20| :skolemid |3522| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@62|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@637 |strings#0@@1|) |i#1@@62|))) ))) ($Is (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@637 |strings#0@@1|) (TSeq Tclass.ValueMessage.Message)))) :qid |Messagei.140:12| :skolemid |3523| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@637 |strings#0@@1|)) ))))
(assert (forall (($ly@@638 T@U) (|strings#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@638) LayerTypeType) (= (type |strings#0@@2|) (SeqType BoxType))) ($Is |strings#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@638 |strings#0@@2|) (forall ((|i#2@@16| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@16|) (< |i#2@@16| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@16|))) 4294967296)) :qid |Messagei.141:21| :skolemid |3524| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@16|))) ))) (=> (forall ((|i#2@@17| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@17|) (< |i#2@@17| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@17|))) 4294967296)) :qid |Messagei.141:21| :skolemid |3524| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@17|))) )) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@638 |strings#0@@2|)))) :qid |Messagei.140:12| :skolemid |3525| :pattern ( (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@638 |strings#0@@2|)) )))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message)) :qid |Messagei.32:24| :skolemid |3526| :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|)) ))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true) (=> true (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)))) :qid |Messagei.32:24| :skolemid |3527| :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)) )))
(assert  (and (forall ((arg0@@488 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@488)) BoxType) :qid |funType:ValueMessage.Message.delta| :pattern ( (ValueMessage.Message.delta arg0@@488)) )) (forall ((arg0@@489 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@489)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Define| :pattern ( (|#ValueMessage.Message.Define| arg0@@489)) ))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#0@@1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@1| |value#0@@1|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0@@1| |olddelta#0@@1|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| |newvalue#1|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|delta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#1| |value#1|)))) (let ((|olddelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|newdelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#1| |olddelta#1|))))))))) :qid |Messagei.32:24| :skolemid |3528| :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|)) ))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#2| |value#2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#2| |olddelta#2|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| |newvalue#3|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|delta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#3| |value#3|)))) (let ((|olddelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|newdelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#3| |olddelta#3|))))))))) :qid |Messagei.32:24| :weight 3 :skolemid |3529| :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|))) ))))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true |ValueMessage.__default.IdentityMessage#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefineDefault Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.DefineDefault#requires| true))
(assert  (=> true |ValueMessage.__default.DefineDefault#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert (forall ((|a#0#0#0@@0| T@U) ) (!  (=> (= (type |a#0#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@0|)) |##ValueMessage.Message.Define|)) :qid |Messagei.22:13| :skolemid |3530| :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@0|)) )))
(assert (forall ((d@@25 T@U) ) (!  (=> (= (type d@@25) DatatypeTypeType) (and (=> (ValueMessage.Message.Define_q d@@25) (= (DatatypeCtorId d@@25) |##ValueMessage.Message.Define|)) (=> (= (DatatypeCtorId d@@25) |##ValueMessage.Message.Define|) (ValueMessage.Message.Define_q d@@25)))) :qid |unknown.0:0| :skolemid |3531| :pattern ( (ValueMessage.Message.Define_q d@@25)) )))
(assert (forall ((d@@26 T@U) ) (!  (=> (and (= (type d@@26) DatatypeTypeType) (ValueMessage.Message.Define_q d@@26)) (exists ((|a#1#0#0@@0| T@U) ) (!  (and (= (type |a#1#0#0@@0|) (SeqType BoxType)) (= d@@26 (|#ValueMessage.Message.Define| |a#1#0#0@@0|))) :qid |Messagei.22:13| :skolemid |3532| :no-pattern (type |a#1#0#0@@0|) :no-pattern (U_2_int |a#1#0#0@@0|) :no-pattern (U_2_bool |a#1#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |3533| :pattern ( (ValueMessage.Message.Define_q d@@26)) )))
(assert (forall ((|a#2#0#0@@0| T@U) ) (!  (=> (= (type |a#2#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@0|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@0| Tclass.ValueType.Value)) (=> ($Is |a#2#0#0@@0| Tclass.ValueType.Value) ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@0|) Tclass.ValueMessage.Message)))) :qid |Messagei.22:13| :skolemid |3534| :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@0|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#3#0#0@@0| T@U) ($h@@63 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@0|) (SeqType BoxType)) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@63)) (and (=> ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@0|) Tclass.ValueMessage.Message $h@@63) ($IsAlloc |a#3#0#0@@0| Tclass.ValueType.Value $h@@63)) (=> ($IsAlloc |a#3#0#0@@0| Tclass.ValueType.Value $h@@63) ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@0|) Tclass.ValueMessage.Message $h@@63)))) :qid |Messagei.22:13| :skolemid |3535| :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@0|) Tclass.ValueMessage.Message $h@@63)) )))
(assert (forall ((d@@27 T@U) ($h@@64 T@U) ) (!  (=> (and (and (= (type d@@27) DatatypeTypeType) (= (type $h@@64) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@64) (and (ValueMessage.Message.Define_q d@@27) ($IsAlloc d@@27 Tclass.ValueMessage.Message $h@@64)))) ($IsAlloc (ValueMessage.Message.value d@@27) Tclass.ValueType.Value $h@@64)) :qid |unknown.0:0| :skolemid |3536| :pattern ( ($IsAlloc (ValueMessage.Message.value d@@27) Tclass.ValueType.Value $h@@64)) )))
(assert (forall ((|a#4#0#0@@0| T@U) ) (!  (=> (= (type |a#4#0#0@@0|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@0|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@0|)))) :qid |Messagei.22:13| :skolemid |3537| :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@0|))) )))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) |a#5#0#0@@1|)) :qid |Messagei.22:13| :skolemid |3538| :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) )))
(assert (forall ((|a#6#0#0@@1| T@U) ) (!  (=> (= (type |a#6#0#0@@1|) BoxType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) |##ValueMessage.Message.Update|)) :qid |Messagei.23:13| :skolemid |3539| :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) )))
(assert (forall ((d@@28 T@U) ) (!  (=> (= (type d@@28) DatatypeTypeType) (and (=> (ValueMessage.Message.Update_q d@@28) (= (DatatypeCtorId d@@28) |##ValueMessage.Message.Update|)) (=> (= (DatatypeCtorId d@@28) |##ValueMessage.Message.Update|) (ValueMessage.Message.Update_q d@@28)))) :qid |unknown.0:0| :skolemid |3540| :pattern ( (ValueMessage.Message.Update_q d@@28)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (and (= (type d@@29) DatatypeTypeType) (ValueMessage.Message.Update_q d@@29)) (exists ((|a#7#0#0@@1| T@U) ) (!  (and (= (type |a#7#0#0@@1|) BoxType) (= d@@29 (|#ValueMessage.Message.Update| |a#7#0#0@@1|))) :qid |Messagei.23:13| :skolemid |3541| :no-pattern (type |a#7#0#0@@1|) :no-pattern (U_2_int |a#7#0#0@@1|) :no-pattern (U_2_bool |a#7#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |3542| :pattern ( (ValueMessage.Message.Update_q d@@29)) )))
(assert (forall ((|a#8#0#0@@1| T@U) ) (!  (=> (= (type |a#8#0#0@@1|) BoxType) (and (=> ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message) ($IsBox |a#8#0#0@@1| Tclass.ValueMessage.Delta)) (=> ($IsBox |a#8#0#0@@1| Tclass.ValueMessage.Delta) ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)))) :qid |Messagei.23:13| :skolemid |3543| :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ($h@@65 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@0|) BoxType) (= (type $h@@65) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@65)) (and (=> ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@65) ($IsAllocBox |a#9#0#0@@0| Tclass.ValueMessage.Delta $h@@65)) (=> ($IsAllocBox |a#9#0#0@@0| Tclass.ValueMessage.Delta $h@@65) ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@65)))) :qid |Messagei.23:13| :skolemid |3544| :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@65)) )))
(assert (forall ((d@@30 T@U) ($h@@66 T@U) ) (!  (=> (and (and (= (type d@@30) DatatypeTypeType) (= (type $h@@66) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@66) (and (ValueMessage.Message.Update_q d@@30) ($IsAlloc d@@30 Tclass.ValueMessage.Message $h@@66)))) ($IsAllocBox (ValueMessage.Message.delta d@@30) Tclass.ValueMessage.Delta $h@@66)) :qid |unknown.0:0| :skolemid |3545| :pattern ( ($IsAllocBox (ValueMessage.Message.delta d@@30) Tclass.ValueMessage.Delta $h@@66)) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) BoxType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@0|)))) :qid |Messagei.23:13| :skolemid |3546| :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|))) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) BoxType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@0|)) |a#11#0#0@@0|)) :qid |Messagei.23:13| :skolemid |3547| :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@0|)) )))
(assert (forall ((d@@31 T@U) ) (!  (=> (and (= (type d@@31) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@31)) (or (ValueMessage.Message.Define_q d@@31) (ValueMessage.Message.Update_q d@@31))) :qid |unknown.0:0| :skolemid |3548| :pattern ( (|$IsA#ValueMessage.Message| d@@31)) )))
(assert (forall ((d@@32 T@U) ) (!  (=> (and (= (type d@@32) DatatypeTypeType) ($Is d@@32 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@32) (ValueMessage.Message.Update_q d@@32))) :qid |unknown.0:0| :skolemid |3549| :pattern ( (ValueMessage.Message.Update_q d@@32) ($Is d@@32 Tclass.ValueMessage.Message)) :pattern ( (ValueMessage.Message.Define_q d@@32) ($Is d@@32 Tclass.ValueMessage.Message)) )))
(assert (forall ((a@@139 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@139) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@139) (ValueMessage.Message.Define_q b@@70))) (and (=> (|ValueMessage.Message#Equal| a@@139 b@@70) (|Seq#Equal| (ValueMessage.Message.value a@@139) (ValueMessage.Message.value b@@70))) (=> (|Seq#Equal| (ValueMessage.Message.value a@@139) (ValueMessage.Message.value b@@70)) (|ValueMessage.Message#Equal| a@@139 b@@70)))) :qid |unknown.0:0| :skolemid |3550| :pattern ( (|ValueMessage.Message#Equal| a@@139 b@@70) (ValueMessage.Message.Define_q a@@139)) :pattern ( (|ValueMessage.Message#Equal| a@@139 b@@70) (ValueMessage.Message.Define_q b@@70)) )))
(assert (forall ((a@@140 T@U) (b@@71 T@U) ) (!  (=> (and (and (= (type a@@140) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@140) (ValueMessage.Message.Update_q b@@71))) (and (=> (|ValueMessage.Message#Equal| a@@140 b@@71) (= (ValueMessage.Message.delta a@@140) (ValueMessage.Message.delta b@@71))) (=> (= (ValueMessage.Message.delta a@@140) (ValueMessage.Message.delta b@@71)) (|ValueMessage.Message#Equal| a@@140 b@@71)))) :qid |unknown.0:0| :skolemid |3551| :pattern ( (|ValueMessage.Message#Equal| a@@140 b@@71) (ValueMessage.Message.Update_q a@@140)) :pattern ( (|ValueMessage.Message#Equal| a@@140 b@@71) (ValueMessage.Message.Update_q b@@71)) )))
(assert (forall ((a@@141 T@U) (b@@72 T@U) ) (!  (=> (and (= (type a@@141) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (=> (|ValueMessage.Message#Equal| a@@141 b@@72) (= a@@141 b@@72)) (=> (= a@@141 b@@72) (|ValueMessage.Message#Equal| a@@141 b@@72)))) :qid |unknown.0:0| :skolemid |3552| :pattern ( (|ValueMessage.Message#Equal| a@@141 b@@72)) )))
(assert (forall ((arg0@@490 T@U) ) (! (= (type (|#UI.RangeStart.SInclusive| arg0@@490)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SInclusive| :pattern ( (|#UI.RangeStart.SInclusive| arg0@@490)) )))
(assert (forall ((|a#12#0#0| T@U) ) (!  (=> (= (type |a#12#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SInclusive| |a#12#0#0|)) |##UI.RangeStart.SInclusive|)) :qid |UIsdfy.10:36| :skolemid |3553| :pattern ( (|#UI.RangeStart.SInclusive| |a#12#0#0|)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (= (type d@@33) DatatypeTypeType) (and (=> (UI.RangeStart.SInclusive_q d@@33) (= (DatatypeCtorId d@@33) |##UI.RangeStart.SInclusive|)) (=> (= (DatatypeCtorId d@@33) |##UI.RangeStart.SInclusive|) (UI.RangeStart.SInclusive_q d@@33)))) :qid |unknown.0:0| :skolemid |3554| :pattern ( (UI.RangeStart.SInclusive_q d@@33)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (and (= (type d@@34) DatatypeTypeType) (UI.RangeStart.SInclusive_q d@@34)) (exists ((|a#13#0#0| T@U) ) (!  (and (= (type |a#13#0#0|) (SeqType BoxType)) (= d@@34 (|#UI.RangeStart.SInclusive| |a#13#0#0|))) :qid |UIsdfy.10:36| :skolemid |3555| :no-pattern (type |a#13#0#0|) :no-pattern (U_2_int |a#13#0#0|) :no-pattern (U_2_bool |a#13#0#0|) ))) :qid |unknown.0:0| :skolemid |3556| :pattern ( (UI.RangeStart.SInclusive_q d@@34)) )))
(assert (forall ((|a#14#0#0@@0| T@U) ) (!  (=> (= (type |a#14#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#14#0#0@@0| Tclass.KeyType.Key)) (=> ($Is |a#14#0#0@@0| Tclass.KeyType.Key) ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart)))) :qid |UIsdfy.10:36| :skolemid |3557| :pattern ( ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#15#0#0@@0| T@U) ($h@@67 T@U) ) (!  (=> (and (and (= (type |a#15#0#0@@0|) (SeqType BoxType)) (= (type $h@@67) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@67)) (and (=> ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@67) ($IsAlloc |a#15#0#0@@0| Tclass.KeyType.Key $h@@67)) (=> ($IsAlloc |a#15#0#0@@0| Tclass.KeyType.Key $h@@67) ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@67)))) :qid |UIsdfy.10:36| :skolemid |3558| :pattern ( ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@67)) )))
(assert (forall ((arg0@@491 T@U) ) (! (= (type (UI.RangeStart.key arg0@@491)) (SeqType BoxType)) :qid |funType:UI.RangeStart.key| :pattern ( (UI.RangeStart.key arg0@@491)) )))
(assert (forall ((d@@35 T@U) ($h@@68 T@U) ) (!  (=> (and (and (= (type d@@35) DatatypeTypeType) (= (type $h@@68) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@68) (and (UI.RangeStart.SInclusive_q d@@35) ($IsAlloc d@@35 Tclass.UI.RangeStart $h@@68)))) ($IsAlloc (UI.RangeStart.key d@@35) Tclass.KeyType.Key $h@@68)) :qid |unknown.0:0| :skolemid |3559| :pattern ( ($IsAlloc (UI.RangeStart.key d@@35) Tclass.KeyType.Key $h@@68)) )))
(assert (forall ((|a#16#0#0@@0| T@U) ) (!  (=> (= (type |a#16#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SInclusive| (Lit |a#16#0#0@@0|)) (Lit (|#UI.RangeStart.SInclusive| |a#16#0#0@@0|)))) :qid |UIsdfy.10:36| :skolemid |3560| :pattern ( (|#UI.RangeStart.SInclusive| (Lit |a#16#0#0@@0|))) )))
(assert (forall ((|a#17#0#0@@0| T@U) ) (!  (=> (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SInclusive| |a#17#0#0@@0|)) |a#17#0#0@@0|)) :qid |UIsdfy.10:36| :skolemid |3561| :pattern ( (|#UI.RangeStart.SInclusive| |a#17#0#0@@0|)) )))
(assert (forall ((arg0@@492 T@U) ) (! (= (type (|#UI.RangeStart.SExclusive| arg0@@492)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SExclusive| :pattern ( (|#UI.RangeStart.SExclusive| arg0@@492)) )))
(assert (forall ((|a#18#0#0@@0| T@U) ) (!  (=> (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SExclusive| |a#18#0#0@@0|)) |##UI.RangeStart.SExclusive|)) :qid |UIsdfy.10:59| :skolemid |3562| :pattern ( (|#UI.RangeStart.SExclusive| |a#18#0#0@@0|)) )))
(assert (forall ((d@@36 T@U) ) (!  (=> (= (type d@@36) DatatypeTypeType) (and (=> (UI.RangeStart.SExclusive_q d@@36) (= (DatatypeCtorId d@@36) |##UI.RangeStart.SExclusive|)) (=> (= (DatatypeCtorId d@@36) |##UI.RangeStart.SExclusive|) (UI.RangeStart.SExclusive_q d@@36)))) :qid |unknown.0:0| :skolemid |3563| :pattern ( (UI.RangeStart.SExclusive_q d@@36)) )))
(assert (forall ((d@@37 T@U) ) (!  (=> (and (= (type d@@37) DatatypeTypeType) (UI.RangeStart.SExclusive_q d@@37)) (exists ((|a#19#0#0@@0| T@U) ) (!  (and (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= d@@37 (|#UI.RangeStart.SExclusive| |a#19#0#0@@0|))) :qid |UIsdfy.10:59| :skolemid |3564| :no-pattern (type |a#19#0#0@@0|) :no-pattern (U_2_int |a#19#0#0@@0|) :no-pattern (U_2_bool |a#19#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |3565| :pattern ( (UI.RangeStart.SExclusive_q d@@37)) )))
(assert (forall ((|a#20#0#0@@0| T@U) ) (!  (=> (= (type |a#20#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#20#0#0@@0| Tclass.KeyType.Key)) (=> ($Is |a#20#0#0@@0| Tclass.KeyType.Key) ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0@@0|) Tclass.UI.RangeStart)))) :qid |UIsdfy.10:59| :skolemid |3566| :pattern ( ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#21#0#0@@0| T@U) ($h@@69 T@U) ) (!  (=> (and (and (= (type |a#21#0#0@@0|) (SeqType BoxType)) (= (type $h@@69) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@69)) (and (=> ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0@@0|) Tclass.UI.RangeStart $h@@69) ($IsAlloc |a#21#0#0@@0| Tclass.KeyType.Key $h@@69)) (=> ($IsAlloc |a#21#0#0@@0| Tclass.KeyType.Key $h@@69) ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0@@0|) Tclass.UI.RangeStart $h@@69)))) :qid |UIsdfy.10:59| :skolemid |3567| :pattern ( ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0@@0|) Tclass.UI.RangeStart $h@@69)) )))
(assert (forall ((d@@38 T@U) ($h@@70 T@U) ) (!  (=> (and (and (= (type d@@38) DatatypeTypeType) (= (type $h@@70) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@70) (and (UI.RangeStart.SExclusive_q d@@38) ($IsAlloc d@@38 Tclass.UI.RangeStart $h@@70)))) ($IsAlloc (UI.RangeStart.key d@@38) Tclass.KeyType.Key $h@@70)) :qid |unknown.0:0| :skolemid |3568| :pattern ( ($IsAlloc (UI.RangeStart.key d@@38) Tclass.KeyType.Key $h@@70)) )))
(assert (forall ((|a#22#0#0@@0| T@U) ) (!  (=> (= (type |a#22#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SExclusive| (Lit |a#22#0#0@@0|)) (Lit (|#UI.RangeStart.SExclusive| |a#22#0#0@@0|)))) :qid |UIsdfy.10:59| :skolemid |3569| :pattern ( (|#UI.RangeStart.SExclusive| (Lit |a#22#0#0@@0|))) )))
(assert (forall ((|a#23#0#0@@0| T@U) ) (!  (=> (= (type |a#23#0#0@@0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SExclusive| |a#23#0#0@@0|)) |a#23#0#0@@0|)) :qid |UIsdfy.10:59| :skolemid |3570| :pattern ( (|#UI.RangeStart.SExclusive| |a#23#0#0@@0|)) )))
(assert (= (type |#UI.RangeStart.NegativeInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeStart.NegativeInf|) |##UI.RangeStart.NegativeInf|))
(assert (forall ((d@@39 T@U) ) (!  (=> (= (type d@@39) DatatypeTypeType) (and (=> (UI.RangeStart.NegativeInf_q d@@39) (= (DatatypeCtorId d@@39) |##UI.RangeStart.NegativeInf|)) (=> (= (DatatypeCtorId d@@39) |##UI.RangeStart.NegativeInf|) (UI.RangeStart.NegativeInf_q d@@39)))) :qid |unknown.0:0| :skolemid |3571| :pattern ( (UI.RangeStart.NegativeInf_q d@@39)) )))
(assert (forall ((d@@40 T@U) ) (!  (=> (and (= (type d@@40) DatatypeTypeType) (UI.RangeStart.NegativeInf_q d@@40)) (= d@@40 |#UI.RangeStart.NegativeInf|)) :qid |unknown.0:0| :skolemid |3572| :pattern ( (UI.RangeStart.NegativeInf_q d@@40)) )))
(assert ($Is |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart))
(assert (forall (($h@@71 T@U) ) (!  (=> (and (= (type $h@@71) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@71)) ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@71)) :qid |DafnyPre.521:12| :skolemid |3573| :pattern ( ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@71)) )))
(assert (= |#UI.RangeStart.NegativeInf| (Lit |#UI.RangeStart.NegativeInf|)))
(assert (forall ((d@@41 T@U) ) (!  (=> (and (= (type d@@41) DatatypeTypeType) (|$IsA#UI.RangeStart| d@@41)) (or (or (UI.RangeStart.SInclusive_q d@@41) (UI.RangeStart.SExclusive_q d@@41)) (UI.RangeStart.NegativeInf_q d@@41))) :qid |unknown.0:0| :skolemid |3574| :pattern ( (|$IsA#UI.RangeStart| d@@41)) )))
(assert (forall ((d@@42 T@U) ) (!  (=> (and (= (type d@@42) DatatypeTypeType) ($Is d@@42 Tclass.UI.RangeStart)) (or (or (UI.RangeStart.SInclusive_q d@@42) (UI.RangeStart.SExclusive_q d@@42)) (UI.RangeStart.NegativeInf_q d@@42))) :qid |unknown.0:0| :skolemid |3575| :pattern ( (UI.RangeStart.NegativeInf_q d@@42) ($Is d@@42 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SExclusive_q d@@42) ($Is d@@42 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SInclusive_q d@@42) ($Is d@@42 Tclass.UI.RangeStart)) )))
(assert (forall ((a@@142 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@142) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (UI.RangeStart.SInclusive_q a@@142) (UI.RangeStart.SInclusive_q b@@73))) (and (=> (|UI.RangeStart#Equal| a@@142 b@@73) (|Seq#Equal| (UI.RangeStart.key a@@142) (UI.RangeStart.key b@@73))) (=> (|Seq#Equal| (UI.RangeStart.key a@@142) (UI.RangeStart.key b@@73)) (|UI.RangeStart#Equal| a@@142 b@@73)))) :qid |unknown.0:0| :skolemid |3576| :pattern ( (|UI.RangeStart#Equal| a@@142 b@@73) (UI.RangeStart.SInclusive_q a@@142)) :pattern ( (|UI.RangeStart#Equal| a@@142 b@@73) (UI.RangeStart.SInclusive_q b@@73)) )))
(assert (forall ((a@@143 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@143) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (UI.RangeStart.SExclusive_q a@@143) (UI.RangeStart.SExclusive_q b@@74))) (and (=> (|UI.RangeStart#Equal| a@@143 b@@74) (|Seq#Equal| (UI.RangeStart.key a@@143) (UI.RangeStart.key b@@74))) (=> (|Seq#Equal| (UI.RangeStart.key a@@143) (UI.RangeStart.key b@@74)) (|UI.RangeStart#Equal| a@@143 b@@74)))) :qid |unknown.0:0| :skolemid |3577| :pattern ( (|UI.RangeStart#Equal| a@@143 b@@74) (UI.RangeStart.SExclusive_q a@@143)) :pattern ( (|UI.RangeStart#Equal| a@@143 b@@74) (UI.RangeStart.SExclusive_q b@@74)) )))
(assert (forall ((a@@144 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@144) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (UI.RangeStart.NegativeInf_q a@@144) (UI.RangeStart.NegativeInf_q b@@75))) (and (=> (|UI.RangeStart#Equal| a@@144 b@@75) true) (=> true (|UI.RangeStart#Equal| a@@144 b@@75)))) :qid |unknown.0:0| :skolemid |3578| :pattern ( (|UI.RangeStart#Equal| a@@144 b@@75) (UI.RangeStart.NegativeInf_q a@@144)) :pattern ( (|UI.RangeStart#Equal| a@@144 b@@75) (UI.RangeStart.NegativeInf_q b@@75)) )))
(assert (forall ((a@@145 T@U) (b@@76 T@U) ) (!  (=> (and (= (type a@@145) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (and (=> (|UI.RangeStart#Equal| a@@145 b@@76) (= a@@145 b@@76)) (=> (= a@@145 b@@76) (|UI.RangeStart#Equal| a@@145 b@@76)))) :qid |unknown.0:0| :skolemid |3579| :pattern ( (|UI.RangeStart#Equal| a@@145 b@@76)) )))
(assert (forall ((arg0@@493 T@U) ) (! (= (type (|#UI.RangeEnd.EInclusive| arg0@@493)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EInclusive| :pattern ( (|#UI.RangeEnd.EInclusive| arg0@@493)) )))
(assert (forall ((|a#29#0#0| T@U) ) (!  (=> (= (type |a#29#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EInclusive| |a#29#0#0|)) |##UI.RangeEnd.EInclusive|)) :qid |UIsdfy.11:34| :skolemid |3580| :pattern ( (|#UI.RangeEnd.EInclusive| |a#29#0#0|)) )))
(assert (forall ((d@@43 T@U) ) (!  (=> (= (type d@@43) DatatypeTypeType) (and (=> (UI.RangeEnd.EInclusive_q d@@43) (= (DatatypeCtorId d@@43) |##UI.RangeEnd.EInclusive|)) (=> (= (DatatypeCtorId d@@43) |##UI.RangeEnd.EInclusive|) (UI.RangeEnd.EInclusive_q d@@43)))) :qid |unknown.0:0| :skolemid |3581| :pattern ( (UI.RangeEnd.EInclusive_q d@@43)) )))
(assert (forall ((d@@44 T@U) ) (!  (=> (and (= (type d@@44) DatatypeTypeType) (UI.RangeEnd.EInclusive_q d@@44)) (exists ((|a#30#0#0| T@U) ) (!  (and (= (type |a#30#0#0|) (SeqType BoxType)) (= d@@44 (|#UI.RangeEnd.EInclusive| |a#30#0#0|))) :qid |UIsdfy.11:34| :skolemid |3582| :no-pattern (type |a#30#0#0|) :no-pattern (U_2_int |a#30#0#0|) :no-pattern (U_2_bool |a#30#0#0|) ))) :qid |unknown.0:0| :skolemid |3583| :pattern ( (UI.RangeEnd.EInclusive_q d@@44)) )))
(assert (forall ((|a#31#0#0| T@U) ) (!  (=> (= (type |a#31#0#0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0|) Tclass.UI.RangeEnd) ($Is |a#31#0#0| Tclass.KeyType.Key)) (=> ($Is |a#31#0#0| Tclass.KeyType.Key) ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0|) Tclass.UI.RangeEnd)))) :qid |UIsdfy.11:34| :skolemid |3584| :pattern ( ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#32#0#0| T@U) ($h@@72 T@U) ) (!  (=> (and (and (= (type |a#32#0#0|) (SeqType BoxType)) (= (type $h@@72) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@72)) (and (=> ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0|) Tclass.UI.RangeEnd $h@@72) ($IsAlloc |a#32#0#0| Tclass.KeyType.Key $h@@72)) (=> ($IsAlloc |a#32#0#0| Tclass.KeyType.Key $h@@72) ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0|) Tclass.UI.RangeEnd $h@@72)))) :qid |UIsdfy.11:34| :skolemid |3585| :pattern ( ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0|) Tclass.UI.RangeEnd $h@@72)) )))
(assert (forall ((arg0@@494 T@U) ) (! (= (type (UI.RangeEnd.key arg0@@494)) (SeqType BoxType)) :qid |funType:UI.RangeEnd.key| :pattern ( (UI.RangeEnd.key arg0@@494)) )))
(assert (forall ((d@@45 T@U) ($h@@73 T@U) ) (!  (=> (and (and (= (type d@@45) DatatypeTypeType) (= (type $h@@73) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@73) (and (UI.RangeEnd.EInclusive_q d@@45) ($IsAlloc d@@45 Tclass.UI.RangeEnd $h@@73)))) ($IsAlloc (UI.RangeEnd.key d@@45) Tclass.KeyType.Key $h@@73)) :qid |unknown.0:0| :skolemid |3586| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@45) Tclass.KeyType.Key $h@@73)) )))
(assert (forall ((|a#33#0#0| T@U) ) (!  (=> (= (type |a#33#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EInclusive| (Lit |a#33#0#0|)) (Lit (|#UI.RangeEnd.EInclusive| |a#33#0#0|)))) :qid |UIsdfy.11:34| :skolemid |3587| :pattern ( (|#UI.RangeEnd.EInclusive| (Lit |a#33#0#0|))) )))
(assert (forall ((|a#34#0#0| T@U) ) (!  (=> (= (type |a#34#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EInclusive| |a#34#0#0|)) |a#34#0#0|)) :qid |UIsdfy.11:34| :skolemid |3588| :pattern ( (|#UI.RangeEnd.EInclusive| |a#34#0#0|)) )))
(assert (forall ((arg0@@495 T@U) ) (! (= (type (|#UI.RangeEnd.EExclusive| arg0@@495)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EExclusive| :pattern ( (|#UI.RangeEnd.EExclusive| arg0@@495)) )))
(assert (forall ((|a#35#0#0| T@U) ) (!  (=> (= (type |a#35#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EExclusive| |a#35#0#0|)) |##UI.RangeEnd.EExclusive|)) :qid |UIsdfy.11:57| :skolemid |3589| :pattern ( (|#UI.RangeEnd.EExclusive| |a#35#0#0|)) )))
(assert (forall ((d@@46 T@U) ) (!  (=> (= (type d@@46) DatatypeTypeType) (and (=> (UI.RangeEnd.EExclusive_q d@@46) (= (DatatypeCtorId d@@46) |##UI.RangeEnd.EExclusive|)) (=> (= (DatatypeCtorId d@@46) |##UI.RangeEnd.EExclusive|) (UI.RangeEnd.EExclusive_q d@@46)))) :qid |unknown.0:0| :skolemid |3590| :pattern ( (UI.RangeEnd.EExclusive_q d@@46)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (and (= (type d@@47) DatatypeTypeType) (UI.RangeEnd.EExclusive_q d@@47)) (exists ((|a#36#0#0| T@U) ) (!  (and (= (type |a#36#0#0|) (SeqType BoxType)) (= d@@47 (|#UI.RangeEnd.EExclusive| |a#36#0#0|))) :qid |UIsdfy.11:57| :skolemid |3591| :no-pattern (type |a#36#0#0|) :no-pattern (U_2_int |a#36#0#0|) :no-pattern (U_2_bool |a#36#0#0|) ))) :qid |unknown.0:0| :skolemid |3592| :pattern ( (UI.RangeEnd.EExclusive_q d@@47)) )))
(assert (forall ((|a#37#0#0| T@U) ) (!  (=> (= (type |a#37#0#0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd) ($Is |a#37#0#0| Tclass.KeyType.Key)) (=> ($Is |a#37#0#0| Tclass.KeyType.Key) ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd)))) :qid |UIsdfy.11:57| :skolemid |3593| :pattern ( ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#38#0#0| T@U) ($h@@74 T@U) ) (!  (=> (and (and (= (type |a#38#0#0|) (SeqType BoxType)) (= (type $h@@74) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@74)) (and (=> ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@74) ($IsAlloc |a#38#0#0| Tclass.KeyType.Key $h@@74)) (=> ($IsAlloc |a#38#0#0| Tclass.KeyType.Key $h@@74) ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@74)))) :qid |UIsdfy.11:57| :skolemid |3594| :pattern ( ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@74)) )))
(assert (forall ((d@@48 T@U) ($h@@75 T@U) ) (!  (=> (and (and (= (type d@@48) DatatypeTypeType) (= (type $h@@75) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@75) (and (UI.RangeEnd.EExclusive_q d@@48) ($IsAlloc d@@48 Tclass.UI.RangeEnd $h@@75)))) ($IsAlloc (UI.RangeEnd.key d@@48) Tclass.KeyType.Key $h@@75)) :qid |unknown.0:0| :skolemid |3595| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@48) Tclass.KeyType.Key $h@@75)) )))
(assert (forall ((|a#39#0#0| T@U) ) (!  (=> (= (type |a#39#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EExclusive| (Lit |a#39#0#0|)) (Lit (|#UI.RangeEnd.EExclusive| |a#39#0#0|)))) :qid |UIsdfy.11:57| :skolemid |3596| :pattern ( (|#UI.RangeEnd.EExclusive| (Lit |a#39#0#0|))) )))
(assert (forall ((|a#40#0#0| T@U) ) (!  (=> (= (type |a#40#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EExclusive| |a#40#0#0|)) |a#40#0#0|)) :qid |UIsdfy.11:57| :skolemid |3597| :pattern ( (|#UI.RangeEnd.EExclusive| |a#40#0#0|)) )))
(assert (= (type |#UI.RangeEnd.PositiveInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeEnd.PositiveInf|) |##UI.RangeEnd.PositiveInf|))
(assert (forall ((d@@49 T@U) ) (!  (=> (= (type d@@49) DatatypeTypeType) (and (=> (UI.RangeEnd.PositiveInf_q d@@49) (= (DatatypeCtorId d@@49) |##UI.RangeEnd.PositiveInf|)) (=> (= (DatatypeCtorId d@@49) |##UI.RangeEnd.PositiveInf|) (UI.RangeEnd.PositiveInf_q d@@49)))) :qid |unknown.0:0| :skolemid |3598| :pattern ( (UI.RangeEnd.PositiveInf_q d@@49)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (and (= (type d@@50) DatatypeTypeType) (UI.RangeEnd.PositiveInf_q d@@50)) (= d@@50 |#UI.RangeEnd.PositiveInf|)) :qid |unknown.0:0| :skolemid |3599| :pattern ( (UI.RangeEnd.PositiveInf_q d@@50)) )))
(assert ($Is |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd))
(assert (forall (($h@@76 T@U) ) (!  (=> (and (= (type $h@@76) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@76)) ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@76)) :qid |DafnyPre.521:12| :skolemid |3600| :pattern ( ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@76)) )))
(assert (= |#UI.RangeEnd.PositiveInf| (Lit |#UI.RangeEnd.PositiveInf|)))
(assert (forall ((d@@51 T@U) ) (!  (=> (and (= (type d@@51) DatatypeTypeType) (|$IsA#UI.RangeEnd| d@@51)) (or (or (UI.RangeEnd.EInclusive_q d@@51) (UI.RangeEnd.EExclusive_q d@@51)) (UI.RangeEnd.PositiveInf_q d@@51))) :qid |unknown.0:0| :skolemid |3601| :pattern ( (|$IsA#UI.RangeEnd| d@@51)) )))
(assert (forall ((d@@52 T@U) ) (!  (=> (and (= (type d@@52) DatatypeTypeType) ($Is d@@52 Tclass.UI.RangeEnd)) (or (or (UI.RangeEnd.EInclusive_q d@@52) (UI.RangeEnd.EExclusive_q d@@52)) (UI.RangeEnd.PositiveInf_q d@@52))) :qid |unknown.0:0| :skolemid |3602| :pattern ( (UI.RangeEnd.PositiveInf_q d@@52) ($Is d@@52 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EExclusive_q d@@52) ($Is d@@52 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EInclusive_q d@@52) ($Is d@@52 Tclass.UI.RangeEnd)) )))
(assert (forall ((a@@146 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@146) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (UI.RangeEnd.EInclusive_q a@@146) (UI.RangeEnd.EInclusive_q b@@77))) (and (=> (|UI.RangeEnd#Equal| a@@146 b@@77) (|Seq#Equal| (UI.RangeEnd.key a@@146) (UI.RangeEnd.key b@@77))) (=> (|Seq#Equal| (UI.RangeEnd.key a@@146) (UI.RangeEnd.key b@@77)) (|UI.RangeEnd#Equal| a@@146 b@@77)))) :qid |unknown.0:0| :skolemid |3603| :pattern ( (|UI.RangeEnd#Equal| a@@146 b@@77) (UI.RangeEnd.EInclusive_q a@@146)) :pattern ( (|UI.RangeEnd#Equal| a@@146 b@@77) (UI.RangeEnd.EInclusive_q b@@77)) )))
(assert (forall ((a@@147 T@U) (b@@78 T@U) ) (!  (=> (and (and (= (type a@@147) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (UI.RangeEnd.EExclusive_q a@@147) (UI.RangeEnd.EExclusive_q b@@78))) (and (=> (|UI.RangeEnd#Equal| a@@147 b@@78) (|Seq#Equal| (UI.RangeEnd.key a@@147) (UI.RangeEnd.key b@@78))) (=> (|Seq#Equal| (UI.RangeEnd.key a@@147) (UI.RangeEnd.key b@@78)) (|UI.RangeEnd#Equal| a@@147 b@@78)))) :qid |unknown.0:0| :skolemid |3604| :pattern ( (|UI.RangeEnd#Equal| a@@147 b@@78) (UI.RangeEnd.EExclusive_q a@@147)) :pattern ( (|UI.RangeEnd#Equal| a@@147 b@@78) (UI.RangeEnd.EExclusive_q b@@78)) )))
(assert (forall ((a@@148 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@148) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (UI.RangeEnd.PositiveInf_q a@@148) (UI.RangeEnd.PositiveInf_q b@@79))) (and (=> (|UI.RangeEnd#Equal| a@@148 b@@79) true) (=> true (|UI.RangeEnd#Equal| a@@148 b@@79)))) :qid |unknown.0:0| :skolemid |3605| :pattern ( (|UI.RangeEnd#Equal| a@@148 b@@79) (UI.RangeEnd.PositiveInf_q a@@148)) :pattern ( (|UI.RangeEnd#Equal| a@@148 b@@79) (UI.RangeEnd.PositiveInf_q b@@79)) )))
(assert (forall ((a@@149 T@U) (b@@80 T@U) ) (!  (=> (and (= (type a@@149) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (and (=> (|UI.RangeEnd#Equal| a@@149 b@@80) (= a@@149 b@@80)) (=> (= a@@149 b@@80) (|UI.RangeEnd#Equal| a@@149 b@@80)))) :qid |unknown.0:0| :skolemid |3606| :pattern ( (|UI.RangeEnd#Equal| a@@149 b@@80)) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) ) (!  (=> (and (= (type |a#46#0#0|) (SeqType BoxType)) (= (type |a#46#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.SuccResult.SuccResult| |a#46#0#0| |a#46#1#0|)) |##UI.SuccResult.SuccResult|)) :qid |UIsdfy.13:36| :skolemid |3607| :pattern ( (|#UI.SuccResult.SuccResult| |a#46#0#0| |a#46#1#0|)) )))
(assert (forall ((d@@53 T@U) ) (!  (=> (= (type d@@53) DatatypeTypeType) (and (=> (UI.SuccResult.SuccResult_q d@@53) (= (DatatypeCtorId d@@53) |##UI.SuccResult.SuccResult|)) (=> (= (DatatypeCtorId d@@53) |##UI.SuccResult.SuccResult|) (UI.SuccResult.SuccResult_q d@@53)))) :qid |unknown.0:0| :skolemid |3608| :pattern ( (UI.SuccResult.SuccResult_q d@@53)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (and (= (type d@@54) DatatypeTypeType) (UI.SuccResult.SuccResult_q d@@54)) (exists ((|a#47#0#0| T@U) (|a#47#1#0| T@U) ) (!  (and (and (= (type |a#47#0#0|) (SeqType BoxType)) (= (type |a#47#1#0|) (SeqType BoxType))) (= d@@54 (|#UI.SuccResult.SuccResult| |a#47#0#0| |a#47#1#0|))) :qid |UIsdfy.13:36| :skolemid |3609| :no-pattern (type |a#47#0#0|) :no-pattern (type |a#47#1#0|) :no-pattern (U_2_int |a#47#0#0|) :no-pattern (U_2_bool |a#47#0#0|) :no-pattern (U_2_int |a#47#1#0|) :no-pattern (U_2_bool |a#47#1#0|) ))) :qid |unknown.0:0| :skolemid |3610| :pattern ( (UI.SuccResult.SuccResult_q d@@54)) )))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (!  (=> (and (= (type |a#48#0#0|) (SeqType BoxType)) (= (type |a#48#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult) (and ($Is |a#48#0#0| Tclass.KeyType.Key) ($Is |a#48#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#48#0#0| Tclass.KeyType.Key) ($Is |a#48#1#0| Tclass.ValueType.Value)) ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult)))) :qid |UIsdfy.13:36| :skolemid |3611| :pattern ( ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ($h@@77 T@U) ) (!  (=> (and (and (and (= (type |a#49#0#0|) (SeqType BoxType)) (= (type |a#49#1#0|) (SeqType BoxType))) (= (type $h@@77) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@77)) (and (=> ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@77) (and ($IsAlloc |a#49#0#0| Tclass.KeyType.Key $h@@77) ($IsAlloc |a#49#1#0| Tclass.ValueType.Value $h@@77))) (=> (and ($IsAlloc |a#49#0#0| Tclass.KeyType.Key $h@@77) ($IsAlloc |a#49#1#0| Tclass.ValueType.Value $h@@77)) ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@77)))) :qid |UIsdfy.13:36| :skolemid |3612| :pattern ( ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@77)) )))
(assert (forall ((arg0@@496 T@U) ) (! (= (type (UI.SuccResult.key arg0@@496)) (SeqType BoxType)) :qid |funType:UI.SuccResult.key| :pattern ( (UI.SuccResult.key arg0@@496)) )))
(assert (forall ((d@@55 T@U) ($h@@78 T@U) ) (!  (=> (and (and (= (type d@@55) DatatypeTypeType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@78) (and (UI.SuccResult.SuccResult_q d@@55) ($IsAlloc d@@55 Tclass.UI.SuccResult $h@@78)))) ($IsAlloc (UI.SuccResult.key d@@55) Tclass.KeyType.Key $h@@78)) :qid |unknown.0:0| :skolemid |3613| :pattern ( ($IsAlloc (UI.SuccResult.key d@@55) Tclass.KeyType.Key $h@@78)) )))
(assert (forall ((arg0@@497 T@U) ) (! (= (type (UI.SuccResult.value arg0@@497)) (SeqType BoxType)) :qid |funType:UI.SuccResult.value| :pattern ( (UI.SuccResult.value arg0@@497)) )))
(assert (forall ((d@@56 T@U) ($h@@79 T@U) ) (!  (=> (and (and (= (type d@@56) DatatypeTypeType) (= (type $h@@79) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@79) (and (UI.SuccResult.SuccResult_q d@@56) ($IsAlloc d@@56 Tclass.UI.SuccResult $h@@79)))) ($IsAlloc (UI.SuccResult.value d@@56) Tclass.ValueType.Value $h@@79)) :qid |unknown.0:0| :skolemid |3614| :pattern ( ($IsAlloc (UI.SuccResult.value d@@56) Tclass.ValueType.Value $h@@79)) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (!  (=> (and (= (type |a#50#0#0|) (SeqType BoxType)) (= (type |a#50#1#0|) (SeqType BoxType))) (= (|#UI.SuccResult.SuccResult| (Lit |a#50#0#0|) (Lit |a#50#1#0|)) (Lit (|#UI.SuccResult.SuccResult| |a#50#0#0| |a#50#1#0|)))) :qid |UIsdfy.13:36| :skolemid |3615| :pattern ( (|#UI.SuccResult.SuccResult| (Lit |a#50#0#0|) (Lit |a#50#1#0|))) )))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) ) (!  (=> (and (= (type |a#51#0#0|) (SeqType BoxType)) (= (type |a#51#1#0|) (SeqType BoxType))) (= (UI.SuccResult.key (|#UI.SuccResult.SuccResult| |a#51#0#0| |a#51#1#0|)) |a#51#0#0|)) :qid |UIsdfy.13:36| :skolemid |3616| :pattern ( (|#UI.SuccResult.SuccResult| |a#51#0#0| |a#51#1#0|)) )))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) ) (!  (=> (and (= (type |a#52#0#0|) (SeqType BoxType)) (= (type |a#52#1#0|) (SeqType BoxType))) (= (UI.SuccResult.value (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) |a#52#1#0|)) :qid |UIsdfy.13:36| :skolemid |3617| :pattern ( (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (and (= (type d@@57) DatatypeTypeType) (|$IsA#UI.SuccResult| d@@57)) (UI.SuccResult.SuccResult_q d@@57)) :qid |unknown.0:0| :skolemid |3618| :pattern ( (|$IsA#UI.SuccResult| d@@57)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (and (= (type d@@58) DatatypeTypeType) ($Is d@@58 Tclass.UI.SuccResult)) (UI.SuccResult.SuccResult_q d@@58)) :qid |unknown.0:0| :skolemid |3619| :pattern ( (UI.SuccResult.SuccResult_q d@@58) ($Is d@@58 Tclass.UI.SuccResult)) )))
(assert (forall ((a@@150 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@150) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) true) (and (=> (|UI.SuccResult#Equal| a@@150 b@@81) (and (|Seq#Equal| (UI.SuccResult.key a@@150) (UI.SuccResult.key b@@81)) (|Seq#Equal| (UI.SuccResult.value a@@150) (UI.SuccResult.value b@@81)))) (=> (and (|Seq#Equal| (UI.SuccResult.key a@@150) (UI.SuccResult.key b@@81)) (|Seq#Equal| (UI.SuccResult.value a@@150) (UI.SuccResult.value b@@81))) (|UI.SuccResult#Equal| a@@150 b@@81)))) :qid |unknown.0:0| :skolemid |3620| :pattern ( (|UI.SuccResult#Equal| a@@150 b@@81)) )))
(assert (forall ((a@@151 T@U) (b@@82 T@U) ) (!  (=> (and (= (type a@@151) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (=> (|UI.SuccResult#Equal| a@@151 b@@82) (= a@@151 b@@82)) (=> (= a@@151 b@@82) (|UI.SuccResult#Equal| a@@151 b@@82)))) :qid |unknown.0:0| :skolemid |3621| :pattern ( (|UI.SuccResult#Equal| a@@151 b@@82)) )))
(assert (forall ((arg0@@498 T@U) (arg1@@294 T@U) ) (! (= (type (|#UI.SuccResultList.SuccResultList| arg0@@498 arg1@@294)) DatatypeTypeType) :qid |funType:#UI.SuccResultList.SuccResultList| :pattern ( (|#UI.SuccResultList.SuccResultList| arg0@@498 arg1@@294)) )))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) ) (!  (=> (and (= (type |a#53#0#0|) (SeqType BoxType)) (= (type |a#53#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.SuccResultList.SuccResultList| |a#53#0#0| |a#53#1#0|)) |##UI.SuccResultList.SuccResultList|)) :qid |UIsdfy.14:44| :skolemid |3622| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#53#0#0| |a#53#1#0|)) )))
(assert (forall ((d@@59 T@U) ) (!  (=> (= (type d@@59) DatatypeTypeType) (and (=> (UI.SuccResultList.SuccResultList_q d@@59) (= (DatatypeCtorId d@@59) |##UI.SuccResultList.SuccResultList|)) (=> (= (DatatypeCtorId d@@59) |##UI.SuccResultList.SuccResultList|) (UI.SuccResultList.SuccResultList_q d@@59)))) :qid |unknown.0:0| :skolemid |3623| :pattern ( (UI.SuccResultList.SuccResultList_q d@@59)) )))
(assert (forall ((d@@60 T@U) ) (!  (=> (and (= (type d@@60) DatatypeTypeType) (UI.SuccResultList.SuccResultList_q d@@60)) (exists ((|a#54#0#0| T@U) (|a#54#1#0| T@U) ) (!  (and (and (= (type |a#54#0#0|) (SeqType BoxType)) (= (type |a#54#1#0|) DatatypeTypeType)) (= d@@60 (|#UI.SuccResultList.SuccResultList| |a#54#0#0| |a#54#1#0|))) :qid |UIsdfy.14:44| :skolemid |3624| :no-pattern (type |a#54#0#0|) :no-pattern (type |a#54#1#0|) :no-pattern (U_2_int |a#54#0#0|) :no-pattern (U_2_bool |a#54#0#0|) :no-pattern (U_2_int |a#54#1#0|) :no-pattern (U_2_bool |a#54#1#0|) ))) :qid |unknown.0:0| :skolemid |3625| :pattern ( (UI.SuccResultList.SuccResultList_q d@@60)) )))
(assert (= (type Tclass.UI.SuccResultList) TyType))
(assert (= (Tag Tclass.UI.SuccResultList) Tagclass.UI.SuccResultList))
(assert (forall ((bx@@145 T@U) ) (!  (=> (and (= (type bx@@145) BoxType) ($IsBox bx@@145 Tclass.UI.SuccResultList)) (and (= ($Box ($Unbox DatatypeTypeType bx@@145)) bx@@145) ($Is ($Unbox DatatypeTypeType bx@@145) Tclass.UI.SuccResultList))) :qid |unknown.0:0| :skolemid |3626| :pattern ( ($IsBox bx@@145 Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#55#0#0| T@U) (|a#55#1#0| T@U) ) (!  (=> (and (= (type |a#55#0#0|) (SeqType BoxType)) (= (type |a#55#1#0|) DatatypeTypeType)) (and (=> ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList) (and ($Is |a#55#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#55#1#0| Tclass.UI.RangeEnd))) (=> (and ($Is |a#55#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#55#1#0| Tclass.UI.RangeEnd)) ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList)))) :qid |UIsdfy.14:44| :skolemid |3627| :pattern ( ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#56#0#0| T@U) (|a#56#1#0| T@U) ($h@@80 T@U) ) (!  (=> (and (and (and (= (type |a#56#0#0|) (SeqType BoxType)) (= (type |a#56#1#0|) DatatypeTypeType)) (= (type $h@@80) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@80)) (and (=> ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@80) (and ($IsAlloc |a#56#0#0| (TSeq Tclass.UI.SuccResult) $h@@80) ($IsAlloc |a#56#1#0| Tclass.UI.RangeEnd $h@@80))) (=> (and ($IsAlloc |a#56#0#0| (TSeq Tclass.UI.SuccResult) $h@@80) ($IsAlloc |a#56#1#0| Tclass.UI.RangeEnd $h@@80)) ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@80)))) :qid |UIsdfy.14:44| :skolemid |3628| :pattern ( ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@80)) )))
(assert (forall ((arg0@@499 T@U) ) (! (= (type (UI.SuccResultList.results arg0@@499)) (SeqType BoxType)) :qid |funType:UI.SuccResultList.results| :pattern ( (UI.SuccResultList.results arg0@@499)) )))
(assert (forall ((d@@61 T@U) ($h@@81 T@U) ) (!  (=> (and (and (= (type d@@61) DatatypeTypeType) (= (type $h@@81) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@81) (and (UI.SuccResultList.SuccResultList_q d@@61) ($IsAlloc d@@61 Tclass.UI.SuccResultList $h@@81)))) ($IsAlloc (UI.SuccResultList.results d@@61) (TSeq Tclass.UI.SuccResult) $h@@81)) :qid |unknown.0:0| :skolemid |3629| :pattern ( ($IsAlloc (UI.SuccResultList.results d@@61) (TSeq Tclass.UI.SuccResult) $h@@81)) )))
(assert (forall ((arg0@@500 T@U) ) (! (= (type (UI.SuccResultList.end arg0@@500)) DatatypeTypeType) :qid |funType:UI.SuccResultList.end| :pattern ( (UI.SuccResultList.end arg0@@500)) )))
(assert (forall ((d@@62 T@U) ($h@@82 T@U) ) (!  (=> (and (and (= (type d@@62) DatatypeTypeType) (= (type $h@@82) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@82) (and (UI.SuccResultList.SuccResultList_q d@@62) ($IsAlloc d@@62 Tclass.UI.SuccResultList $h@@82)))) ($IsAlloc (UI.SuccResultList.end d@@62) Tclass.UI.RangeEnd $h@@82)) :qid |unknown.0:0| :skolemid |3630| :pattern ( ($IsAlloc (UI.SuccResultList.end d@@62) Tclass.UI.RangeEnd $h@@82)) )))
(assert (forall ((|a#57#0#0| T@U) (|a#57#1#0| T@U) ) (!  (=> (and (= (type |a#57#0#0|) (SeqType BoxType)) (= (type |a#57#1#0|) DatatypeTypeType)) (= (|#UI.SuccResultList.SuccResultList| (Lit |a#57#0#0|) (Lit |a#57#1#0|)) (Lit (|#UI.SuccResultList.SuccResultList| |a#57#0#0| |a#57#1#0|)))) :qid |UIsdfy.14:44| :skolemid |3631| :pattern ( (|#UI.SuccResultList.SuccResultList| (Lit |a#57#0#0|) (Lit |a#57#1#0|))) )))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) ) (!  (=> (and (= (type |a#58#0#0|) (SeqType BoxType)) (= (type |a#58#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.results (|#UI.SuccResultList.SuccResultList| |a#58#0#0| |a#58#1#0|)) |a#58#0#0|)) :qid |UIsdfy.14:44| :skolemid |3632| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#58#0#0| |a#58#1#0|)) )))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) (i@@33 Int) ) (!  (=> (and (and (= (type |a#59#0#0|) (SeqType BoxType)) (= (type |a#59#1#0|) DatatypeTypeType)) (and (<= 0 i@@33) (< i@@33 (|Seq#Length| |a#59#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#59#0#0| i@@33))) (DtRank (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)))) :qid |UIsdfy.14:44| :skolemid |3633| :pattern ( (|Seq#Index| |a#59#0#0| i@@33) (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)) )))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) ) (!  (=> (and (= (type |a#60#0#0|) (SeqType BoxType)) (= (type |a#60#1#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#60#0#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)))) :qid |UIsdfy.14:44| :skolemid |3634| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)) )))
(assert (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) ) (!  (=> (and (= (type |a#61#0#0|) (SeqType BoxType)) (= (type |a#61#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.end (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)) |a#61#1#0|)) :qid |UIsdfy.14:44| :skolemid |3635| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)) )))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) ) (!  (=> (and (= (type |a#62#0#0|) (SeqType BoxType)) (= (type |a#62#1#0|) DatatypeTypeType)) (< (DtRank |a#62#1#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)))) :qid |UIsdfy.14:44| :skolemid |3636| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)) )))
(assert (forall ((d@@63 T@U) ) (!  (=> (and (= (type d@@63) DatatypeTypeType) (|$IsA#UI.SuccResultList| d@@63)) (UI.SuccResultList.SuccResultList_q d@@63)) :qid |unknown.0:0| :skolemid |3637| :pattern ( (|$IsA#UI.SuccResultList| d@@63)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (and (= (type d@@64) DatatypeTypeType) ($Is d@@64 Tclass.UI.SuccResultList)) (UI.SuccResultList.SuccResultList_q d@@64)) :qid |unknown.0:0| :skolemid |3638| :pattern ( (UI.SuccResultList.SuccResultList_q d@@64) ($Is d@@64 Tclass.UI.SuccResultList)) )))
(assert (forall ((a@@152 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@152) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) true) (and (=> (|UI.SuccResultList#Equal| a@@152 b@@83) (and (|Seq#Equal| (UI.SuccResultList.results a@@152) (UI.SuccResultList.results b@@83)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@152) (UI.SuccResultList.end b@@83)))) (=> (and (|Seq#Equal| (UI.SuccResultList.results a@@152) (UI.SuccResultList.results b@@83)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@152) (UI.SuccResultList.end b@@83))) (|UI.SuccResultList#Equal| a@@152 b@@83)))) :qid |unknown.0:0| :skolemid |3639| :pattern ( (|UI.SuccResultList#Equal| a@@152 b@@83)) )))
(assert (forall ((a@@153 T@U) (b@@84 T@U) ) (!  (=> (and (= (type a@@153) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (and (=> (|UI.SuccResultList#Equal| a@@153 b@@84) (= a@@153 b@@84)) (=> (= a@@153 b@@84) (|UI.SuccResultList#Equal| a@@153 b@@84)))) :qid |unknown.0:0| :skolemid |3640| :pattern ( (|UI.SuccResultList#Equal| a@@153 b@@84)) )))
(assert (= (type |#UI.Op.NoOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.NoOp|) |##UI.Op.NoOp|))
(assert (forall ((d@@65 T@U) ) (!  (=> (= (type d@@65) DatatypeTypeType) (and (=> (UI.Op.NoOp_q d@@65) (= (DatatypeCtorId d@@65) |##UI.Op.NoOp|)) (=> (= (DatatypeCtorId d@@65) |##UI.Op.NoOp|) (UI.Op.NoOp_q d@@65)))) :qid |unknown.0:0| :skolemid |3641| :pattern ( (UI.Op.NoOp_q d@@65)) )))
(assert (forall ((d@@66 T@U) ) (!  (=> (and (= (type d@@66) DatatypeTypeType) (UI.Op.NoOp_q d@@66)) (= d@@66 |#UI.Op.NoOp|)) :qid |unknown.0:0| :skolemid |3642| :pattern ( (UI.Op.NoOp_q d@@66)) )))
(assert (= (type Tclass.UI.Op) TyType))
(assert (= (Tag Tclass.UI.Op) Tagclass.UI.Op))
(assert (forall ((bx@@146 T@U) ) (!  (=> (and (= (type bx@@146) BoxType) ($IsBox bx@@146 Tclass.UI.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@146)) bx@@146) ($Is ($Unbox DatatypeTypeType bx@@146) Tclass.UI.Op))) :qid |unknown.0:0| :skolemid |3643| :pattern ( ($IsBox bx@@146 Tclass.UI.Op)) )))
(assert ($Is |#UI.Op.NoOp| Tclass.UI.Op))
(assert (forall (($h@@83 T@U) ) (!  (=> (and (= (type $h@@83) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@83)) ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@83)) :qid |DafnyPre.521:12| :skolemid |3644| :pattern ( ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@83)) )))
(assert (= |#UI.Op.NoOp| (Lit |#UI.Op.NoOp|)))
(assert (= (type |#UI.Op.SyncOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.SyncOp|) |##UI.Op.SyncOp|))
(assert (forall ((d@@67 T@U) ) (!  (=> (= (type d@@67) DatatypeTypeType) (and (=> (UI.Op.SyncOp_q d@@67) (= (DatatypeCtorId d@@67) |##UI.Op.SyncOp|)) (=> (= (DatatypeCtorId d@@67) |##UI.Op.SyncOp|) (UI.Op.SyncOp_q d@@67)))) :qid |unknown.0:0| :skolemid |3645| :pattern ( (UI.Op.SyncOp_q d@@67)) )))
(assert (forall ((d@@68 T@U) ) (!  (=> (and (= (type d@@68) DatatypeTypeType) (UI.Op.SyncOp_q d@@68)) (= d@@68 |#UI.Op.SyncOp|)) :qid |unknown.0:0| :skolemid |3646| :pattern ( (UI.Op.SyncOp_q d@@68)) )))
(assert ($Is |#UI.Op.SyncOp| Tclass.UI.Op))
(assert (forall (($h@@84 T@U) ) (!  (=> (and (= (type $h@@84) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@84)) ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@84)) :qid |DafnyPre.521:12| :skolemid |3647| :pattern ( ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@84)) )))
(assert (= |#UI.Op.SyncOp| (Lit |#UI.Op.SyncOp|)))
(assert (= (type |#UI.Op.CrashOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.CrashOp|) |##UI.Op.CrashOp|))
(assert (forall ((d@@69 T@U) ) (!  (=> (= (type d@@69) DatatypeTypeType) (and (=> (UI.Op.CrashOp_q d@@69) (= (DatatypeCtorId d@@69) |##UI.Op.CrashOp|)) (=> (= (DatatypeCtorId d@@69) |##UI.Op.CrashOp|) (UI.Op.CrashOp_q d@@69)))) :qid |unknown.0:0| :skolemid |3648| :pattern ( (UI.Op.CrashOp_q d@@69)) )))
(assert (forall ((d@@70 T@U) ) (!  (=> (and (= (type d@@70) DatatypeTypeType) (UI.Op.CrashOp_q d@@70)) (= d@@70 |#UI.Op.CrashOp|)) :qid |unknown.0:0| :skolemid |3649| :pattern ( (UI.Op.CrashOp_q d@@70)) )))
(assert ($Is |#UI.Op.CrashOp| Tclass.UI.Op))
(assert (forall (($h@@85 T@U) ) (!  (=> (and (= (type $h@@85) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@85)) ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@85)) :qid |DafnyPre.521:12| :skolemid |3650| :pattern ( ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@85)) )))
(assert (= |#UI.Op.CrashOp| (Lit |#UI.Op.CrashOp|)))
(assert (forall ((arg0@@501 Int) ) (! (= (type (|#UI.Op.PushSyncOp| arg0@@501)) DatatypeTypeType) :qid |funType:#UI.Op.PushSyncOp| :pattern ( (|#UI.Op.PushSyncOp| arg0@@501)) )))
(assert (forall ((|a#78#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PushSyncOp| |a#78#0#0|)) |##UI.Op.PushSyncOp|) :qid |UIsdfy.20:24| :skolemid |3651| :pattern ( (|#UI.Op.PushSyncOp| |a#78#0#0|)) )))
(assert (forall ((d@@71 T@U) ) (!  (=> (= (type d@@71) DatatypeTypeType) (and (=> (UI.Op.PushSyncOp_q d@@71) (= (DatatypeCtorId d@@71) |##UI.Op.PushSyncOp|)) (=> (= (DatatypeCtorId d@@71) |##UI.Op.PushSyncOp|) (UI.Op.PushSyncOp_q d@@71)))) :qid |unknown.0:0| :skolemid |3652| :pattern ( (UI.Op.PushSyncOp_q d@@71)) )))
(assert (forall ((d@@72 T@U) ) (!  (=> (and (= (type d@@72) DatatypeTypeType) (UI.Op.PushSyncOp_q d@@72)) (exists ((|a#79#0#0| Int) ) (! (= d@@72 (|#UI.Op.PushSyncOp| |a#79#0#0|)) :qid |UIsdfy.20:24| :skolemid |3653| ))) :qid |unknown.0:0| :skolemid |3654| :pattern ( (UI.Op.PushSyncOp_q d@@72)) )))
(assert (forall ((|a#80#0#0| Int) ) (!  (and (=> ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#80#0#0|) TInt)) (=> ($Is (int_2_U |a#80#0#0|) TInt) ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op))) :qid |UIsdfy.20:24| :skolemid |3655| :pattern ( ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#81#0#0| Int) ($h@@86 T@U) ) (!  (=> (and (= (type $h@@86) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@86)) (and (=> ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@86) ($IsAlloc (int_2_U |a#81#0#0|) TInt $h@@86)) (=> ($IsAlloc (int_2_U |a#81#0#0|) TInt $h@@86) ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@86)))) :qid |UIsdfy.20:24| :skolemid |3656| :pattern ( ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@86)) )))
(assert (forall ((d@@73 T@U) ($h@@87 T@U) ) (!  (=> (and (and (= (type d@@73) DatatypeTypeType) (= (type $h@@87) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@87) (and (UI.Op.PushSyncOp_q d@@73) ($IsAlloc d@@73 Tclass.UI.Op $h@@87)))) ($IsAlloc (int_2_U (UI.Op.id d@@73)) TInt $h@@87)) :qid |unknown.0:0| :skolemid |3657| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@73)) TInt $h@@87)) )))
(assert (forall ((|a#82#0#0| Int) ) (! (= (|#UI.Op.PushSyncOp| (LitInt |a#82#0#0|)) (Lit (|#UI.Op.PushSyncOp| |a#82#0#0|))) :qid |UIsdfy.20:24| :skolemid |3658| :pattern ( (|#UI.Op.PushSyncOp| (LitInt |a#82#0#0|))) )))
(assert (forall ((|a#83#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PushSyncOp| |a#83#0#0|)) |a#83#0#0|) :qid |UIsdfy.20:24| :skolemid |3659| :pattern ( (|#UI.Op.PushSyncOp| |a#83#0#0|)) )))
(assert (forall ((arg0@@502 Int) ) (! (= (type (|#UI.Op.PopSyncOp| arg0@@502)) DatatypeTypeType) :qid |funType:#UI.Op.PopSyncOp| :pattern ( (|#UI.Op.PopSyncOp| arg0@@502)) )))
(assert (forall ((|a#84#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PopSyncOp| |a#84#0#0|)) |##UI.Op.PopSyncOp|) :qid |UIsdfy.21:23| :skolemid |3660| :pattern ( (|#UI.Op.PopSyncOp| |a#84#0#0|)) )))
(assert (forall ((d@@74 T@U) ) (!  (=> (= (type d@@74) DatatypeTypeType) (and (=> (UI.Op.PopSyncOp_q d@@74) (= (DatatypeCtorId d@@74) |##UI.Op.PopSyncOp|)) (=> (= (DatatypeCtorId d@@74) |##UI.Op.PopSyncOp|) (UI.Op.PopSyncOp_q d@@74)))) :qid |unknown.0:0| :skolemid |3661| :pattern ( (UI.Op.PopSyncOp_q d@@74)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (and (= (type d@@75) DatatypeTypeType) (UI.Op.PopSyncOp_q d@@75)) (exists ((|a#85#0#0| Int) ) (! (= d@@75 (|#UI.Op.PopSyncOp| |a#85#0#0|)) :qid |UIsdfy.21:23| :skolemid |3662| ))) :qid |unknown.0:0| :skolemid |3663| :pattern ( (UI.Op.PopSyncOp_q d@@75)) )))
(assert (forall ((|a#86#0#0| Int) ) (!  (and (=> ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#86#0#0|) TInt)) (=> ($Is (int_2_U |a#86#0#0|) TInt) ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op))) :qid |UIsdfy.21:23| :skolemid |3664| :pattern ( ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#87#0#0| Int) ($h@@88 T@U) ) (!  (=> (and (= (type $h@@88) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@88)) (and (=> ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@88) ($IsAlloc (int_2_U |a#87#0#0|) TInt $h@@88)) (=> ($IsAlloc (int_2_U |a#87#0#0|) TInt $h@@88) ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@88)))) :qid |UIsdfy.21:23| :skolemid |3665| :pattern ( ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@88)) )))
(assert (forall ((d@@76 T@U) ($h@@89 T@U) ) (!  (=> (and (and (= (type d@@76) DatatypeTypeType) (= (type $h@@89) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@89) (and (UI.Op.PopSyncOp_q d@@76) ($IsAlloc d@@76 Tclass.UI.Op $h@@89)))) ($IsAlloc (int_2_U (UI.Op.id d@@76)) TInt $h@@89)) :qid |unknown.0:0| :skolemid |3666| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@76)) TInt $h@@89)) )))
(assert (forall ((|a#88#0#0| Int) ) (! (= (|#UI.Op.PopSyncOp| (LitInt |a#88#0#0|)) (Lit (|#UI.Op.PopSyncOp| |a#88#0#0|))) :qid |UIsdfy.21:23| :skolemid |3667| :pattern ( (|#UI.Op.PopSyncOp| (LitInt |a#88#0#0|))) )))
(assert (forall ((|a#89#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PopSyncOp| |a#89#0#0|)) |a#89#0#0|) :qid |UIsdfy.21:23| :skolemid |3668| :pattern ( (|#UI.Op.PopSyncOp| |a#89#0#0|)) )))
(assert (forall ((arg0@@503 T@U) (arg1@@295 T@U) ) (! (= (type (|#UI.Op.GetOp| arg0@@503 arg1@@295)) DatatypeTypeType) :qid |funType:#UI.Op.GetOp| :pattern ( (|#UI.Op.GetOp| arg0@@503 arg1@@295)) )))
(assert (forall ((|a#90#0#0| T@U) (|a#90#1#0| T@U) ) (!  (=> (and (= (type |a#90#0#0|) (SeqType BoxType)) (= (type |a#90#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.GetOp| |a#90#0#0| |a#90#1#0|)) |##UI.Op.GetOp|)) :qid |UIsdfy.24:13| :skolemid |3669| :pattern ( (|#UI.Op.GetOp| |a#90#0#0| |a#90#1#0|)) )))
(assert (forall ((d@@77 T@U) ) (!  (=> (= (type d@@77) DatatypeTypeType) (and (=> (UI.Op.GetOp_q d@@77) (= (DatatypeCtorId d@@77) |##UI.Op.GetOp|)) (=> (= (DatatypeCtorId d@@77) |##UI.Op.GetOp|) (UI.Op.GetOp_q d@@77)))) :qid |unknown.0:0| :skolemid |3670| :pattern ( (UI.Op.GetOp_q d@@77)) )))
(assert (forall ((d@@78 T@U) ) (!  (=> (and (= (type d@@78) DatatypeTypeType) (UI.Op.GetOp_q d@@78)) (exists ((|a#91#0#0| T@U) (|a#91#1#0| T@U) ) (!  (and (and (= (type |a#91#0#0|) (SeqType BoxType)) (= (type |a#91#1#0|) (SeqType BoxType))) (= d@@78 (|#UI.Op.GetOp| |a#91#0#0| |a#91#1#0|))) :qid |UIsdfy.24:13| :skolemid |3671| :no-pattern (type |a#91#0#0|) :no-pattern (type |a#91#1#0|) :no-pattern (U_2_int |a#91#0#0|) :no-pattern (U_2_bool |a#91#0#0|) :no-pattern (U_2_int |a#91#1#0|) :no-pattern (U_2_bool |a#91#1#0|) ))) :qid |unknown.0:0| :skolemid |3672| :pattern ( (UI.Op.GetOp_q d@@78)) )))
(assert (forall ((|a#92#0#0| T@U) (|a#92#1#0| T@U) ) (!  (=> (and (= (type |a#92#0#0|) (SeqType BoxType)) (= (type |a#92#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op) (and ($Is |a#92#0#0| Tclass.KeyType.Key) ($Is |a#92#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#92#0#0| Tclass.KeyType.Key) ($Is |a#92#1#0| Tclass.ValueType.Value)) ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op)))) :qid |UIsdfy.24:13| :skolemid |3673| :pattern ( ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#93#0#0| T@U) (|a#93#1#0| T@U) ($h@@90 T@U) ) (!  (=> (and (and (and (= (type |a#93#0#0|) (SeqType BoxType)) (= (type |a#93#1#0|) (SeqType BoxType))) (= (type $h@@90) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@90)) (and (=> ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@90) (and ($IsAlloc |a#93#0#0| Tclass.KeyType.Key $h@@90) ($IsAlloc |a#93#1#0| Tclass.ValueType.Value $h@@90))) (=> (and ($IsAlloc |a#93#0#0| Tclass.KeyType.Key $h@@90) ($IsAlloc |a#93#1#0| Tclass.ValueType.Value $h@@90)) ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@90)))) :qid |UIsdfy.24:13| :skolemid |3674| :pattern ( ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@90)) )))
(assert (forall ((arg0@@504 T@U) ) (! (= (type (UI.Op.key arg0@@504)) (SeqType BoxType)) :qid |funType:UI.Op.key| :pattern ( (UI.Op.key arg0@@504)) )))
(assert (forall ((d@@79 T@U) ($h@@91 T@U) ) (!  (=> (and (and (= (type d@@79) DatatypeTypeType) (= (type $h@@91) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@91) (and (UI.Op.GetOp_q d@@79) ($IsAlloc d@@79 Tclass.UI.Op $h@@91)))) ($IsAlloc (UI.Op.key d@@79) Tclass.KeyType.Key $h@@91)) :qid |unknown.0:0| :skolemid |3675| :pattern ( ($IsAlloc (UI.Op.key d@@79) Tclass.KeyType.Key $h@@91)) )))
(assert (forall ((arg0@@505 T@U) ) (! (= (type (UI.Op.value arg0@@505)) (SeqType BoxType)) :qid |funType:UI.Op.value| :pattern ( (UI.Op.value arg0@@505)) )))
(assert (forall ((d@@80 T@U) ($h@@92 T@U) ) (!  (=> (and (and (= (type d@@80) DatatypeTypeType) (= (type $h@@92) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@92) (and (UI.Op.GetOp_q d@@80) ($IsAlloc d@@80 Tclass.UI.Op $h@@92)))) ($IsAlloc (UI.Op.value d@@80) Tclass.ValueType.Value $h@@92)) :qid |unknown.0:0| :skolemid |3676| :pattern ( ($IsAlloc (UI.Op.value d@@80) Tclass.ValueType.Value $h@@92)) )))
(assert (forall ((|a#94#0#0| T@U) (|a#94#1#0| T@U) ) (!  (=> (and (= (type |a#94#0#0|) (SeqType BoxType)) (= (type |a#94#1#0|) (SeqType BoxType))) (= (|#UI.Op.GetOp| (Lit |a#94#0#0|) (Lit |a#94#1#0|)) (Lit (|#UI.Op.GetOp| |a#94#0#0| |a#94#1#0|)))) :qid |UIsdfy.24:13| :skolemid |3677| :pattern ( (|#UI.Op.GetOp| (Lit |a#94#0#0|) (Lit |a#94#1#0|))) )))
(assert (forall ((|a#95#0#0| T@U) (|a#95#1#0| T@U) ) (!  (=> (and (= (type |a#95#0#0|) (SeqType BoxType)) (= (type |a#95#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.GetOp| |a#95#0#0| |a#95#1#0|)) |a#95#0#0|)) :qid |UIsdfy.24:13| :skolemid |3678| :pattern ( (|#UI.Op.GetOp| |a#95#0#0| |a#95#1#0|)) )))
(assert (forall ((|a#96#0#0| T@U) (|a#96#1#0| T@U) ) (!  (=> (and (= (type |a#96#0#0|) (SeqType BoxType)) (= (type |a#96#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) |a#96#1#0|)) :qid |UIsdfy.24:13| :skolemid |3679| :pattern ( (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) )))
(assert (forall ((arg0@@506 T@U) (arg1@@296 T@U) ) (! (= (type (|#UI.Op.PutOp| arg0@@506 arg1@@296)) DatatypeTypeType) :qid |funType:#UI.Op.PutOp| :pattern ( (|#UI.Op.PutOp| arg0@@506 arg1@@296)) )))
(assert (forall ((|a#97#0#0| T@U) (|a#97#1#0| T@U) ) (!  (=> (and (= (type |a#97#0#0|) (SeqType BoxType)) (= (type |a#97#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.PutOp| |a#97#0#0| |a#97#1#0|)) |##UI.Op.PutOp|)) :qid |UIsdfy.25:13| :skolemid |3680| :pattern ( (|#UI.Op.PutOp| |a#97#0#0| |a#97#1#0|)) )))
(assert (forall ((d@@81 T@U) ) (!  (=> (= (type d@@81) DatatypeTypeType) (and (=> (UI.Op.PutOp_q d@@81) (= (DatatypeCtorId d@@81) |##UI.Op.PutOp|)) (=> (= (DatatypeCtorId d@@81) |##UI.Op.PutOp|) (UI.Op.PutOp_q d@@81)))) :qid |unknown.0:0| :skolemid |3681| :pattern ( (UI.Op.PutOp_q d@@81)) )))
(assert (forall ((d@@82 T@U) ) (!  (=> (and (= (type d@@82) DatatypeTypeType) (UI.Op.PutOp_q d@@82)) (exists ((|a#98#0#0| T@U) (|a#98#1#0| T@U) ) (!  (and (and (= (type |a#98#0#0|) (SeqType BoxType)) (= (type |a#98#1#0|) (SeqType BoxType))) (= d@@82 (|#UI.Op.PutOp| |a#98#0#0| |a#98#1#0|))) :qid |UIsdfy.25:13| :skolemid |3682| :no-pattern (type |a#98#0#0|) :no-pattern (type |a#98#1#0|) :no-pattern (U_2_int |a#98#0#0|) :no-pattern (U_2_bool |a#98#0#0|) :no-pattern (U_2_int |a#98#1#0|) :no-pattern (U_2_bool |a#98#1#0|) ))) :qid |unknown.0:0| :skolemid |3683| :pattern ( (UI.Op.PutOp_q d@@82)) )))
(assert (forall ((|a#99#0#0| T@U) (|a#99#1#0| T@U) ) (!  (=> (and (= (type |a#99#0#0|) (SeqType BoxType)) (= (type |a#99#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.Op.PutOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op) (and ($Is |a#99#0#0| Tclass.KeyType.Key) ($Is |a#99#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#99#0#0| Tclass.KeyType.Key) ($Is |a#99#1#0| Tclass.ValueType.Value)) ($Is (|#UI.Op.PutOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op)))) :qid |UIsdfy.25:13| :skolemid |3684| :pattern ( ($Is (|#UI.Op.PutOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#100#0#0| T@U) (|a#100#1#0| T@U) ($h@@93 T@U) ) (!  (=> (and (and (and (= (type |a#100#0#0|) (SeqType BoxType)) (= (type |a#100#1#0|) (SeqType BoxType))) (= (type $h@@93) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@93)) (and (=> ($IsAlloc (|#UI.Op.PutOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@93) (and ($IsAlloc |a#100#0#0| Tclass.KeyType.Key $h@@93) ($IsAlloc |a#100#1#0| Tclass.ValueType.Value $h@@93))) (=> (and ($IsAlloc |a#100#0#0| Tclass.KeyType.Key $h@@93) ($IsAlloc |a#100#1#0| Tclass.ValueType.Value $h@@93)) ($IsAlloc (|#UI.Op.PutOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@93)))) :qid |UIsdfy.25:13| :skolemid |3685| :pattern ( ($IsAlloc (|#UI.Op.PutOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@93)) )))
(assert (forall ((d@@83 T@U) ($h@@94 T@U) ) (!  (=> (and (and (= (type d@@83) DatatypeTypeType) (= (type $h@@94) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@94) (and (UI.Op.PutOp_q d@@83) ($IsAlloc d@@83 Tclass.UI.Op $h@@94)))) ($IsAlloc (UI.Op.key d@@83) Tclass.KeyType.Key $h@@94)) :qid |unknown.0:0| :skolemid |3686| :pattern ( ($IsAlloc (UI.Op.key d@@83) Tclass.KeyType.Key $h@@94)) )))
(assert (forall ((d@@84 T@U) ($h@@95 T@U) ) (!  (=> (and (and (= (type d@@84) DatatypeTypeType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@95) (and (UI.Op.PutOp_q d@@84) ($IsAlloc d@@84 Tclass.UI.Op $h@@95)))) ($IsAlloc (UI.Op.value d@@84) Tclass.ValueType.Value $h@@95)) :qid |unknown.0:0| :skolemid |3687| :pattern ( ($IsAlloc (UI.Op.value d@@84) Tclass.ValueType.Value $h@@95)) )))
(assert (forall ((|a#101#0#0| T@U) (|a#101#1#0| T@U) ) (!  (=> (and (= (type |a#101#0#0|) (SeqType BoxType)) (= (type |a#101#1#0|) (SeqType BoxType))) (= (|#UI.Op.PutOp| (Lit |a#101#0#0|) (Lit |a#101#1#0|)) (Lit (|#UI.Op.PutOp| |a#101#0#0| |a#101#1#0|)))) :qid |UIsdfy.25:13| :skolemid |3688| :pattern ( (|#UI.Op.PutOp| (Lit |a#101#0#0|) (Lit |a#101#1#0|))) )))
(assert (forall ((|a#102#0#0| T@U) (|a#102#1#0| T@U) ) (!  (=> (and (= (type |a#102#0#0|) (SeqType BoxType)) (= (type |a#102#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.PutOp| |a#102#0#0| |a#102#1#0|)) |a#102#0#0|)) :qid |UIsdfy.25:13| :skolemid |3689| :pattern ( (|#UI.Op.PutOp| |a#102#0#0| |a#102#1#0|)) )))
(assert (forall ((|a#103#0#0| T@U) (|a#103#1#0| T@U) ) (!  (=> (and (= (type |a#103#0#0|) (SeqType BoxType)) (= (type |a#103#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.PutOp| |a#103#0#0| |a#103#1#0|)) |a#103#1#0|)) :qid |UIsdfy.25:13| :skolemid |3690| :pattern ( (|#UI.Op.PutOp| |a#103#0#0| |a#103#1#0|)) )))
(assert (forall ((arg0@@507 T@U) (arg1@@297 T@U) (arg2@@207 T@U) ) (! (= (type (|#UI.Op.SuccOp| arg0@@507 arg1@@297 arg2@@207)) DatatypeTypeType) :qid |funType:#UI.Op.SuccOp| :pattern ( (|#UI.Op.SuccOp| arg0@@507 arg1@@297 arg2@@207)) )))
(assert (forall ((|a#104#0#0| T@U) (|a#104#1#0| T@U) (|a#104#2#0| T@U) ) (!  (=> (and (and (= (type |a#104#0#0|) DatatypeTypeType) (= (type |a#104#1#0|) (SeqType BoxType))) (= (type |a#104#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.Op.SuccOp| |a#104#0#0| |a#104#1#0| |a#104#2#0|)) |##UI.Op.SuccOp|)) :qid |UIsdfy.27:14| :skolemid |3691| :pattern ( (|#UI.Op.SuccOp| |a#104#0#0| |a#104#1#0| |a#104#2#0|)) )))
(assert (forall ((d@@85 T@U) ) (!  (=> (= (type d@@85) DatatypeTypeType) (and (=> (UI.Op.SuccOp_q d@@85) (= (DatatypeCtorId d@@85) |##UI.Op.SuccOp|)) (=> (= (DatatypeCtorId d@@85) |##UI.Op.SuccOp|) (UI.Op.SuccOp_q d@@85)))) :qid |unknown.0:0| :skolemid |3692| :pattern ( (UI.Op.SuccOp_q d@@85)) )))
(assert (forall ((d@@86 T@U) ) (!  (=> (and (= (type d@@86) DatatypeTypeType) (UI.Op.SuccOp_q d@@86)) (exists ((|a#105#0#0| T@U) (|a#105#1#0| T@U) (|a#105#2#0| T@U) ) (!  (and (and (and (= (type |a#105#0#0|) DatatypeTypeType) (= (type |a#105#1#0|) (SeqType BoxType))) (= (type |a#105#2#0|) DatatypeTypeType)) (= d@@86 (|#UI.Op.SuccOp| |a#105#0#0| |a#105#1#0| |a#105#2#0|))) :qid |UIsdfy.27:14| :skolemid |3693| :no-pattern (type |a#105#0#0|) :no-pattern (type |a#105#1#0|) :no-pattern (type |a#105#2#0|) :no-pattern (U_2_int |a#105#0#0|) :no-pattern (U_2_bool |a#105#0#0|) :no-pattern (U_2_int |a#105#1#0|) :no-pattern (U_2_bool |a#105#1#0|) :no-pattern (U_2_int |a#105#2#0|) :no-pattern (U_2_bool |a#105#2#0|) ))) :qid |unknown.0:0| :skolemid |3694| :pattern ( (UI.Op.SuccOp_q d@@86)) )))
(assert (forall ((|a#106#0#0| T@U) (|a#106#1#0| T@U) (|a#106#2#0| T@U) ) (!  (=> (and (and (= (type |a#106#0#0|) DatatypeTypeType) (= (type |a#106#1#0|) (SeqType BoxType))) (= (type |a#106#2#0|) DatatypeTypeType)) (and (=> ($Is (|#UI.Op.SuccOp| |a#106#0#0| |a#106#1#0| |a#106#2#0|) Tclass.UI.Op) (and (and ($Is |a#106#0#0| Tclass.UI.RangeStart) ($Is |a#106#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#106#2#0| Tclass.UI.RangeEnd))) (=> (and (and ($Is |a#106#0#0| Tclass.UI.RangeStart) ($Is |a#106#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#106#2#0| Tclass.UI.RangeEnd)) ($Is (|#UI.Op.SuccOp| |a#106#0#0| |a#106#1#0| |a#106#2#0|) Tclass.UI.Op)))) :qid |UIsdfy.27:14| :skolemid |3695| :pattern ( ($Is (|#UI.Op.SuccOp| |a#106#0#0| |a#106#1#0| |a#106#2#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#107#0#0| T@U) (|a#107#1#0| T@U) (|a#107#2#0| T@U) ($h@@96 T@U) ) (!  (=> (and (and (and (and (= (type |a#107#0#0|) DatatypeTypeType) (= (type |a#107#1#0|) (SeqType BoxType))) (= (type |a#107#2#0|) DatatypeTypeType)) (= (type $h@@96) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@96)) (and (=> ($IsAlloc (|#UI.Op.SuccOp| |a#107#0#0| |a#107#1#0| |a#107#2#0|) Tclass.UI.Op $h@@96) (and (and ($IsAlloc |a#107#0#0| Tclass.UI.RangeStart $h@@96) ($IsAlloc |a#107#1#0| (TSeq Tclass.UI.SuccResult) $h@@96)) ($IsAlloc |a#107#2#0| Tclass.UI.RangeEnd $h@@96))) (=> (and (and ($IsAlloc |a#107#0#0| Tclass.UI.RangeStart $h@@96) ($IsAlloc |a#107#1#0| (TSeq Tclass.UI.SuccResult) $h@@96)) ($IsAlloc |a#107#2#0| Tclass.UI.RangeEnd $h@@96)) ($IsAlloc (|#UI.Op.SuccOp| |a#107#0#0| |a#107#1#0| |a#107#2#0|) Tclass.UI.Op $h@@96)))) :qid |UIsdfy.27:14| :skolemid |3696| :pattern ( ($IsAlloc (|#UI.Op.SuccOp| |a#107#0#0| |a#107#1#0| |a#107#2#0|) Tclass.UI.Op $h@@96)) )))
(assert (forall ((arg0@@508 T@U) ) (! (= (type (UI.Op.start arg0@@508)) DatatypeTypeType) :qid |funType:UI.Op.start| :pattern ( (UI.Op.start arg0@@508)) )))
(assert (forall ((d@@87 T@U) ($h@@97 T@U) ) (!  (=> (and (and (= (type d@@87) DatatypeTypeType) (= (type $h@@97) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@97) (and (UI.Op.SuccOp_q d@@87) ($IsAlloc d@@87 Tclass.UI.Op $h@@97)))) ($IsAlloc (UI.Op.start d@@87) Tclass.UI.RangeStart $h@@97)) :qid |unknown.0:0| :skolemid |3697| :pattern ( ($IsAlloc (UI.Op.start d@@87) Tclass.UI.RangeStart $h@@97)) )))
(assert (forall ((arg0@@509 T@U) ) (! (= (type (UI.Op.results arg0@@509)) (SeqType BoxType)) :qid |funType:UI.Op.results| :pattern ( (UI.Op.results arg0@@509)) )))
(assert (forall ((d@@88 T@U) ($h@@98 T@U) ) (!  (=> (and (and (= (type d@@88) DatatypeTypeType) (= (type $h@@98) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@98) (and (UI.Op.SuccOp_q d@@88) ($IsAlloc d@@88 Tclass.UI.Op $h@@98)))) ($IsAlloc (UI.Op.results d@@88) (TSeq Tclass.UI.SuccResult) $h@@98)) :qid |unknown.0:0| :skolemid |3698| :pattern ( ($IsAlloc (UI.Op.results d@@88) (TSeq Tclass.UI.SuccResult) $h@@98)) )))
(assert (forall ((arg0@@510 T@U) ) (! (= (type (UI.Op.end arg0@@510)) DatatypeTypeType) :qid |funType:UI.Op.end| :pattern ( (UI.Op.end arg0@@510)) )))
(assert (forall ((d@@89 T@U) ($h@@99 T@U) ) (!  (=> (and (and (= (type d@@89) DatatypeTypeType) (= (type $h@@99) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@99) (and (UI.Op.SuccOp_q d@@89) ($IsAlloc d@@89 Tclass.UI.Op $h@@99)))) ($IsAlloc (UI.Op.end d@@89) Tclass.UI.RangeEnd $h@@99)) :qid |unknown.0:0| :skolemid |3699| :pattern ( ($IsAlloc (UI.Op.end d@@89) Tclass.UI.RangeEnd $h@@99)) )))
(assert (forall ((|a#108#0#0| T@U) (|a#108#1#0| T@U) (|a#108#2#0| T@U) ) (!  (=> (and (and (= (type |a#108#0#0|) DatatypeTypeType) (= (type |a#108#1#0|) (SeqType BoxType))) (= (type |a#108#2#0|) DatatypeTypeType)) (= (|#UI.Op.SuccOp| (Lit |a#108#0#0|) (Lit |a#108#1#0|) (Lit |a#108#2#0|)) (Lit (|#UI.Op.SuccOp| |a#108#0#0| |a#108#1#0| |a#108#2#0|)))) :qid |UIsdfy.27:14| :skolemid |3700| :pattern ( (|#UI.Op.SuccOp| (Lit |a#108#0#0|) (Lit |a#108#1#0|) (Lit |a#108#2#0|))) )))
(assert (forall ((|a#109#0#0| T@U) (|a#109#1#0| T@U) (|a#109#2#0| T@U) ) (!  (=> (and (and (= (type |a#109#0#0|) DatatypeTypeType) (= (type |a#109#1#0|) (SeqType BoxType))) (= (type |a#109#2#0|) DatatypeTypeType)) (= (UI.Op.start (|#UI.Op.SuccOp| |a#109#0#0| |a#109#1#0| |a#109#2#0|)) |a#109#0#0|)) :qid |UIsdfy.27:14| :skolemid |3701| :pattern ( (|#UI.Op.SuccOp| |a#109#0#0| |a#109#1#0| |a#109#2#0|)) )))
(assert (forall ((|a#110#0#0| T@U) (|a#110#1#0| T@U) (|a#110#2#0| T@U) ) (!  (=> (and (and (= (type |a#110#0#0|) DatatypeTypeType) (= (type |a#110#1#0|) (SeqType BoxType))) (= (type |a#110#2#0|) DatatypeTypeType)) (< (DtRank |a#110#0#0|) (DtRank (|#UI.Op.SuccOp| |a#110#0#0| |a#110#1#0| |a#110#2#0|)))) :qid |UIsdfy.27:14| :skolemid |3702| :pattern ( (|#UI.Op.SuccOp| |a#110#0#0| |a#110#1#0| |a#110#2#0|)) )))
(assert (forall ((|a#111#0#0| T@U) (|a#111#1#0| T@U) (|a#111#2#0| T@U) ) (!  (=> (and (and (= (type |a#111#0#0|) DatatypeTypeType) (= (type |a#111#1#0|) (SeqType BoxType))) (= (type |a#111#2#0|) DatatypeTypeType)) (= (UI.Op.results (|#UI.Op.SuccOp| |a#111#0#0| |a#111#1#0| |a#111#2#0|)) |a#111#1#0|)) :qid |UIsdfy.27:14| :skolemid |3703| :pattern ( (|#UI.Op.SuccOp| |a#111#0#0| |a#111#1#0| |a#111#2#0|)) )))
(assert (forall ((|a#112#0#0| T@U) (|a#112#1#0| T@U) (|a#112#2#0| T@U) (i@@34 Int) ) (!  (=> (and (and (and (= (type |a#112#0#0|) DatatypeTypeType) (= (type |a#112#1#0|) (SeqType BoxType))) (= (type |a#112#2#0|) DatatypeTypeType)) (and (<= 0 i@@34) (< i@@34 (|Seq#Length| |a#112#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#112#1#0| i@@34))) (DtRank (|#UI.Op.SuccOp| |a#112#0#0| |a#112#1#0| |a#112#2#0|)))) :qid |UIsdfy.27:14| :skolemid |3704| :pattern ( (|Seq#Index| |a#112#1#0| i@@34) (|#UI.Op.SuccOp| |a#112#0#0| |a#112#1#0| |a#112#2#0|)) )))
(assert (forall ((|a#113#0#0| T@U) (|a#113#1#0| T@U) (|a#113#2#0| T@U) ) (!  (=> (and (and (= (type |a#113#0#0|) DatatypeTypeType) (= (type |a#113#1#0|) (SeqType BoxType))) (= (type |a#113#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#113#1#0|) (DtRank (|#UI.Op.SuccOp| |a#113#0#0| |a#113#1#0| |a#113#2#0|)))) :qid |UIsdfy.27:14| :skolemid |3705| :pattern ( (|#UI.Op.SuccOp| |a#113#0#0| |a#113#1#0| |a#113#2#0|)) )))
(assert (forall ((|a#114#0#0| T@U) (|a#114#1#0| T@U) (|a#114#2#0| T@U) ) (!  (=> (and (and (= (type |a#114#0#0|) DatatypeTypeType) (= (type |a#114#1#0|) (SeqType BoxType))) (= (type |a#114#2#0|) DatatypeTypeType)) (= (UI.Op.end (|#UI.Op.SuccOp| |a#114#0#0| |a#114#1#0| |a#114#2#0|)) |a#114#2#0|)) :qid |UIsdfy.27:14| :skolemid |3706| :pattern ( (|#UI.Op.SuccOp| |a#114#0#0| |a#114#1#0| |a#114#2#0|)) )))
(assert (forall ((|a#115#0#0| T@U) (|a#115#1#0| T@U) (|a#115#2#0| T@U) ) (!  (=> (and (and (= (type |a#115#0#0|) DatatypeTypeType) (= (type |a#115#1#0|) (SeqType BoxType))) (= (type |a#115#2#0|) DatatypeTypeType)) (< (DtRank |a#115#2#0|) (DtRank (|#UI.Op.SuccOp| |a#115#0#0| |a#115#1#0| |a#115#2#0|)))) :qid |UIsdfy.27:14| :skolemid |3707| :pattern ( (|#UI.Op.SuccOp| |a#115#0#0| |a#115#1#0| |a#115#2#0|)) )))
(assert (forall ((d@@90 T@U) ) (!  (=> (and (= (type d@@90) DatatypeTypeType) (|$IsA#UI.Op| d@@90)) (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@90) (UI.Op.SyncOp_q d@@90)) (UI.Op.CrashOp_q d@@90)) (UI.Op.PushSyncOp_q d@@90)) (UI.Op.PopSyncOp_q d@@90)) (UI.Op.GetOp_q d@@90)) (UI.Op.PutOp_q d@@90)) (UI.Op.SuccOp_q d@@90))) :qid |unknown.0:0| :skolemid |3708| :pattern ( (|$IsA#UI.Op| d@@90)) )))
(assert (forall ((d@@91 T@U) ) (!  (=> (and (= (type d@@91) DatatypeTypeType) ($Is d@@91 Tclass.UI.Op)) (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@91) (UI.Op.SyncOp_q d@@91)) (UI.Op.CrashOp_q d@@91)) (UI.Op.PushSyncOp_q d@@91)) (UI.Op.PopSyncOp_q d@@91)) (UI.Op.GetOp_q d@@91)) (UI.Op.PutOp_q d@@91)) (UI.Op.SuccOp_q d@@91))) :qid |unknown.0:0| :skolemid |3709| :pattern ( (UI.Op.SuccOp_q d@@91) ($Is d@@91 Tclass.UI.Op)) :pattern ( (UI.Op.PutOp_q d@@91) ($Is d@@91 Tclass.UI.Op)) :pattern ( (UI.Op.GetOp_q d@@91) ($Is d@@91 Tclass.UI.Op)) :pattern ( (UI.Op.PopSyncOp_q d@@91) ($Is d@@91 Tclass.UI.Op)) :pattern ( (UI.Op.PushSyncOp_q d@@91) ($Is d@@91 Tclass.UI.Op)) :pattern ( (UI.Op.CrashOp_q d@@91) ($Is d@@91 Tclass.UI.Op)) :pattern ( (UI.Op.SyncOp_q d@@91) ($Is d@@91 Tclass.UI.Op)) :pattern ( (UI.Op.NoOp_q d@@91) ($Is d@@91 Tclass.UI.Op)) )))
(assert (forall ((a@@154 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@154) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (and (UI.Op.NoOp_q a@@154) (UI.Op.NoOp_q b@@85))) (and (=> (|UI.Op#Equal| a@@154 b@@85) true) (=> true (|UI.Op#Equal| a@@154 b@@85)))) :qid |unknown.0:0| :skolemid |3710| :pattern ( (|UI.Op#Equal| a@@154 b@@85) (UI.Op.NoOp_q a@@154)) :pattern ( (|UI.Op#Equal| a@@154 b@@85) (UI.Op.NoOp_q b@@85)) )))
(assert (forall ((a@@155 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@155) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (UI.Op.SyncOp_q a@@155) (UI.Op.SyncOp_q b@@86))) (and (=> (|UI.Op#Equal| a@@155 b@@86) true) (=> true (|UI.Op#Equal| a@@155 b@@86)))) :qid |unknown.0:0| :skolemid |3711| :pattern ( (|UI.Op#Equal| a@@155 b@@86) (UI.Op.SyncOp_q a@@155)) :pattern ( (|UI.Op#Equal| a@@155 b@@86) (UI.Op.SyncOp_q b@@86)) )))
(assert (forall ((a@@156 T@U) (b@@87 T@U) ) (!  (=> (and (and (= (type a@@156) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (UI.Op.CrashOp_q a@@156) (UI.Op.CrashOp_q b@@87))) (and (=> (|UI.Op#Equal| a@@156 b@@87) true) (=> true (|UI.Op#Equal| a@@156 b@@87)))) :qid |unknown.0:0| :skolemid |3712| :pattern ( (|UI.Op#Equal| a@@156 b@@87) (UI.Op.CrashOp_q a@@156)) :pattern ( (|UI.Op#Equal| a@@156 b@@87) (UI.Op.CrashOp_q b@@87)) )))
(assert (forall ((a@@157 T@U) (b@@88 T@U) ) (!  (=> (and (and (= (type a@@157) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) (and (UI.Op.PushSyncOp_q a@@157) (UI.Op.PushSyncOp_q b@@88))) (and (=> (|UI.Op#Equal| a@@157 b@@88) (= (UI.Op.id a@@157) (UI.Op.id b@@88))) (=> (= (UI.Op.id a@@157) (UI.Op.id b@@88)) (|UI.Op#Equal| a@@157 b@@88)))) :qid |unknown.0:0| :skolemid |3713| :pattern ( (|UI.Op#Equal| a@@157 b@@88) (UI.Op.PushSyncOp_q a@@157)) :pattern ( (|UI.Op#Equal| a@@157 b@@88) (UI.Op.PushSyncOp_q b@@88)) )))
(assert (forall ((a@@158 T@U) (b@@89 T@U) ) (!  (=> (and (and (= (type a@@158) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) (and (UI.Op.PopSyncOp_q a@@158) (UI.Op.PopSyncOp_q b@@89))) (and (=> (|UI.Op#Equal| a@@158 b@@89) (= (UI.Op.id a@@158) (UI.Op.id b@@89))) (=> (= (UI.Op.id a@@158) (UI.Op.id b@@89)) (|UI.Op#Equal| a@@158 b@@89)))) :qid |unknown.0:0| :skolemid |3714| :pattern ( (|UI.Op#Equal| a@@158 b@@89) (UI.Op.PopSyncOp_q a@@158)) :pattern ( (|UI.Op#Equal| a@@158 b@@89) (UI.Op.PopSyncOp_q b@@89)) )))
(assert (forall ((a@@159 T@U) (b@@90 T@U) ) (!  (=> (and (and (= (type a@@159) DatatypeTypeType) (= (type b@@90) DatatypeTypeType)) (and (UI.Op.GetOp_q a@@159) (UI.Op.GetOp_q b@@90))) (and (=> (|UI.Op#Equal| a@@159 b@@90) (and (|Seq#Equal| (UI.Op.key a@@159) (UI.Op.key b@@90)) (|Seq#Equal| (UI.Op.value a@@159) (UI.Op.value b@@90)))) (=> (and (|Seq#Equal| (UI.Op.key a@@159) (UI.Op.key b@@90)) (|Seq#Equal| (UI.Op.value a@@159) (UI.Op.value b@@90))) (|UI.Op#Equal| a@@159 b@@90)))) :qid |unknown.0:0| :skolemid |3715| :pattern ( (|UI.Op#Equal| a@@159 b@@90) (UI.Op.GetOp_q a@@159)) :pattern ( (|UI.Op#Equal| a@@159 b@@90) (UI.Op.GetOp_q b@@90)) )))
(assert (forall ((a@@160 T@U) (b@@91 T@U) ) (!  (=> (and (and (= (type a@@160) DatatypeTypeType) (= (type b@@91) DatatypeTypeType)) (and (UI.Op.PutOp_q a@@160) (UI.Op.PutOp_q b@@91))) (and (=> (|UI.Op#Equal| a@@160 b@@91) (and (|Seq#Equal| (UI.Op.key a@@160) (UI.Op.key b@@91)) (|Seq#Equal| (UI.Op.value a@@160) (UI.Op.value b@@91)))) (=> (and (|Seq#Equal| (UI.Op.key a@@160) (UI.Op.key b@@91)) (|Seq#Equal| (UI.Op.value a@@160) (UI.Op.value b@@91))) (|UI.Op#Equal| a@@160 b@@91)))) :qid |unknown.0:0| :skolemid |3716| :pattern ( (|UI.Op#Equal| a@@160 b@@91) (UI.Op.PutOp_q a@@160)) :pattern ( (|UI.Op#Equal| a@@160 b@@91) (UI.Op.PutOp_q b@@91)) )))
(assert (forall ((a@@161 T@U) (b@@92 T@U) ) (!  (=> (and (and (= (type a@@161) DatatypeTypeType) (= (type b@@92) DatatypeTypeType)) (and (UI.Op.SuccOp_q a@@161) (UI.Op.SuccOp_q b@@92))) (and (=> (|UI.Op#Equal| a@@161 b@@92) (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@161) (UI.Op.start b@@92)) (|Seq#Equal| (UI.Op.results a@@161) (UI.Op.results b@@92))) (|UI.RangeEnd#Equal| (UI.Op.end a@@161) (UI.Op.end b@@92)))) (=> (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@161) (UI.Op.start b@@92)) (|Seq#Equal| (UI.Op.results a@@161) (UI.Op.results b@@92))) (|UI.RangeEnd#Equal| (UI.Op.end a@@161) (UI.Op.end b@@92))) (|UI.Op#Equal| a@@161 b@@92)))) :qid |unknown.0:0| :skolemid |3717| :pattern ( (|UI.Op#Equal| a@@161 b@@92) (UI.Op.SuccOp_q a@@161)) :pattern ( (|UI.Op#Equal| a@@161 b@@92) (UI.Op.SuccOp_q b@@92)) )))
(assert (forall ((a@@162 T@U) (b@@93 T@U) ) (!  (=> (and (= (type a@@162) DatatypeTypeType) (= (type b@@93) DatatypeTypeType)) (and (=> (|UI.Op#Equal| a@@162 b@@93) (= a@@162 b@@93)) (=> (= a@@162 b@@93) (|UI.Op#Equal| a@@162 b@@93)))) :qid |unknown.0:0| :skolemid |3718| :pattern ( (|UI.Op#Equal| a@@162 b@@93)) )))
(assert (= (type Tclass.UI.__default) TyType))
(assert (= (Tag Tclass.UI.__default) Tagclass.UI.__default))
(assert (forall ((bx@@147 T@U) ) (!  (=> (and (= (type bx@@147) BoxType) ($IsBox bx@@147 Tclass.UI.__default)) (and (= ($Box ($Unbox refType bx@@147)) bx@@147) ($Is ($Unbox refType bx@@147) Tclass.UI.__default))) :qid |unknown.0:0| :skolemid |3719| :pattern ( ($IsBox bx@@147 Tclass.UI.__default)) )))
(assert (forall (($o@@42 T@U) ) (!  (=> (= (type $o@@42) refType) (and (=> ($Is $o@@42 Tclass.UI.__default) (or (= $o@@42 null) (= (dtype $o@@42) Tclass.UI.__default))) (=> (or (= $o@@42 null) (= (dtype $o@@42) Tclass.UI.__default)) ($Is $o@@42 Tclass.UI.__default)))) :qid |unknown.0:0| :skolemid |3720| :pattern ( ($Is $o@@42 Tclass.UI.__default)) )))
(assert (forall (($o@@43 T@U) ($h@@100 T@U) ) (!  (=> (and (= (type $o@@43) refType) (= (type $h@@100) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@43 Tclass.UI.__default $h@@100) (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@100 $o@@43) alloc)))) (=> (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@100 $o@@43) alloc))) ($IsAlloc $o@@43 Tclass.UI.__default $h@@100)))) :qid |unknown.0:0| :skolemid |3721| :pattern ( ($IsAlloc $o@@43 Tclass.UI.__default $h@@100)) )))
(assert (= (type |#MapSpec.Constants.Constants|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MapSpec.Constants.Constants|) |##MapSpec.Constants.Constants|))
(assert (forall ((d@@92 T@U) ) (!  (=> (= (type d@@92) DatatypeTypeType) (and (=> (MapSpec.Constants.Constants_q d@@92) (= (DatatypeCtorId d@@92) |##MapSpec.Constants.Constants|)) (=> (= (DatatypeCtorId d@@92) |##MapSpec.Constants.Constants|) (MapSpec.Constants.Constants_q d@@92)))) :qid |unknown.0:0| :skolemid |3722| :pattern ( (MapSpec.Constants.Constants_q d@@92)) )))
(assert (forall ((d@@93 T@U) ) (!  (=> (and (= (type d@@93) DatatypeTypeType) (MapSpec.Constants.Constants_q d@@93)) (= d@@93 |#MapSpec.Constants.Constants|)) :qid |unknown.0:0| :skolemid |3723| :pattern ( (MapSpec.Constants.Constants_q d@@93)) )))
(assert (= (type Tclass.MapSpec.Constants) TyType))
(assert (= (Tag Tclass.MapSpec.Constants) Tagclass.MapSpec.Constants))
(assert (forall ((bx@@148 T@U) ) (!  (=> (and (= (type bx@@148) BoxType) ($IsBox bx@@148 Tclass.MapSpec.Constants)) (and (= ($Box ($Unbox DatatypeTypeType bx@@148)) bx@@148) ($Is ($Unbox DatatypeTypeType bx@@148) Tclass.MapSpec.Constants))) :qid |unknown.0:0| :skolemid |3724| :pattern ( ($IsBox bx@@148 Tclass.MapSpec.Constants)) )))
(assert ($Is |#MapSpec.Constants.Constants| Tclass.MapSpec.Constants))
(assert (forall (($h@@101 T@U) ) (!  (=> (and (= (type $h@@101) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@101)) ($IsAlloc |#MapSpec.Constants.Constants| Tclass.MapSpec.Constants $h@@101)) :qid |DafnyPre.521:12| :skolemid |3725| :pattern ( ($IsAlloc |#MapSpec.Constants.Constants| Tclass.MapSpec.Constants $h@@101)) )))
(assert (= |#MapSpec.Constants.Constants| (Lit |#MapSpec.Constants.Constants|)))
(assert (forall ((d@@94 T@U) ) (!  (=> (and (= (type d@@94) DatatypeTypeType) (|$IsA#MapSpec.Constants| d@@94)) (MapSpec.Constants.Constants_q d@@94)) :qid |unknown.0:0| :skolemid |3726| :pattern ( (|$IsA#MapSpec.Constants| d@@94)) )))
(assert (forall ((d@@95 T@U) ) (!  (=> (and (= (type d@@95) DatatypeTypeType) ($Is d@@95 Tclass.MapSpec.Constants)) (MapSpec.Constants.Constants_q d@@95)) :qid |unknown.0:0| :skolemid |3727| :pattern ( (MapSpec.Constants.Constants_q d@@95) ($Is d@@95 Tclass.MapSpec.Constants)) )))
(assert (forall ((a@@163 T@U) (b@@94 T@U) ) (!  (=> (and (and (= (type a@@163) DatatypeTypeType) (= (type b@@94) DatatypeTypeType)) true) (and (=> (|MapSpec.Constants#Equal| a@@163 b@@94) true) (=> true (|MapSpec.Constants#Equal| a@@163 b@@94)))) :qid |unknown.0:0| :skolemid |3728| :pattern ( (|MapSpec.Constants#Equal| a@@163 b@@94)) )))
(assert (forall ((a@@164 T@U) (b@@95 T@U) ) (!  (=> (and (= (type a@@164) DatatypeTypeType) (= (type b@@95) DatatypeTypeType)) (and (=> (|MapSpec.Constants#Equal| a@@164 b@@95) (= a@@164 b@@95)) (=> (= a@@164 b@@95) (|MapSpec.Constants#Equal| a@@164 b@@95)))) :qid |unknown.0:0| :skolemid |3729| :pattern ( (|MapSpec.Constants#Equal| a@@164 b@@95)) )))
(assert (forall ((arg0@@511 T@U) ) (! (= (type (|#MapSpec.Variables.Variables| arg0@@511)) DatatypeTypeType) :qid |funType:#MapSpec.Variables.Variables| :pattern ( (|#MapSpec.Variables.Variables| arg0@@511)) )))
(assert (forall ((|a#121#0#0| T@U) ) (!  (=> (= (type |a#121#0#0|) (IMapType BoxType BoxType)) (= (DatatypeCtorId (|#MapSpec.Variables.Variables| |a#121#0#0|)) |##MapSpec.Variables.Variables|)) :qid |MapSpecs.21:40| :skolemid |3730| :pattern ( (|#MapSpec.Variables.Variables| |a#121#0#0|)) )))
(assert (forall ((d@@96 T@U) ) (!  (=> (= (type d@@96) DatatypeTypeType) (and (=> (MapSpec.Variables.Variables_q d@@96) (= (DatatypeCtorId d@@96) |##MapSpec.Variables.Variables|)) (=> (= (DatatypeCtorId d@@96) |##MapSpec.Variables.Variables|) (MapSpec.Variables.Variables_q d@@96)))) :qid |unknown.0:0| :skolemid |3731| :pattern ( (MapSpec.Variables.Variables_q d@@96)) )))
(assert (forall ((d@@97 T@U) ) (!  (=> (and (= (type d@@97) DatatypeTypeType) (MapSpec.Variables.Variables_q d@@97)) (exists ((|a#122#0#0| T@U) ) (!  (and (= (type |a#122#0#0|) (IMapType BoxType BoxType)) (= d@@97 (|#MapSpec.Variables.Variables| |a#122#0#0|))) :qid |MapSpecs.21:40| :skolemid |3732| :no-pattern (type |a#122#0#0|) :no-pattern (U_2_int |a#122#0#0|) :no-pattern (U_2_bool |a#122#0#0|) ))) :qid |unknown.0:0| :skolemid |3733| :pattern ( (MapSpec.Variables.Variables_q d@@97)) )))
(assert (= (type Tclass.MapSpec.Variables) TyType))
(assert (= (Tag Tclass.MapSpec.Variables) Tagclass.MapSpec.Variables))
(assert (forall ((bx@@149 T@U) ) (!  (=> (and (= (type bx@@149) BoxType) ($IsBox bx@@149 Tclass.MapSpec.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@149)) bx@@149) ($Is ($Unbox DatatypeTypeType bx@@149) Tclass.MapSpec.Variables))) :qid |unknown.0:0| :skolemid |3734| :pattern ( ($IsBox bx@@149 Tclass.MapSpec.Variables)) )))
(assert (forall ((|a#123#0#0| T@U) ) (!  (=> (= (type |a#123#0#0|) (IMapType BoxType BoxType)) (and (=> ($Is (|#MapSpec.Variables.Variables| |a#123#0#0|) Tclass.MapSpec.Variables) ($Is |a#123#0#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))) (=> ($Is |a#123#0#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)) ($Is (|#MapSpec.Variables.Variables| |a#123#0#0|) Tclass.MapSpec.Variables)))) :qid |MapSpecs.21:40| :skolemid |3735| :pattern ( ($Is (|#MapSpec.Variables.Variables| |a#123#0#0|) Tclass.MapSpec.Variables)) )))
(assert (forall ((|a#124#0#0| T@U) ($h@@102 T@U) ) (!  (=> (and (and (= (type |a#124#0#0|) (IMapType BoxType BoxType)) (= (type $h@@102) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@102)) (and (=> ($IsAlloc (|#MapSpec.Variables.Variables| |a#124#0#0|) Tclass.MapSpec.Variables $h@@102) ($IsAlloc |a#124#0#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@102)) (=> ($IsAlloc |a#124#0#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@102) ($IsAlloc (|#MapSpec.Variables.Variables| |a#124#0#0|) Tclass.MapSpec.Variables $h@@102)))) :qid |MapSpecs.21:40| :skolemid |3736| :pattern ( ($IsAlloc (|#MapSpec.Variables.Variables| |a#124#0#0|) Tclass.MapSpec.Variables $h@@102)) )))
(assert (forall ((arg0@@512 T@U) ) (! (= (type (MapSpec.Variables.view arg0@@512)) (IMapType BoxType BoxType)) :qid |funType:MapSpec.Variables.view| :pattern ( (MapSpec.Variables.view arg0@@512)) )))
(assert (forall ((d@@98 T@U) ($h@@103 T@U) ) (!  (=> (and (and (= (type d@@98) DatatypeTypeType) (= (type $h@@103) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@103) (and (MapSpec.Variables.Variables_q d@@98) ($IsAlloc d@@98 Tclass.MapSpec.Variables $h@@103)))) ($IsAlloc (MapSpec.Variables.view d@@98) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@103)) :qid |unknown.0:0| :skolemid |3737| :pattern ( ($IsAlloc (MapSpec.Variables.view d@@98) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@103)) )))
(assert (forall ((|a#125#0#0| T@U) ) (!  (=> (= (type |a#125#0#0|) (IMapType BoxType BoxType)) (= (|#MapSpec.Variables.Variables| (Lit |a#125#0#0|)) (Lit (|#MapSpec.Variables.Variables| |a#125#0#0|)))) :qid |MapSpecs.21:40| :skolemid |3738| :pattern ( (|#MapSpec.Variables.Variables| (Lit |a#125#0#0|))) )))
(assert (forall ((|a#126#0#0| T@U) ) (!  (=> (= (type |a#126#0#0|) (IMapType BoxType BoxType)) (= (MapSpec.Variables.view (|#MapSpec.Variables.Variables| |a#126#0#0|)) |a#126#0#0|)) :qid |MapSpecs.21:40| :skolemid |3739| :pattern ( (|#MapSpec.Variables.Variables| |a#126#0#0|)) )))
(assert (forall ((|a#127#0#0| T@U) (d@@99 T@U) ) (!  (=> (and (and (= (type |a#127#0#0|) (IMapType BoxType BoxType)) (= (type d@@99) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#127#0#0|) ($Box d@@99)))) (< (DtRank d@@99) (DtRank (|#MapSpec.Variables.Variables| |a#127#0#0|)))) :qid |MapSpecs.21:40| :skolemid |3740| :pattern ( (MapType0Select (|IMap#Domain| |a#127#0#0|) ($Box d@@99)) (|#MapSpec.Variables.Variables| |a#127#0#0|)) )))
(assert (forall ((|a#128#0#0| T@U) (bx@@150 T@U) ) (!  (=> (and (and (= (type |a#128#0#0|) (IMapType BoxType BoxType)) (= (type bx@@150) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#128#0#0|) bx@@150))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#128#0#0|) bx@@150))) (DtRank (|#MapSpec.Variables.Variables| |a#128#0#0|)))) :qid |MapSpecs.21:40| :skolemid |3741| :pattern ( (MapType0Select (|IMap#Domain| |a#128#0#0|) bx@@150) (|#MapSpec.Variables.Variables| |a#128#0#0|)) )))
(assert (forall ((d@@100 T@U) ) (!  (=> (and (= (type d@@100) DatatypeTypeType) (|$IsA#MapSpec.Variables| d@@100)) (MapSpec.Variables.Variables_q d@@100)) :qid |unknown.0:0| :skolemid |3742| :pattern ( (|$IsA#MapSpec.Variables| d@@100)) )))
(assert (forall ((d@@101 T@U) ) (!  (=> (and (= (type d@@101) DatatypeTypeType) ($Is d@@101 Tclass.MapSpec.Variables)) (MapSpec.Variables.Variables_q d@@101)) :qid |unknown.0:0| :skolemid |3743| :pattern ( (MapSpec.Variables.Variables_q d@@101) ($Is d@@101 Tclass.MapSpec.Variables)) )))
(assert (forall ((a@@165 T@U) (b@@96 T@U) ) (!  (=> (and (and (= (type a@@165) DatatypeTypeType) (= (type b@@96) DatatypeTypeType)) true) (and (=> (|MapSpec.Variables#Equal| a@@165 b@@96) (|IMap#Equal| (MapSpec.Variables.view a@@165) (MapSpec.Variables.view b@@96))) (=> (|IMap#Equal| (MapSpec.Variables.view a@@165) (MapSpec.Variables.view b@@96)) (|MapSpec.Variables#Equal| a@@165 b@@96)))) :qid |unknown.0:0| :skolemid |3744| :pattern ( (|MapSpec.Variables#Equal| a@@165 b@@96)) )))
(assert (forall ((a@@166 T@U) (b@@97 T@U) ) (!  (=> (and (= (type a@@166) DatatypeTypeType) (= (type b@@97) DatatypeTypeType)) (and (=> (|MapSpec.Variables#Equal| a@@166 b@@97) (= a@@166 b@@97)) (=> (= a@@166 b@@97) (|MapSpec.Variables#Equal| a@@166 b@@97)))) :qid |unknown.0:0| :skolemid |3745| :pattern ( (|MapSpec.Variables#Equal| a@@166 b@@97)) )))
(assert (forall ((arg0@@513 T@U) (arg1@@298 T@U) ) (! (= (type (|#MapSpec.Step.QueryStep| arg0@@513 arg1@@298)) DatatypeTypeType) :qid |funType:#MapSpec.Step.QueryStep| :pattern ( (|#MapSpec.Step.QueryStep| arg0@@513 arg1@@298)) )))
(assert (forall ((|a#129#0#0| T@U) (|a#129#1#0| T@U) ) (!  (=> (and (= (type |a#129#0#0|) (SeqType BoxType)) (= (type |a#129#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSpec.Step.QueryStep| |a#129#0#0| |a#129#1#0|)) |##MapSpec.Step.QueryStep|)) :qid |MapSpecs.119:19| :skolemid |3746| :pattern ( (|#MapSpec.Step.QueryStep| |a#129#0#0| |a#129#1#0|)) )))
(assert (forall ((d@@102 T@U) ) (!  (=> (= (type d@@102) DatatypeTypeType) (and (=> (MapSpec.Step.QueryStep_q d@@102) (= (DatatypeCtorId d@@102) |##MapSpec.Step.QueryStep|)) (=> (= (DatatypeCtorId d@@102) |##MapSpec.Step.QueryStep|) (MapSpec.Step.QueryStep_q d@@102)))) :qid |unknown.0:0| :skolemid |3747| :pattern ( (MapSpec.Step.QueryStep_q d@@102)) )))
(assert (forall ((d@@103 T@U) ) (!  (=> (and (= (type d@@103) DatatypeTypeType) (MapSpec.Step.QueryStep_q d@@103)) (exists ((|a#130#0#0| T@U) (|a#130#1#0| T@U) ) (!  (and (and (= (type |a#130#0#0|) (SeqType BoxType)) (= (type |a#130#1#0|) (SeqType BoxType))) (= d@@103 (|#MapSpec.Step.QueryStep| |a#130#0#0| |a#130#1#0|))) :qid |MapSpecs.119:19| :skolemid |3748| :no-pattern (type |a#130#0#0|) :no-pattern (type |a#130#1#0|) :no-pattern (U_2_int |a#130#0#0|) :no-pattern (U_2_bool |a#130#0#0|) :no-pattern (U_2_int |a#130#1#0|) :no-pattern (U_2_bool |a#130#1#0|) ))) :qid |unknown.0:0| :skolemid |3749| :pattern ( (MapSpec.Step.QueryStep_q d@@103)) )))
(assert (= (type Tclass.MapSpec.Step) TyType))
(assert (= (Tag Tclass.MapSpec.Step) Tagclass.MapSpec.Step))
(assert (forall ((bx@@151 T@U) ) (!  (=> (and (= (type bx@@151) BoxType) ($IsBox bx@@151 Tclass.MapSpec.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@151)) bx@@151) ($Is ($Unbox DatatypeTypeType bx@@151) Tclass.MapSpec.Step))) :qid |unknown.0:0| :skolemid |3750| :pattern ( ($IsBox bx@@151 Tclass.MapSpec.Step)) )))
(assert (forall ((|a#131#0#0| T@U) (|a#131#1#0| T@U) ) (!  (=> (and (= (type |a#131#0#0|) (SeqType BoxType)) (= (type |a#131#1#0|) (SeqType BoxType))) (and (=> ($Is (|#MapSpec.Step.QueryStep| |a#131#0#0| |a#131#1#0|) Tclass.MapSpec.Step) (and ($Is |a#131#0#0| Tclass.KeyType.Key) ($Is |a#131#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#131#0#0| Tclass.KeyType.Key) ($Is |a#131#1#0| Tclass.ValueType.Value)) ($Is (|#MapSpec.Step.QueryStep| |a#131#0#0| |a#131#1#0|) Tclass.MapSpec.Step)))) :qid |MapSpecs.119:19| :skolemid |3751| :pattern ( ($Is (|#MapSpec.Step.QueryStep| |a#131#0#0| |a#131#1#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#132#0#0| T@U) (|a#132#1#0| T@U) ($h@@104 T@U) ) (!  (=> (and (and (and (= (type |a#132#0#0|) (SeqType BoxType)) (= (type |a#132#1#0|) (SeqType BoxType))) (= (type $h@@104) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@104)) (and (=> ($IsAlloc (|#MapSpec.Step.QueryStep| |a#132#0#0| |a#132#1#0|) Tclass.MapSpec.Step $h@@104) (and ($IsAlloc |a#132#0#0| Tclass.KeyType.Key $h@@104) ($IsAlloc |a#132#1#0| Tclass.ValueType.Value $h@@104))) (=> (and ($IsAlloc |a#132#0#0| Tclass.KeyType.Key $h@@104) ($IsAlloc |a#132#1#0| Tclass.ValueType.Value $h@@104)) ($IsAlloc (|#MapSpec.Step.QueryStep| |a#132#0#0| |a#132#1#0|) Tclass.MapSpec.Step $h@@104)))) :qid |MapSpecs.119:19| :skolemid |3752| :pattern ( ($IsAlloc (|#MapSpec.Step.QueryStep| |a#132#0#0| |a#132#1#0|) Tclass.MapSpec.Step $h@@104)) )))
(assert (forall ((arg0@@514 T@U) ) (! (= (type (MapSpec.Step.key arg0@@514)) (SeqType BoxType)) :qid |funType:MapSpec.Step.key| :pattern ( (MapSpec.Step.key arg0@@514)) )))
(assert (forall ((d@@104 T@U) ($h@@105 T@U) ) (!  (=> (and (and (= (type d@@104) DatatypeTypeType) (= (type $h@@105) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@105) (and (MapSpec.Step.QueryStep_q d@@104) ($IsAlloc d@@104 Tclass.MapSpec.Step $h@@105)))) ($IsAlloc (MapSpec.Step.key d@@104) Tclass.KeyType.Key $h@@105)) :qid |unknown.0:0| :skolemid |3753| :pattern ( ($IsAlloc (MapSpec.Step.key d@@104) Tclass.KeyType.Key $h@@105)) )))
(assert (forall ((arg0@@515 T@U) ) (! (= (type (MapSpec.Step.result arg0@@515)) (SeqType BoxType)) :qid |funType:MapSpec.Step.result| :pattern ( (MapSpec.Step.result arg0@@515)) )))
(assert (forall ((d@@105 T@U) ($h@@106 T@U) ) (!  (=> (and (and (= (type d@@105) DatatypeTypeType) (= (type $h@@106) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@106) (and (MapSpec.Step.QueryStep_q d@@105) ($IsAlloc d@@105 Tclass.MapSpec.Step $h@@106)))) ($IsAlloc (MapSpec.Step.result d@@105) Tclass.ValueType.Value $h@@106)) :qid |unknown.0:0| :skolemid |3754| :pattern ( ($IsAlloc (MapSpec.Step.result d@@105) Tclass.ValueType.Value $h@@106)) )))
(assert (forall ((|a#133#0#0| T@U) (|a#133#1#0| T@U) ) (!  (=> (and (= (type |a#133#0#0|) (SeqType BoxType)) (= (type |a#133#1#0|) (SeqType BoxType))) (= (|#MapSpec.Step.QueryStep| (Lit |a#133#0#0|) (Lit |a#133#1#0|)) (Lit (|#MapSpec.Step.QueryStep| |a#133#0#0| |a#133#1#0|)))) :qid |MapSpecs.119:19| :skolemid |3755| :pattern ( (|#MapSpec.Step.QueryStep| (Lit |a#133#0#0|) (Lit |a#133#1#0|))) )))
(assert (forall ((|a#134#0#0| T@U) (|a#134#1#0| T@U) ) (!  (=> (and (= (type |a#134#0#0|) (SeqType BoxType)) (= (type |a#134#1#0|) (SeqType BoxType))) (= (MapSpec.Step.key (|#MapSpec.Step.QueryStep| |a#134#0#0| |a#134#1#0|)) |a#134#0#0|)) :qid |MapSpecs.119:19| :skolemid |3756| :pattern ( (|#MapSpec.Step.QueryStep| |a#134#0#0| |a#134#1#0|)) )))
(assert (forall ((|a#135#0#0| T@U) (|a#135#1#0| T@U) ) (!  (=> (and (= (type |a#135#0#0|) (SeqType BoxType)) (= (type |a#135#1#0|) (SeqType BoxType))) (= (MapSpec.Step.result (|#MapSpec.Step.QueryStep| |a#135#0#0| |a#135#1#0|)) |a#135#1#0|)) :qid |MapSpecs.119:19| :skolemid |3757| :pattern ( (|#MapSpec.Step.QueryStep| |a#135#0#0| |a#135#1#0|)) )))
(assert (forall ((arg0@@516 T@U) (arg1@@299 T@U) ) (! (= (type (|#MapSpec.Step.WriteStep| arg0@@516 arg1@@299)) DatatypeTypeType) :qid |funType:#MapSpec.Step.WriteStep| :pattern ( (|#MapSpec.Step.WriteStep| arg0@@516 arg1@@299)) )))
(assert (forall ((|a#136#0#0| T@U) (|a#136#1#0| T@U) ) (!  (=> (and (= (type |a#136#0#0|) (SeqType BoxType)) (= (type |a#136#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSpec.Step.WriteStep| |a#136#0#0| |a#136#1#0|)) |##MapSpec.Step.WriteStep|)) :qid |MapSpecs.120:19| :skolemid |3758| :pattern ( (|#MapSpec.Step.WriteStep| |a#136#0#0| |a#136#1#0|)) )))
(assert (forall ((d@@106 T@U) ) (!  (=> (= (type d@@106) DatatypeTypeType) (and (=> (MapSpec.Step.WriteStep_q d@@106) (= (DatatypeCtorId d@@106) |##MapSpec.Step.WriteStep|)) (=> (= (DatatypeCtorId d@@106) |##MapSpec.Step.WriteStep|) (MapSpec.Step.WriteStep_q d@@106)))) :qid |unknown.0:0| :skolemid |3759| :pattern ( (MapSpec.Step.WriteStep_q d@@106)) )))
(assert (forall ((d@@107 T@U) ) (!  (=> (and (= (type d@@107) DatatypeTypeType) (MapSpec.Step.WriteStep_q d@@107)) (exists ((|a#137#0#0| T@U) (|a#137#1#0| T@U) ) (!  (and (and (= (type |a#137#0#0|) (SeqType BoxType)) (= (type |a#137#1#0|) (SeqType BoxType))) (= d@@107 (|#MapSpec.Step.WriteStep| |a#137#0#0| |a#137#1#0|))) :qid |MapSpecs.120:19| :skolemid |3760| :no-pattern (type |a#137#0#0|) :no-pattern (type |a#137#1#0|) :no-pattern (U_2_int |a#137#0#0|) :no-pattern (U_2_bool |a#137#0#0|) :no-pattern (U_2_int |a#137#1#0|) :no-pattern (U_2_bool |a#137#1#0|) ))) :qid |unknown.0:0| :skolemid |3761| :pattern ( (MapSpec.Step.WriteStep_q d@@107)) )))
(assert (forall ((|a#138#0#0| T@U) (|a#138#1#0| T@U) ) (!  (=> (and (= (type |a#138#0#0|) (SeqType BoxType)) (= (type |a#138#1#0|) (SeqType BoxType))) (and (=> ($Is (|#MapSpec.Step.WriteStep| |a#138#0#0| |a#138#1#0|) Tclass.MapSpec.Step) (and ($Is |a#138#0#0| Tclass.KeyType.Key) ($Is |a#138#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#138#0#0| Tclass.KeyType.Key) ($Is |a#138#1#0| Tclass.ValueType.Value)) ($Is (|#MapSpec.Step.WriteStep| |a#138#0#0| |a#138#1#0|) Tclass.MapSpec.Step)))) :qid |MapSpecs.120:19| :skolemid |3762| :pattern ( ($Is (|#MapSpec.Step.WriteStep| |a#138#0#0| |a#138#1#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#139#0#0| T@U) (|a#139#1#0| T@U) ($h@@107 T@U) ) (!  (=> (and (and (and (= (type |a#139#0#0|) (SeqType BoxType)) (= (type |a#139#1#0|) (SeqType BoxType))) (= (type $h@@107) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@107)) (and (=> ($IsAlloc (|#MapSpec.Step.WriteStep| |a#139#0#0| |a#139#1#0|) Tclass.MapSpec.Step $h@@107) (and ($IsAlloc |a#139#0#0| Tclass.KeyType.Key $h@@107) ($IsAlloc |a#139#1#0| Tclass.ValueType.Value $h@@107))) (=> (and ($IsAlloc |a#139#0#0| Tclass.KeyType.Key $h@@107) ($IsAlloc |a#139#1#0| Tclass.ValueType.Value $h@@107)) ($IsAlloc (|#MapSpec.Step.WriteStep| |a#139#0#0| |a#139#1#0|) Tclass.MapSpec.Step $h@@107)))) :qid |MapSpecs.120:19| :skolemid |3763| :pattern ( ($IsAlloc (|#MapSpec.Step.WriteStep| |a#139#0#0| |a#139#1#0|) Tclass.MapSpec.Step $h@@107)) )))
(assert (forall ((d@@108 T@U) ($h@@108 T@U) ) (!  (=> (and (and (= (type d@@108) DatatypeTypeType) (= (type $h@@108) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@108) (and (MapSpec.Step.WriteStep_q d@@108) ($IsAlloc d@@108 Tclass.MapSpec.Step $h@@108)))) ($IsAlloc (MapSpec.Step.key d@@108) Tclass.KeyType.Key $h@@108)) :qid |unknown.0:0| :skolemid |3764| :pattern ( ($IsAlloc (MapSpec.Step.key d@@108) Tclass.KeyType.Key $h@@108)) )))
(assert (forall ((arg0@@517 T@U) ) (! (= (type (MapSpec.Step.new__value arg0@@517)) (SeqType BoxType)) :qid |funType:MapSpec.Step.new__value| :pattern ( (MapSpec.Step.new__value arg0@@517)) )))
(assert (forall ((d@@109 T@U) ($h@@109 T@U) ) (!  (=> (and (and (= (type d@@109) DatatypeTypeType) (= (type $h@@109) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@109) (and (MapSpec.Step.WriteStep_q d@@109) ($IsAlloc d@@109 Tclass.MapSpec.Step $h@@109)))) ($IsAlloc (MapSpec.Step.new__value d@@109) Tclass.ValueType.Value $h@@109)) :qid |unknown.0:0| :skolemid |3765| :pattern ( ($IsAlloc (MapSpec.Step.new__value d@@109) Tclass.ValueType.Value $h@@109)) )))
(assert (forall ((|a#140#0#0| T@U) (|a#140#1#0| T@U) ) (!  (=> (and (= (type |a#140#0#0|) (SeqType BoxType)) (= (type |a#140#1#0|) (SeqType BoxType))) (= (|#MapSpec.Step.WriteStep| (Lit |a#140#0#0|) (Lit |a#140#1#0|)) (Lit (|#MapSpec.Step.WriteStep| |a#140#0#0| |a#140#1#0|)))) :qid |MapSpecs.120:19| :skolemid |3766| :pattern ( (|#MapSpec.Step.WriteStep| (Lit |a#140#0#0|) (Lit |a#140#1#0|))) )))
(assert (forall ((|a#141#0#0| T@U) (|a#141#1#0| T@U) ) (!  (=> (and (= (type |a#141#0#0|) (SeqType BoxType)) (= (type |a#141#1#0|) (SeqType BoxType))) (= (MapSpec.Step.key (|#MapSpec.Step.WriteStep| |a#141#0#0| |a#141#1#0|)) |a#141#0#0|)) :qid |MapSpecs.120:19| :skolemid |3767| :pattern ( (|#MapSpec.Step.WriteStep| |a#141#0#0| |a#141#1#0|)) )))
(assert (forall ((|a#142#0#0| T@U) (|a#142#1#0| T@U) ) (!  (=> (and (= (type |a#142#0#0|) (SeqType BoxType)) (= (type |a#142#1#0|) (SeqType BoxType))) (= (MapSpec.Step.new__value (|#MapSpec.Step.WriteStep| |a#142#0#0| |a#142#1#0|)) |a#142#1#0|)) :qid |MapSpecs.120:19| :skolemid |3768| :pattern ( (|#MapSpec.Step.WriteStep| |a#142#0#0| |a#142#1#0|)) )))
(assert (forall ((arg0@@518 T@U) (arg1@@300 T@U) (arg2@@208 T@U) ) (! (= (type (|#MapSpec.Step.SuccStep| arg0@@518 arg1@@300 arg2@@208)) DatatypeTypeType) :qid |funType:#MapSpec.Step.SuccStep| :pattern ( (|#MapSpec.Step.SuccStep| arg0@@518 arg1@@300 arg2@@208)) )))
(assert (forall ((|a#143#0#0| T@U) (|a#143#1#0| T@U) (|a#143#2#0| T@U) ) (!  (=> (and (and (= (type |a#143#0#0|) DatatypeTypeType) (= (type |a#143#1#0|) (SeqType BoxType))) (= (type |a#143#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#MapSpec.Step.SuccStep| |a#143#0#0| |a#143#1#0| |a#143#2#0|)) |##MapSpec.Step.SuccStep|)) :qid |MapSpecs.121:18| :skolemid |3769| :pattern ( (|#MapSpec.Step.SuccStep| |a#143#0#0| |a#143#1#0| |a#143#2#0|)) )))
(assert (forall ((d@@110 T@U) ) (!  (=> (= (type d@@110) DatatypeTypeType) (and (=> (MapSpec.Step.SuccStep_q d@@110) (= (DatatypeCtorId d@@110) |##MapSpec.Step.SuccStep|)) (=> (= (DatatypeCtorId d@@110) |##MapSpec.Step.SuccStep|) (MapSpec.Step.SuccStep_q d@@110)))) :qid |unknown.0:0| :skolemid |3770| :pattern ( (MapSpec.Step.SuccStep_q d@@110)) )))
(assert (forall ((d@@111 T@U) ) (!  (=> (and (= (type d@@111) DatatypeTypeType) (MapSpec.Step.SuccStep_q d@@111)) (exists ((|a#144#0#0| T@U) (|a#144#1#0| T@U) (|a#144#2#0| T@U) ) (!  (and (and (and (= (type |a#144#0#0|) DatatypeTypeType) (= (type |a#144#1#0|) (SeqType BoxType))) (= (type |a#144#2#0|) DatatypeTypeType)) (= d@@111 (|#MapSpec.Step.SuccStep| |a#144#0#0| |a#144#1#0| |a#144#2#0|))) :qid |MapSpecs.121:18| :skolemid |3771| :no-pattern (type |a#144#0#0|) :no-pattern (type |a#144#1#0|) :no-pattern (type |a#144#2#0|) :no-pattern (U_2_int |a#144#0#0|) :no-pattern (U_2_bool |a#144#0#0|) :no-pattern (U_2_int |a#144#1#0|) :no-pattern (U_2_bool |a#144#1#0|) :no-pattern (U_2_int |a#144#2#0|) :no-pattern (U_2_bool |a#144#2#0|) ))) :qid |unknown.0:0| :skolemid |3772| :pattern ( (MapSpec.Step.SuccStep_q d@@111)) )))
(assert (forall ((|a#145#0#0| T@U) (|a#145#1#0| T@U) (|a#145#2#0| T@U) ) (!  (=> (and (and (= (type |a#145#0#0|) DatatypeTypeType) (= (type |a#145#1#0|) (SeqType BoxType))) (= (type |a#145#2#0|) DatatypeTypeType)) (and (=> ($Is (|#MapSpec.Step.SuccStep| |a#145#0#0| |a#145#1#0| |a#145#2#0|) Tclass.MapSpec.Step) (and (and ($Is |a#145#0#0| Tclass.UI.RangeStart) ($Is |a#145#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#145#2#0| Tclass.UI.RangeEnd))) (=> (and (and ($Is |a#145#0#0| Tclass.UI.RangeStart) ($Is |a#145#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#145#2#0| Tclass.UI.RangeEnd)) ($Is (|#MapSpec.Step.SuccStep| |a#145#0#0| |a#145#1#0| |a#145#2#0|) Tclass.MapSpec.Step)))) :qid |MapSpecs.121:18| :skolemid |3773| :pattern ( ($Is (|#MapSpec.Step.SuccStep| |a#145#0#0| |a#145#1#0| |a#145#2#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#146#0#0| T@U) (|a#146#1#0| T@U) (|a#146#2#0| T@U) ($h@@110 T@U) ) (!  (=> (and (and (and (and (= (type |a#146#0#0|) DatatypeTypeType) (= (type |a#146#1#0|) (SeqType BoxType))) (= (type |a#146#2#0|) DatatypeTypeType)) (= (type $h@@110) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@110)) (and (=> ($IsAlloc (|#MapSpec.Step.SuccStep| |a#146#0#0| |a#146#1#0| |a#146#2#0|) Tclass.MapSpec.Step $h@@110) (and (and ($IsAlloc |a#146#0#0| Tclass.UI.RangeStart $h@@110) ($IsAlloc |a#146#1#0| (TSeq Tclass.UI.SuccResult) $h@@110)) ($IsAlloc |a#146#2#0| Tclass.UI.RangeEnd $h@@110))) (=> (and (and ($IsAlloc |a#146#0#0| Tclass.UI.RangeStart $h@@110) ($IsAlloc |a#146#1#0| (TSeq Tclass.UI.SuccResult) $h@@110)) ($IsAlloc |a#146#2#0| Tclass.UI.RangeEnd $h@@110)) ($IsAlloc (|#MapSpec.Step.SuccStep| |a#146#0#0| |a#146#1#0| |a#146#2#0|) Tclass.MapSpec.Step $h@@110)))) :qid |MapSpecs.121:18| :skolemid |3774| :pattern ( ($IsAlloc (|#MapSpec.Step.SuccStep| |a#146#0#0| |a#146#1#0| |a#146#2#0|) Tclass.MapSpec.Step $h@@110)) )))
(assert (forall ((arg0@@519 T@U) ) (! (= (type (MapSpec.Step.start arg0@@519)) DatatypeTypeType) :qid |funType:MapSpec.Step.start| :pattern ( (MapSpec.Step.start arg0@@519)) )))
(assert (forall ((d@@112 T@U) ($h@@111 T@U) ) (!  (=> (and (and (= (type d@@112) DatatypeTypeType) (= (type $h@@111) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@111) (and (MapSpec.Step.SuccStep_q d@@112) ($IsAlloc d@@112 Tclass.MapSpec.Step $h@@111)))) ($IsAlloc (MapSpec.Step.start d@@112) Tclass.UI.RangeStart $h@@111)) :qid |unknown.0:0| :skolemid |3775| :pattern ( ($IsAlloc (MapSpec.Step.start d@@112) Tclass.UI.RangeStart $h@@111)) )))
(assert (forall ((arg0@@520 T@U) ) (! (= (type (MapSpec.Step.results arg0@@520)) (SeqType BoxType)) :qid |funType:MapSpec.Step.results| :pattern ( (MapSpec.Step.results arg0@@520)) )))
(assert (forall ((d@@113 T@U) ($h@@112 T@U) ) (!  (=> (and (and (= (type d@@113) DatatypeTypeType) (= (type $h@@112) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@112) (and (MapSpec.Step.SuccStep_q d@@113) ($IsAlloc d@@113 Tclass.MapSpec.Step $h@@112)))) ($IsAlloc (MapSpec.Step.results d@@113) (TSeq Tclass.UI.SuccResult) $h@@112)) :qid |unknown.0:0| :skolemid |3776| :pattern ( ($IsAlloc (MapSpec.Step.results d@@113) (TSeq Tclass.UI.SuccResult) $h@@112)) )))
(assert (forall ((arg0@@521 T@U) ) (! (= (type (MapSpec.Step.end arg0@@521)) DatatypeTypeType) :qid |funType:MapSpec.Step.end| :pattern ( (MapSpec.Step.end arg0@@521)) )))
(assert (forall ((d@@114 T@U) ($h@@113 T@U) ) (!  (=> (and (and (= (type d@@114) DatatypeTypeType) (= (type $h@@113) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@113) (and (MapSpec.Step.SuccStep_q d@@114) ($IsAlloc d@@114 Tclass.MapSpec.Step $h@@113)))) ($IsAlloc (MapSpec.Step.end d@@114) Tclass.UI.RangeEnd $h@@113)) :qid |unknown.0:0| :skolemid |3777| :pattern ( ($IsAlloc (MapSpec.Step.end d@@114) Tclass.UI.RangeEnd $h@@113)) )))
(assert (forall ((|a#147#0#0| T@U) (|a#147#1#0| T@U) (|a#147#2#0| T@U) ) (!  (=> (and (and (= (type |a#147#0#0|) DatatypeTypeType) (= (type |a#147#1#0|) (SeqType BoxType))) (= (type |a#147#2#0|) DatatypeTypeType)) (= (|#MapSpec.Step.SuccStep| (Lit |a#147#0#0|) (Lit |a#147#1#0|) (Lit |a#147#2#0|)) (Lit (|#MapSpec.Step.SuccStep| |a#147#0#0| |a#147#1#0| |a#147#2#0|)))) :qid |MapSpecs.121:18| :skolemid |3778| :pattern ( (|#MapSpec.Step.SuccStep| (Lit |a#147#0#0|) (Lit |a#147#1#0|) (Lit |a#147#2#0|))) )))
(assert (forall ((|a#148#0#0| T@U) (|a#148#1#0| T@U) (|a#148#2#0| T@U) ) (!  (=> (and (and (= (type |a#148#0#0|) DatatypeTypeType) (= (type |a#148#1#0|) (SeqType BoxType))) (= (type |a#148#2#0|) DatatypeTypeType)) (= (MapSpec.Step.start (|#MapSpec.Step.SuccStep| |a#148#0#0| |a#148#1#0| |a#148#2#0|)) |a#148#0#0|)) :qid |MapSpecs.121:18| :skolemid |3779| :pattern ( (|#MapSpec.Step.SuccStep| |a#148#0#0| |a#148#1#0| |a#148#2#0|)) )))
(assert (forall ((|a#149#0#0| T@U) (|a#149#1#0| T@U) (|a#149#2#0| T@U) ) (!  (=> (and (and (= (type |a#149#0#0|) DatatypeTypeType) (= (type |a#149#1#0|) (SeqType BoxType))) (= (type |a#149#2#0|) DatatypeTypeType)) (< (DtRank |a#149#0#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#149#0#0| |a#149#1#0| |a#149#2#0|)))) :qid |MapSpecs.121:18| :skolemid |3780| :pattern ( (|#MapSpec.Step.SuccStep| |a#149#0#0| |a#149#1#0| |a#149#2#0|)) )))
(assert (forall ((|a#150#0#0| T@U) (|a#150#1#0| T@U) (|a#150#2#0| T@U) ) (!  (=> (and (and (= (type |a#150#0#0|) DatatypeTypeType) (= (type |a#150#1#0|) (SeqType BoxType))) (= (type |a#150#2#0|) DatatypeTypeType)) (= (MapSpec.Step.results (|#MapSpec.Step.SuccStep| |a#150#0#0| |a#150#1#0| |a#150#2#0|)) |a#150#1#0|)) :qid |MapSpecs.121:18| :skolemid |3781| :pattern ( (|#MapSpec.Step.SuccStep| |a#150#0#0| |a#150#1#0| |a#150#2#0|)) )))
(assert (forall ((|a#151#0#0| T@U) (|a#151#1#0| T@U) (|a#151#2#0| T@U) (i@@35 Int) ) (!  (=> (and (and (and (= (type |a#151#0#0|) DatatypeTypeType) (= (type |a#151#1#0|) (SeqType BoxType))) (= (type |a#151#2#0|) DatatypeTypeType)) (and (<= 0 i@@35) (< i@@35 (|Seq#Length| |a#151#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#151#1#0| i@@35))) (DtRank (|#MapSpec.Step.SuccStep| |a#151#0#0| |a#151#1#0| |a#151#2#0|)))) :qid |MapSpecs.121:18| :skolemid |3782| :pattern ( (|Seq#Index| |a#151#1#0| i@@35) (|#MapSpec.Step.SuccStep| |a#151#0#0| |a#151#1#0| |a#151#2#0|)) )))
(assert (forall ((|a#152#0#0| T@U) (|a#152#1#0| T@U) (|a#152#2#0| T@U) ) (!  (=> (and (and (= (type |a#152#0#0|) DatatypeTypeType) (= (type |a#152#1#0|) (SeqType BoxType))) (= (type |a#152#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#152#1#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#152#0#0| |a#152#1#0| |a#152#2#0|)))) :qid |MapSpecs.121:18| :skolemid |3783| :pattern ( (|#MapSpec.Step.SuccStep| |a#152#0#0| |a#152#1#0| |a#152#2#0|)) )))
(assert (forall ((|a#153#0#0| T@U) (|a#153#1#0| T@U) (|a#153#2#0| T@U) ) (!  (=> (and (and (= (type |a#153#0#0|) DatatypeTypeType) (= (type |a#153#1#0|) (SeqType BoxType))) (= (type |a#153#2#0|) DatatypeTypeType)) (= (MapSpec.Step.end (|#MapSpec.Step.SuccStep| |a#153#0#0| |a#153#1#0| |a#153#2#0|)) |a#153#2#0|)) :qid |MapSpecs.121:18| :skolemid |3784| :pattern ( (|#MapSpec.Step.SuccStep| |a#153#0#0| |a#153#1#0| |a#153#2#0|)) )))
(assert (forall ((|a#154#0#0| T@U) (|a#154#1#0| T@U) (|a#154#2#0| T@U) ) (!  (=> (and (and (= (type |a#154#0#0|) DatatypeTypeType) (= (type |a#154#1#0|) (SeqType BoxType))) (= (type |a#154#2#0|) DatatypeTypeType)) (< (DtRank |a#154#2#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#154#0#0| |a#154#1#0| |a#154#2#0|)))) :qid |MapSpecs.121:18| :skolemid |3785| :pattern ( (|#MapSpec.Step.SuccStep| |a#154#0#0| |a#154#1#0| |a#154#2#0|)) )))
(assert (= (type |#MapSpec.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MapSpec.Step.StutterStep|) |##MapSpec.Step.StutterStep|))
(assert (forall ((d@@115 T@U) ) (!  (=> (= (type d@@115) DatatypeTypeType) (and (=> (MapSpec.Step.StutterStep_q d@@115) (= (DatatypeCtorId d@@115) |##MapSpec.Step.StutterStep|)) (=> (= (DatatypeCtorId d@@115) |##MapSpec.Step.StutterStep|) (MapSpec.Step.StutterStep_q d@@115)))) :qid |unknown.0:0| :skolemid |3786| :pattern ( (MapSpec.Step.StutterStep_q d@@115)) )))
(assert (forall ((d@@116 T@U) ) (!  (=> (and (= (type d@@116) DatatypeTypeType) (MapSpec.Step.StutterStep_q d@@116)) (= d@@116 |#MapSpec.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |3787| :pattern ( (MapSpec.Step.StutterStep_q d@@116)) )))
(assert ($Is |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step))
(assert (forall (($h@@114 T@U) ) (!  (=> (and (= (type $h@@114) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@114)) ($IsAlloc |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step $h@@114)) :qid |DafnyPre.521:12| :skolemid |3788| :pattern ( ($IsAlloc |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step $h@@114)) )))
(assert (= |#MapSpec.Step.StutterStep| (Lit |#MapSpec.Step.StutterStep|)))
(assert (forall ((d@@117 T@U) ) (!  (=> (and (= (type d@@117) DatatypeTypeType) (|$IsA#MapSpec.Step| d@@117)) (or (or (or (MapSpec.Step.QueryStep_q d@@117) (MapSpec.Step.WriteStep_q d@@117)) (MapSpec.Step.SuccStep_q d@@117)) (MapSpec.Step.StutterStep_q d@@117))) :qid |unknown.0:0| :skolemid |3789| :pattern ( (|$IsA#MapSpec.Step| d@@117)) )))
(assert (forall ((d@@118 T@U) ) (!  (=> (and (= (type d@@118) DatatypeTypeType) ($Is d@@118 Tclass.MapSpec.Step)) (or (or (or (MapSpec.Step.QueryStep_q d@@118) (MapSpec.Step.WriteStep_q d@@118)) (MapSpec.Step.SuccStep_q d@@118)) (MapSpec.Step.StutterStep_q d@@118))) :qid |unknown.0:0| :skolemid |3790| :pattern ( (MapSpec.Step.StutterStep_q d@@118) ($Is d@@118 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.SuccStep_q d@@118) ($Is d@@118 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.WriteStep_q d@@118) ($Is d@@118 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.QueryStep_q d@@118) ($Is d@@118 Tclass.MapSpec.Step)) )))
(assert (forall ((a@@167 T@U) (b@@98 T@U) ) (!  (=> (and (and (= (type a@@167) DatatypeTypeType) (= (type b@@98) DatatypeTypeType)) (and (MapSpec.Step.QueryStep_q a@@167) (MapSpec.Step.QueryStep_q b@@98))) (and (=> (|MapSpec.Step#Equal| a@@167 b@@98) (and (|Seq#Equal| (MapSpec.Step.key a@@167) (MapSpec.Step.key b@@98)) (|Seq#Equal| (MapSpec.Step.result a@@167) (MapSpec.Step.result b@@98)))) (=> (and (|Seq#Equal| (MapSpec.Step.key a@@167) (MapSpec.Step.key b@@98)) (|Seq#Equal| (MapSpec.Step.result a@@167) (MapSpec.Step.result b@@98))) (|MapSpec.Step#Equal| a@@167 b@@98)))) :qid |unknown.0:0| :skolemid |3791| :pattern ( (|MapSpec.Step#Equal| a@@167 b@@98) (MapSpec.Step.QueryStep_q a@@167)) :pattern ( (|MapSpec.Step#Equal| a@@167 b@@98) (MapSpec.Step.QueryStep_q b@@98)) )))
(assert (forall ((a@@168 T@U) (b@@99 T@U) ) (!  (=> (and (and (= (type a@@168) DatatypeTypeType) (= (type b@@99) DatatypeTypeType)) (and (MapSpec.Step.WriteStep_q a@@168) (MapSpec.Step.WriteStep_q b@@99))) (and (=> (|MapSpec.Step#Equal| a@@168 b@@99) (and (|Seq#Equal| (MapSpec.Step.key a@@168) (MapSpec.Step.key b@@99)) (|Seq#Equal| (MapSpec.Step.new__value a@@168) (MapSpec.Step.new__value b@@99)))) (=> (and (|Seq#Equal| (MapSpec.Step.key a@@168) (MapSpec.Step.key b@@99)) (|Seq#Equal| (MapSpec.Step.new__value a@@168) (MapSpec.Step.new__value b@@99))) (|MapSpec.Step#Equal| a@@168 b@@99)))) :qid |unknown.0:0| :skolemid |3792| :pattern ( (|MapSpec.Step#Equal| a@@168 b@@99) (MapSpec.Step.WriteStep_q a@@168)) :pattern ( (|MapSpec.Step#Equal| a@@168 b@@99) (MapSpec.Step.WriteStep_q b@@99)) )))
(assert (forall ((a@@169 T@U) (b@@100 T@U) ) (!  (=> (and (and (= (type a@@169) DatatypeTypeType) (= (type b@@100) DatatypeTypeType)) (and (MapSpec.Step.SuccStep_q a@@169) (MapSpec.Step.SuccStep_q b@@100))) (and (=> (|MapSpec.Step#Equal| a@@169 b@@100) (and (and (|UI.RangeStart#Equal| (MapSpec.Step.start a@@169) (MapSpec.Step.start b@@100)) (|Seq#Equal| (MapSpec.Step.results a@@169) (MapSpec.Step.results b@@100))) (|UI.RangeEnd#Equal| (MapSpec.Step.end a@@169) (MapSpec.Step.end b@@100)))) (=> (and (and (|UI.RangeStart#Equal| (MapSpec.Step.start a@@169) (MapSpec.Step.start b@@100)) (|Seq#Equal| (MapSpec.Step.results a@@169) (MapSpec.Step.results b@@100))) (|UI.RangeEnd#Equal| (MapSpec.Step.end a@@169) (MapSpec.Step.end b@@100))) (|MapSpec.Step#Equal| a@@169 b@@100)))) :qid |unknown.0:0| :skolemid |3793| :pattern ( (|MapSpec.Step#Equal| a@@169 b@@100) (MapSpec.Step.SuccStep_q a@@169)) :pattern ( (|MapSpec.Step#Equal| a@@169 b@@100) (MapSpec.Step.SuccStep_q b@@100)) )))
(assert (forall ((a@@170 T@U) (b@@101 T@U) ) (!  (=> (and (and (= (type a@@170) DatatypeTypeType) (= (type b@@101) DatatypeTypeType)) (and (MapSpec.Step.StutterStep_q a@@170) (MapSpec.Step.StutterStep_q b@@101))) (and (=> (|MapSpec.Step#Equal| a@@170 b@@101) true) (=> true (|MapSpec.Step#Equal| a@@170 b@@101)))) :qid |unknown.0:0| :skolemid |3794| :pattern ( (|MapSpec.Step#Equal| a@@170 b@@101) (MapSpec.Step.StutterStep_q a@@170)) :pattern ( (|MapSpec.Step#Equal| a@@170 b@@101) (MapSpec.Step.StutterStep_q b@@101)) )))
(assert (forall ((a@@171 T@U) (b@@102 T@U) ) (!  (=> (and (= (type a@@171) DatatypeTypeType) (= (type b@@102) DatatypeTypeType)) (and (=> (|MapSpec.Step#Equal| a@@171 b@@102) (= a@@171 b@@102)) (=> (= a@@171 b@@102) (|MapSpec.Step#Equal| a@@171 b@@102)))) :qid |unknown.0:0| :skolemid |3795| :pattern ( (|MapSpec.Step#Equal| a@@171 b@@102)) )))
(assert (= (type Tclass.MapSpec.__default) TyType))
(assert (= (Tag Tclass.MapSpec.__default) Tagclass.MapSpec.__default))
(assert (forall ((bx@@152 T@U) ) (!  (=> (and (= (type bx@@152) BoxType) ($IsBox bx@@152 Tclass.MapSpec.__default)) (and (= ($Box ($Unbox refType bx@@152)) bx@@152) ($Is ($Unbox refType bx@@152) Tclass.MapSpec.__default))) :qid |unknown.0:0| :skolemid |3796| :pattern ( ($IsBox bx@@152 Tclass.MapSpec.__default)) )))
(assert (forall (($o@@44 T@U) ) (!  (=> (= (type $o@@44) refType) (and (=> ($Is $o@@44 Tclass.MapSpec.__default) (or (= $o@@44 null) (= (dtype $o@@44) Tclass.MapSpec.__default))) (=> (or (= $o@@44 null) (= (dtype $o@@44) Tclass.MapSpec.__default)) ($Is $o@@44 Tclass.MapSpec.__default)))) :qid |unknown.0:0| :skolemid |3797| :pattern ( ($Is $o@@44 Tclass.MapSpec.__default)) )))
(assert (forall (($o@@45 T@U) ($h@@115 T@U) ) (!  (=> (and (= (type $o@@45) refType) (= (type $h@@115) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@45 Tclass.MapSpec.__default $h@@115) (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@115 $o@@45) alloc)))) (=> (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@115 $o@@45) alloc))) ($IsAlloc $o@@45 Tclass.MapSpec.__default $h@@115)))) :qid |unknown.0:0| :skolemid |3798| :pattern ( ($IsAlloc $o@@45 Tclass.MapSpec.__default $h@@115)) )))
(assert (= (type MapSpec.__default.EmptyValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is MapSpec.__default.EmptyValue Tclass.ValueType.Value))))
(assert  (=> |MapSpec.__default.EmptyValue#requires| true))
(assert  (=> true |MapSpec.__default.EmptyValue#requires|))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= MapSpec.__default.EmptyValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= MapSpec.__default.EmptyValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (forall ((|view#0| T@U) ) (!  (=> (and (= (type |view#0|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| |view#0|) ($Is |view#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) true) :qid |MapSpecs.23:26| :skolemid |3799| :pattern ( (MapSpec.__default.ViewComplete |view#0|)) ))))
(assert (forall ((|view#0@@0| T@U) ) (!  (=> (and (= (type |view#0@@0|) (IMapType BoxType BoxType)) ($Is |view#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))) (and (=> (|MapSpec.__default.ViewComplete#requires| |view#0@@0|) true) (=> true (|MapSpec.__default.ViewComplete#requires| |view#0@@0|)))) :qid |MapSpecs.23:26| :skolemid |3800| :pattern ( (|MapSpec.__default.ViewComplete#requires| |view#0@@0|)) )))
(assert  (=> true (forall ((|view#0@@1| T@U) ) (!  (=> (and (= (type |view#0@@1|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| |view#0@@1|) ($Is |view#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (and (=> (MapSpec.__default.ViewComplete |view#0@@1|) (forall ((|k#0@@50| T@U) ) (!  (=> (and (= (type |k#0@@50|) (SeqType BoxType)) ($Is |k#0@@50| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0@@50|)))) :qid |MapSpecs.25:12| :skolemid |3801| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0@@50|))) ))) (=> (forall ((|k#0@@51| T@U) ) (!  (=> (and (= (type |k#0@@51|) (SeqType BoxType)) ($Is |k#0@@51| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0@@51|)))) :qid |MapSpecs.25:12| :skolemid |3801| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0@@51|))) )) (MapSpec.__default.ViewComplete |view#0@@1|)))) :qid |MapSpecs.23:26| :skolemid |3802| :pattern ( (MapSpec.__default.ViewComplete |view#0@@1|)) ))))
(assert  (=> true (forall ((|view#0@@2| T@U) ) (!  (=> (and (= (type |view#0@@2|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| (Lit |view#0@@2|)) ($Is |view#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (and (=> (MapSpec.__default.ViewComplete (Lit |view#0@@2|)) (forall ((|k#1@@12| T@U) ) (!  (=> (and (= (type |k#1@@12|) (SeqType BoxType)) ($Is |k#1@@12| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1@@12|)))) :qid |MapSpecs.25:12| :skolemid |3803| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1@@12|))) ))) (=> (forall ((|k#1@@13| T@U) ) (!  (=> (and (= (type |k#1@@13|) (SeqType BoxType)) ($Is |k#1@@13| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1@@13|)))) :qid |MapSpecs.25:12| :skolemid |3803| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1@@13|))) )) (MapSpec.__default.ViewComplete (Lit |view#0@@2|))))) :qid |MapSpecs.23:26| :weight 3 :skolemid |3804| :pattern ( (MapSpec.__default.ViewComplete (Lit |view#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@160| T@U) ) (!  (=> (and (= (type |s#0@@160|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| |s#0@@160|) ($Is |s#0@@160| Tclass.MapSpec.Variables))) true) :qid |MapSpecs.28:16| :skolemid |3805| :pattern ( (MapSpec.__default.WF |s#0@@160|)) ))))
(assert (forall ((|s#0@@161| T@U) ) (!  (=> (and (= (type |s#0@@161|) DatatypeTypeType) ($Is |s#0@@161| Tclass.MapSpec.Variables)) (and (=> (|MapSpec.__default.WF#requires| |s#0@@161|) true) (=> true (|MapSpec.__default.WF#requires| |s#0@@161|)))) :qid |MapSpecs.28:16| :skolemid |3806| :pattern ( (|MapSpec.__default.WF#requires| |s#0@@161|)) )))
(assert  (=> true (forall ((|s#0@@162| T@U) ) (!  (=> (and (= (type |s#0@@162|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| |s#0@@162|) ($Is |s#0@@162| Tclass.MapSpec.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpec.Variables.Variables_q |s#0@@162|) (|MapSpec.__default.ViewComplete#canCall| (MapSpec.Variables.view |s#0@@162|)))) (and (=> (MapSpec.__default.WF |s#0@@162|) (and true (MapSpec.__default.ViewComplete (MapSpec.Variables.view |s#0@@162|)))) (=> (and true (MapSpec.__default.ViewComplete (MapSpec.Variables.view |s#0@@162|))) (MapSpec.__default.WF |s#0@@162|))))) :qid |MapSpecs.28:16| :skolemid |3807| :pattern ( (MapSpec.__default.WF |s#0@@162|)) ))))
(assert  (=> true (forall ((|s#0@@163| T@U) ) (!  (=> (and (= (type |s#0@@163|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| (Lit |s#0@@163|)) ($Is |s#0@@163| Tclass.MapSpec.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpec.Variables.Variables_q (Lit |s#0@@163|)) (|MapSpec.__default.ViewComplete#canCall| (Lit (MapSpec.Variables.view (Lit |s#0@@163|)))))) (and (=> (MapSpec.__default.WF (Lit |s#0@@163|)) (U_2_bool (Lit (bool_2_U  (and true (MapSpec.__default.ViewComplete (Lit (MapSpec.Variables.view (Lit |s#0@@163|))))))))) (=> (U_2_bool (Lit (bool_2_U  (and true (MapSpec.__default.ViewComplete (Lit (MapSpec.Variables.view (Lit |s#0@@163|)))))))) (MapSpec.__default.WF (Lit |s#0@@163|)))))) :qid |MapSpecs.28:16| :weight 3 :skolemid |3808| :pattern ( (MapSpec.__default.WF (Lit |s#0@@163|))) ))))
(assert  (=> true (forall ((|k#0@@52| T@U) ) (!  (=> (and (= (type |k#0@@52|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| |k#0@@52|) ($Is |k#0@@52| Tclass.KeyType.Key))) true) :qid |MapSpecs.35:22| :skolemid |3809| :pattern ( (MapSpec.__default.InDomain |k#0@@52|)) ))))
(assert (forall ((|k#0@@53| T@U) ) (!  (=> (and (= (type |k#0@@53|) (SeqType BoxType)) ($Is |k#0@@53| Tclass.KeyType.Key)) (and (=> (|MapSpec.__default.InDomain#requires| |k#0@@53|) true) (=> true (|MapSpec.__default.InDomain#requires| |k#0@@53|)))) :qid |MapSpecs.35:22| :skolemid |3810| :pattern ( (|MapSpec.__default.InDomain#requires| |k#0@@53|)) )))
(assert  (=> true (forall ((|k#0@@54| T@U) ) (!  (=> (and (= (type |k#0@@54|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| |k#0@@54|) ($Is |k#0@@54| Tclass.KeyType.Key))) (and (=> (MapSpec.__default.InDomain |k#0@@54|) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (MapSpec.__default.InDomain |k#0@@54|)))) :qid |MapSpecs.35:22| :skolemid |3811| :pattern ( (MapSpec.__default.InDomain |k#0@@54|)) ))))
(assert  (=> true (forall ((|k#0@@55| T@U) ) (!  (=> (and (= (type |k#0@@55|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| (Lit |k#0@@55|)) ($Is |k#0@@55| Tclass.KeyType.Key))) (and (=> (MapSpec.__default.InDomain (Lit |k#0@@55|)) (U_2_bool (Lit (bool_2_U true)))) (=> (U_2_bool (Lit (bool_2_U true))) (MapSpec.__default.InDomain (Lit |k#0@@55|))))) :qid |MapSpecs.35:22| :weight 3 :skolemid |3812| :pattern ( (MapSpec.__default.InDomain (Lit |k#0@@55|))) ))))
(assert (= (type MapSpec.__default.EmptyMap) (IMapType BoxType BoxType)))
(assert  (=> true (=> true (and (MapSpec.__default.ViewComplete MapSpec.__default.EmptyMap) ($Is MapSpec.__default.EmptyMap (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))))))
(assert  (=> |MapSpec.__default.EmptyMap#requires| true))
(assert  (=> true |MapSpec.__default.EmptyMap#requires|))
(assert  (and (forall ((arg0@@522 T@U) ) (! (= (type (|lambda#567| arg0@@522)) (MapType0Type BoxType boolType)) :qid |funType:lambda#567| :pattern ( (|lambda#567| arg0@@522)) )) (forall ((arg0@@523 T@U) ) (! (= (type (|lambda#568| arg0@@523)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#568| :pattern ( (|lambda#568| arg0@@523)) ))))
(assert  (=> true (=> true (and (forall ((|k#0@@56| T@U) ) (!  (=> (and (= (type |k#0@@56|) (SeqType BoxType)) ($Is |k#0@@56| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |k#0@@56|) (=> (MapSpec.__default.InDomain |k#0@@56|) |MapSpec.__default.EmptyValue#canCall|))) :qid |MapSpecs.43:10| :skolemid |3813| :pattern ( (MapSpec.__default.InDomain |k#0@@56|)) )) (= MapSpec.__default.EmptyMap (|IMap#Glue| (|lambda#567| Tclass.KeyType.Key) (|lambda#568| ($Box (Lit MapSpec.__default.EmptyValue))) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))))))
(assert  (=> true (=> true (and (forall ((|k#0@@57| T@U) ) (!  (=> (and (= (type |k#0@@57|) (SeqType BoxType)) ($Is |k#0@@57| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |k#0@@57|) (=> (MapSpec.__default.InDomain |k#0@@57|) |MapSpec.__default.EmptyValue#canCall|))) :qid |MapSpecs.43:10| :skolemid |3814| :pattern ( (MapSpec.__default.InDomain |k#0@@57|)) )) (= MapSpec.__default.EmptyMap (|IMap#Glue| (|lambda#567| Tclass.KeyType.Key) (|lambda#568| ($Box (Lit MapSpec.__default.EmptyValue))) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))))))
(assert  (=> true (forall ((|k#0@@58| T@U) (|s#0@@164| T@U) ) (!  (=> (and (and (and (= (type |k#0@@58|) DatatypeTypeType) (= (type |s#0@@164|) DatatypeTypeType)) (or (|MapSpec.__default.Init#canCall| |k#0@@58| |s#0@@164|) (and ($Is |k#0@@58| Tclass.MapSpec.Constants) ($Is |s#0@@164| Tclass.MapSpec.Variables)))) (MapSpec.__default.Init |k#0@@58| |s#0@@164|)) (MapSpec.__default.WF |s#0@@164|)) :qid |UIStateM.9:18| :skolemid |3815| :pattern ( (MapSpec.__default.Init |k#0@@58| |s#0@@164|)) ))))
(assert (forall ((|k#0@@59| T@U) (|s#0@@165| T@U) ) (!  (=> (and (and (= (type |k#0@@59|) DatatypeTypeType) (= (type |s#0@@165|) DatatypeTypeType)) (and ($Is |k#0@@59| Tclass.MapSpec.Constants) ($Is |s#0@@165| Tclass.MapSpec.Variables))) (and (=> (|MapSpec.__default.Init#requires| |k#0@@59| |s#0@@165|) true) (=> true (|MapSpec.__default.Init#requires| |k#0@@59| |s#0@@165|)))) :qid |UIStateM.9:18| :skolemid |3816| :pattern ( (|MapSpec.__default.Init#requires| |k#0@@59| |s#0@@165|)) )))
(assert  (=> true (forall ((|k#0@@60| T@U) (|s#0@@166| T@U) ) (!  (=> (and (and (= (type |k#0@@60|) DatatypeTypeType) (= (type |s#0@@166|) DatatypeTypeType)) (or (|MapSpec.__default.Init#canCall| |k#0@@60| |s#0@@166|) (and ($Is |k#0@@60| Tclass.MapSpec.Constants) ($Is |s#0@@166| Tclass.MapSpec.Variables)))) (and (and (|$IsA#MapSpec.Variables| |s#0@@166|) |MapSpec.__default.EmptyMap#canCall|) (and (=> (MapSpec.__default.Init |k#0@@60| |s#0@@166|) (|MapSpec.Variables#Equal| |s#0@@166| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap)))) (=> (|MapSpec.Variables#Equal| |s#0@@166| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap))) (MapSpec.__default.Init |k#0@@60| |s#0@@166|))))) :qid |UIStateM.9:18| :skolemid |3817| :pattern ( (MapSpec.__default.Init |k#0@@60| |s#0@@166|)) ))))
(assert  (=> true (forall ((|k#0@@61| T@U) (|s#0@@167| T@U) ) (!  (=> (and (and (= (type |k#0@@61|) DatatypeTypeType) (= (type |s#0@@167|) DatatypeTypeType)) (or (|MapSpec.__default.Init#canCall| (Lit |k#0@@61|) (Lit |s#0@@167|)) (and ($Is |k#0@@61| Tclass.MapSpec.Constants) ($Is |s#0@@167| Tclass.MapSpec.Variables)))) (and (and (|$IsA#MapSpec.Variables| (Lit |s#0@@167|)) |MapSpec.__default.EmptyMap#canCall|) (and (=> (MapSpec.__default.Init (Lit |k#0@@61|) (Lit |s#0@@167|)) (|MapSpec.Variables#Equal| |s#0@@167| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap)))) (=> (|MapSpec.Variables#Equal| |s#0@@167| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap))) (MapSpec.__default.Init (Lit |k#0@@61|) (Lit |s#0@@167|)))))) :qid |UIStateM.9:18| :weight 3 :skolemid |3818| :pattern ( (MapSpec.__default.Init (Lit |k#0@@61|) (Lit |s#0@@167|))) ))))
(assert  (=> true (forall ((|k#0@@62| T@U) (|s#0@@168| T@U) (|s'#0@@3| T@U) (|uiop#0| T@U) (|key#0@@190| T@U) (|result#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@62|) DatatypeTypeType) (= (type |s#0@@168|) DatatypeTypeType)) (= (type |s'#0@@3|) DatatypeTypeType)) (= (type |uiop#0|) DatatypeTypeType)) (= (type |key#0@@190|) (SeqType BoxType))) (= (type |result#0|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| |k#0@@62| |s#0@@168| |s'#0@@3| |uiop#0| |key#0@@190| |result#0|) (and (and (and (and (and ($Is |k#0@@62| Tclass.MapSpec.Constants) ($Is |s#0@@168| Tclass.MapSpec.Variables)) ($Is |s'#0@@3| Tclass.MapSpec.Variables)) ($Is |uiop#0| Tclass.UI.Op)) ($Is |key#0@@190| Tclass.KeyType.Key)) ($Is |result#0| Tclass.ValueType.Value)))) true) :qid |MapSpecs.53:19| :skolemid |3819| :pattern ( (MapSpec.__default.Query |k#0@@62| |s#0@@168| |s'#0@@3| |uiop#0| |key#0@@190| |result#0|)) ))))
(assert (forall ((|k#0@@63| T@U) (|s#0@@169| T@U) (|s'#0@@4| T@U) (|uiop#0@@0| T@U) (|key#0@@191| T@U) (|result#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@63|) DatatypeTypeType) (= (type |s#0@@169|) DatatypeTypeType)) (= (type |s'#0@@4|) DatatypeTypeType)) (= (type |uiop#0@@0|) DatatypeTypeType)) (= (type |key#0@@191|) (SeqType BoxType))) (= (type |result#0@@0|) (SeqType BoxType))) (and (and (and (and (and ($Is |k#0@@63| Tclass.MapSpec.Constants) ($Is |s#0@@169| Tclass.MapSpec.Variables)) ($Is |s'#0@@4| Tclass.MapSpec.Variables)) ($Is |uiop#0@@0| Tclass.UI.Op)) ($Is |key#0@@191| Tclass.KeyType.Key)) ($Is |result#0@@0| Tclass.ValueType.Value))) (and (=> (|MapSpec.__default.Query#requires| |k#0@@63| |s#0@@169| |s'#0@@4| |uiop#0@@0| |key#0@@191| |result#0@@0|) true) (=> true (|MapSpec.__default.Query#requires| |k#0@@63| |s#0@@169| |s'#0@@4| |uiop#0@@0| |key#0@@191| |result#0@@0|)))) :qid |MapSpecs.53:19| :skolemid |3820| :pattern ( (|MapSpec.__default.Query#requires| |k#0@@63| |s#0@@169| |s'#0@@4| |uiop#0@@0| |key#0@@191| |result#0@@0|)) )))
(assert  (=> true (forall ((|k#0@@64| T@U) (|s#0@@170| T@U) (|s'#0@@5| T@U) (|uiop#0@@1| T@U) (|key#0@@192| T@U) (|result#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@64|) DatatypeTypeType) (= (type |s#0@@170|) DatatypeTypeType)) (= (type |s'#0@@5|) DatatypeTypeType)) (= (type |uiop#0@@1|) DatatypeTypeType)) (= (type |key#0@@192|) (SeqType BoxType))) (= (type |result#0@@1|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| |k#0@@64| |s#0@@170| |s'#0@@5| |uiop#0@@1| |key#0@@192| |result#0@@1|) (and (and (and (and (and ($Is |k#0@@64| Tclass.MapSpec.Constants) ($Is |s#0@@170| Tclass.MapSpec.Variables)) ($Is |s'#0@@5| Tclass.MapSpec.Variables)) ($Is |uiop#0@@1| Tclass.UI.Op)) ($Is |key#0@@192| Tclass.KeyType.Key)) ($Is |result#0@@1| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| |uiop#0@@1|) (=> (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@192| |result#0@@1|)) (|MapSpec.__default.WF#canCall| |s#0@@170|))) (=> (and (|MapSpec.__default.WF#canCall| |s#0@@170|) (MapSpec.__default.WF |s#0@@170|)) (MapSpec.Variables.Variables_q |s#0@@170|))) (=> (and (MapSpec.Variables.Variables_q |s#0@@170|) (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@170|)) ($Box |key#0@@192|))))) (and (|$IsA#MapSpec.Variables| |s'#0@@5|) (|$IsA#MapSpec.Variables| |s#0@@170|)))) (and (=> (MapSpec.__default.Query |k#0@@64| |s#0@@170| |s'#0@@5| |uiop#0@@1| |key#0@@192| |result#0@@1|) (and (and (and (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@192| |result#0@@1|)) (MapSpec.__default.WF |s#0@@170|)) (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@170|)) ($Box |key#0@@192|))))) (|MapSpec.Variables#Equal| |s'#0@@5| |s#0@@170|))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@192| |result#0@@1|)) (MapSpec.__default.WF |s#0@@170|)) (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@170|)) ($Box |key#0@@192|))))) (|MapSpec.Variables#Equal| |s'#0@@5| |s#0@@170|)) (MapSpec.__default.Query |k#0@@64| |s#0@@170| |s'#0@@5| |uiop#0@@1| |key#0@@192| |result#0@@1|))))) :qid |MapSpecs.53:19| :skolemid |3821| :pattern ( (MapSpec.__default.Query |k#0@@64| |s#0@@170| |s'#0@@5| |uiop#0@@1| |key#0@@192| |result#0@@1|)) ))))
(assert  (=> true (forall ((|k#0@@65| T@U) (|s#0@@171| T@U) (|s'#0@@6| T@U) (|uiop#0@@2| T@U) (|key#0@@193| T@U) (|result#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@65|) DatatypeTypeType) (= (type |s#0@@171|) DatatypeTypeType)) (= (type |s'#0@@6|) DatatypeTypeType)) (= (type |uiop#0@@2|) DatatypeTypeType)) (= (type |key#0@@193|) (SeqType BoxType))) (= (type |result#0@@2|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| (Lit |k#0@@65|) (Lit |s#0@@171|) (Lit |s'#0@@6|) (Lit |uiop#0@@2|) (Lit |key#0@@193|) |result#0@@2|) (and (and (and (and (and ($Is |k#0@@65| Tclass.MapSpec.Constants) ($Is |s#0@@171| Tclass.MapSpec.Variables)) ($Is |s'#0@@6| Tclass.MapSpec.Variables)) ($Is |uiop#0@@2| Tclass.UI.Op)) ($Is |key#0@@193| Tclass.KeyType.Key)) ($Is |result#0@@2| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@2|)) (=> (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@193|) |result#0@@2|)) (|MapSpec.__default.WF#canCall| (Lit |s#0@@171|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@171|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@171|)))))) (MapSpec.Variables.Variables_q (Lit |s#0@@171|)))) (=> (and (MapSpec.Variables.Variables_q (Lit |s#0@@171|)) (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@171|)))) ($Box (Lit |key#0@@193|)))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@6|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@171|))))) (and (=> (MapSpec.__default.Query (Lit |k#0@@65|) (Lit |s#0@@171|) (Lit |s'#0@@6|) (Lit |uiop#0@@2|) (Lit |key#0@@193|) |result#0@@2|) (and (and (and (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@193|) |result#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@171|))) (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@171|)))) ($Box (Lit |key#0@@193|)))))) (|MapSpec.Variables#Equal| |s'#0@@6| |s#0@@171|))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@193|) |result#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@171|))) (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@171|)))) ($Box (Lit |key#0@@193|)))))) (|MapSpec.Variables#Equal| |s'#0@@6| |s#0@@171|)) (MapSpec.__default.Query (Lit |k#0@@65|) (Lit |s#0@@171|) (Lit |s'#0@@6|) (Lit |uiop#0@@2|) (Lit |key#0@@193|) |result#0@@2|))))) :qid |MapSpecs.53:19| :weight 3 :skolemid |3822| :pattern ( (MapSpec.__default.Query (Lit |k#0@@65|) (Lit |s#0@@171|) (Lit |s'#0@@6|) (Lit |uiop#0@@2|) (Lit |key#0@@193|) |result#0@@2|)) ))))
(assert  (=> true (forall ((|k#0@@66| T@U) (|s#0@@172| T@U) (|s'#0@@7| T@U) (|uiop#0@@3| T@U) (|key#0@@194| T@U) (|result#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@66|) DatatypeTypeType) (= (type |s#0@@172|) DatatypeTypeType)) (= (type |s'#0@@7|) DatatypeTypeType)) (= (type |uiop#0@@3|) DatatypeTypeType)) (= (type |key#0@@194|) (SeqType BoxType))) (= (type |result#0@@3|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| (Lit |k#0@@66|) (Lit |s#0@@172|) (Lit |s'#0@@7|) (Lit |uiop#0@@3|) (Lit |key#0@@194|) (Lit |result#0@@3|)) (and (and (and (and (and ($Is |k#0@@66| Tclass.MapSpec.Constants) ($Is |s#0@@172| Tclass.MapSpec.Variables)) ($Is |s'#0@@7| Tclass.MapSpec.Variables)) ($Is |uiop#0@@3| Tclass.UI.Op)) ($Is |key#0@@194| Tclass.KeyType.Key)) ($Is |result#0@@3| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@3|)) (=> (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@194|) (Lit |result#0@@3|))) (|MapSpec.__default.WF#canCall| (Lit |s#0@@172|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@172|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@172|)))))) (MapSpec.Variables.Variables_q (Lit |s#0@@172|)))) (=> (and (MapSpec.Variables.Variables_q (Lit |s#0@@172|)) (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@172|)))) ($Box (Lit |key#0@@194|)))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@7|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@172|))))) (and (=> (MapSpec.__default.Query (Lit |k#0@@66|) (Lit |s#0@@172|) (Lit |s'#0@@7|) (Lit |uiop#0@@3|) (Lit |key#0@@194|) (Lit |result#0@@3|)) (and (and (and (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@194|) (Lit |result#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@172|))) (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@172|)))) ($Box (Lit |key#0@@194|)))))) (|MapSpec.Variables#Equal| |s'#0@@7| |s#0@@172|))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@194|) (Lit |result#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@172|))) (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@172|)))) ($Box (Lit |key#0@@194|)))))) (|MapSpec.Variables#Equal| |s'#0@@7| |s#0@@172|)) (MapSpec.__default.Query (Lit |k#0@@66|) (Lit |s#0@@172|) (Lit |s'#0@@7|) (Lit |uiop#0@@3|) (Lit |key#0@@194|) (Lit |result#0@@3|)))))) :qid |MapSpecs.53:19| :weight 3 :skolemid |3823| :pattern ( (MapSpec.__default.Query (Lit |k#0@@66|) (Lit |s#0@@172|) (Lit |s'#0@@7|) (Lit |uiop#0@@3|) (Lit |key#0@@194|) (Lit |result#0@@3|))) ))))
(assert  (=> true (forall ((|start#0@@11| T@U) (|key#0@@195| T@U) ) (!  (=> (and (and (= (type |start#0@@11|) DatatypeTypeType) (= (type |key#0@@195|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| |start#0@@11| |key#0@@195|) (and ($Is |start#0@@11| Tclass.UI.RangeStart) ($Is |key#0@@195| Tclass.KeyType.Key)))) true) :qid |MapSpecs.61:24| :skolemid |3824| :pattern ( (MapSpec.__default.LowerBound |start#0@@11| |key#0@@195|)) ))))
(assert (forall ((|start#0@@12| T@U) (|key#0@@196| T@U) ) (!  (=> (and (and (= (type |start#0@@12|) DatatypeTypeType) (= (type |key#0@@196|) (SeqType BoxType))) (and ($Is |start#0@@12| Tclass.UI.RangeStart) ($Is |key#0@@196| Tclass.KeyType.Key))) (and (=> (|MapSpec.__default.LowerBound#requires| |start#0@@12| |key#0@@196|) true) (=> true (|MapSpec.__default.LowerBound#requires| |start#0@@12| |key#0@@196|)))) :qid |MapSpecs.61:24| :skolemid |3825| :pattern ( (|MapSpec.__default.LowerBound#requires| |start#0@@12| |key#0@@196|)) )))
(assert  (=> true (forall ((|start#0@@13| T@U) (|key#0@@197| T@U) ) (!  (=> (and (and (= (type |start#0@@13|) DatatypeTypeType) (= (type |key#0@@197|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| |start#0@@13| |key#0@@197|) (and ($Is |start#0@@13| Tclass.UI.RangeStart) ($Is |key#0@@197| Tclass.KeyType.Key)))) (and (and (=> (UI.RangeStart.SInclusive_q |start#0@@13|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@13|) |key#0@@197|)) (=> (and (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@13|) |key#0@@197|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@13|) |key#0@@197|)) (=> (UI.RangeStart.SExclusive_q |start#0@@13|) (|SeqComparison.__default.lt#canCall| (UI.RangeStart.key |start#0@@13|) |key#0@@197|)))) (and (=> (MapSpec.__default.LowerBound |start#0@@13| |key#0@@197|) (and (=> (UI.RangeStart.SInclusive_q |start#0@@13|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@13|) |key#0@@197|)) (=> (UI.RangeStart.SExclusive_q |start#0@@13|) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@13|) |key#0@@197|)))) (=> (and (=> (UI.RangeStart.SInclusive_q |start#0@@13|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@13|) |key#0@@197|)) (=> (UI.RangeStart.SExclusive_q |start#0@@13|) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@13|) |key#0@@197|))) (MapSpec.__default.LowerBound |start#0@@13| |key#0@@197|))))) :qid |MapSpecs.61:24| :skolemid |3826| :pattern ( (MapSpec.__default.LowerBound |start#0@@13| |key#0@@197|)) ))))
(assert  (=> true (forall ((|start#0@@14| T@U) (|key#0@@198| T@U) ) (!  (=> (and (and (= (type |start#0@@14|) DatatypeTypeType) (= (type |key#0@@198|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@14|) (Lit |key#0@@198|)) (and ($Is |start#0@@14| Tclass.UI.RangeStart) ($Is |key#0@@198| Tclass.KeyType.Key)))) (and (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SInclusive_q (Lit |start#0@@14|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit |key#0@@198|))) (=> (and (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit |key#0@@198|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit |key#0@@198|))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SExclusive_q (Lit |start#0@@14|))))) (|SeqComparison.__default.lt#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit |key#0@@198|))))) (and (=> (MapSpec.__default.LowerBound (Lit |start#0@@14|) (Lit |key#0@@198|)) (and (=> (UI.RangeStart.SInclusive_q (Lit |start#0@@14|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit |key#0@@198|))) (=> (UI.RangeStart.SExclusive_q (Lit |start#0@@14|)) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit |key#0@@198|))))) (=> (and (=> (UI.RangeStart.SInclusive_q (Lit |start#0@@14|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit |key#0@@198|))) (=> (UI.RangeStart.SExclusive_q (Lit |start#0@@14|)) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit |key#0@@198|)))) (MapSpec.__default.LowerBound (Lit |start#0@@14|) (Lit |key#0@@198|)))))) :qid |MapSpecs.61:24| :weight 3 :skolemid |3827| :pattern ( (MapSpec.__default.LowerBound (Lit |start#0@@14|) (Lit |key#0@@198|))) ))))
(assert  (=> true (forall ((|key#0@@199| T@U) (|end#0@@11| T@U) ) (!  (=> (and (and (= (type |key#0@@199|) (SeqType BoxType)) (= (type |end#0@@11|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| |key#0@@199| |end#0@@11|) (and ($Is |key#0@@199| Tclass.KeyType.Key) ($Is |end#0@@11| Tclass.UI.RangeEnd)))) true) :qid |MapSpecs.67:24| :skolemid |3828| :pattern ( (MapSpec.__default.UpperBound |key#0@@199| |end#0@@11|)) ))))
(assert (forall ((|key#0@@200| T@U) (|end#0@@12| T@U) ) (!  (=> (and (and (= (type |key#0@@200|) (SeqType BoxType)) (= (type |end#0@@12|) DatatypeTypeType)) (and ($Is |key#0@@200| Tclass.KeyType.Key) ($Is |end#0@@12| Tclass.UI.RangeEnd))) (and (=> (|MapSpec.__default.UpperBound#requires| |key#0@@200| |end#0@@12|) true) (=> true (|MapSpec.__default.UpperBound#requires| |key#0@@200| |end#0@@12|)))) :qid |MapSpecs.67:24| :skolemid |3829| :pattern ( (|MapSpec.__default.UpperBound#requires| |key#0@@200| |end#0@@12|)) )))
(assert  (=> true (forall ((|key#0@@201| T@U) (|end#0@@13| T@U) ) (!  (=> (and (and (= (type |key#0@@201|) (SeqType BoxType)) (= (type |end#0@@13|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| |key#0@@201| |end#0@@13|) (and ($Is |key#0@@201| Tclass.KeyType.Key) ($Is |end#0@@13| Tclass.UI.RangeEnd)))) (and (and (=> (UI.RangeEnd.EInclusive_q |end#0@@13|) (|SeqComparison.__default.lte#canCall| |key#0@@201| (UI.RangeEnd.key |end#0@@13|))) (=> (and (|SeqComparison.__default.lte#canCall| |key#0@@201| (UI.RangeEnd.key |end#0@@13|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@201| (UI.RangeEnd.key |end#0@@13|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@13|) (|SeqComparison.__default.lt#canCall| |key#0@@201| (UI.RangeEnd.key |end#0@@13|))))) (and (=> (MapSpec.__default.UpperBound |key#0@@201| |end#0@@13|) (and (=> (UI.RangeEnd.EInclusive_q |end#0@@13|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@201| (UI.RangeEnd.key |end#0@@13|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@13|) (SeqComparison.__default.lt |key#0@@201| (UI.RangeEnd.key |end#0@@13|))))) (=> (and (=> (UI.RangeEnd.EInclusive_q |end#0@@13|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@201| (UI.RangeEnd.key |end#0@@13|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@13|) (SeqComparison.__default.lt |key#0@@201| (UI.RangeEnd.key |end#0@@13|)))) (MapSpec.__default.UpperBound |key#0@@201| |end#0@@13|))))) :qid |MapSpecs.67:24| :skolemid |3830| :pattern ( (MapSpec.__default.UpperBound |key#0@@201| |end#0@@13|)) ))))
(assert  (=> true (forall ((|key#0@@202| T@U) (|end#0@@14| T@U) ) (!  (=> (and (and (= (type |key#0@@202|) (SeqType BoxType)) (= (type |end#0@@14|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| (Lit |key#0@@202|) (Lit |end#0@@14|)) (and ($Is |key#0@@202| Tclass.KeyType.Key) ($Is |end#0@@14| Tclass.UI.RangeEnd)))) (and (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@14|))))) (|SeqComparison.__default.lte#canCall| (Lit |key#0@@202|) (Lit (UI.RangeEnd.key (Lit |end#0@@14|))))) (=> (and (|SeqComparison.__default.lte#canCall| (Lit |key#0@@202|) (Lit (UI.RangeEnd.key (Lit |end#0@@14|)))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@202|) (Lit (UI.RangeEnd.key (Lit |end#0@@14|))))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EExclusive_q (Lit |end#0@@14|))))) (|SeqComparison.__default.lt#canCall| (Lit |key#0@@202|) (Lit (UI.RangeEnd.key (Lit |end#0@@14|))))))) (and (=> (MapSpec.__default.UpperBound (Lit |key#0@@202|) (Lit |end#0@@14|)) (and (=> (UI.RangeEnd.EInclusive_q (Lit |end#0@@14|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@202|) (Lit (UI.RangeEnd.key (Lit |end#0@@14|))))) (=> (UI.RangeEnd.EExclusive_q (Lit |end#0@@14|)) (SeqComparison.__default.lt (Lit |key#0@@202|) (Lit (UI.RangeEnd.key (Lit |end#0@@14|))))))) (=> (and (=> (UI.RangeEnd.EInclusive_q (Lit |end#0@@14|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@202|) (Lit (UI.RangeEnd.key (Lit |end#0@@14|))))) (=> (UI.RangeEnd.EExclusive_q (Lit |end#0@@14|)) (SeqComparison.__default.lt (Lit |key#0@@202|) (Lit (UI.RangeEnd.key (Lit |end#0@@14|)))))) (MapSpec.__default.UpperBound (Lit |key#0@@202|) (Lit |end#0@@14|)))))) :qid |MapSpecs.67:24| :weight 3 :skolemid |3831| :pattern ( (MapSpec.__default.UpperBound (Lit |key#0@@202|) (Lit |end#0@@14|))) ))))
(assert  (=> true (forall ((|start#0@@15| T@U) (|key#0@@203| T@U) (|end#0@@15| T@U) ) (!  (=> (and (and (and (= (type |start#0@@15|) DatatypeTypeType) (= (type |key#0@@203|) (SeqType BoxType))) (= (type |end#0@@15|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| |start#0@@15| |key#0@@203| |end#0@@15|) (and (and ($Is |start#0@@15| Tclass.UI.RangeStart) ($Is |key#0@@203| Tclass.KeyType.Key)) ($Is |end#0@@15| Tclass.UI.RangeEnd)))) true) :qid |MapSpecs.73:21| :skolemid |3832| :pattern ( (MapSpec.__default.InRange |start#0@@15| |key#0@@203| |end#0@@15|)) ))))
(assert (forall ((|start#0@@16| T@U) (|key#0@@204| T@U) (|end#0@@16| T@U) ) (!  (=> (and (and (and (= (type |start#0@@16|) DatatypeTypeType) (= (type |key#0@@204|) (SeqType BoxType))) (= (type |end#0@@16|) DatatypeTypeType)) (and (and ($Is |start#0@@16| Tclass.UI.RangeStart) ($Is |key#0@@204| Tclass.KeyType.Key)) ($Is |end#0@@16| Tclass.UI.RangeEnd))) (and (=> (|MapSpec.__default.InRange#requires| |start#0@@16| |key#0@@204| |end#0@@16|) true) (=> true (|MapSpec.__default.InRange#requires| |start#0@@16| |key#0@@204| |end#0@@16|)))) :qid |MapSpecs.73:21| :skolemid |3833| :pattern ( (|MapSpec.__default.InRange#requires| |start#0@@16| |key#0@@204| |end#0@@16|)) )))
(assert  (=> true (forall ((|start#0@@17| T@U) (|key#0@@205| T@U) (|end#0@@17| T@U) ) (!  (=> (and (and (and (= (type |start#0@@17|) DatatypeTypeType) (= (type |key#0@@205|) (SeqType BoxType))) (= (type |end#0@@17|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| |start#0@@17| |key#0@@205| |end#0@@17|) (and (and ($Is |start#0@@17| Tclass.UI.RangeStart) ($Is |key#0@@205| Tclass.KeyType.Key)) ($Is |end#0@@17| Tclass.UI.RangeEnd)))) (and (and (|MapSpec.__default.LowerBound#canCall| |start#0@@17| |key#0@@205|) (=> (MapSpec.__default.LowerBound |start#0@@17| |key#0@@205|) (|MapSpec.__default.UpperBound#canCall| |key#0@@205| |end#0@@17|))) (and (=> (MapSpec.__default.InRange |start#0@@17| |key#0@@205| |end#0@@17|) (and (MapSpec.__default.LowerBound |start#0@@17| |key#0@@205|) (MapSpec.__default.UpperBound |key#0@@205| |end#0@@17|))) (=> (and (MapSpec.__default.LowerBound |start#0@@17| |key#0@@205|) (MapSpec.__default.UpperBound |key#0@@205| |end#0@@17|)) (MapSpec.__default.InRange |start#0@@17| |key#0@@205| |end#0@@17|))))) :qid |MapSpecs.73:21| :skolemid |3834| :pattern ( (MapSpec.__default.InRange |start#0@@17| |key#0@@205| |end#0@@17|)) ))))
(assert  (=> true (forall ((|start#0@@18| T@U) (|key#0@@206| T@U) (|end#0@@18| T@U) ) (!  (=> (and (and (and (= (type |start#0@@18|) DatatypeTypeType) (= (type |key#0@@206|) (SeqType BoxType))) (= (type |end#0@@18|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| (Lit |start#0@@18|) (Lit |key#0@@206|) (Lit |end#0@@18|)) (and (and ($Is |start#0@@18| Tclass.UI.RangeStart) ($Is |key#0@@206| Tclass.KeyType.Key)) ($Is |end#0@@18| Tclass.UI.RangeEnd)))) (and (and (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@18|) (Lit |key#0@@206|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.LowerBound (Lit |start#0@@18|) (Lit |key#0@@206|))))) (|MapSpec.__default.UpperBound#canCall| (Lit |key#0@@206|) (Lit |end#0@@18|)))) (and (=> (MapSpec.__default.InRange (Lit |start#0@@18|) (Lit |key#0@@206|) (Lit |end#0@@18|)) (U_2_bool (Lit (bool_2_U  (and (MapSpec.__default.LowerBound (Lit |start#0@@18|) (Lit |key#0@@206|)) (MapSpec.__default.UpperBound (Lit |key#0@@206|) (Lit |end#0@@18|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (MapSpec.__default.LowerBound (Lit |start#0@@18|) (Lit |key#0@@206|)) (MapSpec.__default.UpperBound (Lit |key#0@@206|) (Lit |end#0@@18|)))))) (MapSpec.__default.InRange (Lit |start#0@@18|) (Lit |key#0@@206|) (Lit |end#0@@18|)))))) :qid |MapSpecs.73:21| :weight 3 :skolemid |3835| :pattern ( (MapSpec.__default.InRange (Lit |start#0@@18|) (Lit |key#0@@206|) (Lit |end#0@@18|))) ))))
(assert  (=> true (forall ((|start#0@@19| T@U) (|end#0@@19| T@U) ) (!  (=> (and (and (= (type |start#0@@19|) DatatypeTypeType) (= (type |end#0@@19|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@19| |end#0@@19|) (and ($Is |start#0@@19| Tclass.UI.RangeStart) ($Is |end#0@@19| Tclass.UI.RangeEnd)))) true) :qid |MapSpecs.79:27| :skolemid |3836| :pattern ( (MapSpec.__default.NonEmptyRange |start#0@@19| |end#0@@19|)) ))))
(assert (forall ((|start#0@@20| T@U) (|end#0@@20| T@U) ) (!  (=> (and (and (= (type |start#0@@20|) DatatypeTypeType) (= (type |end#0@@20|) DatatypeTypeType)) (and ($Is |start#0@@20| Tclass.UI.RangeStart) ($Is |end#0@@20| Tclass.UI.RangeEnd))) (and (=> (|MapSpec.__default.NonEmptyRange#requires| |start#0@@20| |end#0@@20|) true) (=> true (|MapSpec.__default.NonEmptyRange#requires| |start#0@@20| |end#0@@20|)))) :qid |MapSpecs.79:27| :skolemid |3837| :pattern ( (|MapSpec.__default.NonEmptyRange#requires| |start#0@@20| |end#0@@20|)) )))
(assert  (=> true (forall ((|start#0@@21| T@U) (|end#0@@21| T@U) ) (!  (=> (and (and (= (type |start#0@@21|) DatatypeTypeType) (= (type |end#0@@21|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@21| |end#0@@21|) (and ($Is |start#0@@21| Tclass.UI.RangeStart) ($Is |end#0@@21| Tclass.UI.RangeEnd)))) (and (and (=> (not (UI.RangeEnd.PositiveInf_q |end#0@@21|)) (=> (UI.RangeEnd.EInclusive_q |end#0@@21|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@21|) (UI.RangeEnd.key |end#0@@21|)))) (=> (and (=> (UI.RangeEnd.EInclusive_q |end#0@@21|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@21|) (UI.RangeEnd.key |end#0@@21|))) (not (and (and (UI.RangeStart.SInclusive_q |start#0@@21|) (UI.RangeEnd.EInclusive_q |end#0@@21|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@21|) (UI.RangeEnd.key |end#0@@21|))))) (|SeqComparison.__default.lt#canCall| (UI.RangeStart.key |start#0@@21|) (UI.RangeEnd.key |end#0@@21|)))) (and (=> (MapSpec.__default.NonEmptyRange |start#0@@21| |end#0@@21|) (or (or (or (UI.RangeStart.NegativeInf_q |start#0@@21|) (UI.RangeEnd.PositiveInf_q |end#0@@21|)) (and (and (UI.RangeStart.SInclusive_q |start#0@@21|) (UI.RangeEnd.EInclusive_q |end#0@@21|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@21|) (UI.RangeEnd.key |end#0@@21|)))) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@21|) (UI.RangeEnd.key |end#0@@21|)))) (=> (or (or (or (UI.RangeStart.NegativeInf_q |start#0@@21|) (UI.RangeEnd.PositiveInf_q |end#0@@21|)) (and (and (UI.RangeStart.SInclusive_q |start#0@@21|) (UI.RangeEnd.EInclusive_q |end#0@@21|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@21|) (UI.RangeEnd.key |end#0@@21|)))) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@21|) (UI.RangeEnd.key |end#0@@21|))) (MapSpec.__default.NonEmptyRange |start#0@@21| |end#0@@21|))))) :qid |MapSpecs.79:27| :skolemid |3838| :pattern ( (MapSpec.__default.NonEmptyRange |start#0@@21| |end#0@@21|)) ))))
(assert  (=> true (forall ((|start#0@@22| T@U) (|end#0@@22| T@U) ) (!  (=> (and (and (= (type |start#0@@22|) DatatypeTypeType) (= (type |end#0@@22|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@22|) (Lit |end#0@@22|)) (and ($Is |start#0@@22| Tclass.UI.RangeStart) ($Is |end#0@@22| Tclass.UI.RangeEnd)))) (and (and (=> (not (U_2_bool (Lit (bool_2_U (UI.RangeEnd.PositiveInf_q (Lit |end#0@@22|)))))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@22|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@22|))) (Lit (UI.RangeEnd.key (Lit |end#0@@22|)))))) (=> (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@22|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@22|))) (Lit (UI.RangeEnd.key (Lit |end#0@@22|))))) (not (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@22|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@22|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@22|))) (Lit (UI.RangeEnd.key (Lit |end#0@@22|))))))) (|SeqComparison.__default.lt#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@22|))) (Lit (UI.RangeEnd.key (Lit |end#0@@22|)))))) (and (=> (MapSpec.__default.NonEmptyRange (Lit |start#0@@22|) (Lit |end#0@@22|)) (or (or (or (UI.RangeStart.NegativeInf_q (Lit |start#0@@22|)) (UI.RangeEnd.PositiveInf_q (Lit |end#0@@22|))) (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@22|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@22|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@22|))) (Lit (UI.RangeEnd.key (Lit |end#0@@22|)))))) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@22|))) (Lit (UI.RangeEnd.key (Lit |end#0@@22|)))))) (=> (or (or (or (UI.RangeStart.NegativeInf_q (Lit |start#0@@22|)) (UI.RangeEnd.PositiveInf_q (Lit |end#0@@22|))) (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@22|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@22|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@22|))) (Lit (UI.RangeEnd.key (Lit |end#0@@22|)))))) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@22|))) (Lit (UI.RangeEnd.key (Lit |end#0@@22|))))) (MapSpec.__default.NonEmptyRange (Lit |start#0@@22|) (Lit |end#0@@22|)))))) :qid |MapSpecs.79:27| :weight 3 :skolemid |3839| :pattern ( (MapSpec.__default.NonEmptyRange (Lit |start#0@@22|) (Lit |end#0@@22|))) ))))
(assert  (=> true (forall ((|k#0@@67| T@U) (|s#0@@173| T@U) (|s'#0@@8| T@U) (|uiop#0@@4| T@U) (|start#0@@23| T@U) (|results#0| T@U) (|end#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@67|) DatatypeTypeType) (= (type |s#0@@173|) DatatypeTypeType)) (= (type |s'#0@@8|) DatatypeTypeType)) (= (type |uiop#0@@4|) DatatypeTypeType)) (= (type |start#0@@23|) DatatypeTypeType)) (= (type |results#0|) (SeqType BoxType))) (= (type |end#0@@23|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| |k#0@@67| |s#0@@173| |s'#0@@8| |uiop#0@@4| |start#0@@23| |results#0| |end#0@@23|) (and (and (and (and (and (and ($Is |k#0@@67| Tclass.MapSpec.Constants) ($Is |s#0@@173| Tclass.MapSpec.Variables)) ($Is |s'#0@@8| Tclass.MapSpec.Variables)) ($Is |uiop#0@@4| Tclass.UI.Op)) ($Is |start#0@@23| Tclass.UI.RangeStart)) ($Is |results#0| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@23| Tclass.UI.RangeEnd)))) true) :qid |MapSpecs.87:18| :skolemid |3840| :pattern ( (MapSpec.__default.Succ |k#0@@67| |s#0@@173| |s'#0@@8| |uiop#0@@4| |start#0@@23| |results#0| |end#0@@23|)) ))))
(assert (forall ((|k#0@@68| T@U) (|s#0@@174| T@U) (|s'#0@@9| T@U) (|uiop#0@@5| T@U) (|start#0@@24| T@U) (|results#0@@0| T@U) (|end#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@68|) DatatypeTypeType) (= (type |s#0@@174|) DatatypeTypeType)) (= (type |s'#0@@9|) DatatypeTypeType)) (= (type |uiop#0@@5|) DatatypeTypeType)) (= (type |start#0@@24|) DatatypeTypeType)) (= (type |results#0@@0|) (SeqType BoxType))) (= (type |end#0@@24|) DatatypeTypeType)) (and (and (and (and (and (and ($Is |k#0@@68| Tclass.MapSpec.Constants) ($Is |s#0@@174| Tclass.MapSpec.Variables)) ($Is |s'#0@@9| Tclass.MapSpec.Variables)) ($Is |uiop#0@@5| Tclass.UI.Op)) ($Is |start#0@@24| Tclass.UI.RangeStart)) ($Is |results#0@@0| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@24| Tclass.UI.RangeEnd))) (and (=> (|MapSpec.__default.Succ#requires| |k#0@@68| |s#0@@174| |s'#0@@9| |uiop#0@@5| |start#0@@24| |results#0@@0| |end#0@@24|) true) (=> true (|MapSpec.__default.Succ#requires| |k#0@@68| |s#0@@174| |s'#0@@9| |uiop#0@@5| |start#0@@24| |results#0@@0| |end#0@@24|)))) :qid |MapSpecs.87:18| :skolemid |3841| :pattern ( (|MapSpec.__default.Succ#requires| |k#0@@68| |s#0@@174| |s'#0@@9| |uiop#0@@5| |start#0@@24| |results#0@@0| |end#0@@24|)) )))
(assert  (=> true (forall ((|k#0@@69| T@U) (|s#0@@175| T@U) (|s'#0@@10| T@U) (|uiop#0@@6| T@U) (|start#0@@25| T@U) (|results#0@@1| T@U) (|end#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@69|) DatatypeTypeType) (= (type |s#0@@175|) DatatypeTypeType)) (= (type |s'#0@@10|) DatatypeTypeType)) (= (type |uiop#0@@6|) DatatypeTypeType)) (= (type |start#0@@25|) DatatypeTypeType)) (= (type |results#0@@1|) (SeqType BoxType))) (= (type |end#0@@25|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| |k#0@@69| |s#0@@175| |s'#0@@10| |uiop#0@@6| |start#0@@25| |results#0@@1| |end#0@@25|) (and (and (and (and (and (and ($Is |k#0@@69| Tclass.MapSpec.Constants) ($Is |s#0@@175| Tclass.MapSpec.Variables)) ($Is |s'#0@@10| Tclass.MapSpec.Variables)) ($Is |uiop#0@@6| Tclass.UI.Op)) ($Is |start#0@@25| Tclass.UI.RangeStart)) ($Is |results#0@@1| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@25| Tclass.UI.RangeEnd)))) (and (and (and (and (and (and (and (and (and (|$IsA#UI.Op| |uiop#0@@6|) (=> (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@25| |results#0@@1| |end#0@@25|)) (|MapSpec.__default.WF#canCall| |s#0@@175|))) (=> (and (|MapSpec.__default.WF#canCall| |s#0@@175|) (MapSpec.__default.WF |s#0@@175|)) (and (|$IsA#MapSpec.Variables| |s'#0@@10|) (|$IsA#MapSpec.Variables| |s#0@@175|)))) (=> (and (and (|$IsA#MapSpec.Variables| |s'#0@@10|) (|$IsA#MapSpec.Variables| |s#0@@175|)) (|MapSpec.Variables#Equal| |s'#0@@10| |s#0@@175|)) (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@25| |end#0@@25|))) (=> (and (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@25| |end#0@@25|) (MapSpec.__default.NonEmptyRange |start#0@@25| |end#0@@25|)) (forall ((|i#0@@147| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@147|) (< |i#0@@147| (|Seq#Length| |results#0@@1|))) (and (and (MapSpec.Variables.Variables_q |s#0@@175|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@147|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@147|))))) :qid |MapSpecs.94:16| :skolemid |3842| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@147|))) )))) (=> (and (forall ((|i#0@@148| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@148|) (< |i#0@@148| (|Seq#Length| |results#0@@1|))) (and (and (MapSpec.Variables.Variables_q |s#0@@175|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@148|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@148|))))) :qid |MapSpecs.94:16| :skolemid |3844| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@148|))) )) (forall ((|i#0@@149| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@149|) (< |i#0@@149| (|Seq#Length| |results#0@@1|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@175|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@149|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@149|))))) :qid |MapSpecs.94:16| :skolemid |3845| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@149|))) ))) (forall ((|i#1@@63| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@63|) (< |i#1@@63| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@63|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecs.95:16| :skolemid |3843| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@63|))) )))) (=> (and (forall ((|i#1@@64| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@64|) (< |i#1@@64| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@64|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecs.95:16| :skolemid |3847| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@64|))) )) (forall ((|i#1@@65| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@65|) (< |i#1@@65| (|Seq#Length| |results#0@@1|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@65|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |3848| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@65|))) ))) (forall ((|i#2@@18| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@18|) (< |i#2@@18| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@18|))) (|MapSpec.__default.InRange#canCall| |start#0@@25| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@18|))) |end#0@@25|))) :qid |MapSpecs.96:16| :skolemid |3846| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@18|))) )))) (=> (and (forall ((|i#2@@19| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@19|) (< |i#2@@19| (|Seq#Length| |results#0@@1|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@19|))) (|MapSpec.__default.InRange#canCall| |start#0@@25| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@19|))) |end#0@@25|))) :qid |MapSpecs.96:16| :skolemid |3850| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@19|))) )) (forall ((|i#2@@20| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@20|) (< |i#2@@20| (|Seq#Length| |results#0@@1|))) (MapSpec.__default.InRange |start#0@@25| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@20|))) |end#0@@25|)) :qid |MapSpecs.96:16| :skolemid |3851| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@20|))) ))) (forall ((|i#3@@12| Int) (|j#0@@24| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@12|) (< |i#3@@12| |j#0@@24|)) (< |j#0@@24| (|Seq#Length| |results#0@@1|))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@12|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@24|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@12|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@24|)))))) :qid |MapSpecs.97:16| :skolemid |3849| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@24|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@12|))) )))) (=> (and (forall ((|i#3@@13| Int) (|j#0@@25| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@13|) (< |i#3@@13| |j#0@@25|)) (< |j#0@@25| (|Seq#Length| |results#0@@1|))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@13|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@25|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@13|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@25|)))))) :qid |MapSpecs.97:16| :skolemid |3854| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@25|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@13|))) )) (forall ((|i#3@@14| Int) (|j#0@@26| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@14|) (< |i#3@@14| |j#0@@26|)) (< |j#0@@26| (|Seq#Length| |results#0@@1|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@14|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@26|))))) :qid |MapSpecs.97:16| :skolemid |3855| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@26|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@14|))) ))) (forall ((|key#0@@207| T@U) ) (!  (=> (and (= (type |key#0@@207|) (SeqType BoxType)) ($Is |key#0@@207| Tclass.KeyType.Key)) (and (and (|MapSpec.__default.InRange#canCall| |start#0@@25| |key#0@@207| |end#0@@25|) (=> (MapSpec.__default.InRange |start#0@@25| |key#0@@207| |end#0@@25|) (and (MapSpec.Variables.Variables_q |s#0@@175|) |MapSpec.__default.EmptyValue#canCall|))) (=> (and (MapSpec.__default.InRange |start#0@@25| |key#0@@207| |end#0@@25|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@175|)) ($Box |key#0@@207|))) MapSpec.__default.EmptyValue))) (forall ((|i#4@@0| Int) ) (!  (=> (< |i#4@@0| (|Seq#Length| |results#0@@1|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@0|)))) :qid |MapSpecs.99:16| :skolemid |3852| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@0|))) ))))) :qid |MapSpecs.98:16| :skolemid |3853| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@175|)) ($Box |key#0@@207|)))) :pattern ( (MapSpec.__default.InRange |start#0@@25| |key#0@@207| |end#0@@25|)) )))) (and (=> (MapSpec.__default.Succ |k#0@@69| |s#0@@175| |s'#0@@10| |uiop#0@@6| |start#0@@25| |results#0@@1| |end#0@@25|) (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@25| |results#0@@1| |end#0@@25|)) (MapSpec.__default.WF |s#0@@175|)) (|MapSpec.Variables#Equal| |s'#0@@10| |s#0@@175|)) (MapSpec.__default.NonEmptyRange |start#0@@25| |end#0@@25|)) (forall ((|i#0@@150| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@150|) (< |i#0@@150| (|Seq#Length| |results#0@@1|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@175|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@150|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@150|))))) :qid |MapSpecs.94:16| :skolemid |3856| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@150|))) ))) (forall ((|i#1@@66| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@66|) (< |i#1@@66| (|Seq#Length| |results#0@@1|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@66|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |3857| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@66|))) ))) (forall ((|i#2@@21| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@21|) (< |i#2@@21| (|Seq#Length| |results#0@@1|))) (MapSpec.__default.InRange |start#0@@25| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@21|))) |end#0@@25|)) :qid |MapSpecs.96:16| :skolemid |3858| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@21|))) ))) (forall ((|i#3@@15| Int) (|j#0@@27| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@15|) (< |i#3@@15| |j#0@@27|)) (< |j#0@@27| (|Seq#Length| |results#0@@1|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@15|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@27|))))) :qid |MapSpecs.97:16| :skolemid |3859| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@27|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@15|))) ))) (forall ((|key#0@@208| T@U) ) (!  (=> (= (type |key#0@@208|) (SeqType BoxType)) (=> (and ($Is |key#0@@208| Tclass.KeyType.Key) (and (MapSpec.__default.InRange |start#0@@25| |key#0@@208| |end#0@@25|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@175|)) ($Box |key#0@@208|))) MapSpec.__default.EmptyValue)))) (exists ((|i#4@@1| Int) ) (!  (and (and (<= (LitInt 0) |i#4@@1|) (< |i#4@@1| (|Seq#Length| |results#0@@1|))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@1|))) |key#0@@208|)) :qid |MapSpecs.99:16| :skolemid |3860| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@1|))) )))) :qid |MapSpecs.98:16| :skolemid |3861| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@175|)) ($Box |key#0@@208|)))) :pattern ( (MapSpec.__default.InRange |start#0@@25| |key#0@@208| |end#0@@25|)) )))) (=> (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@25| |results#0@@1| |end#0@@25|)) (MapSpec.__default.WF |s#0@@175|)) (|MapSpec.Variables#Equal| |s'#0@@10| |s#0@@175|)) (MapSpec.__default.NonEmptyRange |start#0@@25| |end#0@@25|)) (forall ((|i#0@@151| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@151|) (< |i#0@@151| (|Seq#Length| |results#0@@1|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@175|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@151|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@151|))))) :qid |MapSpecs.94:16| :skolemid |3856| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#0@@151|))) ))) (forall ((|i#1@@67| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@67|) (< |i#1@@67| (|Seq#Length| |results#0@@1|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@67|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |3857| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#1@@67|))) ))) (forall ((|i#2@@22| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@22|) (< |i#2@@22| (|Seq#Length| |results#0@@1|))) (MapSpec.__default.InRange |start#0@@25| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@22|))) |end#0@@25|)) :qid |MapSpecs.96:16| :skolemid |3858| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#2@@22|))) ))) (forall ((|i#3@@16| Int) (|j#0@@28| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@16|) (< |i#3@@16| |j#0@@28|)) (< |j#0@@28| (|Seq#Length| |results#0@@1|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@16|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@28|))))) :qid |MapSpecs.97:16| :skolemid |3859| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |j#0@@28|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#3@@16|))) ))) (forall ((|key#0@@209| T@U) ) (!  (=> (= (type |key#0@@209|) (SeqType BoxType)) (=> (and ($Is |key#0@@209| Tclass.KeyType.Key) (and (MapSpec.__default.InRange |start#0@@25| |key#0@@209| |end#0@@25|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@175|)) ($Box |key#0@@209|))) MapSpec.__default.EmptyValue)))) (exists ((|i#4@@2| Int) ) (!  (and (and (<= (LitInt 0) |i#4@@2|) (< |i#4@@2| (|Seq#Length| |results#0@@1|))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@2|))) |key#0@@209|)) :qid |MapSpecs.99:16| :skolemid |3860| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@1| |i#4@@2|))) )))) :qid |MapSpecs.98:16| :skolemid |3861| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@175|)) ($Box |key#0@@209|)))) :pattern ( (MapSpec.__default.InRange |start#0@@25| |key#0@@209| |end#0@@25|)) ))) (MapSpec.__default.Succ |k#0@@69| |s#0@@175| |s'#0@@10| |uiop#0@@6| |start#0@@25| |results#0@@1| |end#0@@25|))))) :qid |MapSpecs.87:18| :skolemid |3862| :pattern ( (MapSpec.__default.Succ |k#0@@69| |s#0@@175| |s'#0@@10| |uiop#0@@6| |start#0@@25| |results#0@@1| |end#0@@25|)) ))))
(assert  (=> true (forall ((|k#0@@70| T@U) (|s#0@@176| T@U) (|s'#0@@11| T@U) (|uiop#0@@7| T@U) (|start#0@@26| T@U) (|results#0@@2| T@U) (|end#0@@26| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@70|) DatatypeTypeType) (= (type |s#0@@176|) DatatypeTypeType)) (= (type |s'#0@@11|) DatatypeTypeType)) (= (type |uiop#0@@7|) DatatypeTypeType)) (= (type |start#0@@26|) DatatypeTypeType)) (= (type |results#0@@2|) (SeqType BoxType))) (= (type |end#0@@26|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| (Lit |k#0@@70|) (Lit |s#0@@176|) (Lit |s'#0@@11|) (Lit |uiop#0@@7|) (Lit |start#0@@26|) (Lit |results#0@@2|) (Lit |end#0@@26|)) (and (and (and (and (and (and ($Is |k#0@@70| Tclass.MapSpec.Constants) ($Is |s#0@@176| Tclass.MapSpec.Variables)) ($Is |s'#0@@11| Tclass.MapSpec.Variables)) ($Is |uiop#0@@7| Tclass.UI.Op)) ($Is |start#0@@26| Tclass.UI.RangeStart)) ($Is |results#0@@2| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@26| Tclass.UI.RangeEnd)))) (and (and (and (and (and (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@7|)) (=> (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@26|) (Lit |results#0@@2|) (Lit |end#0@@26|))) (|MapSpec.__default.WF#canCall| (Lit |s#0@@176|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@176|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@176|)))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@11|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@176|))))) (=> (and (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@11|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@176|))) (|MapSpec.Variables#Equal| |s'#0@@11| |s#0@@176|)) (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@26|) (Lit |end#0@@26|)))) (=> (and (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@26|) (Lit |end#0@@26|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.NonEmptyRange (Lit |start#0@@26|) (Lit |end#0@@26|)))))) (forall ((|i#5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5|) (< |i#5| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (MapSpec.Variables.Variables_q (Lit |s#0@@176|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5|))))) :qid |MapSpecs.94:16| :skolemid |3863| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5|))) )))) (=> (and (forall ((|i#5@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@0|) (< |i#5@@0| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (MapSpec.Variables.Variables_q (Lit |s#0@@176|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@0|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@0|))))) :qid |MapSpecs.94:16| :skolemid |3865| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@0|))) )) (forall ((|i#5@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@1|) (< |i#5@@1| (|Seq#Length| (Lit |results#0@@2|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@176|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@1|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@1|))))) :qid |MapSpecs.94:16| :skolemid |3866| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@1|))) ))) (forall ((|i#6| Int) ) (!  (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecs.95:16| :skolemid |3864| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6|))) )))) (=> (and (forall ((|i#6@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@0|) (< |i#6@@0| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@0|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecs.95:16| :skolemid |3868| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@0|))) )) (forall ((|i#6@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@1|) (< |i#6@@1| (|Seq#Length| (Lit |results#0@@2|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@1|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |3869| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@1|))) ))) (forall ((|i#7| Int) ) (!  (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7|))) (|MapSpec.__default.InRange#canCall| (Lit |start#0@@26|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7|))) (Lit |end#0@@26|)))) :qid |MapSpecs.96:16| :skolemid |3867| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7|))) )))) (=> (and (forall ((|i#7@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@0|) (< |i#7@@0| (|Seq#Length| (Lit |results#0@@2|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@0|))) (|MapSpec.__default.InRange#canCall| (Lit |start#0@@26|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@0|))) (Lit |end#0@@26|)))) :qid |MapSpecs.96:16| :skolemid |3871| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@0|))) )) (forall ((|i#7@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@1|) (< |i#7@@1| (|Seq#Length| (Lit |results#0@@2|)))) (MapSpec.__default.InRange (Lit |start#0@@26|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@1|))) (Lit |end#0@@26|))) :qid |MapSpecs.96:16| :skolemid |3872| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@1|))) ))) (forall ((|i#8| Int) (|j#1@@14| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8|) (< |i#8| |j#1@@14|)) (< |j#1@@14| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@14|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@14|)))))) :qid |MapSpecs.97:16| :skolemid |3870| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@14|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8|))) )))) (=> (and (forall ((|i#8@@0| Int) (|j#1@@15| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@0|) (< |i#8@@0| |j#1@@15|)) (< |j#1@@15| (|Seq#Length| (Lit |results#0@@2|)))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@0|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@15|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@0|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@15|)))))) :qid |MapSpecs.97:16| :skolemid |3875| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@15|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@0|))) )) (forall ((|i#8@@1| Int) (|j#1@@16| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@1|) (< |i#8@@1| |j#1@@16|)) (< |j#1@@16| (|Seq#Length| (Lit |results#0@@2|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@1|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@16|))))) :qid |MapSpecs.97:16| :skolemid |3876| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@16|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@1|))) ))) (forall ((|key#1@@25| T@U) ) (!  (=> (and (= (type |key#1@@25|) (SeqType BoxType)) ($Is |key#1@@25| Tclass.KeyType.Key)) (and (and (|MapSpec.__default.InRange#canCall| (Lit |start#0@@26|) |key#1@@25| (Lit |end#0@@26|)) (=> (MapSpec.__default.InRange (Lit |start#0@@26|) |key#1@@25| (Lit |end#0@@26|)) (and (MapSpec.Variables.Variables_q (Lit |s#0@@176|)) |MapSpec.__default.EmptyValue#canCall|))) (=> (and (MapSpec.__default.InRange (Lit |start#0@@26|) |key#1@@25| (Lit |end#0@@26|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@176|)))) ($Box |key#1@@25|))) MapSpec.__default.EmptyValue))) (forall ((|i#9| Int) ) (!  (=> (< |i#9| (|Seq#Length| (Lit |results#0@@2|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#9|)))) :qid |MapSpecs.99:16| :skolemid |3873| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#9|))) ))))) :qid |MapSpecs.98:16| :skolemid |3874| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@176|)) ($Box |key#1@@25|)))) :pattern ( (MapSpec.__default.InRange |start#0@@26| |key#1@@25| |end#0@@26|)) )))) (and (=> (MapSpec.__default.Succ (Lit |k#0@@70|) (Lit |s#0@@176|) (Lit |s'#0@@11|) (Lit |uiop#0@@7|) (Lit |start#0@@26|) (Lit |results#0@@2|) (Lit |end#0@@26|)) (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@26|) (Lit |results#0@@2|) (Lit |end#0@@26|))) (MapSpec.__default.WF (Lit |s#0@@176|))) (|MapSpec.Variables#Equal| |s'#0@@11| |s#0@@176|)) (MapSpec.__default.NonEmptyRange (Lit |start#0@@26|) (Lit |end#0@@26|))) (forall ((|i#5@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@2|) (< |i#5@@2| (|Seq#Length| (Lit |results#0@@2|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@176|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@2|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@2|))))) :qid |MapSpecs.94:16| :skolemid |3877| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@2|))) ))) (forall ((|i#6@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@2|) (< |i#6@@2| (|Seq#Length| (Lit |results#0@@2|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@2|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |3878| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@2|))) ))) (forall ((|i#7@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@2|) (< |i#7@@2| (|Seq#Length| (Lit |results#0@@2|)))) (MapSpec.__default.InRange (Lit |start#0@@26|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@2|))) (Lit |end#0@@26|))) :qid |MapSpecs.96:16| :skolemid |3879| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@2|))) ))) (forall ((|i#8@@2| Int) (|j#1@@17| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@2|) (< |i#8@@2| |j#1@@17|)) (< |j#1@@17| (|Seq#Length| (Lit |results#0@@2|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@2|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@17|))))) :qid |MapSpecs.97:16| :skolemid |3880| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@17|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@2|))) ))) (forall ((|key#1@@26| T@U) ) (!  (=> (= (type |key#1@@26|) (SeqType BoxType)) (=> (and ($Is |key#1@@26| Tclass.KeyType.Key) (and (MapSpec.__default.InRange (Lit |start#0@@26|) |key#1@@26| (Lit |end#0@@26|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@176|)))) ($Box |key#1@@26|))) MapSpec.__default.EmptyValue)))) (exists ((|i#9@@0| Int) ) (!  (and (and (<= (LitInt 0) |i#9@@0|) (< |i#9@@0| (|Seq#Length| (Lit |results#0@@2|)))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#9@@0|))) |key#1@@26|)) :qid |MapSpecs.99:16| :skolemid |3881| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#9@@0|))) )))) :qid |MapSpecs.98:16| :skolemid |3882| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@176|)) ($Box |key#1@@26|)))) :pattern ( (MapSpec.__default.InRange |start#0@@26| |key#1@@26| |end#0@@26|)) )))) (=> (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@26|) (Lit |results#0@@2|) (Lit |end#0@@26|))) (MapSpec.__default.WF (Lit |s#0@@176|))) (|MapSpec.Variables#Equal| |s'#0@@11| |s#0@@176|)) (MapSpec.__default.NonEmptyRange (Lit |start#0@@26|) (Lit |end#0@@26|))) (forall ((|i#5@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@3|) (< |i#5@@3| (|Seq#Length| (Lit |results#0@@2|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@176|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@3|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#5@@3|))))) :qid |MapSpecs.94:16| :skolemid |3877| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#5@@3|))) ))) (forall ((|i#6@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@3|) (< |i#6@@3| (|Seq#Length| (Lit |results#0@@2|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#6@@3|))) MapSpec.__default.EmptyValue))) :qid |MapSpecs.95:16| :skolemid |3878| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#6@@3|))) ))) (forall ((|i#7@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@3|) (< |i#7@@3| (|Seq#Length| (Lit |results#0@@2|)))) (MapSpec.__default.InRange (Lit |start#0@@26|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#7@@3|))) (Lit |end#0@@26|))) :qid |MapSpecs.96:16| :skolemid |3879| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#7@@3|))) ))) (forall ((|i#8@@3| Int) (|j#1@@18| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@3|) (< |i#8@@3| |j#1@@18|)) (< |j#1@@18| (|Seq#Length| (Lit |results#0@@2|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#8@@3|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |j#1@@18|))))) :qid |MapSpecs.97:16| :skolemid |3880| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |j#1@@18|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#8@@3|))) ))) (forall ((|key#1@@27| T@U) ) (!  (=> (= (type |key#1@@27|) (SeqType BoxType)) (=> (and ($Is |key#1@@27| Tclass.KeyType.Key) (and (MapSpec.__default.InRange (Lit |start#0@@26|) |key#1@@27| (Lit |end#0@@26|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@176|)))) ($Box |key#1@@27|))) MapSpec.__default.EmptyValue)))) (exists ((|i#9@@1| Int) ) (!  (and (and (<= (LitInt 0) |i#9@@1|) (< |i#9@@1| (|Seq#Length| (Lit |results#0@@2|)))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@2|) |i#9@@1|))) |key#1@@27|)) :qid |MapSpecs.99:16| :skolemid |3881| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@2| |i#9@@1|))) )))) :qid |MapSpecs.98:16| :skolemid |3882| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@176|)) ($Box |key#1@@27|)))) :pattern ( (MapSpec.__default.InRange |start#0@@26| |key#1@@27| |end#0@@26|)) ))) (MapSpec.__default.Succ (Lit |k#0@@70|) (Lit |s#0@@176|) (Lit |s'#0@@11|) (Lit |uiop#0@@7|) (Lit |start#0@@26|) (Lit |results#0@@2|) (Lit |end#0@@26|)))))) :qid |MapSpecs.87:18| :weight 3 :skolemid |3883| :pattern ( (MapSpec.__default.Succ (Lit |k#0@@70|) (Lit |s#0@@176|) (Lit |s'#0@@11|) (Lit |uiop#0@@7|) (Lit |start#0@@26|) (Lit |results#0@@2|) (Lit |end#0@@26|))) ))))
(assert  (=> true (forall ((|k#0@@71| T@U) (|s#0@@177| T@U) (|s'#0@@12| T@U) (|uiop#0@@8| T@U) (|key#0@@210| T@U) (|new_value#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |k#0@@71|) DatatypeTypeType) (= (type |s#0@@177|) DatatypeTypeType)) (= (type |s'#0@@12|) DatatypeTypeType)) (= (type |uiop#0@@8|) DatatypeTypeType)) (= (type |key#0@@210|) (SeqType BoxType))) (= (type |new_value#0|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| |k#0@@71| |s#0@@177| |s'#0@@12| |uiop#0@@8| |key#0@@210| |new_value#0|) (and (and (and (and (and ($Is |k#0@@71| Tclass.MapSpec.Constants) ($Is |s#0@@177| Tclass.MapSpec.Variables)) ($Is |s'#0@@12| Tclass.MapSpec.Variables)) ($Is |uiop#0@@8| Tclass.UI.Op)) ($Is |key#0@@210| Tclass.KeyType.Key)) ($Is |new_value#0| Tclass.ValueType.Value)))) (MapSpec.__default.Write |k#0@@71| |s#0@@177| |s'#0@@12| |uiop#0@@8| |key#0@@210| |new_value#0|)) (MapSpec.__default.WF |s'#0@@12|)) :qid |MapSpecs.102:19| :skolemid |3884| :pattern ( (MapSpec.__default.Write |k#0@@71| |s#0@@177| |s'#0@@12| |uiop#0@@8| |key#0@@210| |new_value#0|)) ))))
(assert (forall ((|k#0@@72| T@U) (|s#0@@178| T@U) (|s'#0@@13| T@U) (|uiop#0@@9| T@U) (|key#0@@211| T@U) (|new_value#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@72|) DatatypeTypeType) (= (type |s#0@@178|) DatatypeTypeType)) (= (type |s'#0@@13|) DatatypeTypeType)) (= (type |uiop#0@@9|) DatatypeTypeType)) (= (type |key#0@@211|) (SeqType BoxType))) (= (type |new_value#0@@0|) (SeqType BoxType))) (and (and (and (and (and ($Is |k#0@@72| Tclass.MapSpec.Constants) ($Is |s#0@@178| Tclass.MapSpec.Variables)) ($Is |s'#0@@13| Tclass.MapSpec.Variables)) ($Is |uiop#0@@9| Tclass.UI.Op)) ($Is |key#0@@211| Tclass.KeyType.Key)) ($Is |new_value#0@@0| Tclass.ValueType.Value))) (and (=> (|MapSpec.__default.Write#requires| |k#0@@72| |s#0@@178| |s'#0@@13| |uiop#0@@9| |key#0@@211| |new_value#0@@0|) true) (=> true (|MapSpec.__default.Write#requires| |k#0@@72| |s#0@@178| |s'#0@@13| |uiop#0@@9| |key#0@@211| |new_value#0@@0|)))) :qid |MapSpecs.102:19| :skolemid |3885| :pattern ( (|MapSpec.__default.Write#requires| |k#0@@72| |s#0@@178| |s'#0@@13| |uiop#0@@9| |key#0@@211| |new_value#0@@0|)) )))
(assert  (=> true (forall ((|k#0@@73| T@U) (|s#0@@179| T@U) (|s'#0@@14| T@U) (|uiop#0@@10| T@U) (|key#0@@212| T@U) (|new_value#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@73|) DatatypeTypeType) (= (type |s#0@@179|) DatatypeTypeType)) (= (type |s'#0@@14|) DatatypeTypeType)) (= (type |uiop#0@@10|) DatatypeTypeType)) (= (type |key#0@@212|) (SeqType BoxType))) (= (type |new_value#0@@1|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| |k#0@@73| |s#0@@179| |s'#0@@14| |uiop#0@@10| |key#0@@212| |new_value#0@@1|) (and (and (and (and (and ($Is |k#0@@73| Tclass.MapSpec.Constants) ($Is |s#0@@179| Tclass.MapSpec.Variables)) ($Is |s'#0@@14| Tclass.MapSpec.Variables)) ($Is |uiop#0@@10| Tclass.UI.Op)) ($Is |key#0@@212| Tclass.KeyType.Key)) ($Is |new_value#0@@1| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| |uiop#0@@10|) (=> (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@212| |new_value#0@@1|)) (|MapSpec.__default.WF#canCall| |s#0@@179|))) (=> (and (|MapSpec.__default.WF#canCall| |s#0@@179|) (MapSpec.__default.WF |s#0@@179|)) (|MapSpec.__default.WF#canCall| |s'#0@@14|))) (=> (and (|MapSpec.__default.WF#canCall| |s'#0@@14|) (MapSpec.__default.WF |s'#0@@14|)) (and (MapSpec.Variables.Variables_q |s'#0@@14|) (MapSpec.Variables.Variables_q |s#0@@179|)))) (and (=> (MapSpec.__default.Write |k#0@@73| |s#0@@179| |s'#0@@14| |uiop#0@@10| |key#0@@212| |new_value#0@@1|) (and (and (and (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@212| |new_value#0@@1|)) (MapSpec.__default.WF |s#0@@179|)) (MapSpec.__default.WF |s'#0@@14|)) (|IMap#Equal| (MapSpec.Variables.view |s'#0@@14|) (|IMap#Build| (MapSpec.Variables.view |s#0@@179|) ($Box |key#0@@212|) ($Box |new_value#0@@1|))))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@212| |new_value#0@@1|)) (MapSpec.__default.WF |s#0@@179|)) (MapSpec.__default.WF |s'#0@@14|)) (|IMap#Equal| (MapSpec.Variables.view |s'#0@@14|) (|IMap#Build| (MapSpec.Variables.view |s#0@@179|) ($Box |key#0@@212|) ($Box |new_value#0@@1|)))) (MapSpec.__default.Write |k#0@@73| |s#0@@179| |s'#0@@14| |uiop#0@@10| |key#0@@212| |new_value#0@@1|))))) :qid |MapSpecs.102:19| :skolemid |3886| :pattern ( (MapSpec.__default.Write |k#0@@73| |s#0@@179| |s'#0@@14| |uiop#0@@10| |key#0@@212| |new_value#0@@1|)) ))))
(assert  (=> true (forall ((|k#0@@74| T@U) (|s#0@@180| T@U) (|s'#0@@15| T@U) (|uiop#0@@11| T@U) (|key#0@@213| T@U) (|new_value#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@74|) DatatypeTypeType) (= (type |s#0@@180|) DatatypeTypeType)) (= (type |s'#0@@15|) DatatypeTypeType)) (= (type |uiop#0@@11|) DatatypeTypeType)) (= (type |key#0@@213|) (SeqType BoxType))) (= (type |new_value#0@@2|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| (Lit |k#0@@74|) (Lit |s#0@@180|) (Lit |s'#0@@15|) (Lit |uiop#0@@11|) (Lit |key#0@@213|) |new_value#0@@2|) (and (and (and (and (and ($Is |k#0@@74| Tclass.MapSpec.Constants) ($Is |s#0@@180| Tclass.MapSpec.Variables)) ($Is |s'#0@@15| Tclass.MapSpec.Variables)) ($Is |uiop#0@@11| Tclass.UI.Op)) ($Is |key#0@@213| Tclass.KeyType.Key)) ($Is |new_value#0@@2| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@11|)) (=> (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@213|) |new_value#0@@2|)) (|MapSpec.__default.WF#canCall| (Lit |s#0@@180|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@180|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@180|)))))) (|MapSpec.__default.WF#canCall| (Lit |s'#0@@15|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s'#0@@15|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s'#0@@15|)))))) (and (MapSpec.Variables.Variables_q (Lit |s'#0@@15|)) (MapSpec.Variables.Variables_q (Lit |s#0@@180|))))) (and (=> (MapSpec.__default.Write (Lit |k#0@@74|) (Lit |s#0@@180|) (Lit |s'#0@@15|) (Lit |uiop#0@@11|) (Lit |key#0@@213|) |new_value#0@@2|) (and (and (and (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@213|) |new_value#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@180|))) (MapSpec.__default.WF (Lit |s'#0@@15|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@15|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@180|))) ($Box (Lit |key#0@@213|)) ($Box |new_value#0@@2|))))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@213|) |new_value#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@180|))) (MapSpec.__default.WF (Lit |s'#0@@15|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@15|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@180|))) ($Box (Lit |key#0@@213|)) ($Box |new_value#0@@2|)))) (MapSpec.__default.Write (Lit |k#0@@74|) (Lit |s#0@@180|) (Lit |s'#0@@15|) (Lit |uiop#0@@11|) (Lit |key#0@@213|) |new_value#0@@2|))))) :qid |MapSpecs.102:19| :weight 3 :skolemid |3887| :pattern ( (MapSpec.__default.Write (Lit |k#0@@74|) (Lit |s#0@@180|) (Lit |s'#0@@15|) (Lit |uiop#0@@11|) (Lit |key#0@@213|) |new_value#0@@2|)) ))))
(assert  (=> true (forall ((|k#0@@75| T@U) (|s#0@@181| T@U) (|s'#0@@16| T@U) (|uiop#0@@12| T@U) (|key#0@@214| T@U) (|new_value#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |k#0@@75|) DatatypeTypeType) (= (type |s#0@@181|) DatatypeTypeType)) (= (type |s'#0@@16|) DatatypeTypeType)) (= (type |uiop#0@@12|) DatatypeTypeType)) (= (type |key#0@@214|) (SeqType BoxType))) (= (type |new_value#0@@3|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| (Lit |k#0@@75|) (Lit |s#0@@181|) (Lit |s'#0@@16|) (Lit |uiop#0@@12|) (Lit |key#0@@214|) (Lit |new_value#0@@3|)) (and (and (and (and (and ($Is |k#0@@75| Tclass.MapSpec.Constants) ($Is |s#0@@181| Tclass.MapSpec.Variables)) ($Is |s'#0@@16| Tclass.MapSpec.Variables)) ($Is |uiop#0@@12| Tclass.UI.Op)) ($Is |key#0@@214| Tclass.KeyType.Key)) ($Is |new_value#0@@3| Tclass.ValueType.Value)))) (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@12|)) (=> (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@214|) (Lit |new_value#0@@3|))) (|MapSpec.__default.WF#canCall| (Lit |s#0@@181|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@181|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@181|)))))) (|MapSpec.__default.WF#canCall| (Lit |s'#0@@16|)))) (=> (and (|MapSpec.__default.WF#canCall| (Lit |s'#0@@16|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s'#0@@16|)))))) (and (MapSpec.Variables.Variables_q (Lit |s'#0@@16|)) (MapSpec.Variables.Variables_q (Lit |s#0@@181|))))) (and (=> (MapSpec.__default.Write (Lit |k#0@@75|) (Lit |s#0@@181|) (Lit |s'#0@@16|) (Lit |uiop#0@@12|) (Lit |key#0@@214|) (Lit |new_value#0@@3|)) (and (and (and (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@214|) (Lit |new_value#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@181|))) (MapSpec.__default.WF (Lit |s'#0@@16|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@16|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@181|))) ($Box (Lit |key#0@@214|)) ($Box (Lit |new_value#0@@3|)))))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@214|) (Lit |new_value#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@181|))) (MapSpec.__default.WF (Lit |s'#0@@16|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@16|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@181|))) ($Box (Lit |key#0@@214|)) ($Box (Lit |new_value#0@@3|))))) (MapSpec.__default.Write (Lit |k#0@@75|) (Lit |s#0@@181|) (Lit |s'#0@@16|) (Lit |uiop#0@@12|) (Lit |key#0@@214|) (Lit |new_value#0@@3|)))))) :qid |MapSpecs.102:19| :weight 3 :skolemid |3888| :pattern ( (MapSpec.__default.Write (Lit |k#0@@75|) (Lit |s#0@@181|) (Lit |s'#0@@16|) (Lit |uiop#0@@12|) (Lit |key#0@@214|) (Lit |new_value#0@@3|))) ))))
(assert  (=> true (forall ((|k#0@@76| T@U) (|s#0@@182| T@U) (|s'#0@@17| T@U) (|uiop#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@76|) DatatypeTypeType) (= (type |s#0@@182|) DatatypeTypeType)) (= (type |s'#0@@17|) DatatypeTypeType)) (= (type |uiop#0@@13|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| |k#0@@76| |s#0@@182| |s'#0@@17| |uiop#0@@13|) (and (and (and ($Is |k#0@@76| Tclass.MapSpec.Constants) ($Is |s#0@@182| Tclass.MapSpec.Variables)) ($Is |s'#0@@17| Tclass.MapSpec.Variables)) ($Is |uiop#0@@13| Tclass.UI.Op)))) true) :qid |MapSpecs.111:21| :skolemid |3889| :pattern ( (MapSpec.__default.Stutter |k#0@@76| |s#0@@182| |s'#0@@17| |uiop#0@@13|)) ))))
(assert (forall ((|k#0@@77| T@U) (|s#0@@183| T@U) (|s'#0@@18| T@U) (|uiop#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@77|) DatatypeTypeType) (= (type |s#0@@183|) DatatypeTypeType)) (= (type |s'#0@@18|) DatatypeTypeType)) (= (type |uiop#0@@14|) DatatypeTypeType)) (and (and (and ($Is |k#0@@77| Tclass.MapSpec.Constants) ($Is |s#0@@183| Tclass.MapSpec.Variables)) ($Is |s'#0@@18| Tclass.MapSpec.Variables)) ($Is |uiop#0@@14| Tclass.UI.Op))) (and (=> (|MapSpec.__default.Stutter#requires| |k#0@@77| |s#0@@183| |s'#0@@18| |uiop#0@@14|) true) (=> true (|MapSpec.__default.Stutter#requires| |k#0@@77| |s#0@@183| |s'#0@@18| |uiop#0@@14|)))) :qid |MapSpecs.111:21| :skolemid |3890| :pattern ( (|MapSpec.__default.Stutter#requires| |k#0@@77| |s#0@@183| |s'#0@@18| |uiop#0@@14|)) )))
(assert  (=> true (forall ((|k#0@@78| T@U) (|s#0@@184| T@U) (|s'#0@@19| T@U) (|uiop#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@78|) DatatypeTypeType) (= (type |s#0@@184|) DatatypeTypeType)) (= (type |s'#0@@19|) DatatypeTypeType)) (= (type |uiop#0@@15|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| |k#0@@78| |s#0@@184| |s'#0@@19| |uiop#0@@15|) (and (and (and ($Is |k#0@@78| Tclass.MapSpec.Constants) ($Is |s#0@@184| Tclass.MapSpec.Variables)) ($Is |s'#0@@19| Tclass.MapSpec.Variables)) ($Is |uiop#0@@15| Tclass.UI.Op)))) (and (=> (UI.Op.NoOp_q |uiop#0@@15|) (and (|$IsA#MapSpec.Variables| |s'#0@@19|) (|$IsA#MapSpec.Variables| |s#0@@184|))) (and (=> (MapSpec.__default.Stutter |k#0@@78| |s#0@@184| |s'#0@@19| |uiop#0@@15|) (and (UI.Op.NoOp_q |uiop#0@@15|) (|MapSpec.Variables#Equal| |s'#0@@19| |s#0@@184|))) (=> (and (UI.Op.NoOp_q |uiop#0@@15|) (|MapSpec.Variables#Equal| |s'#0@@19| |s#0@@184|)) (MapSpec.__default.Stutter |k#0@@78| |s#0@@184| |s'#0@@19| |uiop#0@@15|))))) :qid |MapSpecs.111:21| :skolemid |3891| :pattern ( (MapSpec.__default.Stutter |k#0@@78| |s#0@@184| |s'#0@@19| |uiop#0@@15|)) ))))
(assert  (=> true (forall ((|k#0@@79| T@U) (|s#0@@185| T@U) (|s'#0@@20| T@U) (|uiop#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@79|) DatatypeTypeType) (= (type |s#0@@185|) DatatypeTypeType)) (= (type |s'#0@@20|) DatatypeTypeType)) (= (type |uiop#0@@16|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| (Lit |k#0@@79|) (Lit |s#0@@185|) (Lit |s'#0@@20|) (Lit |uiop#0@@16|)) (and (and (and ($Is |k#0@@79| Tclass.MapSpec.Constants) ($Is |s#0@@185| Tclass.MapSpec.Variables)) ($Is |s'#0@@20| Tclass.MapSpec.Variables)) ($Is |uiop#0@@16| Tclass.UI.Op)))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@16|))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@20|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@185|)))) (and (=> (MapSpec.__default.Stutter (Lit |k#0@@79|) (Lit |s#0@@185|) (Lit |s'#0@@20|) (Lit |uiop#0@@16|)) (and (UI.Op.NoOp_q (Lit |uiop#0@@16|)) (|MapSpec.Variables#Equal| |s'#0@@20| |s#0@@185|))) (=> (and (UI.Op.NoOp_q (Lit |uiop#0@@16|)) (|MapSpec.Variables#Equal| |s'#0@@20| |s#0@@185|)) (MapSpec.__default.Stutter (Lit |k#0@@79|) (Lit |s#0@@185|) (Lit |s'#0@@20|) (Lit |uiop#0@@16|)))))) :qid |MapSpecs.111:21| :weight 3 :skolemid |3892| :pattern ( (MapSpec.__default.Stutter (Lit |k#0@@79|) (Lit |s#0@@185|) (Lit |s'#0@@20|) (Lit |uiop#0@@16|))) ))))
(assert  (=> true (forall ((|k#0@@80| T@U) (|s#0@@186| T@U) (|s'#0@@21| T@U) (|uiop#0@@17| T@U) (|step#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@80|) DatatypeTypeType) (= (type |s#0@@186|) DatatypeTypeType)) (= (type |s'#0@@21|) DatatypeTypeType)) (= (type |uiop#0@@17|) DatatypeTypeType)) (= (type |step#0|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| |k#0@@80| |s#0@@186| |s'#0@@21| |uiop#0@@17| |step#0|) (and (and (and (and ($Is |k#0@@80| Tclass.MapSpec.Constants) ($Is |s#0@@186| Tclass.MapSpec.Variables)) ($Is |s'#0@@21| Tclass.MapSpec.Variables)) ($Is |uiop#0@@17| Tclass.UI.Op)) ($Is |step#0| Tclass.MapSpec.Step)))) true) :qid |MapSpecs.124:22| :skolemid |3893| :pattern ( (MapSpec.__default.NextStep |k#0@@80| |s#0@@186| |s'#0@@21| |uiop#0@@17| |step#0|)) ))))
(assert (forall ((|k#0@@81| T@U) (|s#0@@187| T@U) (|s'#0@@22| T@U) (|uiop#0@@18| T@U) (|step#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@81|) DatatypeTypeType) (= (type |s#0@@187|) DatatypeTypeType)) (= (type |s'#0@@22|) DatatypeTypeType)) (= (type |uiop#0@@18|) DatatypeTypeType)) (= (type |step#0@@0|) DatatypeTypeType)) (and (and (and (and ($Is |k#0@@81| Tclass.MapSpec.Constants) ($Is |s#0@@187| Tclass.MapSpec.Variables)) ($Is |s'#0@@22| Tclass.MapSpec.Variables)) ($Is |uiop#0@@18| Tclass.UI.Op)) ($Is |step#0@@0| Tclass.MapSpec.Step))) (and (=> (|MapSpec.__default.NextStep#requires| |k#0@@81| |s#0@@187| |s'#0@@22| |uiop#0@@18| |step#0@@0|) true) (=> true (|MapSpec.__default.NextStep#requires| |k#0@@81| |s#0@@187| |s'#0@@22| |uiop#0@@18| |step#0@@0|)))) :qid |MapSpecs.124:22| :skolemid |3894| :pattern ( (|MapSpec.__default.NextStep#requires| |k#0@@81| |s#0@@187| |s'#0@@22| |uiop#0@@18| |step#0@@0|)) )))
(assert  (=> true (forall ((|k#0@@82| T@U) (|s#0@@188| T@U) (|s'#0@@23| T@U) (|uiop#0@@19| T@U) (|step#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@82|) DatatypeTypeType) (= (type |s#0@@188|) DatatypeTypeType)) (= (type |s'#0@@23|) DatatypeTypeType)) (= (type |uiop#0@@19|) DatatypeTypeType)) (= (type |step#0@@1|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |step#0@@1|) (and (and (and (and ($Is |k#0@@82| Tclass.MapSpec.Constants) ($Is |s#0@@188| Tclass.MapSpec.Variables)) ($Is |s'#0@@23| Tclass.MapSpec.Variables)) ($Is |uiop#0@@19| Tclass.UI.Op)) ($Is |step#0@@1| Tclass.MapSpec.Step)))) (and (and (=> (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#0@@4| (MapSpec.Step.result |step#0@@1|))) (let ((|key#0@@215| (MapSpec.Step.key |step#0@@1|))) (|MapSpec.__default.Query#canCall| |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |key#0@@215| |result#0@@4|)))) (=> (not (MapSpec.Step.QueryStep_q |step#0@@1|)) (and (=> (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#0@@4| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#1@@28| (MapSpec.Step.key |step#0@@1|))) (|MapSpec.__default.Write#canCall| |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |key#1@@28| |new_value#0@@4|)))) (=> (not (MapSpec.Step.WriteStep_q |step#0@@1|)) (and (=> (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#0@@27| (MapSpec.Step.end |step#0@@1|))) (let ((|results#0@@3| (MapSpec.Step.results |step#0@@1|))) (let ((|start#0@@27| (MapSpec.Step.start |step#0@@1|))) (|MapSpec.__default.Succ#canCall| |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |start#0@@27| |results#0@@3| |end#0@@27|))))) (=> (not (MapSpec.Step.SuccStep_q |step#0@@1|)) (|MapSpec.__default.Stutter#canCall| |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19|))))))) (and (=> (MapSpec.__default.NextStep |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |step#0@@1|) (ite (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#1| (MapSpec.Step.result |step#0@@1|))) (let ((|key#2@@4| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Query |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |key#2@@4| |result#1|))) (ite (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#1| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#3@@2| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Write |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |key#3@@2| |new_value#1|))) (ite (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#1| (MapSpec.Step.end |step#0@@1|))) (let ((|results#1| (MapSpec.Step.results |step#0@@1|))) (let ((|start#1| (MapSpec.Step.start |step#0@@1|))) (MapSpec.__default.Succ |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |start#1| |results#1| |end#1|)))) (MapSpec.__default.Stutter |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19|))))) (=> (ite (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#1@@0| (MapSpec.Step.result |step#0@@1|))) (let ((|key#2@@5| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Query |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |key#2@@5| |result#1@@0|))) (ite (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#1@@0| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#3@@3| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Write |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |key#3@@3| |new_value#1@@0|))) (ite (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#1@@0| (MapSpec.Step.end |step#0@@1|))) (let ((|results#1@@0| (MapSpec.Step.results |step#0@@1|))) (let ((|start#1@@0| (MapSpec.Step.start |step#0@@1|))) (MapSpec.__default.Succ |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |start#1@@0| |results#1@@0| |end#1@@0|)))) (MapSpec.__default.Stutter |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19|)))) (MapSpec.__default.NextStep |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |step#0@@1|))))) :qid |MapSpecs.124:22| :skolemid |3895| :pattern ( (MapSpec.__default.NextStep |k#0@@82| |s#0@@188| |s'#0@@23| |uiop#0@@19| |step#0@@1|)) ))))
(assert  (=> true (forall ((|k#0@@83| T@U) (|s#0@@189| T@U) (|s'#0@@24| T@U) (|uiop#0@@20| T@U) (|step#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@83|) DatatypeTypeType) (= (type |s#0@@189|) DatatypeTypeType)) (= (type |s'#0@@24|) DatatypeTypeType)) (= (type |uiop#0@@20|) DatatypeTypeType)) (= (type |step#0@@2|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)) (and (and (and (and ($Is |k#0@@83| Tclass.MapSpec.Constants) ($Is |s#0@@189| Tclass.MapSpec.Variables)) ($Is |s'#0@@24| Tclass.MapSpec.Variables)) ($Is |uiop#0@@20| Tclass.UI.Op)) ($Is |step#0@@2| Tclass.MapSpec.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.QueryStep_q (Lit |step#0@@2|))))) (let ((|result#2| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#4| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (|MapSpec.__default.Query#canCall| (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) |key#4| |result#2|)))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.WriteStep_q (Lit |step#0@@2|))))) (let ((|new_value#2| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#5| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (|MapSpec.__default.Write#canCall| (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) |key#5| |new_value#2|)))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.SuccStep_q (Lit |step#0@@2|))))) (let ((|end#2| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#2| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#2| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (|MapSpec.__default.Succ#canCall| (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) |start#2| |results#2| |end#2|))))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)))))) (|MapSpec.__default.Stutter#canCall| (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|)))))))) (and (=> (MapSpec.__default.NextStep (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)) (ite (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|result#3| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#6| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Query (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) |key#6| |result#3|)))))) (ite (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|new_value#3| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#7| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Write (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) |key#7| |new_value#3|)))))) (ite (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|end#3| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#3| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#3| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Succ (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) |start#3| |results#3| |end#3|))))))) (MapSpec.__default.Stutter (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|)))))) (=> (ite (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|result#3@@0| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#6@@0| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Query (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) |key#6@@0| |result#3@@0|)))))) (ite (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|new_value#3@@0| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#7@@0| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Write (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) |key#7@@0| |new_value#3@@0|)))))) (ite (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|end#3@@0| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#3@@0| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#3@@0| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Succ (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) |start#3@@0| |results#3@@0| |end#3@@0|))))))) (MapSpec.__default.Stutter (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|))))) (MapSpec.__default.NextStep (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)))))) :qid |MapSpecs.124:22| :weight 3 :skolemid |3896| :pattern ( (MapSpec.__default.NextStep (Lit |k#0@@83|) (Lit |s#0@@189|) (Lit |s'#0@@24|) (Lit |uiop#0@@20|) (Lit |step#0@@2|))) ))))
(assert  (=> true (forall ((|k#0@@84| T@U) (|s#0@@190| T@U) (|s'#0@@25| T@U) (|uiop#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@84|) DatatypeTypeType) (= (type |s#0@@190|) DatatypeTypeType)) (= (type |s'#0@@25|) DatatypeTypeType)) (= (type |uiop#0@@21|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| |k#0@@84| |s#0@@190| |s'#0@@25| |uiop#0@@21|) (and (and (and ($Is |k#0@@84| Tclass.MapSpec.Constants) ($Is |s#0@@190| Tclass.MapSpec.Variables)) ($Is |s'#0@@25| Tclass.MapSpec.Variables)) ($Is |uiop#0@@21| Tclass.UI.Op)))) true) :qid |UIStateM.10:18| :skolemid |3897| :pattern ( (MapSpec.__default.Next |k#0@@84| |s#0@@190| |s'#0@@25| |uiop#0@@21|)) ))))
(assert (forall ((|k#0@@85| T@U) (|s#0@@191| T@U) (|s'#0@@26| T@U) (|uiop#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@85|) DatatypeTypeType) (= (type |s#0@@191|) DatatypeTypeType)) (= (type |s'#0@@26|) DatatypeTypeType)) (= (type |uiop#0@@22|) DatatypeTypeType)) (and (and (and ($Is |k#0@@85| Tclass.MapSpec.Constants) ($Is |s#0@@191| Tclass.MapSpec.Variables)) ($Is |s'#0@@26| Tclass.MapSpec.Variables)) ($Is |uiop#0@@22| Tclass.UI.Op))) (and (=> (|MapSpec.__default.Next#requires| |k#0@@85| |s#0@@191| |s'#0@@26| |uiop#0@@22|) true) (=> true (|MapSpec.__default.Next#requires| |k#0@@85| |s#0@@191| |s'#0@@26| |uiop#0@@22|)))) :qid |UIStateM.10:18| :skolemid |3898| :pattern ( (|MapSpec.__default.Next#requires| |k#0@@85| |s#0@@191| |s'#0@@26| |uiop#0@@22|)) )))
(assert  (=> true (forall ((|k#0@@86| T@U) (|s#0@@192| T@U) (|s'#0@@27| T@U) (|uiop#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@86|) DatatypeTypeType) (= (type |s#0@@192|) DatatypeTypeType)) (= (type |s'#0@@27|) DatatypeTypeType)) (= (type |uiop#0@@23|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23|) (and (and (and ($Is |k#0@@86| Tclass.MapSpec.Constants) ($Is |s#0@@192| Tclass.MapSpec.Variables)) ($Is |s'#0@@27| Tclass.MapSpec.Variables)) ($Is |uiop#0@@23| Tclass.UI.Op)))) (and (forall ((|step#0@@3| T@U) ) (!  (=> (and (= (type |step#0@@3|) DatatypeTypeType) ($Is |step#0@@3| Tclass.MapSpec.Step)) (|MapSpec.__default.NextStep#canCall| |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23| |step#0@@3|)) :qid |MapSpecs.136:12| :skolemid |3899| :pattern ( (MapSpec.__default.NextStep |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23| |step#0@@3|)) )) (and (=> (MapSpec.__default.Next |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23|) (exists ((|step#0@@4| T@U) ) (!  (and (= (type |step#0@@4|) DatatypeTypeType) (and ($Is |step#0@@4| Tclass.MapSpec.Step) (MapSpec.__default.NextStep |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23| |step#0@@4|))) :qid |MapSpecs.136:12| :skolemid |3900| :pattern ( (MapSpec.__default.NextStep |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23| |step#0@@4|)) ))) (=> (exists ((|step#0@@5| T@U) ) (!  (and (= (type |step#0@@5|) DatatypeTypeType) (and ($Is |step#0@@5| Tclass.MapSpec.Step) (MapSpec.__default.NextStep |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23| |step#0@@5|))) :qid |MapSpecs.136:12| :skolemid |3900| :pattern ( (MapSpec.__default.NextStep |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23| |step#0@@5|)) )) (MapSpec.__default.Next |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23|))))) :qid |UIStateM.10:18| :skolemid |3901| :pattern ( (MapSpec.__default.Next |k#0@@86| |s#0@@192| |s'#0@@27| |uiop#0@@23|)) ))))
(assert  (=> true (forall ((|k#0@@87| T@U) (|s#0@@193| T@U) (|s'#0@@28| T@U) (|uiop#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@87|) DatatypeTypeType) (= (type |s#0@@193|) DatatypeTypeType)) (= (type |s'#0@@28|) DatatypeTypeType)) (= (type |uiop#0@@24|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| (Lit |k#0@@87|) (Lit |s#0@@193|) (Lit |s'#0@@28|) (Lit |uiop#0@@24|)) (and (and (and ($Is |k#0@@87| Tclass.MapSpec.Constants) ($Is |s#0@@193| Tclass.MapSpec.Variables)) ($Is |s'#0@@28| Tclass.MapSpec.Variables)) ($Is |uiop#0@@24| Tclass.UI.Op)))) (and (forall ((|step#1| T@U) ) (!  (=> (and (= (type |step#1|) DatatypeTypeType) ($Is |step#1| Tclass.MapSpec.Step)) (|MapSpec.__default.NextStep#canCall| (Lit |k#0@@87|) (Lit |s#0@@193|) (Lit |s'#0@@28|) (Lit |uiop#0@@24|) |step#1|)) :qid |MapSpecs.136:12| :skolemid |3902| :pattern ( (MapSpec.__default.NextStep |k#0@@87| |s#0@@193| |s'#0@@28| |uiop#0@@24| |step#1|)) )) (and (=> (MapSpec.__default.Next (Lit |k#0@@87|) (Lit |s#0@@193|) (Lit |s'#0@@28|) (Lit |uiop#0@@24|)) (exists ((|step#1@@0| T@U) ) (!  (and (= (type |step#1@@0|) DatatypeTypeType) (and ($Is |step#1@@0| Tclass.MapSpec.Step) (MapSpec.__default.NextStep (Lit |k#0@@87|) (Lit |s#0@@193|) (Lit |s'#0@@28|) (Lit |uiop#0@@24|) |step#1@@0|))) :qid |MapSpecs.136:12| :skolemid |3903| :pattern ( (MapSpec.__default.NextStep |k#0@@87| |s#0@@193| |s'#0@@28| |uiop#0@@24| |step#1@@0|)) ))) (=> (exists ((|step#1@@1| T@U) ) (!  (and (= (type |step#1@@1|) DatatypeTypeType) (and ($Is |step#1@@1| Tclass.MapSpec.Step) (MapSpec.__default.NextStep (Lit |k#0@@87|) (Lit |s#0@@193|) (Lit |s'#0@@28|) (Lit |uiop#0@@24|) |step#1@@1|))) :qid |MapSpecs.136:12| :skolemid |3903| :pattern ( (MapSpec.__default.NextStep |k#0@@87| |s#0@@193| |s'#0@@28| |uiop#0@@24| |step#1@@1|)) )) (MapSpec.__default.Next (Lit |k#0@@87|) (Lit |s#0@@193|) (Lit |s'#0@@28|) (Lit |uiop#0@@24|)))))) :qid |UIStateM.10:18| :weight 3 :skolemid |3904| :pattern ( (MapSpec.__default.Next (Lit |k#0@@87|) (Lit |s#0@@193|) (Lit |s'#0@@28|) (Lit |uiop#0@@24|))) ))))
(assert  (=> true (forall ((|k#0@@88| T@U) (|s#0@@194| T@U) ) (!  (=> (and (and (= (type |k#0@@88|) DatatypeTypeType) (= (type |s#0@@194|) DatatypeTypeType)) (or (|MapSpec.__default.Inv#canCall| |k#0@@88| |s#0@@194|) (and ($Is |k#0@@88| Tclass.MapSpec.Constants) ($Is |s#0@@194| Tclass.MapSpec.Variables)))) true) :qid |UIStateM.12:17| :skolemid |3905| :pattern ( (MapSpec.__default.Inv |k#0@@88| |s#0@@194|)) ))))
(assert (forall ((|k#0@@89| T@U) (|s#0@@195| T@U) ) (!  (=> (and (and (= (type |k#0@@89|) DatatypeTypeType) (= (type |s#0@@195|) DatatypeTypeType)) (and ($Is |k#0@@89| Tclass.MapSpec.Constants) ($Is |s#0@@195| Tclass.MapSpec.Variables))) (and (=> (|MapSpec.__default.Inv#requires| |k#0@@89| |s#0@@195|) true) (=> true (|MapSpec.__default.Inv#requires| |k#0@@89| |s#0@@195|)))) :qid |UIStateM.12:17| :skolemid |3906| :pattern ( (|MapSpec.__default.Inv#requires| |k#0@@89| |s#0@@195|)) )))
(assert  (=> true (forall ((|k#0@@90| T@U) (|s#0@@196| T@U) ) (!  (=> (and (and (= (type |k#0@@90|) DatatypeTypeType) (= (type |s#0@@196|) DatatypeTypeType)) (or (|MapSpec.__default.Inv#canCall| |k#0@@90| |s#0@@196|) (and ($Is |k#0@@90| Tclass.MapSpec.Constants) ($Is |s#0@@196| Tclass.MapSpec.Variables)))) (and (|MapSpec.__default.WF#canCall| |s#0@@196|) (and (=> (MapSpec.__default.Inv |k#0@@90| |s#0@@196|) (MapSpec.__default.WF |s#0@@196|)) (=> (MapSpec.__default.WF |s#0@@196|) (MapSpec.__default.Inv |k#0@@90| |s#0@@196|))))) :qid |UIStateM.12:17| :skolemid |3907| :pattern ( (MapSpec.__default.Inv |k#0@@90| |s#0@@196|)) ))))
(assert  (=> true (forall ((|k#0@@91| T@U) (|s#0@@197| T@U) ) (!  (=> (and (and (= (type |k#0@@91|) DatatypeTypeType) (= (type |s#0@@197|) DatatypeTypeType)) (or (|MapSpec.__default.Inv#canCall| (Lit |k#0@@91|) (Lit |s#0@@197|)) (and ($Is |k#0@@91| Tclass.MapSpec.Constants) ($Is |s#0@@197| Tclass.MapSpec.Variables)))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@197|)) (and (=> (MapSpec.__default.Inv (Lit |k#0@@91|) (Lit |s#0@@197|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@197|)))))) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@197|))))) (MapSpec.__default.Inv (Lit |k#0@@91|) (Lit |s#0@@197|)))))) :qid |UIStateM.12:17| :weight 3 :skolemid |3908| :pattern ( (MapSpec.__default.Inv (Lit |k#0@@91|) (Lit |s#0@@197|))) ))))
(assert (= (type Tclass.Multisets.__default) TyType))
(assert (= (Tag Tclass.Multisets.__default) Tagclass.Multisets.__default))
(assert (forall ((bx@@153 T@U) ) (!  (=> (and (= (type bx@@153) BoxType) ($IsBox bx@@153 Tclass.Multisets.__default)) (and (= ($Box ($Unbox refType bx@@153)) bx@@153) ($Is ($Unbox refType bx@@153) Tclass.Multisets.__default))) :qid |unknown.0:0| :skolemid |3909| :pattern ( ($IsBox bx@@153 Tclass.Multisets.__default)) )))
(assert (forall (($o@@46 T@U) ) (!  (=> (= (type $o@@46) refType) (and (=> ($Is $o@@46 Tclass.Multisets.__default) (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Multisets.__default))) (=> (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Multisets.__default)) ($Is $o@@46 Tclass.Multisets.__default)))) :qid |unknown.0:0| :skolemid |3910| :pattern ( ($Is $o@@46 Tclass.Multisets.__default)) )))
(assert (forall (($o@@47 T@U) ($h@@116 T@U) ) (!  (=> (and (= (type $o@@47) refType) (= (type $h@@116) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@47 Tclass.Multisets.__default $h@@116) (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@116 $o@@47) alloc)))) (=> (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@116 $o@@47) alloc))) ($IsAlloc $o@@47 Tclass.Multisets.__default $h@@116)))) :qid |unknown.0:0| :skolemid |3911| :pattern ( ($IsAlloc $o@@47 Tclass.Multisets.__default $h@@116)) )))
(assert (forall ((arg0@@524 T@U) (arg1@@301 T@U) (arg2@@209 T@U) ) (! (= (type (Multisets.__default.Choose arg0@@524 arg1@@301 arg2@@209)) BoxType) :qid |funType:Multisets.__default.Choose| :pattern ( (Multisets.__default.Choose arg0@@524 arg1@@301 arg2@@209)) )))
(assert (forall ((Multisets._default.Choose$A T@U) ($ly@@639 T@U) (|s#0@@198| T@U) ) (!  (=> (and (and (= (type Multisets._default.Choose$A) TyType) (= (type $ly@@639) LayerTypeType)) (= (type |s#0@@198|) (MapType0Type BoxType intType))) (= (Multisets.__default.Choose Multisets._default.Choose$A ($LS $ly@@639) |s#0@@198|) (Multisets.__default.Choose Multisets._default.Choose$A $ly@@639 |s#0@@198|))) :qid |unknown.0:0| :skolemid |3912| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A ($LS $ly@@639) |s#0@@198|)) )))
(assert (forall ((Multisets._default.Choose$A@@0 T@U) ($ly@@640 T@U) (|s#0@@199| T@U) ) (!  (=> (and (and (= (type Multisets._default.Choose$A@@0) TyType) (= (type $ly@@640) LayerTypeType)) (= (type |s#0@@199|) (MapType0Type BoxType intType))) (= (Multisets.__default.Choose Multisets._default.Choose$A@@0 $ly@@640 |s#0@@199|) (Multisets.__default.Choose Multisets._default.Choose$A@@0 $LZ |s#0@@199|))) :qid |unknown.0:0| :skolemid |3913| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@0 (AsFuelBottom $ly@@640) |s#0@@199|)) )))
(assert  (=> true (forall ((Multisets._default.Choose$A@@1 T@U) ($ly@@641 T@U) (|s#0@@200| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.Choose$A@@1) TyType) (= (type $ly@@641) LayerTypeType)) (= (type |s#0@@200|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Choose#canCall| Multisets._default.Choose$A@@1 |s#0@@200|) (and ($Is |s#0@@200| (TMultiSet Multisets._default.Choose$A@@1)) (< 0 (|MultiSet#Card| |s#0@@200|))))) (and (> (U_2_int (MapType0Select |s#0@@200| (Multisets.__default.Choose Multisets._default.Choose$A@@1 $ly@@641 |s#0@@200|))) 0) ($IsBox (Multisets.__default.Choose Multisets._default.Choose$A@@1 $ly@@641 |s#0@@200|) Multisets._default.Choose$A@@1))) :qid |unknown.0:0| :skolemid |3914| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@1 $ly@@641 |s#0@@200|)) ))))
(assert (forall ((Multisets._default.Choose$A@@2 T@U) ($ly@@642 T@U) ($Heap@@54 T@U) (|s#0@@201| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.Choose$A@@2) TyType) (= (type $ly@@642) LayerTypeType)) (= (type $Heap@@54) (MapType0Type refType MapType1Type))) (= (type |s#0@@201|) (MapType0Type BoxType intType))) (and ($IsGoodHeap $Heap@@54) ($Is |s#0@@201| (TMultiSet Multisets._default.Choose$A@@2)))) (and (=> (|Multisets.__default.Choose#requires| Multisets._default.Choose$A@@2 $ly@@642 |s#0@@201|) (< 0 (|MultiSet#Card| |s#0@@201|))) (=> (< 0 (|MultiSet#Card| |s#0@@201|)) (|Multisets.__default.Choose#requires| Multisets._default.Choose$A@@2 $ly@@642 |s#0@@201|)))) :qid |unknown.0:0| :skolemid |3915| :pattern ( (|Multisets.__default.Choose#requires| Multisets._default.Choose$A@@2 $ly@@642 |s#0@@201|) ($IsGoodHeap $Heap@@54)) )))
(assert (forall ((arg0@@525 T@U) (arg1@@302 T@U) ) (! (= (type (|$let#22_a| arg0@@525 arg1@@302)) BoxType) :qid |funType:$let#22_a| :pattern ( (|$let#22_a| arg0@@525 arg1@@302)) )))
(assert (forall ((Multisets._default.Choose$A@@3 T@U) (s@@50 T@U) ) (!  (=> (and (and (= (type Multisets._default.Choose$A@@3) TyType) (= (type s@@50) (MapType0Type BoxType intType))) (|$let#22$canCall| Multisets._default.Choose$A@@3 s@@50)) (> (U_2_int (MapType0Select s@@50 (|$let#22_a| Multisets._default.Choose$A@@3 s@@50))) 0)) :qid |Multiset.16:5| :skolemid |3916| :pattern ( (|$let#22_a| Multisets._default.Choose$A@@3 s@@50)) )))
(assert  (=> true (forall ((Multisets._default.Choose$A@@4 T@U) ($ly@@643 T@U) ($Heap@@55 T@U) (|s#0@@202| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.Choose$A@@4) TyType) (= (type $ly@@643) LayerTypeType)) (= (type $Heap@@55) (MapType0Type refType MapType1Type))) (= (type |s#0@@202|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Choose#canCall| Multisets._default.Choose$A@@4 |s#0@@202|) (and (and ($IsGoodHeap $Heap@@55) ($Is |s#0@@202| (TMultiSet Multisets._default.Choose$A@@4))) (< 0 (|MultiSet#Card| |s#0@@202|))))) (and (|$let#22$canCall| Multisets._default.Choose$A@@4 |s#0@@202|) (= (Multisets.__default.Choose Multisets._default.Choose$A@@4 ($LS $ly@@643) |s#0@@202|) (let ((|a#0@@161| (|$let#22_a| Multisets._default.Choose$A@@4 |s#0@@202|))) |a#0@@161|)))) :qid |unknown.0:0| :skolemid |3917| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@4 ($LS $ly@@643) |s#0@@202|) ($IsGoodHeap $Heap@@55)) ))))
(assert  (=> true (forall ((Multisets._default.Choose$A@@5 T@U) ($ly@@644 T@U) ($Heap@@56 T@U) (|s#0@@203| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.Choose$A@@5) TyType) (= (type $ly@@644) LayerTypeType)) (= (type $Heap@@56) (MapType0Type refType MapType1Type))) (= (type |s#0@@203|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Choose#canCall| Multisets._default.Choose$A@@5 (Lit |s#0@@203|)) (and (and ($IsGoodHeap $Heap@@56) ($Is |s#0@@203| (TMultiSet Multisets._default.Choose$A@@5))) (< 0 (|MultiSet#Card| (Lit |s#0@@203|)))))) (and (|$let#22$canCall| Multisets._default.Choose$A@@5 (Lit |s#0@@203|)) (= (Multisets.__default.Choose Multisets._default.Choose$A@@5 ($LS $ly@@644) (Lit |s#0@@203|)) (let ((|a#1@@6| (|$let#22_a| Multisets._default.Choose$A@@5 (Lit |s#0@@203|)))) |a#1@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |3918| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@5 ($LS $ly@@644) (Lit |s#0@@203|)) ($IsGoodHeap $Heap@@56)) ))))
(assert (forall ((arg0@@526 T@U) (arg1@@303 T@U) (arg2@@210 T@U) (arg3@@142 T@U) (arg4@@109 T@U) (arg5@@71 T@U) ) (! (= (type (Multisets.__default.Apply arg0@@526 arg1@@303 arg2@@210 arg3@@142 arg4@@109 arg5@@71)) (MapType0Type BoxType intType)) :qid |funType:Multisets.__default.Apply| :pattern ( (Multisets.__default.Apply arg0@@526 arg1@@303 arg2@@210 arg3@@142 arg4@@109 arg5@@71)) )))
(assert (forall ((Multisets._default.Apply$A T@U) (Multisets._default.Apply$B T@U) ($ly@@645 T@U) ($Heap@@57 T@U) (|fn#0| T@U) (|s#0@@204| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Apply$A) TyType) (= (type Multisets._default.Apply$B) TyType)) (= (type $ly@@645) LayerTypeType)) (= (type $Heap@@57) (MapType0Type refType MapType1Type))) (= (type |fn#0|) HandleTypeType)) (= (type |s#0@@204|) (MapType0Type BoxType intType))) (= (Multisets.__default.Apply Multisets._default.Apply$A Multisets._default.Apply$B ($LS $ly@@645) $Heap@@57 |fn#0| |s#0@@204|) (Multisets.__default.Apply Multisets._default.Apply$A Multisets._default.Apply$B $ly@@645 $Heap@@57 |fn#0| |s#0@@204|))) :qid |unknown.0:0| :skolemid |3919| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A Multisets._default.Apply$B ($LS $ly@@645) $Heap@@57 |fn#0| |s#0@@204|)) )))
(assert (forall ((Multisets._default.Apply$A@@0 T@U) (Multisets._default.Apply$B@@0 T@U) ($ly@@646 T@U) ($Heap@@58 T@U) (|fn#0@@0| T@U) (|s#0@@205| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Apply$A@@0) TyType) (= (type Multisets._default.Apply$B@@0) TyType)) (= (type $ly@@646) LayerTypeType)) (= (type $Heap@@58) (MapType0Type refType MapType1Type))) (= (type |fn#0@@0|) HandleTypeType)) (= (type |s#0@@205|) (MapType0Type BoxType intType))) (= (Multisets.__default.Apply Multisets._default.Apply$A@@0 Multisets._default.Apply$B@@0 $ly@@646 $Heap@@58 |fn#0@@0| |s#0@@205|) (Multisets.__default.Apply Multisets._default.Apply$A@@0 Multisets._default.Apply$B@@0 $LZ $Heap@@58 |fn#0@@0| |s#0@@205|))) :qid |unknown.0:0| :skolemid |3920| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A@@0 Multisets._default.Apply$B@@0 (AsFuelBottom $ly@@646) $Heap@@58 |fn#0@@0| |s#0@@205|)) )))
(assert (forall ((Multisets._default.Apply$A@@1 T@U) (Multisets._default.Apply$B@@1 T@U) ($ly@@647 T@U) ($h0@@4 T@U) ($h1@@4 T@U) (|fn#0@@1| T@U) (|s#0@@206| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@1) TyType) (= (type Multisets._default.Apply$B@@1) TyType)) (= (type $ly@@647) LayerTypeType)) (= (type $h0@@4) (MapType0Type refType MapType1Type))) (= (type $h1@@4) (MapType0Type refType MapType1Type))) (= (type |fn#0@@1|) HandleTypeType)) (= (type |s#0@@206|) (MapType0Type BoxType intType))) (and (and (and ($IsGoodHeap $h0@@4) ($IsGoodHeap $h1@@4)) (or (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $h0@@4 |fn#0@@1| |s#0@@206|) (and ($Is |fn#0@@1| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1)) ($Is |s#0@@206| (TMultiSet Multisets._default.Apply$A@@1))))) (and ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4)))) (forall (($o@@48 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (= (type $o@@48) refType) (= (type $f@@4) (FieldType alpha@@11))) (and (not (= $o@@48 null)) (exists ((|x#0@@13| T@U) (|o#0@@1| T@U) ) (!  (and (and (= (type |x#0@@13|) BoxType) (= (type |o#0@@1|) refType)) (and (and (and ($IsBox |x#0@@13| Multisets._default.Apply$A@@1) ($Is |o#0@@1| Tclass._System.object?)) (and (> (U_2_int (MapType0Select |s#0@@206| |x#0@@13|)) 0) (U_2_bool (MapType0Select (Reads1 Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $h0@@4 |fn#0@@1| |x#0@@13|) ($Box |o#0@@1|))))) (= ($Box $o@@48) ($Box |o#0@@1|)))) :qid |Multiset.23:15| :skolemid |3921| :pattern ( (MapType0Select (Reads1 Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $h0@@4 |fn#0@@1| |x#0@@13|) ($Box |o#0@@1|))) )))) (= (MapType1Select (MapType0Select $h0@@4 $o@@48) $f@@4) (MapType1Select (MapType0Select $h1@@4 $o@@48) $f@@4)))) :qid |unknown.0:0| :skolemid |3922| :no-pattern (type $o@@48) :no-pattern (type $f@@4) :no-pattern (U_2_int $o@@48) :no-pattern (U_2_bool $o@@48) :no-pattern (U_2_int $f@@4) :no-pattern (U_2_bool $f@@4) ))) (= (Multisets.__default.Apply Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $ly@@647 $h0@@4 |fn#0@@1| |s#0@@206|) (Multisets.__default.Apply Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $ly@@647 $h1@@4 |fn#0@@1| |s#0@@206|))) :qid |unknown.0:0| :skolemid |3923| :pattern ( ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4) (Multisets.__default.Apply Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $ly@@647 $h1@@4 |fn#0@@1| |s#0@@206|)) )))
(assert  (=> true (forall ((Multisets._default.Apply$A@@2 T@U) (Multisets._default.Apply$B@@2 T@U) ($ly@@648 T@U) ($Heap@@59 T@U) (|fn#0@@2| T@U) (|s#0@@207| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@2) TyType) (= (type Multisets._default.Apply$B@@2) TyType)) (= (type $ly@@648) LayerTypeType)) (= (type $Heap@@59) (MapType0Type refType MapType1Type))) (= (type |fn#0@@2|) HandleTypeType)) (= (type |s#0@@207|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $Heap@@59 |fn#0@@2| |s#0@@207|) (and (and (and ($IsGoodHeap $Heap@@59) ($Is |fn#0@@2| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2))) ($Is |s#0@@207| (TMultiSet Multisets._default.Apply$A@@2))) (forall ((|x#1@@11| T@U) ) (!  (=> (= (type |x#1@@11|) BoxType) (=> (and ($IsBox |x#1@@11| Multisets._default.Apply$A@@2) (> (U_2_int (MapType0Select |s#0@@207| |x#1@@11|)) 0)) (Requires1 Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $Heap@@59 |fn#0@@2| |x#1@@11|))) :qid |Multiset.21:21| :skolemid |3924| :pattern ( (Requires1 Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $Heap@@59 |fn#0@@2| |x#1@@11|)) :pattern ( (MapType0Select |s#0@@207| |x#1@@11|)) ))))) (and (= (|MultiSet#Card| (Multisets.__default.Apply Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $ly@@648 $Heap@@59 |fn#0@@2| |s#0@@207|)) (|MultiSet#Card| |s#0@@207|)) ($Is (Multisets.__default.Apply Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $ly@@648 $Heap@@59 |fn#0@@2| |s#0@@207|) (TMultiSet Multisets._default.Apply$B@@2)))) :qid |unknown.0:0| :skolemid |3925| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $ly@@648 $Heap@@59 |fn#0@@2| |s#0@@207|)) ))))
(assert (forall ((Multisets._default.Apply$A@@3 T@U) (Multisets._default.Apply$B@@3 T@U) ($ly@@649 T@U) ($Heap@@60 T@U) (|fn#0@@3| T@U) (|s#0@@208| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@3) TyType) (= (type Multisets._default.Apply$B@@3) TyType)) (= (type $ly@@649) LayerTypeType)) (= (type $Heap@@60) (MapType0Type refType MapType1Type))) (= (type |fn#0@@3|) HandleTypeType)) (= (type |s#0@@208|) (MapType0Type BoxType intType))) (and (and ($IsGoodHeap $Heap@@60) ($Is |fn#0@@3| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3))) ($Is |s#0@@208| (TMultiSet Multisets._default.Apply$A@@3)))) (and (=> (|Multisets.__default.Apply#requires| Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $ly@@649 $Heap@@60 |fn#0@@3| |s#0@@208|) (forall ((|x#2| T@U) ) (!  (=> (= (type |x#2|) BoxType) (=> (and ($IsBox |x#2| Multisets._default.Apply$A@@3) (> (U_2_int (MapType0Select |s#0@@208| |x#2|)) 0)) (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@60 |fn#0@@3| |x#2|))) :qid |Multiset.21:21| :skolemid |3926| :pattern ( (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@60 |fn#0@@3| |x#2|)) :pattern ( (MapType0Select |s#0@@208| |x#2|)) ))) (=> (forall ((|x#2@@0| T@U) ) (!  (=> (= (type |x#2@@0|) BoxType) (=> (and ($IsBox |x#2@@0| Multisets._default.Apply$A@@3) (> (U_2_int (MapType0Select |s#0@@208| |x#2@@0|)) 0)) (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@60 |fn#0@@3| |x#2@@0|))) :qid |Multiset.21:21| :skolemid |3926| :pattern ( (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@60 |fn#0@@3| |x#2@@0|)) :pattern ( (MapType0Select |s#0@@208| |x#2@@0|)) )) (|Multisets.__default.Apply#requires| Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $ly@@649 $Heap@@60 |fn#0@@3| |s#0@@208|)))) :qid |unknown.0:0| :skolemid |3927| :pattern ( (|Multisets.__default.Apply#requires| Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $ly@@649 $Heap@@60 |fn#0@@3| |s#0@@208|)) )))
(assert (= (type StartFuel_Multisets._default.Choose) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.Apply$A@@4 T@U) (Multisets._default.Apply$B@@4 T@U) ($ly@@650 T@U) ($Heap@@61 T@U) (|fn#0@@4| T@U) (|s#0@@209| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@4) TyType) (= (type Multisets._default.Apply$B@@4) TyType)) (= (type $ly@@650) LayerTypeType)) (= (type $Heap@@61) (MapType0Type refType MapType1Type))) (= (type |fn#0@@4|) HandleTypeType)) (= (type |s#0@@209|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@61 |fn#0@@4| |s#0@@209|) (and (and (and ($IsGoodHeap $Heap@@61) ($Is |fn#0@@4| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4))) ($Is |s#0@@209| (TMultiSet Multisets._default.Apply$A@@4))) (forall ((|x#2@@1| T@U) ) (!  (=> (= (type |x#2@@1|) BoxType) (=> (and ($IsBox |x#2@@1| Multisets._default.Apply$A@@4) (> (U_2_int (MapType0Select |s#0@@209| |x#2@@1|)) 0)) (Requires1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@61 |fn#0@@4| |x#2@@1|))) :qid |Multiset.21:21| :skolemid |3926| :pattern ( (Requires1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@61 |fn#0@@4| |x#2@@1|)) :pattern ( (MapType0Select |s#0@@209| |x#2@@1|)) ))))) (and (=> (not (= (|MultiSet#Card| |s#0@@209|) (LitInt 0))) (and (|Multisets.__default.Choose#canCall| Multisets._default.Apply$A@@4 |s#0@@209|) (let ((|x#3| (Multisets.__default.Choose Multisets._default.Apply$A@@4 StartFuel_Multisets._default.Choose |s#0@@209|))) (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@61 |fn#0@@4| (|MultiSet#Difference| |s#0@@209| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |x#3|)))))) (= (Multisets.__default.Apply Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 ($LS $ly@@650) $Heap@@61 |fn#0@@4| |s#0@@209|) (ite (= (|MultiSet#Card| |s#0@@209|) (LitInt 0)) (|MultiSet#Empty| BoxType) (let ((|x#3@@0| (Multisets.__default.Choose Multisets._default.Apply$A@@4 StartFuel_Multisets._default.Choose |s#0@@209|))) (|MultiSet#Union| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) (Apply1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@61 |fn#0@@4| |x#3@@0|)) (Multisets.__default.Apply Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $ly@@650 $Heap@@61 |fn#0@@4| (|MultiSet#Difference| |s#0@@209| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |x#3@@0|))))))))) :qid |unknown.0:0| :skolemid |3928| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 ($LS $ly@@650) $Heap@@61 |fn#0@@4| |s#0@@209|)) ))))
(assert (forall ((Multisets._default.Foldable$A T@U) ($h0@@5 T@U) ($h1@@5 T@U) (|zero#0| T@U) (|add#0| T@U) (|inv#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Foldable$A) TyType) (= (type $h0@@5) (MapType0Type refType MapType1Type))) (= (type $h1@@5) (MapType0Type refType MapType1Type))) (= (type |zero#0|) BoxType)) (= (type |add#0|) HandleTypeType)) (= (type |inv#0|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@5) ($IsGoodHeap $h1@@5)) (or (|Multisets.__default.Foldable#canCall| Multisets._default.Foldable$A $h0@@5 |zero#0| |add#0| |inv#0|) (and (and ($IsBox |zero#0| Multisets._default.Foldable$A) ($Is |add#0| (Tclass._System.___hFunc2 Multisets._default.Foldable$A Multisets._default.Foldable$A Multisets._default.Foldable$A))) ($Is |inv#0| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A TBool))))) (and ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5)))) (forall (($o@@49 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (= (type $o@@49) refType) (= (type $f@@5) (FieldType alpha@@12))) (and (not (= $o@@49 null)) (exists ((|x#0@@14| T@U) (|y#0@@19| T@U) (|o#0@@2| T@U) ) (!  (and (and (and (= (type |x#0@@14|) BoxType) (= (type |y#0@@19|) BoxType)) (= (type |o#0@@2|) refType)) (and (and (and (and ($IsBox |x#0@@14| Multisets._default.Foldable$A) ($IsBox |y#0@@19| Multisets._default.Foldable$A)) ($Is |o#0@@2| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A TBool $h0@@5 |inv#0| |x#0@@14|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A TBool $h0@@5 |inv#0| |y#0@@19|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.Foldable$A Multisets._default.Foldable$A Multisets._default.Foldable$A $h0@@5 |add#0| |x#0@@14| |y#0@@19|) ($Box |o#0@@2|))))) (= ($Box $o@@49) ($Box |o#0@@2|)))) :qid |Multiset.143:15| :skolemid |3935| :pattern ( (MapType0Select (Reads2 Multisets._default.Foldable$A Multisets._default.Foldable$A Multisets._default.Foldable$A $h0@@5 |add#0| |x#0@@14| |y#0@@19|) ($Box |o#0@@2|))) )))) (= (MapType1Select (MapType0Select $h0@@5 $o@@49) $f@@5) (MapType1Select (MapType0Select $h1@@5 $o@@49) $f@@5)))) :qid |unknown.0:0| :skolemid |3936| :no-pattern (type $o@@49) :no-pattern (type $f@@5) :no-pattern (U_2_int $o@@49) :no-pattern (U_2_bool $o@@49) :no-pattern (U_2_int $f@@5) :no-pattern (U_2_bool $f@@5) ))) (and (=> (Multisets.__default.Foldable Multisets._default.Foldable$A $h0@@5 |zero#0| |add#0| |inv#0|) (Multisets.__default.Foldable Multisets._default.Foldable$A $h1@@5 |zero#0| |add#0| |inv#0|)) (=> (Multisets.__default.Foldable Multisets._default.Foldable$A $h1@@5 |zero#0| |add#0| |inv#0|) (Multisets.__default.Foldable Multisets._default.Foldable$A $h0@@5 |zero#0| |add#0| |inv#0|)))) :qid |unknown.0:0| :skolemid |3937| :pattern ( ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5) (Multisets.__default.Foldable Multisets._default.Foldable$A $h1@@5 |zero#0| |add#0| |inv#0|)) )))
(assert  (=> true (forall ((Multisets._default.Foldable$A@@0 T@U) ($Heap@@62 T@U) (|zero#0@@0| T@U) (|add#0@@0| T@U) (|inv#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Foldable$A@@0) TyType) (= (type $Heap@@62) (MapType0Type refType MapType1Type))) (= (type |zero#0@@0|) BoxType)) (= (type |add#0@@0|) HandleTypeType)) (= (type |inv#0@@0|) HandleTypeType)) (or (|Multisets.__default.Foldable#canCall| Multisets._default.Foldable$A@@0 $Heap@@62 |zero#0@@0| |add#0@@0| |inv#0@@0|) (and (and (and ($IsGoodHeap $Heap@@62) ($IsBox |zero#0@@0| Multisets._default.Foldable$A@@0)) ($Is |add#0@@0| (Tclass._System.___hFunc2 Multisets._default.Foldable$A@@0 Multisets._default.Foldable$A@@0 Multisets._default.Foldable$A@@0))) ($Is |inv#0@@0| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A@@0 TBool))))) true) :qid |unknown.0:0| :skolemid |3938| :pattern ( (Multisets.__default.Foldable Multisets._default.Foldable$A@@0 $Heap@@62 |zero#0@@0| |add#0@@0| |inv#0@@0|)) ))))
(assert (forall ((Multisets._default.Foldable$A@@1 T@U) ($Heap@@63 T@U) (|zero#0@@1| T@U) (|add#0@@1| T@U) (|inv#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Foldable$A@@1) TyType) (= (type $Heap@@63) (MapType0Type refType MapType1Type))) (= (type |zero#0@@1|) BoxType)) (= (type |add#0@@1|) HandleTypeType)) (= (type |inv#0@@1|) HandleTypeType)) (and (and (and ($IsGoodHeap $Heap@@63) ($IsBox |zero#0@@1| Multisets._default.Foldable$A@@1)) ($Is |add#0@@1| (Tclass._System.___hFunc2 Multisets._default.Foldable$A@@1 Multisets._default.Foldable$A@@1 Multisets._default.Foldable$A@@1))) ($Is |inv#0@@1| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A@@1 TBool)))) (and (=> (|Multisets.__default.Foldable#requires| Multisets._default.Foldable$A@@1 $Heap@@63 |zero#0@@1| |add#0@@1| |inv#0@@1|) true) (=> true (|Multisets.__default.Foldable#requires| Multisets._default.Foldable$A@@1 $Heap@@63 |zero#0@@1| |add#0@@1| |inv#0@@1|)))) :qid |unknown.0:0| :skolemid |3939| :pattern ( (|Multisets.__default.Foldable#requires| Multisets._default.Foldable$A@@1 $Heap@@63 |zero#0@@1| |add#0@@1| |inv#0@@1|)) )))
(assert  (=> true (forall ((Multisets._default.Foldable$A@@2 T@U) ($Heap@@64 T@U) (|zero#0@@2| T@U) (|add#0@@2| T@U) (|inv#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Foldable$A@@2) TyType) (= (type $Heap@@64) (MapType0Type refType MapType1Type))) (= (type |zero#0@@2|) BoxType)) (= (type |add#0@@2|) HandleTypeType)) (= (type |inv#0@@2|) HandleTypeType)) (or (|Multisets.__default.Foldable#canCall| Multisets._default.Foldable$A@@2 $Heap@@64 |zero#0@@2| |add#0@@2| |inv#0@@2|) (and (and (and ($IsGoodHeap $Heap@@64) ($IsBox |zero#0@@2| Multisets._default.Foldable$A@@2)) ($Is |add#0@@2| (Tclass._System.___hFunc2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2))) ($Is |inv#0@@2| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A@@2 TBool))))) (and (=> (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |zero#0@@2|))) (forall ((|x#1@@12| T@U) (|y#1@@11| T@U) ) (!  (=> (and (and (and (= (type |x#1@@12|) BoxType) (= (type |y#1@@11|) BoxType)) (and ($IsBox |x#1@@12| Multisets._default.Foldable$A@@2) ($IsBox |y#1@@11| Multisets._default.Foldable$A@@2))) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |x#1@@12|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |y#1@@11|))))) true) :qid |Multiset.146:15| :skolemid |3940| :pattern ( (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@64 |add#0@@2| |x#1@@12| |y#1@@11|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |y#1@@11|)) ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |x#1@@12|))) ))) (and (=> (Multisets.__default.Foldable Multisets._default.Foldable$A@@2 $Heap@@64 |zero#0@@2| |add#0@@2| |inv#0@@2|) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |zero#0@@2|))) (and (forall ((|x#1@@13| T@U) (|y#1@@12| T@U) ) (!  (=> (and (= (type |x#1@@13|) BoxType) (= (type |y#1@@12|) BoxType)) (=> (and (and ($IsBox |x#1@@13| Multisets._default.Foldable$A@@2) ($IsBox |y#1@@12| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |x#1@@13|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |y#1@@12|))))) (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@64 |add#0@@2| |x#1@@13| |y#1@@12|))) :qid |Multiset.146:15| :skolemid |3942| :pattern ( (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@64 |add#0@@2| |x#1@@13| |y#1@@12|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |y#1@@12|)) ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |x#1@@13|))) )) (forall ((|x#2@@2| T@U) (|y#2| T@U) ) (!  (=> (and (= (type |x#2@@2|) BoxType) (= (type |y#2|) BoxType)) (=> (and (and ($IsBox |x#2@@2| Multisets._default.Foldable$A@@2) ($IsBox |y#2| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |x#2@@2|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |y#2|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@64 |add#0@@2| |x#2@@2| |y#2|)))))) :qid |Multiset.146:15| :skolemid |3943| :pattern ( (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@64 |add#0@@2| |x#2@@2| |y#2|)) ))))) (=> (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |zero#0@@2|))) (and (forall ((|x#1@@14| T@U) (|y#1@@13| T@U) ) (!  (=> (and (= (type |x#1@@14|) BoxType) (= (type |y#1@@13|) BoxType)) (=> (and (and ($IsBox |x#1@@14| Multisets._default.Foldable$A@@2) ($IsBox |y#1@@13| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |x#1@@14|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |y#1@@13|))))) (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@64 |add#0@@2| |x#1@@14| |y#1@@13|))) :qid |Multiset.146:15| :skolemid |3942| :pattern ( (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@64 |add#0@@2| |x#1@@14| |y#1@@13|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |y#1@@13|)) ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |x#1@@14|))) )) (forall ((|x#2@@3| T@U) (|y#2@@0| T@U) ) (!  (=> (and (= (type |x#2@@3|) BoxType) (= (type |y#2@@0|) BoxType)) (=> (and (and ($IsBox |x#2@@3| Multisets._default.Foldable$A@@2) ($IsBox |y#2@@0| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |x#2@@3|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| |y#2@@0|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@64 |inv#0@@2| (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@64 |add#0@@2| |x#2@@3| |y#2@@0|)))))) :qid |Multiset.146:15| :skolemid |3943| :pattern ( (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@64 |add#0@@2| |x#2@@3| |y#2@@0|)) )))) (Multisets.__default.Foldable Multisets._default.Foldable$A@@2 $Heap@@64 |zero#0@@2| |add#0@@2| |inv#0@@2|))))) :qid |unknown.0:0| :skolemid |3944| :pattern ( (Multisets.__default.Foldable Multisets._default.Foldable$A@@2 $Heap@@64 |zero#0@@2| |add#0@@2| |inv#0@@2|)) ))))
(assert (forall ((arg0@@527 T@U) (arg1@@304 T@U) (arg2@@211 T@U) (arg3@@143 T@U) (arg4@@110 T@U) (arg5@@72 T@U) (arg6@@52 T@U) ) (! (= (type (Multisets.__default.Fold arg0@@527 arg1@@304 arg2@@211 arg3@@143 arg4@@110 arg5@@72 arg6@@52)) BoxType) :qid |funType:Multisets.__default.Fold| :pattern ( (Multisets.__default.Fold arg0@@527 arg1@@304 arg2@@211 arg3@@143 arg4@@110 arg5@@72 arg6@@52)) )))
(assert (forall ((Multisets._default.Fold$A T@U) ($ly@@651 T@U) ($Heap@@65 T@U) (|zero#0@@3| T@U) (|add#0@@3| T@U) (|inv#0@@3| T@U) (|s#0@@210| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Fold$A) TyType) (= (type $ly@@651) LayerTypeType)) (= (type $Heap@@65) (MapType0Type refType MapType1Type))) (= (type |zero#0@@3|) BoxType)) (= (type |add#0@@3|) HandleTypeType)) (= (type |inv#0@@3|) HandleTypeType)) (= (type |s#0@@210|) (MapType0Type BoxType intType))) (= (Multisets.__default.Fold Multisets._default.Fold$A ($LS $ly@@651) $Heap@@65 |zero#0@@3| |add#0@@3| |inv#0@@3| |s#0@@210|) (Multisets.__default.Fold Multisets._default.Fold$A $ly@@651 $Heap@@65 |zero#0@@3| |add#0@@3| |inv#0@@3| |s#0@@210|))) :qid |unknown.0:0| :skolemid |3945| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A ($LS $ly@@651) $Heap@@65 |zero#0@@3| |add#0@@3| |inv#0@@3| |s#0@@210|)) )))
(assert (forall ((Multisets._default.Fold$A@@0 T@U) ($ly@@652 T@U) ($Heap@@66 T@U) (|zero#0@@4| T@U) (|add#0@@4| T@U) (|inv#0@@4| T@U) (|s#0@@211| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@0) TyType) (= (type $ly@@652) LayerTypeType)) (= (type $Heap@@66) (MapType0Type refType MapType1Type))) (= (type |zero#0@@4|) BoxType)) (= (type |add#0@@4|) HandleTypeType)) (= (type |inv#0@@4|) HandleTypeType)) (= (type |s#0@@211|) (MapType0Type BoxType intType))) (= (Multisets.__default.Fold Multisets._default.Fold$A@@0 $ly@@652 $Heap@@66 |zero#0@@4| |add#0@@4| |inv#0@@4| |s#0@@211|) (Multisets.__default.Fold Multisets._default.Fold$A@@0 $LZ $Heap@@66 |zero#0@@4| |add#0@@4| |inv#0@@4| |s#0@@211|))) :qid |unknown.0:0| :skolemid |3946| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A@@0 (AsFuelBottom $ly@@652) $Heap@@66 |zero#0@@4| |add#0@@4| |inv#0@@4| |s#0@@211|)) )))
(assert (forall ((Multisets._default.Fold$A@@1 T@U) ($ly@@653 T@U) ($h0@@6 T@U) ($h1@@6 T@U) (|zero#0@@5| T@U) (|add#0@@5| T@U) (|inv#0@@5| T@U) (|s#0@@212| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@1) TyType) (= (type $ly@@653) LayerTypeType)) (= (type $h0@@6) (MapType0Type refType MapType1Type))) (= (type $h1@@6) (MapType0Type refType MapType1Type))) (= (type |zero#0@@5|) BoxType)) (= (type |add#0@@5|) HandleTypeType)) (= (type |inv#0@@5|) HandleTypeType)) (= (type |s#0@@212|) (MapType0Type BoxType intType))) (and (and (and ($IsGoodHeap $h0@@6) ($IsGoodHeap $h1@@6)) (or (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@1 $h0@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@212|) (and (and (and ($IsBox |zero#0@@5| Multisets._default.Fold$A@@1) ($Is |add#0@@5| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1))) ($Is |inv#0@@5| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@1 TBool))) ($Is |s#0@@212| (TMultiSet Multisets._default.Fold$A@@1))))) (and ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6)))) (forall (($o@@50 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (= (type $o@@50) refType) (= (type $f@@6) (FieldType alpha@@13))) (and (not (= $o@@50 null)) (exists ((|x#0@@15| T@U) (|y#0@@20| T@U) (|o#0@@3| T@U) ) (!  (and (and (and (= (type |x#0@@15|) BoxType) (= (type |y#0@@20|) BoxType)) (= (type |o#0@@3|) refType)) (and (and (and (and ($IsBox |x#0@@15| Multisets._default.Fold$A@@1) ($IsBox |y#0@@20| Multisets._default.Fold$A@@1)) ($Is |o#0@@3| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@1 TBool $h0@@6 |inv#0@@5| |x#0@@15|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@1 TBool $h0@@6 |inv#0@@5| |y#0@@20|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 $h0@@6 |add#0@@5| |x#0@@15| |y#0@@20|) ($Box |o#0@@3|))))) (= ($Box $o@@50) ($Box |o#0@@3|)))) :qid |Multiset.154:15| :skolemid |3947| :pattern ( (MapType0Select (Reads2 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 $h0@@6 |add#0@@5| |x#0@@15| |y#0@@20|) ($Box |o#0@@3|))) )))) (= (MapType1Select (MapType0Select $h0@@6 $o@@50) $f@@6) (MapType1Select (MapType0Select $h1@@6 $o@@50) $f@@6)))) :qid |unknown.0:0| :skolemid |3948| :no-pattern (type $o@@50) :no-pattern (type $f@@6) :no-pattern (U_2_int $o@@50) :no-pattern (U_2_bool $o@@50) :no-pattern (U_2_int $f@@6) :no-pattern (U_2_bool $f@@6) ))) (= (Multisets.__default.Fold Multisets._default.Fold$A@@1 $ly@@653 $h0@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@212|) (Multisets.__default.Fold Multisets._default.Fold$A@@1 $ly@@653 $h1@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@212|))) :qid |unknown.0:0| :skolemid |3949| :pattern ( ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6) (Multisets.__default.Fold Multisets._default.Fold$A@@1 $ly@@653 $h1@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@212|)) )))
(assert  (=> true (forall ((Multisets._default.Fold$A@@2 T@U) ($ly@@654 T@U) ($Heap@@67 T@U) (|zero#0@@6| T@U) (|add#0@@6| T@U) (|inv#0@@6| T@U) (|s#0@@213| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@2) TyType) (= (type $ly@@654) LayerTypeType)) (= (type $Heap@@67) (MapType0Type refType MapType1Type))) (= (type |zero#0@@6|) BoxType)) (= (type |add#0@@6|) HandleTypeType)) (= (type |inv#0@@6|) HandleTypeType)) (= (type |s#0@@213|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@2 $Heap@@67 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@213|) (and (and (and (and (and ($IsGoodHeap $Heap@@67) ($IsBox |zero#0@@6| Multisets._default.Fold$A@@2)) ($Is |add#0@@6| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@2 Multisets._default.Fold$A@@2 Multisets._default.Fold$A@@2))) ($Is |inv#0@@6| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@2 TBool))) ($Is |s#0@@213| (TMultiSet Multisets._default.Fold$A@@2))) (and (Multisets.__default.Foldable Multisets._default.Fold$A@@2 $Heap@@67 |zero#0@@6| |add#0@@6| |inv#0@@6|) (forall ((|x#1@@15| T@U) ) (!  (=> (= (type |x#1@@15|) BoxType) (=> (and ($IsBox |x#1@@15| Multisets._default.Fold$A@@2) (> (U_2_int (MapType0Select |s#0@@213| |x#1@@15|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@2 TBool $Heap@@67 |inv#0@@6| |x#1@@15|))))) :qid |Multiset.151:21| :skolemid |3950| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@2 TBool $Heap@@67 |inv#0@@6| |x#1@@15|))) :pattern ( (MapType0Select |s#0@@213| |x#1@@15|)) )))))) (and (and (=> (= (|MultiSet#Card| |s#0@@213|) (LitInt 0)) (= (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@654 $Heap@@67 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@213|) |zero#0@@6|)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@2 TBool $Heap@@67 |inv#0@@6| (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@654 $Heap@@67 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@213|))))) ($IsBox (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@654 $Heap@@67 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@213|) Multisets._default.Fold$A@@2))) :qid |unknown.0:0| :skolemid |3951| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@654 $Heap@@67 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@213|)) ))))
(assert (forall ((Multisets._default.Fold$A@@3 T@U) ($ly@@655 T@U) ($Heap@@68 T@U) (|zero#0@@7| T@U) (|add#0@@7| T@U) (|inv#0@@7| T@U) (|s#0@@214| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@3) TyType) (= (type $ly@@655) LayerTypeType)) (= (type $Heap@@68) (MapType0Type refType MapType1Type))) (= (type |zero#0@@7|) BoxType)) (= (type |add#0@@7|) HandleTypeType)) (= (type |inv#0@@7|) HandleTypeType)) (= (type |s#0@@214|) (MapType0Type BoxType intType))) (and (and (and (and ($IsGoodHeap $Heap@@68) ($IsBox |zero#0@@7| Multisets._default.Fold$A@@3)) ($Is |add#0@@7| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@3 Multisets._default.Fold$A@@3 Multisets._default.Fold$A@@3))) ($Is |inv#0@@7| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@3 TBool))) ($Is |s#0@@214| (TMultiSet Multisets._default.Fold$A@@3)))) (and (=> (|Multisets.__default.Fold#requires| Multisets._default.Fold$A@@3 $ly@@655 $Heap@@68 |zero#0@@7| |add#0@@7| |inv#0@@7| |s#0@@214|) (and (Multisets.__default.Foldable Multisets._default.Fold$A@@3 $Heap@@68 |zero#0@@7| |add#0@@7| |inv#0@@7|) (forall ((|x#2@@4| T@U) ) (!  (=> (= (type |x#2@@4|) BoxType) (=> (and ($IsBox |x#2@@4| Multisets._default.Fold$A@@3) (> (U_2_int (MapType0Select |s#0@@214| |x#2@@4|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@68 |inv#0@@7| |x#2@@4|))))) :qid |Multiset.151:21| :skolemid |3952| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@68 |inv#0@@7| |x#2@@4|))) :pattern ( (MapType0Select |s#0@@214| |x#2@@4|)) )))) (=> (and (Multisets.__default.Foldable Multisets._default.Fold$A@@3 $Heap@@68 |zero#0@@7| |add#0@@7| |inv#0@@7|) (forall ((|x#2@@5| T@U) ) (!  (=> (= (type |x#2@@5|) BoxType) (=> (and ($IsBox |x#2@@5| Multisets._default.Fold$A@@3) (> (U_2_int (MapType0Select |s#0@@214| |x#2@@5|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@68 |inv#0@@7| |x#2@@5|))))) :qid |Multiset.151:21| :skolemid |3952| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@68 |inv#0@@7| |x#2@@5|))) :pattern ( (MapType0Select |s#0@@214| |x#2@@5|)) ))) (|Multisets.__default.Fold#requires| Multisets._default.Fold$A@@3 $ly@@655 $Heap@@68 |zero#0@@7| |add#0@@7| |inv#0@@7| |s#0@@214|)))) :qid |unknown.0:0| :skolemid |3953| :pattern ( (|Multisets.__default.Fold#requires| Multisets._default.Fold$A@@3 $ly@@655 $Heap@@68 |zero#0@@7| |add#0@@7| |inv#0@@7| |s#0@@214|)) )))
(assert  (=> true (forall ((Multisets._default.Fold$A@@4 T@U) ($ly@@656 T@U) ($Heap@@69 T@U) (|zero#0@@8| T@U) (|add#0@@8| T@U) (|inv#0@@8| T@U) (|s#0@@215| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@4) TyType) (= (type $ly@@656) LayerTypeType)) (= (type $Heap@@69) (MapType0Type refType MapType1Type))) (= (type |zero#0@@8|) BoxType)) (= (type |add#0@@8|) HandleTypeType)) (= (type |inv#0@@8|) HandleTypeType)) (= (type |s#0@@215|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@4 $Heap@@69 |zero#0@@8| |add#0@@8| |inv#0@@8| |s#0@@215|) (and (and (and (and (and ($IsGoodHeap $Heap@@69) ($IsBox |zero#0@@8| Multisets._default.Fold$A@@4)) ($Is |add#0@@8| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4))) ($Is |inv#0@@8| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@4 TBool))) ($Is |s#0@@215| (TMultiSet Multisets._default.Fold$A@@4))) (and (Multisets.__default.Foldable Multisets._default.Fold$A@@4 $Heap@@69 |zero#0@@8| |add#0@@8| |inv#0@@8|) (forall ((|x#2@@6| T@U) ) (!  (=> (= (type |x#2@@6|) BoxType) (=> (and ($IsBox |x#2@@6| Multisets._default.Fold$A@@4) (> (U_2_int (MapType0Select |s#0@@215| |x#2@@6|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@4 TBool $Heap@@69 |inv#0@@8| |x#2@@6|))))) :qid |Multiset.151:21| :skolemid |3952| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@4 TBool $Heap@@69 |inv#0@@8| |x#2@@6|))) :pattern ( (MapType0Select |s#0@@215| |x#2@@6|)) )))))) (and (=> (not (= (|MultiSet#Card| |s#0@@215|) (LitInt 0))) (and (|Multisets.__default.Choose#canCall| Multisets._default.Fold$A@@4 |s#0@@215|) (let ((|a#0@@162| (Multisets.__default.Choose Multisets._default.Fold$A@@4 StartFuel_Multisets._default.Choose |s#0@@215|))) (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@4 $Heap@@69 |zero#0@@8| |add#0@@8| |inv#0@@8| (|MultiSet#Difference| |s#0@@215| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |a#0@@162|)))))) (= (Multisets.__default.Fold Multisets._default.Fold$A@@4 ($LS $ly@@656) $Heap@@69 |zero#0@@8| |add#0@@8| |inv#0@@8| |s#0@@215|) (ite (= (|MultiSet#Card| |s#0@@215|) (LitInt 0)) |zero#0@@8| (let ((|a#0@@163| (Multisets.__default.Choose Multisets._default.Fold$A@@4 StartFuel_Multisets._default.Choose |s#0@@215|))) (Apply2 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4 $Heap@@69 |add#0@@8| |a#0@@163| (Multisets.__default.Fold Multisets._default.Fold$A@@4 $ly@@656 $Heap@@69 |zero#0@@8| |add#0@@8| |inv#0@@8| (|MultiSet#Difference| |s#0@@215| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |a#0@@163|))))))))) :qid |unknown.0:0| :skolemid |3954| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A@@4 ($LS $ly@@656) $Heap@@69 |zero#0@@8| |add#0@@8| |inv#0@@8| |s#0@@215|)) ))))
(assert (forall ((arg0@@528 T@U) (arg1@@305 T@U) (arg2@@212 T@U) (arg3@@144 T@U) ) (! (= (type (Multisets.__default.FoldSimple arg0@@528 arg1@@305 arg2@@212 arg3@@144)) BoxType) :qid |funType:Multisets.__default.FoldSimple| :pattern ( (Multisets.__default.FoldSimple arg0@@528 arg1@@305 arg2@@212 arg3@@144)) )))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A T@U) (|zero#0@@9| T@U) (|add#0@@9| T@U) (|s#0@@216| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.FoldSimple$A) TyType) (= (type |zero#0@@9|) BoxType)) (= (type |add#0@@9|) HandleTypeType)) (= (type |s#0@@216|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@216|) (and (and ($IsBox |zero#0@@9| Multisets._default.FoldSimple$A) ($Is |add#0@@9| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A Multisets._default.FoldSimple$A Multisets._default.FoldSimple$A))) ($Is |s#0@@216| (TMultiSet Multisets._default.FoldSimple$A))))) (and (=> (= (|MultiSet#Card| |s#0@@216|) (LitInt 0)) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@216|) |zero#0@@9|)) ($IsBox (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@216|) Multisets._default.FoldSimple$A))) :qid |unknown.0:0| :skolemid |3955| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@216|)) ))))
(assert (forall ((Multisets._default.FoldSimple$A@@0 T@U) ($Heap@@70 T@U) (|zero#0@@10| T@U) (|add#0@@10| T@U) (|s#0@@217| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@0) TyType) (= (type $Heap@@70) (MapType0Type refType MapType1Type))) (= (type |zero#0@@10|) BoxType)) (= (type |add#0@@10|) HandleTypeType)) (= (type |s#0@@217|) (MapType0Type BoxType intType))) (and (and (and ($IsGoodHeap $Heap@@70) ($IsBox |zero#0@@10| Multisets._default.FoldSimple$A@@0)) ($Is |add#0@@10| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@0 Multisets._default.FoldSimple$A@@0 Multisets._default.FoldSimple$A@@0))) ($Is |s#0@@217| (TMultiSet Multisets._default.FoldSimple$A@@0)))) (and (=> (|Multisets.__default.FoldSimple#requires| Multisets._default.FoldSimple$A@@0 |zero#0@@10| |add#0@@10| |s#0@@217|) true) (=> true (|Multisets.__default.FoldSimple#requires| Multisets._default.FoldSimple$A@@0 |zero#0@@10| |add#0@@10| |s#0@@217|)))) :qid |unknown.0:0| :skolemid |3956| :pattern ( (|Multisets.__default.FoldSimple#requires| Multisets._default.FoldSimple$A@@0 |zero#0@@10| |add#0@@10| |s#0@@217|) ($IsGoodHeap $Heap@@70)) )))
(assert  (and (and (and (and (and (forall ((arg0@@529 T@U) ) (! (= (type (|lambda#575| arg0@@529)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#575| :pattern ( (|lambda#575| arg0@@529)) )) (forall ((arg0@@530 T@U) ) (! (= (type (|lambda#571| arg0@@530)) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#571| :pattern ( (|lambda#571| arg0@@530)) ))) (forall ((arg0@@531 T@U) ) (! (= (type (|lambda#572| arg0@@531)) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#572| :pattern ( (|lambda#572| arg0@@531)) ))) (forall ((arg0@@532 T@U) ) (! (= (type (|lambda#574| arg0@@532)) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#574| :pattern ( (|lambda#574| arg0@@532)) ))) (forall ((arg0@@533 Bool) ) (! (= (type (|lambda#573| arg0@@533)) (MapType0Type refType boolType)) :qid |funType:lambda#573| :pattern ( (|lambda#573| arg0@@533)) ))) (= (type StartFuel_Multisets._default.Fold) LayerTypeType)))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A@@1 T@U) ($Heap@@71 T@U) (|zero#0@@11| T@U) (|add#0@@11| T@U) (|s#0@@218| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@1) TyType) (= (type $Heap@@71) (MapType0Type refType MapType1Type))) (= (type |zero#0@@11|) BoxType)) (= (type |add#0@@11|) HandleTypeType)) (= (type |s#0@@218|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A@@1 |zero#0@@11| |add#0@@11| |s#0@@218|) (and (and (and ($IsGoodHeap $Heap@@71) ($IsBox |zero#0@@11| Multisets._default.FoldSimple$A@@1)) ($Is |add#0@@11| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@1 Multisets._default.FoldSimple$A@@1 Multisets._default.FoldSimple$A@@1))) ($Is |s#0@@218| (TMultiSet Multisets._default.FoldSimple$A@@1))))) (and (|Multisets.__default.Fold#canCall| Multisets._default.FoldSimple$A@@1 $Heap@@71 |zero#0@@11| |add#0@@11| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.FoldSimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) |s#0@@218|) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@1 |zero#0@@11| |add#0@@11| |s#0@@218|) (Multisets.__default.Fold Multisets._default.FoldSimple$A@@1 StartFuel_Multisets._default.Fold $Heap@@71 |zero#0@@11| |add#0@@11| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.FoldSimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) |s#0@@218|)))) :qid |unknown.0:0| :skolemid |3957| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@1 |zero#0@@11| |add#0@@11| |s#0@@218|) ($IsGoodHeap $Heap@@71)) ))))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A@@2 T@U) ($Heap@@72 T@U) (|zero#0@@12| T@U) (|add#0@@12| T@U) (|s#0@@219| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@2) TyType) (= (type $Heap@@72) (MapType0Type refType MapType1Type))) (= (type |zero#0@@12|) BoxType)) (= (type |add#0@@12|) HandleTypeType)) (= (type |s#0@@219|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A@@2 |zero#0@@12| |add#0@@12| (Lit |s#0@@219|)) (and (and (and ($IsGoodHeap $Heap@@72) ($IsBox |zero#0@@12| Multisets._default.FoldSimple$A@@2)) ($Is |add#0@@12| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@2 Multisets._default.FoldSimple$A@@2 Multisets._default.FoldSimple$A@@2))) ($Is |s#0@@219| (TMultiSet Multisets._default.FoldSimple$A@@2))))) (and (|Multisets.__default.Fold#canCall| Multisets._default.FoldSimple$A@@2 $Heap@@72 |zero#0@@12| |add#0@@12| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.FoldSimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) (Lit |s#0@@219|)) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@2 |zero#0@@12| |add#0@@12| (Lit |s#0@@219|)) (Multisets.__default.Fold Multisets._default.FoldSimple$A@@2 StartFuel_Multisets._default.Fold $Heap@@72 |zero#0@@12| |add#0@@12| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.FoldSimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) (Lit |s#0@@219|))))) :qid |unknown.0:0| :weight 3 :skolemid |3958| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@2 |zero#0@@12| |add#0@@12| (Lit |s#0@@219|)) ($IsGoodHeap $Heap@@72)) ))))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A@@3 T@U) ($Heap@@73 T@U) (|zero#0@@13| T@U) (|add#0@@13| T@U) (|s#0@@220| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@3) TyType) (= (type $Heap@@73) (MapType0Type refType MapType1Type))) (= (type |zero#0@@13|) BoxType)) (= (type |add#0@@13|) HandleTypeType)) (= (type |s#0@@220|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A@@3 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit |s#0@@220|)) (and (and (and ($IsGoodHeap $Heap@@73) ($IsBox |zero#0@@13| Multisets._default.FoldSimple$A@@3)) ($Is |add#0@@13| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@3 Multisets._default.FoldSimple$A@@3 Multisets._default.FoldSimple$A@@3))) ($Is |s#0@@220| (TMultiSet Multisets._default.FoldSimple$A@@3))))) (and (|Multisets.__default.Fold#canCall| Multisets._default.FoldSimple$A@@3 $Heap@@73 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.FoldSimple$A@@3) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) (Lit |s#0@@220|)) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@3 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit |s#0@@220|)) (Multisets.__default.Fold Multisets._default.FoldSimple$A@@3 StartFuel_Multisets._default.Fold $Heap@@73 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.FoldSimple$A@@3) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) (Lit |s#0@@220|))))) :qid |unknown.0:0| :weight 3 :skolemid |3959| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@3 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit |s#0@@220|)) ($IsGoodHeap $Heap@@73)) ))))
(assert (forall ((Multisets._default.IsIdentity$A T@U) ($ly@@657 T@U) ($Heap@@74 T@U) (|add#0@@14| T@U) (|inv#0@@9| T@U) (|zero#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsIdentity$A) TyType) (= (type $ly@@657) LayerTypeType)) (= (type $Heap@@74) (MapType0Type refType MapType1Type))) (= (type |add#0@@14|) HandleTypeType)) (= (type |inv#0@@9|) HandleTypeType)) (= (type |zero#0@@14|) BoxType)) (and (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A ($LS $ly@@657) $Heap@@74 |add#0@@14| |inv#0@@9| |zero#0@@14|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A $ly@@657 $Heap@@74 |add#0@@14| |inv#0@@9| |zero#0@@14|)) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A $ly@@657 $Heap@@74 |add#0@@14| |inv#0@@9| |zero#0@@14|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A ($LS $ly@@657) $Heap@@74 |add#0@@14| |inv#0@@9| |zero#0@@14|)))) :qid |unknown.0:0| :skolemid |3960| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A ($LS $ly@@657) $Heap@@74 |add#0@@14| |inv#0@@9| |zero#0@@14|)) )))
(assert (forall ((Multisets._default.IsIdentity$A@@0 T@U) ($ly@@658 T@U) ($Heap@@75 T@U) (|add#0@@15| T@U) (|inv#0@@10| T@U) (|zero#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@0) TyType) (= (type $ly@@658) LayerTypeType)) (= (type $Heap@@75) (MapType0Type refType MapType1Type))) (= (type |add#0@@15|) HandleTypeType)) (= (type |inv#0@@10|) HandleTypeType)) (= (type |zero#0@@15|) BoxType)) (and (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $ly@@658 $Heap@@75 |add#0@@15| |inv#0@@10| |zero#0@@15|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $LZ $Heap@@75 |add#0@@15| |inv#0@@10| |zero#0@@15|)) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $LZ $Heap@@75 |add#0@@15| |inv#0@@10| |zero#0@@15|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $ly@@658 $Heap@@75 |add#0@@15| |inv#0@@10| |zero#0@@15|)))) :qid |unknown.0:0| :skolemid |3961| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 (AsFuelBottom $ly@@658) $Heap@@75 |add#0@@15| |inv#0@@10| |zero#0@@15|)) )))
(assert (forall ((Multisets._default.IsIdentity$A@@1 T@U) ($ly@@659 T@U) ($h0@@7 T@U) ($h1@@7 T@U) (|add#0@@16| T@U) (|inv#0@@11| T@U) (|zero#0@@16| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@1) TyType) (= (type $ly@@659) LayerTypeType)) (= (type $h0@@7) (MapType0Type refType MapType1Type))) (= (type $h1@@7) (MapType0Type refType MapType1Type))) (= (type |add#0@@16|) HandleTypeType)) (= (type |inv#0@@11|) HandleTypeType)) (= (type |zero#0@@16|) BoxType)) (and (and (and ($IsGoodHeap $h0@@7) ($IsGoodHeap $h1@@7)) (or (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentity$A@@1 $h0@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|) (and (and ($Is |add#0@@16| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1)) ($Is |inv#0@@11| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@1 TBool))) ($IsBox |zero#0@@16| Multisets._default.IsIdentity$A@@1)))) (and ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7)))) (forall (($o@@51 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (= (type $o@@51) refType) (= (type $f@@7) (FieldType alpha@@14))) (and (not (= $o@@51 null)) (exists ((|x#0@@16| T@U) (|y#0@@21| T@U) (|o#0@@4| T@U) ) (!  (and (and (and (= (type |x#0@@16|) BoxType) (= (type |y#0@@21|) BoxType)) (= (type |o#0@@4|) refType)) (and (and (and (and ($IsBox |x#0@@16| Multisets._default.IsIdentity$A@@1) ($IsBox |y#0@@21| Multisets._default.IsIdentity$A@@1)) ($Is |o#0@@4| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@1 TBool $h0@@7 |inv#0@@11| |x#0@@16|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@1 TBool $h0@@7 |inv#0@@11| |y#0@@21|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 $h0@@7 |add#0@@16| |x#0@@16| |y#0@@21|) ($Box |o#0@@4|))))) (= ($Box $o@@51) ($Box |o#0@@4|)))) :qid |Multiset.184:15| :skolemid |3962| :pattern ( (MapType0Select (Reads2 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 $h0@@7 |add#0@@16| |x#0@@16| |y#0@@21|) ($Box |o#0@@4|))) )))) (= (MapType1Select (MapType0Select $h0@@7 $o@@51) $f@@7) (MapType1Select (MapType0Select $h1@@7 $o@@51) $f@@7)))) :qid |unknown.0:0| :skolemid |3963| :no-pattern (type $o@@51) :no-pattern (type $f@@7) :no-pattern (U_2_int $o@@51) :no-pattern (U_2_bool $o@@51) :no-pattern (U_2_int $f@@7) :no-pattern (U_2_bool $f@@7) ))) (and (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@659 $h0@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@659 $h1@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|)) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@659 $h1@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@659 $h0@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|)))) :qid |unknown.0:0| :skolemid |3964| :pattern ( ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@659 $h1@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|)) )))
(assert  (=> true (forall ((Multisets._default.IsIdentity$A@@2 T@U) ($ly@@660 T@U) ($Heap@@76 T@U) (|add#0@@17| T@U) (|inv#0@@12| T@U) (|zero#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@2) TyType) (= (type $ly@@660) LayerTypeType)) (= (type $Heap@@76) (MapType0Type refType MapType1Type))) (= (type |add#0@@17|) HandleTypeType)) (= (type |inv#0@@12|) HandleTypeType)) (= (type |zero#0@@17|) BoxType)) (or (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentity$A@@2 $Heap@@76 |add#0@@17| |inv#0@@12| |zero#0@@17|) (and (and (and ($IsGoodHeap $Heap@@76) ($Is |add#0@@17| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@2 Multisets._default.IsIdentity$A@@2 Multisets._default.IsIdentity$A@@2))) ($Is |inv#0@@12| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@2 TBool))) ($IsBox |zero#0@@17| Multisets._default.IsIdentity$A@@2)))) true) :qid |unknown.0:0| :skolemid |3965| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@2 $ly@@660 $Heap@@76 |add#0@@17| |inv#0@@12| |zero#0@@17|)) ))))
(assert (forall ((Multisets._default.IsIdentity$A@@3 T@U) ($ly@@661 T@U) ($Heap@@77 T@U) (|add#0@@18| T@U) (|inv#0@@13| T@U) (|zero#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@3) TyType) (= (type $ly@@661) LayerTypeType)) (= (type $Heap@@77) (MapType0Type refType MapType1Type))) (= (type |add#0@@18|) HandleTypeType)) (= (type |inv#0@@13|) HandleTypeType)) (= (type |zero#0@@18|) BoxType)) (and (and (and ($IsGoodHeap $Heap@@77) ($Is |add#0@@18| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@3 Multisets._default.IsIdentity$A@@3 Multisets._default.IsIdentity$A@@3))) ($Is |inv#0@@13| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@3 TBool))) ($IsBox |zero#0@@18| Multisets._default.IsIdentity$A@@3))) (and (=> (|Multisets.__default.IsIdentity#requires| Multisets._default.IsIdentity$A@@3 $ly@@661 $Heap@@77 |add#0@@18| |inv#0@@13| |zero#0@@18|) true) (=> true (|Multisets.__default.IsIdentity#requires| Multisets._default.IsIdentity$A@@3 $ly@@661 $Heap@@77 |add#0@@18| |inv#0@@13| |zero#0@@18|)))) :qid |unknown.0:0| :skolemid |3966| :pattern ( (|Multisets.__default.IsIdentity#requires| Multisets._default.IsIdentity$A@@3 $ly@@661 $Heap@@77 |add#0@@18| |inv#0@@13| |zero#0@@18|)) )))
(assert  (=> true (forall ((Multisets._default.IsIdentity$A@@4 T@U) ($ly@@662 T@U) ($Heap@@78 T@U) (|add#0@@19| T@U) (|inv#0@@14| T@U) (|zero#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@4) TyType) (= (type $ly@@662) LayerTypeType)) (= (type $Heap@@78) (MapType0Type refType MapType1Type))) (= (type |add#0@@19|) HandleTypeType)) (= (type |inv#0@@14|) HandleTypeType)) (= (type |zero#0@@19|) BoxType)) (or (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |inv#0@@14| |zero#0@@19|) (and (and (and ($IsGoodHeap $Heap@@78) ($Is |add#0@@19| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4))) ($Is |inv#0@@14| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@4 TBool))) ($IsBox |zero#0@@19| Multisets._default.IsIdentity$A@@4)))) (and (|Multisets.__default.Foldable#canCall| Multisets._default.IsIdentity$A@@4 $Heap@@78 |zero#0@@19| |add#0@@19| |inv#0@@14|) (and (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@4 ($LS $ly@@662) $Heap@@78 |add#0@@19| |inv#0@@14| |zero#0@@19|) (and (Multisets.__default.Foldable Multisets._default.IsIdentity$A@@4 $Heap@@78 |zero#0@@19| |add#0@@19| |inv#0@@14|) (forall ((|a#0@@164| T@U) ) (!  (=> (= (type |a#0@@164|) BoxType) (=> (and ($IsBox |a#0@@164| Multisets._default.IsIdentity$A@@4) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@78 |inv#0@@14| |a#0@@164|)))) (and (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |zero#0@@19| |a#0@@164|) (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |a#0@@164| |zero#0@@19|)) (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |a#0@@164| |zero#0@@19|) |a#0@@164|)))) :qid |Multiset.187:15| :skolemid |3967| :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |a#0@@164| |zero#0@@19|)) :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |zero#0@@19| |a#0@@164|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@78 |inv#0@@14| |a#0@@164|))) )))) (=> (and (Multisets.__default.Foldable Multisets._default.IsIdentity$A@@4 $Heap@@78 |zero#0@@19| |add#0@@19| |inv#0@@14|) (forall ((|a#0@@165| T@U) ) (!  (=> (= (type |a#0@@165|) BoxType) (=> (and ($IsBox |a#0@@165| Multisets._default.IsIdentity$A@@4) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@78 |inv#0@@14| |a#0@@165|)))) (and (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |zero#0@@19| |a#0@@165|) (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |a#0@@165| |zero#0@@19|)) (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |a#0@@165| |zero#0@@19|) |a#0@@165|)))) :qid |Multiset.187:15| :skolemid |3967| :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |a#0@@165| |zero#0@@19|)) :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@78 |add#0@@19| |zero#0@@19| |a#0@@165|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@78 |inv#0@@14| |a#0@@165|))) ))) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@4 ($LS $ly@@662) $Heap@@78 |add#0@@19| |inv#0@@14| |zero#0@@19|))))) :qid |unknown.0:0| :skolemid |3968| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@4 ($LS $ly@@662) $Heap@@78 |add#0@@19| |inv#0@@14| |zero#0@@19|)) ))))
(assert (forall ((Multisets._default.IsCommutative$A T@U) ($ly@@663 T@U) ($Heap@@79 T@U) (|add#0@@20| T@U) (|inv#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsCommutative$A) TyType) (= (type $ly@@663) LayerTypeType)) (= (type $Heap@@79) (MapType0Type refType MapType1Type))) (= (type |add#0@@20|) HandleTypeType)) (= (type |inv#0@@15|) HandleTypeType)) (and (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A ($LS $ly@@663) $Heap@@79 |add#0@@20| |inv#0@@15|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A $ly@@663 $Heap@@79 |add#0@@20| |inv#0@@15|)) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A $ly@@663 $Heap@@79 |add#0@@20| |inv#0@@15|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A ($LS $ly@@663) $Heap@@79 |add#0@@20| |inv#0@@15|)))) :qid |unknown.0:0| :skolemid |3969| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A ($LS $ly@@663) $Heap@@79 |add#0@@20| |inv#0@@15|)) )))
(assert (forall ((Multisets._default.IsCommutative$A@@0 T@U) ($ly@@664 T@U) ($Heap@@80 T@U) (|add#0@@21| T@U) (|inv#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsCommutative$A@@0) TyType) (= (type $ly@@664) LayerTypeType)) (= (type $Heap@@80) (MapType0Type refType MapType1Type))) (= (type |add#0@@21|) HandleTypeType)) (= (type |inv#0@@16|) HandleTypeType)) (and (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $ly@@664 $Heap@@80 |add#0@@21| |inv#0@@16|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $LZ $Heap@@80 |add#0@@21| |inv#0@@16|)) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $LZ $Heap@@80 |add#0@@21| |inv#0@@16|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $ly@@664 $Heap@@80 |add#0@@21| |inv#0@@16|)))) :qid |unknown.0:0| :skolemid |3970| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 (AsFuelBottom $ly@@664) $Heap@@80 |add#0@@21| |inv#0@@16|)) )))
(assert (forall ((Multisets._default.IsCommutative$A@@1 T@U) ($ly@@665 T@U) ($h0@@8 T@U) ($h1@@8 T@U) (|add#0@@22| T@U) (|inv#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@1) TyType) (= (type $ly@@665) LayerTypeType)) (= (type $h0@@8) (MapType0Type refType MapType1Type))) (= (type $h1@@8) (MapType0Type refType MapType1Type))) (= (type |add#0@@22|) HandleTypeType)) (= (type |inv#0@@17|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@8) ($IsGoodHeap $h1@@8)) (or (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutative$A@@1 $h0@@8 |add#0@@22| |inv#0@@17|) (and ($Is |add#0@@22| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1)) ($Is |inv#0@@17| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@1 TBool))))) (and ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8)))) (forall (($o@@52 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (= (type $o@@52) refType) (= (type $f@@8) (FieldType alpha@@15))) (and (not (= $o@@52 null)) (exists ((|x#0@@17| T@U) (|y#0@@22| T@U) (|o#0@@5| T@U) ) (!  (and (and (and (= (type |x#0@@17|) BoxType) (= (type |y#0@@22|) BoxType)) (= (type |o#0@@5|) refType)) (and (and (and (and ($IsBox |x#0@@17| Multisets._default.IsCommutative$A@@1) ($IsBox |y#0@@22| Multisets._default.IsCommutative$A@@1)) ($Is |o#0@@5| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@1 TBool $h0@@8 |inv#0@@17| |x#0@@17|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@1 TBool $h0@@8 |inv#0@@17| |y#0@@22|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 $h0@@8 |add#0@@22| |x#0@@17| |y#0@@22|) ($Box |o#0@@5|))))) (= ($Box $o@@52) ($Box |o#0@@5|)))) :qid |Multiset.192:15| :skolemid |3971| :pattern ( (MapType0Select (Reads2 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 $h0@@8 |add#0@@22| |x#0@@17| |y#0@@22|) ($Box |o#0@@5|))) )))) (= (MapType1Select (MapType0Select $h0@@8 $o@@52) $f@@8) (MapType1Select (MapType0Select $h1@@8 $o@@52) $f@@8)))) :qid |unknown.0:0| :skolemid |3972| :no-pattern (type $o@@52) :no-pattern (type $f@@8) :no-pattern (U_2_int $o@@52) :no-pattern (U_2_bool $o@@52) :no-pattern (U_2_int $f@@8) :no-pattern (U_2_bool $f@@8) ))) (and (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@665 $h0@@8 |add#0@@22| |inv#0@@17|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@665 $h1@@8 |add#0@@22| |inv#0@@17|)) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@665 $h1@@8 |add#0@@22| |inv#0@@17|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@665 $h0@@8 |add#0@@22| |inv#0@@17|)))) :qid |unknown.0:0| :skolemid |3973| :pattern ( ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@665 $h1@@8 |add#0@@22| |inv#0@@17|)) )))
(assert  (=> true (forall ((Multisets._default.IsCommutative$A@@2 T@U) ($ly@@666 T@U) ($Heap@@81 T@U) (|add#0@@23| T@U) (|inv#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@2) TyType) (= (type $ly@@666) LayerTypeType)) (= (type $Heap@@81) (MapType0Type refType MapType1Type))) (= (type |add#0@@23|) HandleTypeType)) (= (type |inv#0@@18|) HandleTypeType)) (or (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutative$A@@2 $Heap@@81 |add#0@@23| |inv#0@@18|) (and (and (and ($IsGoodHeap $Heap@@81) ($Is |add#0@@23| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2))) ($Is |inv#0@@18| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@2 TBool))) (forall ((|x#1@@16| T@U) (|y#1@@14| T@U) ) (!  (=> (and (= (type |x#1@@16|) BoxType) (= (type |y#1@@14|) BoxType)) (=> (and (and ($IsBox |x#1@@16| Multisets._default.IsCommutative$A@@2) ($IsBox |y#1@@14| Multisets._default.IsCommutative$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@81 |inv#0@@18| |x#1@@16|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@81 |inv#0@@18| |y#1@@14|))))) (Requires2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 $Heap@@81 |add#0@@23| |x#1@@16| |y#1@@14|))) :qid |Multiset.191:21| :skolemid |3974| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 $Heap@@81 |add#0@@23| |x#1@@16| |y#1@@14|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@81 |inv#0@@18| |y#1@@14|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@81 |inv#0@@18| |x#1@@16|))) ))))) true) :qid |unknown.0:0| :skolemid |3975| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@2 $ly@@666 $Heap@@81 |add#0@@23| |inv#0@@18|)) ))))
(assert (forall ((Multisets._default.IsCommutative$A@@3 T@U) ($ly@@667 T@U) ($Heap@@82 T@U) (|add#0@@24| T@U) (|inv#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@3) TyType) (= (type $ly@@667) LayerTypeType)) (= (type $Heap@@82) (MapType0Type refType MapType1Type))) (= (type |add#0@@24|) HandleTypeType)) (= (type |inv#0@@19|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@82) ($Is |add#0@@24| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3))) ($Is |inv#0@@19| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@3 TBool)))) (and (=> (|Multisets.__default.IsCommutative#requires| Multisets._default.IsCommutative$A@@3 $ly@@667 $Heap@@82 |add#0@@24| |inv#0@@19|) (forall ((|x#2@@7| T@U) (|y#2@@1| T@U) ) (!  (=> (and (= (type |x#2@@7|) BoxType) (= (type |y#2@@1|) BoxType)) (=> (and (and ($IsBox |x#2@@7| Multisets._default.IsCommutative$A@@3) ($IsBox |y#2@@1| Multisets._default.IsCommutative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@82 |inv#0@@19| |x#2@@7|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@82 |inv#0@@19| |y#2@@1|))))) (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@82 |add#0@@24| |x#2@@7| |y#2@@1|))) :qid |Multiset.191:21| :skolemid |3976| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@82 |add#0@@24| |x#2@@7| |y#2@@1|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@82 |inv#0@@19| |y#2@@1|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@82 |inv#0@@19| |x#2@@7|))) ))) (=> (forall ((|x#2@@8| T@U) (|y#2@@2| T@U) ) (!  (=> (and (= (type |x#2@@8|) BoxType) (= (type |y#2@@2|) BoxType)) (=> (and (and ($IsBox |x#2@@8| Multisets._default.IsCommutative$A@@3) ($IsBox |y#2@@2| Multisets._default.IsCommutative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@82 |inv#0@@19| |x#2@@8|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@82 |inv#0@@19| |y#2@@2|))))) (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@82 |add#0@@24| |x#2@@8| |y#2@@2|))) :qid |Multiset.191:21| :skolemid |3976| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@82 |add#0@@24| |x#2@@8| |y#2@@2|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@82 |inv#0@@19| |y#2@@2|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@82 |inv#0@@19| |x#2@@8|))) )) (|Multisets.__default.IsCommutative#requires| Multisets._default.IsCommutative$A@@3 $ly@@667 $Heap@@82 |add#0@@24| |inv#0@@19|)))) :qid |unknown.0:0| :skolemid |3977| :pattern ( (|Multisets.__default.IsCommutative#requires| Multisets._default.IsCommutative$A@@3 $ly@@667 $Heap@@82 |add#0@@24| |inv#0@@19|)) )))
(assert  (=> true (forall ((Multisets._default.IsCommutative$A@@4 T@U) ($ly@@668 T@U) ($Heap@@83 T@U) (|add#0@@25| T@U) (|inv#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@4) TyType) (= (type $ly@@668) LayerTypeType)) (= (type $Heap@@83) (MapType0Type refType MapType1Type))) (= (type |add#0@@25|) HandleTypeType)) (= (type |inv#0@@20|) HandleTypeType)) (or (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |inv#0@@20|) (and (and (and ($IsGoodHeap $Heap@@83) ($Is |add#0@@25| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4))) ($Is |inv#0@@20| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@4 TBool))) (forall ((|x#2@@9| T@U) (|y#2@@3| T@U) ) (!  (=> (and (= (type |x#2@@9|) BoxType) (= (type |y#2@@3|) BoxType)) (=> (and (and ($IsBox |x#2@@9| Multisets._default.IsCommutative$A@@4) ($IsBox |y#2@@3| Multisets._default.IsCommutative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |x#2@@9|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |y#2@@3|))))) (Requires2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |x#2@@9| |y#2@@3|))) :qid |Multiset.191:21| :skolemid |3976| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |x#2@@9| |y#2@@3|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |y#2@@3|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |x#2@@9|))) ))))) (and (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@4 ($LS $ly@@668) $Heap@@83 |add#0@@25| |inv#0@@20|) (forall ((|a#0@@166| T@U) (|b#0@@138| T@U) ) (!  (=> (and (= (type |a#0@@166|) BoxType) (= (type |b#0@@138|) BoxType)) (=> (and (and ($IsBox |a#0@@166| Multisets._default.IsCommutative$A@@4) ($IsBox |b#0@@138| Multisets._default.IsCommutative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |a#0@@166|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |b#0@@138|))))) (= (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |a#0@@166| |b#0@@138|) (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |b#0@@138| |a#0@@166|)))) :qid |Multiset.194:12| :skolemid |3978| :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |b#0@@138| |a#0@@166|)) :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |a#0@@166| |b#0@@138|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |b#0@@138|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |a#0@@166|))) ))) (=> (forall ((|a#0@@167| T@U) (|b#0@@139| T@U) ) (!  (=> (and (= (type |a#0@@167|) BoxType) (= (type |b#0@@139|) BoxType)) (=> (and (and ($IsBox |a#0@@167| Multisets._default.IsCommutative$A@@4) ($IsBox |b#0@@139| Multisets._default.IsCommutative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |a#0@@167|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |b#0@@139|))))) (= (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |a#0@@167| |b#0@@139|) (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |b#0@@139| |a#0@@167|)))) :qid |Multiset.194:12| :skolemid |3978| :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |b#0@@139| |a#0@@167|)) :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@83 |add#0@@25| |a#0@@167| |b#0@@139|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |b#0@@139|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@83 |inv#0@@20| |a#0@@167|))) )) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@4 ($LS $ly@@668) $Heap@@83 |add#0@@25| |inv#0@@20|)))) :qid |unknown.0:0| :skolemid |3979| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@4 ($LS $ly@@668) $Heap@@83 |add#0@@25| |inv#0@@20|)) ))))
(assert (forall ((Multisets._default.IsAssociative$A T@U) ($ly@@669 T@U) ($Heap@@84 T@U) (|add#0@@26| T@U) (|inv#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsAssociative$A) TyType) (= (type $ly@@669) LayerTypeType)) (= (type $Heap@@84) (MapType0Type refType MapType1Type))) (= (type |add#0@@26|) HandleTypeType)) (= (type |inv#0@@21|) HandleTypeType)) (and (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A ($LS $ly@@669) $Heap@@84 |add#0@@26| |inv#0@@21|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A $ly@@669 $Heap@@84 |add#0@@26| |inv#0@@21|)) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A $ly@@669 $Heap@@84 |add#0@@26| |inv#0@@21|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A ($LS $ly@@669) $Heap@@84 |add#0@@26| |inv#0@@21|)))) :qid |unknown.0:0| :skolemid |3980| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A ($LS $ly@@669) $Heap@@84 |add#0@@26| |inv#0@@21|)) )))
(assert (forall ((Multisets._default.IsAssociative$A@@0 T@U) ($ly@@670 T@U) ($Heap@@85 T@U) (|add#0@@27| T@U) (|inv#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsAssociative$A@@0) TyType) (= (type $ly@@670) LayerTypeType)) (= (type $Heap@@85) (MapType0Type refType MapType1Type))) (= (type |add#0@@27|) HandleTypeType)) (= (type |inv#0@@22|) HandleTypeType)) (and (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $ly@@670 $Heap@@85 |add#0@@27| |inv#0@@22|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $LZ $Heap@@85 |add#0@@27| |inv#0@@22|)) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $LZ $Heap@@85 |add#0@@27| |inv#0@@22|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $ly@@670 $Heap@@85 |add#0@@27| |inv#0@@22|)))) :qid |unknown.0:0| :skolemid |3981| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 (AsFuelBottom $ly@@670) $Heap@@85 |add#0@@27| |inv#0@@22|)) )))
(assert (forall ((Multisets._default.IsAssociative$A@@1 T@U) ($ly@@671 T@U) ($h0@@9 T@U) ($h1@@9 T@U) (|add#0@@28| T@U) (|inv#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@1) TyType) (= (type $ly@@671) LayerTypeType)) (= (type $h0@@9) (MapType0Type refType MapType1Type))) (= (type $h1@@9) (MapType0Type refType MapType1Type))) (= (type |add#0@@28|) HandleTypeType)) (= (type |inv#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@9) ($IsGoodHeap $h1@@9)) (or (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociative$A@@1 $h0@@9 |add#0@@28| |inv#0@@23|) (and ($Is |add#0@@28| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1)) ($Is |inv#0@@23| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@1 TBool))))) (and ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9)))) (forall (($o@@53 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (= (type $o@@53) refType) (= (type $f@@9) (FieldType alpha@@16))) (and (not (= $o@@53 null)) (exists ((|x#0@@18| T@U) (|y#0@@23| T@U) (|o#0@@6| T@U) ) (!  (and (and (and (= (type |x#0@@18|) BoxType) (= (type |y#0@@23|) BoxType)) (= (type |o#0@@6|) refType)) (and (and (and (and ($IsBox |x#0@@18| Multisets._default.IsAssociative$A@@1) ($IsBox |y#0@@23| Multisets._default.IsAssociative$A@@1)) ($Is |o#0@@6| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@1 TBool $h0@@9 |inv#0@@23| |x#0@@18|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@1 TBool $h0@@9 |inv#0@@23| |y#0@@23|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 $h0@@9 |add#0@@28| |x#0@@18| |y#0@@23|) ($Box |o#0@@6|))))) (= ($Box $o@@53) ($Box |o#0@@6|)))) :qid |Multiset.199:15| :skolemid |3982| :pattern ( (MapType0Select (Reads2 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 $h0@@9 |add#0@@28| |x#0@@18| |y#0@@23|) ($Box |o#0@@6|))) )))) (= (MapType1Select (MapType0Select $h0@@9 $o@@53) $f@@9) (MapType1Select (MapType0Select $h1@@9 $o@@53) $f@@9)))) :qid |unknown.0:0| :skolemid |3983| :no-pattern (type $o@@53) :no-pattern (type $f@@9) :no-pattern (U_2_int $o@@53) :no-pattern (U_2_bool $o@@53) :no-pattern (U_2_int $f@@9) :no-pattern (U_2_bool $f@@9) ))) (and (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@671 $h0@@9 |add#0@@28| |inv#0@@23|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@671 $h1@@9 |add#0@@28| |inv#0@@23|)) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@671 $h1@@9 |add#0@@28| |inv#0@@23|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@671 $h0@@9 |add#0@@28| |inv#0@@23|)))) :qid |unknown.0:0| :skolemid |3984| :pattern ( ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@671 $h1@@9 |add#0@@28| |inv#0@@23|)) )))
(assert  (=> true (forall ((Multisets._default.IsAssociative$A@@2 T@U) ($ly@@672 T@U) ($Heap@@86 T@U) (|add#0@@29| T@U) (|inv#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@2) TyType) (= (type $ly@@672) LayerTypeType)) (= (type $Heap@@86) (MapType0Type refType MapType1Type))) (= (type |add#0@@29|) HandleTypeType)) (= (type |inv#0@@24|) HandleTypeType)) (or (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociative$A@@2 $Heap@@86 |add#0@@29| |inv#0@@24|) (and (and (and ($IsGoodHeap $Heap@@86) ($Is |add#0@@29| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2))) ($Is |inv#0@@24| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@2 TBool))) (and (forall ((|x#1@@17| T@U) (|y#1@@15| T@U) ) (!  (=> (and (= (type |x#1@@17|) BoxType) (= (type |y#1@@15|) BoxType)) (=> (and (and ($IsBox |x#1@@17| Multisets._default.IsAssociative$A@@2) ($IsBox |y#1@@15| Multisets._default.IsAssociative$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@86 |inv#0@@24| |x#1@@17|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@86 |inv#0@@24| |y#1@@15|))))) (Requires2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@86 |add#0@@29| |x#1@@17| |y#1@@15|))) :qid |Multiset.198:21| :skolemid |3985| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@86 |add#0@@29| |x#1@@17| |y#1@@15|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@86 |inv#0@@24| |y#1@@15|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@86 |inv#0@@24| |x#1@@17|))) )) (forall ((|x#2@@10| T@U) (|y#2@@4| T@U) ) (!  (=> (and (= (type |x#2@@10|) BoxType) (= (type |y#2@@4|) BoxType)) (=> (and (and ($IsBox |x#2@@10| Multisets._default.IsAssociative$A@@2) ($IsBox |y#2@@4| Multisets._default.IsAssociative$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@86 |inv#0@@24| |x#2@@10|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@86 |inv#0@@24| |y#2@@4|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@86 |inv#0@@24| (Apply2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@86 |add#0@@29| |x#2@@10| |y#2@@4|)))))) :qid |Multiset.198:21| :skolemid |3986| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@86 |add#0@@29| |x#2@@10| |y#2@@4|)) )))))) true) :qid |unknown.0:0| :skolemid |3987| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@2 $ly@@672 $Heap@@86 |add#0@@29| |inv#0@@24|)) ))))
(assert (forall ((Multisets._default.IsAssociative$A@@3 T@U) ($ly@@673 T@U) ($Heap@@87 T@U) (|add#0@@30| T@U) (|inv#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@3) TyType) (= (type $ly@@673) LayerTypeType)) (= (type $Heap@@87) (MapType0Type refType MapType1Type))) (= (type |add#0@@30|) HandleTypeType)) (= (type |inv#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@87) ($Is |add#0@@30| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3))) ($Is |inv#0@@25| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@3 TBool)))) (and (=> (|Multisets.__default.IsAssociative#requires| Multisets._default.IsAssociative$A@@3 $ly@@673 $Heap@@87 |add#0@@30| |inv#0@@25|) (and (forall ((|x#3@@1| T@U) (|y#3| T@U) ) (!  (=> (and (= (type |x#3@@1|) BoxType) (= (type |y#3|) BoxType)) (=> (and (and ($IsBox |x#3@@1| Multisets._default.IsAssociative$A@@3) ($IsBox |y#3| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |x#3@@1|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |y#3|))))) (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@87 |add#0@@30| |x#3@@1| |y#3|))) :qid |Multiset.198:21| :skolemid |3988| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@87 |add#0@@30| |x#3@@1| |y#3|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |y#3|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |x#3@@1|))) )) (forall ((|x#4| T@U) (|y#4| T@U) ) (!  (=> (and (= (type |x#4|) BoxType) (= (type |y#4|) BoxType)) (=> (and (and ($IsBox |x#4| Multisets._default.IsAssociative$A@@3) ($IsBox |y#4| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |x#4|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |y#4|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@87 |add#0@@30| |x#4| |y#4|)))))) :qid |Multiset.198:21| :skolemid |3989| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@87 |add#0@@30| |x#4| |y#4|)) )))) (=> (and (forall ((|x#3@@2| T@U) (|y#3@@0| T@U) ) (!  (=> (and (= (type |x#3@@2|) BoxType) (= (type |y#3@@0|) BoxType)) (=> (and (and ($IsBox |x#3@@2| Multisets._default.IsAssociative$A@@3) ($IsBox |y#3@@0| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |x#3@@2|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |y#3@@0|))))) (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@87 |add#0@@30| |x#3@@2| |y#3@@0|))) :qid |Multiset.198:21| :skolemid |3988| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@87 |add#0@@30| |x#3@@2| |y#3@@0|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |y#3@@0|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |x#3@@2|))) )) (forall ((|x#4@@0| T@U) (|y#4@@0| T@U) ) (!  (=> (and (= (type |x#4@@0|) BoxType) (= (type |y#4@@0|) BoxType)) (=> (and (and ($IsBox |x#4@@0| Multisets._default.IsAssociative$A@@3) ($IsBox |y#4@@0| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |x#4@@0|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| |y#4@@0|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@87 |inv#0@@25| (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@87 |add#0@@30| |x#4@@0| |y#4@@0|)))))) :qid |Multiset.198:21| :skolemid |3989| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@87 |add#0@@30| |x#4@@0| |y#4@@0|)) ))) (|Multisets.__default.IsAssociative#requires| Multisets._default.IsAssociative$A@@3 $ly@@673 $Heap@@87 |add#0@@30| |inv#0@@25|)))) :qid |unknown.0:0| :skolemid |3990| :pattern ( (|Multisets.__default.IsAssociative#requires| Multisets._default.IsAssociative$A@@3 $ly@@673 $Heap@@87 |add#0@@30| |inv#0@@25|)) )))
(assert  (=> true (forall ((Multisets._default.IsAssociative$A@@4 T@U) ($ly@@674 T@U) ($Heap@@88 T@U) (|add#0@@31| T@U) (|inv#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@4) TyType) (= (type $ly@@674) LayerTypeType)) (= (type $Heap@@88) (MapType0Type refType MapType1Type))) (= (type |add#0@@31|) HandleTypeType)) (= (type |inv#0@@26|) HandleTypeType)) (or (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |inv#0@@26|) (and (and (and ($IsGoodHeap $Heap@@88) ($Is |add#0@@31| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4))) ($Is |inv#0@@26| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@4 TBool))) (and (forall ((|x#3@@3| T@U) (|y#3@@1| T@U) ) (!  (=> (and (= (type |x#3@@3|) BoxType) (= (type |y#3@@1|) BoxType)) (=> (and (and ($IsBox |x#3@@3| Multisets._default.IsAssociative$A@@4) ($IsBox |y#3@@1| Multisets._default.IsAssociative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |x#3@@3|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |y#3@@1|))))) (Requires2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |x#3@@3| |y#3@@1|))) :qid |Multiset.198:21| :skolemid |3988| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |x#3@@3| |y#3@@1|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |y#3@@1|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |x#3@@3|))) )) (forall ((|x#4@@1| T@U) (|y#4@@1| T@U) ) (!  (=> (and (= (type |x#4@@1|) BoxType) (= (type |y#4@@1|) BoxType)) (=> (and (and ($IsBox |x#4@@1| Multisets._default.IsAssociative$A@@4) ($IsBox |y#4@@1| Multisets._default.IsAssociative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |x#4@@1|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |y#4@@1|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |x#4@@1| |y#4@@1|)))))) :qid |Multiset.198:21| :skolemid |3989| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |x#4@@1| |y#4@@1|)) )))))) (and (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@4 ($LS $ly@@674) $Heap@@88 |add#0@@31| |inv#0@@26|) (forall ((|a#0@@168| T@U) (|b#0@@140| T@U) (|c#0@@12| T@U) ) (!  (=> (and (and (= (type |a#0@@168|) BoxType) (= (type |b#0@@140|) BoxType)) (= (type |c#0@@12|) BoxType)) (=> (and (and (and ($IsBox |a#0@@168| Multisets._default.IsAssociative$A@@4) ($IsBox |b#0@@140| Multisets._default.IsAssociative$A@@4)) ($IsBox |c#0@@12| Multisets._default.IsAssociative$A@@4)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |a#0@@168|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |b#0@@140|)))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |c#0@@12|))))) (= (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |a#0@@168| |b#0@@140|) |c#0@@12|) (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |a#0@@168| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |b#0@@140| |c#0@@12|))))) :qid |Multiset.201:12| :skolemid |3991| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |a#0@@168| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |b#0@@140| |c#0@@12|))) :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |a#0@@168| |b#0@@140|) |c#0@@12|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |c#0@@12|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |b#0@@140|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |a#0@@168|))) ))) (=> (forall ((|a#0@@169| T@U) (|b#0@@141| T@U) (|c#0@@13| T@U) ) (!  (=> (and (and (= (type |a#0@@169|) BoxType) (= (type |b#0@@141|) BoxType)) (= (type |c#0@@13|) BoxType)) (=> (and (and (and ($IsBox |a#0@@169| Multisets._default.IsAssociative$A@@4) ($IsBox |b#0@@141| Multisets._default.IsAssociative$A@@4)) ($IsBox |c#0@@13| Multisets._default.IsAssociative$A@@4)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |a#0@@169|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |b#0@@141|)))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |c#0@@13|))))) (= (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |a#0@@169| |b#0@@141|) |c#0@@13|) (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |a#0@@169| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |b#0@@141| |c#0@@13|))))) :qid |Multiset.201:12| :skolemid |3991| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |a#0@@169| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |b#0@@141| |c#0@@13|))) :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@88 |add#0@@31| |a#0@@169| |b#0@@141|) |c#0@@13|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |c#0@@13|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |b#0@@141|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@88 |inv#0@@26| |a#0@@169|))) )) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@4 ($LS $ly@@674) $Heap@@88 |add#0@@31| |inv#0@@26|)))) :qid |unknown.0:0| :skolemid |3992| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@4 ($LS $ly@@674) $Heap@@88 |add#0@@31| |inv#0@@26|)) ))))
(assert  (=> true (forall ((Multisets._default.IsIdentitySimple$A T@U) (|add#0@@32| T@U) (|zero#0@@20| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsIdentitySimple$A) TyType) (= (type |add#0@@32|) HandleTypeType)) (= (type |zero#0@@20|) BoxType)) (or (|Multisets.__default.IsIdentitySimple#canCall| Multisets._default.IsIdentitySimple$A |add#0@@32| |zero#0@@20|) (and ($Is |add#0@@32| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A Multisets._default.IsIdentitySimple$A Multisets._default.IsIdentitySimple$A)) ($IsBox |zero#0@@20| Multisets._default.IsIdentitySimple$A)))) true) :qid |unknown.0:0| :skolemid |3993| :pattern ( (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A |add#0@@32| |zero#0@@20|)) ))))
(assert (forall ((Multisets._default.IsIdentitySimple$A@@0 T@U) ($Heap@@89 T@U) (|add#0@@33| T@U) (|zero#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsIdentitySimple$A@@0) TyType) (= (type $Heap@@89) (MapType0Type refType MapType1Type))) (= (type |add#0@@33|) HandleTypeType)) (= (type |zero#0@@21|) BoxType)) (and (and ($IsGoodHeap $Heap@@89) ($Is |add#0@@33| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A@@0 Multisets._default.IsIdentitySimple$A@@0 Multisets._default.IsIdentitySimple$A@@0))) ($IsBox |zero#0@@21| Multisets._default.IsIdentitySimple$A@@0))) (and (=> (|Multisets.__default.IsIdentitySimple#requires| Multisets._default.IsIdentitySimple$A@@0 |add#0@@33| |zero#0@@21|) true) (=> true (|Multisets.__default.IsIdentitySimple#requires| Multisets._default.IsIdentitySimple$A@@0 |add#0@@33| |zero#0@@21|)))) :qid |unknown.0:0| :skolemid |3994| :pattern ( (|Multisets.__default.IsIdentitySimple#requires| Multisets._default.IsIdentitySimple$A@@0 |add#0@@33| |zero#0@@21|) ($IsGoodHeap $Heap@@89)) )))
(assert (= (type StartFuel_Multisets._default.IsIdentity) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.IsIdentitySimple$A@@1 T@U) ($Heap@@90 T@U) (|add#0@@34| T@U) (|zero#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsIdentitySimple$A@@1) TyType) (= (type $Heap@@90) (MapType0Type refType MapType1Type))) (= (type |add#0@@34|) HandleTypeType)) (= (type |zero#0@@22|) BoxType)) (or (|Multisets.__default.IsIdentitySimple#canCall| Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|) (and (and ($IsGoodHeap $Heap@@90) ($Is |add#0@@34| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A@@1 Multisets._default.IsIdentitySimple$A@@1 Multisets._default.IsIdentitySimple$A@@1))) ($IsBox |zero#0@@22| Multisets._default.IsIdentitySimple$A@@1)))) (and (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentitySimple$A@@1 $Heap@@90 |add#0@@34| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsIdentitySimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) |zero#0@@22|) (and (=> (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|) (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@1 StartFuel_Multisets._default.IsIdentity $Heap@@90 |add#0@@34| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsIdentitySimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) |zero#0@@22|)) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@1 StartFuel_Multisets._default.IsIdentity $Heap@@90 |add#0@@34| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsIdentitySimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) |zero#0@@22|) (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|))))) :qid |unknown.0:0| :skolemid |3995| :pattern ( (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|) ($IsGoodHeap $Heap@@90)) ))))
(assert  (=> true (forall ((Multisets._default.IsIdentitySimple$A@@2 T@U) ($Heap@@91 T@U) (|add#0@@35| T@U) (|zero#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsIdentitySimple$A@@2) TyType) (= (type $Heap@@91) (MapType0Type refType MapType1Type))) (= (type |add#0@@35|) HandleTypeType)) (= (type |zero#0@@23|) BoxType)) (or (|Multisets.__default.IsIdentitySimple#canCall| Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)) (and (and ($IsGoodHeap $Heap@@91) ($Is |add#0@@35| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A@@2 Multisets._default.IsIdentitySimple$A@@2 Multisets._default.IsIdentitySimple$A@@2))) ($IsBox |zero#0@@23| Multisets._default.IsIdentitySimple$A@@2)))) (and (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentitySimple$A@@2 $Heap@@91 (Lit |add#0@@35|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsIdentitySimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) (Lit |zero#0@@23|)) (and (=> (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)) (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@2 StartFuel_Multisets._default.IsIdentity $Heap@@91 (Lit |add#0@@35|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsIdentitySimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) (Lit |zero#0@@23|))) (=> (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@2 StartFuel_Multisets._default.IsIdentity $Heap@@91 (Lit |add#0@@35|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsIdentitySimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))) (Lit |zero#0@@23|)) (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3996| :pattern ( (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)) ($IsGoodHeap $Heap@@91)) ))))
(assert  (=> true (forall ((Multisets._default.IsCommutativeSimple$A T@U) (|add#0@@36| T@U) ) (!  (=> (and (and (= (type Multisets._default.IsCommutativeSimple$A) TyType) (= (type |add#0@@36|) HandleTypeType)) (or (|Multisets.__default.IsCommutativeSimple#canCall| Multisets._default.IsCommutativeSimple$A |add#0@@36|) ($Is |add#0@@36| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A Multisets._default.IsCommutativeSimple$A Multisets._default.IsCommutativeSimple$A)))) true) :qid |unknown.0:0| :skolemid |3997| :pattern ( (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A |add#0@@36|)) ))))
(assert (forall ((Multisets._default.IsCommutativeSimple$A@@0 T@U) ($Heap@@92 T@U) (|add#0@@37| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsCommutativeSimple$A@@0) TyType) (= (type $Heap@@92) (MapType0Type refType MapType1Type))) (= (type |add#0@@37|) HandleTypeType)) (and ($IsGoodHeap $Heap@@92) ($Is |add#0@@37| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A@@0 Multisets._default.IsCommutativeSimple$A@@0 Multisets._default.IsCommutativeSimple$A@@0)))) (and (=> (|Multisets.__default.IsCommutativeSimple#requires| Multisets._default.IsCommutativeSimple$A@@0 |add#0@@37|) true) (=> true (|Multisets.__default.IsCommutativeSimple#requires| Multisets._default.IsCommutativeSimple$A@@0 |add#0@@37|)))) :qid |unknown.0:0| :skolemid |3998| :pattern ( (|Multisets.__default.IsCommutativeSimple#requires| Multisets._default.IsCommutativeSimple$A@@0 |add#0@@37|) ($IsGoodHeap $Heap@@92)) )))
(assert (= (type StartFuel_Multisets._default.IsCommutative) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.IsCommutativeSimple$A@@1 T@U) ($Heap@@93 T@U) (|add#0@@38| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsCommutativeSimple$A@@1) TyType) (= (type $Heap@@93) (MapType0Type refType MapType1Type))) (= (type |add#0@@38|) HandleTypeType)) (or (|Multisets.__default.IsCommutativeSimple#canCall| Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|) (and ($IsGoodHeap $Heap@@93) ($Is |add#0@@38| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A@@1 Multisets._default.IsCommutativeSimple$A@@1 Multisets._default.IsCommutativeSimple$A@@1))))) (and (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutativeSimple$A@@1 $Heap@@93 |add#0@@38| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsCommutativeSimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ)))) (and (=> (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|) (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@1 StartFuel_Multisets._default.IsCommutative $Heap@@93 |add#0@@38| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsCommutativeSimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))))) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@1 StartFuel_Multisets._default.IsCommutative $Heap@@93 |add#0@@38| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsCommutativeSimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ)))) (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|))))) :qid |unknown.0:0| :skolemid |3999| :pattern ( (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|) ($IsGoodHeap $Heap@@93)) ))))
(assert  (=> true (forall ((Multisets._default.IsCommutativeSimple$A@@2 T@U) ($Heap@@94 T@U) (|add#0@@39| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsCommutativeSimple$A@@2) TyType) (= (type $Heap@@94) (MapType0Type refType MapType1Type))) (= (type |add#0@@39|) HandleTypeType)) (or (|Multisets.__default.IsCommutativeSimple#canCall| Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)) (and ($IsGoodHeap $Heap@@94) ($Is |add#0@@39| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A@@2 Multisets._default.IsCommutativeSimple$A@@2 Multisets._default.IsCommutativeSimple$A@@2))))) (and (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutativeSimple$A@@2 $Heap@@94 (Lit |add#0@@39|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsCommutativeSimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ)))) (and (=> (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)) (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@2 StartFuel_Multisets._default.IsCommutative $Heap@@94 (Lit |add#0@@39|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsCommutativeSimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))))) (=> (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@2 StartFuel_Multisets._default.IsCommutative $Heap@@94 (Lit |add#0@@39|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsCommutativeSimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ)))) (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)))))) :qid |unknown.0:0| :weight 3 :skolemid |4000| :pattern ( (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)) ($IsGoodHeap $Heap@@94)) ))))
(assert  (=> true (forall ((Multisets._default.IsAssociativeSimple$A T@U) (|add#0@@40| T@U) ) (!  (=> (and (and (= (type Multisets._default.IsAssociativeSimple$A) TyType) (= (type |add#0@@40|) HandleTypeType)) (or (|Multisets.__default.IsAssociativeSimple#canCall| Multisets._default.IsAssociativeSimple$A |add#0@@40|) ($Is |add#0@@40| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A Multisets._default.IsAssociativeSimple$A Multisets._default.IsAssociativeSimple$A)))) true) :qid |unknown.0:0| :skolemid |4001| :pattern ( (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A |add#0@@40|)) ))))
(assert (forall ((Multisets._default.IsAssociativeSimple$A@@0 T@U) ($Heap@@95 T@U) (|add#0@@41| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsAssociativeSimple$A@@0) TyType) (= (type $Heap@@95) (MapType0Type refType MapType1Type))) (= (type |add#0@@41|) HandleTypeType)) (and ($IsGoodHeap $Heap@@95) ($Is |add#0@@41| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A@@0 Multisets._default.IsAssociativeSimple$A@@0 Multisets._default.IsAssociativeSimple$A@@0)))) (and (=> (|Multisets.__default.IsAssociativeSimple#requires| Multisets._default.IsAssociativeSimple$A@@0 |add#0@@41|) true) (=> true (|Multisets.__default.IsAssociativeSimple#requires| Multisets._default.IsAssociativeSimple$A@@0 |add#0@@41|)))) :qid |unknown.0:0| :skolemid |4002| :pattern ( (|Multisets.__default.IsAssociativeSimple#requires| Multisets._default.IsAssociativeSimple$A@@0 |add#0@@41|) ($IsGoodHeap $Heap@@95)) )))
(assert (= (type StartFuel_Multisets._default.IsAssociative) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.IsAssociativeSimple$A@@1 T@U) ($Heap@@96 T@U) (|add#0@@42| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsAssociativeSimple$A@@1) TyType) (= (type $Heap@@96) (MapType0Type refType MapType1Type))) (= (type |add#0@@42|) HandleTypeType)) (or (|Multisets.__default.IsAssociativeSimple#canCall| Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|) (and ($IsGoodHeap $Heap@@96) ($Is |add#0@@42| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A@@1 Multisets._default.IsAssociativeSimple$A@@1 Multisets._default.IsAssociativeSimple$A@@1))))) (and (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociativeSimple$A@@1 $Heap@@96 |add#0@@42| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsAssociativeSimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ)))) (and (=> (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|) (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@1 StartFuel_Multisets._default.IsAssociative $Heap@@96 |add#0@@42| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsAssociativeSimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))))) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@1 StartFuel_Multisets._default.IsAssociative $Heap@@96 |add#0@@42| (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsAssociativeSimple$A@@1) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ)))) (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|))))) :qid |unknown.0:0| :skolemid |4003| :pattern ( (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|) ($IsGoodHeap $Heap@@96)) ))))
(assert  (=> true (forall ((Multisets._default.IsAssociativeSimple$A@@2 T@U) ($Heap@@97 T@U) (|add#0@@43| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsAssociativeSimple$A@@2) TyType) (= (type $Heap@@97) (MapType0Type refType MapType1Type))) (= (type |add#0@@43|) HandleTypeType)) (or (|Multisets.__default.IsAssociativeSimple#canCall| Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)) (and ($IsGoodHeap $Heap@@97) ($Is |add#0@@43| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A@@2 Multisets._default.IsAssociativeSimple$A@@2 Multisets._default.IsAssociativeSimple$A@@2))))) (and (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociativeSimple$A@@2 $Heap@@97 (Lit |add#0@@43|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsAssociativeSimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ)))) (and (=> (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)) (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@2 StartFuel_Multisets._default.IsAssociative $Heap@@97 (Lit |add#0@@43|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsAssociativeSimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))))) (=> (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@2 StartFuel_Multisets._default.IsAssociative $Heap@@97 (Lit |add#0@@43|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#571| ($Box (Lit (bool_2_U true)))) (|lambda#572| Multisets._default.IsAssociativeSimple$A@@2) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ)))) (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)))))) :qid |unknown.0:0| :weight 3 :skolemid |4004| :pattern ( (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)) ($IsGoodHeap $Heap@@97)) ))))
(assert  (=> true (forall ((|x#0@@19| Int) (|y#0@@24| Int) ) (!  (=> (or (|Multisets.__default.AddNat#canCall| |x#0@@19| |y#0@@24|) (and (<= (LitInt 0) |x#0@@19|) (<= (LitInt 0) |y#0@@24|))) (<= (LitInt 0) (Multisets.__default.AddNat |x#0@@19| |y#0@@24|))) :qid |Multiset.360:19| :skolemid |4005| :pattern ( (Multisets.__default.AddNat |x#0@@19| |y#0@@24|)) ))))
(assert (forall ((|x#0@@20| Int) (|y#0@@25| Int) ) (!  (=> (and (<= (LitInt 0) |x#0@@20|) (<= (LitInt 0) |y#0@@25|)) (and (=> (|Multisets.__default.AddNat#requires| |x#0@@20| |y#0@@25|) true) (=> true (|Multisets.__default.AddNat#requires| |x#0@@20| |y#0@@25|)))) :qid |Multiset.360:19| :skolemid |4006| :pattern ( (|Multisets.__default.AddNat#requires| |x#0@@20| |y#0@@25|)) )))
(assert  (=> true (forall ((|x#0@@21| Int) (|y#0@@26| Int) ) (!  (=> (or (|Multisets.__default.AddNat#canCall| |x#0@@21| |y#0@@26|) (and (<= (LitInt 0) |x#0@@21|) (<= (LitInt 0) |y#0@@26|))) (= (Multisets.__default.AddNat |x#0@@21| |y#0@@26|) (+ |x#0@@21| |y#0@@26|))) :qid |Multiset.360:19| :skolemid |4007| :pattern ( (Multisets.__default.AddNat |x#0@@21| |y#0@@26|)) ))))
(assert  (=> true (forall ((|x#0@@22| Int) (|y#0@@27| Int) ) (!  (=> (or (|Multisets.__default.AddNat#canCall| (LitInt |x#0@@22|) (LitInt |y#0@@27|)) (and (<= (LitInt 0) |x#0@@22|) (<= (LitInt 0) |y#0@@27|))) (= (Multisets.__default.AddNat (LitInt |x#0@@22|) (LitInt |y#0@@27|)) (LitInt (+ |x#0@@22| |y#0@@27|)))) :qid |Multiset.360:19| :weight 3 :skolemid |4008| :pattern ( (Multisets.__default.AddNat (LitInt |x#0@@22|) (LitInt |y#0@@27|))) ))))
(assert (forall ((arg0@@534 T@U) (arg1@@306 T@U) (arg2@@213 T@U) ) (! (= (type (Multisets.__default.ValueMultisetFn arg0@@534 arg1@@306 arg2@@213)) HandleTypeType) :qid |funType:Multisets.__default.ValueMultisetFn| :pattern ( (Multisets.__default.ValueMultisetFn arg0@@534 arg1@@306 arg2@@213)) )))
(assert  (=> true (forall ((Multisets._default.ValueMultisetFn$A T@U) (Multisets._default.ValueMultisetFn$B T@U) (|m#0@@137| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A) TyType) (= (type Multisets._default.ValueMultisetFn$B) TyType)) (= (type |m#0@@137|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B |m#0@@137|) ($Is |m#0@@137| (TMap Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B)))) ($Is (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B |m#0@@137|) (Tclass._System.___hFunc1 Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B))) :qid |unknown.0:0| :skolemid |4009| :pattern ( (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B |m#0@@137|)) ))))
(assert (forall ((Multisets._default.ValueMultisetFn$A@@0 T@U) (Multisets._default.ValueMultisetFn$B@@0 T@U) (|m#0@@138| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A@@0) TyType) (= (type Multisets._default.ValueMultisetFn$B@@0) TyType)) (= (type |m#0@@138|) (MapType BoxType BoxType))) ($Is |m#0@@138| (TMap Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0))) (and (=> (|Multisets.__default.ValueMultisetFn#requires| Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0 |m#0@@138|) true) (=> true (|Multisets.__default.ValueMultisetFn#requires| Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0 |m#0@@138|)))) :qid |unknown.0:0| :skolemid |4010| :pattern ( (|Multisets.__default.ValueMultisetFn#requires| Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0 |m#0@@138|)) )))
(assert  (and (forall ((arg0@@535 T@U) ) (! (= (type (|lambda#661| arg0@@535)) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#661| :pattern ( (|lambda#661| arg0@@535)) )) (forall ((arg0@@536 T@U) (arg1@@307 T@U) ) (! (= (type (|lambda#662| arg0@@536 arg1@@307)) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#662| :pattern ( (|lambda#662| arg0@@536 arg1@@307)) ))))
(assert  (=> true (forall ((Multisets._default.ValueMultisetFn$A@@1 T@U) (Multisets._default.ValueMultisetFn$B@@1 T@U) (|m#0@@139| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A@@1) TyType) (= (type Multisets._default.ValueMultisetFn$B@@1) TyType)) (= (type |m#0@@139|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1 |m#0@@139|) ($Is |m#0@@139| (TMap Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1)))) (= (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1 |m#0@@139|) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#661| (|Map#Elements| |m#0@@139|)) (|lambda#662| Multisets._default.ValueMultisetFn$A@@1 (|Map#Domain| |m#0@@139|)) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))))) :qid |unknown.0:0| :skolemid |4011| :pattern ( (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1 |m#0@@139|)) ))))
(assert  (=> true (forall ((Multisets._default.ValueMultisetFn$A@@2 T@U) (Multisets._default.ValueMultisetFn$B@@2 T@U) (|m#0@@140| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A@@2) TyType) (= (type Multisets._default.ValueMultisetFn$B@@2) TyType)) (= (type |m#0@@140|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2 (Lit |m#0@@140|)) ($Is |m#0@@140| (TMap Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2)))) (= (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2 (Lit |m#0@@140|)) (Lit (AtLayer (|lambda#575| (Handle1 (|lambda#661| (|Map#Elements| (Lit |m#0@@140|))) (|lambda#662| Multisets._default.ValueMultisetFn$A@@2 (|Map#Domain| |m#0@@140|)) (|lambda#574| (SetRef_to_SetBox (|lambda#573| false))))) ($LS $LZ))))) :qid |unknown.0:0| :weight 3 :skolemid |4012| :pattern ( (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2 (Lit |m#0@@140|))) ))))
(assert (forall ((arg0@@537 T@U) (arg1@@308 T@U) (arg2@@214 T@U) ) (! (= (type (Multisets.__default.ValueMultiset arg0@@537 arg1@@308 arg2@@214)) (MapType0Type BoxType intType)) :qid |funType:Multisets.__default.ValueMultiset| :pattern ( (Multisets.__default.ValueMultiset arg0@@537 arg1@@308 arg2@@214)) )))
(assert  (=> true (forall ((Multisets._default.ValueMultiset$A T@U) (Multisets._default.ValueMultiset$B T@U) (|m#0@@141| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultiset$A) TyType) (= (type Multisets._default.ValueMultiset$B) TyType)) (= (type |m#0@@141|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultiset#canCall| Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B |m#0@@141|) ($Is |m#0@@141| (TMap Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B)))) ($Is (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B |m#0@@141|) (TMultiSet Multisets._default.ValueMultiset$B))) :qid |unknown.0:0| :skolemid |4013| :pattern ( (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B |m#0@@141|)) ))))
(assert (forall ((Multisets._default.ValueMultiset$A@@0 T@U) (Multisets._default.ValueMultiset$B@@0 T@U) ($Heap@@98 T@U) (|m#0@@142| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.ValueMultiset$A@@0) TyType) (= (type Multisets._default.ValueMultiset$B@@0) TyType)) (= (type $Heap@@98) (MapType0Type refType MapType1Type))) (= (type |m#0@@142|) (MapType BoxType BoxType))) (and ($IsGoodHeap $Heap@@98) ($Is |m#0@@142| (TMap Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0)))) (and (=> (|Multisets.__default.ValueMultiset#requires| Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0 |m#0@@142|) true) (=> true (|Multisets.__default.ValueMultiset#requires| Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0 |m#0@@142|)))) :qid |unknown.0:0| :skolemid |4014| :pattern ( (|Multisets.__default.ValueMultiset#requires| Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0 |m#0@@142|) ($IsGoodHeap $Heap@@98)) )))
(assert (= (type StartFuel_Multisets._default.Apply) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.ValueMultiset$A@@1 T@U) (Multisets._default.ValueMultiset$B@@1 T@U) ($Heap@@99 T@U) (|m#0@@143| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.ValueMultiset$A@@1) TyType) (= (type Multisets._default.ValueMultiset$B@@1) TyType)) (= (type $Heap@@99) (MapType0Type refType MapType1Type))) (= (type |m#0@@143|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultiset#canCall| Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@143|) (and ($IsGoodHeap $Heap@@99) ($Is |m#0@@143| (TMap Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1))))) (and (and (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@143|) (|Multisets.__default.Apply#canCall| Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 $Heap@@99 (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@143|) (|MultiSet#FromSet| (|Map#Domain| |m#0@@143|)))) (= (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@143|) (Multisets.__default.Apply Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 StartFuel_Multisets._default.Apply $Heap@@99 (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@143|) (|MultiSet#FromSet| (|Map#Domain| |m#0@@143|)))))) :qid |unknown.0:0| :skolemid |4015| :pattern ( (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@143|) ($IsGoodHeap $Heap@@99)) ))))
(assert  (=> true (forall ((Multisets._default.ValueMultiset$A@@2 T@U) (Multisets._default.ValueMultiset$B@@2 T@U) ($Heap@@100 T@U) (|m#0@@144| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.ValueMultiset$A@@2) TyType) (= (type Multisets._default.ValueMultiset$B@@2) TyType)) (= (type $Heap@@100) (MapType0Type refType MapType1Type))) (= (type |m#0@@144|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultiset#canCall| Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@144|)) (and ($IsGoodHeap $Heap@@100) ($Is |m#0@@144| (TMap Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2))))) (and (and (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@144|)) (|Multisets.__default.Apply#canCall| Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 $Heap@@100 (Lit (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@144|))) (|MultiSet#FromSet| (Lit (|Map#Domain| (Lit |m#0@@144|)))))) (= (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@144|)) (Multisets.__default.Apply Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 StartFuel_Multisets._default.Apply $Heap@@100 (Lit (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@144|))) (|MultiSet#FromSet| (Lit (|Map#Domain| (Lit |m#0@@144|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4016| :pattern ( (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@144|)) ($IsGoodHeap $Heap@@100)) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@538 T@T) (arg1@@309 T@T) ) (! (= (Ctor (MapType9Type arg0@@538 arg1@@309)) 28) :qid |ctor:MapType9Type| )) (forall ((arg0@@539 T@T) (arg1@@310 T@T) ) (! (= (MapType9TypeInv0 (MapType9Type arg0@@539 arg1@@310)) arg0@@539) :qid |typeInv:MapType9TypeInv0| :pattern ( (MapType9Type arg0@@539 arg1@@310)) ))) (forall ((arg0@@540 T@T) (arg1@@311 T@T) ) (! (= (MapType9TypeInv1 (MapType9Type arg0@@540 arg1@@311)) arg1@@311) :qid |typeInv:MapType9TypeInv1| :pattern ( (MapType9Type arg0@@540 arg1@@311)) ))) (forall ((arg0@@541 T@U) (arg1@@312 T@U) (arg2@@215 T@U) ) (! (let ((aVar1@@9 (MapType9TypeInv1 (type arg0@@541)))) (= (type (MapType9Select arg0@@541 arg1@@312 arg2@@215)) aVar1@@9)) :qid |funType:MapType9Select| :pattern ( (MapType9Select arg0@@541 arg1@@312 arg2@@215)) ))) (forall ((arg0@@542 T@U) (arg1@@313 T@U) (arg2@@216 T@U) (arg3@@145 T@U) ) (! (let ((aVar1@@10 (type arg3@@145))) (let ((aVar0@@7 (type arg1@@313))) (= (type (MapType9Store arg0@@542 arg1@@313 arg2@@216 arg3@@145)) (MapType9Type aVar0@@7 aVar1@@10)))) :qid |funType:MapType9Store| :pattern ( (MapType9Store arg0@@542 arg1@@313 arg2@@216 arg3@@145)) ))) (forall ((m@@78 T@U) (x0@@54 T@U) (x1@@48 T@U) (val@@55 T@U) ) (! (let ((aVar1@@11 (MapType9TypeInv1 (type m@@78)))) (=> (= (type val@@55) aVar1@@11) (= (MapType9Select (MapType9Store m@@78 x0@@54 x1@@48 val@@55) x0@@54 x1@@48) val@@55))) :qid |mapAx0:MapType9Select| :weight 0 ))) (and (and (forall ((val@@56 T@U) (m@@79 T@U) (x0@@55 T@U) (x1@@49 T@U) (y0@@45 T@U) (y1@@41 T@U) ) (!  (or (= x0@@55 y0@@45) (= (MapType9Select (MapType9Store m@@79 x0@@55 x1@@49 val@@56) y0@@45 y1@@41) (MapType9Select m@@79 y0@@45 y1@@41))) :qid |mapAx1:MapType9Select:0| :weight 0 )) (forall ((val@@57 T@U) (m@@80 T@U) (x0@@56 T@U) (x1@@50 T@U) (y0@@46 T@U) (y1@@42 T@U) ) (!  (or (= x1@@50 y1@@42) (= (MapType9Select (MapType9Store m@@80 x0@@56 x1@@50 val@@57) y0@@46 y1@@42) (MapType9Select m@@80 y0@@46 y1@@42))) :qid |mapAx1:MapType9Select:1| :weight 0 ))) (forall ((val@@58 T@U) (m@@81 T@U) (x0@@57 T@U) (x1@@51 T@U) (y0@@47 T@U) (y1@@43 T@U) ) (!  (or true (= (MapType9Select (MapType9Store m@@81 x0@@57 x1@@51 val@@58) y0@@47 y1@@43) (MapType9Select m@@81 y0@@47 y1@@43))) :qid |mapAx2:MapType9Select| :weight 0 )))) (forall ((arg0@@543 T@U) (arg1@@314 T@U) (arg2@@217 T@U) (arg3@@146 Bool) ) (! (= (type (|lambda#0| arg0@@543 arg1@@314 arg2@@217 arg3@@146)) (MapType9Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@543 arg1@@314 arg2@@217 arg3@@146)) ))))
(assert (forall (($o@@54 T@U) ($f@@10 T@U) (|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3| Bool) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type $o@@54) refType) (= (type $f@@10) (FieldType alpha@@17))) (= (type |l#0@@1|) refType)) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@1| |l#3|) $o@@54 $f@@10))  (=> (and (not (= $o@@54 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@54) |l#2@@1|))) |l#3|)))) :qid |BucketsL.33:12| :skolemid |4017| :pattern ( (MapType9Select (|lambda#0| |l#0@@1| |l#1@@1| |l#2@@1| |l#3|) $o@@54 $f@@10)) )))
(assert (forall ((arg0@@544 T@U) (arg1@@315 T@U) (arg2@@218 T@U) (arg3@@147 Bool) ) (! (= (type (|lambda#1| arg0@@544 arg1@@315 arg2@@218 arg3@@147)) (MapType9Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@544 arg1@@315 arg2@@218 arg3@@147)) )))
(assert (forall (($o@@55 T@U) ($f@@11 T@U) (|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@0| Bool) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type $o@@55) refType) (= (type $f@@11) (FieldType alpha@@18))) (= (type |l#0@@2|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#1| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@0|) $o@@55 $f@@11))  (=> (and (not (= $o@@55 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@55) |l#2@@2|))) |l#3@@0|)))) :qid |BucketsL.33:12| :skolemid |4018| :pattern ( (MapType9Select (|lambda#1| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@0|) $o@@55 $f@@11)) )))
(assert (forall ((arg0@@545 T@U) (arg1@@316 T@U) (arg2@@219 T@U) (arg3@@148 Bool) ) (! (= (type (|lambda#2| arg0@@545 arg1@@316 arg2@@219 arg3@@148)) (MapType9Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@545 arg1@@316 arg2@@219 arg3@@148)) )))
(assert (forall (($o@@56 T@U) ($f@@12 T@U) (|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@1| Bool) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type $o@@56) refType) (= (type $f@@12) (FieldType alpha@@19))) (= (type |l#0@@3|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#2| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@1|) $o@@56 $f@@12))  (=> (and (not (= $o@@56 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@56) |l#2@@3|))) |l#3@@1|)))) :qid |BucketsL.44:12| :skolemid |4019| :pattern ( (MapType9Select (|lambda#2| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@1|) $o@@56 $f@@12)) )))
(assert (forall ((arg0@@546 T@U) (arg1@@317 T@U) (arg2@@220 T@U) (arg3@@149 Bool) ) (! (= (type (|lambda#3| arg0@@546 arg1@@317 arg2@@220 arg3@@149)) (MapType9Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@546 arg1@@317 arg2@@220 arg3@@149)) )))
(assert (forall (($o@@57 T@U) ($f@@13 T@U) (|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type $o@@57) refType) (= (type $f@@13) (FieldType alpha@@20))) (= (type |l#0@@4|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#3| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@2|) $o@@57 $f@@13))  (=> (and (not (= $o@@57 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@57) |l#2@@4|))) |l#3@@2|)))) :qid |BucketsL.44:12| :skolemid |4020| :pattern ( (MapType9Select (|lambda#3| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@2|) $o@@57 $f@@13)) )))
(assert (forall ((arg0@@547 T@U) (arg1@@318 T@U) (arg2@@221 T@U) (arg3@@150 Bool) ) (! (= (type (|lambda#4| arg0@@547 arg1@@318 arg2@@221 arg3@@150)) (MapType9Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@547 arg1@@318 arg2@@221 arg3@@150)) )))
(assert (forall (($o@@58 T@U) ($f@@14 T@U) (|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@3| Bool) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type $o@@58) refType) (= (type $f@@14) (FieldType alpha@@21))) (= (type |l#0@@5|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#4| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@3|) $o@@58 $f@@14))  (=> (and (not (= $o@@58 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@58) |l#2@@5|))) |l#3@@3|)))) :qid |BucketsL.55:22| :skolemid |4021| :pattern ( (MapType9Select (|lambda#4| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@3|) $o@@58 $f@@14)) )))
(assert (forall ((arg0@@548 T@U) (arg1@@319 T@U) (arg2@@222 T@U) (arg3@@151 Bool) ) (! (= (type (|lambda#5| arg0@@548 arg1@@319 arg2@@222 arg3@@151)) (MapType9Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@548 arg1@@319 arg2@@222 arg3@@151)) )))
(assert (forall (($o@@59 T@U) ($f@@15 T@U) (|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@4| Bool) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type $o@@59) refType) (= (type $f@@15) (FieldType alpha@@22))) (= (type |l#0@@6|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#5| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@4|) $o@@59 $f@@15))  (=> (and (not (= $o@@59 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@59) |l#2@@6|))) |l#3@@4|)))) :qid |BucketsL.55:22| :skolemid |4022| :pattern ( (MapType9Select (|lambda#5| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@4|) $o@@59 $f@@15)) )))
(assert (forall ((arg0@@549 T@U) (arg1@@320 T@U) (arg2@@223 T@U) (arg3@@152 Bool) ) (! (= (type (|lambda#6| arg0@@549 arg1@@320 arg2@@223 arg3@@152)) (MapType9Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@549 arg1@@320 arg2@@223 arg3@@152)) )))
(assert (forall (($o@@60 T@U) ($f@@16 T@U) (|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type $o@@60) refType) (= (type $f@@16) (FieldType alpha@@23))) (= (type |l#0@@7|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#6| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@5|) $o@@60 $f@@16))  (=> (and (not (= $o@@60 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@60) |l#2@@7|))) |l#3@@5|)))) :qid |BucketsL.69:9| :skolemid |4023| :pattern ( (MapType9Select (|lambda#6| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@5|) $o@@60 $f@@16)) )))
(assert (forall ((arg0@@550 T@U) (arg1@@321 T@U) (arg2@@224 T@U) (arg3@@153 Bool) ) (! (= (type (|lambda#7| arg0@@550 arg1@@321 arg2@@224 arg3@@153)) (MapType9Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@550 arg1@@321 arg2@@224 arg3@@153)) )))
(assert (forall (($o@@61 T@U) ($f@@17 T@U) (|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@6| Bool) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type $o@@61) refType) (= (type $f@@17) (FieldType alpha@@24))) (= (type |l#0@@8|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#7| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@6|) $o@@61 $f@@17))  (=> (and (not (= $o@@61 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@61) |l#2@@8|))) |l#3@@6|)))) :qid |BucketsL.69:9| :skolemid |4024| :pattern ( (MapType9Select (|lambda#7| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@6|) $o@@61 $f@@17)) )))
(assert (forall ((arg0@@551 T@U) (arg1@@322 T@U) (arg2@@225 T@U) (arg3@@154 Bool) ) (! (= (type (|lambda#8| arg0@@551 arg1@@322 arg2@@225 arg3@@154)) (MapType9Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@551 arg1@@322 arg2@@225 arg3@@154)) )))
(assert (forall (($o@@62 T@U) ($f@@18 T@U) (|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@7| Bool) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type $o@@62) refType) (= (type $f@@18) (FieldType alpha@@25))) (= (type |l#0@@9|) refType)) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#8| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@7|) $o@@62 $f@@18))  (=> (and (not (= $o@@62 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@62) |l#2@@9|))) |l#3@@7|)))) :qid |BucketsL.86:12| :skolemid |4025| :pattern ( (MapType9Select (|lambda#8| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@7|) $o@@62 $f@@18)) )))
(assert (forall ((arg0@@552 T@U) (arg1@@323 T@U) (arg2@@226 T@U) (arg3@@155 Bool) ) (! (= (type (|lambda#9| arg0@@552 arg1@@323 arg2@@226 arg3@@155)) (MapType9Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@552 arg1@@323 arg2@@226 arg3@@155)) )))
(assert (forall (($o@@63 T@U) ($f@@19 T@U) (|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@8| Bool) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type $o@@63) refType) (= (type $f@@19) (FieldType alpha@@26))) (= (type |l#0@@10|) refType)) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#9| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@8|) $o@@63 $f@@19))  (=> (and (not (= $o@@63 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@63) |l#2@@10|))) |l#3@@8|)))) :qid |BucketsL.86:12| :skolemid |4026| :pattern ( (MapType9Select (|lambda#9| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@8|) $o@@63 $f@@19)) )))
(assert (forall ((arg0@@553 T@U) (arg1@@324 T@U) (arg2@@227 T@U) (arg3@@156 Bool) ) (! (= (type (|lambda#10| arg0@@553 arg1@@324 arg2@@227 arg3@@156)) (MapType9Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@553 arg1@@324 arg2@@227 arg3@@156)) )))
(assert (forall (($o@@64 T@U) ($f@@20 T@U) (|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@9| Bool) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type $o@@64) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type |l#0@@11|) refType)) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#10| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@9|) $o@@64 $f@@20))  (=> (and (not (= $o@@64 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@64) |l#2@@11|))) |l#3@@9|)))) :qid |BucketsL.92:9| :skolemid |4027| :pattern ( (MapType9Select (|lambda#10| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@9|) $o@@64 $f@@20)) )))
(assert (forall ((arg0@@554 T@U) (arg1@@325 T@U) (arg2@@228 T@U) (arg3@@157 Bool) ) (! (= (type (|lambda#11| arg0@@554 arg1@@325 arg2@@228 arg3@@157)) (MapType9Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@554 arg1@@325 arg2@@228 arg3@@157)) )))
(assert (forall (($o@@65 T@U) ($f@@21 T@U) (|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@10| Bool) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type $o@@65) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@12|) refType)) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#11| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@10|) $o@@65 $f@@21))  (=> (and (not (= $o@@65 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@65) |l#2@@12|))) |l#3@@10|)))) :qid |BucketsL.92:9| :skolemid |4028| :pattern ( (MapType9Select (|lambda#11| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@10|) $o@@65 $f@@21)) )))
(assert (forall ((arg0@@555 T@U) (arg1@@326 T@U) (arg2@@229 T@U) (arg3@@158 Bool) ) (! (= (type (|lambda#12| arg0@@555 arg1@@326 arg2@@229 arg3@@158)) (MapType9Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@555 arg1@@326 arg2@@229 arg3@@158)) )))
(assert (forall (($o@@66 T@U) ($f@@22 T@U) (|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@11| Bool) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@66) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@13|) refType)) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#12| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@11|) $o@@66 $f@@22))  (=> (and (not (= $o@@66 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@66) |l#2@@13|))) |l#3@@11|)))) :qid |BucketsL.108:9| :skolemid |4029| :pattern ( (MapType9Select (|lambda#12| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@11|) $o@@66 $f@@22)) )))
(assert (forall ((arg0@@556 T@U) (arg1@@327 T@U) (arg2@@230 T@U) (arg3@@159 Bool) ) (! (= (type (|lambda#13| arg0@@556 arg1@@327 arg2@@230 arg3@@159)) (MapType9Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@556 arg1@@327 arg2@@230 arg3@@159)) )))
(assert (forall (($o@@67 T@U) ($f@@23 T@U) (|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@12| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@67) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@14|) refType)) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#13| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@12|) $o@@67 $f@@23))  (=> (and (not (= $o@@67 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@67) |l#2@@14|))) |l#3@@12|)))) :qid |BucketsL.108:9| :skolemid |4030| :pattern ( (MapType9Select (|lambda#13| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@12|) $o@@67 $f@@23)) )))
(assert (forall ((arg0@@557 T@U) (arg1@@328 T@U) (arg2@@231 T@U) (arg3@@160 Bool) ) (! (= (type (|lambda#14| arg0@@557 arg1@@328 arg2@@231 arg3@@160)) (MapType9Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@557 arg1@@328 arg2@@231 arg3@@160)) )))
(assert (forall (($o@@68 T@U) ($f@@24 T@U) (|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@13| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@68) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@15|) refType)) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#14| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@13|) $o@@68 $f@@24))  (=> (and (not (= $o@@68 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@68) |l#2@@15|))) |l#3@@13|)))) :qid |BucketsL.123:9| :skolemid |4031| :pattern ( (MapType9Select (|lambda#14| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@13|) $o@@68 $f@@24)) )))
(assert (forall ((arg0@@558 T@U) (arg1@@329 T@U) (arg2@@232 T@U) (arg3@@161 Bool) ) (! (= (type (|lambda#15| arg0@@558 arg1@@329 arg2@@232 arg3@@161)) (MapType9Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@558 arg1@@329 arg2@@232 arg3@@161)) )))
(assert (forall (($o@@69 T@U) ($f@@25 T@U) (|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@14| Bool) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type $o@@69) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@16|) refType)) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#15| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@14|) $o@@69 $f@@25))  (=> (and (not (= $o@@69 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@69) |l#2@@16|))) |l#3@@14|)))) :qid |BucketsL.123:9| :skolemid |4032| :pattern ( (MapType9Select (|lambda#15| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@14|) $o@@69 $f@@25)) )))
(assert (forall ((arg0@@559 T@U) (arg1@@330 T@U) (arg2@@233 T@U) (arg3@@162 Bool) ) (! (= (type (|lambda#16| arg0@@559 arg1@@330 arg2@@233 arg3@@162)) (MapType9Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@559 arg1@@330 arg2@@233 arg3@@162)) )))
(assert (forall (($o@@70 T@U) ($f@@26 T@U) (|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@15| Bool) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type $o@@70) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@17|) refType)) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#16| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@15|) $o@@70 $f@@26))  (=> (and (not (= $o@@70 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@70) |l#2@@17|))) |l#3@@15|)))) :qid |BucketsL.135:13| :skolemid |4033| :pattern ( (MapType9Select (|lambda#16| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@15|) $o@@70 $f@@26)) )))
(assert (forall ((arg0@@560 T@U) (arg1@@331 T@U) (arg2@@234 T@U) (arg3@@163 Bool) ) (! (= (type (|lambda#17| arg0@@560 arg1@@331 arg2@@234 arg3@@163)) (MapType9Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@560 arg1@@331 arg2@@234 arg3@@163)) )))
(assert (forall (($o@@71 T@U) ($f@@27 T@U) (|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@16| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@71) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@18|) refType)) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#17| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@16|) $o@@71 $f@@27))  (=> (and (not (= $o@@71 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@71) |l#2@@18|))) |l#3@@16|)))) :qid |BucketsL.135:13| :skolemid |4034| :pattern ( (MapType9Select (|lambda#17| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@16|) $o@@71 $f@@27)) )))
(assert (forall ((arg0@@561 T@U) (arg1@@332 T@U) (arg2@@235 T@U) (arg3@@164 Bool) ) (! (= (type (|lambda#18| arg0@@561 arg1@@332 arg2@@235 arg3@@164)) (MapType9Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@561 arg1@@332 arg2@@235 arg3@@164)) )))
(assert (forall (($o@@72 T@U) ($f@@28 T@U) (|l#0@@19| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@17| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@72) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@19|) refType)) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#18| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@17|) $o@@72 $f@@28))  (=> (and (not (= $o@@72 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@72) |l#2@@19|))) |l#3@@17|)))) :qid |BucketsL.140:13| :skolemid |4035| :pattern ( (MapType9Select (|lambda#18| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@17|) $o@@72 $f@@28)) )))
(assert (forall ((arg0@@562 T@U) (arg1@@333 T@U) (arg2@@236 T@U) (arg3@@165 Bool) ) (! (= (type (|lambda#19| arg0@@562 arg1@@333 arg2@@236 arg3@@165)) (MapType9Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@562 arg1@@333 arg2@@236 arg3@@165)) )))
(assert (forall (($o@@73 T@U) ($f@@29 T@U) (|l#0@@20| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@18| Bool) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type $o@@73) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type |l#0@@20|) refType)) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#19| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@18|) $o@@73 $f@@29))  (=> (and (not (= $o@@73 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@73) |l#2@@20|))) |l#3@@18|)))) :qid |BucketsL.140:13| :skolemid |4036| :pattern ( (MapType9Select (|lambda#19| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@18|) $o@@73 $f@@29)) )))
(assert (forall ((arg0@@563 T@U) (arg1@@334 T@U) (arg2@@237 T@U) (arg3@@166 Bool) ) (! (= (type (|lambda#20| arg0@@563 arg1@@334 arg2@@237 arg3@@166)) (MapType9Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@563 arg1@@334 arg2@@237 arg3@@166)) )))
(assert (forall (($o@@74 T@U) ($f@@30 T@U) (|l#0@@21| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@19| Bool) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type $o@@74) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type |l#0@@21|) refType)) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#20| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@19|) $o@@74 $f@@30))  (=> (and (not (= $o@@74 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@74) |l#2@@21|))) |l#3@@19|)))) :qid |BucketsL.146:13| :skolemid |4037| :pattern ( (MapType9Select (|lambda#20| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@19|) $o@@74 $f@@30)) )))
(assert (forall ((arg0@@564 T@U) (arg1@@335 T@U) (arg2@@238 T@U) (arg3@@167 Bool) ) (! (= (type (|lambda#21| arg0@@564 arg1@@335 arg2@@238 arg3@@167)) (MapType9Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@564 arg1@@335 arg2@@238 arg3@@167)) )))
(assert (forall (($o@@75 T@U) ($f@@31 T@U) (|l#0@@22| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@20| Bool) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type $o@@75) refType) (= (type $f@@31) (FieldType alpha@@38))) (= (type |l#0@@22|) refType)) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#21| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@20|) $o@@75 $f@@31))  (=> (and (not (= $o@@75 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@75) |l#2@@22|))) |l#3@@20|)))) :qid |BucketsL.146:13| :skolemid |4038| :pattern ( (MapType9Select (|lambda#21| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@20|) $o@@75 $f@@31)) )))
(assert (forall ((arg0@@565 T@U) (arg1@@336 T@U) (arg2@@239 T@U) (arg3@@168 Bool) ) (! (= (type (|lambda#22| arg0@@565 arg1@@336 arg2@@239 arg3@@168)) (MapType9Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@565 arg1@@336 arg2@@239 arg3@@168)) )))
(assert (forall (($o@@76 T@U) ($f@@32 T@U) (|l#0@@23| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@21| Bool) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type $o@@76) refType) (= (type $f@@32) (FieldType alpha@@39))) (= (type |l#0@@23|) refType)) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#22| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@21|) $o@@76 $f@@32))  (=> (and (not (= $o@@76 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@76) |l#2@@23|))) |l#3@@21|)))) :qid |BucketsL.152:13| :skolemid |4039| :pattern ( (MapType9Select (|lambda#22| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@21|) $o@@76 $f@@32)) )))
(assert (forall ((arg0@@566 T@U) (arg1@@337 T@U) (arg2@@240 T@U) (arg3@@169 Bool) ) (! (= (type (|lambda#23| arg0@@566 arg1@@337 arg2@@240 arg3@@169)) (MapType9Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@566 arg1@@337 arg2@@240 arg3@@169)) )))
(assert (forall (($o@@77 T@U) ($f@@33 T@U) (|l#0@@24| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@22| Bool) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type $o@@77) refType) (= (type $f@@33) (FieldType alpha@@40))) (= (type |l#0@@24|) refType)) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#23| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@22|) $o@@77 $f@@33))  (=> (and (not (= $o@@77 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@77) |l#2@@24|))) |l#3@@22|)))) :qid |BucketsL.152:13| :skolemid |4040| :pattern ( (MapType9Select (|lambda#23| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@22|) $o@@77 $f@@33)) )))
(assert (forall ((arg0@@567 T@U) (arg1@@338 T@U) (arg2@@241 T@U) (arg3@@170 Bool) ) (! (= (type (|lambda#24| arg0@@567 arg1@@338 arg2@@241 arg3@@170)) (MapType9Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@567 arg1@@338 arg2@@241 arg3@@170)) )))
(assert (forall (($o@@78 T@U) ($f@@34 T@U) (|l#0@@25| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@23| Bool) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type $o@@78) refType) (= (type $f@@34) (FieldType alpha@@41))) (= (type |l#0@@25|) refType)) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#24| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@23|) $o@@78 $f@@34))  (=> (and (not (= $o@@78 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@78) |l#2@@25|))) |l#3@@23|)))) :qid |BucketsL.159:13| :skolemid |4041| :pattern ( (MapType9Select (|lambda#24| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@23|) $o@@78 $f@@34)) )))
(assert (forall ((arg0@@568 T@U) (arg1@@339 T@U) (arg2@@242 T@U) (arg3@@171 Bool) ) (! (= (type (|lambda#25| arg0@@568 arg1@@339 arg2@@242 arg3@@171)) (MapType9Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@568 arg1@@339 arg2@@242 arg3@@171)) )))
(assert (forall (($o@@79 T@U) ($f@@35 T@U) (|l#0@@26| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@24| Bool) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type $o@@79) refType) (= (type $f@@35) (FieldType alpha@@42))) (= (type |l#0@@26|) refType)) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#25| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@24|) $o@@79 $f@@35))  (=> (and (not (= $o@@79 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@79) |l#2@@26|))) |l#3@@24|)))) :qid |BucketsL.159:13| :skolemid |4042| :pattern ( (MapType9Select (|lambda#25| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@24|) $o@@79 $f@@35)) )))
(assert (forall ((arg0@@569 T@U) (arg1@@340 T@U) (arg2@@243 T@U) (arg3@@172 Bool) ) (! (= (type (|lambda#26| arg0@@569 arg1@@340 arg2@@243 arg3@@172)) (MapType9Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@569 arg1@@340 arg2@@243 arg3@@172)) )))
(assert (forall (($o@@80 T@U) ($f@@36 T@U) (|l#0@@27| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@25| Bool) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type $o@@80) refType) (= (type $f@@36) (FieldType alpha@@43))) (= (type |l#0@@27|) refType)) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#26| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@25|) $o@@80 $f@@36))  (=> (and (not (= $o@@80 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@80) |l#2@@27|))) |l#3@@25|)))) :qid |BucketsL.164:9| :skolemid |4043| :pattern ( (MapType9Select (|lambda#26| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@25|) $o@@80 $f@@36)) )))
(assert (forall ((arg0@@570 T@U) (arg1@@341 T@U) (arg2@@244 T@U) (arg3@@173 Bool) ) (! (= (type (|lambda#27| arg0@@570 arg1@@341 arg2@@244 arg3@@173)) (MapType9Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@570 arg1@@341 arg2@@244 arg3@@173)) )))
(assert (forall (($o@@81 T@U) ($f@@37 T@U) (|l#0@@28| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@26| Bool) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type $o@@81) refType) (= (type $f@@37) (FieldType alpha@@44))) (= (type |l#0@@28|) refType)) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#27| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@26|) $o@@81 $f@@37))  (=> (and (not (= $o@@81 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@81) |l#2@@28|))) |l#3@@26|)))) :qid |BucketsL.181:13| :skolemid |4044| :pattern ( (MapType9Select (|lambda#27| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@26|) $o@@81 $f@@37)) )))
(assert (forall ((arg0@@571 T@U) (arg1@@342 T@U) (arg2@@245 T@U) (arg3@@174 Bool) ) (! (= (type (|lambda#28| arg0@@571 arg1@@342 arg2@@245 arg3@@174)) (MapType9Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@571 arg1@@342 arg2@@245 arg3@@174)) )))
(assert (forall (($o@@82 T@U) ($f@@38 T@U) (|l#0@@29| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@27| Bool) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type $o@@82) refType) (= (type $f@@38) (FieldType alpha@@45))) (= (type |l#0@@29|) refType)) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#28| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@27|) $o@@82 $f@@38))  (=> (and (not (= $o@@82 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@82) |l#2@@29|))) |l#3@@27|)))) :qid |BucketsL.181:13| :skolemid |4045| :pattern ( (MapType9Select (|lambda#28| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@27|) $o@@82 $f@@38)) )))
(assert (forall ((arg0@@572 T@U) (arg1@@343 T@U) (arg2@@246 T@U) (arg3@@175 Bool) ) (! (= (type (|lambda#29| arg0@@572 arg1@@343 arg2@@246 arg3@@175)) (MapType9Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@572 arg1@@343 arg2@@246 arg3@@175)) )))
(assert (forall (($o@@83 T@U) ($f@@39 T@U) (|l#0@@30| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@28| Bool) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type $o@@83) refType) (= (type $f@@39) (FieldType alpha@@46))) (= (type |l#0@@30|) refType)) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#29| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@28|) $o@@83 $f@@39))  (=> (and (not (= $o@@83 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@83) |l#2@@30|))) |l#3@@28|)))) :qid |BucketsL.186:12| :skolemid |4046| :pattern ( (MapType9Select (|lambda#29| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@28|) $o@@83 $f@@39)) )))
(assert (forall ((arg0@@573 T@U) (arg1@@344 T@U) (arg2@@247 T@U) (arg3@@176 Bool) ) (! (= (type (|lambda#30| arg0@@573 arg1@@344 arg2@@247 arg3@@176)) (MapType9Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@573 arg1@@344 arg2@@247 arg3@@176)) )))
(assert (forall (($o@@84 T@U) ($f@@40 T@U) (|l#0@@31| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@29| Bool) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type $o@@84) refType) (= (type $f@@40) (FieldType alpha@@47))) (= (type |l#0@@31|) refType)) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#30| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@29|) $o@@84 $f@@40))  (=> (and (not (= $o@@84 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@84) |l#2@@31|))) |l#3@@29|)))) :qid |BucketsL.186:12| :skolemid |4047| :pattern ( (MapType9Select (|lambda#30| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@29|) $o@@84 $f@@40)) )))
(assert (forall ((arg0@@574 T@U) (arg1@@345 T@U) (arg2@@248 T@U) (arg3@@177 Bool) ) (! (= (type (|lambda#31| arg0@@574 arg1@@345 arg2@@248 arg3@@177)) (MapType9Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@574 arg1@@345 arg2@@248 arg3@@177)) )))
(assert (forall (($o@@85 T@U) ($f@@41 T@U) (|l#0@@32| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@30| Bool) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type $o@@85) refType) (= (type $f@@41) (FieldType alpha@@48))) (= (type |l#0@@32|) refType)) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#31| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@30|) $o@@85 $f@@41))  (=> (and (not (= $o@@85 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@85) |l#2@@32|))) |l#3@@30|)))) :qid |BucketsL.200:9| :skolemid |4048| :pattern ( (MapType9Select (|lambda#31| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@30|) $o@@85 $f@@41)) )))
(assert (forall ((arg0@@575 T@U) (arg1@@346 T@U) (arg2@@249 T@U) (arg3@@178 Bool) ) (! (= (type (|lambda#32| arg0@@575 arg1@@346 arg2@@249 arg3@@178)) (MapType9Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@575 arg1@@346 arg2@@249 arg3@@178)) )))
(assert (forall (($o@@86 T@U) ($f@@42 T@U) (|l#0@@33| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@31| Bool) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type $o@@86) refType) (= (type $f@@42) (FieldType alpha@@49))) (= (type |l#0@@33|) refType)) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#32| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@31|) $o@@86 $f@@42))  (=> (and (not (= $o@@86 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@86) |l#2@@33|))) |l#3@@31|)))) :qid |BucketsL.220:9| :skolemid |4049| :pattern ( (MapType9Select (|lambda#32| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@31|) $o@@86 $f@@42)) )))
(assert (forall ((arg0@@576 T@U) (arg1@@347 T@U) (arg2@@250 T@U) (arg3@@179 Bool) ) (! (= (type (|lambda#33| arg0@@576 arg1@@347 arg2@@250 arg3@@179)) (MapType9Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@576 arg1@@347 arg2@@250 arg3@@179)) )))
(assert (forall (($o@@87 T@U) ($f@@43 T@U) (|l#0@@34| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@32| Bool) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type $o@@87) refType) (= (type $f@@43) (FieldType alpha@@50))) (= (type |l#0@@34|) refType)) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#33| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@32|) $o@@87 $f@@43))  (=> (and (not (= $o@@87 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@87) |l#2@@34|))) |l#3@@32|)))) :qid |BucketsL.228:22| :skolemid |4050| :pattern ( (MapType9Select (|lambda#33| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@32|) $o@@87 $f@@43)) )))
(assert (forall ((arg0@@577 T@U) (arg1@@348 T@U) (arg2@@251 T@U) (arg3@@180 Bool) ) (! (= (type (|lambda#34| arg0@@577 arg1@@348 arg2@@251 arg3@@180)) (MapType9Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@577 arg1@@348 arg2@@251 arg3@@180)) )))
(assert (forall (($o@@88 T@U) ($f@@44 T@U) (|l#0@@35| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@33| Bool) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type $o@@88) refType) (= (type $f@@44) (FieldType alpha@@51))) (= (type |l#0@@35|) refType)) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#34| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@33|) $o@@88 $f@@44))  (=> (and (not (= $o@@88 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@88) |l#2@@35|))) |l#3@@33|)))) :qid |BucketsL.228:22| :skolemid |4051| :pattern ( (MapType9Select (|lambda#34| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@33|) $o@@88 $f@@44)) )))
(assert (forall ((arg0@@578 T@U) (arg1@@349 T@U) (arg2@@252 T@U) (arg3@@181 Bool) ) (! (= (type (|lambda#35| arg0@@578 arg1@@349 arg2@@252 arg3@@181)) (MapType9Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@578 arg1@@349 arg2@@252 arg3@@181)) )))
(assert (forall (($o@@89 T@U) ($f@@45 T@U) (|l#0@@36| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@34| Bool) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type $o@@89) refType) (= (type $f@@45) (FieldType alpha@@52))) (= (type |l#0@@36|) refType)) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#35| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@34|) $o@@89 $f@@45))  (=> (and (not (= $o@@89 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@89) |l#2@@36|))) |l#3@@34|)))) :qid |BucketsL.243:12| :skolemid |4052| :pattern ( (MapType9Select (|lambda#35| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@34|) $o@@89 $f@@45)) )))
(assert (forall ((arg0@@579 T@U) (arg1@@350 T@U) (arg2@@253 T@U) (arg3@@182 Bool) ) (! (= (type (|lambda#36| arg0@@579 arg1@@350 arg2@@253 arg3@@182)) (MapType9Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@579 arg1@@350 arg2@@253 arg3@@182)) )))
(assert (forall (($o@@90 T@U) ($f@@46 T@U) (|l#0@@37| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@35| Bool) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type $o@@90) refType) (= (type $f@@46) (FieldType alpha@@53))) (= (type |l#0@@37|) refType)) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#36| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@35|) $o@@90 $f@@46))  (=> (and (not (= $o@@90 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@90) |l#2@@37|))) |l#3@@35|)))) :qid |BucketsL.243:12| :skolemid |4053| :pattern ( (MapType9Select (|lambda#36| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@35|) $o@@90 $f@@46)) )))
(assert (forall ((arg0@@580 T@U) (arg1@@351 T@U) (arg2@@254 T@U) (arg3@@183 Bool) ) (! (= (type (|lambda#37| arg0@@580 arg1@@351 arg2@@254 arg3@@183)) (MapType9Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@580 arg1@@351 arg2@@254 arg3@@183)) )))
(assert (forall (($o@@91 T@U) ($f@@47 T@U) (|l#0@@38| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@36| Bool) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type $o@@91) refType) (= (type $f@@47) (FieldType alpha@@54))) (= (type |l#0@@38|) refType)) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#37| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@36|) $o@@91 $f@@47))  (=> (and (not (= $o@@91 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@91) |l#2@@38|))) |l#3@@36|)))) :qid |BucketsL.255:12| :skolemid |4054| :pattern ( (MapType9Select (|lambda#37| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@36|) $o@@91 $f@@47)) )))
(assert (forall ((arg0@@581 T@U) (arg1@@352 T@U) (arg2@@255 T@U) (arg3@@184 Bool) ) (! (= (type (|lambda#38| arg0@@581 arg1@@352 arg2@@255 arg3@@184)) (MapType9Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@581 arg1@@352 arg2@@255 arg3@@184)) )))
(assert (forall (($o@@92 T@U) ($f@@48 T@U) (|l#0@@39| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@37| Bool) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type $o@@92) refType) (= (type $f@@48) (FieldType alpha@@55))) (= (type |l#0@@39|) refType)) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#38| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@37|) $o@@92 $f@@48))  (=> (and (not (= $o@@92 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@92) |l#2@@39|))) |l#3@@37|)))) :qid |BucketsL.255:12| :skolemid |4055| :pattern ( (MapType9Select (|lambda#38| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@37|) $o@@92 $f@@48)) )))
(assert (forall ((arg0@@582 T@U) (arg1@@353 T@U) (arg2@@256 T@U) (arg3@@185 Bool) ) (! (= (type (|lambda#39| arg0@@582 arg1@@353 arg2@@256 arg3@@185)) (MapType9Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@582 arg1@@353 arg2@@256 arg3@@185)) )))
(assert (forall (($o@@93 T@U) ($f@@49 T@U) (|l#0@@40| T@U) (|l#1@@40| T@U) (|l#2@@40| T@U) (|l#3@@38| Bool) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type $o@@93) refType) (= (type $f@@49) (FieldType alpha@@56))) (= (type |l#0@@40|) refType)) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#39| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@38|) $o@@93 $f@@49))  (=> (and (not (= $o@@93 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@93) |l#2@@40|))) |l#3@@38|)))) :qid |BucketsL.266:12| :skolemid |4056| :pattern ( (MapType9Select (|lambda#39| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@38|) $o@@93 $f@@49)) )))
(assert (forall ((arg0@@583 T@U) (arg1@@354 T@U) (arg2@@257 T@U) (arg3@@186 Bool) ) (! (= (type (|lambda#40| arg0@@583 arg1@@354 arg2@@257 arg3@@186)) (MapType9Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@583 arg1@@354 arg2@@257 arg3@@186)) )))
(assert (forall (($o@@94 T@U) ($f@@50 T@U) (|l#0@@41| T@U) (|l#1@@41| T@U) (|l#2@@41| T@U) (|l#3@@39| Bool) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type $o@@94) refType) (= (type $f@@50) (FieldType alpha@@57))) (= (type |l#0@@41|) refType)) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#40| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@39|) $o@@94 $f@@50))  (=> (and (not (= $o@@94 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@94) |l#2@@41|))) |l#3@@39|)))) :qid |BucketsL.266:12| :skolemid |4057| :pattern ( (MapType9Select (|lambda#40| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@39|) $o@@94 $f@@50)) )))
(assert (forall ((arg0@@584 T@U) (arg1@@355 T@U) (arg2@@258 T@U) (arg3@@187 Bool) ) (! (= (type (|lambda#41| arg0@@584 arg1@@355 arg2@@258 arg3@@187)) (MapType9Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@584 arg1@@355 arg2@@258 arg3@@187)) )))
(assert (forall (($o@@95 T@U) ($f@@51 T@U) (|l#0@@42| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@40| Bool) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type $o@@95) refType) (= (type $f@@51) (FieldType alpha@@58))) (= (type |l#0@@42|) refType)) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#41| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@40|) $o@@95 $f@@51))  (=> (and (not (= $o@@95 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@95) |l#2@@42|))) |l#3@@40|)))) :qid |BucketsL.275:9| :skolemid |4058| :pattern ( (MapType9Select (|lambda#41| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@40|) $o@@95 $f@@51)) )))
(assert (forall ((arg0@@585 T@U) (arg1@@356 T@U) (arg2@@259 T@U) (arg3@@188 Bool) ) (! (= (type (|lambda#42| arg0@@585 arg1@@356 arg2@@259 arg3@@188)) (MapType9Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@585 arg1@@356 arg2@@259 arg3@@188)) )))
(assert (forall (($o@@96 T@U) ($f@@52 T@U) (|l#0@@43| T@U) (|l#1@@43| T@U) (|l#2@@43| T@U) (|l#3@@41| Bool) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type $o@@96) refType) (= (type $f@@52) (FieldType alpha@@59))) (= (type |l#0@@43|) refType)) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#42| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@41|) $o@@96 $f@@52))  (=> (and (not (= $o@@96 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@96) |l#2@@43|))) |l#3@@41|)))) :qid |BucketsL.275:9| :skolemid |4059| :pattern ( (MapType9Select (|lambda#42| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@41|) $o@@96 $f@@52)) )))
(assert (forall ((arg0@@586 T@U) (arg1@@357 T@U) (arg2@@260 T@U) (arg3@@189 Bool) ) (! (= (type (|lambda#43| arg0@@586 arg1@@357 arg2@@260 arg3@@189)) (MapType9Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@586 arg1@@357 arg2@@260 arg3@@189)) )))
(assert (forall (($o@@97 T@U) ($f@@53 T@U) (|l#0@@44| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@42| Bool) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type $o@@97) refType) (= (type $f@@53) (FieldType alpha@@60))) (= (type |l#0@@44|) refType)) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#43| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@42|) $o@@97 $f@@53))  (=> (and (not (= $o@@97 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@97) |l#2@@44|))) |l#3@@42|)))) :qid |BucketsL.286:9| :skolemid |4060| :pattern ( (MapType9Select (|lambda#43| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@42|) $o@@97 $f@@53)) )))
(assert (forall ((arg0@@587 T@U) (arg1@@358 T@U) (arg2@@261 T@U) (arg3@@190 Bool) ) (! (= (type (|lambda#44| arg0@@587 arg1@@358 arg2@@261 arg3@@190)) (MapType9Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@587 arg1@@358 arg2@@261 arg3@@190)) )))
(assert (forall (($o@@98 T@U) ($f@@54 T@U) (|l#0@@45| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) (|l#3@@43| Bool) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type $o@@98) refType) (= (type $f@@54) (FieldType alpha@@61))) (= (type |l#0@@45|) refType)) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#44| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@43|) $o@@98 $f@@54))  (=> (and (not (= $o@@98 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@98) |l#2@@45|))) |l#3@@43|)))) :qid |BucketsL.286:9| :skolemid |4061| :pattern ( (MapType9Select (|lambda#44| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@43|) $o@@98 $f@@54)) )))
(assert (forall ((arg0@@588 T@U) (arg1@@359 T@U) (arg2@@262 T@U) (arg3@@191 Bool) ) (! (= (type (|lambda#45| arg0@@588 arg1@@359 arg2@@262 arg3@@191)) (MapType9Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@588 arg1@@359 arg2@@262 arg3@@191)) )))
(assert (forall (($o@@99 T@U) ($f@@55 T@U) (|l#0@@46| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) (|l#3@@44| Bool) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type $o@@99) refType) (= (type $f@@55) (FieldType alpha@@62))) (= (type |l#0@@46|) refType)) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#45| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@44|) $o@@99 $f@@55))  (=> (and (not (= $o@@99 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@99) |l#2@@46|))) |l#3@@44|)))) :qid |BucketsL.295:9| :skolemid |4062| :pattern ( (MapType9Select (|lambda#45| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@44|) $o@@99 $f@@55)) )))
(assert (forall ((arg0@@589 T@U) (arg1@@360 T@U) (arg2@@263 T@U) (arg3@@192 Bool) ) (! (= (type (|lambda#46| arg0@@589 arg1@@360 arg2@@263 arg3@@192)) (MapType9Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@589 arg1@@360 arg2@@263 arg3@@192)) )))
(assert (forall (($o@@100 T@U) ($f@@56 T@U) (|l#0@@47| T@U) (|l#1@@47| T@U) (|l#2@@47| T@U) (|l#3@@45| Bool) ) (! (let ((alpha@@63 (FieldTypeInv0 (type $f@@56)))) (=> (and (and (and (and (= (type $o@@100) refType) (= (type $f@@56) (FieldType alpha@@63))) (= (type |l#0@@47|) refType)) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#46| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@45|) $o@@100 $f@@56))  (=> (and (not (= $o@@100 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@100) |l#2@@47|))) |l#3@@45|)))) :qid |BucketsL.295:9| :skolemid |4063| :pattern ( (MapType9Select (|lambda#46| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@45|) $o@@100 $f@@56)) )))
(assert (forall ((arg0@@590 T@U) (arg1@@361 T@U) (arg2@@264 T@U) (arg3@@193 Bool) ) (! (= (type (|lambda#47| arg0@@590 arg1@@361 arg2@@264 arg3@@193)) (MapType9Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@590 arg1@@361 arg2@@264 arg3@@193)) )))
(assert (forall (($o@@101 T@U) ($f@@57 T@U) (|l#0@@48| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) (|l#3@@46| Bool) ) (! (let ((alpha@@64 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (and (and (= (type $o@@101) refType) (= (type $f@@57) (FieldType alpha@@64))) (= (type |l#0@@48|) refType)) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#47| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@46|) $o@@101 $f@@57))  (=> (and (not (= $o@@101 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@101) |l#2@@48|))) |l#3@@46|)))) :qid |BucketsL.315:9| :skolemid |4064| :pattern ( (MapType9Select (|lambda#47| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@46|) $o@@101 $f@@57)) )))
(assert (forall ((arg0@@591 T@U) (arg1@@362 T@U) (arg2@@265 T@U) (arg3@@194 Bool) ) (! (= (type (|lambda#48| arg0@@591 arg1@@362 arg2@@265 arg3@@194)) (MapType9Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@591 arg1@@362 arg2@@265 arg3@@194)) )))
(assert (forall (($o@@102 T@U) ($f@@58 T@U) (|l#0@@49| T@U) (|l#1@@49| T@U) (|l#2@@49| T@U) (|l#3@@47| Bool) ) (! (let ((alpha@@65 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (and (and (= (type $o@@102) refType) (= (type $f@@58) (FieldType alpha@@65))) (= (type |l#0@@49|) refType)) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#48| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@47|) $o@@102 $f@@58))  (=> (and (not (= $o@@102 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@102) |l#2@@49|))) |l#3@@47|)))) :qid |BucketsL.315:9| :skolemid |4065| :pattern ( (MapType9Select (|lambda#48| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@47|) $o@@102 $f@@58)) )))
(assert (forall ((arg0@@592 T@U) (arg1@@363 T@U) (arg2@@266 T@U) (arg3@@195 Bool) ) (! (= (type (|lambda#49| arg0@@592 arg1@@363 arg2@@266 arg3@@195)) (MapType9Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@592 arg1@@363 arg2@@266 arg3@@195)) )))
(assert (forall (($o@@103 T@U) ($f@@59 T@U) (|l#0@@50| T@U) (|l#1@@50| T@U) (|l#2@@50| T@U) (|l#3@@48| Bool) ) (! (let ((alpha@@66 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (and (and (= (type $o@@103) refType) (= (type $f@@59) (FieldType alpha@@66))) (= (type |l#0@@50|) refType)) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#49| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@48|) $o@@103 $f@@59))  (=> (and (not (= $o@@103 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@103) |l#2@@50|))) |l#3@@48|)))) :qid |BucketsL.341:9| :skolemid |4066| :pattern ( (MapType9Select (|lambda#49| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@48|) $o@@103 $f@@59)) )))
(assert (forall ((arg0@@593 T@U) (arg1@@364 T@U) (arg2@@267 T@U) (arg3@@196 Bool) ) (! (= (type (|lambda#50| arg0@@593 arg1@@364 arg2@@267 arg3@@196)) (MapType9Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@593 arg1@@364 arg2@@267 arg3@@196)) )))
(assert (forall (($o@@104 T@U) ($f@@60 T@U) (|l#0@@51| T@U) (|l#1@@51| T@U) (|l#2@@51| T@U) (|l#3@@49| Bool) ) (! (let ((alpha@@67 (FieldTypeInv0 (type $f@@60)))) (=> (and (and (and (and (= (type $o@@104) refType) (= (type $f@@60) (FieldType alpha@@67))) (= (type |l#0@@51|) refType)) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#50| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@49|) $o@@104 $f@@60))  (=> (and (not (= $o@@104 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@104) |l#2@@51|))) |l#3@@49|)))) :qid |BucketsL.425:13| :skolemid |4067| :pattern ( (MapType9Select (|lambda#50| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@49|) $o@@104 $f@@60)) )))
(assert (forall ((arg0@@594 T@U) (arg1@@365 T@U) (arg2@@268 T@U) (arg3@@197 Bool) ) (! (= (type (|lambda#51| arg0@@594 arg1@@365 arg2@@268 arg3@@197)) (MapType9Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@594 arg1@@365 arg2@@268 arg3@@197)) )))
(assert (forall (($o@@105 T@U) ($f@@61 T@U) (|l#0@@52| T@U) (|l#1@@52| T@U) (|l#2@@52| T@U) (|l#3@@50| Bool) ) (! (let ((alpha@@68 (FieldTypeInv0 (type $f@@61)))) (=> (and (and (and (and (= (type $o@@105) refType) (= (type $f@@61) (FieldType alpha@@68))) (= (type |l#0@@52|) refType)) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#51| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@50|) $o@@105 $f@@61))  (=> (and (not (= $o@@105 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@105) |l#2@@52|))) |l#3@@50|)))) :qid |BucketsL.425:13| :skolemid |4068| :pattern ( (MapType9Select (|lambda#51| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@50|) $o@@105 $f@@61)) )))
(assert (forall ((arg0@@595 T@U) (arg1@@366 T@U) (arg2@@269 T@U) (arg3@@198 Bool) ) (! (= (type (|lambda#52| arg0@@595 arg1@@366 arg2@@269 arg3@@198)) (MapType9Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@595 arg1@@366 arg2@@269 arg3@@198)) )))
(assert (forall (($o@@106 T@U) ($f@@62 T@U) (|l#0@@53| T@U) (|l#1@@53| T@U) (|l#2@@53| T@U) (|l#3@@51| Bool) ) (! (let ((alpha@@69 (FieldTypeInv0 (type $f@@62)))) (=> (and (and (and (and (= (type $o@@106) refType) (= (type $f@@62) (FieldType alpha@@69))) (= (type |l#0@@53|) refType)) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#52| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@51|) $o@@106 $f@@62))  (=> (and (not (= $o@@106 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@106) |l#2@@53|))) |l#3@@51|)))) :qid |BucketsL.433:9| :skolemid |4069| :pattern ( (MapType9Select (|lambda#52| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@51|) $o@@106 $f@@62)) )))
(assert (forall ((arg0@@596 T@U) (arg1@@367 T@U) (arg2@@270 T@U) (arg3@@199 Bool) ) (! (= (type (|lambda#53| arg0@@596 arg1@@367 arg2@@270 arg3@@199)) (MapType9Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@596 arg1@@367 arg2@@270 arg3@@199)) )))
(assert (forall (($o@@107 T@U) ($f@@63 T@U) (|l#0@@54| T@U) (|l#1@@54| T@U) (|l#2@@54| T@U) (|l#3@@52| Bool) ) (! (let ((alpha@@70 (FieldTypeInv0 (type $f@@63)))) (=> (and (and (and (and (= (type $o@@107) refType) (= (type $f@@63) (FieldType alpha@@70))) (= (type |l#0@@54|) refType)) (= (type |l#1@@54|) (MapType0Type refType MapType1Type))) (= (type |l#2@@54|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#53| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@52|) $o@@107 $f@@63))  (=> (and (not (= $o@@107 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@54| $o@@107) |l#2@@54|))) |l#3@@52|)))) :qid |BucketsL.467:13| :skolemid |4070| :pattern ( (MapType9Select (|lambda#53| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@52|) $o@@107 $f@@63)) )))
(assert (forall ((arg0@@597 T@U) (arg1@@368 T@U) (arg2@@271 T@U) (arg3@@200 Bool) ) (! (= (type (|lambda#54| arg0@@597 arg1@@368 arg2@@271 arg3@@200)) (MapType9Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@597 arg1@@368 arg2@@271 arg3@@200)) )))
(assert (forall (($o@@108 T@U) ($f@@64 T@U) (|l#0@@55| T@U) (|l#1@@55| T@U) (|l#2@@55| T@U) (|l#3@@53| Bool) ) (! (let ((alpha@@71 (FieldTypeInv0 (type $f@@64)))) (=> (and (and (and (and (= (type $o@@108) refType) (= (type $f@@64) (FieldType alpha@@71))) (= (type |l#0@@55|) refType)) (= (type |l#1@@55|) (MapType0Type refType MapType1Type))) (= (type |l#2@@55|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#54| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@53|) $o@@108 $f@@64))  (=> (and (not (= $o@@108 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@55| $o@@108) |l#2@@55|))) |l#3@@53|)))) :qid |BucketsL.467:13| :skolemid |4071| :pattern ( (MapType9Select (|lambda#54| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@53|) $o@@108 $f@@64)) )))
(assert (forall ((arg0@@598 T@U) (arg1@@369 T@U) (arg2@@272 T@U) (arg3@@201 Bool) ) (! (= (type (|lambda#55| arg0@@598 arg1@@369 arg2@@272 arg3@@201)) (MapType9Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@598 arg1@@369 arg2@@272 arg3@@201)) )))
(assert (forall (($o@@109 T@U) ($f@@65 T@U) (|l#0@@56| T@U) (|l#1@@56| T@U) (|l#2@@56| T@U) (|l#3@@54| Bool) ) (! (let ((alpha@@72 (FieldTypeInv0 (type $f@@65)))) (=> (and (and (and (and (= (type $o@@109) refType) (= (type $f@@65) (FieldType alpha@@72))) (= (type |l#0@@56|) refType)) (= (type |l#1@@56|) (MapType0Type refType MapType1Type))) (= (type |l#2@@56|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#55| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@54|) $o@@109 $f@@65))  (=> (and (not (= $o@@109 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@56| $o@@109) |l#2@@56|))) |l#3@@54|)))) :qid |BucketsL.474:13| :skolemid |4072| :pattern ( (MapType9Select (|lambda#55| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@54|) $o@@109 $f@@65)) )))
(assert (forall ((arg0@@599 T@U) (arg1@@370 T@U) (arg2@@273 T@U) (arg3@@202 Bool) ) (! (= (type (|lambda#56| arg0@@599 arg1@@370 arg2@@273 arg3@@202)) (MapType9Type refType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@599 arg1@@370 arg2@@273 arg3@@202)) )))
(assert (forall (($o@@110 T@U) ($f@@66 T@U) (|l#0@@57| T@U) (|l#1@@57| T@U) (|l#2@@57| T@U) (|l#3@@55| Bool) ) (! (let ((alpha@@73 (FieldTypeInv0 (type $f@@66)))) (=> (and (and (and (and (= (type $o@@110) refType) (= (type $f@@66) (FieldType alpha@@73))) (= (type |l#0@@57|) refType)) (= (type |l#1@@57|) (MapType0Type refType MapType1Type))) (= (type |l#2@@57|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#56| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@55|) $o@@110 $f@@66))  (=> (and (not (= $o@@110 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@57| $o@@110) |l#2@@57|))) |l#3@@55|)))) :qid |BucketsL.474:13| :skolemid |4073| :pattern ( (MapType9Select (|lambda#56| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@55|) $o@@110 $f@@66)) )))
(assert (forall ((arg0@@600 T@U) (arg1@@371 T@U) (arg2@@274 T@U) (arg3@@203 Bool) ) (! (= (type (|lambda#57| arg0@@600 arg1@@371 arg2@@274 arg3@@203)) (MapType9Type refType boolType)) :qid |funType:lambda#57| :pattern ( (|lambda#57| arg0@@600 arg1@@371 arg2@@274 arg3@@203)) )))
(assert (forall (($o@@111 T@U) ($f@@67 T@U) (|l#0@@58| T@U) (|l#1@@58| T@U) (|l#2@@58| T@U) (|l#3@@56| Bool) ) (! (let ((alpha@@74 (FieldTypeInv0 (type $f@@67)))) (=> (and (and (and (and (= (type $o@@111) refType) (= (type $f@@67) (FieldType alpha@@74))) (= (type |l#0@@58|) refType)) (= (type |l#1@@58|) (MapType0Type refType MapType1Type))) (= (type |l#2@@58|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#57| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@56|) $o@@111 $f@@67))  (=> (and (not (= $o@@111 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@58| $o@@111) |l#2@@58|))) |l#3@@56|)))) :qid |BucketsL.480:12| :skolemid |4074| :pattern ( (MapType9Select (|lambda#57| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@56|) $o@@111 $f@@67)) )))
(assert (forall ((arg0@@601 T@U) (arg1@@372 T@U) (arg2@@275 T@U) (arg3@@204 Bool) ) (! (= (type (|lambda#58| arg0@@601 arg1@@372 arg2@@275 arg3@@204)) (MapType9Type refType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@601 arg1@@372 arg2@@275 arg3@@204)) )))
(assert (forall (($o@@112 T@U) ($f@@68 T@U) (|l#0@@59| T@U) (|l#1@@59| T@U) (|l#2@@59| T@U) (|l#3@@57| Bool) ) (! (let ((alpha@@75 (FieldTypeInv0 (type $f@@68)))) (=> (and (and (and (and (= (type $o@@112) refType) (= (type $f@@68) (FieldType alpha@@75))) (= (type |l#0@@59|) refType)) (= (type |l#1@@59|) (MapType0Type refType MapType1Type))) (= (type |l#2@@59|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#58| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@57|) $o@@112 $f@@68))  (=> (and (not (= $o@@112 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@59| $o@@112) |l#2@@59|))) |l#3@@57|)))) :qid |BucketsL.480:12| :skolemid |4075| :pattern ( (MapType9Select (|lambda#58| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@57|) $o@@112 $f@@68)) )))
(assert (forall ((arg0@@602 T@U) (arg1@@373 T@U) (arg2@@276 T@U) (arg3@@205 Bool) ) (! (= (type (|lambda#59| arg0@@602 arg1@@373 arg2@@276 arg3@@205)) (MapType9Type refType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@602 arg1@@373 arg2@@276 arg3@@205)) )))
(assert (forall (($o@@113 T@U) ($f@@69 T@U) (|l#0@@60| T@U) (|l#1@@60| T@U) (|l#2@@60| T@U) (|l#3@@58| Bool) ) (! (let ((alpha@@76 (FieldTypeInv0 (type $f@@69)))) (=> (and (and (and (and (= (type $o@@113) refType) (= (type $f@@69) (FieldType alpha@@76))) (= (type |l#0@@60|) refType)) (= (type |l#1@@60|) (MapType0Type refType MapType1Type))) (= (type |l#2@@60|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#59| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@58|) $o@@113 $f@@69))  (=> (and (not (= $o@@113 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@60| $o@@113) |l#2@@60|))) |l#3@@58|)))) :qid |BucketsL.485:12| :skolemid |4076| :pattern ( (MapType9Select (|lambda#59| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@58|) $o@@113 $f@@69)) )))
(assert (forall ((arg0@@603 T@U) (arg1@@374 T@U) (arg2@@277 T@U) (arg3@@206 Bool) ) (! (= (type (|lambda#60| arg0@@603 arg1@@374 arg2@@277 arg3@@206)) (MapType9Type refType boolType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@603 arg1@@374 arg2@@277 arg3@@206)) )))
(assert (forall (($o@@114 T@U) ($f@@70 T@U) (|l#0@@61| T@U) (|l#1@@61| T@U) (|l#2@@61| T@U) (|l#3@@59| Bool) ) (! (let ((alpha@@77 (FieldTypeInv0 (type $f@@70)))) (=> (and (and (and (and (= (type $o@@114) refType) (= (type $f@@70) (FieldType alpha@@77))) (= (type |l#0@@61|) refType)) (= (type |l#1@@61|) (MapType0Type refType MapType1Type))) (= (type |l#2@@61|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#60| |l#0@@61| |l#1@@61| |l#2@@61| |l#3@@59|) $o@@114 $f@@70))  (=> (and (not (= $o@@114 |l#0@@61|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@61| $o@@114) |l#2@@61|))) |l#3@@59|)))) :qid |BucketsL.485:12| :skolemid |4077| :pattern ( (MapType9Select (|lambda#60| |l#0@@61| |l#1@@61| |l#2@@61| |l#3@@59|) $o@@114 $f@@70)) )))
(assert (forall ((arg0@@604 T@U) (arg1@@375 T@U) (arg2@@278 T@U) (arg3@@207 Bool) ) (! (= (type (|lambda#61| arg0@@604 arg1@@375 arg2@@278 arg3@@207)) (MapType9Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@604 arg1@@375 arg2@@278 arg3@@207)) )))
(assert (forall (($o@@115 T@U) ($f@@71 T@U) (|l#0@@62| T@U) (|l#1@@62| T@U) (|l#2@@62| T@U) (|l#3@@60| Bool) ) (! (let ((alpha@@78 (FieldTypeInv0 (type $f@@71)))) (=> (and (and (and (and (= (type $o@@115) refType) (= (type $f@@71) (FieldType alpha@@78))) (= (type |l#0@@62|) refType)) (= (type |l#1@@62|) (MapType0Type refType MapType1Type))) (= (type |l#2@@62|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#61| |l#0@@62| |l#1@@62| |l#2@@62| |l#3@@60|) $o@@115 $f@@71))  (=> (and (not (= $o@@115 |l#0@@62|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@62| $o@@115) |l#2@@62|))) |l#3@@60|)))) :qid |BucketsL.491:12| :skolemid |4078| :pattern ( (MapType9Select (|lambda#61| |l#0@@62| |l#1@@62| |l#2@@62| |l#3@@60|) $o@@115 $f@@71)) )))
(assert (forall ((arg0@@605 T@U) (arg1@@376 T@U) (arg2@@279 T@U) (arg3@@208 Bool) ) (! (= (type (|lambda#62| arg0@@605 arg1@@376 arg2@@279 arg3@@208)) (MapType9Type refType boolType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@605 arg1@@376 arg2@@279 arg3@@208)) )))
(assert (forall (($o@@116 T@U) ($f@@72 T@U) (|l#0@@63| T@U) (|l#1@@63| T@U) (|l#2@@63| T@U) (|l#3@@61| Bool) ) (! (let ((alpha@@79 (FieldTypeInv0 (type $f@@72)))) (=> (and (and (and (and (= (type $o@@116) refType) (= (type $f@@72) (FieldType alpha@@79))) (= (type |l#0@@63|) refType)) (= (type |l#1@@63|) (MapType0Type refType MapType1Type))) (= (type |l#2@@63|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#62| |l#0@@63| |l#1@@63| |l#2@@63| |l#3@@61|) $o@@116 $f@@72))  (=> (and (not (= $o@@116 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@63| $o@@116) |l#2@@63|))) |l#3@@61|)))) :qid |BucketsL.491:12| :skolemid |4079| :pattern ( (MapType9Select (|lambda#62| |l#0@@63| |l#1@@63| |l#2@@63| |l#3@@61|) $o@@116 $f@@72)) )))
(assert (forall ((arg0@@606 T@U) (arg1@@377 T@U) (arg2@@280 T@U) (arg3@@209 Bool) ) (! (= (type (|lambda#63| arg0@@606 arg1@@377 arg2@@280 arg3@@209)) (MapType9Type refType boolType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@606 arg1@@377 arg2@@280 arg3@@209)) )))
(assert (forall (($o@@117 T@U) ($f@@73 T@U) (|l#0@@64| T@U) (|l#1@@64| T@U) (|l#2@@64| T@U) (|l#3@@62| Bool) ) (! (let ((alpha@@80 (FieldTypeInv0 (type $f@@73)))) (=> (and (and (and (and (= (type $o@@117) refType) (= (type $f@@73) (FieldType alpha@@80))) (= (type |l#0@@64|) refType)) (= (type |l#1@@64|) (MapType0Type refType MapType1Type))) (= (type |l#2@@64|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#63| |l#0@@64| |l#1@@64| |l#2@@64| |l#3@@62|) $o@@117 $f@@73))  (=> (and (not (= $o@@117 |l#0@@64|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@64| $o@@117) |l#2@@64|))) |l#3@@62|)))) :qid |BucketsL.500:12| :skolemid |4080| :pattern ( (MapType9Select (|lambda#63| |l#0@@64| |l#1@@64| |l#2@@64| |l#3@@62|) $o@@117 $f@@73)) )))
(assert (forall ((arg0@@607 T@U) (arg1@@378 T@U) (arg2@@281 T@U) (arg3@@210 Bool) ) (! (= (type (|lambda#64| arg0@@607 arg1@@378 arg2@@281 arg3@@210)) (MapType9Type refType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@607 arg1@@378 arg2@@281 arg3@@210)) )))
(assert (forall (($o@@118 T@U) ($f@@74 T@U) (|l#0@@65| T@U) (|l#1@@65| T@U) (|l#2@@65| T@U) (|l#3@@63| Bool) ) (! (let ((alpha@@81 (FieldTypeInv0 (type $f@@74)))) (=> (and (and (and (and (= (type $o@@118) refType) (= (type $f@@74) (FieldType alpha@@81))) (= (type |l#0@@65|) refType)) (= (type |l#1@@65|) (MapType0Type refType MapType1Type))) (= (type |l#2@@65|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#64| |l#0@@65| |l#1@@65| |l#2@@65| |l#3@@63|) $o@@118 $f@@74))  (=> (and (not (= $o@@118 |l#0@@65|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@65| $o@@118) |l#2@@65|))) |l#3@@63|)))) :qid |BucketsL.500:12| :skolemid |4081| :pattern ( (MapType9Select (|lambda#64| |l#0@@65| |l#1@@65| |l#2@@65| |l#3@@63|) $o@@118 $f@@74)) )))
(assert (forall ((|$w#0| T@U) (|l#0@@66| T@U) (|l#1@@66| T@U) (|l#2@@66| T@U) (|l#3@@64| T@U) (|l#4| Int) (|l#5| T@U) (|l#6| T@U) (|l#7| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |$w#0|) BoxType) (= (type |l#0@@66|) TyType)) (= (type |l#1@@66|) (MapType0Type BoxType boolType))) (= (type |l#2@@66|) (MapType0Type BoxType boolType))) (= (type |l#3@@64|) (SeqType BoxType))) (= (type |l#5|) DatatypeTypeType)) (= (type |l#6|) DatatypeTypeType)) (= (type |l#7|) DatatypeTypeType)) (= (U_2_bool (MapType0Select (|lambda#65| |l#0@@66| |l#1@@66| |l#2@@66| |l#3@@64| |l#4| |l#5| |l#6| |l#7|) |$w#0|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0|) |l#0@@66|) (and (and (or (U_2_bool (MapType0Select |l#1@@66| |$w#0|)) (U_2_bool (MapType0Select |l#2@@66| |$w#0|))) (= (PivotsLib.__default.Route |l#3@@64| ($Unbox (SeqType BoxType) |$w#0|)) |l#4|)) (not (|ValueMessage.Message#Equal| (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet |l#5| ($Unbox (SeqType BoxType) |$w#0|)) (BucketsLib.__default.BucketGet |l#6| ($Unbox (SeqType BoxType) |$w#0|))) |l#7|)))))) :qid |BucketsL.512:7| :skolemid |4082| :pattern ( (MapType0Select (|lambda#65| |l#0@@66| |l#1@@66| |l#2@@66| |l#3@@64| |l#4| |l#5| |l#6| |l#7|) |$w#0|)) )))
(assert (forall ((|$w#0@@0| T@U) (|l#0@@67| T@U) (|l#1@@67| T@U) ) (!  (=> (and (and (= (type |$w#0@@0|) BoxType) (= (type |l#0@@67|) DatatypeTypeType)) (= (type |l#1@@67|) DatatypeTypeType)) (= (MapType0Select (|lambda#66| |l#0@@67| |l#1@@67|) |$w#0@@0|) ($Box (ValueMessage.__default.Merge (BucketsLib.__default.BucketGet |l#0@@67| ($Unbox (SeqType BoxType) |$w#0@@0|)) (BucketsLib.__default.BucketGet |l#1@@67| ($Unbox (SeqType BoxType) |$w#0@@0|)))))) :qid |BucketsL.512:7| :skolemid |4083| :pattern ( (MapType0Select (|lambda#66| |l#0@@67| |l#1@@67|) |$w#0@@0|)) )))
(assert (forall ((arg0@@608 T@U) (arg1@@379 T@U) (arg2@@282 T@U) (arg3@@211 Bool) ) (! (= (type (|lambda#73| arg0@@608 arg1@@379 arg2@@282 arg3@@211)) (MapType9Type refType boolType)) :qid |funType:lambda#73| :pattern ( (|lambda#73| arg0@@608 arg1@@379 arg2@@282 arg3@@211)) )))
(assert (forall (($o@@119 T@U) ($f@@75 T@U) (|l#0@@68| T@U) (|l#1@@68| T@U) (|l#2@@67| T@U) (|l#3@@65| Bool) ) (! (let ((alpha@@82 (FieldTypeInv0 (type $f@@75)))) (=> (and (and (and (and (= (type $o@@119) refType) (= (type $f@@75) (FieldType alpha@@82))) (= (type |l#0@@68|) refType)) (= (type |l#1@@68|) (MapType0Type refType MapType1Type))) (= (type |l#2@@67|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#73| |l#0@@68| |l#1@@68| |l#2@@67| |l#3@@65|) $o@@119 $f@@75))  (=> (and (not (= $o@@119 |l#0@@68|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@68| $o@@119) |l#2@@67|))) |l#3@@65|)))) :qid |BucketsL.509:12| :skolemid |4084| :pattern ( (MapType9Select (|lambda#73| |l#0@@68| |l#1@@68| |l#2@@67| |l#3@@65|) $o@@119 $f@@75)) )))
(assert (forall ((arg0@@609 T@U) (arg1@@380 T@U) (arg2@@283 T@U) (arg3@@212 Bool) ) (! (= (type (|lambda#74| arg0@@609 arg1@@380 arg2@@283 arg3@@212)) (MapType9Type refType boolType)) :qid |funType:lambda#74| :pattern ( (|lambda#74| arg0@@609 arg1@@380 arg2@@283 arg3@@212)) )))
(assert (forall (($o@@120 T@U) ($f@@76 T@U) (|l#0@@69| T@U) (|l#1@@69| T@U) (|l#2@@68| T@U) (|l#3@@66| Bool) ) (! (let ((alpha@@83 (FieldTypeInv0 (type $f@@76)))) (=> (and (and (and (and (= (type $o@@120) refType) (= (type $f@@76) (FieldType alpha@@83))) (= (type |l#0@@69|) refType)) (= (type |l#1@@69|) (MapType0Type refType MapType1Type))) (= (type |l#2@@68|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#74| |l#0@@69| |l#1@@69| |l#2@@68| |l#3@@66|) $o@@120 $f@@76))  (=> (and (not (= $o@@120 |l#0@@69|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@69| $o@@120) |l#2@@68|))) |l#3@@66|)))) :qid |BucketsL.509:12| :skolemid |4085| :pattern ( (MapType9Select (|lambda#74| |l#0@@69| |l#1@@69| |l#2@@68| |l#3@@66|) $o@@120 $f@@76)) )))
(assert (forall ((arg0@@610 T@U) (arg1@@381 T@U) (arg2@@284 T@U) (arg3@@213 Bool) ) (! (= (type (|lambda#85| arg0@@610 arg1@@381 arg2@@284 arg3@@213)) (MapType9Type refType boolType)) :qid |funType:lambda#85| :pattern ( (|lambda#85| arg0@@610 arg1@@381 arg2@@284 arg3@@213)) )))
(assert (forall (($o@@121 T@U) ($f@@77 T@U) (|l#0@@70| T@U) (|l#1@@70| T@U) (|l#2@@69| T@U) (|l#3@@67| Bool) ) (! (let ((alpha@@84 (FieldTypeInv0 (type $f@@77)))) (=> (and (and (and (and (= (type $o@@121) refType) (= (type $f@@77) (FieldType alpha@@84))) (= (type |l#0@@70|) refType)) (= (type |l#1@@70|) (MapType0Type refType MapType1Type))) (= (type |l#2@@69|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#85| |l#0@@70| |l#1@@70| |l#2@@69| |l#3@@67|) $o@@121 $f@@77))  (=> (and (not (= $o@@121 |l#0@@70|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@70| $o@@121) |l#2@@69|))) |l#3@@67|)))) :qid |BucketsL.520:9| :skolemid |4086| :pattern ( (MapType9Select (|lambda#85| |l#0@@70| |l#1@@70| |l#2@@69| |l#3@@67|) $o@@121 $f@@77)) )))
(assert (forall ((arg0@@611 T@U) (arg1@@382 T@U) (arg2@@285 T@U) (arg3@@214 Bool) ) (! (= (type (|lambda#86| arg0@@611 arg1@@382 arg2@@285 arg3@@214)) (MapType9Type refType boolType)) :qid |funType:lambda#86| :pattern ( (|lambda#86| arg0@@611 arg1@@382 arg2@@285 arg3@@214)) )))
(assert (forall (($o@@122 T@U) ($f@@78 T@U) (|l#0@@71| T@U) (|l#1@@71| T@U) (|l#2@@70| T@U) (|l#3@@68| Bool) ) (! (let ((alpha@@85 (FieldTypeInv0 (type $f@@78)))) (=> (and (and (and (and (= (type $o@@122) refType) (= (type $f@@78) (FieldType alpha@@85))) (= (type |l#0@@71|) refType)) (= (type |l#1@@71|) (MapType0Type refType MapType1Type))) (= (type |l#2@@70|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#86| |l#0@@71| |l#1@@71| |l#2@@70| |l#3@@68|) $o@@122 $f@@78))  (=> (and (not (= $o@@122 |l#0@@71|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@71| $o@@122) |l#2@@70|))) |l#3@@68|)))) :qid |BucketsL.520:9| :skolemid |4087| :pattern ( (MapType9Select (|lambda#86| |l#0@@71| |l#1@@71| |l#2@@70| |l#3@@68|) $o@@122 $f@@78)) )))
(assert (forall ((arg0@@612 T@U) (arg1@@383 T@U) (arg2@@286 T@U) (arg3@@215 Bool) ) (! (= (type (|lambda#93| arg0@@612 arg1@@383 arg2@@286 arg3@@215)) (MapType9Type refType boolType)) :qid |funType:lambda#93| :pattern ( (|lambda#93| arg0@@612 arg1@@383 arg2@@286 arg3@@215)) )))
(assert (forall (($o@@123 T@U) ($f@@79 T@U) (|l#0@@72| T@U) (|l#1@@72| T@U) (|l#2@@71| T@U) (|l#3@@69| Bool) ) (! (let ((alpha@@86 (FieldTypeInv0 (type $f@@79)))) (=> (and (and (and (and (= (type $o@@123) refType) (= (type $f@@79) (FieldType alpha@@86))) (= (type |l#0@@72|) refType)) (= (type |l#1@@72|) (MapType0Type refType MapType1Type))) (= (type |l#2@@71|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#93| |l#0@@72| |l#1@@72| |l#2@@71| |l#3@@69|) $o@@123 $f@@79))  (=> (and (not (= $o@@123 |l#0@@72|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@72| $o@@123) |l#2@@71|))) |l#3@@69|)))) :qid |BucketsL.552:12| :skolemid |4088| :pattern ( (MapType9Select (|lambda#93| |l#0@@72| |l#1@@72| |l#2@@71| |l#3@@69|) $o@@123 $f@@79)) )))
(assert (forall ((arg0@@613 T@U) (arg1@@384 T@U) (arg2@@287 T@U) (arg3@@216 Bool) ) (! (= (type (|lambda#94| arg0@@613 arg1@@384 arg2@@287 arg3@@216)) (MapType9Type refType boolType)) :qid |funType:lambda#94| :pattern ( (|lambda#94| arg0@@613 arg1@@384 arg2@@287 arg3@@216)) )))
(assert (forall (($o@@124 T@U) ($f@@80 T@U) (|l#0@@73| T@U) (|l#1@@73| T@U) (|l#2@@72| T@U) (|l#3@@70| Bool) ) (! (let ((alpha@@87 (FieldTypeInv0 (type $f@@80)))) (=> (and (and (and (and (= (type $o@@124) refType) (= (type $f@@80) (FieldType alpha@@87))) (= (type |l#0@@73|) refType)) (= (type |l#1@@73|) (MapType0Type refType MapType1Type))) (= (type |l#2@@72|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#94| |l#0@@73| |l#1@@73| |l#2@@72| |l#3@@70|) $o@@124 $f@@80))  (=> (and (not (= $o@@124 |l#0@@73|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@73| $o@@124) |l#2@@72|))) |l#3@@70|)))) :qid |BucketsL.552:12| :skolemid |4089| :pattern ( (MapType9Select (|lambda#94| |l#0@@73| |l#1@@73| |l#2@@72| |l#3@@70|) $o@@124 $f@@80)) )))
(assert (forall ((arg0@@614 T@U) (arg1@@385 T@U) (arg2@@288 T@U) (arg3@@217 Bool) ) (! (= (type (|lambda#95| arg0@@614 arg1@@385 arg2@@288 arg3@@217)) (MapType9Type refType boolType)) :qid |funType:lambda#95| :pattern ( (|lambda#95| arg0@@614 arg1@@385 arg2@@288 arg3@@217)) )))
(assert (forall (($o@@125 T@U) ($f@@81 T@U) (|l#0@@74| T@U) (|l#1@@74| T@U) (|l#2@@73| T@U) (|l#3@@71| Bool) ) (! (let ((alpha@@88 (FieldTypeInv0 (type $f@@81)))) (=> (and (and (and (and (= (type $o@@125) refType) (= (type $f@@81) (FieldType alpha@@88))) (= (type |l#0@@74|) refType)) (= (type |l#1@@74|) (MapType0Type refType MapType1Type))) (= (type |l#2@@73|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#95| |l#0@@74| |l#1@@74| |l#2@@73| |l#3@@71|) $o@@125 $f@@81))  (=> (and (not (= $o@@125 |l#0@@74|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@74| $o@@125) |l#2@@73|))) |l#3@@71|)))) :qid |BucketsL.563:9| :skolemid |4090| :pattern ( (MapType9Select (|lambda#95| |l#0@@74| |l#1@@74| |l#2@@73| |l#3@@71|) $o@@125 $f@@81)) )))
(assert (forall ((arg0@@615 T@U) (arg1@@386 T@U) (arg2@@289 T@U) (arg3@@218 Bool) ) (! (= (type (|lambda#96| arg0@@615 arg1@@386 arg2@@289 arg3@@218)) (MapType9Type refType boolType)) :qid |funType:lambda#96| :pattern ( (|lambda#96| arg0@@615 arg1@@386 arg2@@289 arg3@@218)) )))
(assert (forall (($o@@126 T@U) ($f@@82 T@U) (|l#0@@75| T@U) (|l#1@@75| T@U) (|l#2@@74| T@U) (|l#3@@72| Bool) ) (! (let ((alpha@@89 (FieldTypeInv0 (type $f@@82)))) (=> (and (and (and (and (= (type $o@@126) refType) (= (type $f@@82) (FieldType alpha@@89))) (= (type |l#0@@75|) refType)) (= (type |l#1@@75|) (MapType0Type refType MapType1Type))) (= (type |l#2@@74|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#96| |l#0@@75| |l#1@@75| |l#2@@74| |l#3@@72|) $o@@126 $f@@82))  (=> (and (not (= $o@@126 |l#0@@75|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@75| $o@@126) |l#2@@74|))) |l#3@@72|)))) :qid |BucketsL.563:9| :skolemid |4091| :pattern ( (MapType9Select (|lambda#96| |l#0@@75| |l#1@@75| |l#2@@74| |l#3@@72|) $o@@126 $f@@82)) )))
(assert (forall ((arg0@@616 T@U) (arg1@@387 T@U) (arg2@@290 T@U) (arg3@@219 Bool) ) (! (= (type (|lambda#97| arg0@@616 arg1@@387 arg2@@290 arg3@@219)) (MapType9Type refType boolType)) :qid |funType:lambda#97| :pattern ( (|lambda#97| arg0@@616 arg1@@387 arg2@@290 arg3@@219)) )))
(assert (forall (($o@@127 T@U) ($f@@83 T@U) (|l#0@@76| T@U) (|l#1@@76| T@U) (|l#2@@75| T@U) (|l#3@@73| Bool) ) (! (let ((alpha@@90 (FieldTypeInv0 (type $f@@83)))) (=> (and (and (and (and (= (type $o@@127) refType) (= (type $f@@83) (FieldType alpha@@90))) (= (type |l#0@@76|) refType)) (= (type |l#1@@76|) (MapType0Type refType MapType1Type))) (= (type |l#2@@75|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#97| |l#0@@76| |l#1@@76| |l#2@@75| |l#3@@73|) $o@@127 $f@@83))  (=> (and (not (= $o@@127 |l#0@@76|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@76| $o@@127) |l#2@@75|))) |l#3@@73|)))) :qid |BucketsL.581:12| :skolemid |4092| :pattern ( (MapType9Select (|lambda#97| |l#0@@76| |l#1@@76| |l#2@@75| |l#3@@73|) $o@@127 $f@@83)) )))
(assert (forall ((arg0@@617 T@U) (arg1@@388 T@U) (arg2@@291 T@U) (arg3@@220 Bool) ) (! (= (type (|lambda#98| arg0@@617 arg1@@388 arg2@@291 arg3@@220)) (MapType9Type refType boolType)) :qid |funType:lambda#98| :pattern ( (|lambda#98| arg0@@617 arg1@@388 arg2@@291 arg3@@220)) )))
(assert (forall (($o@@128 T@U) ($f@@84 T@U) (|l#0@@77| T@U) (|l#1@@77| T@U) (|l#2@@76| T@U) (|l#3@@74| Bool) ) (! (let ((alpha@@91 (FieldTypeInv0 (type $f@@84)))) (=> (and (and (and (and (= (type $o@@128) refType) (= (type $f@@84) (FieldType alpha@@91))) (= (type |l#0@@77|) refType)) (= (type |l#1@@77|) (MapType0Type refType MapType1Type))) (= (type |l#2@@76|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#98| |l#0@@77| |l#1@@77| |l#2@@76| |l#3@@74|) $o@@128 $f@@84))  (=> (and (not (= $o@@128 |l#0@@77|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@77| $o@@128) |l#2@@76|))) |l#3@@74|)))) :qid |BucketsL.581:12| :skolemid |4093| :pattern ( (MapType9Select (|lambda#98| |l#0@@77| |l#1@@77| |l#2@@76| |l#3@@74|) $o@@128 $f@@84)) )))
(assert (forall ((arg0@@618 T@U) (arg1@@389 T@U) (arg2@@292 T@U) (arg3@@221 Bool) ) (! (= (type (|lambda#99| arg0@@618 arg1@@389 arg2@@292 arg3@@221)) (MapType9Type refType boolType)) :qid |funType:lambda#99| :pattern ( (|lambda#99| arg0@@618 arg1@@389 arg2@@292 arg3@@221)) )))
(assert (forall (($o@@129 T@U) ($f@@85 T@U) (|l#0@@78| T@U) (|l#1@@78| T@U) (|l#2@@77| T@U) (|l#3@@75| Bool) ) (! (let ((alpha@@92 (FieldTypeInv0 (type $f@@85)))) (=> (and (and (and (and (= (type $o@@129) refType) (= (type $f@@85) (FieldType alpha@@92))) (= (type |l#0@@78|) refType)) (= (type |l#1@@78|) (MapType0Type refType MapType1Type))) (= (type |l#2@@77|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#99| |l#0@@78| |l#1@@78| |l#2@@77| |l#3@@75|) $o@@129 $f@@85))  (=> (and (not (= $o@@129 |l#0@@78|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@78| $o@@129) |l#2@@77|))) |l#3@@75|)))) :qid |BucketsL.590:12| :skolemid |4094| :pattern ( (MapType9Select (|lambda#99| |l#0@@78| |l#1@@78| |l#2@@77| |l#3@@75|) $o@@129 $f@@85)) )))
(assert (forall ((arg0@@619 T@U) (arg1@@390 T@U) (arg2@@293 T@U) (arg3@@222 Bool) ) (! (= (type (|lambda#100| arg0@@619 arg1@@390 arg2@@293 arg3@@222)) (MapType9Type refType boolType)) :qid |funType:lambda#100| :pattern ( (|lambda#100| arg0@@619 arg1@@390 arg2@@293 arg3@@222)) )))
(assert (forall (($o@@130 T@U) ($f@@86 T@U) (|l#0@@79| T@U) (|l#1@@79| T@U) (|l#2@@78| T@U) (|l#3@@76| Bool) ) (! (let ((alpha@@93 (FieldTypeInv0 (type $f@@86)))) (=> (and (and (and (and (= (type $o@@130) refType) (= (type $f@@86) (FieldType alpha@@93))) (= (type |l#0@@79|) refType)) (= (type |l#1@@79|) (MapType0Type refType MapType1Type))) (= (type |l#2@@78|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#100| |l#0@@79| |l#1@@79| |l#2@@78| |l#3@@76|) $o@@130 $f@@86))  (=> (and (not (= $o@@130 |l#0@@79|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@79| $o@@130) |l#2@@78|))) |l#3@@76|)))) :qid |BucketsL.590:12| :skolemid |4095| :pattern ( (MapType9Select (|lambda#100| |l#0@@79| |l#1@@79| |l#2@@78| |l#3@@76|) $o@@130 $f@@86)) )))
(assert (forall ((|$w#0@@1| T@U) (|l#0@@80| T@U) (|l#1@@80| T@U) (|l#2@@79| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@1|) BoxType) (= (type |l#0@@80|) TyType)) (= (type |l#1@@80|) (MapType0Type BoxType boolType))) (= (type |l#2@@79|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#101| |l#0@@80| |l#1@@80| |l#2@@79|) |$w#0@@1|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@1|) |l#0@@80|) (and (U_2_bool (MapType0Select |l#1@@80| |$w#0@@1|)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) |$w#0@@1|) |l#2@@79|))))) :qid |BucketsL.611:18| :skolemid |4096| :pattern ( (MapType0Select (|lambda#101| |l#0@@80| |l#1@@80| |l#2@@79|) |$w#0@@1|)) )))
(assert (forall ((|$w#0@@2| T@U) (|l#0@@81| T@U) ) (!  (=> (and (= (type |$w#0@@2|) BoxType) (= (type |l#0@@81|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#102| |l#0@@81|) |$w#0@@2|) (MapType0Select |l#0@@81| |$w#0@@2|))) :qid |BucketsL.611:18| :skolemid |4097| :pattern ( (MapType0Select (|lambda#102| |l#0@@81|) |$w#0@@2|)) )))
(assert (forall ((|$w#1| T@U) (|l#0@@82| T@U) (|l#1@@81| T@U) (|l#2@@80| T@U) ) (!  (=> (and (and (and (= (type |$w#1|) BoxType) (= (type |l#0@@82|) TyType)) (= (type |l#1@@81|) (MapType0Type BoxType boolType))) (= (type |l#2@@80|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#103| |l#0@@82| |l#1@@81| |l#2@@80|) |$w#1|))  (and ($Is ($Unbox (SeqType BoxType) |$w#1|) |l#0@@82|) (and (U_2_bool (MapType0Select |l#1@@81| |$w#1|)) (Lexicographic__Byte__Order.__default.lte |l#2@@80| ($Unbox (SeqType BoxType) |$w#1|)))))) :qid |BucketsL.612:18| :skolemid |4098| :pattern ( (MapType0Select (|lambda#103| |l#0@@82| |l#1@@81| |l#2@@80|) |$w#1|)) )))
(assert (forall ((arg0@@620 T@U) (arg1@@391 T@U) (arg2@@294 T@U) (arg3@@223 Bool) ) (! (= (type (|lambda#131| arg0@@620 arg1@@391 arg2@@294 arg3@@223)) (MapType9Type refType boolType)) :qid |funType:lambda#131| :pattern ( (|lambda#131| arg0@@620 arg1@@391 arg2@@294 arg3@@223)) )))
(assert (forall (($o@@131 T@U) ($f@@87 T@U) (|l#0@@83| T@U) (|l#1@@82| T@U) (|l#2@@81| T@U) (|l#3@@77| Bool) ) (! (let ((alpha@@94 (FieldTypeInv0 (type $f@@87)))) (=> (and (and (and (and (= (type $o@@131) refType) (= (type $f@@87) (FieldType alpha@@94))) (= (type |l#0@@83|) refType)) (= (type |l#1@@82|) (MapType0Type refType MapType1Type))) (= (type |l#2@@81|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#131| |l#0@@83| |l#1@@82| |l#2@@81| |l#3@@77|) $o@@131 $f@@87))  (=> (and (not (= $o@@131 |l#0@@83|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@82| $o@@131) |l#2@@81|))) |l#3@@77|)))) :qid |BucketsL.598:12| :skolemid |4099| :pattern ( (MapType9Select (|lambda#131| |l#0@@83| |l#1@@82| |l#2@@81| |l#3@@77|) $o@@131 $f@@87)) )))
(assert (forall ((arg0@@621 T@U) (arg1@@392 T@U) (arg2@@295 T@U) (arg3@@224 Bool) ) (! (= (type (|lambda#132| arg0@@621 arg1@@392 arg2@@295 arg3@@224)) (MapType9Type refType boolType)) :qid |funType:lambda#132| :pattern ( (|lambda#132| arg0@@621 arg1@@392 arg2@@295 arg3@@224)) )))
(assert (forall (($o@@132 T@U) ($f@@88 T@U) (|l#0@@84| T@U) (|l#1@@83| T@U) (|l#2@@82| T@U) (|l#3@@78| Bool) ) (! (let ((alpha@@95 (FieldTypeInv0 (type $f@@88)))) (=> (and (and (and (and (= (type $o@@132) refType) (= (type $f@@88) (FieldType alpha@@95))) (= (type |l#0@@84|) refType)) (= (type |l#1@@83|) (MapType0Type refType MapType1Type))) (= (type |l#2@@82|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#132| |l#0@@84| |l#1@@83| |l#2@@82| |l#3@@78|) $o@@132 $f@@88))  (=> (and (not (= $o@@132 |l#0@@84|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@83| $o@@132) |l#2@@82|))) |l#3@@78|)))) :qid |BucketsL.598:12| :skolemid |4100| :pattern ( (MapType9Select (|lambda#132| |l#0@@84| |l#1@@83| |l#2@@82| |l#3@@78|) $o@@132 $f@@88)) )))
(assert (forall ((|$w#0@@3| T@U) (|l#0@@85| T@U) (|l#1@@84| T@U) (|l#2@@83| T@U) (|l#3@@79| Int) ) (!  (=> (and (and (and (= (type |$w#0@@3|) BoxType) (= (type |l#0@@85|) TyType)) (= (type |l#1@@84|) (MapType0Type BoxType boolType))) (= (type |l#2@@83|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#153| |l#0@@85| |l#1@@84| |l#2@@83| |l#3@@79|) |$w#0@@3|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@3|) |l#0@@85|) (and (U_2_bool (MapType0Select |l#1@@84| |$w#0@@3|)) (= (PivotsLib.__default.Route |l#2@@83| ($Unbox (SeqType BoxType) |$w#0@@3|)) |l#3@@79|))))) :qid |BucketsL.621:7| :skolemid |4101| :pattern ( (MapType0Select (|lambda#153| |l#0@@85| |l#1@@84| |l#2@@83| |l#3@@79|) |$w#0@@3|)) )))
(assert (forall ((arg0@@622 T@U) (arg1@@393 T@U) (arg2@@296 T@U) (arg3@@225 Bool) ) (! (= (type (|lambda#161| arg0@@622 arg1@@393 arg2@@296 arg3@@225)) (MapType9Type refType boolType)) :qid |funType:lambda#161| :pattern ( (|lambda#161| arg0@@622 arg1@@393 arg2@@296 arg3@@225)) )))
(assert (forall (($o@@133 T@U) ($f@@89 T@U) (|l#0@@86| T@U) (|l#1@@85| T@U) (|l#2@@84| T@U) (|l#3@@80| Bool) ) (! (let ((alpha@@96 (FieldTypeInv0 (type $f@@89)))) (=> (and (and (and (and (= (type $o@@133) refType) (= (type $f@@89) (FieldType alpha@@96))) (= (type |l#0@@86|) refType)) (= (type |l#1@@85|) (MapType0Type refType MapType1Type))) (= (type |l#2@@84|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#161| |l#0@@86| |l#1@@85| |l#2@@84| |l#3@@80|) $o@@133 $f@@89))  (=> (and (not (= $o@@133 |l#0@@86|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@85| $o@@133) |l#2@@84|))) |l#3@@80|)))) :qid |BucketsL.618:12| :skolemid |4102| :pattern ( (MapType9Select (|lambda#161| |l#0@@86| |l#1@@85| |l#2@@84| |l#3@@80|) $o@@133 $f@@89)) )))
(assert (forall ((arg0@@623 T@U) (arg1@@394 T@U) (arg2@@297 T@U) (arg3@@226 Bool) ) (! (= (type (|lambda#162| arg0@@623 arg1@@394 arg2@@297 arg3@@226)) (MapType9Type refType boolType)) :qid |funType:lambda#162| :pattern ( (|lambda#162| arg0@@623 arg1@@394 arg2@@297 arg3@@226)) )))
(assert (forall (($o@@134 T@U) ($f@@90 T@U) (|l#0@@87| T@U) (|l#1@@86| T@U) (|l#2@@85| T@U) (|l#3@@81| Bool) ) (! (let ((alpha@@97 (FieldTypeInv0 (type $f@@90)))) (=> (and (and (and (and (= (type $o@@134) refType) (= (type $f@@90) (FieldType alpha@@97))) (= (type |l#0@@87|) refType)) (= (type |l#1@@86|) (MapType0Type refType MapType1Type))) (= (type |l#2@@85|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#162| |l#0@@87| |l#1@@86| |l#2@@85| |l#3@@81|) $o@@134 $f@@90))  (=> (and (not (= $o@@134 |l#0@@87|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@86| $o@@134) |l#2@@85|))) |l#3@@81|)))) :qid |BucketsL.618:12| :skolemid |4103| :pattern ( (MapType9Select (|lambda#162| |l#0@@87| |l#1@@86| |l#2@@85| |l#3@@81|) $o@@134 $f@@90)) )))
(assert (forall ((|$w#0@@4| T@U) (|l#0@@88| T@U) (|l#1@@87| T@U) (|l#2@@86| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@4|) BoxType) (= (type |l#0@@88|) TyType)) (= (type |l#1@@87|) (MapType0Type BoxType boolType))) (= (type |l#2@@86|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#173| |l#0@@88| |l#1@@87| |l#2@@86|) |$w#0@@4|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@4|) |l#0@@88|) (and (U_2_bool (MapType0Select |l#1@@87| |$w#0@@4|)) (U_2_bool (MapType0Select |l#2@@86| |$w#0@@4|)))))) :qid |BucketsL.627:7| :skolemid |4104| :pattern ( (MapType0Select (|lambda#173| |l#0@@88| |l#1@@87| |l#2@@86|) |$w#0@@4|)) )))
(assert (forall ((arg0@@624 T@U) (arg1@@395 T@U) (arg2@@298 T@U) (arg3@@227 Bool) ) (! (= (type (|lambda#181| arg0@@624 arg1@@395 arg2@@298 arg3@@227)) (MapType9Type refType boolType)) :qid |funType:lambda#181| :pattern ( (|lambda#181| arg0@@624 arg1@@395 arg2@@298 arg3@@227)) )))
(assert (forall (($o@@135 T@U) ($f@@91 T@U) (|l#0@@89| T@U) (|l#1@@88| T@U) (|l#2@@87| T@U) (|l#3@@82| Bool) ) (! (let ((alpha@@98 (FieldTypeInv0 (type $f@@91)))) (=> (and (and (and (and (= (type $o@@135) refType) (= (type $f@@91) (FieldType alpha@@98))) (= (type |l#0@@89|) refType)) (= (type |l#1@@88|) (MapType0Type refType MapType1Type))) (= (type |l#2@@87|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#181| |l#0@@89| |l#1@@88| |l#2@@87| |l#3@@82|) $o@@135 $f@@91))  (=> (and (not (= $o@@135 |l#0@@89|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@88| $o@@135) |l#2@@87|))) |l#3@@82|)))) :qid |BucketsL.624:22| :skolemid |4105| :pattern ( (MapType9Select (|lambda#181| |l#0@@89| |l#1@@88| |l#2@@87| |l#3@@82|) $o@@135 $f@@91)) )))
(assert (forall ((arg0@@625 T@U) (arg1@@396 T@U) (arg2@@299 T@U) (arg3@@228 Bool) ) (! (= (type (|lambda#182| arg0@@625 arg1@@396 arg2@@299 arg3@@228)) (MapType9Type refType boolType)) :qid |funType:lambda#182| :pattern ( (|lambda#182| arg0@@625 arg1@@396 arg2@@299 arg3@@228)) )))
(assert (forall (($o@@136 T@U) ($f@@92 T@U) (|l#0@@90| T@U) (|l#1@@89| T@U) (|l#2@@88| T@U) (|l#3@@83| Bool) ) (! (let ((alpha@@99 (FieldTypeInv0 (type $f@@92)))) (=> (and (and (and (and (= (type $o@@136) refType) (= (type $f@@92) (FieldType alpha@@99))) (= (type |l#0@@90|) refType)) (= (type |l#1@@89|) (MapType0Type refType MapType1Type))) (= (type |l#2@@88|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#182| |l#0@@90| |l#1@@89| |l#2@@88| |l#3@@83|) $o@@136 $f@@92))  (=> (and (not (= $o@@136 |l#0@@90|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@89| $o@@136) |l#2@@88|))) |l#3@@83|)))) :qid |BucketsL.624:22| :skolemid |4106| :pattern ( (MapType9Select (|lambda#182| |l#0@@90| |l#1@@89| |l#2@@88| |l#3@@83|) $o@@136 $f@@92)) )))
(assert (forall ((|$w#0@@5| T@U) (|l#0@@91| T@U) (|l#1@@90| T@U) (|l#2@@89| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@5|) BoxType) (= (type |l#0@@91|) TyType)) (= (type |l#1@@90|) (MapType0Type BoxType boolType))) (= (type |l#2@@89|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#193| |l#0@@91| |l#1@@90| |l#2@@89|) |$w#0@@5|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@5|) |l#0@@91|) (and (U_2_bool (MapType0Select |l#1@@90| |$w#0@@5|)) (not (U_2_bool (MapType0Select |l#2@@89| |$w#0@@5|))))))) :qid |BucketsL.633:7| :skolemid |4107| :pattern ( (MapType0Select (|lambda#193| |l#0@@91| |l#1@@90| |l#2@@89|) |$w#0@@5|)) )))
(assert (forall ((arg0@@626 T@U) (arg1@@397 T@U) (arg2@@300 T@U) (arg3@@229 Bool) ) (! (= (type (|lambda#201| arg0@@626 arg1@@397 arg2@@300 arg3@@229)) (MapType9Type refType boolType)) :qid |funType:lambda#201| :pattern ( (|lambda#201| arg0@@626 arg1@@397 arg2@@300 arg3@@229)) )))
(assert (forall (($o@@137 T@U) ($f@@93 T@U) (|l#0@@92| T@U) (|l#1@@91| T@U) (|l#2@@90| T@U) (|l#3@@84| Bool) ) (! (let ((alpha@@100 (FieldTypeInv0 (type $f@@93)))) (=> (and (and (and (and (= (type $o@@137) refType) (= (type $f@@93) (FieldType alpha@@100))) (= (type |l#0@@92|) refType)) (= (type |l#1@@91|) (MapType0Type refType MapType1Type))) (= (type |l#2@@90|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#201| |l#0@@92| |l#1@@91| |l#2@@90| |l#3@@84|) $o@@137 $f@@93))  (=> (and (not (= $o@@137 |l#0@@92|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@91| $o@@137) |l#2@@90|))) |l#3@@84|)))) :qid |BucketsL.630:22| :skolemid |4108| :pattern ( (MapType9Select (|lambda#201| |l#0@@92| |l#1@@91| |l#2@@90| |l#3@@84|) $o@@137 $f@@93)) )))
(assert (forall ((arg0@@627 T@U) (arg1@@398 T@U) (arg2@@301 T@U) (arg3@@230 Bool) ) (! (= (type (|lambda#202| arg0@@627 arg1@@398 arg2@@301 arg3@@230)) (MapType9Type refType boolType)) :qid |funType:lambda#202| :pattern ( (|lambda#202| arg0@@627 arg1@@398 arg2@@301 arg3@@230)) )))
(assert (forall (($o@@138 T@U) ($f@@94 T@U) (|l#0@@93| T@U) (|l#1@@92| T@U) (|l#2@@91| T@U) (|l#3@@85| Bool) ) (! (let ((alpha@@101 (FieldTypeInv0 (type $f@@94)))) (=> (and (and (and (and (= (type $o@@138) refType) (= (type $f@@94) (FieldType alpha@@101))) (= (type |l#0@@93|) refType)) (= (type |l#1@@92|) (MapType0Type refType MapType1Type))) (= (type |l#2@@91|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#202| |l#0@@93| |l#1@@92| |l#2@@91| |l#3@@85|) $o@@138 $f@@94))  (=> (and (not (= $o@@138 |l#0@@93|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@92| $o@@138) |l#2@@91|))) |l#3@@85|)))) :qid |BucketsL.630:22| :skolemid |4109| :pattern ( (MapType9Select (|lambda#202| |l#0@@93| |l#1@@92| |l#2@@91| |l#3@@85|) $o@@138 $f@@94)) )))
(assert (forall ((arg0@@628 T@U) (arg1@@399 T@U) (arg2@@302 T@U) (arg3@@231 Bool) ) (! (= (type (|lambda#213| arg0@@628 arg1@@399 arg2@@302 arg3@@231)) (MapType9Type refType boolType)) :qid |funType:lambda#213| :pattern ( (|lambda#213| arg0@@628 arg1@@399 arg2@@302 arg3@@231)) )))
(assert (forall (($o@@139 T@U) ($f@@95 T@U) (|l#0@@94| T@U) (|l#1@@93| T@U) (|l#2@@92| T@U) (|l#3@@86| Bool) ) (! (let ((alpha@@102 (FieldTypeInv0 (type $f@@95)))) (=> (and (and (and (and (= (type $o@@139) refType) (= (type $f@@95) (FieldType alpha@@102))) (= (type |l#0@@94|) refType)) (= (type |l#1@@93|) (MapType0Type refType MapType1Type))) (= (type |l#2@@92|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#213| |l#0@@94| |l#1@@93| |l#2@@92| |l#3@@86|) $o@@139 $f@@95))  (=> (and (not (= $o@@139 |l#0@@94|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@93| $o@@139) |l#2@@92|))) |l#3@@86|)))) :qid |BucketsL.636:9| :skolemid |4110| :pattern ( (MapType9Select (|lambda#213| |l#0@@94| |l#1@@93| |l#2@@92| |l#3@@86|) $o@@139 $f@@95)) )))
(assert (forall ((arg0@@629 T@U) (arg1@@400 T@U) (arg2@@303 T@U) (arg3@@232 Bool) ) (! (= (type (|lambda#214| arg0@@629 arg1@@400 arg2@@303 arg3@@232)) (MapType9Type refType boolType)) :qid |funType:lambda#214| :pattern ( (|lambda#214| arg0@@629 arg1@@400 arg2@@303 arg3@@232)) )))
(assert (forall (($o@@140 T@U) ($f@@96 T@U) (|l#0@@95| T@U) (|l#1@@94| T@U) (|l#2@@93| T@U) (|l#3@@87| Bool) ) (! (let ((alpha@@103 (FieldTypeInv0 (type $f@@96)))) (=> (and (and (and (and (= (type $o@@140) refType) (= (type $f@@96) (FieldType alpha@@103))) (= (type |l#0@@95|) refType)) (= (type |l#1@@94|) (MapType0Type refType MapType1Type))) (= (type |l#2@@93|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#214| |l#0@@95| |l#1@@94| |l#2@@93| |l#3@@87|) $o@@140 $f@@96))  (=> (and (not (= $o@@140 |l#0@@95|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@94| $o@@140) |l#2@@93|))) |l#3@@87|)))) :qid |BucketsL.644:9| :skolemid |4111| :pattern ( (MapType9Select (|lambda#214| |l#0@@95| |l#1@@94| |l#2@@93| |l#3@@87|) $o@@140 $f@@96)) )))
(assert (forall ((arg0@@630 T@U) (arg1@@401 T@U) (arg2@@304 T@U) (arg3@@233 Bool) ) (! (= (type (|lambda#215| arg0@@630 arg1@@401 arg2@@304 arg3@@233)) (MapType9Type refType boolType)) :qid |funType:lambda#215| :pattern ( (|lambda#215| arg0@@630 arg1@@401 arg2@@304 arg3@@233)) )))
(assert (forall (($o@@141 T@U) ($f@@97 T@U) (|l#0@@96| T@U) (|l#1@@95| T@U) (|l#2@@94| T@U) (|l#3@@88| Bool) ) (! (let ((alpha@@104 (FieldTypeInv0 (type $f@@97)))) (=> (and (and (and (and (= (type $o@@141) refType) (= (type $f@@97) (FieldType alpha@@104))) (= (type |l#0@@96|) refType)) (= (type |l#1@@95|) (MapType0Type refType MapType1Type))) (= (type |l#2@@94|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#215| |l#0@@96| |l#1@@95| |l#2@@94| |l#3@@88|) $o@@141 $f@@97))  (=> (and (not (= $o@@141 |l#0@@96|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@95| $o@@141) |l#2@@94|))) |l#3@@88|)))) :qid |BucketsL.654:13| :skolemid |4112| :pattern ( (MapType9Select (|lambda#215| |l#0@@96| |l#1@@95| |l#2@@94| |l#3@@88|) $o@@141 $f@@97)) )))
(assert (forall ((arg0@@631 T@U) (arg1@@402 T@U) (arg2@@305 T@U) (arg3@@234 Bool) ) (! (= (type (|lambda#216| arg0@@631 arg1@@402 arg2@@305 arg3@@234)) (MapType9Type refType boolType)) :qid |funType:lambda#216| :pattern ( (|lambda#216| arg0@@631 arg1@@402 arg2@@305 arg3@@234)) )))
(assert (forall (($o@@142 T@U) ($f@@98 T@U) (|l#0@@97| T@U) (|l#1@@96| T@U) (|l#2@@95| T@U) (|l#3@@89| Bool) ) (! (let ((alpha@@105 (FieldTypeInv0 (type $f@@98)))) (=> (and (and (and (and (= (type $o@@142) refType) (= (type $f@@98) (FieldType alpha@@105))) (= (type |l#0@@97|) refType)) (= (type |l#1@@96|) (MapType0Type refType MapType1Type))) (= (type |l#2@@95|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#216| |l#0@@97| |l#1@@96| |l#2@@95| |l#3@@89|) $o@@142 $f@@98))  (=> (and (not (= $o@@142 |l#0@@97|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@96| $o@@142) |l#2@@95|))) |l#3@@89|)))) :qid |BucketsL.654:13| :skolemid |4113| :pattern ( (MapType9Select (|lambda#216| |l#0@@97| |l#1@@96| |l#2@@95| |l#3@@89|) $o@@142 $f@@98)) )))
(assert (forall ((arg0@@632 T@U) (arg1@@403 T@U) (arg2@@306 T@U) (arg3@@235 Bool) ) (! (= (type (|lambda#217| arg0@@632 arg1@@403 arg2@@306 arg3@@235)) (MapType9Type refType boolType)) :qid |funType:lambda#217| :pattern ( (|lambda#217| arg0@@632 arg1@@403 arg2@@306 arg3@@235)) )))
(assert (forall (($o@@143 T@U) ($f@@99 T@U) (|l#0@@98| T@U) (|l#1@@97| T@U) (|l#2@@96| T@U) (|l#3@@90| Bool) ) (! (let ((alpha@@106 (FieldTypeInv0 (type $f@@99)))) (=> (and (and (and (and (= (type $o@@143) refType) (= (type $f@@99) (FieldType alpha@@106))) (= (type |l#0@@98|) refType)) (= (type |l#1@@97|) (MapType0Type refType MapType1Type))) (= (type |l#2@@96|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#217| |l#0@@98| |l#1@@97| |l#2@@96| |l#3@@90|) $o@@143 $f@@99))  (=> (and (not (= $o@@143 |l#0@@98|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@97| $o@@143) |l#2@@96|))) |l#3@@90|)))) :qid |BucketsL.659:13| :skolemid |4114| :pattern ( (MapType9Select (|lambda#217| |l#0@@98| |l#1@@97| |l#2@@96| |l#3@@90|) $o@@143 $f@@99)) )))
(assert (forall ((arg0@@633 T@U) (arg1@@404 T@U) (arg2@@307 T@U) (arg3@@236 Bool) ) (! (= (type (|lambda#218| arg0@@633 arg1@@404 arg2@@307 arg3@@236)) (MapType9Type refType boolType)) :qid |funType:lambda#218| :pattern ( (|lambda#218| arg0@@633 arg1@@404 arg2@@307 arg3@@236)) )))
(assert (forall (($o@@144 T@U) ($f@@100 T@U) (|l#0@@99| T@U) (|l#1@@98| T@U) (|l#2@@97| T@U) (|l#3@@91| Bool) ) (! (let ((alpha@@107 (FieldTypeInv0 (type $f@@100)))) (=> (and (and (and (and (= (type $o@@144) refType) (= (type $f@@100) (FieldType alpha@@107))) (= (type |l#0@@99|) refType)) (= (type |l#1@@98|) (MapType0Type refType MapType1Type))) (= (type |l#2@@97|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#218| |l#0@@99| |l#1@@98| |l#2@@97| |l#3@@91|) $o@@144 $f@@100))  (=> (and (not (= $o@@144 |l#0@@99|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@98| $o@@144) |l#2@@97|))) |l#3@@91|)))) :qid |BucketsL.659:13| :skolemid |4115| :pattern ( (MapType9Select (|lambda#218| |l#0@@99| |l#1@@98| |l#2@@97| |l#3@@91|) $o@@144 $f@@100)) )))
(assert (forall ((|$w#0@@6| T@U) (|l#0@@100| T@U) (|l#1@@99| T@U) (|l#2@@98| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@6|) BoxType) (= (type |l#0@@100|) TyType)) (= (type |l#1@@99|) (MapType0Type BoxType boolType))) (= (type |l#2@@98|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#219| |l#0@@100| |l#1@@99| |l#2@@98|) |$w#0@@6|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@6|) |l#0@@100|) (or (U_2_bool (MapType0Select |l#1@@99| |$w#0@@6|)) (U_2_bool (MapType0Select |l#2@@98| |$w#0@@6|)))))) :qid |BucketsL.669:7| :skolemid |4116| :pattern ( (MapType0Select (|lambda#219| |l#0@@100| |l#1@@99| |l#2@@98|) |$w#0@@6|)) )))
(assert (forall ((arg0@@634 T@U) (arg1@@405 T@U) (arg2@@308 T@U) (arg3@@237 Bool) ) (! (= (type (|lambda#227| arg0@@634 arg1@@405 arg2@@308 arg3@@237)) (MapType9Type refType boolType)) :qid |funType:lambda#227| :pattern ( (|lambda#227| arg0@@634 arg1@@405 arg2@@308 arg3@@237)) )))
(assert (forall (($o@@145 T@U) ($f@@101 T@U) (|l#0@@101| T@U) (|l#1@@100| T@U) (|l#2@@99| T@U) (|l#3@@92| Bool) ) (! (let ((alpha@@108 (FieldTypeInv0 (type $f@@101)))) (=> (and (and (and (and (= (type $o@@145) refType) (= (type $f@@101) (FieldType alpha@@108))) (= (type |l#0@@101|) refType)) (= (type |l#1@@100|) (MapType0Type refType MapType1Type))) (= (type |l#2@@99|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#227| |l#0@@101| |l#1@@100| |l#2@@99| |l#3@@92|) $o@@145 $f@@101))  (=> (and (not (= $o@@145 |l#0@@101|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@100| $o@@145) |l#2@@99|))) |l#3@@92|)))) :qid |BucketsL.666:22| :skolemid |4117| :pattern ( (MapType9Select (|lambda#227| |l#0@@101| |l#1@@100| |l#2@@99| |l#3@@92|) $o@@145 $f@@101)) )))
(assert (forall ((arg0@@635 T@U) (arg1@@406 T@U) (arg2@@309 T@U) (arg3@@238 Bool) ) (! (= (type (|lambda#228| arg0@@635 arg1@@406 arg2@@309 arg3@@238)) (MapType9Type refType boolType)) :qid |funType:lambda#228| :pattern ( (|lambda#228| arg0@@635 arg1@@406 arg2@@309 arg3@@238)) )))
(assert (forall (($o@@146 T@U) ($f@@102 T@U) (|l#0@@102| T@U) (|l#1@@101| T@U) (|l#2@@100| T@U) (|l#3@@93| Bool) ) (! (let ((alpha@@109 (FieldTypeInv0 (type $f@@102)))) (=> (and (and (and (and (= (type $o@@146) refType) (= (type $f@@102) (FieldType alpha@@109))) (= (type |l#0@@102|) refType)) (= (type |l#1@@101|) (MapType0Type refType MapType1Type))) (= (type |l#2@@100|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#228| |l#0@@102| |l#1@@101| |l#2@@100| |l#3@@93|) $o@@146 $f@@102))  (=> (and (not (= $o@@146 |l#0@@102|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@101| $o@@146) |l#2@@100|))) |l#3@@93|)))) :qid |BucketsL.666:22| :skolemid |4118| :pattern ( (MapType9Select (|lambda#228| |l#0@@102| |l#1@@101| |l#2@@100| |l#3@@93|) $o@@146 $f@@102)) )))
(assert (forall ((arg0@@636 T@U) (arg1@@407 T@U) (arg2@@310 T@U) (arg3@@239 Bool) ) (! (= (type (|lambda#239| arg0@@636 arg1@@407 arg2@@310 arg3@@239)) (MapType9Type refType boolType)) :qid |funType:lambda#239| :pattern ( (|lambda#239| arg0@@636 arg1@@407 arg2@@310 arg3@@239)) )))
(assert (forall (($o@@147 T@U) ($f@@103 T@U) (|l#0@@103| T@U) (|l#1@@102| T@U) (|l#2@@101| T@U) (|l#3@@94| Bool) ) (! (let ((alpha@@110 (FieldTypeInv0 (type $f@@103)))) (=> (and (and (and (and (= (type $o@@147) refType) (= (type $f@@103) (FieldType alpha@@110))) (= (type |l#0@@103|) refType)) (= (type |l#1@@102|) (MapType0Type refType MapType1Type))) (= (type |l#2@@101|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#239| |l#0@@103| |l#1@@102| |l#2@@101| |l#3@@94|) $o@@147 $f@@103))  (=> (and (not (= $o@@147 |l#0@@103|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@102| $o@@147) |l#2@@101|))) |l#3@@94|)))) :qid |BucketsL.675:22| :skolemid |4119| :pattern ( (MapType9Select (|lambda#239| |l#0@@103| |l#1@@102| |l#2@@101| |l#3@@94|) $o@@147 $f@@103)) )))
(assert (forall ((arg0@@637 T@U) (arg1@@408 T@U) (arg2@@311 T@U) (arg3@@240 Bool) ) (! (= (type (|lambda#240| arg0@@637 arg1@@408 arg2@@311 arg3@@240)) (MapType9Type refType boolType)) :qid |funType:lambda#240| :pattern ( (|lambda#240| arg0@@637 arg1@@408 arg2@@311 arg3@@240)) )))
(assert (forall (($o@@148 T@U) ($f@@104 T@U) (|l#0@@104| T@U) (|l#1@@103| T@U) (|l#2@@102| T@U) (|l#3@@95| Bool) ) (! (let ((alpha@@111 (FieldTypeInv0 (type $f@@104)))) (=> (and (and (and (and (= (type $o@@148) refType) (= (type $f@@104) (FieldType alpha@@111))) (= (type |l#0@@104|) refType)) (= (type |l#1@@103|) (MapType0Type refType MapType1Type))) (= (type |l#2@@102|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#240| |l#0@@104| |l#1@@103| |l#2@@102| |l#3@@95|) $o@@148 $f@@104))  (=> (and (not (= $o@@148 |l#0@@104|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@103| $o@@148) |l#2@@102|))) |l#3@@95|)))) :qid |BucketsL.675:22| :skolemid |4120| :pattern ( (MapType9Select (|lambda#240| |l#0@@104| |l#1@@103| |l#2@@102| |l#3@@95|) $o@@148 $f@@104)) )))
(assert (forall ((arg0@@638 T@U) (arg1@@409 T@U) (arg2@@312 T@U) (arg3@@241 Bool) ) (! (= (type (|lambda#241| arg0@@638 arg1@@409 arg2@@312 arg3@@241)) (MapType9Type refType boolType)) :qid |funType:lambda#241| :pattern ( (|lambda#241| arg0@@638 arg1@@409 arg2@@312 arg3@@241)) )))
(assert (forall (($o@@149 T@U) ($f@@105 T@U) (|l#0@@105| T@U) (|l#1@@104| T@U) (|l#2@@103| T@U) (|l#3@@96| Bool) ) (! (let ((alpha@@112 (FieldTypeInv0 (type $f@@105)))) (=> (and (and (and (and (= (type $o@@149) refType) (= (type $f@@105) (FieldType alpha@@112))) (= (type |l#0@@105|) refType)) (= (type |l#1@@104|) (MapType0Type refType MapType1Type))) (= (type |l#2@@103|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#241| |l#0@@105| |l#1@@104| |l#2@@103| |l#3@@96|) $o@@149 $f@@105))  (=> (and (not (= $o@@149 |l#0@@105|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@104| $o@@149) |l#2@@103|))) |l#3@@96|)))) :qid |BucketsL.681:9| :skolemid |4121| :pattern ( (MapType9Select (|lambda#241| |l#0@@105| |l#1@@104| |l#2@@103| |l#3@@96|) $o@@149 $f@@105)) )))
(assert (forall ((arg0@@639 T@U) (arg1@@410 T@U) (arg2@@313 T@U) (arg3@@242 Bool) ) (! (= (type (|lambda#242| arg0@@639 arg1@@410 arg2@@313 arg3@@242)) (MapType9Type refType boolType)) :qid |funType:lambda#242| :pattern ( (|lambda#242| arg0@@639 arg1@@410 arg2@@313 arg3@@242)) )))
(assert (forall (($o@@150 T@U) ($f@@106 T@U) (|l#0@@106| T@U) (|l#1@@105| T@U) (|l#2@@104| T@U) (|l#3@@97| Bool) ) (! (let ((alpha@@113 (FieldTypeInv0 (type $f@@106)))) (=> (and (and (and (and (= (type $o@@150) refType) (= (type $f@@106) (FieldType alpha@@113))) (= (type |l#0@@106|) refType)) (= (type |l#1@@105|) (MapType0Type refType MapType1Type))) (= (type |l#2@@104|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#242| |l#0@@106| |l#1@@105| |l#2@@104| |l#3@@97|) $o@@150 $f@@106))  (=> (and (not (= $o@@150 |l#0@@106|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@105| $o@@150) |l#2@@104|))) |l#3@@97|)))) :qid |BucketsL.697:9| :skolemid |4122| :pattern ( (MapType9Select (|lambda#242| |l#0@@106| |l#1@@105| |l#2@@104| |l#3@@97|) $o@@150 $f@@106)) )))
(assert (forall ((arg0@@640 T@U) (arg1@@411 T@U) (arg2@@314 T@U) (arg3@@243 Bool) ) (! (= (type (|lambda#243| arg0@@640 arg1@@411 arg2@@314 arg3@@243)) (MapType9Type refType boolType)) :qid |funType:lambda#243| :pattern ( (|lambda#243| arg0@@640 arg1@@411 arg2@@314 arg3@@243)) )))
(assert (forall (($o@@151 T@U) ($f@@107 T@U) (|l#0@@107| T@U) (|l#1@@106| T@U) (|l#2@@105| T@U) (|l#3@@98| Bool) ) (! (let ((alpha@@114 (FieldTypeInv0 (type $f@@107)))) (=> (and (and (and (and (= (type $o@@151) refType) (= (type $f@@107) (FieldType alpha@@114))) (= (type |l#0@@107|) refType)) (= (type |l#1@@106|) (MapType0Type refType MapType1Type))) (= (type |l#2@@105|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#243| |l#0@@107| |l#1@@106| |l#2@@105| |l#3@@98|) $o@@151 $f@@107))  (=> (and (not (= $o@@151 |l#0@@107|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@106| $o@@151) |l#2@@105|))) |l#3@@98|)))) :qid |BucketsL.714:9| :skolemid |4123| :pattern ( (MapType9Select (|lambda#243| |l#0@@107| |l#1@@106| |l#2@@105| |l#3@@98|) $o@@151 $f@@107)) )))
(assert (forall ((arg0@@641 T@U) (arg1@@412 T@U) (arg2@@315 T@U) (arg3@@244 Bool) ) (! (= (type (|lambda#244| arg0@@641 arg1@@412 arg2@@315 arg3@@244)) (MapType9Type refType boolType)) :qid |funType:lambda#244| :pattern ( (|lambda#244| arg0@@641 arg1@@412 arg2@@315 arg3@@244)) )))
(assert (forall (($o@@152 T@U) ($f@@108 T@U) (|l#0@@108| T@U) (|l#1@@107| T@U) (|l#2@@106| T@U) (|l#3@@99| Bool) ) (! (let ((alpha@@115 (FieldTypeInv0 (type $f@@108)))) (=> (and (and (and (and (= (type $o@@152) refType) (= (type $f@@108) (FieldType alpha@@115))) (= (type |l#0@@108|) refType)) (= (type |l#1@@107|) (MapType0Type refType MapType1Type))) (= (type |l#2@@106|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#244| |l#0@@108| |l#1@@107| |l#2@@106| |l#3@@99|) $o@@152 $f@@108))  (=> (and (not (= $o@@152 |l#0@@108|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@107| $o@@152) |l#2@@106|))) |l#3@@99|)))) :qid |BucketsL.742:13| :skolemid |4124| :pattern ( (MapType9Select (|lambda#244| |l#0@@108| |l#1@@107| |l#2@@106| |l#3@@99|) $o@@152 $f@@108)) )))
(assert (forall ((arg0@@642 T@U) (arg1@@413 T@U) (arg2@@316 T@U) (arg3@@245 Bool) ) (! (= (type (|lambda#245| arg0@@642 arg1@@413 arg2@@316 arg3@@245)) (MapType9Type refType boolType)) :qid |funType:lambda#245| :pattern ( (|lambda#245| arg0@@642 arg1@@413 arg2@@316 arg3@@245)) )))
(assert (forall (($o@@153 T@U) ($f@@109 T@U) (|l#0@@109| T@U) (|l#1@@108| T@U) (|l#2@@107| T@U) (|l#3@@100| Bool) ) (! (let ((alpha@@116 (FieldTypeInv0 (type $f@@109)))) (=> (and (and (and (and (= (type $o@@153) refType) (= (type $f@@109) (FieldType alpha@@116))) (= (type |l#0@@109|) refType)) (= (type |l#1@@108|) (MapType0Type refType MapType1Type))) (= (type |l#2@@107|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#245| |l#0@@109| |l#1@@108| |l#2@@107| |l#3@@100|) $o@@153 $f@@109))  (=> (and (not (= $o@@153 |l#0@@109|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@108| $o@@153) |l#2@@107|))) |l#3@@100|)))) :qid |BucketsL.742:13| :skolemid |4125| :pattern ( (MapType9Select (|lambda#245| |l#0@@109| |l#1@@108| |l#2@@107| |l#3@@100|) $o@@153 $f@@109)) )))
(assert (forall ((arg0@@643 T@U) (arg1@@414 T@U) (arg2@@317 T@U) (arg3@@246 Bool) ) (! (= (type (|lambda#246| arg0@@643 arg1@@414 arg2@@317 arg3@@246)) (MapType9Type refType boolType)) :qid |funType:lambda#246| :pattern ( (|lambda#246| arg0@@643 arg1@@414 arg2@@317 arg3@@246)) )))
(assert (forall (($o@@154 T@U) ($f@@110 T@U) (|l#0@@110| T@U) (|l#1@@109| T@U) (|l#2@@108| T@U) (|l#3@@101| Bool) ) (! (let ((alpha@@117 (FieldTypeInv0 (type $f@@110)))) (=> (and (and (and (and (= (type $o@@154) refType) (= (type $f@@110) (FieldType alpha@@117))) (= (type |l#0@@110|) refType)) (= (type |l#1@@109|) (MapType0Type refType MapType1Type))) (= (type |l#2@@108|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#246| |l#0@@110| |l#1@@109| |l#2@@108| |l#3@@101|) $o@@154 $f@@110))  (=> (and (not (= $o@@154 |l#0@@110|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@109| $o@@154) |l#2@@108|))) |l#3@@101|)))) :qid |BucketsL.747:13| :skolemid |4126| :pattern ( (MapType9Select (|lambda#246| |l#0@@110| |l#1@@109| |l#2@@108| |l#3@@101|) $o@@154 $f@@110)) )))
(assert (forall ((arg0@@644 T@U) (arg1@@415 T@U) (arg2@@318 T@U) (arg3@@247 Bool) ) (! (= (type (|lambda#247| arg0@@644 arg1@@415 arg2@@318 arg3@@247)) (MapType9Type refType boolType)) :qid |funType:lambda#247| :pattern ( (|lambda#247| arg0@@644 arg1@@415 arg2@@318 arg3@@247)) )))
(assert (forall (($o@@155 T@U) ($f@@111 T@U) (|l#0@@111| T@U) (|l#1@@110| T@U) (|l#2@@109| T@U) (|l#3@@102| Bool) ) (! (let ((alpha@@118 (FieldTypeInv0 (type $f@@111)))) (=> (and (and (and (and (= (type $o@@155) refType) (= (type $f@@111) (FieldType alpha@@118))) (= (type |l#0@@111|) refType)) (= (type |l#1@@110|) (MapType0Type refType MapType1Type))) (= (type |l#2@@109|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#247| |l#0@@111| |l#1@@110| |l#2@@109| |l#3@@102|) $o@@155 $f@@111))  (=> (and (not (= $o@@155 |l#0@@111|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@110| $o@@155) |l#2@@109|))) |l#3@@102|)))) :qid |BucketsL.747:13| :skolemid |4127| :pattern ( (MapType9Select (|lambda#247| |l#0@@111| |l#1@@110| |l#2@@109| |l#3@@102|) $o@@155 $f@@111)) )))
(assert (forall ((arg0@@645 T@U) (arg1@@416 T@U) (arg2@@319 T@U) (arg3@@248 Bool) ) (! (= (type (|lambda#248| arg0@@645 arg1@@416 arg2@@319 arg3@@248)) (MapType9Type refType boolType)) :qid |funType:lambda#248| :pattern ( (|lambda#248| arg0@@645 arg1@@416 arg2@@319 arg3@@248)) )))
(assert (forall (($o@@156 T@U) ($f@@112 T@U) (|l#0@@112| T@U) (|l#1@@111| T@U) (|l#2@@110| T@U) (|l#3@@103| Bool) ) (! (let ((alpha@@119 (FieldTypeInv0 (type $f@@112)))) (=> (and (and (and (and (= (type $o@@156) refType) (= (type $f@@112) (FieldType alpha@@119))) (= (type |l#0@@112|) refType)) (= (type |l#1@@111|) (MapType0Type refType MapType1Type))) (= (type |l#2@@110|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#248| |l#0@@112| |l#1@@111| |l#2@@110| |l#3@@103|) $o@@156 $f@@112))  (=> (and (not (= $o@@156 |l#0@@112|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@111| $o@@156) |l#2@@110|))) |l#3@@103|)))) :qid |BucketsL.753:12| :skolemid |4128| :pattern ( (MapType9Select (|lambda#248| |l#0@@112| |l#1@@111| |l#2@@110| |l#3@@103|) $o@@156 $f@@112)) )))
(assert (forall ((arg0@@646 T@U) (arg1@@417 T@U) (arg2@@320 T@U) (arg3@@249 Bool) ) (! (= (type (|lambda#249| arg0@@646 arg1@@417 arg2@@320 arg3@@249)) (MapType9Type refType boolType)) :qid |funType:lambda#249| :pattern ( (|lambda#249| arg0@@646 arg1@@417 arg2@@320 arg3@@249)) )))
(assert (forall (($o@@157 T@U) ($f@@113 T@U) (|l#0@@113| T@U) (|l#1@@112| T@U) (|l#2@@111| T@U) (|l#3@@104| Bool) ) (! (let ((alpha@@120 (FieldTypeInv0 (type $f@@113)))) (=> (and (and (and (and (= (type $o@@157) refType) (= (type $f@@113) (FieldType alpha@@120))) (= (type |l#0@@113|) refType)) (= (type |l#1@@112|) (MapType0Type refType MapType1Type))) (= (type |l#2@@111|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#249| |l#0@@113| |l#1@@112| |l#2@@111| |l#3@@104|) $o@@157 $f@@113))  (=> (and (not (= $o@@157 |l#0@@113|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@112| $o@@157) |l#2@@111|))) |l#3@@104|)))) :qid |BucketsL.753:12| :skolemid |4129| :pattern ( (MapType9Select (|lambda#249| |l#0@@113| |l#1@@112| |l#2@@111| |l#3@@104|) $o@@157 $f@@113)) )))
(assert (forall ((arg0@@647 T@U) (arg1@@418 T@U) (arg2@@321 T@U) (arg3@@250 Bool) ) (! (= (type (|lambda#250| arg0@@647 arg1@@418 arg2@@321 arg3@@250)) (MapType9Type refType boolType)) :qid |funType:lambda#250| :pattern ( (|lambda#250| arg0@@647 arg1@@418 arg2@@321 arg3@@250)) )))
(assert (forall (($o@@158 T@U) ($f@@114 T@U) (|l#0@@114| T@U) (|l#1@@113| T@U) (|l#2@@112| T@U) (|l#3@@105| Bool) ) (! (let ((alpha@@121 (FieldTypeInv0 (type $f@@114)))) (=> (and (and (and (and (= (type $o@@158) refType) (= (type $f@@114) (FieldType alpha@@121))) (= (type |l#0@@114|) refType)) (= (type |l#1@@113|) (MapType0Type refType MapType1Type))) (= (type |l#2@@112|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#250| |l#0@@114| |l#1@@113| |l#2@@112| |l#3@@105|) $o@@158 $f@@114))  (=> (and (not (= $o@@158 |l#0@@114|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@113| $o@@158) |l#2@@112|))) |l#3@@105|)))) :qid |BucketsL.761:9| :skolemid |4130| :pattern ( (MapType9Select (|lambda#250| |l#0@@114| |l#1@@113| |l#2@@112| |l#3@@105|) $o@@158 $f@@114)) )))
(assert (forall ((|$w#0@@7| T@U) (|l#0@@115| T@U) (|l#1@@114| T@U) (|l#2@@113| T@U) (|l#3@@106| T@U) ) (!  (=> (and (and (and (and (= (type |$w#0@@7|) BoxType) (= (type |l#0@@115|) TyType)) (= (type |l#1@@114|) (MapType0Type BoxType boolType))) (= (type |l#2@@113|) DatatypeTypeType)) (= (type |l#3@@106|) DatatypeTypeType)) (= (U_2_bool (MapType0Select (|lambda#251| |l#0@@115| |l#1@@114| |l#2@@113| |l#3@@106|) |$w#0@@7|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@7|) |l#0@@115|) (and (U_2_bool (MapType0Select |l#1@@114| |$w#0@@7|)) (MapSpec.__default.InRange |l#2@@113| ($Unbox (SeqType BoxType) |$w#0@@7|) |l#3@@106|))))) :qid |BucketsL.777:7| :skolemid |4131| :pattern ( (MapType0Select (|lambda#251| |l#0@@115| |l#1@@114| |l#2@@113| |l#3@@106|) |$w#0@@7|)) )))
(assert (forall ((arg0@@648 T@U) (arg1@@419 T@U) (arg2@@322 T@U) (arg3@@251 Bool) ) (! (= (type (|lambda#259| arg0@@648 arg1@@419 arg2@@322 arg3@@251)) (MapType9Type refType boolType)) :qid |funType:lambda#259| :pattern ( (|lambda#259| arg0@@648 arg1@@419 arg2@@322 arg3@@251)) )))
(assert (forall (($o@@159 T@U) ($f@@115 T@U) (|l#0@@116| T@U) (|l#1@@115| T@U) (|l#2@@114| T@U) (|l#3@@107| Bool) ) (! (let ((alpha@@122 (FieldTypeInv0 (type $f@@115)))) (=> (and (and (and (and (= (type $o@@159) refType) (= (type $f@@115) (FieldType alpha@@122))) (= (type |l#0@@116|) refType)) (= (type |l#1@@115|) (MapType0Type refType MapType1Type))) (= (type |l#2@@114|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#259| |l#0@@116| |l#1@@115| |l#2@@114| |l#3@@107|) $o@@159 $f@@115))  (=> (and (not (= $o@@159 |l#0@@116|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@115| $o@@159) |l#2@@114|))) |l#3@@107|)))) :qid |BucketsL.774:22| :skolemid |4132| :pattern ( (MapType9Select (|lambda#259| |l#0@@116| |l#1@@115| |l#2@@114| |l#3@@107|) $o@@159 $f@@115)) )))
(assert (forall ((arg0@@649 T@U) (arg1@@420 T@U) (arg2@@323 T@U) (arg3@@252 Bool) ) (! (= (type (|lambda#260| arg0@@649 arg1@@420 arg2@@323 arg3@@252)) (MapType9Type refType boolType)) :qid |funType:lambda#260| :pattern ( (|lambda#260| arg0@@649 arg1@@420 arg2@@323 arg3@@252)) )))
(assert (forall (($o@@160 T@U) ($f@@116 T@U) (|l#0@@117| T@U) (|l#1@@116| T@U) (|l#2@@115| T@U) (|l#3@@108| Bool) ) (! (let ((alpha@@123 (FieldTypeInv0 (type $f@@116)))) (=> (and (and (and (and (= (type $o@@160) refType) (= (type $f@@116) (FieldType alpha@@123))) (= (type |l#0@@117|) refType)) (= (type |l#1@@116|) (MapType0Type refType MapType1Type))) (= (type |l#2@@115|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#260| |l#0@@117| |l#1@@116| |l#2@@115| |l#3@@108|) $o@@160 $f@@116))  (=> (and (not (= $o@@160 |l#0@@117|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@116| $o@@160) |l#2@@115|))) |l#3@@108|)))) :qid |BucketsL.774:22| :skolemid |4133| :pattern ( (MapType9Select (|lambda#260| |l#0@@117| |l#1@@116| |l#2@@115| |l#3@@108|) $o@@160 $f@@116)) )))
(assert (forall ((|$w#0@@8| T@U) (|l#0@@118| T@U) (|l#1@@117| T@U) (|l#2@@116| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@8|) BoxType) (= (type |l#0@@118|) TyType)) (= (type |l#1@@117|) (MapType0Type BoxType boolType))) (= (type |l#2@@116|) DatatypeTypeType)) (= (U_2_bool (MapType0Select (|lambda#271| |l#0@@118| |l#1@@117| |l#2@@116|) |$w#0@@8|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@8|) |l#0@@118|) (and (U_2_bool (MapType0Select |l#1@@117| |$w#0@@8|)) (MapSpec.__default.LowerBound |l#2@@116| ($Unbox (SeqType BoxType) |$w#0@@8|)))))) :qid |BucketsL.783:7| :skolemid |4134| :pattern ( (MapType0Select (|lambda#271| |l#0@@118| |l#1@@117| |l#2@@116|) |$w#0@@8|)) )))
(assert (forall ((arg0@@650 T@U) (arg1@@421 T@U) (arg2@@324 T@U) (arg3@@253 Bool) ) (! (= (type (|lambda#279| arg0@@650 arg1@@421 arg2@@324 arg3@@253)) (MapType9Type refType boolType)) :qid |funType:lambda#279| :pattern ( (|lambda#279| arg0@@650 arg1@@421 arg2@@324 arg3@@253)) )))
(assert (forall (($o@@161 T@U) ($f@@117 T@U) (|l#0@@119| T@U) (|l#1@@118| T@U) (|l#2@@117| T@U) (|l#3@@109| Bool) ) (! (let ((alpha@@124 (FieldTypeInv0 (type $f@@117)))) (=> (and (and (and (and (= (type $o@@161) refType) (= (type $f@@117) (FieldType alpha@@124))) (= (type |l#0@@119|) refType)) (= (type |l#1@@118|) (MapType0Type refType MapType1Type))) (= (type |l#2@@117|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#279| |l#0@@119| |l#1@@118| |l#2@@117| |l#3@@109|) $o@@161 $f@@117))  (=> (and (not (= $o@@161 |l#0@@119|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@118| $o@@161) |l#2@@117|))) |l#3@@109|)))) :qid |BucketsL.780:22| :skolemid |4135| :pattern ( (MapType9Select (|lambda#279| |l#0@@119| |l#1@@118| |l#2@@117| |l#3@@109|) $o@@161 $f@@117)) )))
(assert (forall ((arg0@@651 T@U) (arg1@@422 T@U) (arg2@@325 T@U) (arg3@@254 Bool) ) (! (= (type (|lambda#280| arg0@@651 arg1@@422 arg2@@325 arg3@@254)) (MapType9Type refType boolType)) :qid |funType:lambda#280| :pattern ( (|lambda#280| arg0@@651 arg1@@422 arg2@@325 arg3@@254)) )))
(assert (forall (($o@@162 T@U) ($f@@118 T@U) (|l#0@@120| T@U) (|l#1@@119| T@U) (|l#2@@118| T@U) (|l#3@@110| Bool) ) (! (let ((alpha@@125 (FieldTypeInv0 (type $f@@118)))) (=> (and (and (and (and (= (type $o@@162) refType) (= (type $f@@118) (FieldType alpha@@125))) (= (type |l#0@@120|) refType)) (= (type |l#1@@119|) (MapType0Type refType MapType1Type))) (= (type |l#2@@118|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#280| |l#0@@120| |l#1@@119| |l#2@@118| |l#3@@110|) $o@@162 $f@@118))  (=> (and (not (= $o@@162 |l#0@@120|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@119| $o@@162) |l#2@@118|))) |l#3@@110|)))) :qid |BucketsL.780:22| :skolemid |4136| :pattern ( (MapType9Select (|lambda#280| |l#0@@120| |l#1@@119| |l#2@@118| |l#3@@110|) $o@@162 $f@@118)) )))
(assert (forall ((|$w#0@@9| T@U) (|l#0@@121| T@U) (|l#1@@120| T@U) (|l#2@@119| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@9|) BoxType) (= (type |l#0@@121|) TyType)) (= (type |l#1@@120|) (MapType0Type BoxType boolType))) (= (type |l#2@@119|) DatatypeTypeType)) (= (U_2_bool (MapType0Select (|lambda#291| |l#0@@121| |l#1@@120| |l#2@@119|) |$w#0@@9|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@9|) |l#0@@121|) (and (U_2_bool (MapType0Select |l#1@@120| |$w#0@@9|)) (MapSpec.__default.UpperBound ($Unbox (SeqType BoxType) |$w#0@@9|) |l#2@@119|))))) :qid |BucketsL.789:7| :skolemid |4137| :pattern ( (MapType0Select (|lambda#291| |l#0@@121| |l#1@@120| |l#2@@119|) |$w#0@@9|)) )))
(assert (forall ((arg0@@652 T@U) (arg1@@423 T@U) (arg2@@326 T@U) (arg3@@255 Bool) ) (! (= (type (|lambda#299| arg0@@652 arg1@@423 arg2@@326 arg3@@255)) (MapType9Type refType boolType)) :qid |funType:lambda#299| :pattern ( (|lambda#299| arg0@@652 arg1@@423 arg2@@326 arg3@@255)) )))
(assert (forall (($o@@163 T@U) ($f@@119 T@U) (|l#0@@122| T@U) (|l#1@@121| T@U) (|l#2@@120| T@U) (|l#3@@111| Bool) ) (! (let ((alpha@@126 (FieldTypeInv0 (type $f@@119)))) (=> (and (and (and (and (= (type $o@@163) refType) (= (type $f@@119) (FieldType alpha@@126))) (= (type |l#0@@122|) refType)) (= (type |l#1@@121|) (MapType0Type refType MapType1Type))) (= (type |l#2@@120|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#299| |l#0@@122| |l#1@@121| |l#2@@120| |l#3@@111|) $o@@163 $f@@119))  (=> (and (not (= $o@@163 |l#0@@122|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@121| $o@@163) |l#2@@120|))) |l#3@@111|)))) :qid |BucketsL.786:22| :skolemid |4138| :pattern ( (MapType9Select (|lambda#299| |l#0@@122| |l#1@@121| |l#2@@120| |l#3@@111|) $o@@163 $f@@119)) )))
(assert (forall ((arg0@@653 T@U) (arg1@@424 T@U) (arg2@@327 T@U) (arg3@@256 Bool) ) (! (= (type (|lambda#300| arg0@@653 arg1@@424 arg2@@327 arg3@@256)) (MapType9Type refType boolType)) :qid |funType:lambda#300| :pattern ( (|lambda#300| arg0@@653 arg1@@424 arg2@@327 arg3@@256)) )))
(assert (forall (($o@@164 T@U) ($f@@120 T@U) (|l#0@@123| T@U) (|l#1@@122| T@U) (|l#2@@121| T@U) (|l#3@@112| Bool) ) (! (let ((alpha@@127 (FieldTypeInv0 (type $f@@120)))) (=> (and (and (and (and (= (type $o@@164) refType) (= (type $f@@120) (FieldType alpha@@127))) (= (type |l#0@@123|) refType)) (= (type |l#1@@122|) (MapType0Type refType MapType1Type))) (= (type |l#2@@121|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#300| |l#0@@123| |l#1@@122| |l#2@@121| |l#3@@112|) $o@@164 $f@@120))  (=> (and (not (= $o@@164 |l#0@@123|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@122| $o@@164) |l#2@@121|))) |l#3@@112|)))) :qid |BucketsL.786:22| :skolemid |4139| :pattern ( (MapType9Select (|lambda#300| |l#0@@123| |l#1@@122| |l#2@@121| |l#3@@112|) $o@@164 $f@@120)) )))
(assert (forall ((|$w#0@@10| T@U) (|l#0@@124| T@U) (|l#1@@123| T@U) (|l#2@@122| T@U) (|l#3@@113| T@U) (|l#4@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#0@@10|) BoxType) (= (type |l#0@@124|) TyType)) (= (type |l#1@@123|) (MapType0Type BoxType boolType))) (= (type |l#2@@122|) (MapType0Type BoxType BoxType))) (= (type |l#3@@113|) DatatypeTypeType)) (= (type |l#4@@0|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#311| |l#0@@124| |l#1@@123| |l#2@@122| |l#3@@113| |l#4@@0|) |$w#0@@10|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@10|) |l#0@@124|) (and (U_2_bool (MapType0Select |l#1@@123| |$w#0@@10|)) (not (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select |l#2@@122| |$w#0@@10|)) |l#3@@113|)) |l#4@@0|)))))) :qid |BucketsL.796:5| :skolemid |4140| :pattern ( (MapType0Select (|lambda#311| |l#0@@124| |l#1@@123| |l#2@@122| |l#3@@113| |l#4@@0|) |$w#0@@10|)) )))
(assert (forall ((|$w#0@@11| T@U) (|l#0@@125| T@U) (|l#1@@124| T@U) ) (!  (=> (and (and (= (type |$w#0@@11|) BoxType) (= (type |l#0@@125|) (MapType0Type BoxType BoxType))) (= (type |l#1@@124|) DatatypeTypeType)) (= (MapType0Select (|lambda#312| |l#0@@125| |l#1@@124|) |$w#0@@11|) ($Box (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select |l#0@@125| |$w#0@@11|)) |l#1@@124|))))) :qid |BucketsL.796:5| :skolemid |4141| :pattern ( (MapType0Select (|lambda#312| |l#0@@125| |l#1@@124|) |$w#0@@11|)) )))
(assert (forall ((arg0@@654 T@U) (arg1@@425 T@U) (arg2@@328 T@U) (arg3@@257 Bool) ) (! (= (type (|lambda#315| arg0@@654 arg1@@425 arg2@@328 arg3@@257)) (MapType9Type refType boolType)) :qid |funType:lambda#315| :pattern ( (|lambda#315| arg0@@654 arg1@@425 arg2@@328 arg3@@257)) )))
(assert (forall (($o@@165 T@U) ($f@@121 T@U) (|l#0@@126| T@U) (|l#1@@125| T@U) (|l#2@@123| T@U) (|l#3@@114| Bool) ) (! (let ((alpha@@128 (FieldTypeInv0 (type $f@@121)))) (=> (and (and (and (and (= (type $o@@165) refType) (= (type $f@@121) (FieldType alpha@@128))) (= (type |l#0@@126|) refType)) (= (type |l#1@@125|) (MapType0Type refType MapType1Type))) (= (type |l#2@@123|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#315| |l#0@@126| |l#1@@125| |l#2@@123| |l#3@@114|) $o@@165 $f@@121))  (=> (and (not (= $o@@165 |l#0@@126|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@125| $o@@165) |l#2@@123|))) |l#3@@114|)))) :qid |BucketsL.794:22| :skolemid |4142| :pattern ( (MapType9Select (|lambda#315| |l#0@@126| |l#1@@125| |l#2@@123| |l#3@@114|) $o@@165 $f@@121)) )))
(assert (forall ((arg0@@655 T@U) (arg1@@426 T@U) (arg2@@329 T@U) (arg3@@258 Bool) ) (! (= (type (|lambda#316| arg0@@655 arg1@@426 arg2@@329 arg3@@258)) (MapType9Type refType boolType)) :qid |funType:lambda#316| :pattern ( (|lambda#316| arg0@@655 arg1@@426 arg2@@329 arg3@@258)) )))
(assert (forall (($o@@166 T@U) ($f@@122 T@U) (|l#0@@127| T@U) (|l#1@@126| T@U) (|l#2@@124| T@U) (|l#3@@115| Bool) ) (! (let ((alpha@@129 (FieldTypeInv0 (type $f@@122)))) (=> (and (and (and (and (= (type $o@@166) refType) (= (type $f@@122) (FieldType alpha@@129))) (= (type |l#0@@127|) refType)) (= (type |l#1@@126|) (MapType0Type refType MapType1Type))) (= (type |l#2@@124|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#316| |l#0@@127| |l#1@@126| |l#2@@124| |l#3@@115|) $o@@166 $f@@122))  (=> (and (not (= $o@@166 |l#0@@127|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@126| $o@@166) |l#2@@124|))) |l#3@@115|)))) :qid |BucketsL.794:22| :skolemid |4143| :pattern ( (MapType9Select (|lambda#316| |l#0@@127| |l#1@@126| |l#2@@124| |l#3@@115|) $o@@166 $f@@122)) )))
(assert (forall ((arg0@@656 T@U) (arg1@@427 T@U) (arg2@@330 T@U) (arg3@@259 Bool) ) (! (= (type (|lambda#319| arg0@@656 arg1@@427 arg2@@330 arg3@@259)) (MapType9Type refType boolType)) :qid |funType:lambda#319| :pattern ( (|lambda#319| arg0@@656 arg1@@427 arg2@@330 arg3@@259)) )))
(assert (forall (($o@@167 T@U) ($f@@123 T@U) (|l#0@@128| T@U) (|l#1@@127| T@U) (|l#2@@125| T@U) (|l#3@@116| Bool) ) (! (let ((alpha@@130 (FieldTypeInv0 (type $f@@123)))) (=> (and (and (and (and (= (type $o@@167) refType) (= (type $f@@123) (FieldType alpha@@130))) (= (type |l#0@@128|) refType)) (= (type |l#1@@127|) (MapType0Type refType MapType1Type))) (= (type |l#2@@125|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#319| |l#0@@128| |l#1@@127| |l#2@@125| |l#3@@116|) $o@@167 $f@@123))  (=> (and (not (= $o@@167 |l#0@@128|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@127| $o@@167) |l#2@@125|))) |l#3@@116|)))) :qid |BucketsL.800:22| :skolemid |4144| :pattern ( (MapType9Select (|lambda#319| |l#0@@128| |l#1@@127| |l#2@@125| |l#3@@116|) $o@@167 $f@@123)) )))
(assert (forall ((arg0@@657 T@U) (arg1@@428 T@U) (arg2@@331 T@U) (arg3@@260 Bool) ) (! (= (type (|lambda#320| arg0@@657 arg1@@428 arg2@@331 arg3@@260)) (MapType9Type refType boolType)) :qid |funType:lambda#320| :pattern ( (|lambda#320| arg0@@657 arg1@@428 arg2@@331 arg3@@260)) )))
(assert (forall (($o@@168 T@U) ($f@@124 T@U) (|l#0@@129| T@U) (|l#1@@128| T@U) (|l#2@@126| T@U) (|l#3@@117| Bool) ) (! (let ((alpha@@131 (FieldTypeInv0 (type $f@@124)))) (=> (and (and (and (and (= (type $o@@168) refType) (= (type $f@@124) (FieldType alpha@@131))) (= (type |l#0@@129|) refType)) (= (type |l#1@@128|) (MapType0Type refType MapType1Type))) (= (type |l#2@@126|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#320| |l#0@@129| |l#1@@128| |l#2@@126| |l#3@@117|) $o@@168 $f@@124))  (=> (and (not (= $o@@168 |l#0@@129|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@128| $o@@168) |l#2@@126|))) |l#3@@117|)))) :qid |BucketsL.800:22| :skolemid |4145| :pattern ( (MapType9Select (|lambda#320| |l#0@@129| |l#1@@128| |l#2@@126| |l#3@@117|) $o@@168 $f@@124)) )))
(assert (forall ((arg0@@658 T@U) (arg1@@429 T@U) (arg2@@332 T@U) (arg3@@261 Bool) ) (! (= (type (|lambda#321| arg0@@658 arg1@@429 arg2@@332 arg3@@261)) (MapType9Type refType boolType)) :qid |funType:lambda#321| :pattern ( (|lambda#321| arg0@@658 arg1@@429 arg2@@332 arg3@@261)) )))
(assert (forall (($o@@169 T@U) ($f@@125 T@U) (|l#0@@130| T@U) (|l#1@@129| T@U) (|l#2@@127| T@U) (|l#3@@118| Bool) ) (! (let ((alpha@@132 (FieldTypeInv0 (type $f@@125)))) (=> (and (and (and (and (= (type $o@@169) refType) (= (type $f@@125) (FieldType alpha@@132))) (= (type |l#0@@130|) refType)) (= (type |l#1@@129|) (MapType0Type refType MapType1Type))) (= (type |l#2@@127|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#321| |l#0@@130| |l#1@@129| |l#2@@127| |l#3@@118|) $o@@169 $f@@125))  (=> (and (not (= $o@@169 |l#0@@130|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@129| $o@@169) |l#2@@127|))) |l#3@@118|)))) :qid |BucketsL.810:9| :skolemid |4146| :pattern ( (MapType9Select (|lambda#321| |l#0@@130| |l#1@@129| |l#2@@127| |l#3@@118|) $o@@169 $f@@125)) )))
(assert (forall ((arg0@@659 T@U) (arg1@@430 T@U) (arg2@@333 T@U) (arg3@@262 Bool) ) (! (= (type (|lambda#322| arg0@@659 arg1@@430 arg2@@333 arg3@@262)) (MapType9Type refType boolType)) :qid |funType:lambda#322| :pattern ( (|lambda#322| arg0@@659 arg1@@430 arg2@@333 arg3@@262)) )))
(assert (forall (($o@@170 T@U) ($f@@126 T@U) (|l#0@@131| T@U) (|l#1@@130| T@U) (|l#2@@128| T@U) (|l#3@@119| Bool) ) (! (let ((alpha@@133 (FieldTypeInv0 (type $f@@126)))) (=> (and (and (and (and (= (type $o@@170) refType) (= (type $f@@126) (FieldType alpha@@133))) (= (type |l#0@@131|) refType)) (= (type |l#1@@130|) (MapType0Type refType MapType1Type))) (= (type |l#2@@128|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#322| |l#0@@131| |l#1@@130| |l#2@@128| |l#3@@119|) $o@@170 $f@@126))  (=> (and (not (= $o@@170 |l#0@@131|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@130| $o@@170) |l#2@@128|))) |l#3@@119|)))) :qid |BucketsL.810:9| :skolemid |4147| :pattern ( (MapType9Select (|lambda#322| |l#0@@131| |l#1@@130| |l#2@@128| |l#3@@119|) $o@@170 $f@@126)) )))
(assert (forall ((arg0@@660 T@U) (arg1@@431 T@U) (arg2@@334 T@U) (arg3@@263 Bool) ) (! (= (type (|lambda#323| arg0@@660 arg1@@431 arg2@@334 arg3@@263)) (MapType9Type refType boolType)) :qid |funType:lambda#323| :pattern ( (|lambda#323| arg0@@660 arg1@@431 arg2@@334 arg3@@263)) )))
(assert (forall (($o@@171 T@U) ($f@@127 T@U) (|l#0@@132| T@U) (|l#1@@131| T@U) (|l#2@@129| T@U) (|l#3@@120| Bool) ) (! (let ((alpha@@134 (FieldTypeInv0 (type $f@@127)))) (=> (and (and (and (and (= (type $o@@171) refType) (= (type $f@@127) (FieldType alpha@@134))) (= (type |l#0@@132|) refType)) (= (type |l#1@@131|) (MapType0Type refType MapType1Type))) (= (type |l#2@@129|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#323| |l#0@@132| |l#1@@131| |l#2@@129| |l#3@@120|) $o@@171 $f@@127))  (=> (and (not (= $o@@171 |l#0@@132|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@131| $o@@171) |l#2@@129|))) |l#3@@120|)))) :qid |BucketsL.829:9| :skolemid |4148| :pattern ( (MapType9Select (|lambda#323| |l#0@@132| |l#1@@131| |l#2@@129| |l#3@@120|) $o@@171 $f@@127)) )))
(assert (forall ((arg0@@661 T@U) (arg1@@432 T@U) (arg2@@335 T@U) (arg3@@264 Bool) ) (! (= (type (|lambda#324| arg0@@661 arg1@@432 arg2@@335 arg3@@264)) (MapType9Type refType boolType)) :qid |funType:lambda#324| :pattern ( (|lambda#324| arg0@@661 arg1@@432 arg2@@335 arg3@@264)) )))
(assert (forall (($o@@172 T@U) ($f@@128 T@U) (|l#0@@133| T@U) (|l#1@@132| T@U) (|l#2@@130| T@U) (|l#3@@121| Bool) ) (! (let ((alpha@@135 (FieldTypeInv0 (type $f@@128)))) (=> (and (and (and (and (= (type $o@@172) refType) (= (type $f@@128) (FieldType alpha@@135))) (= (type |l#0@@133|) refType)) (= (type |l#1@@132|) (MapType0Type refType MapType1Type))) (= (type |l#2@@130|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#324| |l#0@@133| |l#1@@132| |l#2@@130| |l#3@@121|) $o@@172 $f@@128))  (=> (and (not (= $o@@172 |l#0@@133|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@132| $o@@172) |l#2@@130|))) |l#3@@121|)))) :qid |BucketsL.829:9| :skolemid |4149| :pattern ( (MapType9Select (|lambda#324| |l#0@@133| |l#1@@132| |l#2@@130| |l#3@@121|) $o@@172 $f@@128)) )))
(assert (forall ((arg0@@662 T@U) (arg1@@433 T@U) (arg2@@336 T@U) (arg3@@265 Bool) ) (! (= (type (|lambda#325| arg0@@662 arg1@@433 arg2@@336 arg3@@265)) (MapType9Type refType boolType)) :qid |funType:lambda#325| :pattern ( (|lambda#325| arg0@@662 arg1@@433 arg2@@336 arg3@@265)) )))
(assert (forall (($o@@173 T@U) ($f@@129 T@U) (|l#0@@134| T@U) (|l#1@@133| T@U) (|l#2@@131| T@U) (|l#3@@122| Bool) ) (! (let ((alpha@@136 (FieldTypeInv0 (type $f@@129)))) (=> (and (and (and (and (= (type $o@@173) refType) (= (type $f@@129) (FieldType alpha@@136))) (= (type |l#0@@134|) refType)) (= (type |l#1@@133|) (MapType0Type refType MapType1Type))) (= (type |l#2@@131|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#325| |l#0@@134| |l#1@@133| |l#2@@131| |l#3@@122|) $o@@173 $f@@129))  (=> (and (not (= $o@@173 |l#0@@134|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@133| $o@@173) |l#2@@131|))) |l#3@@122|)))) :qid |BucketsL.840:9| :skolemid |4150| :pattern ( (MapType9Select (|lambda#325| |l#0@@134| |l#1@@133| |l#2@@131| |l#3@@122|) $o@@173 $f@@129)) )))
(assert (forall ((arg0@@663 T@U) (arg1@@434 T@U) (arg2@@337 T@U) (arg3@@266 Bool) ) (! (= (type (|lambda#326| arg0@@663 arg1@@434 arg2@@337 arg3@@266)) (MapType9Type refType boolType)) :qid |funType:lambda#326| :pattern ( (|lambda#326| arg0@@663 arg1@@434 arg2@@337 arg3@@266)) )))
(assert (forall (($o@@174 T@U) ($f@@130 T@U) (|l#0@@135| T@U) (|l#1@@134| T@U) (|l#2@@132| T@U) (|l#3@@123| Bool) ) (! (let ((alpha@@137 (FieldTypeInv0 (type $f@@130)))) (=> (and (and (and (and (= (type $o@@174) refType) (= (type $f@@130) (FieldType alpha@@137))) (= (type |l#0@@135|) refType)) (= (type |l#1@@134|) (MapType0Type refType MapType1Type))) (= (type |l#2@@132|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#326| |l#0@@135| |l#1@@134| |l#2@@132| |l#3@@123|) $o@@174 $f@@130))  (=> (and (not (= $o@@174 |l#0@@135|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@134| $o@@174) |l#2@@132|))) |l#3@@123|)))) :qid |BucketsL.840:9| :skolemid |4151| :pattern ( (MapType9Select (|lambda#326| |l#0@@135| |l#1@@134| |l#2@@132| |l#3@@123|) $o@@174 $f@@130)) )))
(assert (forall ((arg0@@664 T@U) (arg1@@435 T@U) (arg2@@338 T@U) (arg3@@267 Bool) ) (! (= (type (|lambda#335| arg0@@664 arg1@@435 arg2@@338 arg3@@267)) (MapType9Type refType boolType)) :qid |funType:lambda#335| :pattern ( (|lambda#335| arg0@@664 arg1@@435 arg2@@338 arg3@@267)) )))
(assert (forall (($o@@175 T@U) ($f@@131 T@U) (|l#0@@136| T@U) (|l#1@@135| T@U) (|l#2@@133| T@U) (|l#3@@124| Bool) ) (! (let ((alpha@@138 (FieldTypeInv0 (type $f@@131)))) (=> (and (and (and (and (= (type $o@@175) refType) (= (type $f@@131) (FieldType alpha@@138))) (= (type |l#0@@136|) refType)) (= (type |l#1@@135|) (MapType0Type refType MapType1Type))) (= (type |l#2@@133|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#335| |l#0@@136| |l#1@@135| |l#2@@133| |l#3@@124|) $o@@175 $f@@131))  (=> (and (not (= $o@@175 |l#0@@136|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@135| $o@@175) |l#2@@133|))) |l#3@@124|)))) :qid |BucketsL.865:22| :skolemid |4152| :pattern ( (MapType9Select (|lambda#335| |l#0@@136| |l#1@@135| |l#2@@133| |l#3@@124|) $o@@175 $f@@131)) )))
(assert (forall ((arg0@@665 T@U) (arg1@@436 T@U) (arg2@@339 T@U) (arg3@@268 Bool) ) (! (= (type (|lambda#336| arg0@@665 arg1@@436 arg2@@339 arg3@@268)) (MapType9Type refType boolType)) :qid |funType:lambda#336| :pattern ( (|lambda#336| arg0@@665 arg1@@436 arg2@@339 arg3@@268)) )))
(assert (forall (($o@@176 T@U) ($f@@132 T@U) (|l#0@@137| T@U) (|l#1@@136| T@U) (|l#2@@134| T@U) (|l#3@@125| Bool) ) (! (let ((alpha@@139 (FieldTypeInv0 (type $f@@132)))) (=> (and (and (and (and (= (type $o@@176) refType) (= (type $f@@132) (FieldType alpha@@139))) (= (type |l#0@@137|) refType)) (= (type |l#1@@136|) (MapType0Type refType MapType1Type))) (= (type |l#2@@134|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#336| |l#0@@137| |l#1@@136| |l#2@@134| |l#3@@125|) $o@@176 $f@@132))  (=> (and (not (= $o@@176 |l#0@@137|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@136| $o@@176) |l#2@@134|))) |l#3@@125|)))) :qid |BucketsL.865:22| :skolemid |4153| :pattern ( (MapType9Select (|lambda#336| |l#0@@137| |l#1@@136| |l#2@@134| |l#3@@125|) $o@@176 $f@@132)) )))
(assert (forall ((arg0@@666 T@U) (arg1@@437 T@U) (arg2@@340 T@U) (arg3@@269 Bool) ) (! (= (type (|lambda#355| arg0@@666 arg1@@437 arg2@@340 arg3@@269)) (MapType9Type refType boolType)) :qid |funType:lambda#355| :pattern ( (|lambda#355| arg0@@666 arg1@@437 arg2@@340 arg3@@269)) )))
(assert (forall (($o@@177 T@U) ($f@@133 T@U) (|l#0@@138| T@U) (|l#1@@137| T@U) (|l#2@@135| T@U) (|l#3@@126| Bool) ) (! (let ((alpha@@140 (FieldTypeInv0 (type $f@@133)))) (=> (and (and (and (and (= (type $o@@177) refType) (= (type $f@@133) (FieldType alpha@@140))) (= (type |l#0@@138|) refType)) (= (type |l#1@@137|) (MapType0Type refType MapType1Type))) (= (type |l#2@@135|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#355| |l#0@@138| |l#1@@137| |l#2@@135| |l#3@@126|) $o@@177 $f@@133))  (=> (and (not (= $o@@177 |l#0@@138|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@137| $o@@177) |l#2@@135|))) |l#3@@126|)))) :qid |BucketsL.874:22| :skolemid |4154| :pattern ( (MapType9Select (|lambda#355| |l#0@@138| |l#1@@137| |l#2@@135| |l#3@@126|) $o@@177 $f@@133)) )))
(assert (forall ((arg0@@667 T@U) (arg1@@438 T@U) (arg2@@341 T@U) (arg3@@270 Bool) ) (! (= (type (|lambda#356| arg0@@667 arg1@@438 arg2@@341 arg3@@270)) (MapType9Type refType boolType)) :qid |funType:lambda#356| :pattern ( (|lambda#356| arg0@@667 arg1@@438 arg2@@341 arg3@@270)) )))
(assert (forall (($o@@178 T@U) ($f@@134 T@U) (|l#0@@139| T@U) (|l#1@@138| T@U) (|l#2@@136| T@U) (|l#3@@127| Bool) ) (! (let ((alpha@@141 (FieldTypeInv0 (type $f@@134)))) (=> (and (and (and (and (= (type $o@@178) refType) (= (type $f@@134) (FieldType alpha@@141))) (= (type |l#0@@139|) refType)) (= (type |l#1@@138|) (MapType0Type refType MapType1Type))) (= (type |l#2@@136|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#356| |l#0@@139| |l#1@@138| |l#2@@136| |l#3@@127|) $o@@178 $f@@134))  (=> (and (not (= $o@@178 |l#0@@139|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@138| $o@@178) |l#2@@136|))) |l#3@@127|)))) :qid |BucketsL.874:22| :skolemid |4155| :pattern ( (MapType9Select (|lambda#356| |l#0@@139| |l#1@@138| |l#2@@136| |l#3@@127|) $o@@178 $f@@134)) )))
(assert (forall ((arg0@@668 T@U) (arg1@@439 T@U) (arg2@@342 T@U) (arg3@@271 Bool) ) (! (= (type (|lambda#367| arg0@@668 arg1@@439 arg2@@342 arg3@@271)) (MapType9Type refType boolType)) :qid |funType:lambda#367| :pattern ( (|lambda#367| arg0@@668 arg1@@439 arg2@@342 arg3@@271)) )))
(assert (forall (($o@@179 T@U) ($f@@135 T@U) (|l#0@@140| T@U) (|l#1@@139| T@U) (|l#2@@137| T@U) (|l#3@@128| Bool) ) (! (let ((alpha@@142 (FieldTypeInv0 (type $f@@135)))) (=> (and (and (and (and (= (type $o@@179) refType) (= (type $f@@135) (FieldType alpha@@142))) (= (type |l#0@@140|) refType)) (= (type |l#1@@139|) (MapType0Type refType MapType1Type))) (= (type |l#2@@137|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#367| |l#0@@140| |l#1@@139| |l#2@@137| |l#3@@128|) $o@@179 $f@@135))  (=> (and (not (= $o@@179 |l#0@@140|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@139| $o@@179) |l#2@@137|))) |l#3@@128|)))) :qid |BucketsL.883:12| :skolemid |4156| :pattern ( (MapType9Select (|lambda#367| |l#0@@140| |l#1@@139| |l#2@@137| |l#3@@128|) $o@@179 $f@@135)) )))
(assert (forall ((arg0@@669 T@U) (arg1@@440 T@U) (arg2@@343 T@U) (arg3@@272 Bool) ) (! (= (type (|lambda#368| arg0@@669 arg1@@440 arg2@@343 arg3@@272)) (MapType9Type refType boolType)) :qid |funType:lambda#368| :pattern ( (|lambda#368| arg0@@669 arg1@@440 arg2@@343 arg3@@272)) )))
(assert (forall (($o@@180 T@U) ($f@@136 T@U) (|l#0@@141| T@U) (|l#1@@140| T@U) (|l#2@@138| T@U) (|l#3@@129| Bool) ) (! (let ((alpha@@143 (FieldTypeInv0 (type $f@@136)))) (=> (and (and (and (and (= (type $o@@180) refType) (= (type $f@@136) (FieldType alpha@@143))) (= (type |l#0@@141|) refType)) (= (type |l#1@@140|) (MapType0Type refType MapType1Type))) (= (type |l#2@@138|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#368| |l#0@@141| |l#1@@140| |l#2@@138| |l#3@@129|) $o@@180 $f@@136))  (=> (and (not (= $o@@180 |l#0@@141|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@140| $o@@180) |l#2@@138|))) |l#3@@129|)))) :qid |BucketsL.883:12| :skolemid |4157| :pattern ( (MapType9Select (|lambda#368| |l#0@@141| |l#1@@140| |l#2@@138| |l#3@@129|) $o@@180 $f@@136)) )))
(assert (forall ((arg0@@670 T@U) (arg1@@441 T@U) (arg2@@344 T@U) (arg3@@273 Bool) ) (! (= (type (|lambda#369| arg0@@670 arg1@@441 arg2@@344 arg3@@273)) (MapType9Type refType boolType)) :qid |funType:lambda#369| :pattern ( (|lambda#369| arg0@@670 arg1@@441 arg2@@344 arg3@@273)) )))
(assert (forall (($o@@181 T@U) ($f@@137 T@U) (|l#0@@142| T@U) (|l#1@@141| T@U) (|l#2@@139| T@U) (|l#3@@130| Bool) ) (! (let ((alpha@@144 (FieldTypeInv0 (type $f@@137)))) (=> (and (and (and (and (= (type $o@@181) refType) (= (type $f@@137) (FieldType alpha@@144))) (= (type |l#0@@142|) refType)) (= (type |l#1@@141|) (MapType0Type refType MapType1Type))) (= (type |l#2@@139|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#369| |l#0@@142| |l#1@@141| |l#2@@139| |l#3@@130|) $o@@181 $f@@137))  (=> (and (not (= $o@@181 |l#0@@142|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@141| $o@@181) |l#2@@139|))) |l#3@@130|)))) :qid |BucketsL.890:12| :skolemid |4158| :pattern ( (MapType9Select (|lambda#369| |l#0@@142| |l#1@@141| |l#2@@139| |l#3@@130|) $o@@181 $f@@137)) )))
(assert (forall ((arg0@@671 T@U) (arg1@@442 T@U) (arg2@@345 T@U) (arg3@@274 Bool) ) (! (= (type (|lambda#370| arg0@@671 arg1@@442 arg2@@345 arg3@@274)) (MapType9Type refType boolType)) :qid |funType:lambda#370| :pattern ( (|lambda#370| arg0@@671 arg1@@442 arg2@@345 arg3@@274)) )))
(assert (forall (($o@@182 T@U) ($f@@138 T@U) (|l#0@@143| T@U) (|l#1@@142| T@U) (|l#2@@140| T@U) (|l#3@@131| Bool) ) (! (let ((alpha@@145 (FieldTypeInv0 (type $f@@138)))) (=> (and (and (and (and (= (type $o@@182) refType) (= (type $f@@138) (FieldType alpha@@145))) (= (type |l#0@@143|) refType)) (= (type |l#1@@142|) (MapType0Type refType MapType1Type))) (= (type |l#2@@140|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#370| |l#0@@143| |l#1@@142| |l#2@@140| |l#3@@131|) $o@@182 $f@@138))  (=> (and (not (= $o@@182 |l#0@@143|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@142| $o@@182) |l#2@@140|))) |l#3@@131|)))) :qid |BucketsL.890:12| :skolemid |4159| :pattern ( (MapType9Select (|lambda#370| |l#0@@143| |l#1@@142| |l#2@@140| |l#3@@131|) $o@@182 $f@@138)) )))
(assert (forall ((arg0@@672 T@U) (arg1@@443 T@U) (arg2@@346 T@U) (arg3@@275 Bool) ) (! (= (type (|lambda#371| arg0@@672 arg1@@443 arg2@@346 arg3@@275)) (MapType9Type refType boolType)) :qid |funType:lambda#371| :pattern ( (|lambda#371| arg0@@672 arg1@@443 arg2@@346 arg3@@275)) )))
(assert (forall (($o@@183 T@U) ($f@@139 T@U) (|l#0@@144| T@U) (|l#1@@143| T@U) (|l#2@@141| T@U) (|l#3@@132| Bool) ) (! (let ((alpha@@146 (FieldTypeInv0 (type $f@@139)))) (=> (and (and (and (and (= (type $o@@183) refType) (= (type $f@@139) (FieldType alpha@@146))) (= (type |l#0@@144|) refType)) (= (type |l#1@@143|) (MapType0Type refType MapType1Type))) (= (type |l#2@@141|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#371| |l#0@@144| |l#1@@143| |l#2@@141| |l#3@@132|) $o@@183 $f@@139))  (=> (and (not (= $o@@183 |l#0@@144|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@143| $o@@183) |l#2@@141|))) |l#3@@132|)))) :qid |BucketsL.897:22| :skolemid |4160| :pattern ( (MapType9Select (|lambda#371| |l#0@@144| |l#1@@143| |l#2@@141| |l#3@@132|) $o@@183 $f@@139)) )))
(assert (forall ((arg0@@673 T@U) (arg1@@444 T@U) (arg2@@347 T@U) (arg3@@276 Bool) ) (! (= (type (|lambda#372| arg0@@673 arg1@@444 arg2@@347 arg3@@276)) (MapType9Type refType boolType)) :qid |funType:lambda#372| :pattern ( (|lambda#372| arg0@@673 arg1@@444 arg2@@347 arg3@@276)) )))
(assert (forall (($o@@184 T@U) ($f@@140 T@U) (|l#0@@145| T@U) (|l#1@@144| T@U) (|l#2@@142| T@U) (|l#3@@133| Bool) ) (! (let ((alpha@@147 (FieldTypeInv0 (type $f@@140)))) (=> (and (and (and (and (= (type $o@@184) refType) (= (type $f@@140) (FieldType alpha@@147))) (= (type |l#0@@145|) refType)) (= (type |l#1@@144|) (MapType0Type refType MapType1Type))) (= (type |l#2@@142|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#372| |l#0@@145| |l#1@@144| |l#2@@142| |l#3@@133|) $o@@184 $f@@140))  (=> (and (not (= $o@@184 |l#0@@145|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@144| $o@@184) |l#2@@142|))) |l#3@@133|)))) :qid |BucketsL.897:22| :skolemid |4161| :pattern ( (MapType9Select (|lambda#372| |l#0@@145| |l#1@@144| |l#2@@142| |l#3@@133|) $o@@184 $f@@140)) )))
(assert (forall ((arg0@@674 T@U) (arg1@@445 T@U) (arg2@@348 T@U) (arg3@@277 Bool) ) (! (= (type (|lambda#373| arg0@@674 arg1@@445 arg2@@348 arg3@@277)) (MapType9Type refType boolType)) :qid |funType:lambda#373| :pattern ( (|lambda#373| arg0@@674 arg1@@445 arg2@@348 arg3@@277)) )))
(assert (forall (($o@@185 T@U) ($f@@141 T@U) (|l#0@@146| T@U) (|l#1@@145| T@U) (|l#2@@143| T@U) (|l#3@@134| Bool) ) (! (let ((alpha@@148 (FieldTypeInv0 (type $f@@141)))) (=> (and (and (and (and (= (type $o@@185) refType) (= (type $f@@141) (FieldType alpha@@148))) (= (type |l#0@@146|) refType)) (= (type |l#1@@145|) (MapType0Type refType MapType1Type))) (= (type |l#2@@143|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#373| |l#0@@146| |l#1@@145| |l#2@@143| |l#3@@134|) $o@@185 $f@@141))  (=> (and (not (= $o@@185 |l#0@@146|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@145| $o@@185) |l#2@@143|))) |l#3@@134|)))) :qid |BucketsL.906:22| :skolemid |4162| :pattern ( (MapType9Select (|lambda#373| |l#0@@146| |l#1@@145| |l#2@@143| |l#3@@134|) $o@@185 $f@@141)) )))
(assert (forall ((arg0@@675 T@U) (arg1@@446 T@U) (arg2@@349 T@U) (arg3@@278 Bool) ) (! (= (type (|lambda#374| arg0@@675 arg1@@446 arg2@@349 arg3@@278)) (MapType9Type refType boolType)) :qid |funType:lambda#374| :pattern ( (|lambda#374| arg0@@675 arg1@@446 arg2@@349 arg3@@278)) )))
(assert (forall (($o@@186 T@U) ($f@@142 T@U) (|l#0@@147| T@U) (|l#1@@146| T@U) (|l#2@@144| T@U) (|l#3@@135| Bool) ) (! (let ((alpha@@149 (FieldTypeInv0 (type $f@@142)))) (=> (and (and (and (and (= (type $o@@186) refType) (= (type $f@@142) (FieldType alpha@@149))) (= (type |l#0@@147|) refType)) (= (type |l#1@@146|) (MapType0Type refType MapType1Type))) (= (type |l#2@@144|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#374| |l#0@@147| |l#1@@146| |l#2@@144| |l#3@@135|) $o@@186 $f@@142))  (=> (and (not (= $o@@186 |l#0@@147|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@146| $o@@186) |l#2@@144|))) |l#3@@135|)))) :qid |BucketsL.906:22| :skolemid |4163| :pattern ( (MapType9Select (|lambda#374| |l#0@@147| |l#1@@146| |l#2@@144| |l#3@@135|) $o@@186 $f@@142)) )))
(assert (forall ((arg0@@676 T@U) (arg1@@447 T@U) (arg2@@350 T@U) (arg3@@279 Bool) ) (! (= (type (|lambda#375| arg0@@676 arg1@@447 arg2@@350 arg3@@279)) (MapType9Type refType boolType)) :qid |funType:lambda#375| :pattern ( (|lambda#375| arg0@@676 arg1@@447 arg2@@350 arg3@@279)) )))
(assert (forall (($o@@187 T@U) ($f@@143 T@U) (|l#0@@148| T@U) (|l#1@@147| T@U) (|l#2@@145| T@U) (|l#3@@136| Bool) ) (! (let ((alpha@@150 (FieldTypeInv0 (type $f@@143)))) (=> (and (and (and (and (= (type $o@@187) refType) (= (type $f@@143) (FieldType alpha@@150))) (= (type |l#0@@148|) refType)) (= (type |l#1@@147|) (MapType0Type refType MapType1Type))) (= (type |l#2@@145|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#375| |l#0@@148| |l#1@@147| |l#2@@145| |l#3@@136|) $o@@187 $f@@143))  (=> (and (not (= $o@@187 |l#0@@148|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@147| $o@@187) |l#2@@145|))) |l#3@@136|)))) :qid |BucketsL.914:22| :skolemid |4164| :pattern ( (MapType9Select (|lambda#375| |l#0@@148| |l#1@@147| |l#2@@145| |l#3@@136|) $o@@187 $f@@143)) )))
(assert (forall ((arg0@@677 T@U) (arg1@@448 T@U) (arg2@@351 T@U) (arg3@@280 Bool) ) (! (= (type (|lambda#376| arg0@@677 arg1@@448 arg2@@351 arg3@@280)) (MapType9Type refType boolType)) :qid |funType:lambda#376| :pattern ( (|lambda#376| arg0@@677 arg1@@448 arg2@@351 arg3@@280)) )))
(assert (forall (($o@@188 T@U) ($f@@144 T@U) (|l#0@@149| T@U) (|l#1@@148| T@U) (|l#2@@146| T@U) (|l#3@@137| Bool) ) (! (let ((alpha@@151 (FieldTypeInv0 (type $f@@144)))) (=> (and (and (and (and (= (type $o@@188) refType) (= (type $f@@144) (FieldType alpha@@151))) (= (type |l#0@@149|) refType)) (= (type |l#1@@148|) (MapType0Type refType MapType1Type))) (= (type |l#2@@146|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#376| |l#0@@149| |l#1@@148| |l#2@@146| |l#3@@137|) $o@@188 $f@@144))  (=> (and (not (= $o@@188 |l#0@@149|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@148| $o@@188) |l#2@@146|))) |l#3@@137|)))) :qid |BucketsL.914:22| :skolemid |4165| :pattern ( (MapType9Select (|lambda#376| |l#0@@149| |l#1@@148| |l#2@@146| |l#3@@137|) $o@@188 $f@@144)) )))
(assert (forall ((arg0@@678 T@U) (arg1@@449 T@U) (arg2@@352 T@U) (arg3@@281 Bool) ) (! (= (type (|lambda#377| arg0@@678 arg1@@449 arg2@@352 arg3@@281)) (MapType9Type refType boolType)) :qid |funType:lambda#377| :pattern ( (|lambda#377| arg0@@678 arg1@@449 arg2@@352 arg3@@281)) )))
(assert (forall (($o@@189 T@U) ($f@@145 T@U) (|l#0@@150| T@U) (|l#1@@149| T@U) (|l#2@@147| T@U) (|l#3@@138| Bool) ) (! (let ((alpha@@152 (FieldTypeInv0 (type $f@@145)))) (=> (and (and (and (and (= (type $o@@189) refType) (= (type $f@@145) (FieldType alpha@@152))) (= (type |l#0@@150|) refType)) (= (type |l#1@@149|) (MapType0Type refType MapType1Type))) (= (type |l#2@@147|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#377| |l#0@@150| |l#1@@149| |l#2@@147| |l#3@@138|) $o@@189 $f@@145))  (=> (and (not (= $o@@189 |l#0@@150|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@149| $o@@189) |l#2@@147|))) |l#3@@138|)))) :qid |BucketsL.956:9| :skolemid |4166| :pattern ( (MapType9Select (|lambda#377| |l#0@@150| |l#1@@149| |l#2@@147| |l#3@@138|) $o@@189 $f@@145)) )))
(assert (forall ((arg0@@679 T@U) (arg1@@450 T@U) (arg2@@353 T@U) (arg3@@282 Bool) ) (! (= (type (|lambda#378| arg0@@679 arg1@@450 arg2@@353 arg3@@282)) (MapType9Type refType boolType)) :qid |funType:lambda#378| :pattern ( (|lambda#378| arg0@@679 arg1@@450 arg2@@353 arg3@@282)) )))
(assert (forall (($o@@190 T@U) ($f@@146 T@U) (|l#0@@151| T@U) (|l#1@@150| T@U) (|l#2@@148| T@U) (|l#3@@139| Bool) ) (! (let ((alpha@@153 (FieldTypeInv0 (type $f@@146)))) (=> (and (and (and (and (= (type $o@@190) refType) (= (type $f@@146) (FieldType alpha@@153))) (= (type |l#0@@151|) refType)) (= (type |l#1@@150|) (MapType0Type refType MapType1Type))) (= (type |l#2@@148|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#378| |l#0@@151| |l#1@@150| |l#2@@148| |l#3@@139|) $o@@190 $f@@146))  (=> (and (not (= $o@@190 |l#0@@151|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@150| $o@@190) |l#2@@148|))) |l#3@@139|)))) :qid |BucketsL.956:9| :skolemid |4167| :pattern ( (MapType9Select (|lambda#378| |l#0@@151| |l#1@@150| |l#2@@148| |l#3@@139|) $o@@190 $f@@146)) )))
(assert (forall ((arg0@@680 T@U) (arg1@@451 T@U) (arg2@@354 T@U) (arg3@@283 Bool) ) (! (= (type (|lambda#379| arg0@@680 arg1@@451 arg2@@354 arg3@@283)) (MapType9Type refType boolType)) :qid |funType:lambda#379| :pattern ( (|lambda#379| arg0@@680 arg1@@451 arg2@@354 arg3@@283)) )))
(assert (forall (($o@@191 T@U) ($f@@147 T@U) (|l#0@@152| T@U) (|l#1@@151| T@U) (|l#2@@149| T@U) (|l#3@@140| Bool) ) (! (let ((alpha@@154 (FieldTypeInv0 (type $f@@147)))) (=> (and (and (and (and (= (type $o@@191) refType) (= (type $f@@147) (FieldType alpha@@154))) (= (type |l#0@@152|) refType)) (= (type |l#1@@151|) (MapType0Type refType MapType1Type))) (= (type |l#2@@149|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#379| |l#0@@152| |l#1@@151| |l#2@@149| |l#3@@140|) $o@@191 $f@@147))  (=> (and (not (= $o@@191 |l#0@@152|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@151| $o@@191) |l#2@@149|))) |l#3@@140|)))) :qid |BucketsL.966:9| :skolemid |4168| :pattern ( (MapType9Select (|lambda#379| |l#0@@152| |l#1@@151| |l#2@@149| |l#3@@140|) $o@@191 $f@@147)) )))
(assert (forall ((arg0@@681 T@U) (arg1@@452 T@U) (arg2@@355 T@U) (arg3@@284 Bool) ) (! (= (type (|lambda#380| arg0@@681 arg1@@452 arg2@@355 arg3@@284)) (MapType9Type refType boolType)) :qid |funType:lambda#380| :pattern ( (|lambda#380| arg0@@681 arg1@@452 arg2@@355 arg3@@284)) )))
(assert (forall (($o@@192 T@U) ($f@@148 T@U) (|l#0@@153| T@U) (|l#1@@152| T@U) (|l#2@@150| T@U) (|l#3@@141| Bool) ) (! (let ((alpha@@155 (FieldTypeInv0 (type $f@@148)))) (=> (and (and (and (and (= (type $o@@192) refType) (= (type $f@@148) (FieldType alpha@@155))) (= (type |l#0@@153|) refType)) (= (type |l#1@@152|) (MapType0Type refType MapType1Type))) (= (type |l#2@@150|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#380| |l#0@@153| |l#1@@152| |l#2@@150| |l#3@@141|) $o@@192 $f@@148))  (=> (and (not (= $o@@192 |l#0@@153|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@152| $o@@192) |l#2@@150|))) |l#3@@141|)))) :qid |BucketsL.966:9| :skolemid |4169| :pattern ( (MapType9Select (|lambda#380| |l#0@@153| |l#1@@152| |l#2@@150| |l#3@@141|) $o@@192 $f@@148)) )))
(assert (forall ((arg0@@682 T@U) (arg1@@453 T@U) (arg2@@356 T@U) (arg3@@285 Bool) ) (! (= (type (|lambda#381| arg0@@682 arg1@@453 arg2@@356 arg3@@285)) (MapType9Type refType boolType)) :qid |funType:lambda#381| :pattern ( (|lambda#381| arg0@@682 arg1@@453 arg2@@356 arg3@@285)) )))
(assert (forall (($o@@193 T@U) ($f@@149 T@U) (|l#0@@154| T@U) (|l#1@@153| T@U) (|l#2@@151| T@U) (|l#3@@142| Bool) ) (! (let ((alpha@@156 (FieldTypeInv0 (type $f@@149)))) (=> (and (and (and (and (= (type $o@@193) refType) (= (type $f@@149) (FieldType alpha@@156))) (= (type |l#0@@154|) refType)) (= (type |l#1@@153|) (MapType0Type refType MapType1Type))) (= (type |l#2@@151|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#381| |l#0@@154| |l#1@@153| |l#2@@151| |l#3@@142|) $o@@193 $f@@149))  (=> (and (not (= $o@@193 |l#0@@154|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@153| $o@@193) |l#2@@151|))) |l#3@@142|)))) :qid |BucketsL.986:9| :skolemid |4170| :pattern ( (MapType9Select (|lambda#381| |l#0@@154| |l#1@@153| |l#2@@151| |l#3@@142|) $o@@193 $f@@149)) )))
(assert (forall ((arg0@@683 T@U) (arg1@@454 T@U) (arg2@@357 T@U) (arg3@@286 Bool) ) (! (= (type (|lambda#382| arg0@@683 arg1@@454 arg2@@357 arg3@@286)) (MapType9Type refType boolType)) :qid |funType:lambda#382| :pattern ( (|lambda#382| arg0@@683 arg1@@454 arg2@@357 arg3@@286)) )))
(assert (forall (($o@@194 T@U) ($f@@150 T@U) (|l#0@@155| T@U) (|l#1@@154| T@U) (|l#2@@152| T@U) (|l#3@@143| Bool) ) (! (let ((alpha@@157 (FieldTypeInv0 (type $f@@150)))) (=> (and (and (and (and (= (type $o@@194) refType) (= (type $f@@150) (FieldType alpha@@157))) (= (type |l#0@@155|) refType)) (= (type |l#1@@154|) (MapType0Type refType MapType1Type))) (= (type |l#2@@152|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#382| |l#0@@155| |l#1@@154| |l#2@@152| |l#3@@143|) $o@@194 $f@@150))  (=> (and (not (= $o@@194 |l#0@@155|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@154| $o@@194) |l#2@@152|))) |l#3@@143|)))) :qid |BucketsL.986:9| :skolemid |4171| :pattern ( (MapType9Select (|lambda#382| |l#0@@155| |l#1@@154| |l#2@@152| |l#3@@143|) $o@@194 $f@@150)) )))
(assert (forall ((arg0@@684 T@U) (arg1@@455 T@U) (arg2@@358 T@U) (arg3@@287 Bool) ) (! (= (type (|lambda#383| arg0@@684 arg1@@455 arg2@@358 arg3@@287)) (MapType9Type refType boolType)) :qid |funType:lambda#383| :pattern ( (|lambda#383| arg0@@684 arg1@@455 arg2@@358 arg3@@287)) )))
(assert (forall (($o@@195 T@U) ($f@@151 T@U) (|l#0@@156| T@U) (|l#1@@155| T@U) (|l#2@@153| T@U) (|l#3@@144| Bool) ) (! (let ((alpha@@158 (FieldTypeInv0 (type $f@@151)))) (=> (and (and (and (and (= (type $o@@195) refType) (= (type $f@@151) (FieldType alpha@@158))) (= (type |l#0@@156|) refType)) (= (type |l#1@@155|) (MapType0Type refType MapType1Type))) (= (type |l#2@@153|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#383| |l#0@@156| |l#1@@155| |l#2@@153| |l#3@@144|) $o@@195 $f@@151))  (=> (and (not (= $o@@195 |l#0@@156|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@155| $o@@195) |l#2@@153|))) |l#3@@144|)))) :qid |BucketsL.996:9| :skolemid |4172| :pattern ( (MapType9Select (|lambda#383| |l#0@@156| |l#1@@155| |l#2@@153| |l#3@@144|) $o@@195 $f@@151)) )))
(assert (forall ((arg0@@685 T@U) (arg1@@456 T@U) (arg2@@359 T@U) (arg3@@288 Bool) ) (! (= (type (|lambda#384| arg0@@685 arg1@@456 arg2@@359 arg3@@288)) (MapType9Type refType boolType)) :qid |funType:lambda#384| :pattern ( (|lambda#384| arg0@@685 arg1@@456 arg2@@359 arg3@@288)) )))
(assert (forall (($o@@196 T@U) ($f@@152 T@U) (|l#0@@157| T@U) (|l#1@@156| T@U) (|l#2@@154| T@U) (|l#3@@145| Bool) ) (! (let ((alpha@@159 (FieldTypeInv0 (type $f@@152)))) (=> (and (and (and (and (= (type $o@@196) refType) (= (type $f@@152) (FieldType alpha@@159))) (= (type |l#0@@157|) refType)) (= (type |l#1@@156|) (MapType0Type refType MapType1Type))) (= (type |l#2@@154|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#384| |l#0@@157| |l#1@@156| |l#2@@154| |l#3@@145|) $o@@196 $f@@152))  (=> (and (not (= $o@@196 |l#0@@157|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@156| $o@@196) |l#2@@154|))) |l#3@@145|)))) :qid |BucketsL.996:9| :skolemid |4173| :pattern ( (MapType9Select (|lambda#384| |l#0@@157| |l#1@@156| |l#2@@154| |l#3@@145|) $o@@196 $f@@152)) )))
(assert (forall ((arg0@@686 T@U) (arg1@@457 T@U) (arg2@@360 T@U) (arg3@@289 Bool) ) (! (= (type (|lambda#385| arg0@@686 arg1@@457 arg2@@360 arg3@@289)) (MapType9Type refType boolType)) :qid |funType:lambda#385| :pattern ( (|lambda#385| arg0@@686 arg1@@457 arg2@@360 arg3@@289)) )))
(assert (forall (($o@@197 T@U) ($f@@153 T@U) (|l#0@@158| T@U) (|l#1@@157| T@U) (|l#2@@155| T@U) (|l#3@@146| Bool) ) (! (let ((alpha@@160 (FieldTypeInv0 (type $f@@153)))) (=> (and (and (and (and (= (type $o@@197) refType) (= (type $f@@153) (FieldType alpha@@160))) (= (type |l#0@@158|) refType)) (= (type |l#1@@157|) (MapType0Type refType MapType1Type))) (= (type |l#2@@155|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#385| |l#0@@158| |l#1@@157| |l#2@@155| |l#3@@146|) $o@@197 $f@@153))  (=> (and (not (= $o@@197 |l#0@@158|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@157| $o@@197) |l#2@@155|))) |l#3@@146|)))) :qid |BucketsL.1016:9| :skolemid |4174| :pattern ( (MapType9Select (|lambda#385| |l#0@@158| |l#1@@157| |l#2@@155| |l#3@@146|) $o@@197 $f@@153)) )))
(assert (forall ((arg0@@687 T@U) (arg1@@458 T@U) (arg2@@361 T@U) (arg3@@290 Bool) ) (! (= (type (|lambda#386| arg0@@687 arg1@@458 arg2@@361 arg3@@290)) (MapType9Type refType boolType)) :qid |funType:lambda#386| :pattern ( (|lambda#386| arg0@@687 arg1@@458 arg2@@361 arg3@@290)) )))
(assert (forall (($o@@198 T@U) ($f@@154 T@U) (|l#0@@159| T@U) (|l#1@@158| T@U) (|l#2@@156| T@U) (|l#3@@147| Bool) ) (! (let ((alpha@@161 (FieldTypeInv0 (type $f@@154)))) (=> (and (and (and (and (= (type $o@@198) refType) (= (type $f@@154) (FieldType alpha@@161))) (= (type |l#0@@159|) refType)) (= (type |l#1@@158|) (MapType0Type refType MapType1Type))) (= (type |l#2@@156|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#386| |l#0@@159| |l#1@@158| |l#2@@156| |l#3@@147|) $o@@198 $f@@154))  (=> (and (not (= $o@@198 |l#0@@159|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@158| $o@@198) |l#2@@156|))) |l#3@@147|)))) :qid |BucketsL.1016:9| :skolemid |4175| :pattern ( (MapType9Select (|lambda#386| |l#0@@159| |l#1@@158| |l#2@@156| |l#3@@147|) $o@@198 $f@@154)) )))
(assert (forall ((arg0@@688 T@U) (arg1@@459 T@U) (arg2@@362 T@U) (arg3@@291 Bool) ) (! (= (type (|lambda#387| arg0@@688 arg1@@459 arg2@@362 arg3@@291)) (MapType9Type refType boolType)) :qid |funType:lambda#387| :pattern ( (|lambda#387| arg0@@688 arg1@@459 arg2@@362 arg3@@291)) )))
(assert (forall (($o@@199 T@U) ($f@@155 T@U) (|l#0@@160| T@U) (|l#1@@159| T@U) (|l#2@@157| T@U) (|l#3@@148| Bool) ) (! (let ((alpha@@162 (FieldTypeInv0 (type $f@@155)))) (=> (and (and (and (and (= (type $o@@199) refType) (= (type $f@@155) (FieldType alpha@@162))) (= (type |l#0@@160|) refType)) (= (type |l#1@@159|) (MapType0Type refType MapType1Type))) (= (type |l#2@@157|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#387| |l#0@@160| |l#1@@159| |l#2@@157| |l#3@@148|) $o@@199 $f@@155))  (=> (and (not (= $o@@199 |l#0@@160|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@159| $o@@199) |l#2@@157|))) |l#3@@148|)))) :qid |BucketsL.1042:9| :skolemid |4176| :pattern ( (MapType9Select (|lambda#387| |l#0@@160| |l#1@@159| |l#2@@157| |l#3@@148|) $o@@199 $f@@155)) )))
(assert (forall ((arg0@@689 T@U) (arg1@@460 T@U) (arg2@@363 T@U) (arg3@@292 Bool) ) (! (= (type (|lambda#388| arg0@@689 arg1@@460 arg2@@363 arg3@@292)) (MapType9Type refType boolType)) :qid |funType:lambda#388| :pattern ( (|lambda#388| arg0@@689 arg1@@460 arg2@@363 arg3@@292)) )))
(assert (forall (($o@@200 T@U) ($f@@156 T@U) (|l#0@@161| T@U) (|l#1@@160| T@U) (|l#2@@158| T@U) (|l#3@@149| Bool) ) (! (let ((alpha@@163 (FieldTypeInv0 (type $f@@156)))) (=> (and (and (and (and (= (type $o@@200) refType) (= (type $f@@156) (FieldType alpha@@163))) (= (type |l#0@@161|) refType)) (= (type |l#1@@160|) (MapType0Type refType MapType1Type))) (= (type |l#2@@158|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#388| |l#0@@161| |l#1@@160| |l#2@@158| |l#3@@149|) $o@@200 $f@@156))  (=> (and (not (= $o@@200 |l#0@@161|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@160| $o@@200) |l#2@@158|))) |l#3@@149|)))) :qid |BucketsL.1042:9| :skolemid |4177| :pattern ( (MapType9Select (|lambda#388| |l#0@@161| |l#1@@160| |l#2@@158| |l#3@@149|) $o@@200 $f@@156)) )))
(assert (forall ((arg0@@690 T@U) (arg1@@461 T@U) (arg2@@364 T@U) (arg3@@293 Bool) ) (! (= (type (|lambda#389| arg0@@690 arg1@@461 arg2@@364 arg3@@293)) (MapType9Type refType boolType)) :qid |funType:lambda#389| :pattern ( (|lambda#389| arg0@@690 arg1@@461 arg2@@364 arg3@@293)) )))
(assert (forall (($o@@201 T@U) ($f@@157 T@U) (|l#0@@162| T@U) (|l#1@@161| T@U) (|l#2@@159| T@U) (|l#3@@150| Bool) ) (! (let ((alpha@@164 (FieldTypeInv0 (type $f@@157)))) (=> (and (and (and (and (= (type $o@@201) refType) (= (type $f@@157) (FieldType alpha@@164))) (= (type |l#0@@162|) refType)) (= (type |l#1@@161|) (MapType0Type refType MapType1Type))) (= (type |l#2@@159|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#389| |l#0@@162| |l#1@@161| |l#2@@159| |l#3@@150|) $o@@201 $f@@157))  (=> (and (not (= $o@@201 |l#0@@162|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@161| $o@@201) |l#2@@159|))) |l#3@@150|)))) :qid |BucketsL.1063:9| :skolemid |4178| :pattern ( (MapType9Select (|lambda#389| |l#0@@162| |l#1@@161| |l#2@@159| |l#3@@150|) $o@@201 $f@@157)) )))
(assert (forall ((arg0@@691 T@U) (arg1@@462 T@U) (arg2@@365 T@U) (arg3@@294 Bool) ) (! (= (type (|lambda#390| arg0@@691 arg1@@462 arg2@@365 arg3@@294)) (MapType9Type refType boolType)) :qid |funType:lambda#390| :pattern ( (|lambda#390| arg0@@691 arg1@@462 arg2@@365 arg3@@294)) )))
(assert (forall (($o@@202 T@U) ($f@@158 T@U) (|l#0@@163| T@U) (|l#1@@162| T@U) (|l#2@@160| T@U) (|l#3@@151| Bool) ) (! (let ((alpha@@165 (FieldTypeInv0 (type $f@@158)))) (=> (and (and (and (and (= (type $o@@202) refType) (= (type $f@@158) (FieldType alpha@@165))) (= (type |l#0@@163|) refType)) (= (type |l#1@@162|) (MapType0Type refType MapType1Type))) (= (type |l#2@@160|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#390| |l#0@@163| |l#1@@162| |l#2@@160| |l#3@@151|) $o@@202 $f@@158))  (=> (and (not (= $o@@202 |l#0@@163|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@162| $o@@202) |l#2@@160|))) |l#3@@151|)))) :qid |BucketsL.1063:9| :skolemid |4179| :pattern ( (MapType9Select (|lambda#390| |l#0@@163| |l#1@@162| |l#2@@160| |l#3@@151|) $o@@202 $f@@158)) )))
(assert (forall ((arg0@@692 T@U) (arg1@@463 T@U) (arg2@@366 T@U) (arg3@@295 Bool) ) (! (= (type (|lambda#391| arg0@@692 arg1@@463 arg2@@366 arg3@@295)) (MapType9Type refType boolType)) :qid |funType:lambda#391| :pattern ( (|lambda#391| arg0@@692 arg1@@463 arg2@@366 arg3@@295)) )))
(assert (forall (($o@@203 T@U) ($f@@159 T@U) (|l#0@@164| T@U) (|l#1@@163| T@U) (|l#2@@161| T@U) (|l#3@@152| Bool) ) (! (let ((alpha@@166 (FieldTypeInv0 (type $f@@159)))) (=> (and (and (and (and (= (type $o@@203) refType) (= (type $f@@159) (FieldType alpha@@166))) (= (type |l#0@@164|) refType)) (= (type |l#1@@163|) (MapType0Type refType MapType1Type))) (= (type |l#2@@161|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#391| |l#0@@164| |l#1@@163| |l#2@@161| |l#3@@152|) $o@@203 $f@@159))  (=> (and (not (= $o@@203 |l#0@@164|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@163| $o@@203) |l#2@@161|))) |l#3@@152|)))) :qid |BucketsL.1085:9| :skolemid |4180| :pattern ( (MapType9Select (|lambda#391| |l#0@@164| |l#1@@163| |l#2@@161| |l#3@@152|) $o@@203 $f@@159)) )))
(assert (forall ((arg0@@693 T@U) (arg1@@464 T@U) (arg2@@367 T@U) (arg3@@296 Bool) ) (! (= (type (|lambda#392| arg0@@693 arg1@@464 arg2@@367 arg3@@296)) (MapType9Type refType boolType)) :qid |funType:lambda#392| :pattern ( (|lambda#392| arg0@@693 arg1@@464 arg2@@367 arg3@@296)) )))
(assert (forall (($o@@204 T@U) ($f@@160 T@U) (|l#0@@165| T@U) (|l#1@@164| T@U) (|l#2@@162| T@U) (|l#3@@153| Bool) ) (! (let ((alpha@@167 (FieldTypeInv0 (type $f@@160)))) (=> (and (and (and (and (= (type $o@@204) refType) (= (type $f@@160) (FieldType alpha@@167))) (= (type |l#0@@165|) refType)) (= (type |l#1@@164|) (MapType0Type refType MapType1Type))) (= (type |l#2@@162|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#392| |l#0@@165| |l#1@@164| |l#2@@162| |l#3@@153|) $o@@204 $f@@160))  (=> (and (not (= $o@@204 |l#0@@165|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@164| $o@@204) |l#2@@162|))) |l#3@@153|)))) :qid |BucketsL.1085:9| :skolemid |4181| :pattern ( (MapType9Select (|lambda#392| |l#0@@165| |l#1@@164| |l#2@@162| |l#3@@153|) $o@@204 $f@@160)) )))
(assert (forall ((arg0@@694 T@U) (arg1@@465 T@U) (arg2@@368 T@U) (arg3@@297 Bool) ) (! (= (type (|lambda#393| arg0@@694 arg1@@465 arg2@@368 arg3@@297)) (MapType9Type refType boolType)) :qid |funType:lambda#393| :pattern ( (|lambda#393| arg0@@694 arg1@@465 arg2@@368 arg3@@297)) )))
(assert (forall (($o@@205 T@U) ($f@@161 T@U) (|l#0@@166| T@U) (|l#1@@165| T@U) (|l#2@@163| T@U) (|l#3@@154| Bool) ) (! (let ((alpha@@168 (FieldTypeInv0 (type $f@@161)))) (=> (and (and (and (and (= (type $o@@205) refType) (= (type $f@@161) (FieldType alpha@@168))) (= (type |l#0@@166|) refType)) (= (type |l#1@@165|) (MapType0Type refType MapType1Type))) (= (type |l#2@@163|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#393| |l#0@@166| |l#1@@165| |l#2@@163| |l#3@@154|) $o@@205 $f@@161))  (=> (and (not (= $o@@205 |l#0@@166|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@165| $o@@205) |l#2@@163|))) |l#3@@154|)))) :qid |BucketsL.1096:9| :skolemid |4182| :pattern ( (MapType9Select (|lambda#393| |l#0@@166| |l#1@@165| |l#2@@163| |l#3@@154|) $o@@205 $f@@161)) )))
(assert (forall ((arg0@@695 T@U) (arg1@@466 T@U) (arg2@@369 T@U) (arg3@@298 Bool) ) (! (= (type (|lambda#394| arg0@@695 arg1@@466 arg2@@369 arg3@@298)) (MapType9Type refType boolType)) :qid |funType:lambda#394| :pattern ( (|lambda#394| arg0@@695 arg1@@466 arg2@@369 arg3@@298)) )))
(assert (forall (($o@@206 T@U) ($f@@162 T@U) (|l#0@@167| T@U) (|l#1@@166| T@U) (|l#2@@164| T@U) (|l#3@@155| Bool) ) (! (let ((alpha@@169 (FieldTypeInv0 (type $f@@162)))) (=> (and (and (and (and (= (type $o@@206) refType) (= (type $f@@162) (FieldType alpha@@169))) (= (type |l#0@@167|) refType)) (= (type |l#1@@166|) (MapType0Type refType MapType1Type))) (= (type |l#2@@164|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#394| |l#0@@167| |l#1@@166| |l#2@@164| |l#3@@155|) $o@@206 $f@@162))  (=> (and (not (= $o@@206 |l#0@@167|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@166| $o@@206) |l#2@@164|))) |l#3@@155|)))) :qid |BucketsL.1096:9| :skolemid |4183| :pattern ( (MapType9Select (|lambda#394| |l#0@@167| |l#1@@166| |l#2@@164| |l#3@@155|) $o@@206 $f@@162)) )))
(assert (forall ((arg0@@696 T@U) (arg1@@467 T@U) (arg2@@370 T@U) (arg3@@299 Bool) ) (! (= (type (|lambda#395| arg0@@696 arg1@@467 arg2@@370 arg3@@299)) (MapType9Type refType boolType)) :qid |funType:lambda#395| :pattern ( (|lambda#395| arg0@@696 arg1@@467 arg2@@370 arg3@@299)) )))
(assert (forall (($o@@207 T@U) ($f@@163 T@U) (|l#0@@168| T@U) (|l#1@@167| T@U) (|l#2@@165| T@U) (|l#3@@156| Bool) ) (! (let ((alpha@@170 (FieldTypeInv0 (type $f@@163)))) (=> (and (and (and (and (= (type $o@@207) refType) (= (type $f@@163) (FieldType alpha@@170))) (= (type |l#0@@168|) refType)) (= (type |l#1@@167|) (MapType0Type refType MapType1Type))) (= (type |l#2@@165|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#395| |l#0@@168| |l#1@@167| |l#2@@165| |l#3@@156|) $o@@207 $f@@163))  (=> (and (not (= $o@@207 |l#0@@168|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@167| $o@@207) |l#2@@165|))) |l#3@@156|)))) :qid |BucketsL.1128:9| :skolemid |4184| :pattern ( (MapType9Select (|lambda#395| |l#0@@168| |l#1@@167| |l#2@@165| |l#3@@156|) $o@@207 $f@@163)) )))
(assert (forall ((arg0@@697 T@U) (arg1@@468 T@U) (arg2@@371 T@U) (arg3@@300 Bool) ) (! (= (type (|lambda#396| arg0@@697 arg1@@468 arg2@@371 arg3@@300)) (MapType9Type refType boolType)) :qid |funType:lambda#396| :pattern ( (|lambda#396| arg0@@697 arg1@@468 arg2@@371 arg3@@300)) )))
(assert (forall (($o@@208 T@U) ($f@@164 T@U) (|l#0@@169| T@U) (|l#1@@168| T@U) (|l#2@@166| T@U) (|l#3@@157| Bool) ) (! (let ((alpha@@171 (FieldTypeInv0 (type $f@@164)))) (=> (and (and (and (and (= (type $o@@208) refType) (= (type $f@@164) (FieldType alpha@@171))) (= (type |l#0@@169|) refType)) (= (type |l#1@@168|) (MapType0Type refType MapType1Type))) (= (type |l#2@@166|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#396| |l#0@@169| |l#1@@168| |l#2@@166| |l#3@@157|) $o@@208 $f@@164))  (=> (and (not (= $o@@208 |l#0@@169|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@168| $o@@208) |l#2@@166|))) |l#3@@157|)))) :qid |BucketsL.1128:9| :skolemid |4185| :pattern ( (MapType9Select (|lambda#396| |l#0@@169| |l#1@@168| |l#2@@166| |l#3@@157|) $o@@208 $f@@164)) )))
(assert (forall ((arg0@@698 T@U) (arg1@@469 T@U) (arg2@@372 T@U) (arg3@@301 Bool) ) (! (= (type (|lambda#397| arg0@@698 arg1@@469 arg2@@372 arg3@@301)) (MapType9Type refType boolType)) :qid |funType:lambda#397| :pattern ( (|lambda#397| arg0@@698 arg1@@469 arg2@@372 arg3@@301)) )))
(assert (forall (($o@@209 T@U) ($f@@165 T@U) (|l#0@@170| T@U) (|l#1@@169| T@U) (|l#2@@167| T@U) (|l#3@@158| Bool) ) (! (let ((alpha@@172 (FieldTypeInv0 (type $f@@165)))) (=> (and (and (and (and (= (type $o@@209) refType) (= (type $f@@165) (FieldType alpha@@172))) (= (type |l#0@@170|) refType)) (= (type |l#1@@169|) (MapType0Type refType MapType1Type))) (= (type |l#2@@167|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#397| |l#0@@170| |l#1@@169| |l#2@@167| |l#3@@158|) $o@@209 $f@@165))  (=> (and (not (= $o@@209 |l#0@@170|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@169| $o@@209) |l#2@@167|))) |l#3@@158|)))) :qid |BucketsL.1138:9| :skolemid |4186| :pattern ( (MapType9Select (|lambda#397| |l#0@@170| |l#1@@169| |l#2@@167| |l#3@@158|) $o@@209 $f@@165)) )))
(assert (forall ((arg0@@699 T@U) (arg1@@470 T@U) (arg2@@373 T@U) (arg3@@302 Bool) ) (! (= (type (|lambda#398| arg0@@699 arg1@@470 arg2@@373 arg3@@302)) (MapType9Type refType boolType)) :qid |funType:lambda#398| :pattern ( (|lambda#398| arg0@@699 arg1@@470 arg2@@373 arg3@@302)) )))
(assert (forall (($o@@210 T@U) ($f@@166 T@U) (|l#0@@171| T@U) (|l#1@@170| T@U) (|l#2@@168| T@U) (|l#3@@159| Bool) ) (! (let ((alpha@@173 (FieldTypeInv0 (type $f@@166)))) (=> (and (and (and (and (= (type $o@@210) refType) (= (type $f@@166) (FieldType alpha@@173))) (= (type |l#0@@171|) refType)) (= (type |l#1@@170|) (MapType0Type refType MapType1Type))) (= (type |l#2@@168|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#398| |l#0@@171| |l#1@@170| |l#2@@168| |l#3@@159|) $o@@210 $f@@166))  (=> (and (not (= $o@@210 |l#0@@171|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@170| $o@@210) |l#2@@168|))) |l#3@@159|)))) :qid |BucketsL.1138:9| :skolemid |4187| :pattern ( (MapType9Select (|lambda#398| |l#0@@171| |l#1@@170| |l#2@@168| |l#3@@159|) $o@@210 $f@@166)) )))
(assert (forall ((arg0@@700 T@U) (arg1@@471 T@U) (arg2@@374 T@U) (arg3@@303 Bool) ) (! (= (type (|lambda#399| arg0@@700 arg1@@471 arg2@@374 arg3@@303)) (MapType9Type refType boolType)) :qid |funType:lambda#399| :pattern ( (|lambda#399| arg0@@700 arg1@@471 arg2@@374 arg3@@303)) )))
(assert (forall (($o@@211 T@U) ($f@@167 T@U) (|l#0@@172| T@U) (|l#1@@171| T@U) (|l#2@@169| T@U) (|l#3@@160| Bool) ) (! (let ((alpha@@174 (FieldTypeInv0 (type $f@@167)))) (=> (and (and (and (and (= (type $o@@211) refType) (= (type $f@@167) (FieldType alpha@@174))) (= (type |l#0@@172|) refType)) (= (type |l#1@@171|) (MapType0Type refType MapType1Type))) (= (type |l#2@@169|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#399| |l#0@@172| |l#1@@171| |l#2@@169| |l#3@@160|) $o@@211 $f@@167))  (=> (and (not (= $o@@211 |l#0@@172|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@171| $o@@211) |l#2@@169|))) |l#3@@160|)))) :qid |BucketsL.1155:9| :skolemid |4188| :pattern ( (MapType9Select (|lambda#399| |l#0@@172| |l#1@@171| |l#2@@169| |l#3@@160|) $o@@211 $f@@167)) )))
(assert (forall ((arg0@@701 T@U) (arg1@@472 T@U) (arg2@@375 T@U) (arg3@@304 Bool) ) (! (= (type (|lambda#400| arg0@@701 arg1@@472 arg2@@375 arg3@@304)) (MapType9Type refType boolType)) :qid |funType:lambda#400| :pattern ( (|lambda#400| arg0@@701 arg1@@472 arg2@@375 arg3@@304)) )))
(assert (forall (($o@@212 T@U) ($f@@168 T@U) (|l#0@@173| T@U) (|l#1@@172| T@U) (|l#2@@170| T@U) (|l#3@@161| Bool) ) (! (let ((alpha@@175 (FieldTypeInv0 (type $f@@168)))) (=> (and (and (and (and (= (type $o@@212) refType) (= (type $f@@168) (FieldType alpha@@175))) (= (type |l#0@@173|) refType)) (= (type |l#1@@172|) (MapType0Type refType MapType1Type))) (= (type |l#2@@170|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#400| |l#0@@173| |l#1@@172| |l#2@@170| |l#3@@161|) $o@@212 $f@@168))  (=> (and (not (= $o@@212 |l#0@@173|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@172| $o@@212) |l#2@@170|))) |l#3@@161|)))) :qid |BucketsL.1155:9| :skolemid |4189| :pattern ( (MapType9Select (|lambda#400| |l#0@@173| |l#1@@172| |l#2@@170| |l#3@@161|) $o@@212 $f@@168)) )))
(assert (forall ((arg0@@702 T@U) (arg1@@473 T@U) (arg2@@376 T@U) (arg3@@305 Bool) ) (! (= (type (|lambda#401| arg0@@702 arg1@@473 arg2@@376 arg3@@305)) (MapType9Type refType boolType)) :qid |funType:lambda#401| :pattern ( (|lambda#401| arg0@@702 arg1@@473 arg2@@376 arg3@@305)) )))
(assert (forall (($o@@213 T@U) ($f@@169 T@U) (|l#0@@174| T@U) (|l#1@@173| T@U) (|l#2@@171| T@U) (|l#3@@162| Bool) ) (! (let ((alpha@@176 (FieldTypeInv0 (type $f@@169)))) (=> (and (and (and (and (= (type $o@@213) refType) (= (type $f@@169) (FieldType alpha@@176))) (= (type |l#0@@174|) refType)) (= (type |l#1@@173|) (MapType0Type refType MapType1Type))) (= (type |l#2@@171|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#401| |l#0@@174| |l#1@@173| |l#2@@171| |l#3@@162|) $o@@213 $f@@169))  (=> (and (not (= $o@@213 |l#0@@174|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@173| $o@@213) |l#2@@171|))) |l#3@@162|)))) :qid |BucketsL.1163:9| :skolemid |4190| :pattern ( (MapType9Select (|lambda#401| |l#0@@174| |l#1@@173| |l#2@@171| |l#3@@162|) $o@@213 $f@@169)) )))
(assert (forall ((arg0@@703 T@U) (arg1@@474 T@U) (arg2@@377 T@U) (arg3@@306 Bool) ) (! (= (type (|lambda#402| arg0@@703 arg1@@474 arg2@@377 arg3@@306)) (MapType9Type refType boolType)) :qid |funType:lambda#402| :pattern ( (|lambda#402| arg0@@703 arg1@@474 arg2@@377 arg3@@306)) )))
(assert (forall (($o@@214 T@U) ($f@@170 T@U) (|l#0@@175| T@U) (|l#1@@174| T@U) (|l#2@@172| T@U) (|l#3@@163| Bool) ) (! (let ((alpha@@177 (FieldTypeInv0 (type $f@@170)))) (=> (and (and (and (and (= (type $o@@214) refType) (= (type $f@@170) (FieldType alpha@@177))) (= (type |l#0@@175|) refType)) (= (type |l#1@@174|) (MapType0Type refType MapType1Type))) (= (type |l#2@@172|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#402| |l#0@@175| |l#1@@174| |l#2@@172| |l#3@@163|) $o@@214 $f@@170))  (=> (and (not (= $o@@214 |l#0@@175|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@174| $o@@214) |l#2@@172|))) |l#3@@163|)))) :qid |BucketsL.1163:9| :skolemid |4191| :pattern ( (MapType9Select (|lambda#402| |l#0@@175| |l#1@@174| |l#2@@172| |l#3@@163|) $o@@214 $f@@170)) )))
(assert (forall ((arg0@@704 T@U) (arg1@@475 T@U) (arg2@@378 T@U) (arg3@@307 Bool) ) (! (= (type (|lambda#403| arg0@@704 arg1@@475 arg2@@378 arg3@@307)) (MapType9Type refType boolType)) :qid |funType:lambda#403| :pattern ( (|lambda#403| arg0@@704 arg1@@475 arg2@@378 arg3@@307)) )))
(assert (forall (($o@@215 T@U) ($f@@171 T@U) (|l#0@@176| T@U) (|l#1@@175| T@U) (|l#2@@173| T@U) (|l#3@@164| Bool) ) (! (let ((alpha@@178 (FieldTypeInv0 (type $f@@171)))) (=> (and (and (and (and (= (type $o@@215) refType) (= (type $f@@171) (FieldType alpha@@178))) (= (type |l#0@@176|) refType)) (= (type |l#1@@175|) (MapType0Type refType MapType1Type))) (= (type |l#2@@173|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#403| |l#0@@176| |l#1@@175| |l#2@@173| |l#3@@164|) $o@@215 $f@@171))  (=> (and (not (= $o@@215 |l#0@@176|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@175| $o@@215) |l#2@@173|))) |l#3@@164|)))) :qid |BucketsL.1177:9| :skolemid |4192| :pattern ( (MapType9Select (|lambda#403| |l#0@@176| |l#1@@175| |l#2@@173| |l#3@@164|) $o@@215 $f@@171)) )))
(assert (forall ((arg0@@705 T@U) (arg1@@476 T@U) (arg2@@379 T@U) (arg3@@308 Bool) ) (! (= (type (|lambda#404| arg0@@705 arg1@@476 arg2@@379 arg3@@308)) (MapType9Type refType boolType)) :qid |funType:lambda#404| :pattern ( (|lambda#404| arg0@@705 arg1@@476 arg2@@379 arg3@@308)) )))
(assert (forall (($o@@216 T@U) ($f@@172 T@U) (|l#0@@177| T@U) (|l#1@@176| T@U) (|l#2@@174| T@U) (|l#3@@165| Bool) ) (! (let ((alpha@@179 (FieldTypeInv0 (type $f@@172)))) (=> (and (and (and (and (= (type $o@@216) refType) (= (type $f@@172) (FieldType alpha@@179))) (= (type |l#0@@177|) refType)) (= (type |l#1@@176|) (MapType0Type refType MapType1Type))) (= (type |l#2@@174|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#404| |l#0@@177| |l#1@@176| |l#2@@174| |l#3@@165|) $o@@216 $f@@172))  (=> (and (not (= $o@@216 |l#0@@177|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@176| $o@@216) |l#2@@174|))) |l#3@@165|)))) :qid |BucketsL.1177:9| :skolemid |4193| :pattern ( (MapType9Select (|lambda#404| |l#0@@177| |l#1@@176| |l#2@@174| |l#3@@165|) $o@@216 $f@@172)) )))
(assert (forall ((arg0@@706 T@U) (arg1@@477 T@U) (arg2@@380 T@U) (arg3@@309 Bool) ) (! (= (type (|lambda#405| arg0@@706 arg1@@477 arg2@@380 arg3@@309)) (MapType9Type refType boolType)) :qid |funType:lambda#405| :pattern ( (|lambda#405| arg0@@706 arg1@@477 arg2@@380 arg3@@309)) )))
(assert (forall (($o@@217 T@U) ($f@@173 T@U) (|l#0@@178| T@U) (|l#1@@177| T@U) (|l#2@@175| T@U) (|l#3@@166| Bool) ) (! (let ((alpha@@180 (FieldTypeInv0 (type $f@@173)))) (=> (and (and (and (and (= (type $o@@217) refType) (= (type $f@@173) (FieldType alpha@@180))) (= (type |l#0@@178|) refType)) (= (type |l#1@@177|) (MapType0Type refType MapType1Type))) (= (type |l#2@@175|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#405| |l#0@@178| |l#1@@177| |l#2@@175| |l#3@@166|) $o@@217 $f@@173))  (=> (and (not (= $o@@217 |l#0@@178|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@177| $o@@217) |l#2@@175|))) |l#3@@166|)))) :qid |BucketsL.1188:9| :skolemid |4194| :pattern ( (MapType9Select (|lambda#405| |l#0@@178| |l#1@@177| |l#2@@175| |l#3@@166|) $o@@217 $f@@173)) )))
(assert (forall ((arg0@@707 T@U) (arg1@@478 T@U) (arg2@@381 T@U) (arg3@@310 Bool) ) (! (= (type (|lambda#406| arg0@@707 arg1@@478 arg2@@381 arg3@@310)) (MapType9Type refType boolType)) :qid |funType:lambda#406| :pattern ( (|lambda#406| arg0@@707 arg1@@478 arg2@@381 arg3@@310)) )))
(assert (forall (($o@@218 T@U) ($f@@174 T@U) (|l#0@@179| T@U) (|l#1@@178| T@U) (|l#2@@176| T@U) (|l#3@@167| Bool) ) (! (let ((alpha@@181 (FieldTypeInv0 (type $f@@174)))) (=> (and (and (and (and (= (type $o@@218) refType) (= (type $f@@174) (FieldType alpha@@181))) (= (type |l#0@@179|) refType)) (= (type |l#1@@178|) (MapType0Type refType MapType1Type))) (= (type |l#2@@176|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#406| |l#0@@179| |l#1@@178| |l#2@@176| |l#3@@167|) $o@@218 $f@@174))  (=> (and (not (= $o@@218 |l#0@@179|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@178| $o@@218) |l#2@@176|))) |l#3@@167|)))) :qid |BucketsL.1188:9| :skolemid |4195| :pattern ( (MapType9Select (|lambda#406| |l#0@@179| |l#1@@178| |l#2@@176| |l#3@@167|) $o@@218 $f@@174)) )))
(assert (forall ((arg0@@708 T@U) (arg1@@479 T@U) (arg2@@382 T@U) (arg3@@311 Bool) ) (! (= (type (|lambda#407| arg0@@708 arg1@@479 arg2@@382 arg3@@311)) (MapType9Type refType boolType)) :qid |funType:lambda#407| :pattern ( (|lambda#407| arg0@@708 arg1@@479 arg2@@382 arg3@@311)) )))
(assert (forall (($o@@219 T@U) ($f@@175 T@U) (|l#0@@180| T@U) (|l#1@@179| T@U) (|l#2@@177| T@U) (|l#3@@168| Bool) ) (! (let ((alpha@@182 (FieldTypeInv0 (type $f@@175)))) (=> (and (and (and (and (= (type $o@@219) refType) (= (type $f@@175) (FieldType alpha@@182))) (= (type |l#0@@180|) refType)) (= (type |l#1@@179|) (MapType0Type refType MapType1Type))) (= (type |l#2@@177|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#407| |l#0@@180| |l#1@@179| |l#2@@177| |l#3@@168|) $o@@219 $f@@175))  (=> (and (not (= $o@@219 |l#0@@180|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@179| $o@@219) |l#2@@177|))) |l#3@@168|)))) :qid |BucketsL.1199:9| :skolemid |4196| :pattern ( (MapType9Select (|lambda#407| |l#0@@180| |l#1@@179| |l#2@@177| |l#3@@168|) $o@@219 $f@@175)) )))
(assert (forall ((arg0@@709 T@U) (arg1@@480 T@U) (arg2@@383 T@U) (arg3@@312 Bool) ) (! (= (type (|lambda#408| arg0@@709 arg1@@480 arg2@@383 arg3@@312)) (MapType9Type refType boolType)) :qid |funType:lambda#408| :pattern ( (|lambda#408| arg0@@709 arg1@@480 arg2@@383 arg3@@312)) )))
(assert (forall (($o@@220 T@U) ($f@@176 T@U) (|l#0@@181| T@U) (|l#1@@180| T@U) (|l#2@@178| T@U) (|l#3@@169| Bool) ) (! (let ((alpha@@183 (FieldTypeInv0 (type $f@@176)))) (=> (and (and (and (and (= (type $o@@220) refType) (= (type $f@@176) (FieldType alpha@@183))) (= (type |l#0@@181|) refType)) (= (type |l#1@@180|) (MapType0Type refType MapType1Type))) (= (type |l#2@@178|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#408| |l#0@@181| |l#1@@180| |l#2@@178| |l#3@@169|) $o@@220 $f@@176))  (=> (and (not (= $o@@220 |l#0@@181|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@180| $o@@220) |l#2@@178|))) |l#3@@169|)))) :qid |BucketsL.1199:9| :skolemid |4197| :pattern ( (MapType9Select (|lambda#408| |l#0@@181| |l#1@@180| |l#2@@178| |l#3@@169|) $o@@220 $f@@176)) )))
(assert (forall ((arg0@@710 T@U) (arg1@@481 T@U) (arg2@@384 T@U) (arg3@@313 Bool) ) (! (= (type (|lambda#409| arg0@@710 arg1@@481 arg2@@384 arg3@@313)) (MapType9Type refType boolType)) :qid |funType:lambda#409| :pattern ( (|lambda#409| arg0@@710 arg1@@481 arg2@@384 arg3@@313)) )))
(assert (forall (($o@@221 T@U) ($f@@177 T@U) (|l#0@@182| T@U) (|l#1@@181| T@U) (|l#2@@179| T@U) (|l#3@@170| Bool) ) (! (let ((alpha@@184 (FieldTypeInv0 (type $f@@177)))) (=> (and (and (and (and (= (type $o@@221) refType) (= (type $f@@177) (FieldType alpha@@184))) (= (type |l#0@@182|) refType)) (= (type |l#1@@181|) (MapType0Type refType MapType1Type))) (= (type |l#2@@179|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#409| |l#0@@182| |l#1@@181| |l#2@@179| |l#3@@170|) $o@@221 $f@@177))  (=> (and (not (= $o@@221 |l#0@@182|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@181| $o@@221) |l#2@@179|))) |l#3@@170|)))) :qid |BucketsL.1207:9| :skolemid |4198| :pattern ( (MapType9Select (|lambda#409| |l#0@@182| |l#1@@181| |l#2@@179| |l#3@@170|) $o@@221 $f@@177)) )))
(assert (forall ((arg0@@711 T@U) (arg1@@482 T@U) (arg2@@385 T@U) (arg3@@314 Bool) ) (! (= (type (|lambda#410| arg0@@711 arg1@@482 arg2@@385 arg3@@314)) (MapType9Type refType boolType)) :qid |funType:lambda#410| :pattern ( (|lambda#410| arg0@@711 arg1@@482 arg2@@385 arg3@@314)) )))
(assert (forall (($o@@222 T@U) ($f@@178 T@U) (|l#0@@183| T@U) (|l#1@@182| T@U) (|l#2@@180| T@U) (|l#3@@171| Bool) ) (! (let ((alpha@@185 (FieldTypeInv0 (type $f@@178)))) (=> (and (and (and (and (= (type $o@@222) refType) (= (type $f@@178) (FieldType alpha@@185))) (= (type |l#0@@183|) refType)) (= (type |l#1@@182|) (MapType0Type refType MapType1Type))) (= (type |l#2@@180|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#410| |l#0@@183| |l#1@@182| |l#2@@180| |l#3@@171|) $o@@222 $f@@178))  (=> (and (not (= $o@@222 |l#0@@183|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@182| $o@@222) |l#2@@180|))) |l#3@@171|)))) :qid |BucketsL.1207:9| :skolemid |4199| :pattern ( (MapType9Select (|lambda#410| |l#0@@183| |l#1@@182| |l#2@@180| |l#3@@171|) $o@@222 $f@@178)) )))
(assert (forall ((arg0@@712 T@U) (arg1@@483 T@U) (arg2@@386 T@U) (arg3@@315 Bool) ) (! (= (type (|lambda#411| arg0@@712 arg1@@483 arg2@@386 arg3@@315)) (MapType9Type refType boolType)) :qid |funType:lambda#411| :pattern ( (|lambda#411| arg0@@712 arg1@@483 arg2@@386 arg3@@315)) )))
(assert (forall (($o@@223 T@U) ($f@@179 T@U) (|l#0@@184| T@U) (|l#1@@183| T@U) (|l#2@@181| T@U) (|l#3@@172| Bool) ) (! (let ((alpha@@186 (FieldTypeInv0 (type $f@@179)))) (=> (and (and (and (and (= (type $o@@223) refType) (= (type $f@@179) (FieldType alpha@@186))) (= (type |l#0@@184|) refType)) (= (type |l#1@@183|) (MapType0Type refType MapType1Type))) (= (type |l#2@@181|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#411| |l#0@@184| |l#1@@183| |l#2@@181| |l#3@@172|) $o@@223 $f@@179))  (=> (and (not (= $o@@223 |l#0@@184|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@183| $o@@223) |l#2@@181|))) |l#3@@172|)))) :qid |BucketsL.1225:9| :skolemid |4200| :pattern ( (MapType9Select (|lambda#411| |l#0@@184| |l#1@@183| |l#2@@181| |l#3@@172|) $o@@223 $f@@179)) )))
(assert (forall ((arg0@@713 T@U) (arg1@@484 T@U) (arg2@@387 T@U) (arg3@@316 Bool) ) (! (= (type (|lambda#412| arg0@@713 arg1@@484 arg2@@387 arg3@@316)) (MapType9Type refType boolType)) :qid |funType:lambda#412| :pattern ( (|lambda#412| arg0@@713 arg1@@484 arg2@@387 arg3@@316)) )))
(assert (forall (($o@@224 T@U) ($f@@180 T@U) (|l#0@@185| T@U) (|l#1@@184| T@U) (|l#2@@182| T@U) (|l#3@@173| Bool) ) (! (let ((alpha@@187 (FieldTypeInv0 (type $f@@180)))) (=> (and (and (and (and (= (type $o@@224) refType) (= (type $f@@180) (FieldType alpha@@187))) (= (type |l#0@@185|) refType)) (= (type |l#1@@184|) (MapType0Type refType MapType1Type))) (= (type |l#2@@182|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#412| |l#0@@185| |l#1@@184| |l#2@@182| |l#3@@173|) $o@@224 $f@@180))  (=> (and (not (= $o@@224 |l#0@@185|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@184| $o@@224) |l#2@@182|))) |l#3@@173|)))) :qid |BucketsL.1225:9| :skolemid |4201| :pattern ( (MapType9Select (|lambda#412| |l#0@@185| |l#1@@184| |l#2@@182| |l#3@@173|) $o@@224 $f@@180)) )))
(assert (forall ((arg0@@714 T@U) (arg1@@485 T@U) (arg2@@388 T@U) (arg3@@317 Bool) ) (! (= (type (|lambda#413| arg0@@714 arg1@@485 arg2@@388 arg3@@317)) (MapType9Type refType boolType)) :qid |funType:lambda#413| :pattern ( (|lambda#413| arg0@@714 arg1@@485 arg2@@388 arg3@@317)) )))
(assert (forall (($o@@225 T@U) ($f@@181 T@U) (|l#0@@186| T@U) (|l#1@@185| T@U) (|l#2@@183| T@U) (|l#3@@174| Bool) ) (! (let ((alpha@@188 (FieldTypeInv0 (type $f@@181)))) (=> (and (and (and (and (= (type $o@@225) refType) (= (type $f@@181) (FieldType alpha@@188))) (= (type |l#0@@186|) refType)) (= (type |l#1@@185|) (MapType0Type refType MapType1Type))) (= (type |l#2@@183|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#413| |l#0@@186| |l#1@@185| |l#2@@183| |l#3@@174|) $o@@225 $f@@181))  (=> (and (not (= $o@@225 |l#0@@186|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@185| $o@@225) |l#2@@183|))) |l#3@@174|)))) :qid |BucketsL.1236:9| :skolemid |4202| :pattern ( (MapType9Select (|lambda#413| |l#0@@186| |l#1@@185| |l#2@@183| |l#3@@174|) $o@@225 $f@@181)) )))
(assert (forall ((arg0@@715 T@U) (arg1@@486 T@U) (arg2@@389 T@U) (arg3@@318 Bool) ) (! (= (type (|lambda#414| arg0@@715 arg1@@486 arg2@@389 arg3@@318)) (MapType9Type refType boolType)) :qid |funType:lambda#414| :pattern ( (|lambda#414| arg0@@715 arg1@@486 arg2@@389 arg3@@318)) )))
(assert (forall (($o@@226 T@U) ($f@@182 T@U) (|l#0@@187| T@U) (|l#1@@186| T@U) (|l#2@@184| T@U) (|l#3@@175| Bool) ) (! (let ((alpha@@189 (FieldTypeInv0 (type $f@@182)))) (=> (and (and (and (and (= (type $o@@226) refType) (= (type $f@@182) (FieldType alpha@@189))) (= (type |l#0@@187|) refType)) (= (type |l#1@@186|) (MapType0Type refType MapType1Type))) (= (type |l#2@@184|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#414| |l#0@@187| |l#1@@186| |l#2@@184| |l#3@@175|) $o@@226 $f@@182))  (=> (and (not (= $o@@226 |l#0@@187|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@186| $o@@226) |l#2@@184|))) |l#3@@175|)))) :qid |BucketsL.1236:9| :skolemid |4203| :pattern ( (MapType9Select (|lambda#414| |l#0@@187| |l#1@@186| |l#2@@184| |l#3@@175|) $o@@226 $f@@182)) )))
(assert (forall ((arg0@@716 T@U) (arg1@@487 T@U) (arg2@@390 T@U) (arg3@@319 Bool) ) (! (= (type (|lambda#415| arg0@@716 arg1@@487 arg2@@390 arg3@@319)) (MapType9Type refType boolType)) :qid |funType:lambda#415| :pattern ( (|lambda#415| arg0@@716 arg1@@487 arg2@@390 arg3@@319)) )))
(assert (forall (($o@@227 T@U) ($f@@183 T@U) (|l#0@@188| T@U) (|l#1@@187| T@U) (|l#2@@185| T@U) (|l#3@@176| Bool) ) (! (let ((alpha@@190 (FieldTypeInv0 (type $f@@183)))) (=> (and (and (and (and (= (type $o@@227) refType) (= (type $f@@183) (FieldType alpha@@190))) (= (type |l#0@@188|) refType)) (= (type |l#1@@187|) (MapType0Type refType MapType1Type))) (= (type |l#2@@185|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#415| |l#0@@188| |l#1@@187| |l#2@@185| |l#3@@176|) $o@@227 $f@@183))  (=> (and (not (= $o@@227 |l#0@@188|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@187| $o@@227) |l#2@@185|))) |l#3@@176|)))) :qid |BucketsL.1250:9| :skolemid |4204| :pattern ( (MapType9Select (|lambda#415| |l#0@@188| |l#1@@187| |l#2@@185| |l#3@@176|) $o@@227 $f@@183)) )))
(assert (forall ((arg0@@717 T@U) (arg1@@488 T@U) (arg2@@391 T@U) (arg3@@320 Bool) ) (! (= (type (|lambda#416| arg0@@717 arg1@@488 arg2@@391 arg3@@320)) (MapType9Type refType boolType)) :qid |funType:lambda#416| :pattern ( (|lambda#416| arg0@@717 arg1@@488 arg2@@391 arg3@@320)) )))
(assert (forall (($o@@228 T@U) ($f@@184 T@U) (|l#0@@189| T@U) (|l#1@@188| T@U) (|l#2@@186| T@U) (|l#3@@177| Bool) ) (! (let ((alpha@@191 (FieldTypeInv0 (type $f@@184)))) (=> (and (and (and (and (= (type $o@@228) refType) (= (type $f@@184) (FieldType alpha@@191))) (= (type |l#0@@189|) refType)) (= (type |l#1@@188|) (MapType0Type refType MapType1Type))) (= (type |l#2@@186|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#416| |l#0@@189| |l#1@@188| |l#2@@186| |l#3@@177|) $o@@228 $f@@184))  (=> (and (not (= $o@@228 |l#0@@189|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@188| $o@@228) |l#2@@186|))) |l#3@@177|)))) :qid |BucketsL.1250:9| :skolemid |4205| :pattern ( (MapType9Select (|lambda#416| |l#0@@189| |l#1@@188| |l#2@@186| |l#3@@177|) $o@@228 $f@@184)) )))
(assert (forall ((arg0@@718 T@U) (arg1@@489 T@U) (arg2@@392 T@U) (arg3@@321 Bool) ) (! (= (type (|lambda#417| arg0@@718 arg1@@489 arg2@@392 arg3@@321)) (MapType9Type refType boolType)) :qid |funType:lambda#417| :pattern ( (|lambda#417| arg0@@718 arg1@@489 arg2@@392 arg3@@321)) )))
(assert (forall (($o@@229 T@U) ($f@@185 T@U) (|l#0@@190| T@U) (|l#1@@189| T@U) (|l#2@@187| T@U) (|l#3@@178| Bool) ) (! (let ((alpha@@192 (FieldTypeInv0 (type $f@@185)))) (=> (and (and (and (and (= (type $o@@229) refType) (= (type $f@@185) (FieldType alpha@@192))) (= (type |l#0@@190|) refType)) (= (type |l#1@@189|) (MapType0Type refType MapType1Type))) (= (type |l#2@@187|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#417| |l#0@@190| |l#1@@189| |l#2@@187| |l#3@@178|) $o@@229 $f@@185))  (=> (and (not (= $o@@229 |l#0@@190|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@189| $o@@229) |l#2@@187|))) |l#3@@178|)))) :qid |BucketsL.1355:9| :skolemid |4206| :pattern ( (MapType9Select (|lambda#417| |l#0@@190| |l#1@@189| |l#2@@187| |l#3@@178|) $o@@229 $f@@185)) )))
(assert (forall ((arg0@@719 T@U) (arg1@@490 T@U) (arg2@@393 T@U) (arg3@@322 Bool) ) (! (= (type (|lambda#418| arg0@@719 arg1@@490 arg2@@393 arg3@@322)) (MapType9Type refType boolType)) :qid |funType:lambda#418| :pattern ( (|lambda#418| arg0@@719 arg1@@490 arg2@@393 arg3@@322)) )))
(assert (forall (($o@@230 T@U) ($f@@186 T@U) (|l#0@@191| T@U) (|l#1@@190| T@U) (|l#2@@188| T@U) (|l#3@@179| Bool) ) (! (let ((alpha@@193 (FieldTypeInv0 (type $f@@186)))) (=> (and (and (and (and (= (type $o@@230) refType) (= (type $f@@186) (FieldType alpha@@193))) (= (type |l#0@@191|) refType)) (= (type |l#1@@190|) (MapType0Type refType MapType1Type))) (= (type |l#2@@188|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#418| |l#0@@191| |l#1@@190| |l#2@@188| |l#3@@179|) $o@@230 $f@@186))  (=> (and (not (= $o@@230 |l#0@@191|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@190| $o@@230) |l#2@@188|))) |l#3@@179|)))) :qid |BucketsL.1355:9| :skolemid |4207| :pattern ( (MapType9Select (|lambda#418| |l#0@@191| |l#1@@190| |l#2@@188| |l#3@@179|) $o@@230 $f@@186)) )))
(assert (forall ((arg0@@720 T@U) (arg1@@491 T@U) (arg2@@394 T@U) (arg3@@323 Bool) ) (! (= (type (|lambda#423| arg0@@720 arg1@@491 arg2@@394 arg3@@323)) (MapType9Type refType boolType)) :qid |funType:lambda#423| :pattern ( (|lambda#423| arg0@@720 arg1@@491 arg2@@394 arg3@@323)) )))
(assert (forall (($o@@231 T@U) ($f@@187 T@U) (|l#0@@192| T@U) (|l#1@@191| T@U) (|l#2@@189| T@U) (|l#3@@180| Bool) ) (! (let ((alpha@@194 (FieldTypeInv0 (type $f@@187)))) (=> (and (and (and (and (= (type $o@@231) refType) (= (type $f@@187) (FieldType alpha@@194))) (= (type |l#0@@192|) refType)) (= (type |l#1@@191|) (MapType0Type refType MapType1Type))) (= (type |l#2@@189|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#423| |l#0@@192| |l#1@@191| |l#2@@189| |l#3@@180|) $o@@231 $f@@187))  (=> (and (not (= $o@@231 |l#0@@192|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@191| $o@@231) |l#2@@189|))) |l#3@@180|)))) :qid |BucketsL.1394:9| :skolemid |4208| :pattern ( (MapType9Select (|lambda#423| |l#0@@192| |l#1@@191| |l#2@@189| |l#3@@180|) $o@@231 $f@@187)) )))
(assert (forall ((arg0@@721 T@U) (arg1@@492 T@U) (arg2@@395 T@U) (arg3@@324 Bool) ) (! (= (type (|lambda#444| arg0@@721 arg1@@492 arg2@@395 arg3@@324)) (MapType9Type refType boolType)) :qid |funType:lambda#444| :pattern ( (|lambda#444| arg0@@721 arg1@@492 arg2@@395 arg3@@324)) )))
(assert (forall (($o@@232 T@U) ($f@@188 T@U) (|l#0@@193| T@U) (|l#1@@192| T@U) (|l#2@@190| T@U) (|l#3@@181| Bool) ) (! (let ((alpha@@195 (FieldTypeInv0 (type $f@@188)))) (=> (and (and (and (and (= (type $o@@232) refType) (= (type $f@@188) (FieldType alpha@@195))) (= (type |l#0@@193|) refType)) (= (type |l#1@@192|) (MapType0Type refType MapType1Type))) (= (type |l#2@@190|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#444| |l#0@@193| |l#1@@192| |l#2@@190| |l#3@@181|) $o@@232 $f@@188))  (=> (and (not (= $o@@232 |l#0@@193|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@192| $o@@232) |l#2@@190|))) |l#3@@181|)))) :qid |BucketsL.1394:9| :skolemid |4209| :pattern ( (MapType9Select (|lambda#444| |l#0@@193| |l#1@@192| |l#2@@190| |l#3@@181|) $o@@232 $f@@188)) )))
(assert (forall ((arg0@@722 T@U) (arg1@@493 T@U) (arg2@@396 T@U) (arg3@@325 Bool) ) (! (= (type (|lambda#447| arg0@@722 arg1@@493 arg2@@396 arg3@@325)) (MapType9Type refType boolType)) :qid |funType:lambda#447| :pattern ( (|lambda#447| arg0@@722 arg1@@493 arg2@@396 arg3@@325)) )))
(assert (forall (($o@@233 T@U) ($f@@189 T@U) (|l#0@@194| T@U) (|l#1@@193| T@U) (|l#2@@191| T@U) (|l#3@@182| Bool) ) (! (let ((alpha@@196 (FieldTypeInv0 (type $f@@189)))) (=> (and (and (and (and (= (type $o@@233) refType) (= (type $f@@189) (FieldType alpha@@196))) (= (type |l#0@@194|) refType)) (= (type |l#1@@193|) (MapType0Type refType MapType1Type))) (= (type |l#2@@191|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#447| |l#0@@194| |l#1@@193| |l#2@@191| |l#3@@182|) $o@@233 $f@@189))  (=> (and (not (= $o@@233 |l#0@@194|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@193| $o@@233) |l#2@@191|))) |l#3@@182|)))) :qid |BucketsL.1426:9| :skolemid |4210| :pattern ( (MapType9Select (|lambda#447| |l#0@@194| |l#1@@193| |l#2@@191| |l#3@@182|) $o@@233 $f@@189)) )))
(assert (forall ((arg0@@723 T@U) (arg1@@494 T@U) (arg2@@397 T@U) (arg3@@326 Bool) ) (! (= (type (|lambda#448| arg0@@723 arg1@@494 arg2@@397 arg3@@326)) (MapType9Type refType boolType)) :qid |funType:lambda#448| :pattern ( (|lambda#448| arg0@@723 arg1@@494 arg2@@397 arg3@@326)) )))
(assert (forall (($o@@234 T@U) ($f@@190 T@U) (|l#0@@195| T@U) (|l#1@@194| T@U) (|l#2@@192| T@U) (|l#3@@183| Bool) ) (! (let ((alpha@@197 (FieldTypeInv0 (type $f@@190)))) (=> (and (and (and (and (= (type $o@@234) refType) (= (type $f@@190) (FieldType alpha@@197))) (= (type |l#0@@195|) refType)) (= (type |l#1@@194|) (MapType0Type refType MapType1Type))) (= (type |l#2@@192|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#448| |l#0@@195| |l#1@@194| |l#2@@192| |l#3@@183|) $o@@234 $f@@190))  (=> (and (not (= $o@@234 |l#0@@195|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@194| $o@@234) |l#2@@192|))) |l#3@@183|)))) :qid |BucketsL.1426:9| :skolemid |4211| :pattern ( (MapType9Select (|lambda#448| |l#0@@195| |l#1@@194| |l#2@@192| |l#3@@183|) $o@@234 $f@@190)) )))
(assert (forall ((arg0@@724 T@U) (arg1@@495 T@U) (arg2@@398 T@U) (arg3@@327 Bool) ) (! (= (type (|lambda#449| arg0@@724 arg1@@495 arg2@@398 arg3@@327)) (MapType9Type refType boolType)) :qid |funType:lambda#449| :pattern ( (|lambda#449| arg0@@724 arg1@@495 arg2@@398 arg3@@327)) )))
(assert (forall (($o@@235 T@U) ($f@@191 T@U) (|l#0@@196| T@U) (|l#1@@195| T@U) (|l#2@@193| T@U) (|l#3@@184| Bool) ) (! (let ((alpha@@198 (FieldTypeInv0 (type $f@@191)))) (=> (and (and (and (and (= (type $o@@235) refType) (= (type $f@@191) (FieldType alpha@@198))) (= (type |l#0@@196|) refType)) (= (type |l#1@@195|) (MapType0Type refType MapType1Type))) (= (type |l#2@@193|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#449| |l#0@@196| |l#1@@195| |l#2@@193| |l#3@@184|) $o@@235 $f@@191))  (=> (and (not (= $o@@235 |l#0@@196|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@195| $o@@235) |l#2@@193|))) |l#3@@184|)))) :qid |BucketsL.1463:12| :skolemid |4212| :pattern ( (MapType9Select (|lambda#449| |l#0@@196| |l#1@@195| |l#2@@193| |l#3@@184|) $o@@235 $f@@191)) )))
(assert (forall ((arg0@@725 T@U) (arg1@@496 T@U) (arg2@@399 T@U) (arg3@@328 Bool) ) (! (= (type (|lambda#450| arg0@@725 arg1@@496 arg2@@399 arg3@@328)) (MapType9Type refType boolType)) :qid |funType:lambda#450| :pattern ( (|lambda#450| arg0@@725 arg1@@496 arg2@@399 arg3@@328)) )))
(assert (forall (($o@@236 T@U) ($f@@192 T@U) (|l#0@@197| T@U) (|l#1@@196| T@U) (|l#2@@194| T@U) (|l#3@@185| Bool) ) (! (let ((alpha@@199 (FieldTypeInv0 (type $f@@192)))) (=> (and (and (and (and (= (type $o@@236) refType) (= (type $f@@192) (FieldType alpha@@199))) (= (type |l#0@@197|) refType)) (= (type |l#1@@196|) (MapType0Type refType MapType1Type))) (= (type |l#2@@194|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#450| |l#0@@197| |l#1@@196| |l#2@@194| |l#3@@185|) $o@@236 $f@@192))  (=> (and (not (= $o@@236 |l#0@@197|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@196| $o@@236) |l#2@@194|))) |l#3@@185|)))) :qid |BucketsL.1463:12| :skolemid |4213| :pattern ( (MapType9Select (|lambda#450| |l#0@@197| |l#1@@196| |l#2@@194| |l#3@@185|) $o@@236 $f@@192)) )))
(assert (forall ((arg0@@726 T@U) (arg1@@497 T@U) (arg2@@400 T@U) (arg3@@329 Bool) ) (! (= (type (|lambda#451| arg0@@726 arg1@@497 arg2@@400 arg3@@329)) (MapType9Type refType boolType)) :qid |funType:lambda#451| :pattern ( (|lambda#451| arg0@@726 arg1@@497 arg2@@400 arg3@@329)) )))
(assert (forall (($o@@237 T@U) ($f@@193 T@U) (|l#0@@198| T@U) (|l#1@@197| T@U) (|l#2@@195| T@U) (|l#3@@186| Bool) ) (! (let ((alpha@@200 (FieldTypeInv0 (type $f@@193)))) (=> (and (and (and (and (= (type $o@@237) refType) (= (type $f@@193) (FieldType alpha@@200))) (= (type |l#0@@198|) refType)) (= (type |l#1@@197|) (MapType0Type refType MapType1Type))) (= (type |l#2@@195|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#451| |l#0@@198| |l#1@@197| |l#2@@195| |l#3@@186|) $o@@237 $f@@193))  (=> (and (not (= $o@@237 |l#0@@198|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@197| $o@@237) |l#2@@195|))) |l#3@@186|)))) :qid |BucketsL.1471:9| :skolemid |4214| :pattern ( (MapType9Select (|lambda#451| |l#0@@198| |l#1@@197| |l#2@@195| |l#3@@186|) $o@@237 $f@@193)) )))
(assert (forall ((arg0@@727 T@U) (arg1@@498 T@U) (arg2@@401 T@U) (arg3@@330 Bool) ) (! (= (type (|lambda#452| arg0@@727 arg1@@498 arg2@@401 arg3@@330)) (MapType9Type refType boolType)) :qid |funType:lambda#452| :pattern ( (|lambda#452| arg0@@727 arg1@@498 arg2@@401 arg3@@330)) )))
(assert (forall (($o@@238 T@U) ($f@@194 T@U) (|l#0@@199| T@U) (|l#1@@198| T@U) (|l#2@@196| T@U) (|l#3@@187| Bool) ) (! (let ((alpha@@201 (FieldTypeInv0 (type $f@@194)))) (=> (and (and (and (and (= (type $o@@238) refType) (= (type $f@@194) (FieldType alpha@@201))) (= (type |l#0@@199|) refType)) (= (type |l#1@@198|) (MapType0Type refType MapType1Type))) (= (type |l#2@@196|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#452| |l#0@@199| |l#1@@198| |l#2@@196| |l#3@@187|) $o@@238 $f@@194))  (=> (and (not (= $o@@238 |l#0@@199|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@198| $o@@238) |l#2@@196|))) |l#3@@187|)))) :qid |BucketsL.1482:9| :skolemid |4215| :pattern ( (MapType9Select (|lambda#452| |l#0@@199| |l#1@@198| |l#2@@196| |l#3@@187|) $o@@238 $f@@194)) )))
(assert (forall ((arg0@@728 T@U) (arg1@@499 T@U) (arg2@@402 T@U) (arg3@@331 Bool) ) (! (= (type (|lambda#457| arg0@@728 arg1@@499 arg2@@402 arg3@@331)) (MapType9Type refType boolType)) :qid |funType:lambda#457| :pattern ( (|lambda#457| arg0@@728 arg1@@499 arg2@@402 arg3@@331)) )))
(assert (forall (($o@@239 T@U) ($f@@195 T@U) (|l#0@@200| T@U) (|l#1@@199| T@U) (|l#2@@197| T@U) (|l#3@@188| Bool) ) (! (let ((alpha@@202 (FieldTypeInv0 (type $f@@195)))) (=> (and (and (and (and (= (type $o@@239) refType) (= (type $f@@195) (FieldType alpha@@202))) (= (type |l#0@@200|) refType)) (= (type |l#1@@199|) (MapType0Type refType MapType1Type))) (= (type |l#2@@197|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#457| |l#0@@200| |l#1@@199| |l#2@@197| |l#3@@188|) $o@@239 $f@@195))  (=> (and (not (= $o@@239 |l#0@@200|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@199| $o@@239) |l#2@@197|))) |l#3@@188|)))) :qid |BucketsL.1529:9| :skolemid |4216| :pattern ( (MapType9Select (|lambda#457| |l#0@@200| |l#1@@199| |l#2@@197| |l#3@@188|) $o@@239 $f@@195)) )))
(assert (forall ((arg0@@729 T@U) (arg1@@500 T@U) (arg2@@403 T@U) (arg3@@332 Bool) ) (! (= (type (|lambda#458| arg0@@729 arg1@@500 arg2@@403 arg3@@332)) (MapType9Type refType boolType)) :qid |funType:lambda#458| :pattern ( (|lambda#458| arg0@@729 arg1@@500 arg2@@403 arg3@@332)) )))
(assert (forall (($o@@240 T@U) ($f@@196 T@U) (|l#0@@201| T@U) (|l#1@@200| T@U) (|l#2@@198| T@U) (|l#3@@189| Bool) ) (! (let ((alpha@@203 (FieldTypeInv0 (type $f@@196)))) (=> (and (and (and (and (= (type $o@@240) refType) (= (type $f@@196) (FieldType alpha@@203))) (= (type |l#0@@201|) refType)) (= (type |l#1@@200|) (MapType0Type refType MapType1Type))) (= (type |l#2@@198|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#458| |l#0@@201| |l#1@@200| |l#2@@198| |l#3@@189|) $o@@240 $f@@196))  (=> (and (not (= $o@@240 |l#0@@201|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@200| $o@@240) |l#2@@198|))) |l#3@@189|)))) :qid |BucketsL.1529:9| :skolemid |4217| :pattern ( (MapType9Select (|lambda#458| |l#0@@201| |l#1@@200| |l#2@@198| |l#3@@189|) $o@@240 $f@@196)) )))
(assert (forall ((arg0@@730 T@U) (arg1@@501 T@U) (arg2@@404 T@U) (arg3@@333 Bool) ) (! (= (type (|lambda#459| arg0@@730 arg1@@501 arg2@@404 arg3@@333)) (MapType9Type refType boolType)) :qid |funType:lambda#459| :pattern ( (|lambda#459| arg0@@730 arg1@@501 arg2@@404 arg3@@333)) )))
(assert (forall (($o@@241 T@U) ($f@@197 T@U) (|l#0@@202| T@U) (|l#1@@201| T@U) (|l#2@@199| T@U) (|l#3@@190| Bool) ) (! (let ((alpha@@204 (FieldTypeInv0 (type $f@@197)))) (=> (and (and (and (and (= (type $o@@241) refType) (= (type $f@@197) (FieldType alpha@@204))) (= (type |l#0@@202|) refType)) (= (type |l#1@@201|) (MapType0Type refType MapType1Type))) (= (type |l#2@@199|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#459| |l#0@@202| |l#1@@201| |l#2@@199| |l#3@@190|) $o@@241 $f@@197))  (=> (and (not (= $o@@241 |l#0@@202|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@201| $o@@241) |l#2@@199|))) |l#3@@190|)))) :qid |BucketsL.1537:9| :skolemid |4218| :pattern ( (MapType9Select (|lambda#459| |l#0@@202| |l#1@@201| |l#2@@199| |l#3@@190|) $o@@241 $f@@197)) )))
(assert (forall ((arg0@@731 T@U) (arg1@@502 T@U) (arg2@@405 T@U) (arg3@@334 Bool) ) (! (= (type (|lambda#460| arg0@@731 arg1@@502 arg2@@405 arg3@@334)) (MapType9Type refType boolType)) :qid |funType:lambda#460| :pattern ( (|lambda#460| arg0@@731 arg1@@502 arg2@@405 arg3@@334)) )))
(assert (forall (($o@@242 T@U) ($f@@198 T@U) (|l#0@@203| T@U) (|l#1@@202| T@U) (|l#2@@200| T@U) (|l#3@@191| Bool) ) (! (let ((alpha@@205 (FieldTypeInv0 (type $f@@198)))) (=> (and (and (and (and (= (type $o@@242) refType) (= (type $f@@198) (FieldType alpha@@205))) (= (type |l#0@@203|) refType)) (= (type |l#1@@202|) (MapType0Type refType MapType1Type))) (= (type |l#2@@200|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#460| |l#0@@203| |l#1@@202| |l#2@@200| |l#3@@191|) $o@@242 $f@@198))  (=> (and (not (= $o@@242 |l#0@@203|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@202| $o@@242) |l#2@@200|))) |l#3@@191|)))) :qid |BucketsL.1537:9| :skolemid |4219| :pattern ( (MapType9Select (|lambda#460| |l#0@@203| |l#1@@202| |l#2@@200| |l#3@@191|) $o@@242 $f@@198)) )))
(assert (forall ((arg0@@732 T@U) (arg1@@503 T@U) (arg2@@406 T@U) (arg3@@335 Bool) ) (! (= (type (|lambda#461| arg0@@732 arg1@@503 arg2@@406 arg3@@335)) (MapType9Type refType boolType)) :qid |funType:lambda#461| :pattern ( (|lambda#461| arg0@@732 arg1@@503 arg2@@406 arg3@@335)) )))
(assert (forall (($o@@243 T@U) ($f@@199 T@U) (|l#0@@204| T@U) (|l#1@@203| T@U) (|l#2@@201| T@U) (|l#3@@192| Bool) ) (! (let ((alpha@@206 (FieldTypeInv0 (type $f@@199)))) (=> (and (and (and (and (= (type $o@@243) refType) (= (type $f@@199) (FieldType alpha@@206))) (= (type |l#0@@204|) refType)) (= (type |l#1@@203|) (MapType0Type refType MapType1Type))) (= (type |l#2@@201|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#461| |l#0@@204| |l#1@@203| |l#2@@201| |l#3@@192|) $o@@243 $f@@199))  (=> (and (not (= $o@@243 |l#0@@204|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@203| $o@@243) |l#2@@201|))) |l#3@@192|)))) :qid |BucketsL.1590:12| :skolemid |4220| :pattern ( (MapType9Select (|lambda#461| |l#0@@204| |l#1@@203| |l#2@@201| |l#3@@192|) $o@@243 $f@@199)) )))
(assert (forall ((arg0@@733 T@U) (arg1@@504 T@U) (arg2@@407 T@U) (arg3@@336 Bool) ) (! (= (type (|lambda#462| arg0@@733 arg1@@504 arg2@@407 arg3@@336)) (MapType9Type refType boolType)) :qid |funType:lambda#462| :pattern ( (|lambda#462| arg0@@733 arg1@@504 arg2@@407 arg3@@336)) )))
(assert (forall (($o@@244 T@U) ($f@@200 T@U) (|l#0@@205| T@U) (|l#1@@204| T@U) (|l#2@@202| T@U) (|l#3@@193| Bool) ) (! (let ((alpha@@207 (FieldTypeInv0 (type $f@@200)))) (=> (and (and (and (and (= (type $o@@244) refType) (= (type $f@@200) (FieldType alpha@@207))) (= (type |l#0@@205|) refType)) (= (type |l#1@@204|) (MapType0Type refType MapType1Type))) (= (type |l#2@@202|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#462| |l#0@@205| |l#1@@204| |l#2@@202| |l#3@@193|) $o@@244 $f@@200))  (=> (and (not (= $o@@244 |l#0@@205|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@204| $o@@244) |l#2@@202|))) |l#3@@193|)))) :qid |BucketsL.1590:12| :skolemid |4221| :pattern ( (MapType9Select (|lambda#462| |l#0@@205| |l#1@@204| |l#2@@202| |l#3@@193|) $o@@244 $f@@200)) )))
(assert (forall ((arg0@@734 T@U) (arg1@@505 T@U) (arg2@@408 T@U) (arg3@@337 Bool) ) (! (= (type (|lambda#463| arg0@@734 arg1@@505 arg2@@408 arg3@@337)) (MapType9Type refType boolType)) :qid |funType:lambda#463| :pattern ( (|lambda#463| arg0@@734 arg1@@505 arg2@@408 arg3@@337)) )))
(assert (forall (($o@@245 T@U) ($f@@201 T@U) (|l#0@@206| T@U) (|l#1@@205| T@U) (|l#2@@203| T@U) (|l#3@@194| Bool) ) (! (let ((alpha@@208 (FieldTypeInv0 (type $f@@201)))) (=> (and (and (and (and (= (type $o@@245) refType) (= (type $f@@201) (FieldType alpha@@208))) (= (type |l#0@@206|) refType)) (= (type |l#1@@205|) (MapType0Type refType MapType1Type))) (= (type |l#2@@203|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#463| |l#0@@206| |l#1@@205| |l#2@@203| |l#3@@194|) $o@@245 $f@@201))  (=> (and (not (= $o@@245 |l#0@@206|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@205| $o@@245) |l#2@@203|))) |l#3@@194|)))) :qid |BucketsL.1614:12| :skolemid |4222| :pattern ( (MapType9Select (|lambda#463| |l#0@@206| |l#1@@205| |l#2@@203| |l#3@@194|) $o@@245 $f@@201)) )))
(assert (forall ((arg0@@735 T@U) (arg1@@506 T@U) (arg2@@409 T@U) (arg3@@338 Bool) ) (! (= (type (|lambda#464| arg0@@735 arg1@@506 arg2@@409 arg3@@338)) (MapType9Type refType boolType)) :qid |funType:lambda#464| :pattern ( (|lambda#464| arg0@@735 arg1@@506 arg2@@409 arg3@@338)) )))
(assert (forall (($o@@246 T@U) ($f@@202 T@U) (|l#0@@207| T@U) (|l#1@@206| T@U) (|l#2@@204| T@U) (|l#3@@195| Bool) ) (! (let ((alpha@@209 (FieldTypeInv0 (type $f@@202)))) (=> (and (and (and (and (= (type $o@@246) refType) (= (type $f@@202) (FieldType alpha@@209))) (= (type |l#0@@207|) refType)) (= (type |l#1@@206|) (MapType0Type refType MapType1Type))) (= (type |l#2@@204|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#464| |l#0@@207| |l#1@@206| |l#2@@204| |l#3@@195|) $o@@246 $f@@202))  (=> (and (not (= $o@@246 |l#0@@207|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@206| $o@@246) |l#2@@204|))) |l#3@@195|)))) :qid |BucketsL.1614:12| :skolemid |4223| :pattern ( (MapType9Select (|lambda#464| |l#0@@207| |l#1@@206| |l#2@@204| |l#3@@195|) $o@@246 $f@@202)) )))
(assert (forall ((arg0@@736 T@U) (arg1@@507 T@U) (arg2@@410 T@U) (arg3@@339 Bool) ) (! (= (type (|lambda#465| arg0@@736 arg1@@507 arg2@@410 arg3@@339)) (MapType9Type refType boolType)) :qid |funType:lambda#465| :pattern ( (|lambda#465| arg0@@736 arg1@@507 arg2@@410 arg3@@339)) )))
(assert (forall (($o@@247 T@U) ($f@@203 T@U) (|l#0@@208| T@U) (|l#1@@207| T@U) (|l#2@@205| T@U) (|l#3@@196| Bool) ) (! (let ((alpha@@210 (FieldTypeInv0 (type $f@@203)))) (=> (and (and (and (and (= (type $o@@247) refType) (= (type $f@@203) (FieldType alpha@@210))) (= (type |l#0@@208|) refType)) (= (type |l#1@@207|) (MapType0Type refType MapType1Type))) (= (type |l#2@@205|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#465| |l#0@@208| |l#1@@207| |l#2@@205| |l#3@@196|) $o@@247 $f@@203))  (=> (and (not (= $o@@247 |l#0@@208|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@207| $o@@247) |l#2@@205|))) |l#3@@196|)))) :qid |BucketsL.1633:12| :skolemid |4224| :pattern ( (MapType9Select (|lambda#465| |l#0@@208| |l#1@@207| |l#2@@205| |l#3@@196|) $o@@247 $f@@203)) )))
(assert (forall ((arg0@@737 T@U) (arg1@@508 T@U) (arg2@@411 T@U) (arg3@@340 Bool) ) (! (= (type (|lambda#466| arg0@@737 arg1@@508 arg2@@411 arg3@@340)) (MapType9Type refType boolType)) :qid |funType:lambda#466| :pattern ( (|lambda#466| arg0@@737 arg1@@508 arg2@@411 arg3@@340)) )))
(assert (forall (($o@@248 T@U) ($f@@204 T@U) (|l#0@@209| T@U) (|l#1@@208| T@U) (|l#2@@206| T@U) (|l#3@@197| Bool) ) (! (let ((alpha@@211 (FieldTypeInv0 (type $f@@204)))) (=> (and (and (and (and (= (type $o@@248) refType) (= (type $f@@204) (FieldType alpha@@211))) (= (type |l#0@@209|) refType)) (= (type |l#1@@208|) (MapType0Type refType MapType1Type))) (= (type |l#2@@206|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#466| |l#0@@209| |l#1@@208| |l#2@@206| |l#3@@197|) $o@@248 $f@@204))  (=> (and (not (= $o@@248 |l#0@@209|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@208| $o@@248) |l#2@@206|))) |l#3@@197|)))) :qid |BucketsL.1633:12| :skolemid |4225| :pattern ( (MapType9Select (|lambda#466| |l#0@@209| |l#1@@208| |l#2@@206| |l#3@@197|) $o@@248 $f@@204)) )))
(assert (forall ((arg0@@738 T@U) (arg1@@509 T@U) (arg2@@412 T@U) (arg3@@341 Bool) ) (! (= (type (|lambda#467| arg0@@738 arg1@@509 arg2@@412 arg3@@341)) (MapType9Type refType boolType)) :qid |funType:lambda#467| :pattern ( (|lambda#467| arg0@@738 arg1@@509 arg2@@412 arg3@@341)) )))
(assert (forall (($o@@249 T@U) ($f@@205 T@U) (|l#0@@210| T@U) (|l#1@@209| T@U) (|l#2@@207| T@U) (|l#3@@198| Bool) ) (! (let ((alpha@@212 (FieldTypeInv0 (type $f@@205)))) (=> (and (and (and (and (= (type $o@@249) refType) (= (type $f@@205) (FieldType alpha@@212))) (= (type |l#0@@210|) refType)) (= (type |l#1@@209|) (MapType0Type refType MapType1Type))) (= (type |l#2@@207|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#467| |l#0@@210| |l#1@@209| |l#2@@207| |l#3@@198|) $o@@249 $f@@205))  (=> (and (not (= $o@@249 |l#0@@210|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@209| $o@@249) |l#2@@207|))) |l#3@@198|)))) :qid |BucketsL.1647:9| :skolemid |4226| :pattern ( (MapType9Select (|lambda#467| |l#0@@210| |l#1@@209| |l#2@@207| |l#3@@198|) $o@@249 $f@@205)) )))
(assert (forall ((arg0@@739 T@U) (arg1@@510 T@U) (arg2@@413 T@U) (arg3@@342 Bool) ) (! (= (type (|lambda#468| arg0@@739 arg1@@510 arg2@@413 arg3@@342)) (MapType9Type refType boolType)) :qid |funType:lambda#468| :pattern ( (|lambda#468| arg0@@739 arg1@@510 arg2@@413 arg3@@342)) )))
(assert (forall (($o@@250 T@U) ($f@@206 T@U) (|l#0@@211| T@U) (|l#1@@210| T@U) (|l#2@@208| T@U) (|l#3@@199| Bool) ) (! (let ((alpha@@213 (FieldTypeInv0 (type $f@@206)))) (=> (and (and (and (and (= (type $o@@250) refType) (= (type $f@@206) (FieldType alpha@@213))) (= (type |l#0@@211|) refType)) (= (type |l#1@@210|) (MapType0Type refType MapType1Type))) (= (type |l#2@@208|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#468| |l#0@@211| |l#1@@210| |l#2@@208| |l#3@@199|) $o@@250 $f@@206))  (=> (and (not (= $o@@250 |l#0@@211|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@210| $o@@250) |l#2@@208|))) |l#3@@199|)))) :qid |BucketsL.1647:9| :skolemid |4227| :pattern ( (MapType9Select (|lambda#468| |l#0@@211| |l#1@@210| |l#2@@208| |l#3@@199|) $o@@250 $f@@206)) )))
(assert (forall ((|$y#0| T@U) (|l#0@@212| T@U) (|l#1@@211| T@U) (|l#2@@209| Int) ) (!  (=> (and (and (= (type |$y#0|) BoxType) (= (type |l#0@@212|) TyType)) (= (type |l#1@@211|) (MapType0Type BoxType intType))) (= (U_2_bool (MapType0Select (|lambda#469| |l#0@@212| |l#1@@211| |l#2@@209|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@212|) (> (U_2_int (MapType0Select |l#1@@211| |$y#0|)) |l#2@@209|)))) :qid |sequence.28:5| :skolemid |4228| :pattern ( (MapType0Select (|lambda#469| |l#0@@212| |l#1@@211| |l#2@@209|) |$y#0|)) )))
(assert (forall ((|$w#1@@0| T@U) (|l#0@@213| T@U) (|l#1@@212| T@U) (|l#2@@210| T@U) ) (!  (=> (and (and (and (= (type |$w#1@@0|) BoxType) (= (type |l#0@@213|) TyType)) (= (type |l#1@@212|) (MapType0Type BoxType boolType))) (= (type |l#2@@210|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#473| |l#0@@213| |l#1@@212| |l#2@@210|) |$w#1@@0|))  (and ($IsBox |$w#1@@0| |l#0@@213|) (and (U_2_bool (MapType0Select |l#1@@212| |$w#1@@0|)) (not (U_2_bool (MapType0Select |l#2@@210| |$w#1@@0|))))))) :qid |Mapssdfy.43:14| :skolemid |4229| :pattern ( (MapType0Select (|lambda#473| |l#0@@213| |l#1@@212| |l#2@@210|) |$w#1@@0|)) )))
(assert (forall ((|$w#1@@1| T@U) (|l#0@@214| T@U) (|l#1@@213| T@U) (|l#2@@211| T@U) ) (!  (=> (and (and (and (= (type |$w#1@@1|) BoxType) (= (type |l#0@@214|) TyType)) (= (type |l#1@@213|) (MapType0Type BoxType boolType))) (= (type |l#2@@211|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#477| |l#0@@214| |l#1@@213| |l#2@@211|) |$w#1@@1|))  (and ($IsBox |$w#1@@1| |l#0@@214|) (and (U_2_bool (MapType0Select |l#1@@213| |$w#1@@1|)) (not (= |$w#1@@1| |l#2@@211|)))))) :qid |Mapssdfy.66:15| :skolemid |4230| :pattern ( (MapType0Select (|lambda#477| |l#0@@214| |l#1@@213| |l#2@@211|) |$w#1@@1|)) )))
(assert (forall ((|$w#0@@12| T@U) (|l#0@@215| T@U) (|l#1@@214| T@U) (|l#2@@212| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@12|) BoxType) (= (type |l#0@@215|) TyType)) (= (type |l#1@@214|) (MapType0Type BoxType boolType))) (= (type |l#2@@212|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#491| |l#0@@215| |l#1@@214| |l#2@@212|) |$w#0@@12|))  (and ($IsBox |$w#0@@12| |l#0@@215|) (and (U_2_bool (MapType0Select |l#1@@214| |$w#0@@12|)) (U_2_bool (MapType0Select |l#2@@212| |$w#0@@12|)))))) :qid |Mapssdfy.99:5| :skolemid |4231| :pattern ( (MapType0Select (|lambda#491| |l#0@@215| |l#1@@214| |l#2@@212|) |$w#0@@12|)) )))
(assert (forall ((|$w#0@@13| T@U) (|l#0@@216| T@U) (|l#1@@215| T@U) (|l#2@@213| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@13|) BoxType) (= (type |l#0@@216|) TyType)) (= (type |l#1@@215|) (MapType0Type BoxType boolType))) (= (type |l#2@@213|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#505| |l#0@@216| |l#1@@215| |l#2@@213|) |$w#0@@13|))  (and ($IsBox |$w#0@@13| |l#0@@216|) (or (U_2_bool (MapType0Select |l#1@@215| |$w#0@@13|)) (U_2_bool (MapType0Select |l#2@@213| |$w#0@@13|)))))) :qid |Mapssdfy.117:3| :skolemid |4232| :pattern ( (MapType0Select (|lambda#505| |l#0@@216| |l#1@@215| |l#2@@213|) |$w#0@@13|)) )))
(assert (forall ((|$w#0@@14| T@U) (|l#0@@217| T@U) (|l#1@@216| T@U) (|l#2@@214| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@14|) BoxType) (= (type |l#0@@217|) (MapType0Type BoxType boolType))) (= (type |l#1@@216|) (MapType0Type BoxType BoxType))) (= (type |l#2@@214|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#506| |l#0@@217| |l#1@@216| |l#2@@214|) |$w#0@@14|) (ite (U_2_bool (MapType0Select |l#0@@217| |$w#0@@14|)) (MapType0Select |l#1@@216| |$w#0@@14|) (MapType0Select |l#2@@214| |$w#0@@14|)))) :qid |Mapssdfy.117:3| :skolemid |4233| :pattern ( (MapType0Select (|lambda#506| |l#0@@217| |l#1@@216| |l#2@@214|) |$w#0@@14|)) )))
(assert (forall ((|$w#0@@15| T@U) (|l#0@@218| T@U) (|l#1@@217| T@U) (|l#2@@215| T@U) (|l#3@@200| T@U) ) (!  (=> (and (and (and (and (= (type |$w#0@@15|) BoxType) (= (type |l#0@@218|) TyType)) (= (type |l#1@@217|) (MapType0Type BoxType boolType))) (= (type |l#2@@215|) (MapType0Type BoxType boolType))) (= (type |l#3@@200|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#525| |l#0@@218| |l#1@@217| |l#2@@215| |l#3@@200|) |$w#0@@15|))  (and ($IsBox |$w#0@@15| |l#0@@218|) (or (or (U_2_bool (MapType0Select |l#1@@217| |$w#0@@15|)) (U_2_bool (MapType0Select |l#2@@215| |$w#0@@15|))) (U_2_bool (MapType0Select |l#3@@200| |$w#0@@15|)))))) :qid |Mapssdfy.191:3| :skolemid |4234| :pattern ( (MapType0Select (|lambda#525| |l#0@@218| |l#1@@217| |l#2@@215| |l#3@@200|) |$w#0@@15|)) )))
(assert (forall ((|$w#0@@16| T@U) (|l#0@@219| T@U) (|l#1@@218| T@U) (|l#2@@216| T@U) (|l#3@@201| T@U) (|l#4@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#0@@16|) BoxType) (= (type |l#0@@219|) (MapType0Type BoxType boolType))) (= (type |l#1@@218|) (MapType0Type BoxType BoxType))) (= (type |l#2@@216|) (MapType0Type BoxType boolType))) (= (type |l#3@@201|) (MapType0Type BoxType BoxType))) (= (type |l#4@@1|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#526| |l#0@@219| |l#1@@218| |l#2@@216| |l#3@@201| |l#4@@1|) |$w#0@@16|) (ite (U_2_bool (MapType0Select |l#0@@219| |$w#0@@16|)) (MapType0Select |l#1@@218| |$w#0@@16|) (ite (U_2_bool (MapType0Select |l#2@@216| |$w#0@@16|)) (MapType0Select |l#3@@201| |$w#0@@16|) (MapType0Select |l#4@@1| |$w#0@@16|))))) :qid |Mapssdfy.191:3| :skolemid |4235| :pattern ( (MapType0Select (|lambda#526| |l#0@@219| |l#1@@218| |l#2@@216| |l#3@@201| |l#4@@1|) |$w#0@@16|)) )))
(assert (forall ((|$w#0@@17| T@U) (|l#0@@220| T@U) (|l#1@@219| T@U) ) (!  (=> (and (and (= (type |$w#0@@17|) BoxType) (= (type |l#0@@220|) TyType)) (= (type |l#1@@219|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#529| |l#0@@220| |l#1@@219|) |$w#0@@17|))  (and ($IsBox |$w#0@@17| |l#0@@220|) (U_2_bool (MapType0Select |l#1@@219| |$w#0@@17|))))) :qid |Mapssdfy.198:4| :skolemid |4236| :pattern ( (MapType0Select (|lambda#529| |l#0@@220| |l#1@@219|) |$w#0@@17|)) )))
(assert (forall ((|$y#0@@0| T@U) (|l#0@@221| T@U) (|l#1@@220| Int) ) (!  (=> (and (= (type |$y#0@@0|) BoxType) (= (type |l#0@@221|) TyType)) (= (U_2_bool (MapType0Select (|lambda#533| |l#0@@221| |l#1@@220|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@221|) (Byte__Order.__default.lt (U_2_int ($Unbox intType |$y#0@@0|)) |l#1@@220|)))) :qid |totalord.716:52| :skolemid |4237| :pattern ( (MapType0Select (|lambda#533| |l#0@@221| |l#1@@220|) |$y#0@@0|)) )))
(assert (forall ((|$y#1| T@U) (|l#0@@222| T@U) (|l#1@@221| T@U) (|l#2@@217| Int) ) (!  (=> (and (and (= (type |$y#1|) BoxType) (= (type |l#0@@222|) TyType)) (= (type |l#1@@221|) LayerTypeType)) (= (U_2_bool (MapType0Select (|lambda#534| |l#0@@222| |l#1@@221| |l#2@@217|) |$y#1|))  (and ($IsBox |$y#1| |l#0@@222|) (Byte__Order.__default.lte |l#1@@221| |l#2@@217| (U_2_int ($Unbox intType |$y#1|)))))) :qid |totalord.717:54| :skolemid |4238| :pattern ( (MapType0Select (|lambda#534| |l#0@@222| |l#1@@221| |l#2@@217|) |$y#1|)) )))
(assert (forall ((|$y#0@@1| T@U) (|l#0@@223| T@U) (|l#1@@222| T@U) ) (!  (=> (and (and (= (type |$y#0@@1|) BoxType) (= (type |l#0@@223|) TyType)) (= (type |l#1@@222|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#545| |l#0@@223| |l#1@@222|) |$y#0@@1|))  (and ($IsBox |$y#0@@1| |l#0@@223|) (|Seq#Contains| |l#1@@222| |$y#0@@1|)))) :qid |totalord.739:18| :skolemid |4239| :pattern ( (MapType0Select (|lambda#545| |l#0@@223| |l#1@@222|) |$y#0@@1|)) )))
(assert (forall ((|$y#0@@2| T@U) (|l#0@@224| T@U) (|l#1@@223| T@U) ) (!  (=> (and (and (= (type |$y#0@@2|) BoxType) (= (type |l#0@@224|) TyType)) (= (type |l#1@@223|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#549| |l#0@@224| |l#1@@223|) |$y#0@@2|))  (and ($IsBox |$y#0@@2| |l#0@@224|) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) |$y#0@@2|) |l#1@@223|)))) :qid |totalord.716:52| :skolemid |4240| :pattern ( (MapType0Select (|lambda#549| |l#0@@224| |l#1@@223|) |$y#0@@2|)) )))
(assert (forall ((|$y#1@@0| T@U) (|l#0@@225| T@U) (|l#1@@224| T@U) ) (!  (=> (and (and (= (type |$y#1@@0|) BoxType) (= (type |l#0@@225|) TyType)) (= (type |l#1@@224|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#550| |l#0@@225| |l#1@@224|) |$y#1@@0|))  (and ($IsBox |$y#1@@0| |l#0@@225|) (Lexicographic__Byte__Order.__default.lte |l#1@@224| ($Unbox (SeqType BoxType) |$y#1@@0|))))) :qid |totalord.717:54| :skolemid |4241| :pattern ( (MapType0Select (|lambda#550| |l#0@@225| |l#1@@224|) |$y#1@@0|)) )))
(assert (forall ((|$y#0@@3| T@U) (|l#0@@226| T@U) (|l#1@@225| T@U) (|l#2@@218| Int) ) (!  (=> (and (and (= (type |$y#0@@3|) BoxType) (= (type |l#0@@226|) TyType)) (= (type |l#1@@225|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#565| |l#0@@226| |l#1@@225| |l#2@@218|) |$y#0@@3|))  (and ($IsBox |$y#0@@3| |l#0@@226|) (= (PivotsLib.__default.Route |l#1@@225| ($Unbox (SeqType BoxType) |$y#0@@3|)) |l#2@@218|)))) :qid |PivotsLi.278:5| :skolemid |4242| :pattern ( (MapType0Select (|lambda#565| |l#0@@226| |l#1@@225| |l#2@@218|) |$y#0@@3|)) )))
(assert (forall ((|$w#0@@18| T@U) (|l#0@@227| T@U) ) (!  (=> (and (= (type |$w#0@@18|) BoxType) (= (type |l#0@@227|) TyType)) (= (U_2_bool (MapType0Select (|lambda#567| |l#0@@227|) |$w#0@@18|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@18|) |l#0@@227|) (MapSpec.__default.InDomain ($Unbox (SeqType BoxType) |$w#0@@18|))))) :qid |MapSpecs.43:5| :skolemid |4243| :pattern ( (MapType0Select (|lambda#567| |l#0@@227|) |$w#0@@18|)) )))
(assert (forall ((|$w#0@@19| T@U) (|l#0@@228| T@U) ) (!  (=> (and (= (type |$w#0@@19|) BoxType) (= (type |l#0@@228|) BoxType)) (= (MapType0Select (|lambda#568| |l#0@@228|) |$w#0@@19|) |l#0@@228|)) :qid |MapSpecs.43:5| :skolemid |4244| :pattern ( (MapType0Select (|lambda#568| |l#0@@228|) |$w#0@@19|)) )))
(assert (forall ((|$l#1#heap#0| T@U) (|$l#1#x#0| T@U) (|l#0@@229| T@U) ) (!  (=> (and (and (= (type |$l#1#heap#0|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0|) BoxType)) (= (type |l#0@@229|) BoxType)) (= (MapType3Select (|lambda#571| |l#0@@229|) |$l#1#heap#0| |$l#1#x#0|) |l#0@@229|)) :qid |DafnyPre.521:12| :skolemid |4245| :pattern ( (MapType3Select (|lambda#571| |l#0@@229|) |$l#1#heap#0| |$l#1#x#0|)) )))
(assert (forall ((|$l#1#heap#0@@0| T@U) (|$l#1#x#0@@0| T@U) (|l#0@@230| T@U) ) (!  (=> (and (and (= (type |$l#1#heap#0@@0|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0@@0|) BoxType)) (= (type |l#0@@230|) TyType)) (= (U_2_bool (MapType3Select (|lambda#572| |l#0@@230|) |$l#1#heap#0@@0| |$l#1#x#0@@0|)) ($IsBox |$l#1#x#0@@0| |l#0@@230|))) :qid |DafnyPre.521:12| :skolemid |4246| :pattern ( (MapType3Select (|lambda#572| |l#0@@230|) |$l#1#heap#0@@0| |$l#1#x#0@@0|)) )))
(assert (forall ((|$l#1#o#0| T@U) (|l#0@@231| Bool) ) (!  (=> (= (type |$l#1#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#573| |l#0@@231|) |$l#1#o#0|)) |l#0@@231|)) :qid |unknown.0:0| :skolemid |4247| :pattern ( (MapType0Select (|lambda#573| |l#0@@231|) |$l#1#o#0|)) )))
(assert (forall ((|$l#1#heap#0@@1| T@U) (|$l#1#x#0@@1| T@U) (|l#0@@232| T@U) ) (!  (=> (and (and (= (type |$l#1#heap#0@@1|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0@@1|) BoxType)) (= (type |l#0@@232|) (MapType0Type BoxType boolType))) (= (MapType3Select (|lambda#574| |l#0@@232|) |$l#1#heap#0@@1| |$l#1#x#0@@1|) |l#0@@232|)) :qid |DafnyPre.521:12| :skolemid |4248| :pattern ( (MapType3Select (|lambda#574| |l#0@@232|) |$l#1#heap#0@@1| |$l#1#x#0@@1|)) )))
(assert (forall ((|$l#1#ly#0| T@U) (|l#0@@233| T@U) ) (!  (=> (and (= (type |$l#1#ly#0|) LayerTypeType) (= (type |l#0@@233|) HandleTypeType)) (= (MapType0Select (|lambda#575| |l#0@@233|) |$l#1#ly#0|) |l#0@@233|)) :qid |unknown.0:0| :skolemid |4249| :pattern ( (MapType0Select (|lambda#575| |l#0@@233|) |$l#1#ly#0|)) )))
(assert (forall ((|$l#1#heap#0@@2| T@U) (|$l#1#x#0@@2| T@U) (|l#0@@234| T@U) ) (!  (=> (and (and (= (type |$l#1#heap#0@@2|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0@@2|) BoxType)) (= (type |l#0@@234|) (MapType0Type BoxType BoxType))) (= (MapType3Select (|lambda#661| |l#0@@234|) |$l#1#heap#0@@2| |$l#1#x#0@@2|) (MapType0Select |l#0@@234| |$l#1#x#0@@2|))) :qid |DafnyPre.521:12| :skolemid |4250| :pattern ( (MapType3Select (|lambda#661| |l#0@@234|) |$l#1#heap#0@@2| |$l#1#x#0@@2|)) )))
(assert (forall ((|$l#1#heap#0@@3| T@U) (|$l#1#x#0@@3| T@U) (|l#0@@235| T@U) (|l#1@@226| T@U) ) (!  (=> (and (and (and (= (type |$l#1#heap#0@@3|) (MapType0Type refType MapType1Type)) (= (type |$l#1#x#0@@3|) BoxType)) (= (type |l#0@@235|) TyType)) (= (type |l#1@@226|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType3Select (|lambda#662| |l#0@@235| |l#1@@226|) |$l#1#heap#0@@3| |$l#1#x#0@@3|))  (and ($IsBox |$l#1#x#0@@3| |l#0@@235|) (U_2_bool (MapType0Select |l#1@@226| |$l#1#x#0@@3|))))) :qid |DafnyPre.521:12| :skolemid |4251| :pattern ( (MapType3Select (|lambda#662| |l#0@@235| |l#1@@226|) |$l#1#heap#0@@3| |$l#1#x#0@@3|)) )))
(declare-fun StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap () T@U)
(declare-fun |m#0@@145| () T@U)
(declare-fun |key#0@@216| () T@U)
(declare-fun |max#0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |##run#0_0@0| () T@U)
(declare-fun StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |##k#0_0_2@0| () T@U)
(declare-fun |##m#0_0_4@0| () T@U)
(declare-fun |##k#0_0_1@0| () T@U)
(declare-fun |##m#0_0_2@0| () T@U)
(declare-fun |##k#0_0_0@0| () T@U)
(declare-fun |m##0_0_0@0| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun TType () T@T)
(declare-fun type@@0 (T@U) T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.lte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_PivotsLib._default.CutoffForLeft () T@U)
(declare-fun StartFuelAssert_PivotsLib._default.CutoffForRight () T@U)
(declare-fun StartFuelAssert_Multisets._default.Choose () T@U)
(declare-fun StartFuelAssert_Multisets._default.Apply () T@U)
(declare-fun StartFuelAssert_Multisets._default.Fold () T@U)
(declare-fun StartFuelAssert_Multisets._default.IsIdentity () T@U)
(declare-fun StartFuelAssert_Multisets._default.IsCommutative () T@U)
(declare-fun StartFuelAssert_Multisets._default.IsAssociative () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.BucketMapOfSeq () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.B () T@U)
(declare-fun StartFuel_BucketsLib._default.BucketIntersect () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.BucketIntersect () T@U)
(declare-fun StartFuel_BucketsLib._default.BucketComplement () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.BucketComplement () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.Compose () T@U)
(declare-fun StartFuel_BucketsLib._default.ComposeSeq () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.ComposeSeq () T@U)
(declare-fun StartFuel_BucketsLib._default.ClampRange () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.ClampRange () T@U)
(declare-fun StartFuel_BucketsLib._default.ClampStart () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.ClampStart () T@U)
(declare-fun StartFuel_BucketsLib._default.ClampEnd () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.ClampEnd () T@U)
(declare-fun StartFuel_BucketsLib._default.KeyValueMapOfBucket () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.KeyValueMapOfBucket () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SplitBucketLeft () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SplitBucketRight () T@U)
(declare-fun StartFuel_BucketsLib._default.SplitBucketInList () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SplitBucketInList () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.MergeBuckets () T@U)
(declare-fun StartFuel_BucketsLib._default.MergeBucketsInList () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.MergeBucketsInList () T@U)
(declare-fun $Heap@@101 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun MoreFuel_BucketsLib._default.SortedSeqOfKeyValueMap0 () T@U)
(declare-fun |##s#0@0| () T@U)
(declare-fun |max#0@@1| () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%+2 () Bool)
(declare-fun |i#0_0_0@0| () Int)
(declare-fun %lbl%@3 () Bool)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%@5 () Bool)
(declare-fun %lbl%+6 () Bool)
(declare-fun %lbl%+7 () Bool)
(declare-fun %lbl%@8 () Bool)
(declare-fun %lbl%@9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun %lbl%+11 () Bool)
(declare-fun %lbl%+12 () Bool)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%@14 () Bool)
(declare-fun %lbl%+15 () Bool)
(declare-fun %lbl%@16 () Bool)
(declare-fun %lbl%@17 () Bool)
(declare-fun %lbl%@18 () Bool)
(declare-fun $o@@251 () T@U)
(declare-fun $f@@207 () T@U)
(declare-fun %lbl%@19 () Bool)
(declare-fun %lbl%@20 () Bool)
(declare-fun %lbl%+21 () Bool)
(declare-fun %lbl%@22 () Bool)
(declare-fun %lbl%@23 () Bool)
(declare-fun %lbl%+24 () Bool)
(declare-fun %lbl%@25 () Bool)
(declare-fun %lbl%+26 () Bool)
(declare-fun %lbl%+27 () Bool)
(declare-fun %lbl%@28 () Bool)
(declare-fun $o@@252 () T@U)
(declare-fun $f@@208 () T@U)
(declare-fun %lbl%+29 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap) LayerTypeType) (= (type |m#0@@145|) (MapType BoxType BoxType))) (= (type |key#0@@216|) (SeqType BoxType))) (= (type |max#0@0|) DatatypeTypeType)) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type |##run#0_0@0|) (SeqType BoxType))) (= (type StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap) LayerTypeType)) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type |##k#0_0_2@0|) (SeqType BoxType))) (= (type |##m#0_0_4@0|) (MapType BoxType BoxType))) (= (type |##k#0_0_1@0|) (SeqType BoxType))) (= (type |##m#0_0_2@0|) (MapType BoxType BoxType))) (= (type |##k#0_0_0@0|) (SeqType BoxType))) (= (type |m##0_0_0@0|) (MapType BoxType BoxType))) (= (type $_Frame@0) (MapType9Type refType boolType))) (= (Ctor TType) 29)) (forall ((arg0@@740 T@U) ) (! (= (type (type@@0 arg0@@740)) TType) :qid |funType:type| :pattern ( (type@@0 arg0@@740)) ))) (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.lte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuelAssert_PivotsLib._default.CutoffForLeft) LayerTypeType)) (= (type StartFuelAssert_PivotsLib._default.CutoffForRight) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.Choose) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.Apply) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.Fold) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.IsIdentity) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.IsCommutative) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.IsAssociative) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.BucketMapOfSeq) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.B) LayerTypeType)) (= (type StartFuel_BucketsLib._default.BucketIntersect) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.BucketIntersect) LayerTypeType)) (= (type StartFuel_BucketsLib._default.BucketComplement) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.BucketComplement) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.Compose) LayerTypeType)) (= (type StartFuel_BucketsLib._default.ComposeSeq) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.ComposeSeq) LayerTypeType)) (= (type StartFuel_BucketsLib._default.ClampRange) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.ClampRange) LayerTypeType)) (= (type StartFuel_BucketsLib._default.ClampStart) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.ClampStart) LayerTypeType)) (= (type StartFuel_BucketsLib._default.ClampEnd) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.ClampEnd) LayerTypeType)) (= (type StartFuel_BucketsLib._default.KeyValueMapOfBucket) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.KeyValueMapOfBucket) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.SplitBucketLeft) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.SplitBucketRight) LayerTypeType)) (= (type StartFuel_BucketsLib._default.SplitBucketInList) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.SplitBucketInList) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.MergeBuckets) LayerTypeType)) (= (type StartFuel_BucketsLib._default.MergeBucketsInList) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.MergeBucketsInList) LayerTypeType)) (= (type $Heap@@101) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type MoreFuel_BucketsLib._default.SortedSeqOfKeyValueMap0) LayerTypeType)) (= (type |##s#0@0|) (MapType0Type BoxType boolType))) (= (type |max#0@@1|) DatatypeTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$BucketsLib.__default.SortedSeqOfKeyValueHasKey)
(assert (not (let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (! (or %lbl%@1 (let ((|s#1| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|))) (exists ((|i#1@@68| Int) ) (!  (and (and (<= (LitInt 0) |i#1@@68|) (< |i#1@@68| (|Seq#Length| |s#1|))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |s#1| |i#1@@68|))) |key#0@@216|)) :qid |BucketsL.813:14| :skolemid |1810| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#1| |i#1@@68|))) )))) :lblneg @1)))) (let ((anon6_correct  (=> (! (and %lbl%+2 true) :lblpos +2) (=> (and (=> (<= (LitInt 0) |i#0_0_0@0|) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@145| (Options.Option.value |max#0@0|)) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))))) (=> (and (<= (LitInt 0) |i#0_0_0@0|) (< |i#0_0_0@0| (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (and (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@145| (Options.Option.value |max#0@0|)) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) |i#0_0_0@0|)))))) (and (! (or %lbl%@3  (or (and ($Is (int_2_U (- (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) 1)) TInt) (and (and (<= (LitInt 0) (- (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) 1)) (< (- (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) 1) (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) (- (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) 1)))) |key#0@@216|))) (or (and ($Is (int_2_U (LitInt 0)) TInt) (and (and (<= (LitInt 0) (LitInt 0)) (< 0 (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) (LitInt 0)))) |key#0@@216|))) (or (and ($Is (int_2_U (LitInt 0)) TInt) (and (and (<= (LitInt 0) (LitInt 0)) (< 0 (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) (LitInt 0)))) |key#0@@216|))) (exists ((|$as#i0_0_0#0_0_0| Int) ) (!  (and (and (<= (LitInt 0) |$as#i0_0_0#0_0_0|) (< |$as#i0_0_0#0_0_0| (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) |$as#i0_0_0#0_0_0|))) |key#0@@216|)) :qid |BucketsL.820:13| :skolemid |1816| )))))) :lblneg @3) (=> (or (and ($Is (int_2_U (- (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) 1)) TInt) (and (and (<= (LitInt 0) (- (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) 1)) (< (- (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) 1) (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) (- (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) 1)))) |key#0@@216|))) (or (and ($Is (int_2_U (LitInt 0)) TInt) (and (and (<= (LitInt 0) (LitInt 0)) (< 0 (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) (LitInt 0)))) |key#0@@216|))) (or (and ($Is (int_2_U (LitInt 0)) TInt) (and (and (<= (LitInt 0) (LitInt 0)) (< 0 (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) (LitInt 0)))) |key#0@@216|))) (exists ((|$as#i0_0_0#0_0_0@@0| Int) ) (!  (and (and (<= (LitInt 0) |$as#i0_0_0#0_0_0@@0|) (< |$as#i0_0_0#0_0_0@@0| (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) |$as#i0_0_0#0_0_0@@0|))) |key#0@@216|)) :qid |BucketsL.820:13| :skolemid |1816| ))))) (=> (and (and (and (<= (LitInt 0) |i#0_0_0@0|) (< |i#0_0_0@0| (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) |i#0_0_0@0|))) |key#0@@216|)) (and ($IsAlloc |m#0@@145| (TMap Tclass.KeyType.Key Tclass.ValueType.Value) $Heap@2) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@145|))) (and (! (or %lbl%@4  (and (<= 0 |i#0_0_0@0|) (< |i#0_0_0@0| (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|))))) :lblneg @4) (=> (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|) |i#0_0_0@0|))) (=> (and (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@145|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|) |i#0_0_0@0|)))) (and (! (or %lbl%@5 (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|) |i#0_0_0@0|))) |key#0@@216|)) :lblneg @5) (=> (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|) |i#0_0_0@0|))) |key#0@@216|) GeneratedUnifiedExit_correct)))))))))))) (let ((anon12_Else_correct  (=> (! (and %lbl%+6 true) :lblpos +6) (=> (not (and (<= (LitInt 0) |i#0_0_0@0|) (< |i#0_0_0@0| (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))))))) anon6_correct)))) (let ((anon12_Then_correct  (=> (! (and %lbl%+7 true) :lblpos +7) (=> (and (<= (LitInt 0) |i#0_0_0@0|) (< |i#0_0_0@0| (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))))) (and (! (or %lbl%@8 (Options.Option.Some_q |max#0@0|)) :lblneg @8) (=> (Options.Option.Some_q |max#0@0|) (=> (and (and ($IsAlloc |m#0@@145| (TMap (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value) $Heap@2) (= |##k#0_0_2@0| ($Unbox (SeqType BoxType) (Options.Option.value |max#0@0|)))) (and ($IsAlloc |##k#0_0_2@0| (TSeq Tclass.NativeTypes.byte) $Heap@2) (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@145| (Options.Option.value |max#0@0|)))) (and (! (or %lbl%@9 ($Is (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))) :lblneg @9) (=> ($Is (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value)) (=> (= |##m#0_0_4@0| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) (=> (and ($IsAlloc |##m#0_0_4@0| (TMap Tclass.KeyType.Key Tclass.ValueType.Value) $Heap@2) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) (and (! (or %lbl%@10  (and (<= 0 |i#0_0_0@0|) (< |i#0_0_0@0| (|Seq#Length| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))))))) :lblneg @10) (=> (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) |i#0_0_0@0|))) anon6_correct))))))))))))) (let ((anon11_Else_correct  (=> (! (and %lbl%+11 true) :lblpos +11) (=> (< |i#0_0_0@0| (LitInt 0)) (and anon12_Then_correct anon12_Else_correct))))) (let ((anon11_Then_correct  (=> (! (and %lbl%+12 true) :lblpos +12) (=> (<= (LitInt 0) |i#0_0_0@0|) (and (! (or %lbl%@13 (Options.Option.Some_q |max#0@0|)) :lblneg @13) (=> (Options.Option.Some_q |max#0@0|) (=> (and (and ($IsAlloc |m#0@@145| (TMap (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value) $Heap@2) (= |##k#0_0_1@0| ($Unbox (SeqType BoxType) (Options.Option.value |max#0@0|)))) (and ($IsAlloc |##k#0_0_1@0| (TSeq Tclass.NativeTypes.byte) $Heap@2) (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@145| (Options.Option.value |max#0@0|)))) (and (! (or %lbl%@14 ($Is (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))) :lblneg @14) (=> ($Is (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value)) (=> (= |##m#0_0_2@0| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) (=> (and ($IsAlloc |##m#0_0_2@0| (TMap Tclass.KeyType.Key Tclass.ValueType.Value) $Heap@2) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)))) (and anon12_Then_correct anon12_Else_correct)))))))))))) (let ((anon10_Then_correct  (=> (! (and %lbl%+15 true) :lblpos +15) (=> (not (|Seq#Equal| |key#0@@216| ($Unbox (SeqType BoxType) (Options.Option.value |max#0@0|)))) (and (! (or %lbl%@16 (Options.Option.Some_q |max#0@0|)) :lblneg @16) (=> (Options.Option.Some_q |max#0@0|) (=> ($IsAlloc |m#0@@145| (TMap (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value) $Heap@1) (=> (and (and (= |##k#0_0_0@0| ($Unbox (SeqType BoxType) (Options.Option.value |max#0@0|))) ($IsAlloc |##k#0_0_0@0| (TSeq Tclass.NativeTypes.byte) $Heap@1)) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@145| (Options.Option.value |max#0@0|)) (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@145| (Options.Option.value |max#0@0|)))) (and (! (or %lbl%@17 ($Is (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))) :lblneg @17) (=> ($Is (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value)) (=> (= |m##0_0_0@0| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value StartFuel_Maps._default.MapRemove1 |m#0@@145| (Options.Option.value |max#0@0|))) (and (! (or %lbl%@18 (forall (($o@@253 T@U) ($f@@209 T@U) ) (! (let ((alpha@@214 (FieldTypeInv0 (type $f@@209)))) (=> (and (and (= (type $o@@253) refType) (= (type $f@@209) (FieldType alpha@@214))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@253 $f@@209)))) :qid |BucketsL.819:34| :skolemid |1815| :no-pattern (type $o@@253) :no-pattern (type $f@@209) :no-pattern (U_2_int $o@@253) :no-pattern (U_2_bool $o@@253) :no-pattern (U_2_int $f@@209) :no-pattern (U_2_bool $f@@209) ))) :lblneg @18) (=> (forall (($o@@254 T@U) ($f@@210 T@U) ) (! (let ((alpha@@215 (FieldTypeInv0 (type $f@@210)))) (=> (and (and (= (type $o@@254) refType) (= (type $f@@210) (FieldType alpha@@215))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@254 $f@@210)))) :qid |BucketsL.819:34| :skolemid |1815| :no-pattern (type@@0 $o@@251) :no-pattern (type@@0 $f@@207) :no-pattern (type $o@@254) :no-pattern (type $f@@210) :no-pattern (U_2_int $o@@254) :no-pattern (U_2_bool $o@@254) :no-pattern (U_2_int $f@@210) :no-pattern (U_2_bool $f@@210) )) (and (! (or %lbl%@19  (or (and (|Set#Subset| (|Map#Domain| |m##0_0_0@0|) (|Map#Domain| |m#0@@145|)) (not (|Set#Subset| (|Map#Domain| |m#0@@145|) (|Map#Domain| |m##0_0_0@0|)))) (and (|Set#Equal| (|Map#Domain| |m##0_0_0@0|) (|Map#Domain| |m#0@@145|)) (< (|Seq#Rank| |key#0@@216|) (|Seq#Rank| |key#0@@216|))))) :lblneg @19) (=> (or (and (|Set#Subset| (|Map#Domain| |m##0_0_0@0|) (|Map#Domain| |m#0@@145|)) (not (|Set#Subset| (|Map#Domain| |m#0@@145|) (|Map#Domain| |m##0_0_0@0|)))) (and (|Set#Equal| (|Map#Domain| |m##0_0_0@0|) (|Map#Domain| |m#0@@145|)) (< (|Seq#Rank| |key#0@@216|) (|Seq#Rank| |key#0@@216|)))) (and (! (or %lbl%@20 (U_2_bool (MapType0Select (|Map#Domain| |m##0_0_0@0|) ($Box |key#0@@216|)))) :lblneg @20) (=> (U_2_bool (MapType0Select (|Map#Domain| |m##0_0_0@0|) ($Box |key#0@@216|))) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| |m##0_0_0@0|) (let ((|s#1@@0| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m##0_0_0@0|))) (forall ((|i#1@@69| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@69|) (< |i#1@@69| (|Seq#Length| |s#1@@0|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |s#1@@0| |i#1@@69|)))) :qid |BucketsL.813:14| :skolemid |1806| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#1@@0| |i#1@@69|))) )))) (and (let ((|s#1@@1| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap |m##0_0_0@0|))) (exists ((|i#1@@70| Int) ) (!  (and (and (<= (LitInt 0) |i#1@@70|) (< |i#1@@70| (|Seq#Length| |s#1@@1|))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |s#1@@1| |i#1@@70|))) |key#0@@216|)) :qid |BucketsL.813:14| :skolemid |1808| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#1@@1| |i#1@@70|))) ))) (= $Heap@1 $Heap@2))) (and anon11_Then_correct anon11_Else_correct)))))))))))))))))))) (let ((anon10_Else_correct  (=> (! (and %lbl%+21 true) :lblpos +21) (=> (|Seq#Equal| |key#0@@216| ($Unbox (SeqType BoxType) (Options.Option.value |max#0@0|))) (=> (and (and ($IsAlloc |m#0@@145| (TMap Tclass.KeyType.Key Tclass.ValueType.Value) $Heap@1) (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@145|)) (and (= |##run#0_0@0| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|)) ($IsAlloc |##run#0_0@0| (TSeq Tclass.UI.SuccResult) $Heap@1))) (and (! (or %lbl%@22 (> (|Seq#Length| |##run#0_0@0|) 0)) :lblneg @22) (=> (|Sequences.__default.Last#canCall| Tclass.UI.SuccResult (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|)) (=> (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.SuccResult (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.SuccResult (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|))))) (=> (and (and (|BucketsLib.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@145|) (|Sequences.__default.Last#canCall| Tclass.UI.SuccResult (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.SuccResult (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|))))) (and (! (or %lbl%@23 (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.SuccResult (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|)))) |key#0@@216|)) :lblneg @23) (=> (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.SuccResult (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |m#0@@145|)))) |key#0@@216|) GeneratedUnifiedExit_correct))))))))))) (let ((anon9_Then_correct  (=> (! (and %lbl%+24 true) :lblpos +24) (=> (Options.Option.Some_q |max#0@0|) (and (! (or %lbl%@25 (Options.Option.Some_q |max#0@0|)) :lblneg @25) (=> (Options.Option.Some_q |max#0@0|) (and anon10_Then_correct anon10_Else_correct))))))) (let ((anon9_Else_correct  (=> (! (and %lbl%+26 true) :lblpos +26) (=> (not (Options.Option.Some_q |max#0@0|)) GeneratedUnifiedExit_correct)))) (let ((anon0_correct  (=> (! (and %lbl%+27 true) :lblpos +27) (=> (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (=> (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (=> (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)))))) (=> (and (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1) StartFuel_Maps._default.MapRemove1)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1) StartFuelAssert_Maps._default.MapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte)) (and (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte) (= (AsFuelBottom StartFuel_Byte_Order._default.lte) StartFuel_Byte_Order._default.lte)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.lte) StartFuelAssert_Byte_Order._default.lte) (= (AsFuelBottom StartFuel_Byte_Order._default.ltedef) StartFuel_Byte_Order._default.ltedef)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.ltedef) StartFuelAssert_Byte_Order._default.ltedef) (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Byte_Order._default.NotMinimum) StartFuel_Byte_Order._default.NotMinimum)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.NotMinimum) StartFuelAssert_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Byte_Order._default.SortedSeqForMap) StartFuel_Byte_Order._default.SortedSeqForMap)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Byte_Order._default.minimum) StartFuel_Byte_Order._default.minimum))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimum) StartFuelAssert_Byte_Order._default.minimum) (= (AsFuelBottom StartFuel_Byte_Order._default.minimumOpt) StartFuel_Byte_Order._default.minimumOpt)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimumOpt) StartFuelAssert_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Byte_Order._default.maximum) StartFuel_Byte_Order._default.maximum))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximum) StartFuelAssert_Byte_Order._default.maximum) (= (AsFuelBottom StartFuel_Byte_Order._default.maximumOpt) StartFuel_Byte_Order._default.maximumOpt)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximumOpt) StartFuelAssert_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Byte_Order._default.IsSorted) StartFuel_Byte_Order._default.IsSorted))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsSorted) StartFuelAssert_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Byte_Order._default.IsStrictlySorted) StartFuel_Byte_Order._default.IsStrictlySorted)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.NotMinimum) StartFuel_Lexicographic_Byte_Order._default.NotMinimum))) (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimum) StartFuel_Lexicographic_Byte_Order._default.minimum))))))) (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimum) StartFuelAssert_Lexicographic_Byte_Order._default.minimum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimumOpt) StartFuel_Lexicographic_Byte_Order._default.minimumOpt)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximum) StartFuel_Lexicographic_Byte_Order._default.maximum))) (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximum) StartFuelAssert_Lexicographic_Byte_Order._default.maximum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximumOpt) StartFuel_Lexicographic_Byte_Order._default.maximumOpt)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsSorted) StartFuel_Lexicographic_Byte_Order._default.IsSorted)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_PivotsLib._default.CutoffForLeft) StartFuel_PivotsLib._default.CutoffForLeft))) (and (and (= (AsFuelBottom StartFuelAssert_PivotsLib._default.CutoffForLeft) StartFuelAssert_PivotsLib._default.CutoffForLeft) (= (AsFuelBottom StartFuel_PivotsLib._default.CutoffForRight) StartFuel_PivotsLib._default.CutoffForRight)) (and (= (AsFuelBottom StartFuelAssert_PivotsLib._default.CutoffForRight) StartFuelAssert_PivotsLib._default.CutoffForRight) (= (AsFuelBottom StartFuel_Multisets._default.Choose) StartFuel_Multisets._default.Choose))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Multisets._default.Choose) StartFuelAssert_Multisets._default.Choose) (= (AsFuelBottom StartFuel_Multisets._default.Apply) StartFuel_Multisets._default.Apply)) (and (= (AsFuelBottom StartFuelAssert_Multisets._default.Apply) StartFuelAssert_Multisets._default.Apply) (= (AsFuelBottom StartFuel_Multisets._default.Fold) StartFuel_Multisets._default.Fold))) (and (and (= (AsFuelBottom StartFuelAssert_Multisets._default.Fold) StartFuelAssert_Multisets._default.Fold) (= (AsFuelBottom StartFuel_Multisets._default.IsIdentity) StartFuel_Multisets._default.IsIdentity)) (and (= (AsFuelBottom StartFuelAssert_Multisets._default.IsIdentity) StartFuelAssert_Multisets._default.IsIdentity) (= (AsFuelBottom StartFuel_Multisets._default.IsCommutative) StartFuel_Multisets._default.IsCommutative)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Multisets._default.IsCommutative) StartFuelAssert_Multisets._default.IsCommutative) (= (AsFuelBottom StartFuel_Multisets._default.IsAssociative) StartFuel_Multisets._default.IsAssociative)) (and (= (AsFuelBottom StartFuelAssert_Multisets._default.IsAssociative) StartFuelAssert_Multisets._default.IsAssociative) (= (AsFuelBottom StartFuel_BucketsLib._default.BucketMapOfSeq) StartFuel_BucketsLib._default.BucketMapOfSeq))) (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.BucketMapOfSeq) StartFuelAssert_BucketsLib._default.BucketMapOfSeq) (= (AsFuelBottom StartFuel_BucketsLib._default.B) StartFuel_BucketsLib._default.B)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.B) StartFuelAssert_BucketsLib._default.B) (= (AsFuelBottom StartFuel_BucketsLib._default.BucketIntersect) StartFuel_BucketsLib._default.BucketIntersect)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.BucketIntersect) StartFuelAssert_BucketsLib._default.BucketIntersect) (= (AsFuelBottom StartFuel_BucketsLib._default.BucketComplement) StartFuel_BucketsLib._default.BucketComplement)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.BucketComplement) StartFuelAssert_BucketsLib._default.BucketComplement) (= (AsFuelBottom StartFuel_BucketsLib._default.Compose) StartFuel_BucketsLib._default.Compose))) (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.Compose) StartFuelAssert_BucketsLib._default.Compose) (= (AsFuelBottom StartFuel_BucketsLib._default.ComposeSeq) StartFuel_BucketsLib._default.ComposeSeq)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.ComposeSeq) StartFuelAssert_BucketsLib._default.ComposeSeq) (= (AsFuelBottom StartFuel_BucketsLib._default.ClampRange) StartFuel_BucketsLib._default.ClampRange)))) (and (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.ClampRange) StartFuelAssert_BucketsLib._default.ClampRange) (= (AsFuelBottom StartFuel_BucketsLib._default.ClampStart) StartFuel_BucketsLib._default.ClampStart)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.ClampStart) StartFuelAssert_BucketsLib._default.ClampStart) (= (AsFuelBottom StartFuel_BucketsLib._default.ClampEnd) StartFuel_BucketsLib._default.ClampEnd))) (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.ClampEnd) StartFuelAssert_BucketsLib._default.ClampEnd) (= (AsFuelBottom StartFuel_BucketsLib._default.KeyValueMapOfBucket) StartFuel_BucketsLib._default.KeyValueMapOfBucket)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.KeyValueMapOfBucket) StartFuelAssert_BucketsLib._default.KeyValueMapOfBucket) (= (AsFuelBottom StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap) StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap) StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap) (= (AsFuelBottom StartFuel_BucketsLib._default.SplitBucketLeft) StartFuel_BucketsLib._default.SplitBucketLeft)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SplitBucketLeft) StartFuelAssert_BucketsLib._default.SplitBucketLeft) (= (AsFuelBottom StartFuel_BucketsLib._default.SplitBucketRight) StartFuel_BucketsLib._default.SplitBucketRight))) (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SplitBucketRight) StartFuelAssert_BucketsLib._default.SplitBucketRight) (= (AsFuelBottom StartFuel_BucketsLib._default.SplitBucketInList) StartFuel_BucketsLib._default.SplitBucketInList)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SplitBucketInList) StartFuelAssert_BucketsLib._default.SplitBucketInList) (= (AsFuelBottom StartFuel_BucketsLib._default.MergeBuckets) StartFuel_BucketsLib._default.MergeBuckets)))) (and (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.MergeBuckets) StartFuelAssert_BucketsLib._default.MergeBuckets) (= (AsFuelBottom StartFuel_BucketsLib._default.MergeBucketsInList) StartFuel_BucketsLib._default.MergeBucketsInList)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.MergeBucketsInList) StartFuelAssert_BucketsLib._default.MergeBucketsInList) (= $_Frame@0 (|lambda#322| null $Heap@@101 alloc false)))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@101 $Heap@0) (forall ((|$ih#m0#0| T@U) ) (!  (=> (= (type |$ih#m0#0|) (MapType BoxType BoxType)) (=> (and (and ($Is |$ih#m0#0| (TMap Tclass.KeyType.Key Tclass.ValueType.Value)) (U_2_bool (MapType0Select (|Map#Domain| |$ih#m0#0|) ($Box |key#0@@216|)))) (or (and (|Set#Subset| (|Map#Domain| |$ih#m0#0|) (|Map#Domain| |m#0@@145|)) (not (|Set#Subset| (|Map#Domain| |m#0@@145|) (|Map#Domain| |$ih#m0#0|)))) (and (|Set#Equal| (|Map#Domain| |$ih#m0#0|) (|Map#Domain| |m#0@@145|)) (< (|Seq#Rank| |key#0@@216|) (|Seq#Rank| |key#0@@216|))))) (let ((|s#2| (BucketsLib.__default.SortedSeqOfKeyValueMap StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap |$ih#m0#0|))) (exists ((|i#2@@23| Int) ) (!  (and (and (<= (LitInt 0) |i#2@@23|) (< |i#2@@23| (|Seq#Length| |s#2|))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |s#2| |i#2@@23|))) |key#0@@216|)) :qid |BucketsL.813:14| :skolemid |1812| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#2| |i#2@@23|))) ))))) :qid |BucketsL.810:35| :skolemid |1813| :no-pattern (type |$ih#m0#0|) :no-pattern (U_2_int |$ih#m0#0|) :no-pattern (U_2_bool |$ih#m0#0|) ))))))))) (and (! (or %lbl%@28 (forall (($o@@255 T@U) ($f@@211 T@U) ) (! (let ((alpha@@216 (FieldTypeInv0 (type $f@@211)))) (=> (and (and (= (type $o@@255) refType) (= (type $f@@211) (FieldType alpha@@216))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@255 $f@@211)))) :qid |BucketsL.815:34| :skolemid |1814| :no-pattern (type $o@@255) :no-pattern (type $f@@211) :no-pattern (U_2_int $o@@255) :no-pattern (U_2_bool $o@@255) :no-pattern (U_2_int $f@@211) :no-pattern (U_2_bool $f@@211) ))) :lblneg @28) (=> (forall (($o@@256 T@U) ($f@@212 T@U) ) (! (let ((alpha@@217 (FieldTypeInv0 (type $f@@212)))) (=> (and (and (= (type $o@@256) refType) (= (type $f@@212) (FieldType alpha@@217))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@256 $f@@212)))) :qid |BucketsL.815:34| :skolemid |1814| :no-pattern (type@@0 $o@@252) :no-pattern (type@@0 $f@@208) :no-pattern (type $o@@256) :no-pattern (type $f@@212) :no-pattern (U_2_int $o@@256) :no-pattern (U_2_bool $o@@256) :no-pattern (U_2_int $f@@212) :no-pattern (U_2_bool $f@@212) )) (=> (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (= $Heap@0 $Heap@1)) (=> (and (and (and (= StartFuel_BucketsLib._default.SortedSeqOfKeyValueMap ($LS MoreFuel_BucketsLib._default.SortedSeqOfKeyValueMap0)) (= StartFuelAssert_BucketsLib._default.SortedSeqOfKeyValueMap ($LS ($LS MoreFuel_BucketsLib._default.SortedSeqOfKeyValueMap0)))) (and (= (AsFuelBottom MoreFuel_BucketsLib._default.SortedSeqOfKeyValueMap0) MoreFuel_BucketsLib._default.SortedSeqOfKeyValueMap0) (= |##s#0@0| (|Map#Domain| |m#0@@145|)))) (and (and ($IsAlloc |##s#0@0| (TSet (TSeq Tclass.NativeTypes.byte)) $Heap@1) (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (|Map#Domain| |m#0@@145|))) (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (|Map#Domain| |m#0@@145|)) (= |max#0@0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (|Map#Domain| |m#0@@145|)))))) (and anon9_Then_correct anon9_Else_correct))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+29 true) :lblpos +29) (=> (and ($IsGoodHeap $Heap@@101) ($IsHeapAnchor $Heap@@101)) (=> (and (and (and ($Is |m#0@@145| (TMap Tclass.KeyType.Key Tclass.ValueType.Value)) ($IsAlloc |m#0@@145| (TMap Tclass.KeyType.Key Tclass.ValueType.Value) $Heap@@101)) (and ($Is |key#0@@216| Tclass.KeyType.Key) ($IsAlloc |key#0@@216| Tclass.KeyType.Key $Heap@@101))) (and (and ($Is |max#0@@1| (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))) ($IsAlloc |max#0@@1| (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)) $Heap@@101)) (and (= 82 $FunctionContextHeight) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@145|) ($Box |key#0@@216|)))))) anon0_correct))))) PreconditionGeneratedEntry_correct)))))))))))) ))
(check-sat)
