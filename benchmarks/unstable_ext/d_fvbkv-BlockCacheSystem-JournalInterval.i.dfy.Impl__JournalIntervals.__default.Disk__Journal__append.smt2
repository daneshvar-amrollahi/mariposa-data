(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun |##JournalIntervals.JournalInterval.JournalInterval| () T@U)
(declare-fun Tagclass.JournalIntervals.JournalInterval () T@U)
(declare-fun class.JournalIntervals.JournalInterval () T@U)
(declare-fun class.JournalIntervals.__default () T@U)
(declare-fun Tagclass.JournalIntervals.__default () T@U)
(declare-fun Tagclass.JournalRanges.JournalBlock () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.Journal.JournalEntry () T@U)
(declare-fun Tagclass.DiskLayout.Location () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun class.Bounds.__default () T@U)
(declare-fun Tagclass.Bounds.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun |##DiskLayout.Location.Location| () T@U)
(declare-fun class.DiskLayout.Location () T@U)
(declare-fun class.DiskLayout.__default () T@U)
(declare-fun Tagclass.DiskLayout.__default () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun |##UI.RangeStart.SInclusive| () T@U)
(declare-fun Tagclass.UI.RangeStart () T@U)
(declare-fun |##UI.RangeStart.SExclusive| () T@U)
(declare-fun |##UI.RangeStart.NegativeInf| () T@U)
(declare-fun class.UI.RangeStart () T@U)
(declare-fun |##UI.RangeEnd.EInclusive| () T@U)
(declare-fun Tagclass.UI.RangeEnd () T@U)
(declare-fun |##UI.RangeEnd.EExclusive| () T@U)
(declare-fun |##UI.RangeEnd.PositiveInf| () T@U)
(declare-fun class.UI.RangeEnd () T@U)
(declare-fun |##UI.SuccResult.SuccResult| () T@U)
(declare-fun Tagclass.UI.SuccResult () T@U)
(declare-fun class.UI.SuccResult () T@U)
(declare-fun |##UI.SuccResultList.SuccResultList| () T@U)
(declare-fun Tagclass.UI.SuccResultList () T@U)
(declare-fun class.UI.SuccResultList () T@U)
(declare-fun |##UI.Op.NoOp| () T@U)
(declare-fun Tagclass.UI.Op () T@U)
(declare-fun |##UI.Op.SyncOp| () T@U)
(declare-fun |##UI.Op.CrashOp| () T@U)
(declare-fun |##UI.Op.PushSyncOp| () T@U)
(declare-fun |##UI.Op.PopSyncOp| () T@U)
(declare-fun |##UI.Op.GetOp| () T@U)
(declare-fun |##UI.Op.PutOp| () T@U)
(declare-fun |##UI.Op.SuccOp| () T@U)
(declare-fun class.UI.Op () T@U)
(declare-fun class.UI.__default () T@U)
(declare-fun Tagclass.UI.__default () T@U)
(declare-fun |##Journal.JournalEntry.JournalInsert| () T@U)
(declare-fun class.Journal.JournalEntry () T@U)
(declare-fun class.Journal.__default () T@U)
(declare-fun Tagclass.Journal.__default () T@U)
(declare-fun class.JournalRanges.__default () T@U)
(declare-fun Tagclass.JournalRanges.__default () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4TypeInv5 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun |#JournalIntervals.JournalInterval.JournalInterval| (Int Int) T@U)
(declare-fun JournalIntervals.JournalInterval.JournalInterval_q (T@U) Bool)
(declare-fun Tclass.JournalIntervals.JournalInterval () T@U)
(declare-fun JournalIntervals.JournalInterval.start (T@U) Int)
(declare-fun JournalIntervals.JournalInterval.len (T@U) Int)
(declare-fun |$IsA#JournalIntervals.JournalInterval| (T@U) Bool)
(declare-fun |JournalIntervals.JournalInterval#Equal| (T@U T@U) Bool)
(declare-fun Tclass.JournalIntervals.__default () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun JournalIntervals.__default.ValidJournalInterval (T@U) Bool)
(declare-fun |JournalIntervals.__default.ValidJournalInterval#canCall| (T@U) Bool)
(declare-fun |JournalIntervals.__default.ValidJournalInterval#requires| (T@U) Bool)
(declare-fun |DiskLayout.__default.NumJournalBlocks#canCall| () Bool)
(declare-fun DiskLayout.__default.NumJournalBlocks () Int)
(declare-fun JournalIntervals.__default.ContiguousJournalInterval (T@U) Bool)
(declare-fun |JournalIntervals.__default.ContiguousJournalInterval#canCall| (T@U) Bool)
(declare-fun |JournalIntervals.__default.ContiguousJournalInterval#requires| (T@U) Bool)
(declare-fun Tclass.JournalRanges.JournalBlock () T@U)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun JournalIntervals.__default.ValidJournal (T@U) Bool)
(declare-fun |JournalIntervals.__default.ValidJournal#canCall| (T@U) Bool)
(declare-fun |JournalIntervals.__default.ValidJournal#requires| (T@U) Bool)
(declare-fun JournalIntervals.__default.CyclicSpliceValue (T@U T@U T@U Int) T@U)
(declare-fun |JournalIntervals.__default.CyclicSpliceValue#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |JournalIntervals.__default.CyclicSpliceValue#requires| (T@U T@U T@U Int) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun JournalIntervals.__default.JournalUpdate (T@U T@U T@U T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |JournalIntervals.__default.JournalUpdate#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.JournalUpdate#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun JournalIntervals.__default.InCyclicRange (Int T@U) Bool)
(declare-fun |JournalIntervals.__default.InCyclicRange#canCall| (Int T@U) Bool)
(declare-fun |JournalIntervals.__default.InCyclicRange#requires| (Int T@U) Bool)
(declare-fun JournalIntervals.__default.JournalFrontInterval (Int Int) T@U)
(declare-fun |JournalIntervals.__default.JournalFrontInterval#canCall| (Int Int) Bool)
(declare-fun |JournalIntervals.__default.JournalFrontInterval#requires| (Int Int) Bool)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun JournalIntervals.__default.JournalBackInterval (Int Int) T@U)
(declare-fun |JournalIntervals.__default.JournalBackInterval#canCall| (Int Int) Bool)
(declare-fun |JournalIntervals.__default.JournalBackInterval#requires| (Int Int) Bool)
(declare-fun JournalIntervals.__default.subinterval (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.subinterval#canCall| (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.subinterval#requires| (T@U T@U) Bool)
(declare-fun JournalIntervals.__default.journalIntervalOverlap (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.journalIntervalOverlap#canCall| (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.journalIntervalOverlap#requires| (T@U T@U) Bool)
(declare-fun JournalIntervals.__default.journalCyclicIntervalOverlap (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.journalCyclicIntervalOverlap#canCall| (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.journalCyclicIntervalOverlap#requires| (T@U T@U) Bool)
(declare-fun JournalIntervals.__default.CyclicSlice (T@U T@U T@U T@U) T@U)
(declare-fun |JournalIntervals.__default.CyclicSlice#canCall| (T@U T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.CyclicSlice#requires| (T@U T@U T@U T@U) Bool)
(declare-fun JournalIntervals.__default.fullRange (T@U) Bool)
(declare-fun |JournalIntervals.__default.fullRange#canCall| (T@U) Bool)
(declare-fun |JournalIntervals.__default.fullRange#requires| (T@U) Bool)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun JournalIntervals.__default.concatFold (T@U T@U) T@U)
(declare-fun |JournalIntervals.__default.concatFold#canCall| (T@U) Bool)
(declare-fun |JournalIntervals.__default.concatFold#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun JournalIntervals.__default.Disk__HasJournalRange (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.Disk__HasJournalRange#canCall| (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.Disk__HasJournalRange#requires| (T@U T@U) Bool)
(declare-fun StartFuel_JournalIntervals._default.CyclicSlice () T@U)
(declare-fun JournalIntervals.__default.Disk__JournalRange (T@U T@U) T@U)
(declare-fun |JournalIntervals.__default.Disk__JournalRange#canCall| (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.Disk__JournalRange#requires| (T@U T@U) Bool)
(declare-fun JournalIntervals.__default.Disk__HasJournal (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.Disk__HasJournal#canCall| (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.Disk__HasJournal#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.parseJournalRange (T@U T@U) T@U)
(declare-fun |JournalRanges.__default.parseJournalRange#canCall| (T@U) Bool)
(declare-fun Tclass.Journal.JournalEntry () T@U)
(declare-fun JournalIntervals.__default.Disk__Journal (T@U T@U) T@U)
(declare-fun |JournalIntervals.__default.Disk__Journal#canCall| (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.Disk__Journal#requires| (T@U T@U) Bool)
(declare-fun JournalIntervals.__default.NextStartPoint (T@U) Int)
(declare-fun |JournalIntervals.__default.NextStartPoint#canCall| (T@U) Bool)
(declare-fun |JournalIntervals.__default.NextStartPoint#requires| (T@U) Bool)
(declare-fun JournalIntervals.__default.concatIntervals (T@U T@U) T@U)
(declare-fun |JournalIntervals.__default.concatIntervals#canCall| (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.concatIntervals#requires| (T@U T@U) Bool)
(declare-fun Tclass.DiskLayout.Location () T@U)
(declare-fun JournalIntervals.__default.JournalIntervalOfLocation (T@U) T@U)
(declare-fun StartFuel_DiskLayout._default.ValidJournalLocation () T@U)
(declare-fun DiskLayout.__default.JournalRangeLocation (Int Int) T@U)
(declare-fun |JournalIntervals.__default.JournalIntervalOfLocation#canCall| (T@U) Bool)
(declare-fun DiskLayout.__default.ValidJournalLocation (T@U T@U) Bool)
(declare-fun |DiskLayout.Location#Equal| (T@U T@U) Bool)
(declare-fun |JournalIntervals.__default.JournalIntervalOfLocation#requires| (T@U) Bool)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation0 () T@U)
(declare-fun StartFuelAssert_DiskLayout._default.ValidJournalLocation () T@U)
(declare-fun DiskLayout.Location.Location_q (T@U) Bool)
(declare-fun |DiskLayout.__default.JournalStartAddr#canCall| () Bool)
(declare-fun DiskLayout.Location.addr (T@U) Int)
(declare-fun DiskLayout.__default.JournalStartAddr () Int)
(declare-fun DiskLayout.Location.len (T@U) Int)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation1 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun Tclass.KeyType.__default () T@U)
(declare-fun KeyType.__default.MaxLen () Int)
(declare-fun |KeyType.__default.MaxLen#requires| () Bool)
(declare-fun Tclass.Bounds.__default () T@U)
(declare-fun Bounds.__default.NodeBlockSizeUint64 () Int)
(declare-fun |Bounds.__default.NodeBlockSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.MinNodeBlockIndexUint64 () Int)
(declare-fun |Bounds.__default.MinNodeBlockIndexUint64#requires| () Bool)
(declare-fun |Bounds.__default.SuperblockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.DiskNumJournalBlocksUint64#canCall| () Bool)
(declare-fun |Bounds.__default.JournalBlockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.NodeBlockSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.SuperblockSizeUint64 () Int)
(declare-fun Bounds.__default.DiskNumJournalBlocksUint64 () Int)
(declare-fun Bounds.__default.JournalBlockSizeUint64 () Int)
(declare-fun Bounds.__default.IndirectionTableBlockSizeUint64 () Int)
(declare-fun |Bounds.__default.SuperblockSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.JournalBlockSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.DiskNumJournalBlocksUint64#requires| () Bool)
(declare-fun |Bounds.__default.IndirectionTableBlockSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.LargestBlockSizeOfAnyTypeUint64 () Int)
(declare-fun |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxTotalBucketWeightUint64 () Int)
(declare-fun |Bounds.__default.MaxTotalBucketWeightUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxCacheSizeUint64 () Int)
(declare-fun |Bounds.__default.MaxCacheSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxNumChildrenUint64 () Int)
(declare-fun |Bounds.__default.MaxNumChildrenUint64#requires| () Bool)
(declare-fun Bounds.__default.FlushTriggerWeightUint64 () Int)
(declare-fun |Bounds.__default.FlushTriggerWeightUint64#requires| () Bool)
(declare-fun |Bounds.__default.MaxTotalBucketWeightUint64#canCall| () Bool)
(declare-fun Bounds.__default.NumBlocksUint64 () Int)
(declare-fun |Bounds.__default.NumBlocksUint64#requires| () Bool)
(declare-fun Bounds.__default.IndirectionTableMaxSizeUint64 () Int)
(declare-fun |Bounds.__default.IndirectionTableMaxSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.SuperblockSize#requires| () Bool)
(declare-fun Bounds.__default.SuperblockSize () Int)
(declare-fun |Bounds.__default.IndirectionTableBlockSize#requires| () Bool)
(declare-fun Bounds.__default.IndirectionTableBlockSize () Int)
(declare-fun |Bounds.__default.NodeBlockSize#requires| () Bool)
(declare-fun Bounds.__default.NodeBlockSize () Int)
(declare-fun |Bounds.__default.MinNodeBlockIndex#requires| () Bool)
(declare-fun |Bounds.__default.MinNodeBlockIndexUint64#canCall| () Bool)
(declare-fun Bounds.__default.MinNodeBlockIndex () Int)
(declare-fun |Bounds.__default.MaxNumChildren#requires| () Bool)
(declare-fun |Bounds.__default.MaxNumChildrenUint64#canCall| () Bool)
(declare-fun Bounds.__default.MaxNumChildren () Int)
(declare-fun |Bounds.__default.MaxTotalBucketWeight#requires| () Bool)
(declare-fun Bounds.__default.MaxTotalBucketWeight () Int)
(declare-fun |Bounds.__default.MaxCacheSize#requires| () Bool)
(declare-fun |Bounds.__default.MaxCacheSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.MaxCacheSize () Int)
(declare-fun |Bounds.__default.FlushTriggerWeight#requires| () Bool)
(declare-fun |Bounds.__default.FlushTriggerWeightUint64#canCall| () Bool)
(declare-fun Bounds.__default.FlushTriggerWeight () Int)
(declare-fun |Bounds.__default.NumBlocks#requires| () Bool)
(declare-fun |Bounds.__default.NumBlocksUint64#canCall| () Bool)
(declare-fun Bounds.__default.NumBlocks () Int)
(declare-fun |Bounds.__default.IndirectionTableMaxSize#requires| () Bool)
(declare-fun |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.IndirectionTableMaxSize () Int)
(declare-fun |Bounds.__default.JournalBlockSize#requires| () Bool)
(declare-fun Bounds.__default.JournalBlockSize () Int)
(declare-fun |Bounds.__default.DiskNumJournalBlocks#requires| () Bool)
(declare-fun Bounds.__default.DiskNumJournalBlocks () Int)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |#DiskLayout.Location.Location| (Int Int) T@U)
(declare-fun |$IsA#DiskLayout.Location| (T@U) Bool)
(declare-fun Tclass.DiskLayout.__default () T@U)
(declare-fun |DiskLayout.__default.NumJournalBlocks#requires| () Bool)
(declare-fun DiskLayout.__default.IndirectionTableMaxLength () Int)
(declare-fun |DiskLayout.__default.IndirectionTableMaxLength#requires| () Bool)
(declare-fun DiskLayout.__default.IndirectionTable1Addr () Int)
(declare-fun |DiskLayout.__default.IndirectionTable1Addr#requires| () Bool)
(declare-fun DiskLayout.__default.IndirectionTable2Addr () Int)
(declare-fun |DiskLayout.__default.IndirectionTable2Addr#requires| () Bool)
(declare-fun |DiskLayout.__default.IndirectionTable1Addr#canCall| () Bool)
(declare-fun |DiskLayout.__default.IndirectionTableMaxLength#canCall| () Bool)
(declare-fun |DiskLayout.__default.JournalStartAddr#requires| () Bool)
(declare-fun DiskLayout.__default.JournalEndAddr () Int)
(declare-fun |DiskLayout.__default.JournalEndAddr#requires| () Bool)
(declare-fun DiskLayout.__default.JournalPoint (Int) Int)
(declare-fun |DiskLayout.__default.JournalPoint#canCall| (Int) Bool)
(declare-fun |DiskLayout.__default.JournalPoint#requires| (Int) Bool)
(declare-fun DiskLayout.__default.ValidIndirectionTableAddr (Int) Bool)
(declare-fun |DiskLayout.__default.ValidIndirectionTableAddr#canCall| (Int) Bool)
(declare-fun |DiskLayout.__default.ValidIndirectionTableAddr#requires| (Int) Bool)
(declare-fun |DiskLayout.__default.IndirectionTable2Addr#canCall| () Bool)
(declare-fun DiskLayout.__default.ValidNodeAddr (T@U Int) Bool)
(declare-fun |DiskLayout.__default.ValidNodeAddr#canCall| (Int) Bool)
(declare-fun |DiskLayout.__default.ValidNodeAddr#requires| (T@U Int) Bool)
(declare-fun |DiskLayout.__default.ValidJournalLocation#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidJournalLocation#requires| (T@U T@U) Bool)
(declare-fun DiskLayout.__default.ValidIndirectionTableLocation (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidIndirectionTableLocation#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidIndirectionTableLocation#requires| (T@U) Bool)
(declare-fun DiskLayout.__default.ValidNodeLocation (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidNodeLocation#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidNodeLocation#requires| (T@U) Bool)
(declare-fun StartFuel_DiskLayout._default.ValidNodeAddr () T@U)
(declare-fun DiskLayout.__default.Superblock1Location () T@U)
(declare-fun |DiskLayout.__default.Superblock1Location#requires| () Bool)
(declare-fun DiskLayout.__default.Superblock2Location () T@U)
(declare-fun |DiskLayout.__default.Superblock2Location#requires| () Bool)
(declare-fun DiskLayout.__default.ValidSuperblock1Location (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblock1Location#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblock1Location#requires| (T@U) Bool)
(declare-fun |DiskLayout.__default.Superblock1Location#canCall| () Bool)
(declare-fun DiskLayout.__default.ValidSuperblock2Location (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblock2Location#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblock2Location#requires| (T@U) Bool)
(declare-fun |DiskLayout.__default.Superblock2Location#canCall| () Bool)
(declare-fun DiskLayout.__default.ValidSuperblockLocation (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblockLocation#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidSuperblockLocation#requires| (T@U) Bool)
(declare-fun DiskLayout.__default.ValidLocation (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidLocation#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.ValidLocation#requires| (T@U) Bool)
(declare-fun DiskLayout.__default.overlap (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.overlap#canCall| (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.overlap#requires| (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.JournalRangeLocation#canCall| (Int Int) Bool)
(declare-fun |DiskLayout.__default.JournalRangeLocation#requires| (Int Int) Bool)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation2 () T@U)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation3 () T@U)
(declare-fun DiskLayout.__default.locContainedInCircularJournalRange (T@U Int Int) Bool)
(declare-fun |DiskLayout.__default.locContainedInCircularJournalRange#canCall| (T@U Int Int) Bool)
(declare-fun |DiskLayout.__default.locContainedInCircularJournalRange#requires| (T@U Int Int) Bool)
(declare-fun DiskLayout.__default.locDisjointFromCircularJournalRange (T@U Int Int) Bool)
(declare-fun |DiskLayout.__default.locDisjointFromCircularJournalRange#canCall| (T@U Int Int) Bool)
(declare-fun |DiskLayout.__default.locDisjointFromCircularJournalRange#requires| (T@U Int Int) Bool)
(declare-fun DiskLayout.__default.JournalPosAdd (Int Int) Int)
(declare-fun |DiskLayout.__default.JournalPosAdd#requires| (Int Int) Bool)
(declare-fun DiskLayout.__default.JournalFrontLocation (Int Int) T@U)
(declare-fun |DiskLayout.__default.JournalFrontLocation#canCall| (Int Int) Bool)
(declare-fun |DiskLayout.__default.JournalFrontLocation#requires| (Int Int) Bool)
(declare-fun DiskLayout.__default.JournalBackLocation (Int Int) T@U)
(declare-fun |DiskLayout.__default.JournalBackLocation#canCall| (Int Int) Bool)
(declare-fun |DiskLayout.__default.JournalBackLocation#requires| (Int Int) Bool)
(declare-fun DiskLayout.__default.LocationSub (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.LocationSub#canCall| (T@U T@U) Bool)
(declare-fun |DiskLayout.__default.LocationSub#requires| (T@U T@U) Bool)
(declare-fun DiskLayout.__default.JournalBlockIdx (T@U T@U) Int)
(declare-fun |DiskLayout.__default.JournalBlockIdx#canCall| (T@U) Bool)
(declare-fun |DiskLayout.__default.JournalBlockIdx#requires| (T@U T@U) Bool)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation4 () T@U)
(declare-fun MoreFuel_DiskLayout._default.ValidJournalLocation5 () T@U)
(declare-fun DiskLayout.__default.otherIndirectionTableAddr (Int) Int)
(declare-fun |DiskLayout.__default.otherIndirectionTableAddr#canCall| (Int) Bool)
(declare-fun |DiskLayout.__default.otherIndirectionTableAddr#requires| (Int) Bool)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#62| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun ValueMessage.__default.bytestring__to__Message (T@U) T@U)
(declare-fun |ValueMessage.__default.bytestring__to__Message#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestring__to__Message#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessageSeq (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.Message__to__bytestring (T@U) T@U)
(declare-fun |ValueMessage.__default.Message__to__bytestring#canCall| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun |ValueMessage.__default.Message__to__bytestring#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.messageSeq__to__bytestringSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestringSeq__to__MessageSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun ValueMessage.__default.DefineDefault () T@U)
(declare-fun |ValueMessage.__default.DefineDefault#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun |#UI.RangeStart.SInclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeStart () T@U)
(declare-fun UI.RangeStart.key (T@U) T@U)
(declare-fun |#UI.RangeStart.SExclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeStart.NegativeInf| () T@U)
(declare-fun UI.RangeStart.NegativeInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeStart| (T@U) Bool)
(declare-fun |UI.RangeStart#Equal| (T@U T@U) Bool)
(declare-fun |#UI.RangeEnd.EInclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeEnd () T@U)
(declare-fun UI.RangeEnd.key (T@U) T@U)
(declare-fun |#UI.RangeEnd.EExclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeEnd.PositiveInf| () T@U)
(declare-fun UI.RangeEnd.PositiveInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeEnd| (T@U) Bool)
(declare-fun |UI.RangeEnd#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResult.SuccResult| (T@U T@U) T@U)
(declare-fun UI.SuccResult.SuccResult_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResult () T@U)
(declare-fun UI.SuccResult.key (T@U) T@U)
(declare-fun UI.SuccResult.value (T@U) T@U)
(declare-fun |$IsA#UI.SuccResult| (T@U) Bool)
(declare-fun |UI.SuccResult#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResultList.SuccResultList| (T@U T@U) T@U)
(declare-fun UI.SuccResultList.SuccResultList_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResultList () T@U)
(declare-fun UI.SuccResultList.results (T@U) T@U)
(declare-fun UI.SuccResultList.end (T@U) T@U)
(declare-fun |$IsA#UI.SuccResultList| (T@U) Bool)
(declare-fun |UI.SuccResultList#Equal| (T@U T@U) Bool)
(declare-fun |#UI.Op.NoOp| () T@U)
(declare-fun UI.Op.NoOp_q (T@U) Bool)
(declare-fun Tclass.UI.Op () T@U)
(declare-fun |#UI.Op.SyncOp| () T@U)
(declare-fun UI.Op.SyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.CrashOp| () T@U)
(declare-fun UI.Op.CrashOp_q (T@U) Bool)
(declare-fun |#UI.Op.PushSyncOp| (Int) T@U)
(declare-fun UI.Op.PushSyncOp_q (T@U) Bool)
(declare-fun UI.Op.id (T@U) Int)
(declare-fun |#UI.Op.PopSyncOp| (Int) T@U)
(declare-fun UI.Op.PopSyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetOp| (T@U T@U) T@U)
(declare-fun UI.Op.GetOp_q (T@U) Bool)
(declare-fun UI.Op.key (T@U) T@U)
(declare-fun UI.Op.value (T@U) T@U)
(declare-fun |#UI.Op.PutOp| (T@U T@U) T@U)
(declare-fun UI.Op.PutOp_q (T@U) Bool)
(declare-fun |#UI.Op.SuccOp| (T@U T@U T@U) T@U)
(declare-fun UI.Op.SuccOp_q (T@U) Bool)
(declare-fun UI.Op.start (T@U) T@U)
(declare-fun UI.Op.results (T@U) T@U)
(declare-fun UI.Op.end (T@U) T@U)
(declare-fun |$IsA#UI.Op| (T@U) Bool)
(declare-fun |UI.Op#Equal| (T@U T@U) Bool)
(declare-fun Tclass.UI.__default () T@U)
(declare-fun |#Journal.JournalEntry.JournalInsert| (T@U T@U) T@U)
(declare-fun Journal.JournalEntry.JournalInsert_q (T@U) Bool)
(declare-fun Journal.JournalEntry.key (T@U) T@U)
(declare-fun Journal.JournalEntry.value (T@U) T@U)
(declare-fun |$IsA#Journal.JournalEntry| (T@U) Bool)
(declare-fun |Journal.JournalEntry#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Journal.__default () T@U)
(declare-fun Journal.__default.JournalEntriesForUIOp (T@U) T@U)
(declare-fun |Journal.__default.JournalEntriesForUIOp#canCall| (T@U) Bool)
(declare-fun |Journal.__default.JournalEntriesForUIOp#requires| (T@U) Bool)
(declare-fun Journal.__default.JournalEntriesForUIOps (T@U T@U) T@U)
(declare-fun |Journal.__default.JournalEntriesForUIOps#canCall| (T@U) Bool)
(declare-fun |Journal.__default.JournalEntriesForUIOps#requires| (T@U T@U) Bool)
(declare-fun Tclass.JournalRanges.__default () T@U)
(declare-fun JournalRanges.__default.JournalRangeLen (T@U) Int)
(declare-fun |JournalRanges.__default.JournalRangeLen#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeLen#requires| (T@U) Bool)
(declare-fun JournalRanges.__default.JournalRangePrefix (T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalRangePrefix#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalRangePrefix#requires| (T@U Int) Bool)
(declare-fun JournalRanges.__default.JournalRangeSuffix (T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalRangeSuffix#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalRangeSuffix#requires| (T@U Int) Bool)
(declare-fun JournalRanges.__default.JournalRangeConcat (T@U T@U) T@U)
(declare-fun |JournalRanges.__default.JournalRangeConcat#canCall| (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeConcat#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.JournalRangeEmpty () T@U)
(declare-fun |JournalRanges.__default.JournalRangeEmpty#requires| () Bool)
(declare-fun JournalRanges.__default.JournalBlocks (T@U) T@U)
(declare-fun |JournalRanges.__default.JournalBlocks#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.JournalBlocks#requires| (T@U) Bool)
(declare-fun JournalRanges.__default.JournalBlockGet (T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalBlockGet#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalBlockGet#requires| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.parseJournalRange#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.JournalRangeParses (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeParses#canCall| (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeParses#requires| (T@U T@U) Bool)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#49| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#50| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#51| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#52| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#53| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#54| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#56| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#57| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#58| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#59| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type |##JournalIntervals.JournalInterval.JournalInterval|) DtCtorIdType)) (= (type Tagclass.JournalIntervals.JournalInterval) TyTagType)) (= (type class.JournalIntervals.JournalInterval) ClassNameType)) (= (type class.JournalIntervals.__default) ClassNameType)) (= (type Tagclass.JournalIntervals.__default) TyTagType)) (= (type Tagclass.JournalRanges.JournalBlock) TyTagType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.Journal.JournalEntry) TyTagType)) (= (type Tagclass.DiskLayout.Location) TyTagType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type Tagclass.KeyType.Key) TyTagType)) (= (type class.KeyType.__default) ClassNameType)) (= (type Tagclass.KeyType.__default) TyTagType)) (= (type class.Bounds.__default) ClassNameType)) (= (type Tagclass.Bounds.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type |##DiskLayout.Location.Location|) DtCtorIdType)) (= (type class.DiskLayout.Location) ClassNameType)) (= (type class.DiskLayout.__default) ClassNameType)) (= (type Tagclass.DiskLayout.__default) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type |##UI.RangeStart.SInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeStart) TyTagType)) (= (type |##UI.RangeStart.SExclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.NegativeInf|) DtCtorIdType)) (= (type class.UI.RangeStart) ClassNameType)) (= (type |##UI.RangeEnd.EInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeEnd) TyTagType)) (= (type |##UI.RangeEnd.EExclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.PositiveInf|) DtCtorIdType)) (= (type class.UI.RangeEnd) ClassNameType)) (= (type |##UI.SuccResult.SuccResult|) DtCtorIdType)) (= (type Tagclass.UI.SuccResult) TyTagType)) (= (type class.UI.SuccResult) ClassNameType)) (= (type |##UI.SuccResultList.SuccResultList|) DtCtorIdType)) (= (type Tagclass.UI.SuccResultList) TyTagType)) (= (type class.UI.SuccResultList) ClassNameType)) (= (type |##UI.Op.NoOp|) DtCtorIdType)) (= (type Tagclass.UI.Op) TyTagType)) (= (type |##UI.Op.SyncOp|) DtCtorIdType)) (= (type |##UI.Op.CrashOp|) DtCtorIdType)) (= (type |##UI.Op.PushSyncOp|) DtCtorIdType)) (= (type |##UI.Op.PopSyncOp|) DtCtorIdType)) (= (type |##UI.Op.GetOp|) DtCtorIdType)) (= (type |##UI.Op.PutOp|) DtCtorIdType)) (= (type |##UI.Op.SuccOp|) DtCtorIdType)) (= (type class.UI.Op) ClassNameType)) (= (type class.UI.__default) ClassNameType)) (= (type Tagclass.UI.__default) TyTagType)) (= (type |##Journal.JournalEntry.JournalInsert|) DtCtorIdType)) (= (type class.Journal.JournalEntry) ClassNameType)) (= (type class.Journal.__default) ClassNameType)) (= (type Tagclass.Journal.__default) TyTagType)) (= (type class.JournalRanges.__default) ClassNameType)) (= (type Tagclass.JournalRanges.__default) TyTagType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 |##JournalIntervals.JournalInterval.JournalInterval| Tagclass.JournalIntervals.JournalInterval class.JournalIntervals.JournalInterval class.JournalIntervals.__default Tagclass.JournalIntervals.__default Tagclass.JournalRanges.JournalBlock Tagclass.Options.Option Tagclass.Journal.JournalEntry Tagclass.DiskLayout.Location Tagclass.NativeTypes.uint64 Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default Tagclass.KeyType.Key class.KeyType.__default Tagclass.KeyType.__default class.Bounds.__default Tagclass.Bounds.__default |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default |##DiskLayout.Location.Location| class.DiskLayout.Location class.DiskLayout.__default Tagclass.DiskLayout.__default Tagclass.ValueType.Value class.ValueType.__default Tagclass.ValueType.__default class.Sequences.__default Tagclass.Sequences.__default class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default Tagclass.ValueMessage.Delta Tagclass.ValueMessage.Message |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message |##UI.RangeStart.SInclusive| Tagclass.UI.RangeStart |##UI.RangeStart.SExclusive| |##UI.RangeStart.NegativeInf| class.UI.RangeStart |##UI.RangeEnd.EInclusive| Tagclass.UI.RangeEnd |##UI.RangeEnd.EExclusive| |##UI.RangeEnd.PositiveInf| class.UI.RangeEnd |##UI.SuccResult.SuccResult| Tagclass.UI.SuccResult class.UI.SuccResult |##UI.SuccResultList.SuccResultList| Tagclass.UI.SuccResultList class.UI.SuccResultList |##UI.Op.NoOp| Tagclass.UI.Op |##UI.Op.SyncOp| |##UI.Op.CrashOp| |##UI.Op.PushSyncOp| |##UI.Op.PopSyncOp| |##UI.Op.GetOp| |##UI.Op.PutOp| |##UI.Op.SuccOp| class.UI.Op class.UI.__default Tagclass.UI.__default |##Journal.JournalEntry.JournalInsert| class.Journal.JournalEntry class.Journal.__default Tagclass.Journal.__default class.JournalRanges.__default Tagclass.JournalRanges.__default) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |319| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |320| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |321| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |322| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |323| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |324| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |325| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |326| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |327| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |328| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |329| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |330| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |331| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |332| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |333| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |334| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |335| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |336| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |337| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |338| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |339| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |340| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |341| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |342| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |343| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |344| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |345| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |346| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |347| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |348| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |349| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |350| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |351| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |352| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |353| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |354| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |355| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |356| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |357| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |358| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |359| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |360| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |361| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |362| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |363| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |364| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |365| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |366| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |368| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |370| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |372| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |373| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |375| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |377| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |379| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |381| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |383| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |385| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |387| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |389| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |391| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |392| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |393| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |394| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |395| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |396| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |397| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |398| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |399| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |400| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |401| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |402| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |403| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |404| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |405| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |406| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |407| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |408| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |409| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |410| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |411| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |412| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |413| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |414| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |415| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |416| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |417| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |418| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |419| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |420| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |421| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |422| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |423| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |424| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |425| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |426| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |427| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |428| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |429| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |430| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |435| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |436| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |437| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |438| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |439| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |440| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |441| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |442| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |443| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |444| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |445| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |446| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |447| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |448| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |449| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |450| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |451| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |452| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |453| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |454| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |455| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |456| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |457| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |458| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |459| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |461| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |463| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |464| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |466| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |467| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |468| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |469| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |470| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |471| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |472| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |473| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |474| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |475| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |476| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |477| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |478| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |479| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |480| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |481| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |483| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |485| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |486| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |488| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |489| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |490| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |491| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |492| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |493| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |495| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |496| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |497| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |498| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |499| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |500| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |501| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |502| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |503| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |504| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |505| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |506| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |507| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |508| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |509| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |510| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |511| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |512| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |513| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |514| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |515| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |517| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |519| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |520| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |522| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |523| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |524| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |525| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |526| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |527| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |528| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |529| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |530| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |532| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |533| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |534| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |535| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |536| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |537| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |538| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |539| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |540| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |541| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |542| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |543| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |544| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |545| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |546| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |547| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |548| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |549| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |551| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |552| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |553| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |554| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |556| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |558| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |560| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |561| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |563| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |564| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |565| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |566| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |567| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |568| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |569| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |570| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |571| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |572| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |573| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |574| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |575| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |576| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |577| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |578| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |579| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |580| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |581| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |582| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |583| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |584| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |585| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |586| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |587| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |588| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |589| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |591| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |592| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |593| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |594| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |595| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |596| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |597| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |598| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |599| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |600| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |601| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |602| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |605| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |606| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |608| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |610| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |611| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |612| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |613| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |614| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |615| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |616| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |619| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |620| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |621| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |622| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |623| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |624| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |625| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |626| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |627| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |628| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |629| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |630| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |631| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |632| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |633| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |634| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |635| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |636| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |637| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |638| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |639| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |640| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |641| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |642| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |643| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |644| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |645| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |646| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |647| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |648| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |649| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |650| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |651| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |652| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |653| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |654| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |655| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |656| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |657| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |658| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |659| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |660| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |661| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |662| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |663| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |664| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |665| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |666| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |667| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |668| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |669| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |670| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |671| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |672| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |673| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |674| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |675| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |676| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |677| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |678| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |679| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |680| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |682| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |683| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |684| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |686| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |687| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |688| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |689| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |690| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |691| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |692| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |693| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |694| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |696| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |701| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |702| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |705| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |706| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |707| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |708| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |709| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |710| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |711| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |712| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |713| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |715| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |717| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |718| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |719| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |721| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |722| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |723| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |724| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |726| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |727| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |728| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |729| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |730| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |734| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |736| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |737| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |738| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |739| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |744| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |745| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |746| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |747| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |748| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |750| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@31| T@U) ) (!  (=> (and (= (type |#$T0@@18|) TyType) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |752| :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@32| T@U) ) (!  (=> (and (= (type |#$T0@@19|) TyType) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@33| T@U) ) (!  (=> (and (= (type |#$T0@@20|) TyType) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) |#$R@@33|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@34| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$R@@34|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|)))) :qid |unknown.0:0| :skolemid |755| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@142 T@T) (arg1@@64 T@T) (arg2@@24 T@T) ) (! (= (Ctor (MapType3Type arg0@@142 arg1@@64 arg2@@24)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@143 T@T) (arg1@@65 T@T) (arg2@@25 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@143 arg1@@65 arg2@@25)) arg0@@143) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@143 arg1@@65 arg2@@25)) ))) (forall ((arg0@@144 T@T) (arg1@@66 T@T) (arg2@@26 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@144 arg1@@66 arg2@@26)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@144 arg1@@66 arg2@@26)) ))) (forall ((arg0@@145 T@T) (arg1@@67 T@T) (arg2@@27 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@145 arg1@@67 arg2@@27)) arg2@@27) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@145 arg1@@67 arg2@@27)) ))) (forall ((arg0@@146 T@U) (arg1@@68 T@U) (arg2@@28 T@U) ) (! (let ((aVar2@@0 (MapType3TypeInv2 (type arg0@@146)))) (= (type (MapType3Select arg0@@146 arg1@@68 arg2@@28)) aVar2@@0)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@146 arg1@@68 arg2@@28)) ))) (forall ((arg0@@147 T@U) (arg1@@69 T@U) (arg2@@29 T@U) (arg3@@10 T@U) ) (! (let ((aVar2@@1 (type arg3@@10))) (let ((aVar1@@3 (type arg2@@29))) (let ((aVar0@@1 (type arg1@@69))) (= (type (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@1))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (val@@11 T@U) ) (! (let ((aVar2@@2 (MapType3TypeInv2 (type m@@32)))) (=> (= (type val@@11) aVar2@@2) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 val@@11) x0@@10 x1@@4) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (y0@@7 T@U) (y1@@3 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 val@@12) y0@@7 y1@@3) (MapType3Select m@@33 y0@@7 y1@@3))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (y0@@8 T@U) (y1@@4 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 val@@13) y0@@8 y1@@4) (MapType3Select m@@34 y0@@8 y1@@4))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (y0@@9 T@U) (y1@@5 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 val@@14) y0@@9 y1@@5) (MapType3Select m@@35 y0@@9 y1@@5))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@148 T@U) (arg1@@70 T@U) (arg2@@30 T@U) ) (! (= (type (Handle1 arg0@@148 arg1@@70 arg2@@30)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@148 arg1@@70 arg2@@30)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15) (MapType3Select h@@34 heap@@11 bx0@@15))) :qid |unknown.0:0| :skolemid |756| :pattern ( (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16))) (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) )))
(assert (forall ((arg0@@149 T@U) (arg1@@71 T@U) (arg2@@31 T@U) (arg3@@11 T@U) (arg4@@3 T@U) ) (! (= (type (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53)) (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53))))) :qid |unknown.0:0| :skolemid |758| :pattern ( (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and ($IsBox bx0@@18 t0@@45) ($Is f@@29 (Tclass._System.___hFunc1 t0@@45 t1@@21)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |759| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and ($IsBox bx0@@19 t0@@46) ($Is f@@30 (Tclass._System.___hFunc1 t0@@46 t1@@22)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |761| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads1 t0@@46 t1@@22 h0@@13 f@@30 bx0@@19) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19))) :qid |unknown.0:0| :skolemid |762| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and ($IsBox bx0@@20 t0@@47) ($Is f@@31 (Tclass._System.___hFunc1 t0@@47 t1@@23)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |763| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) (=> (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and ($IsBox bx0@@21 t0@@48) ($Is f@@32 (Tclass._System.___hFunc1 t0@@48 t1@@24)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |765| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) (=> (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21)))) :qid |unknown.0:0| :skolemid |766| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and ($IsBox bx0@@22 t0@@49) ($Is f@@33 (Tclass._System.___hFunc1 t0@@49 t1@@25)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |767| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22))) :qid |unknown.0:0| :skolemid |768| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and ($IsBox bx0@@23 t0@@50) ($Is f@@34 (Tclass._System.___hFunc1 t0@@50 t1@@26)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |769| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply1 t0@@50 t1@@26 h0@@17 f@@34 bx0@@23) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23))) :qid |unknown.0:0| :skolemid |770| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (and ($IsGoodHeap heap@@14) (and ($IsBox bx0@@24 t0@@51) ($Is f@@35 (Tclass._System.___hFunc1 t0@@51 t1@@27))))) (and (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |771| :pattern ( (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) ($IsGoodHeap heap@@14)) :pattern ( (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (and (and ($IsGoodHeap heap@@15) (and ($IsBox bx0@@25 t0@@52) ($Is f@@36 (Tclass._System.___hFunc1 t0@@52 t1@@28)))) (|Set#Equal| (Reads1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) (=> (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25)))) :qid |unknown.0:0| :skolemid |772| :pattern ( (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) ($IsGoodHeap heap@@15)) :pattern ( (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) ) (!  (=> (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29)) (forall ((h@@37 T@U) (bx0@@26 T@U) ) (!  (=> (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (=> (and (and ($IsGoodHeap h@@37) ($IsBox bx0@@26 t0@@53)) (Requires1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ($IsBox (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) ) (!  (=> (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (=> (and (and ($IsGoodHeap h@@38) ($IsBox bx0@@27 t0@@53)) (Requires1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) ($IsBox (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) )) ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))))) :qid |unknown.0:0| :skolemid |774| :pattern ( ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (u0@@1 T@U) (u1@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (and (and ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |775| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t1@@30)) ($IsBox bx@@55 u1@@0)) :qid |unknown.0:0| :skolemid |776| :pattern ( ($IsBox bx@@55 t1@@30)) :pattern ( ($IsBox bx@@55 u1@@0)) )))) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39) (forall ((bx0@@28 T@U) ) (!  (=> (= (type bx0@@28) BoxType) (=> (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) ))) (=> (forall ((bx0@@29 T@U) ) (!  (=> (= (type bx0@@29) BoxType) (=> (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)))) :qid |unknown.0:0| :skolemid |780| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40))) (forall ((bx0@@30 T@U) ) (!  (=> (= (type bx0@@30) BoxType) (=> (and ($IsAllocBox bx0@@30 t0@@56 h@@40) (Requires1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ($IsAllocBox (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30) t1@@32 h@@40))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ))) :qid |unknown.0:0| :skolemid |782| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40)) )))
(assert (forall ((arg0@@150 T@U) (arg1@@72 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@35| T@U) ) (!  (=> (and (= (type |#$T0@@22|) TyType) (= (type |#$R@@35|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |783| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) )))
(assert (forall ((arg0@@151 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@151)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@151)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@36| T@U) ) (!  (=> (and (= (type |#$T0@@23|) TyType) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) |#$T0@@23|)) :qid |unknown.0:0| :skolemid |784| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) )))
(assert (forall ((arg0@@152 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@152)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@152)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@37| T@U) ) (!  (=> (and (= (type |#$T0@@24|) TyType) (= (type |#$R@@37|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) |#$R@@37|)) :qid |unknown.0:0| :skolemid |785| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@38| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$R@@38|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|)))) :qid |unknown.0:0| :skolemid |786| :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@39| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (= (type |#$T0@@26|) TyType) (= (type |#$R@@39|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@3| T@U) ) (!  (=> (and (= (type |x0#0@@3|) BoxType) ($IsBox |x0#0@@3| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@3|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@4| T@U) ) (!  (=> (and (= (type |x0#0@@4|) BoxType) ($IsBox |x0#0@@4| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@4|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))))) :qid |unknown.0:0| :skolemid |788| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))) )))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@40| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$R@@40|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)))) :qid |unknown.0:0| :skolemid |789| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) )))
(assert (forall ((arg0@@153 T@U) (arg1@@73 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@41| T@U) ) (!  (=> (and (= (type |#$T0@@28|) TyType) (= (type |#$R@@41|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) )))
(assert (forall ((arg0@@154 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@154)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@154)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$R@@42| T@U) ) (!  (=> (and (= (type |#$T0@@29|) TyType) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) |#$T0@@29|)) :qid |unknown.0:0| :skolemid |791| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) )))
(assert (forall ((arg0@@155 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@155)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@155)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$R@@43| T@U) ) (!  (=> (and (= (type |#$T0@@30|) TyType) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |792| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@44| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$R@@44|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (= (type |#$T0@@32|) TyType) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@5| T@U) ) (!  (=> (and (= (type |x0#0@@5|) BoxType) ($IsBox |x0#0@@5| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@5|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@5|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@6| T@U) ) (!  (=> (and (= (type |x0#0@@6|) BoxType) ($IsBox |x0#0@@6| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@6|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@6|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))))) :qid |unknown.0:0| :skolemid |795| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@156 T@U) (arg1@@74 T@U) (arg2@@32 T@U) (arg3@@12 T@U) (arg4@@4 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@156 arg1@@74 arg2@@32 arg3@@12 arg4@@4)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@156 arg1@@74 arg2@@32 arg3@@12 arg4@@4)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$T3| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |797| :pattern ( (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) )))
(assert (forall ((arg0@@157 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@157)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@157)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$T3@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |798| :pattern ( (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@158 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@158)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@158)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$T3@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |799| :pattern ( (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@159)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@159)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$T3@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |800| :pattern ( (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@160)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@160)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$T3@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |801| :pattern ( (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@161)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@161)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$T3@@4| T@U) (|#$R@@52| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) |#$R@@52|)) :qid |unknown.0:0| :skolemid |802| :pattern ( (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$T3@@5| T@U) (|#$R@@53| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|)))) :qid |unknown.0:0| :skolemid |803| :pattern ( ($IsBox bx@@58 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@162 T@T) (arg1@@75 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@5 T@T) (arg5@@1 T@T) ) (! (= (Ctor (MapType4Type arg0@@162 arg1@@75 arg2@@33 arg3@@13 arg4@@5 arg5@@1)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@163 T@T) (arg1@@76 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@6 T@T) (arg5@@2 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@163 arg1@@76 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) arg0@@163) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@163 arg1@@76 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) ))) (forall ((arg0@@164 T@T) (arg1@@77 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@7 T@T) (arg5@@3 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@164 arg1@@77 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) arg1@@77) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@164 arg1@@77 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) ))) (forall ((arg0@@165 T@T) (arg1@@78 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@8 T@T) (arg5@@4 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@165 arg1@@78 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@165 arg1@@78 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) ))) (forall ((arg0@@166 T@T) (arg1@@79 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@9 T@T) (arg5@@5 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@166 arg1@@79 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@166 arg1@@79 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) ))) (forall ((arg0@@167 T@T) (arg1@@80 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@10 T@T) (arg5@@6 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@167 arg1@@80 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) arg4@@10) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@167 arg1@@80 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) ))) (forall ((arg0@@168 T@T) (arg1@@81 T@T) (arg2@@39 T@T) (arg3@@19 T@T) (arg4@@11 T@T) (arg5@@7 T@T) ) (! (= (MapType4TypeInv5 (MapType4Type arg0@@168 arg1@@81 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) arg5@@7) :qid |typeInv:MapType4TypeInv5| :pattern ( (MapType4Type arg0@@168 arg1@@81 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) ))) (forall ((arg0@@169 T@U) (arg1@@82 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@12 T@U) (arg5@@8 T@U) ) (! (let ((aVar5 (MapType4TypeInv5 (type arg0@@169)))) (= (type (MapType4Select arg0@@169 arg1@@82 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) aVar5)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@169 arg1@@82 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) ))) (forall ((arg0@@170 T@U) (arg1@@83 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@13 T@U) (arg5@@9 T@U) (arg6@@1 T@U) ) (! (let ((aVar5@@0 (type arg6@@1))) (let ((aVar4 (type arg5@@9))) (let ((aVar3@@2 (type arg4@@13))) (let ((aVar2@@3 (type arg3@@21))) (let ((aVar1@@4 (type arg2@@41))) (let ((aVar0@@2 (type arg1@@83))) (= (type (MapType4Store arg0@@170 arg1@@83 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4 aVar5@@0)))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@170 arg1@@83 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) ))) (forall ((m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (x4 T@U) (val@@15 T@U) ) (! (let ((aVar5@@1 (MapType4TypeInv5 (type m@@36)))) (=> (= (type val@@15) aVar5@@1) (= (MapType4Select (MapType4Store m@@36 x0@@14 x1@@8 x2@@4 x3 x4 val@@15) x0@@14 x1@@8 x2@@4 x3 x4) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (x4@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) (y4 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@37 x0@@15 x1@@9 x2@@5 x3@@0 x4@@0 val@@16) y0@@10 y1@@6 y2@@3 y3 y4) (MapType4Select m@@37 y0@@10 y1@@6 y2@@3 y3 y4))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (x4@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) (y4@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@38 x0@@16 x1@@10 x2@@6 x3@@1 x4@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0 y4@@0) (MapType4Select m@@38 y0@@11 y1@@7 y2@@4 y3@@0 y4@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (x4@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) (y4@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 x2@@7 x3@@2 x4@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1 y4@@1) (MapType4Select m@@39 y0@@12 y1@@8 y2@@5 y3@@1 y4@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (x4@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) (y4@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 x2@@8 x3@@3 x4@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2 y4@@2) (MapType4Select m@@40 y0@@13 y1@@9 y2@@6 y3@@2 y4@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (x4@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 x2@@9 x3@@4 x4@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3 y4@@3) (MapType4Select m@@41 y0@@14 y1@@10 y2@@7 y3@@3 y4@@3))) :qid |mapAx1:MapType4Select:4| :weight 0 ))) (forall ((val@@21 T@U) (m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4@@5 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@42 x0@@20 x1@@14 x2@@10 x3@@5 x4@@5 val@@21) y0@@15 y1@@11 y2@@8 y3@@4 y4@@4) (MapType4Select m@@42 y0@@15 y1@@11 y2@@8 y3@@4 y4@@4))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@171 T@U) (arg1@@84 T@U) (arg2@@42 T@U) (arg3@@22 T@U) (arg4@@14 T@U) (arg5@@10 T@U) (arg6@@2 T@U) (arg7 T@U) (arg8 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@171 arg1@@84 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@171 arg1@@84 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) ))) (forall ((arg0@@172 T@U) (arg1@@85 T@U) (arg2@@43 T@U) ) (! (= (type (Handle4 arg0@@172 arg1@@85 arg2@@43)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@172 arg1@@85 arg2@@43)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (t2@@14 T@U) (t3 T@U) (t4 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) (bx1@@15 T@U) (bx2 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type t4) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@57 t1@@33 t2@@14 t3 t4 heap@@16 (Handle4 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2 bx3) (MapType4Select h@@41 heap@@16 bx0@@31 bx1@@15 bx2 bx3))) :qid |unknown.0:0| :skolemid |804| :pattern ( (Apply4 t0@@57 t1@@33 t2@@14 t3 t4 heap@@16 (Handle4 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2 bx3)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (t2@@15 T@U) (t3@@0 T@U) (t4@@0 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) (bx1@@16 T@U) (bx2@@0 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type t4@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32 bx1@@16 bx2@@0 bx3@@0))) (Requires4 t0@@58 t1@@34 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0 bx3@@0)) :qid |unknown.0:0| :skolemid |805| :pattern ( (Requires4 t0@@58 t1@@34 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0 bx3@@0)) )))
(assert (forall ((arg0@@173 T@U) (arg1@@86 T@U) (arg2@@44 T@U) (arg3@@23 T@U) (arg4@@15 T@U) (arg5@@11 T@U) (arg6@@3 T@U) (arg7@@0 T@U) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@173 arg1@@86 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@173 arg1@@86 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (t2@@16 T@U) (t3@@1 T@U) (t4@@1 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx3@@1 T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type t4@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@59) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@59 t1@@35 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59)) (U_2_bool (MapType0Select (Reads4 t0@@59 t1@@35 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59))))) :qid |unknown.0:0| :skolemid |806| :pattern ( (MapType0Select (Reads4 t0@@59 t1@@35 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1 bx3@@1) bx@@59)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (t2@@17 T@U) (t3@@2 T@U) (t4@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) (bx1@@18 T@U) (bx2@@2 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type t4@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and (and ($IsBox bx0@@34 t0@@60) ($IsBox bx1@@18 t1@@36)) ($IsBox bx2@@2 t2@@17)) ($IsBox bx3@@2 t3@@2)) ($Is f@@41 (Tclass._System.___hFunc4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2 bx3@@2) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |807| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2 bx3@@2) (Reads4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2 bx3@@2))) :qid |unknown.0:0| :skolemid |808| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads4 t0@@60 t1@@36 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2 bx3@@2)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@18 T@U) (t3@@3 T@U) (t4@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) (bx1@@19 T@U) (bx2@@3 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type t4@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and (and ($IsBox bx0@@35 t0@@61) ($IsBox bx1@@19 t1@@37)) ($IsBox bx2@@3 t2@@18)) ($IsBox bx3@@3 t3@@3)) ($Is f@@42 (Tclass._System.___hFunc4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3 bx3@@3) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |809| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3 h0@@19 f@@42 bx0@@35 bx1@@19 bx2@@3 bx3@@3) (Reads4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3 bx3@@3))) :qid |unknown.0:0| :skolemid |810| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads4 t0@@61 t1@@37 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3 bx3@@3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@19 T@U) (t3@@4 T@U) (t4@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) (bx1@@20 T@U) (bx2@@4 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type t4@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and (and ($IsBox bx0@@36 t0@@62) ($IsBox bx1@@20 t1@@38)) ($IsBox bx2@@4 t2@@19)) ($IsBox bx3@@4 t3@@4)) ($Is f@@43 (Tclass._System.___hFunc4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |811| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4) (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4)) (=> (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4) (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4)))) :qid |unknown.0:0| :skolemid |812| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires4 t0@@62 t1@@38 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4 bx3@@4)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@20 T@U) (t3@@5 T@U) (t4@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) (bx1@@21 T@U) (bx2@@5 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type t4@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and (and ($IsBox bx0@@37 t0@@63) ($IsBox bx1@@21 t1@@39)) ($IsBox bx2@@5 t2@@20)) ($IsBox bx3@@5 t3@@5)) ($Is f@@44 (Tclass._System.___hFunc4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |813| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5) (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5)) (=> (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5) (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5)))) :qid |unknown.0:0| :skolemid |814| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires4 t0@@63 t1@@39 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5 bx3@@5)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@21 T@U) (t3@@6 T@U) (t4@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) (bx1@@22 T@U) (bx2@@6 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type t4@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and (and ($IsBox bx0@@38 t0@@64) ($IsBox bx1@@22 t1@@40)) ($IsBox bx2@@6 t2@@21)) ($IsBox bx3@@6 t3@@6)) ($Is f@@45 (Tclass._System.___hFunc4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6 bx3@@6) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |815| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6 bx3@@6) (Apply4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6 bx3@@6))) :qid |unknown.0:0| :skolemid |816| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply4 t0@@64 t1@@40 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6 bx3@@6)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@22 T@U) (t3@@7 T@U) (t4@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) (bx1@@23 T@U) (bx2@@7 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type t4@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and (and ($IsBox bx0@@39 t0@@65) ($IsBox bx1@@23 t1@@41)) ($IsBox bx2@@7 t2@@22)) ($IsBox bx3@@7 t3@@7)) ($Is f@@46 (Tclass._System.___hFunc4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7 bx3@@7) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |817| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7 h0@@23 f@@46 bx0@@39 bx1@@23 bx2@@7 bx3@@7) (Apply4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7 bx3@@7))) :qid |unknown.0:0| :skolemid |818| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply4 t0@@65 t1@@41 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7 bx3@@7)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@23 T@U) (t3@@8 T@U) (t4@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) (bx1@@24 T@U) (bx2@@8 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type t4@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and (and ($IsBox bx0@@40 t0@@66) ($IsBox bx1@@24 t1@@42)) ($IsBox bx2@@8 t2@@23)) ($IsBox bx3@@8 t3@@8)) ($Is f@@47 (Tclass._System.___hFunc4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8))))) (and (=> (|Set#Equal| (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |819| :pattern ( (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads4 t0@@66 t1@@42 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8 bx3@@8)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@24 T@U) (t3@@9 T@U) (t4@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) (bx1@@25 T@U) (bx2@@9 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type t4@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and (and ($IsBox bx0@@41 t0@@67) ($IsBox bx1@@25 t1@@43)) ($IsBox bx2@@9 t2@@24)) ($IsBox bx3@@9 t3@@9)) ($Is f@@48 (Tclass._System.___hFunc4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9)))) (|Set#Equal| (Reads4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9) (|Set#Empty| BoxType)))) (and (=> (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9) (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9)) (=> (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9) (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9)))) :qid |unknown.0:0| :skolemid |820| :pattern ( (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires4 t0@@67 t1@@43 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9 bx3@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) (t2@@25 T@U) (t3@@10 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= (type t4@@10) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10)) (forall ((h@@44 T@U) (bx0@@42 T@U) (bx1@@26 T@U) (bx2@@10 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@44) (and (and (and ($IsBox bx0@@42 t0@@68) ($IsBox bx1@@26 t1@@44)) ($IsBox bx2@@10 t2@@25)) ($IsBox bx3@@10 t3@@10))) (Requires4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10 bx3@@10))) ($IsBox (Apply4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10 bx3@@10) t4@@10)) :qid |DafnyPre.521:12| :skolemid |821| :pattern ( (Apply4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10 bx3@@10)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) (bx1@@27 T@U) (bx2@@11 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (= (type bx3@@11) BoxType)) (and (and ($IsGoodHeap h@@45) (and (and (and ($IsBox bx0@@43 t0@@68) ($IsBox bx1@@27 t1@@44)) ($IsBox bx2@@11 t2@@25)) ($IsBox bx3@@11 t3@@10))) (Requires4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11 bx3@@11))) ($IsBox (Apply4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11 bx3@@11) t4@@10)) :qid |DafnyPre.521:12| :skolemid |821| :pattern ( (Apply4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11 bx3@@11)) )) ($Is f@@49 (Tclass._System.___hFunc4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10))))) :qid |unknown.0:0| :skolemid |822| :pattern ( ($Is f@@49 (Tclass._System.___hFunc4 t0@@68 t1@@44 t2@@25 t3@@10 t4@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (t2@@26 T@U) (t3@@11 T@U) (t4@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type t4@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc4 t0@@69 t1@@45 t2@@26 t3@@11 t4@@11)) (forall ((bx@@60 T@U) ) (!  (=> (and (= (type bx@@60) BoxType) ($IsBox bx@@60 u0@@2)) ($IsBox bx@@60 t0@@69)) :qid |unknown.0:0| :skolemid |823| :pattern ( ($IsBox bx@@60 u0@@2)) :pattern ( ($IsBox bx@@60 t0@@69)) ))) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u1@@1)) ($IsBox bx@@61 t1@@45)) :qid |unknown.0:0| :skolemid |824| :pattern ( ($IsBox bx@@61 u1@@1)) :pattern ( ($IsBox bx@@61 t1@@45)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u2@@0)) ($IsBox bx@@62 t2@@26)) :qid |unknown.0:0| :skolemid |825| :pattern ( ($IsBox bx@@62 u2@@0)) :pattern ( ($IsBox bx@@62 t2@@26)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u3)) ($IsBox bx@@63 t3@@11)) :qid |unknown.0:0| :skolemid |826| :pattern ( ($IsBox bx@@63 u3)) :pattern ( ($IsBox bx@@63 t3@@11)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t4@@11)) ($IsBox bx@@64 u4)) :qid |unknown.0:0| :skolemid |827| :pattern ( ($IsBox bx@@64 t4@@11)) :pattern ( ($IsBox bx@@64 u4)) )))) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) :qid |unknown.0:0| :skolemid |828| :pattern ( ($Is f@@50 (Tclass._System.___hFunc4 t0@@69 t1@@45 t2@@26 t3@@11 t4@@11)) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (t2@@27 T@U) (t3@@12 T@U) (t4@@12 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type t4@@12) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12) h@@46) (forall ((bx0@@44 T@U) (bx1@@28 T@U) (bx2@@12 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@44) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (and ($IsBox bx1@@28 t1@@46) ($IsAllocBox bx1@@28 t1@@46 h@@46))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@46))) (and ($IsBox bx3@@12 t3@@12) ($IsAllocBox bx3@@12 t3@@12 h@@46))) (Requires4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |829| :pattern ( (MapType0Select (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |830| :pattern ( (Apply4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12)) :pattern ( (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12 bx3@@12)) ))) (=> (forall ((bx0@@45 T@U) (bx1@@29 T@U) (bx2@@13 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (= (type bx0@@45) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3@@13) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (and ($IsBox bx1@@29 t1@@46) ($IsAllocBox bx1@@29 t1@@46 h@@46))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@46))) (and ($IsBox bx3@@13 t3@@12) ($IsAllocBox bx3@@13 t3@@12 h@@46))) (Requires4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |829| :pattern ( (MapType0Select (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |830| :pattern ( (Apply4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13)) :pattern ( (Reads4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13 bx3@@13)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12) h@@46)))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@70 t1@@46 t2@@27 t3@@12 t4@@12) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (t2@@28 T@U) (t3@@13 T@U) (t4@@13 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type t4@@13) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13) h@@47))) (forall ((bx0@@46 T@U) (bx1@@30 T@U) (bx2@@14 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (= (type bx0@@46) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@14) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@46 t0@@71 h@@47) ($IsAllocBox bx1@@30 t1@@47 h@@47)) ($IsAllocBox bx2@@14 t2@@28 h@@47)) ($IsAllocBox bx3@@14 t3@@13 h@@47)) (Requires4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14 bx3@@14)) ($IsAllocBox (Apply4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14 bx3@@14) t4@@13 h@@47))) :qid |unknown.0:0| :skolemid |832| :pattern ( (Apply4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14 bx3@@14)) ))) :qid |unknown.0:0| :skolemid |833| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@71 t1@@47 t2@@28 t3@@13 t4@@13) h@@47)) )))
(assert (forall ((arg0@@174 T@U) (arg1@@87 T@U) (arg2@@45 T@U) (arg3@@24 T@U) (arg4@@16 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@174 arg1@@87 arg2@@45 arg3@@24 arg4@@16)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@174 arg1@@87 arg2@@45 arg3@@24 arg4@@16)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$T3@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) Tagclass._System.___hPartialFunc4)) :qid |unknown.0:0| :skolemid |834| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@175 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@175)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@175)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$T3@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) |#$T0@@42|)) :qid |unknown.0:0| :skolemid |835| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@176 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@176)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@176)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$T3@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) |#$T1@@27|)) :qid |unknown.0:0| :skolemid |836| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@177 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@177)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@177)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$T3@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) |#$T2@@9|)) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@178)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@178)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$T3@@10| T@U) (|#$R@@58| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) )))
(assert (forall ((arg0@@179 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@179)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@179)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$T3@@11| T@U) (|#$R@@59| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) |#$R@@59|)) :qid |unknown.0:0| :skolemid |839| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$T3@@12| T@U) (|#$R@@60| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|)))) :qid |unknown.0:0| :skolemid |840| :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$T3@@13| T@U) (|#$R@@61| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|)) (forall ((|x0#0@@7| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@7| |#$T0@@48|) ($IsBox |x1#0@@3| |#$T1@@32|)) ($IsBox |x2#0| |#$T2@@13|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61| $OneHeap |f#0@@11| |x0#0@@7| |x1#0@@3| |x2#0| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |841| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|)) (forall ((|x0#0@@8| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@8| |#$T0@@48|) ($IsBox |x1#0@@4| |#$T1@@32|)) ($IsBox |x2#0@@0| |#$T2@@13|)) ($IsBox |x3#0@@0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61| $OneHeap |f#0@@11| |x0#0@@8| |x1#0@@4| |x2#0@@0| |x3#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |841| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))))) :qid |unknown.0:0| :skolemid |842| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$T3@@14| T@U) (|#$R@@62| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14)))) :qid |unknown.0:0| :skolemid |843| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14)) )))
(assert (forall ((arg0@@180 T@U) (arg1@@88 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@17 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@180 arg1@@88 arg2@@46 arg3@@25 arg4@@17)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@180 arg1@@88 arg2@@46 arg3@@25 arg4@@17)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$T3@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) Tagclass._System.___hTotalFunc4)) :qid |unknown.0:0| :skolemid |844| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@181 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@181)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@181)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$T3@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) |#$T0@@51|)) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@182 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@182)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@182)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$T3@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) |#$T1@@36|)) :qid |unknown.0:0| :skolemid |846| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) )))
(assert (forall ((arg0@@183 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@183)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@183)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$T3@@18| T@U) (|#$R@@66| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) |#$T2@@18|)) :qid |unknown.0:0| :skolemid |847| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@184)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@184)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$T3@@19| T@U) (|#$R@@67| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |848| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@185)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@185)) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$T3@@20| T@U) (|#$R@@68| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) |#$R@@68|)) :qid |unknown.0:0| :skolemid |849| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3@@21| T@U) (|#$R@@69| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@69|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|)))) :qid |unknown.0:0| :skolemid |850| :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@22| T@U) (|#$R@@70| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@70|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|)) (forall ((|x0#0@@9| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) (|x3#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (= (type |x3#0@@1|) BoxType)) (and (and (and ($IsBox |x0#0@@9| |#$T0@@57|) ($IsBox |x1#0@@5| |#$T1@@41|)) ($IsBox |x2#0@@1| |#$T2@@22|)) ($IsBox |x3#0@@1| |#$T3@@22|))) (Requires4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70| $OneHeap |f#0@@13| |x0#0@@9| |x1#0@@5| |x2#0@@1| |x3#0@@1|)) :qid |unknown.0:0| :skolemid |851| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (type |x3#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|)) (forall ((|x0#0@@10| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) (|x3#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (= (type |x3#0@@2|) BoxType)) (and (and (and ($IsBox |x0#0@@10| |#$T0@@57|) ($IsBox |x1#0@@6| |#$T1@@41|)) ($IsBox |x2#0@@2| |#$T2@@22|)) ($IsBox |x3#0@@2| |#$T3@@22|))) (Requires4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70| $OneHeap |f#0@@13| |x0#0@@10| |x1#0@@6| |x2#0@@2| |x3#0@@2|)) :qid |unknown.0:0| :skolemid |851| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (type |x3#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@23| T@U) (|#$R@@71| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@71|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15)))) :qid |unknown.0:0| :skolemid |853| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15)) )))
(assert (forall ((arg0@@186 T@U) (arg1@@89 T@U) (arg2@@47 T@U) (arg3@@26 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@186 arg1@@89 arg2@@47 arg3@@26)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@186 arg1@@89 arg2@@47 arg3@@26)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$R@@72|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$R@@72|)) )))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@187)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@187)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$R@@73|)) |#$T0@@60|)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$R@@73|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@188)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@188)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$R@@74|)) |#$T1@@45|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$R@@74|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@189)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@189)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$R@@75|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) |#$T2@@27|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@190)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@190)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) |#$R@@76|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$R@@77| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$R@@77|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|)))) :qid |unknown.0:0| :skolemid |859| :pattern ( ($IsBox bx@@67 (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@191 T@T) (arg1@@90 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@18 T@T) ) (! (= (Ctor (MapType5Type arg0@@191 arg1@@90 arg2@@48 arg3@@27 arg4@@18)) 24) :qid |ctor:MapType5Type| )) (forall ((arg0@@192 T@T) (arg1@@91 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@19 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@192 arg1@@91 arg2@@49 arg3@@28 arg4@@19)) arg0@@192) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@192 arg1@@91 arg2@@49 arg3@@28 arg4@@19)) ))) (forall ((arg0@@193 T@T) (arg1@@92 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@20 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@193 arg1@@92 arg2@@50 arg3@@29 arg4@@20)) arg1@@92) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@193 arg1@@92 arg2@@50 arg3@@29 arg4@@20)) ))) (forall ((arg0@@194 T@T) (arg1@@93 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@21 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@194 arg1@@93 arg2@@51 arg3@@30 arg4@@21)) arg2@@51) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@194 arg1@@93 arg2@@51 arg3@@30 arg4@@21)) ))) (forall ((arg0@@195 T@T) (arg1@@94 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@22 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@195 arg1@@94 arg2@@52 arg3@@31 arg4@@22)) arg3@@31) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@195 arg1@@94 arg2@@52 arg3@@31 arg4@@22)) ))) (forall ((arg0@@196 T@T) (arg1@@95 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@23 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@196 arg1@@95 arg2@@53 arg3@@32 arg4@@23)) arg4@@23) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@196 arg1@@95 arg2@@53 arg3@@32 arg4@@23)) ))) (forall ((arg0@@197 T@U) (arg1@@96 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@24 T@U) ) (! (let ((aVar4@@0 (MapType5TypeInv4 (type arg0@@197)))) (= (type (MapType5Select arg0@@197 arg1@@96 arg2@@54 arg3@@33 arg4@@24)) aVar4@@0)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@197 arg1@@96 arg2@@54 arg3@@33 arg4@@24)) ))) (forall ((arg0@@198 T@U) (arg1@@97 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@25 T@U) (arg5@@12 T@U) ) (! (let ((aVar4@@1 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@25))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@97))) (= (type (MapType5Store arg0@@198 arg1@@97 arg2@@55 arg3@@34 arg4@@25 arg5@@12)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@1))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@198 arg1@@97 arg2@@55 arg3@@34 arg4@@25 arg5@@12)) ))) (forall ((m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (val@@22 T@U) ) (! (let ((aVar4@@2 (MapType5TypeInv4 (type m@@43)))) (=> (= (type val@@22) aVar4@@2) (= (MapType5Select (MapType5Store m@@43 x0@@21 x1@@15 x2@@11 x3@@6 val@@22) x0@@21 x1@@15 x2@@11 x3@@6) val@@22))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) ) (!  (or (= x0@@22 y0@@16) (= (MapType5Select (MapType5Store m@@44 x0@@22 x1@@16 x2@@12 x3@@7 val@@23) y0@@16 y1@@12 y2@@9 y3@@5) (MapType5Select m@@44 y0@@16 y1@@12 y2@@9 y3@@5))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) ) (!  (or (= x1@@17 y1@@13) (= (MapType5Select (MapType5Store m@@45 x0@@23 x1@@17 x2@@13 x3@@8 val@@24) y0@@17 y1@@13 y2@@10 y3@@6) (MapType5Select m@@45 y0@@17 y1@@13 y2@@10 y3@@6))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@25 T@U) (m@@46 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) ) (!  (or (= x2@@14 y2@@11) (= (MapType5Select (MapType5Store m@@46 x0@@24 x1@@18 x2@@14 x3@@9 val@@25) y0@@18 y1@@14 y2@@11 y3@@7) (MapType5Select m@@46 y0@@18 y1@@14 y2@@11 y3@@7))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@26 T@U) (m@@47 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) ) (!  (or (= x3@@10 y3@@8) (= (MapType5Select (MapType5Store m@@47 x0@@25 x1@@19 x2@@15 x3@@10 val@@26) y0@@19 y1@@15 y2@@12 y3@@8) (MapType5Select m@@47 y0@@19 y1@@15 y2@@12 y3@@8))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@27 T@U) (m@@48 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@48 x0@@26 x1@@20 x2@@16 x3@@11 val@@27) y0@@20 y1@@16 y2@@13 y3@@9) (MapType5Select m@@48 y0@@20 y1@@16 y2@@13 y3@@9))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@199 T@U) (arg1@@98 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@26 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) ) (! (= (type (Apply3 arg0@@199 arg1@@98 arg2@@56 arg3@@35 arg4@@26 arg5@@13 arg6@@4 arg7@@1 arg8@@1)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@199 arg1@@98 arg2@@56 arg3@@35 arg4@@26 arg5@@13 arg6@@4 arg7@@1 arg8@@1)) ))) (forall ((arg0@@200 T@U) (arg1@@99 T@U) (arg2@@57 T@U) ) (! (= (type (Handle3 arg0@@200 arg1@@99 arg2@@57)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@200 arg1@@99 arg2@@57)) ))))
(assert (forall ((t0@@72 T@U) (t1@@48 T@U) (t2@@29 T@U) (t3@@14 T@U) (heap@@21 T@U) (h@@48 T@U) (r@@26 T@U) (rd@@11 T@U) (bx0@@47 T@U) (bx1@@31 T@U) (bx2@@15 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@48) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@48) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@47) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@15) BoxType)) (= (Apply3 t0@@72 t1@@48 t2@@29 t3@@14 heap@@21 (Handle3 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15) (MapType5Select h@@48 heap@@21 bx0@@47 bx1@@31 bx2@@15))) :qid |unknown.0:0| :skolemid |860| :pattern ( (Apply3 t0@@72 t1@@48 t2@@29 t3@@14 heap@@21 (Handle3 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15)) )))
(assert (forall ((t0@@73 T@U) (t1@@49 T@U) (t2@@30 T@U) (t3@@15 T@U) (heap@@22 T@U) (h@@49 T@U) (r@@27 T@U) (rd@@12 T@U) (bx0@@48 T@U) (bx1@@32 T@U) (bx2@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@49) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@49) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@48) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@16) BoxType)) (U_2_bool (MapType5Select r@@27 heap@@22 bx0@@48 bx1@@32 bx2@@16))) (Requires3 t0@@73 t1@@49 t2@@30 t3@@15 heap@@22 (Handle3 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16)) :qid |unknown.0:0| :skolemid |861| :pattern ( (Requires3 t0@@73 t1@@49 t2@@30 t3@@15 heap@@22 (Handle3 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16)) )))
(assert (forall ((arg0@@201 T@U) (arg1@@100 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@27 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) ) (! (= (type (Reads3 arg0@@201 arg1@@100 arg2@@58 arg3@@36 arg4@@27 arg5@@14 arg6@@5 arg7@@2 arg8@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@201 arg1@@100 arg2@@58 arg3@@36 arg4@@27 arg5@@14 arg6@@5 arg7@@2 arg8@@2)) )))
(assert (forall ((t0@@74 T@U) (t1@@50 T@U) (t2@@31 T@U) (t3@@16 T@U) (heap@@23 T@U) (h@@50 T@U) (r@@28 T@U) (rd@@13 T@U) (bx0@@49 T@U) (bx1@@33 T@U) (bx2@@17 T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@50) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@50) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@49) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx@@68) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@74 t1@@50 t2@@31 t3@@16 heap@@23 (Handle3 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17) bx@@68)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17) bx@@68))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17) bx@@68)) (U_2_bool (MapType0Select (Reads3 t0@@74 t1@@50 t2@@31 t3@@16 heap@@23 (Handle3 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17) bx@@68))))) :qid |unknown.0:0| :skolemid |862| :pattern ( (MapType0Select (Reads3 t0@@74 t1@@50 t2@@31 t3@@16 heap@@23 (Handle3 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17) bx@@68)) )))
(assert (forall ((t0@@75 T@U) (t1@@51 T@U) (t2@@32 T@U) (t3@@17 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@50 T@U) (bx1@@34 T@U) (bx2@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@51) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@18) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and ($IsBox bx0@@50 t0@@75) ($IsBox bx1@@34 t1@@51)) ($IsBox bx2@@18 t2@@32)) ($Is f@@53 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@32 t3@@17)))) (forall ((o@@78 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads3 t0@@75 t1@@51 t2@@32 t3@@17 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@24 o@@78) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@78) fld@@23)))) :qid |unknown.0:0| :skolemid |863| :no-pattern (type o@@78) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads3 t0@@75 t1@@51 t2@@32 t3@@17 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18) (Reads3 t0@@75 t1@@51 t2@@32 t3@@17 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18))) :qid |unknown.0:0| :skolemid |864| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads3 t0@@75 t1@@51 t2@@32 t3@@17 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18)) )))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@33 T@U) (t3@@18 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@51 T@U) (bx1@@35 T@U) (bx2@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@19) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and ($IsBox bx0@@51 t0@@76) ($IsBox bx1@@35 t1@@52)) ($IsBox bx2@@19 t2@@33)) ($Is f@@54 (Tclass._System.___hFunc3 t0@@76 t1@@52 t2@@33 t3@@18)))) (forall ((o@@79 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads3 t0@@76 t1@@52 t2@@33 t3@@18 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@25 o@@79) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@79) fld@@24)))) :qid |unknown.0:0| :skolemid |865| :no-pattern (type o@@79) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads3 t0@@76 t1@@52 t2@@33 t3@@18 h0@@25 f@@54 bx0@@51 bx1@@35 bx2@@19) (Reads3 t0@@76 t1@@52 t2@@33 t3@@18 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19))) :qid |unknown.0:0| :skolemid |866| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads3 t0@@76 t1@@52 t2@@33 t3@@18 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@34 T@U) (t3@@19 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@52 T@U) (bx1@@36 T@U) (bx2@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@52) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@20) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and ($IsBox bx0@@52 t0@@77) ($IsBox bx1@@36 t1@@53)) ($IsBox bx2@@20 t2@@34)) ($Is f@@55 (Tclass._System.___hFunc3 t0@@77 t1@@53 t2@@34 t3@@19)))) (forall ((o@@80 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads3 t0@@77 t1@@53 t2@@34 t3@@19 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@26 o@@80) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@80) fld@@25)))) :qid |unknown.0:0| :skolemid |867| :no-pattern (type o@@80) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20) (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20)) (=> (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20) (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20)))) :qid |unknown.0:0| :skolemid |868| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires3 t0@@77 t1@@53 t2@@34 t3@@19 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@35 T@U) (t3@@20 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@53 T@U) (bx1@@37 T@U) (bx2@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@53) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@21) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and ($IsBox bx0@@53 t0@@78) ($IsBox bx1@@37 t1@@54)) ($IsBox bx2@@21 t2@@35)) ($Is f@@56 (Tclass._System.___hFunc3 t0@@78 t1@@54 t2@@35 t3@@20)))) (forall ((o@@81 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads3 t0@@78 t1@@54 t2@@35 t3@@20 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@27 o@@81) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@81) fld@@26)))) :qid |unknown.0:0| :skolemid |869| :no-pattern (type o@@81) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21) (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21)) (=> (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21) (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21)))) :qid |unknown.0:0| :skolemid |870| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires3 t0@@78 t1@@54 t2@@35 t3@@20 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@36 T@U) (t3@@21 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@54 T@U) (bx1@@38 T@U) (bx2@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@54) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@22) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and ($IsBox bx0@@54 t0@@79) ($IsBox bx1@@38 t1@@55)) ($IsBox bx2@@22 t2@@36)) ($Is f@@57 (Tclass._System.___hFunc3 t0@@79 t1@@55 t2@@36 t3@@21)))) (forall ((o@@82 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads3 t0@@79 t1@@55 t2@@36 t3@@21 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@28 o@@82) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@82) fld@@27)))) :qid |unknown.0:0| :skolemid |871| :no-pattern (type o@@82) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply3 t0@@79 t1@@55 t2@@36 t3@@21 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22) (Apply3 t0@@79 t1@@55 t2@@36 t3@@21 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22))) :qid |unknown.0:0| :skolemid |872| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply3 t0@@79 t1@@55 t2@@36 t3@@21 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@37 T@U) (t3@@22 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@55 T@U) (bx1@@39 T@U) (bx2@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@55) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@23) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and ($IsBox bx0@@55 t0@@80) ($IsBox bx1@@39 t1@@56)) ($IsBox bx2@@23 t2@@37)) ($Is f@@58 (Tclass._System.___hFunc3 t0@@80 t1@@56 t2@@37 t3@@22)))) (forall ((o@@83 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads3 t0@@80 t1@@56 t2@@37 t3@@22 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@29 o@@83) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@83) fld@@28)))) :qid |unknown.0:0| :skolemid |873| :no-pattern (type o@@83) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply3 t0@@80 t1@@56 t2@@37 t3@@22 h0@@29 f@@58 bx0@@55 bx1@@39 bx2@@23) (Apply3 t0@@80 t1@@56 t2@@37 t3@@22 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23))) :qid |unknown.0:0| :skolemid |874| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply3 t0@@80 t1@@56 t2@@37 t3@@22 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@38 T@U) (t3@@23 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@56 T@U) (bx1@@40 T@U) (bx2@@24 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@56) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@24) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and ($IsBox bx0@@56 t0@@81) ($IsBox bx1@@40 t1@@57)) ($IsBox bx2@@24 t2@@38)) ($Is f@@59 (Tclass._System.___hFunc3 t0@@81 t1@@57 t2@@38 t3@@23))))) (and (=> (|Set#Equal| (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |875| :pattern ( (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24) ($IsGoodHeap heap@@24)) :pattern ( (Reads3 t0@@81 t1@@57 t2@@38 t3@@23 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@39 T@U) (t3@@24 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@57 T@U) (bx1@@41 T@U) (bx2@@25 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@57) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@25) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and ($IsBox bx0@@57 t0@@82) ($IsBox bx1@@41 t1@@58)) ($IsBox bx2@@25 t2@@39)) ($Is f@@60 (Tclass._System.___hFunc3 t0@@82 t1@@58 t2@@39 t3@@24)))) (|Set#Equal| (Reads3 t0@@82 t1@@58 t2@@39 t3@@24 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25) (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25)) (=> (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25) (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25)))) :qid |unknown.0:0| :skolemid |876| :pattern ( (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25) ($IsGoodHeap heap@@25)) :pattern ( (Requires3 t0@@82 t1@@58 t2@@39 t3@@24 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25)) )))
(assert (forall ((f@@61 T@U) (t0@@83 T@U) (t1@@59 T@U) (t2@@40 T@U) (t3@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@59) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (and (=> ($Is f@@61 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@40 t3@@25)) (forall ((h@@51 T@U) (bx0@@58 T@U) (bx1@@42 T@U) (bx2@@26 T@U) ) (!  (=> (and (and (and (and (= (type h@@51) (MapType0Type refType MapType1Type)) (= (type bx0@@58) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@26) BoxType)) (and (and ($IsGoodHeap h@@51) (and (and ($IsBox bx0@@58 t0@@83) ($IsBox bx1@@42 t1@@59)) ($IsBox bx2@@26 t2@@40))) (Requires3 t0@@83 t1@@59 t2@@40 t3@@25 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26))) ($IsBox (Apply3 t0@@83 t1@@59 t2@@40 t3@@25 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26) t3@@25)) :qid |DafnyPre.521:12| :skolemid |877| :pattern ( (Apply3 t0@@83 t1@@59 t2@@40 t3@@25 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26)) ))) (=> (forall ((h@@52 T@U) (bx0@@59 T@U) (bx1@@43 T@U) (bx2@@27 T@U) ) (!  (=> (and (and (and (and (= (type h@@52) (MapType0Type refType MapType1Type)) (= (type bx0@@59) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@27) BoxType)) (and (and ($IsGoodHeap h@@52) (and (and ($IsBox bx0@@59 t0@@83) ($IsBox bx1@@43 t1@@59)) ($IsBox bx2@@27 t2@@40))) (Requires3 t0@@83 t1@@59 t2@@40 t3@@25 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27))) ($IsBox (Apply3 t0@@83 t1@@59 t2@@40 t3@@25 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27) t3@@25)) :qid |DafnyPre.521:12| :skolemid |877| :pattern ( (Apply3 t0@@83 t1@@59 t2@@40 t3@@25 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27)) )) ($Is f@@61 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@40 t3@@25))))) :qid |unknown.0:0| :skolemid |878| :pattern ( ($Is f@@61 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@40 t3@@25))) )))
(assert (forall ((f@@62 T@U) (t0@@84 T@U) (t1@@60 T@U) (t2@@41 T@U) (t3@@26 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@84) TyType)) (= (type t1@@60) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc3 t0@@84 t1@@60 t2@@41 t3@@26)) (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 u0@@3)) ($IsBox bx@@69 t0@@84)) :qid |unknown.0:0| :skolemid |879| :pattern ( ($IsBox bx@@69 u0@@3)) :pattern ( ($IsBox bx@@69 t0@@84)) ))) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u1@@2)) ($IsBox bx@@70 t1@@60)) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@70 u1@@2)) :pattern ( ($IsBox bx@@70 t1@@60)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u2@@1)) ($IsBox bx@@71 t2@@41)) :qid |unknown.0:0| :skolemid |881| :pattern ( ($IsBox bx@@71 u2@@1)) :pattern ( ($IsBox bx@@71 t2@@41)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 t3@@26)) ($IsBox bx@@72 u3@@0)) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@72 t3@@26)) :pattern ( ($IsBox bx@@72 u3@@0)) )))) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) :qid |unknown.0:0| :skolemid |883| :pattern ( ($Is f@@62 (Tclass._System.___hFunc3 t0@@84 t1@@60 t2@@41 t3@@26)) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) )))
(assert (forall ((f@@63 T@U) (t0@@85 T@U) (t1@@61 T@U) (t2@@42 T@U) (t3@@27 T@U) (h@@53 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@85) TyType)) (= (type t1@@61) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@53)) (and (=> ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@42 t3@@27) h@@53) (forall ((bx0@@60 T@U) (bx1@@44 T@U) (bx2@@28 T@U) ) (!  (=> (and (and (= (type bx0@@60) BoxType) (= (type bx1@@44) BoxType)) (= (type bx2@@28) BoxType)) (=> (and (and (and (and ($IsBox bx0@@60 t0@@85) ($IsAllocBox bx0@@60 t0@@85 h@@53)) (and ($IsBox bx1@@44 t1@@61) ($IsAllocBox bx1@@44 t1@@61 h@@53))) (and ($IsBox bx2@@28 t2@@42) ($IsAllocBox bx2@@28 t2@@42 h@@53))) (Requires3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |884| :pattern ( (MapType0Select (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |885| :pattern ( (Apply3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28)) :pattern ( (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28)) ))) (=> (forall ((bx0@@61 T@U) (bx1@@45 T@U) (bx2@@29 T@U) ) (!  (=> (and (and (= (type bx0@@61) BoxType) (= (type bx1@@45) BoxType)) (= (type bx2@@29) BoxType)) (=> (and (and (and (and ($IsBox bx0@@61 t0@@85) ($IsAllocBox bx0@@61 t0@@85 h@@53)) (and ($IsBox bx1@@45 t1@@61) ($IsAllocBox bx1@@45 t1@@61 h@@53))) (and ($IsBox bx2@@29 t2@@42) ($IsAllocBox bx2@@29 t2@@42 h@@53))) (Requires3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29)) (forall ((r@@30 T@U) ) (!  (=> (= (type r@@30) refType) (=> (and (not (= r@@30 null)) (U_2_bool (MapType0Select (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29) ($Box r@@30)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@30) alloc)))) :qid |unknown.0:0| :skolemid |884| :pattern ( (MapType0Select (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29) ($Box r@@30))) )))) :qid |unknown.0:0| :skolemid |885| :pattern ( (Apply3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29)) :pattern ( (Reads3 t0@@85 t1@@61 t2@@42 t3@@27 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29)) )) ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@42 t3@@27) h@@53)))) :qid |unknown.0:0| :skolemid |886| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@42 t3@@27) h@@53)) )))
(assert (forall ((f@@64 T@U) (t0@@86 T@U) (t1@@62 T@U) (t2@@43 T@U) (t3@@28 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@86) TyType)) (= (type t1@@62) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@54) ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@86 t1@@62 t2@@43 t3@@28) h@@54))) (forall ((bx0@@62 T@U) (bx1@@46 T@U) (bx2@@30 T@U) ) (!  (=> (and (and (= (type bx0@@62) BoxType) (= (type bx1@@46) BoxType)) (= (type bx2@@30) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@62 t0@@86 h@@54) ($IsAllocBox bx1@@46 t1@@62 h@@54)) ($IsAllocBox bx2@@30 t2@@43 h@@54)) (Requires3 t0@@86 t1@@62 t2@@43 t3@@28 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30)) ($IsAllocBox (Apply3 t0@@86 t1@@62 t2@@43 t3@@28 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30) t3@@28 h@@54))) :qid |unknown.0:0| :skolemid |887| :pattern ( (Apply3 t0@@86 t1@@62 t2@@43 t3@@28 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30)) ))) :qid |unknown.0:0| :skolemid |888| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@86 t1@@62 t2@@43 t3@@28) h@@54)) )))
(assert (forall ((arg0@@202 T@U) (arg1@@101 T@U) (arg2@@59 T@U) (arg3@@37 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@202 arg1@@101 arg2@@59 arg3@@37)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@202 arg1@@101 arg2@@59 arg3@@37)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |889| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) )))
(assert (forall ((arg0@@203 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@203)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@203)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) |#$T0@@66|)) :qid |unknown.0:0| :skolemid |890| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) )))
(assert (forall ((arg0@@204 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@204)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@204)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|)) |#$T1@@51|)) :qid |unknown.0:0| :skolemid |891| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|)) )))
(assert (forall ((arg0@@205 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@205)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@205)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) |#$T2@@33|)) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) )))
(assert (forall ((arg0@@206 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@206)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@206)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$R@@82| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$R@@82|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) |#$R@@82|)) :qid |unknown.0:0| :skolemid |893| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$R@@83| T@U) (bx@@73 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$R@@83|) TyType)) (= (type bx@@73) BoxType)) ($IsBox bx@@73 (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|))) (and (= ($Box ($Unbox HandleTypeType bx@@73)) bx@@73) ($Is ($Unbox HandleTypeType bx@@73) (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|)))) :qid |unknown.0:0| :skolemid |894| :pattern ( ($IsBox bx@@73 (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|))) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$R@@84| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (and (=> ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|)) (and ($Is |f#0@@15| (Tclass._System.___hFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|)) (forall ((|x0#0@@11| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (and (and ($IsBox |x0#0@@11| |#$T0@@71|) ($IsBox |x1#0@@7| |#$T1@@55|)) ($IsBox |x2#0@@3| |#$T2@@36|))) (|Set#Equal| (Reads3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84| $OneHeap |f#0@@15| |x0#0@@11| |x1#0@@7| |x2#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |895| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) )))) (=> (and ($Is |f#0@@15| (Tclass._System.___hFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|)) (forall ((|x0#0@@12| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (and (and ($IsBox |x0#0@@12| |#$T0@@71|) ($IsBox |x1#0@@8| |#$T1@@55|)) ($IsBox |x2#0@@4| |#$T2@@36|))) (|Set#Equal| (Reads3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84| $OneHeap |f#0@@15| |x0#0@@12| |x1#0@@8| |x2#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |895| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) ))) ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|))))) :qid |unknown.0:0| :skolemid |896| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|))) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$R@@85| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$R@@85|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16)) (=> ($IsAlloc |f#0@@16| (Tclass._System.___hFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16)))) :qid |unknown.0:0| :skolemid |897| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|) $h@@16)) )))
(assert (forall ((arg0@@207 T@U) (arg1@@102 T@U) (arg2@@60 T@U) (arg3@@38 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@207 arg1@@102 arg2@@60 arg3@@38)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@207 arg1@@102 arg2@@60 arg3@@38)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |898| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)) )))
(assert (forall ((arg0@@208 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@208)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@208)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|)) |#$T0@@74|)) :qid |unknown.0:0| :skolemid |899| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|)) )))
(assert (forall ((arg0@@209 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@209)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@209)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|)) |#$T1@@59|)) :qid |unknown.0:0| :skolemid |900| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|)) )))
(assert (forall ((arg0@@210 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@210)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@210)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) |#$T2@@41|)) :qid |unknown.0:0| :skolemid |901| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) )))
(assert (forall ((arg0@@211 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@211)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@211)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |902| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$R@@91| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |903| :pattern ( ($IsBox bx@@74 (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (and (=> ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|)) (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (and (and ($IsBox |x0#0@@13| |#$T0@@79|) ($IsBox |x1#0@@9| |#$T1@@63|)) ($IsBox |x2#0@@5| |#$T2@@44|))) (Requires3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@13| |x1#0@@9| |x2#0@@5|)) :qid |unknown.0:0| :skolemid |904| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) )))) (=> (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (and (and ($IsBox |x0#0@@14| |#$T0@@79|) ($IsBox |x1#0@@10| |#$T1@@63|)) ($IsBox |x2#0@@6| |#$T2@@44|))) (Requires3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@14| |x1#0@@10| |x2#0@@6|)) :qid |unknown.0:0| :skolemid |904| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) ))) ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|))))) :qid |unknown.0:0| :skolemid |905| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17)) (=> ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17)))) :qid |unknown.0:0| :skolemid |906| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|) $h@@17)) )))
(assert  (and (forall ((arg0@@212 T@U) (arg1@@103 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@212 arg1@@103)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@212 arg1@@103)) )) (forall ((arg0@@213 T@U) ) (! (= (type (DatatypeCtorId arg0@@213)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@213)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |907| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |908| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |909| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |910| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@214 T@U) (arg1@@104 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@214 arg1@@104)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@214 arg1@@104)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) ) (!  (=> (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@81| |#$T1@@65|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.Tuple2 |#$T0@@81| |#$T1@@65|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@215)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@215)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) ) (!  (=> (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@82| |#$T1@@66|)) |#$T0@@82|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.Tuple2 |#$T0@@82| |#$T1@@66|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@216)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@216)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) ) (!  (=> (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@83| |#$T1@@67|)) |#$T1@@67|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.Tuple2 |#$T0@@83| |#$T1@@67|)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.Tuple2 |#$T0@@84| |#$T1@@68|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@75)) bx@@75) ($Is ($Unbox DatatypeTypeType bx@@75) (Tclass._System.Tuple2 |#$T0@@84| |#$T1@@68|)))) :qid |unknown.0:0| :skolemid |914| :pattern ( ($IsBox bx@@75 (Tclass._System.Tuple2 |#$T0@@84| |#$T1@@68|))) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@85| |#$T1@@69|)) (and ($IsBox |a#2#0#0| |#$T0@@85|) ($IsBox |a#2#1#0| |#$T1@@69|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@85|) ($IsBox |a#2#1#0| |#$T1@@69|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@85| |#$T1@@69|))))) :qid |unknown.0:0| :skolemid |915| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@85| |#$T1@@69|))) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@18)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@86| |#$T1@@70|) $h@@18) (and ($IsAllocBox |a#3#0#0| |#$T0@@86| $h@@18) ($IsAllocBox |a#3#1#0| |#$T1@@70| $h@@18))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@86| $h@@18) ($IsAllocBox |a#3#1#0| |#$T1@@70| $h@@18)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@86| |#$T1@@70|) $h@@18)))) :qid |unknown.0:0| :skolemid |916| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@86| |#$T1@@70|) $h@@18)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@87| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@87|) TyType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@19) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@71| T@U) ) (!  (and (= (type |#$T1@@71|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@87| |#$T1@@71|) $h@@19)) :qid |unknown.0:0| :skolemid |917| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@87| |#$T1@@71|) $h@@19)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@87| $h@@19)) :qid |unknown.0:0| :skolemid |918| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@87| $h@@19)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@72| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@72|) TyType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@20) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@88| T@U) ) (!  (and (= (type |#$T0@@88|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@88| |#$T1@@72|) $h@@20)) :qid |unknown.0:0| :skolemid |919| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@88| |#$T1@@72|) $h@@20)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@72| $h@@20)) :qid |unknown.0:0| :skolemid |920| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@72| $h@@20)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |921| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |922| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |923| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |924| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |925| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |926| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@89| |#$T1@@73|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |927| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@89| |#$T1@@73|))) )))
(assert (forall ((a@@112 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@112) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@112 b@@61) (and (= (_System.Tuple2._0 a@@112) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@112) (_System.Tuple2._1 b@@61)))) (=> (and (= (_System.Tuple2._0 a@@112) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@112) (_System.Tuple2._1 b@@61))) (|_System.Tuple2#Equal| a@@112 b@@61)))) :qid |unknown.0:0| :skolemid |928| :pattern ( (|_System.Tuple2#Equal| a@@112 b@@61)) )))
(assert (forall ((a@@113 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@113) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@113 b@@62) (= a@@113 b@@62)) (=> (= a@@113 b@@62) (|_System.Tuple2#Equal| a@@113 b@@62)))) :qid |unknown.0:0| :skolemid |929| :pattern ( (|_System.Tuple2#Equal| a@@113 b@@62)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@6)))) :qid |unknown.0:0| :skolemid |930| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |931| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@76 T@U) ) (!  (=> (and (= (type bx@@76) BoxType) ($IsBox bx@@76 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@76)) bx@@76) ($Is ($Unbox DatatypeTypeType bx@@76) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |932| :pattern ( ($IsBox bx@@76 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@21 T@U) ) (!  (=> (and (= (type $h@@21) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@21)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) :qid |DafnyPre.521:12| :skolemid |933| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |934| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |935| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@114 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@114) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@114 b@@63) true) (=> true (|_System.Tuple0#Equal| a@@114 b@@63)))) :qid |unknown.0:0| :skolemid |936| :pattern ( (|_System.Tuple0#Equal| a@@114 b@@63)) )))
(assert (forall ((a@@115 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@115) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@115 b@@64) (= a@@115 b@@64)) (=> (= a@@115 b@@64) (|_System.Tuple0#Equal| a@@115 b@@64)))) :qid |unknown.0:0| :skolemid |937| :pattern ( (|_System.Tuple0#Equal| a@@115 b@@64)) )))
(assert (forall ((arg0@@217 Int) (arg1@@105 Int) ) (! (= (type (|#JournalIntervals.JournalInterval.JournalInterval| arg0@@217 arg1@@105)) DatatypeTypeType) :qid |funType:#JournalIntervals.JournalInterval.JournalInterval| :pattern ( (|#JournalIntervals.JournalInterval.JournalInterval| arg0@@217 arg1@@105)) )))
(assert (forall ((|a#14#0#0| Int) (|a#14#1#0| Int) ) (! (= (DatatypeCtorId (|#JournalIntervals.JournalInterval.JournalInterval| |a#14#0#0| |a#14#1#0|)) |##JournalIntervals.JournalInterval.JournalInterval|) :qid |JournalI.13:13| :skolemid |938| :pattern ( (|#JournalIntervals.JournalInterval.JournalInterval| |a#14#0#0| |a#14#1#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (and (=> (JournalIntervals.JournalInterval.JournalInterval_q d@@10) (= (DatatypeCtorId d@@10) |##JournalIntervals.JournalInterval.JournalInterval|)) (=> (= (DatatypeCtorId d@@10) |##JournalIntervals.JournalInterval.JournalInterval|) (JournalIntervals.JournalInterval.JournalInterval_q d@@10)))) :qid |unknown.0:0| :skolemid |939| :pattern ( (JournalIntervals.JournalInterval.JournalInterval_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (JournalIntervals.JournalInterval.JournalInterval_q d@@11)) (exists ((|a#15#0#0| Int) (|a#15#1#0| Int) ) (! (= d@@11 (|#JournalIntervals.JournalInterval.JournalInterval| |a#15#0#0| |a#15#1#0|)) :qid |JournalI.13:13| :skolemid |940| ))) :qid |unknown.0:0| :skolemid |941| :pattern ( (JournalIntervals.JournalInterval.JournalInterval_q d@@11)) )))
(assert (= (type Tclass.JournalIntervals.JournalInterval) TyType))
(assert (= (Tag Tclass.JournalIntervals.JournalInterval) Tagclass.JournalIntervals.JournalInterval))
(assert (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 Tclass.JournalIntervals.JournalInterval)) (and (= ($Box ($Unbox DatatypeTypeType bx@@77)) bx@@77) ($Is ($Unbox DatatypeTypeType bx@@77) Tclass.JournalIntervals.JournalInterval))) :qid |unknown.0:0| :skolemid |942| :pattern ( ($IsBox bx@@77 Tclass.JournalIntervals.JournalInterval)) )))
(assert (forall ((|a#16#0#0| Int) (|a#16#1#0| Int) ) (!  (and (=> ($Is (|#JournalIntervals.JournalInterval.JournalInterval| |a#16#0#0| |a#16#1#0|) Tclass.JournalIntervals.JournalInterval) (and ($Is (int_2_U |a#16#0#0|) TInt) ($Is (int_2_U |a#16#1#0|) TInt))) (=> (and ($Is (int_2_U |a#16#0#0|) TInt) ($Is (int_2_U |a#16#1#0|) TInt)) ($Is (|#JournalIntervals.JournalInterval.JournalInterval| |a#16#0#0| |a#16#1#0|) Tclass.JournalIntervals.JournalInterval))) :qid |JournalI.13:13| :skolemid |943| :pattern ( ($Is (|#JournalIntervals.JournalInterval.JournalInterval| |a#16#0#0| |a#16#1#0|) Tclass.JournalIntervals.JournalInterval)) )))
(assert (forall ((|a#17#0#0| Int) (|a#17#1#0| Int) ($h@@22 T@U) ) (!  (=> (and (= (type $h@@22) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@22)) (and (=> ($IsAlloc (|#JournalIntervals.JournalInterval.JournalInterval| |a#17#0#0| |a#17#1#0|) Tclass.JournalIntervals.JournalInterval $h@@22) (and ($IsAlloc (int_2_U |a#17#0#0|) TInt $h@@22) ($IsAlloc (int_2_U |a#17#1#0|) TInt $h@@22))) (=> (and ($IsAlloc (int_2_U |a#17#0#0|) TInt $h@@22) ($IsAlloc (int_2_U |a#17#1#0|) TInt $h@@22)) ($IsAlloc (|#JournalIntervals.JournalInterval.JournalInterval| |a#17#0#0| |a#17#1#0|) Tclass.JournalIntervals.JournalInterval $h@@22)))) :qid |JournalI.13:13| :skolemid |944| :pattern ( ($IsAlloc (|#JournalIntervals.JournalInterval.JournalInterval| |a#17#0#0| |a#17#1#0|) Tclass.JournalIntervals.JournalInterval $h@@22)) )))
(assert (forall ((d@@12 T@U) ($h@@23 T@U) ) (!  (=> (and (and (= (type d@@12) DatatypeTypeType) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@23) (and (JournalIntervals.JournalInterval.JournalInterval_q d@@12) ($IsAlloc d@@12 Tclass.JournalIntervals.JournalInterval $h@@23)))) ($IsAlloc (int_2_U (JournalIntervals.JournalInterval.start d@@12)) TInt $h@@23)) :qid |unknown.0:0| :skolemid |945| :pattern ( ($IsAlloc (int_2_U (JournalIntervals.JournalInterval.start d@@12)) TInt $h@@23)) )))
(assert (forall ((d@@13 T@U) ($h@@24 T@U) ) (!  (=> (and (and (= (type d@@13) DatatypeTypeType) (= (type $h@@24) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@24) (and (JournalIntervals.JournalInterval.JournalInterval_q d@@13) ($IsAlloc d@@13 Tclass.JournalIntervals.JournalInterval $h@@24)))) ($IsAlloc (int_2_U (JournalIntervals.JournalInterval.len d@@13)) TInt $h@@24)) :qid |unknown.0:0| :skolemid |946| :pattern ( ($IsAlloc (int_2_U (JournalIntervals.JournalInterval.len d@@13)) TInt $h@@24)) )))
(assert (forall ((|a#18#0#0| Int) (|a#18#1#0| Int) ) (! (= (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt |a#18#0#0|) (LitInt |a#18#1#0|)) (Lit (|#JournalIntervals.JournalInterval.JournalInterval| |a#18#0#0| |a#18#1#0|))) :qid |JournalI.13:13| :skolemid |947| :pattern ( (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt |a#18#0#0|) (LitInt |a#18#1#0|))) )))
(assert (forall ((|a#19#0#0| Int) (|a#19#1#0| Int) ) (! (= (JournalIntervals.JournalInterval.start (|#JournalIntervals.JournalInterval.JournalInterval| |a#19#0#0| |a#19#1#0|)) |a#19#0#0|) :qid |JournalI.13:13| :skolemid |948| :pattern ( (|#JournalIntervals.JournalInterval.JournalInterval| |a#19#0#0| |a#19#1#0|)) )))
(assert (forall ((|a#20#0#0| Int) (|a#20#1#0| Int) ) (! (= (JournalIntervals.JournalInterval.len (|#JournalIntervals.JournalInterval.JournalInterval| |a#20#0#0| |a#20#1#0|)) |a#20#1#0|) :qid |JournalI.13:13| :skolemid |949| :pattern ( (|#JournalIntervals.JournalInterval.JournalInterval| |a#20#0#0| |a#20#1#0|)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) (|$IsA#JournalIntervals.JournalInterval| d@@14)) (JournalIntervals.JournalInterval.JournalInterval_q d@@14)) :qid |unknown.0:0| :skolemid |950| :pattern ( (|$IsA#JournalIntervals.JournalInterval| d@@14)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) ($Is d@@15 Tclass.JournalIntervals.JournalInterval)) (JournalIntervals.JournalInterval.JournalInterval_q d@@15)) :qid |unknown.0:0| :skolemid |951| :pattern ( (JournalIntervals.JournalInterval.JournalInterval_q d@@15) ($Is d@@15 Tclass.JournalIntervals.JournalInterval)) )))
(assert (forall ((a@@116 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (and (=> (|JournalIntervals.JournalInterval#Equal| a@@116 b@@65) (and (= (JournalIntervals.JournalInterval.start a@@116) (JournalIntervals.JournalInterval.start b@@65)) (= (JournalIntervals.JournalInterval.len a@@116) (JournalIntervals.JournalInterval.len b@@65)))) (=> (and (= (JournalIntervals.JournalInterval.start a@@116) (JournalIntervals.JournalInterval.start b@@65)) (= (JournalIntervals.JournalInterval.len a@@116) (JournalIntervals.JournalInterval.len b@@65))) (|JournalIntervals.JournalInterval#Equal| a@@116 b@@65)))) :qid |unknown.0:0| :skolemid |952| :pattern ( (|JournalIntervals.JournalInterval#Equal| a@@116 b@@65)) )))
(assert (forall ((a@@117 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@117) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (=> (|JournalIntervals.JournalInterval#Equal| a@@117 b@@66) (= a@@117 b@@66)) (=> (= a@@117 b@@66) (|JournalIntervals.JournalInterval#Equal| a@@117 b@@66)))) :qid |unknown.0:0| :skolemid |953| :pattern ( (|JournalIntervals.JournalInterval#Equal| a@@117 b@@66)) )))
(assert (= (type Tclass.JournalIntervals.__default) TyType))
(assert (= (Tag Tclass.JournalIntervals.__default) Tagclass.JournalIntervals.__default))
(assert (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 Tclass.JournalIntervals.__default)) (and (= ($Box ($Unbox refType bx@@78)) bx@@78) ($Is ($Unbox refType bx@@78) Tclass.JournalIntervals.__default))) :qid |unknown.0:0| :skolemid |954| :pattern ( ($IsBox bx@@78 Tclass.JournalIntervals.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.JournalIntervals.__default) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.JournalIntervals.__default))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.JournalIntervals.__default)) ($Is $o@@9 Tclass.JournalIntervals.__default)))) :qid |unknown.0:0| :skolemid |955| :pattern ( ($Is $o@@9 Tclass.JournalIntervals.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@25 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@25) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.JournalIntervals.__default $h@@25) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@25 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@25 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.JournalIntervals.__default $h@@25)))) :qid |unknown.0:0| :skolemid |956| :pattern ( ($IsAlloc $o@@10 Tclass.JournalIntervals.__default $h@@25)) )))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|indices#0| T@U) ) (!  (=> (and (= (type |indices#0|) DatatypeTypeType) (or (|JournalIntervals.__default.ValidJournalInterval#canCall| |indices#0|) (and (not (= 1 $FunctionContextHeight)) ($Is |indices#0| Tclass.JournalIntervals.JournalInterval)))) true) :qid |JournalI.15:34| :skolemid |957| :pattern ( (JournalIntervals.__default.ValidJournalInterval |indices#0|)) ))))
(assert (forall ((|indices#0@@0| T@U) ) (!  (=> (and (= (type |indices#0@@0|) DatatypeTypeType) ($Is |indices#0@@0| Tclass.JournalIntervals.JournalInterval)) (and (=> (|JournalIntervals.__default.ValidJournalInterval#requires| |indices#0@@0|) true) (=> true (|JournalIntervals.__default.ValidJournalInterval#requires| |indices#0@@0|)))) :qid |JournalI.15:34| :skolemid |958| :pattern ( (|JournalIntervals.__default.ValidJournalInterval#requires| |indices#0@@0|)) )))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|indices#0@@1| T@U) ) (!  (=> (and (= (type |indices#0@@1|) DatatypeTypeType) (or (|JournalIntervals.__default.ValidJournalInterval#canCall| |indices#0@@1|) (and (not (= 1 $FunctionContextHeight)) ($Is |indices#0@@1| Tclass.JournalIntervals.JournalInterval)))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@1|) (=> (<= (LitInt 0) (JournalIntervals.JournalInterval.start |indices#0@@1|)) (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@1|) |DiskLayout.__default.NumJournalBlocks#canCall|))) (=> (and (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@1|) |DiskLayout.__default.NumJournalBlocks#canCall|) (< (JournalIntervals.JournalInterval.start |indices#0@@1|) DiskLayout.__default.NumJournalBlocks)) (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@1|) (=> (<= (LitInt 0) (JournalIntervals.JournalInterval.len |indices#0@@1|)) (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@1|) |DiskLayout.__default.NumJournalBlocks#canCall|))))) (and (=> (JournalIntervals.__default.ValidJournalInterval |indices#0@@1|) (and (and (<= (LitInt 0) (JournalIntervals.JournalInterval.start |indices#0@@1|)) (< (JournalIntervals.JournalInterval.start |indices#0@@1|) DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.len |indices#0@@1|)) (<= (JournalIntervals.JournalInterval.len |indices#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks))))) (=> (and (and (<= (LitInt 0) (JournalIntervals.JournalInterval.start |indices#0@@1|)) (< (JournalIntervals.JournalInterval.start |indices#0@@1|) DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.len |indices#0@@1|)) (<= (JournalIntervals.JournalInterval.len |indices#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks)))) (JournalIntervals.__default.ValidJournalInterval |indices#0@@1|))))) :qid |JournalI.15:34| :skolemid |959| :pattern ( (JournalIntervals.__default.ValidJournalInterval |indices#0@@1|)) ))))
(assert  (=> (<= 1 $FunctionContextHeight) (forall ((|indices#0@@2| T@U) ) (!  (=> (and (= (type |indices#0@@2|) DatatypeTypeType) (or (|JournalIntervals.__default.ValidJournalInterval#canCall| (Lit |indices#0@@2|)) (and (not (= 1 $FunctionContextHeight)) ($Is |indices#0@@2| Tclass.JournalIntervals.JournalInterval)))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@2|)) (=> (<= (LitInt 0) (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@2|)))) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@2|)) |DiskLayout.__default.NumJournalBlocks#canCall|))) (=> (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@2|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (U_2_bool (Lit (bool_2_U (< (JournalIntervals.JournalInterval.start (Lit |indices#0@@2|)) DiskLayout.__default.NumJournalBlocks))))) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@2|)) (=> (<= (LitInt 0) (LitInt (JournalIntervals.JournalInterval.len (Lit |indices#0@@2|)))) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@2|)) |DiskLayout.__default.NumJournalBlocks#canCall|))))) (and (=> (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@2|)) (and (and (<= (LitInt 0) (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@2|)))) (< (JournalIntervals.JournalInterval.start (Lit |indices#0@@2|)) DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (LitInt (JournalIntervals.JournalInterval.len (Lit |indices#0@@2|)))) (<= (LitInt (JournalIntervals.JournalInterval.len (Lit |indices#0@@2|))) (LitInt DiskLayout.__default.NumJournalBlocks))))) (=> (and (and (<= (LitInt 0) (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@2|)))) (< (JournalIntervals.JournalInterval.start (Lit |indices#0@@2|)) DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (LitInt (JournalIntervals.JournalInterval.len (Lit |indices#0@@2|)))) (<= (LitInt (JournalIntervals.JournalInterval.len (Lit |indices#0@@2|))) (LitInt DiskLayout.__default.NumJournalBlocks)))) (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@2|)))))) :qid |JournalI.15:34| :weight 3 :skolemid |960| :pattern ( (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@2|))) ))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|indices#0@@3| T@U) ) (!  (=> (and (= (type |indices#0@@3|) DatatypeTypeType) (or (|JournalIntervals.__default.ContiguousJournalInterval#canCall| |indices#0@@3|) (and (not (= 2 $FunctionContextHeight)) ($Is |indices#0@@3| Tclass.JournalIntervals.JournalInterval)))) true) :qid |JournalI.21:39| :skolemid |963| :pattern ( (JournalIntervals.__default.ContiguousJournalInterval |indices#0@@3|)) ))))
(assert (forall ((|indices#0@@4| T@U) ) (!  (=> (and (= (type |indices#0@@4|) DatatypeTypeType) ($Is |indices#0@@4| Tclass.JournalIntervals.JournalInterval)) (and (=> (|JournalIntervals.__default.ContiguousJournalInterval#requires| |indices#0@@4|) true) (=> true (|JournalIntervals.__default.ContiguousJournalInterval#requires| |indices#0@@4|)))) :qid |JournalI.21:39| :skolemid |964| :pattern ( (|JournalIntervals.__default.ContiguousJournalInterval#requires| |indices#0@@4|)) )))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|indices#0@@5| T@U) ) (!  (=> (and (= (type |indices#0@@5|) DatatypeTypeType) (or (|JournalIntervals.__default.ContiguousJournalInterval#canCall| |indices#0@@5|) (and (not (= 2 $FunctionContextHeight)) ($Is |indices#0@@5| Tclass.JournalIntervals.JournalInterval)))) (and (and (|JournalIntervals.__default.ValidJournalInterval#canCall| |indices#0@@5|) (=> (JournalIntervals.__default.ValidJournalInterval |indices#0@@5|) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@5|) (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@5|)) (=> (<= (LitInt 0) (+ (JournalIntervals.JournalInterval.start |indices#0@@5|) (JournalIntervals.JournalInterval.len |indices#0@@5|))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@5|) (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@5|)) |DiskLayout.__default.NumJournalBlocks#canCall|))))) (and (=> (JournalIntervals.__default.ContiguousJournalInterval |indices#0@@5|) (and (JournalIntervals.__default.ValidJournalInterval |indices#0@@5|) (and (<= (LitInt 0) (+ (JournalIntervals.JournalInterval.start |indices#0@@5|) (JournalIntervals.JournalInterval.len |indices#0@@5|))) (<= (+ (JournalIntervals.JournalInterval.start |indices#0@@5|) (JournalIntervals.JournalInterval.len |indices#0@@5|)) (LitInt DiskLayout.__default.NumJournalBlocks))))) (=> (and (JournalIntervals.__default.ValidJournalInterval |indices#0@@5|) (and (<= (LitInt 0) (+ (JournalIntervals.JournalInterval.start |indices#0@@5|) (JournalIntervals.JournalInterval.len |indices#0@@5|))) (<= (+ (JournalIntervals.JournalInterval.start |indices#0@@5|) (JournalIntervals.JournalInterval.len |indices#0@@5|)) (LitInt DiskLayout.__default.NumJournalBlocks)))) (JournalIntervals.__default.ContiguousJournalInterval |indices#0@@5|))))) :qid |JournalI.21:39| :skolemid |965| :pattern ( (JournalIntervals.__default.ContiguousJournalInterval |indices#0@@5|)) ))))
(assert  (=> (<= 2 $FunctionContextHeight) (forall ((|indices#0@@6| T@U) ) (!  (=> (and (= (type |indices#0@@6|) DatatypeTypeType) (or (|JournalIntervals.__default.ContiguousJournalInterval#canCall| (Lit |indices#0@@6|)) (and (not (= 2 $FunctionContextHeight)) ($Is |indices#0@@6| Tclass.JournalIntervals.JournalInterval)))) (and (and (|JournalIntervals.__default.ValidJournalInterval#canCall| (Lit |indices#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@6|))))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@6|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@6|))) (=> (<= (LitInt 0) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@6|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@6|))))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@6|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@6|))) |DiskLayout.__default.NumJournalBlocks#canCall|))))) (and (=> (JournalIntervals.__default.ContiguousJournalInterval (Lit |indices#0@@6|)) (and (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@6|)) (and (<= (LitInt 0) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@6|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@6|))))) (<= (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@6|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@6|)))) (LitInt DiskLayout.__default.NumJournalBlocks))))) (=> (and (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@6|)) (and (<= (LitInt 0) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@6|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@6|))))) (<= (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@6|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@6|)))) (LitInt DiskLayout.__default.NumJournalBlocks)))) (JournalIntervals.__default.ContiguousJournalInterval (Lit |indices#0@@6|)))))) :qid |JournalI.21:39| :weight 3 :skolemid |966| :pattern ( (JournalIntervals.__default.ContiguousJournalInterval (Lit |indices#0@@6|))) ))))
(assert (= (type Tclass.JournalRanges.JournalBlock) TyType))
(assert (= (Tag Tclass.JournalRanges.JournalBlock) Tagclass.JournalRanges.JournalBlock))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass.Options.Option arg0@@218)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@218)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |969| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@219)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@219)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |970| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@79 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@79) BoxType)) ($IsBox bx@@79 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@79)) bx@@79) ($Is ($Unbox DatatypeTypeType bx@@79) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |971| :pattern ( ($IsBox bx@@79 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((|journal#0| T@U) ) (!  (=> (and (= (type |journal#0|) (SeqType BoxType)) (or (|JournalIntervals.__default.ValidJournal#canCall| |journal#0|) (and (not (= 5 $FunctionContextHeight)) ($Is |journal#0| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))))) true) :qid |JournalI.27:26| :skolemid |972| :pattern ( (JournalIntervals.__default.ValidJournal |journal#0|)) ))))
(assert (forall ((|journal#0@@0| T@U) ) (!  (=> (and (= (type |journal#0@@0|) (SeqType BoxType)) ($Is |journal#0@@0| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))) (and (=> (|JournalIntervals.__default.ValidJournal#requires| |journal#0@@0|) true) (=> true (|JournalIntervals.__default.ValidJournal#requires| |journal#0@@0|)))) :qid |JournalI.27:26| :skolemid |973| :pattern ( (|JournalIntervals.__default.ValidJournal#requires| |journal#0@@0|)) )))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((|journal#0@@1| T@U) ) (!  (=> (and (= (type |journal#0@@1|) (SeqType BoxType)) (or (|JournalIntervals.__default.ValidJournal#canCall| |journal#0@@1|) (and (not (= 5 $FunctionContextHeight)) ($Is |journal#0@@1| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (and (=> (JournalIntervals.__default.ValidJournal |journal#0@@1|) (= (|Seq#Length| |journal#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks))) (=> (= (|Seq#Length| |journal#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks)) (JournalIntervals.__default.ValidJournal |journal#0@@1|))))) :qid |JournalI.27:26| :skolemid |974| :pattern ( (JournalIntervals.__default.ValidJournal |journal#0@@1|)) ))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((|journal#0@@2| T@U) ) (!  (=> (and (= (type |journal#0@@2|) (SeqType BoxType)) (or (|JournalIntervals.__default.ValidJournal#canCall| (Lit |journal#0@@2|)) (and (not (= 5 $FunctionContextHeight)) ($Is |journal#0@@2| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (and (=> (JournalIntervals.__default.ValidJournal (Lit |journal#0@@2|)) (= (|Seq#Length| (Lit |journal#0@@2|)) (LitInt DiskLayout.__default.NumJournalBlocks))) (=> (= (|Seq#Length| (Lit |journal#0@@2|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (JournalIntervals.__default.ValidJournal (Lit |journal#0@@2|)))))) :qid |JournalI.27:26| :weight 3 :skolemid |975| :pattern ( (JournalIntervals.__default.ValidJournal (Lit |journal#0@@2|))) ))))
(assert (forall ((arg0@@220 T@U) (arg1@@106 T@U) (arg2@@61 T@U) (arg3@@39 Int) ) (! (= (type (JournalIntervals.__default.CyclicSpliceValue arg0@@220 arg1@@106 arg2@@61 arg3@@39)) DatatypeTypeType) :qid |funType:JournalIntervals.__default.CyclicSpliceValue| :pattern ( (JournalIntervals.__default.CyclicSpliceValue arg0@@220 arg1@@106 arg2@@61 arg3@@39)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((|journal#0@@3| T@U) (|indices#0@@7| T@U) (|newEntries#0| T@U) (|i#0| Int) ) (!  (=> (and (and (and (= (type |journal#0@@3|) (SeqType BoxType)) (= (type |indices#0@@7|) DatatypeTypeType)) (= (type |newEntries#0|) (SeqType BoxType))) (or (|JournalIntervals.__default.CyclicSpliceValue#canCall| |journal#0@@3| |indices#0@@7| |newEntries#0| |i#0|) (and (not (= 6 $FunctionContextHeight)) (and (and (and ($Is |journal#0@@3| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |indices#0@@7| Tclass.JournalIntervals.JournalInterval)) ($Is |newEntries#0| (TSeq Tclass.JournalRanges.JournalBlock))) (and (and (and (JournalIntervals.__default.ValidJournal |journal#0@@3|) (JournalIntervals.__default.ValidJournalInterval |indices#0@@7|)) (= (JournalIntervals.JournalInterval.len |indices#0@@7|) (|Seq#Length| |newEntries#0|))) (and (<= (LitInt 0) |i#0|) (< |i#0| DiskLayout.__default.NumJournalBlocks))))))) ($Is (JournalIntervals.__default.CyclicSpliceValue |journal#0@@3| |indices#0@@7| |newEntries#0| |i#0|) (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) :qid |JournalI.33:5| :skolemid |977| :pattern ( (JournalIntervals.__default.CyclicSpliceValue |journal#0@@3| |indices#0@@7| |newEntries#0| |i#0|)) ))))
(assert (forall ((|journal#0@@4| T@U) (|indices#0@@8| T@U) (|newEntries#0@@0| T@U) (|i#0@@0| Int) ) (!  (=> (and (and (and (= (type |journal#0@@4|) (SeqType BoxType)) (= (type |indices#0@@8|) DatatypeTypeType)) (= (type |newEntries#0@@0|) (SeqType BoxType))) (and (and ($Is |journal#0@@4| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |indices#0@@8| Tclass.JournalIntervals.JournalInterval)) ($Is |newEntries#0@@0| (TSeq Tclass.JournalRanges.JournalBlock)))) (and (=> (|JournalIntervals.__default.CyclicSpliceValue#requires| |journal#0@@4| |indices#0@@8| |newEntries#0@@0| |i#0@@0|) (and (and (and (JournalIntervals.__default.ValidJournal |journal#0@@4|) (JournalIntervals.__default.ValidJournalInterval |indices#0@@8|)) (= (JournalIntervals.JournalInterval.len |indices#0@@8|) (|Seq#Length| |newEntries#0@@0|))) (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| DiskLayout.__default.NumJournalBlocks)))) (=> (and (and (and (JournalIntervals.__default.ValidJournal |journal#0@@4|) (JournalIntervals.__default.ValidJournalInterval |indices#0@@8|)) (= (JournalIntervals.JournalInterval.len |indices#0@@8|) (|Seq#Length| |newEntries#0@@0|))) (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| DiskLayout.__default.NumJournalBlocks))) (|JournalIntervals.__default.CyclicSpliceValue#requires| |journal#0@@4| |indices#0@@8| |newEntries#0@@0| |i#0@@0|)))) :qid |JournalI.33:5| :skolemid |978| :pattern ( (|JournalIntervals.__default.CyclicSpliceValue#requires| |journal#0@@4| |indices#0@@8| |newEntries#0@@0| |i#0@@0|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@221)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@221)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((|journal#0@@5| T@U) (|indices#0@@9| T@U) (|newEntries#0@@1| T@U) (|i#0@@1| Int) ) (!  (=> (and (and (and (= (type |journal#0@@5|) (SeqType BoxType)) (= (type |indices#0@@9|) DatatypeTypeType)) (= (type |newEntries#0@@1|) (SeqType BoxType))) (or (|JournalIntervals.__default.CyclicSpliceValue#canCall| |journal#0@@5| |indices#0@@9| |newEntries#0@@1| |i#0@@1|) (and (not (= 6 $FunctionContextHeight)) (and (and (and ($Is |journal#0@@5| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |indices#0@@9| Tclass.JournalIntervals.JournalInterval)) ($Is |newEntries#0@@1| (TSeq Tclass.JournalRanges.JournalBlock))) (and (and (and (JournalIntervals.__default.ValidJournal |journal#0@@5|) (JournalIntervals.__default.ValidJournalInterval |indices#0@@9|)) (= (JournalIntervals.JournalInterval.len |indices#0@@9|) (|Seq#Length| |newEntries#0@@1|))) (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| DiskLayout.__default.NumJournalBlocks))))))) (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@9|) (=> (<= (JournalIntervals.JournalInterval.start |indices#0@@9|) |i#0@@1|) (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@9|) (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@9|)))) (=> (and (<= (JournalIntervals.JournalInterval.start |indices#0@@9|) |i#0@@1|) (< |i#0@@1| (+ (JournalIntervals.JournalInterval.start |indices#0@@9|) (JournalIntervals.JournalInterval.len |indices#0@@9|)))) (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@9|))) (=> (not (and (<= (JournalIntervals.JournalInterval.start |indices#0@@9|) |i#0@@1|) (< |i#0@@1| (+ (JournalIntervals.JournalInterval.start |indices#0@@9|) (JournalIntervals.JournalInterval.len |indices#0@@9|))))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@9|) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (<= (JournalIntervals.JournalInterval.start |indices#0@@9|) (+ |i#0@@1| DiskLayout.__default.NumJournalBlocks)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@9|) (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@9|))))) (=> (and (<= (JournalIntervals.JournalInterval.start |indices#0@@9|) (+ |i#0@@1| DiskLayout.__default.NumJournalBlocks)) (< (+ |i#0@@1| DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start |indices#0@@9|) (JournalIntervals.JournalInterval.len |indices#0@@9|)))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@9|)))))) (= (JournalIntervals.__default.CyclicSpliceValue |journal#0@@5| |indices#0@@9| |newEntries#0@@1| |i#0@@1|) (ite  (and (<= (JournalIntervals.JournalInterval.start |indices#0@@9|) |i#0@@1|) (< |i#0@@1| (+ (JournalIntervals.JournalInterval.start |indices#0@@9|) (JournalIntervals.JournalInterval.len |indices#0@@9|)))) (|#Options.Option.Some| (|Seq#Index| |newEntries#0@@1| (- |i#0@@1| (JournalIntervals.JournalInterval.start |indices#0@@9|)))) (ite  (and (<= (JournalIntervals.JournalInterval.start |indices#0@@9|) (+ |i#0@@1| DiskLayout.__default.NumJournalBlocks)) (< (+ |i#0@@1| DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start |indices#0@@9|) (JournalIntervals.JournalInterval.len |indices#0@@9|)))) (|#Options.Option.Some| (|Seq#Index| |newEntries#0@@1| (- (+ |i#0@@1| DiskLayout.__default.NumJournalBlocks) (JournalIntervals.JournalInterval.start |indices#0@@9|)))) ($Unbox DatatypeTypeType (|Seq#Index| |journal#0@@5| |i#0@@1|))))))) :qid |JournalI.33:5| :skolemid |979| :pattern ( (JournalIntervals.__default.CyclicSpliceValue |journal#0@@5| |indices#0@@9| |newEntries#0@@1| |i#0@@1|)) ))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((|journal#0@@6| T@U) (|indices#0@@10| T@U) (|newEntries#0@@2| T@U) (|i#0@@2| Int) ) (!  (=> (and (and (and (= (type |journal#0@@6|) (SeqType BoxType)) (= (type |indices#0@@10|) DatatypeTypeType)) (= (type |newEntries#0@@2|) (SeqType BoxType))) (or (|JournalIntervals.__default.CyclicSpliceValue#canCall| (Lit |journal#0@@6|) (Lit |indices#0@@10|) (Lit |newEntries#0@@2|) (LitInt |i#0@@2|)) (and (not (= 6 $FunctionContextHeight)) (and (and (and ($Is |journal#0@@6| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |indices#0@@10| Tclass.JournalIntervals.JournalInterval)) ($Is |newEntries#0@@2| (TSeq Tclass.JournalRanges.JournalBlock))) (and (and (and (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournal (Lit |journal#0@@6|))))) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@10|)))))) (= (LitInt (JournalIntervals.JournalInterval.len (Lit |indices#0@@10|))) (|Seq#Length| (Lit |newEntries#0@@2|)))) (and (<= (LitInt 0) (LitInt |i#0@@2|)) (< |i#0@@2| DiskLayout.__default.NumJournalBlocks))))))) (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@10|)) (=> (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|))) (LitInt |i#0@@2|)) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@10|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@10|))))) (=> (and (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|))) (LitInt |i#0@@2|)) (< |i#0@@2| (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@10|))))) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@10|)))) (=> (not (and (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|))) (LitInt |i#0@@2|)) (< |i#0@@2| (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@10|)))))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@10|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|))) (LitInt (+ |i#0@@2| DiskLayout.__default.NumJournalBlocks))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@10|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@10|)))))) (=> (and (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|))) (LitInt (+ |i#0@@2| DiskLayout.__default.NumJournalBlocks))) (< (+ |i#0@@2| DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@10|))))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@10|))))))) (= (JournalIntervals.__default.CyclicSpliceValue (Lit |journal#0@@6|) (Lit |indices#0@@10|) (Lit |newEntries#0@@2|) (LitInt |i#0@@2|)) (ite  (and (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|))) (LitInt |i#0@@2|)) (< |i#0@@2| (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@10|))))) (|#Options.Option.Some| (|Seq#Index| (Lit |newEntries#0@@2|) (LitInt (- |i#0@@2| (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|)))))) (ite  (and (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|))) (LitInt (+ |i#0@@2| DiskLayout.__default.NumJournalBlocks))) (< (+ |i#0@@2| DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@10|))))) (|#Options.Option.Some| (|Seq#Index| (Lit |newEntries#0@@2|) (LitInt (- (+ |i#0@@2| DiskLayout.__default.NumJournalBlocks) (JournalIntervals.JournalInterval.start (Lit |indices#0@@10|)))))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |journal#0@@6|) (LitInt |i#0@@2|)))))))) :qid |JournalI.33:5| :weight 3 :skolemid |980| :pattern ( (JournalIntervals.__default.CyclicSpliceValue (Lit |journal#0@@6|) (Lit |indices#0@@10|) (Lit |newEntries#0@@2|) (LitInt |i#0@@2|))) ))))
(assert (forall (($ly T@U) (|journal#0@@7| T@U) (|journal'#0| T@U) (|indices#0@@11| T@U) (|newEntries#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type $ly) LayerTypeType) (= (type |journal#0@@7|) (SeqType BoxType))) (= (type |journal'#0|) (SeqType BoxType))) (= (type |indices#0@@11|) DatatypeTypeType)) (= (type |newEntries#0@@3|) (SeqType BoxType))) (and (=> (JournalIntervals.__default.JournalUpdate ($LS $ly) |journal#0@@7| |journal'#0| |indices#0@@11| |newEntries#0@@3|) (JournalIntervals.__default.JournalUpdate $ly |journal#0@@7| |journal'#0| |indices#0@@11| |newEntries#0@@3|)) (=> (JournalIntervals.__default.JournalUpdate $ly |journal#0@@7| |journal'#0| |indices#0@@11| |newEntries#0@@3|) (JournalIntervals.__default.JournalUpdate ($LS $ly) |journal#0@@7| |journal'#0| |indices#0@@11| |newEntries#0@@3|)))) :qid |JournalI.51:23| :skolemid |987| :pattern ( (JournalIntervals.__default.JournalUpdate ($LS $ly) |journal#0@@7| |journal'#0| |indices#0@@11| |newEntries#0@@3|)) )))
(assert  (and (forall ((arg0@@222 T@U) ) (! (= (type (AsFuelBottom arg0@@222)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@222)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|journal#0@@8| T@U) (|journal'#0@@0| T@U) (|indices#0@@12| T@U) (|newEntries#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@0) LayerTypeType) (= (type |journal#0@@8|) (SeqType BoxType))) (= (type |journal'#0@@0|) (SeqType BoxType))) (= (type |indices#0@@12|) DatatypeTypeType)) (= (type |newEntries#0@@4|) (SeqType BoxType))) (and (=> (JournalIntervals.__default.JournalUpdate $ly@@0 |journal#0@@8| |journal'#0@@0| |indices#0@@12| |newEntries#0@@4|) (JournalIntervals.__default.JournalUpdate $LZ |journal#0@@8| |journal'#0@@0| |indices#0@@12| |newEntries#0@@4|)) (=> (JournalIntervals.__default.JournalUpdate $LZ |journal#0@@8| |journal'#0@@0| |indices#0@@12| |newEntries#0@@4|) (JournalIntervals.__default.JournalUpdate $ly@@0 |journal#0@@8| |journal'#0@@0| |indices#0@@12| |newEntries#0@@4|)))) :qid |JournalI.51:23| :skolemid |988| :pattern ( (JournalIntervals.__default.JournalUpdate (AsFuelBottom $ly@@0) |journal#0@@8| |journal'#0@@0| |indices#0@@12| |newEntries#0@@4|)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($ly@@1 T@U) (|journal#0@@9| T@U) (|journal'#0@@1| T@U) (|indices#0@@13| T@U) (|newEntries#0@@5| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@1) LayerTypeType) (= (type |journal#0@@9|) (SeqType BoxType))) (= (type |journal'#0@@1|) (SeqType BoxType))) (= (type |indices#0@@13|) DatatypeTypeType)) (= (type |newEntries#0@@5|) (SeqType BoxType))) (or (|JournalIntervals.__default.JournalUpdate#canCall| |journal#0@@9| |journal'#0@@1| |indices#0@@13| |newEntries#0@@5|) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($Is |journal#0@@9| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |journal'#0@@1| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))) ($Is |indices#0@@13| Tclass.JournalIntervals.JournalInterval)) ($Is |newEntries#0@@5| (TSeq Tclass.JournalRanges.JournalBlock)))))) (JournalIntervals.__default.JournalUpdate $ly@@1 |journal#0@@9| |journal'#0@@1| |indices#0@@13| |newEntries#0@@5|)) (and (and (and (JournalIntervals.__default.ValidJournal |journal#0@@9|) (JournalIntervals.__default.ValidJournal |journal'#0@@1|)) (JournalIntervals.__default.ValidJournalInterval |indices#0@@13|)) (= (JournalIntervals.JournalInterval.len |indices#0@@13|) (|Seq#Length| |newEntries#0@@5|)))) :qid |JournalI.51:23| :skolemid |989| :pattern ( (JournalIntervals.__default.JournalUpdate $ly@@1 |journal#0@@9| |journal'#0@@1| |indices#0@@13| |newEntries#0@@5|)) ))))
(assert (forall (($ly@@2 T@U) (|journal#0@@10| T@U) (|journal'#0@@2| T@U) (|indices#0@@14| T@U) (|newEntries#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@2) LayerTypeType) (= (type |journal#0@@10|) (SeqType BoxType))) (= (type |journal'#0@@2|) (SeqType BoxType))) (= (type |indices#0@@14|) DatatypeTypeType)) (= (type |newEntries#0@@6|) (SeqType BoxType))) (and (and (and ($Is |journal#0@@10| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |journal'#0@@2| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))) ($Is |indices#0@@14| Tclass.JournalIntervals.JournalInterval)) ($Is |newEntries#0@@6| (TSeq Tclass.JournalRanges.JournalBlock)))) (and (=> (|JournalIntervals.__default.JournalUpdate#requires| $ly@@2 |journal#0@@10| |journal'#0@@2| |indices#0@@14| |newEntries#0@@6|) true) (=> true (|JournalIntervals.__default.JournalUpdate#requires| $ly@@2 |journal#0@@10| |journal'#0@@2| |indices#0@@14| |newEntries#0@@6|)))) :qid |JournalI.51:23| :skolemid |990| :pattern ( (|JournalIntervals.__default.JournalUpdate#requires| $ly@@2 |journal#0@@10| |journal'#0@@2| |indices#0@@14| |newEntries#0@@6|)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($ly@@3 T@U) (|journal#0@@11| T@U) (|journal'#0@@3| T@U) (|indices#0@@15| T@U) (|newEntries#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@3) LayerTypeType) (= (type |journal#0@@11|) (SeqType BoxType))) (= (type |journal'#0@@3|) (SeqType BoxType))) (= (type |indices#0@@15|) DatatypeTypeType)) (= (type |newEntries#0@@7|) (SeqType BoxType))) (or (|JournalIntervals.__default.JournalUpdate#canCall| |journal#0@@11| |journal'#0@@3| |indices#0@@15| |newEntries#0@@7|) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($Is |journal#0@@11| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |journal'#0@@3| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))) ($Is |indices#0@@15| Tclass.JournalIntervals.JournalInterval)) ($Is |newEntries#0@@7| (TSeq Tclass.JournalRanges.JournalBlock)))))) (and (and (and (and (and (|JournalIntervals.__default.ValidJournal#canCall| |journal#0@@11|) (=> (JournalIntervals.__default.ValidJournal |journal#0@@11|) (|JournalIntervals.__default.ValidJournal#canCall| |journal'#0@@3|))) (=> (and (|JournalIntervals.__default.ValidJournal#canCall| |journal'#0@@3|) (JournalIntervals.__default.ValidJournal |journal'#0@@3|)) (|JournalIntervals.__default.ValidJournalInterval#canCall| |indices#0@@15|))) (=> (and (|JournalIntervals.__default.ValidJournalInterval#canCall| |indices#0@@15|) (JournalIntervals.__default.ValidJournalInterval |indices#0@@15|)) (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@15|))) (=> (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@15|) (= (JournalIntervals.JournalInterval.len |indices#0@@15|) (|Seq#Length| |newEntries#0@@7|))) (forall ((|i#0@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@3|) (< |i#0@@3| (|Seq#Length| |journal#0@@11|))) (and (and (|$IsA#Options.Option| ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@3| |i#0@@3|))) (|$IsA#Options.Option| (JournalIntervals.__default.CyclicSpliceValue |journal#0@@11| |indices#0@@15| |newEntries#0@@7| |i#0@@3|))) (|JournalIntervals.__default.CyclicSpliceValue#canCall| |journal#0@@11| |indices#0@@15| |newEntries#0@@7| |i#0@@3|))) :qid |JournalI.67:16| :skolemid |991| :pattern ( (JournalIntervals.__default.CyclicSpliceValue |journal#0@@11| |indices#0@@15| |newEntries#0@@7| |i#0@@3|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@3| |i#0@@3|))) )))) (and (=> (JournalIntervals.__default.JournalUpdate ($LS $ly@@3) |journal#0@@11| |journal'#0@@3| |indices#0@@15| |newEntries#0@@7|) (and (and (and (and (JournalIntervals.__default.ValidJournal |journal#0@@11|) (JournalIntervals.__default.ValidJournal |journal'#0@@3|)) (JournalIntervals.__default.ValidJournalInterval |indices#0@@15|)) (= (JournalIntervals.JournalInterval.len |indices#0@@15|) (|Seq#Length| |newEntries#0@@7|))) (forall ((|i#0@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@4|) (< |i#0@@4| (|Seq#Length| |journal#0@@11|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@3| |i#0@@4|)) (JournalIntervals.__default.CyclicSpliceValue |journal#0@@11| |indices#0@@15| |newEntries#0@@7| |i#0@@4|))) :qid |JournalI.67:16| :skolemid |992| :pattern ( (JournalIntervals.__default.CyclicSpliceValue |journal#0@@11| |indices#0@@15| |newEntries#0@@7| |i#0@@4|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@3| |i#0@@4|))) )))) (=> (and (and (and (and (JournalIntervals.__default.ValidJournal |journal#0@@11|) (JournalIntervals.__default.ValidJournal |journal'#0@@3|)) (JournalIntervals.__default.ValidJournalInterval |indices#0@@15|)) (= (JournalIntervals.JournalInterval.len |indices#0@@15|) (|Seq#Length| |newEntries#0@@7|))) (forall ((|i#0@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@5|) (< |i#0@@5| (|Seq#Length| |journal#0@@11|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@3| |i#0@@5|)) (JournalIntervals.__default.CyclicSpliceValue |journal#0@@11| |indices#0@@15| |newEntries#0@@7| |i#0@@5|))) :qid |JournalI.67:16| :skolemid |992| :pattern ( (JournalIntervals.__default.CyclicSpliceValue |journal#0@@11| |indices#0@@15| |newEntries#0@@7| |i#0@@5|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@3| |i#0@@5|))) ))) (JournalIntervals.__default.JournalUpdate ($LS $ly@@3) |journal#0@@11| |journal'#0@@3| |indices#0@@15| |newEntries#0@@7|))))) :qid |JournalI.51:23| :skolemid |993| :pattern ( (JournalIntervals.__default.JournalUpdate ($LS $ly@@3) |journal#0@@11| |journal'#0@@3| |indices#0@@15| |newEntries#0@@7|)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall (($ly@@4 T@U) (|journal#0@@12| T@U) (|journal'#0@@4| T@U) (|indices#0@@16| T@U) (|newEntries#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@4) LayerTypeType) (= (type |journal#0@@12|) (SeqType BoxType))) (= (type |journal'#0@@4|) (SeqType BoxType))) (= (type |indices#0@@16|) DatatypeTypeType)) (= (type |newEntries#0@@8|) (SeqType BoxType))) (or (|JournalIntervals.__default.JournalUpdate#canCall| (Lit |journal#0@@12|) (Lit |journal'#0@@4|) (Lit |indices#0@@16|) (Lit |newEntries#0@@8|)) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($Is |journal#0@@12| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |journal'#0@@4| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))) ($Is |indices#0@@16| Tclass.JournalIntervals.JournalInterval)) ($Is |newEntries#0@@8| (TSeq Tclass.JournalRanges.JournalBlock)))))) (and (and (and (and (and (|JournalIntervals.__default.ValidJournal#canCall| (Lit |journal#0@@12|)) (=> (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournal (Lit |journal#0@@12|))))) (|JournalIntervals.__default.ValidJournal#canCall| (Lit |journal'#0@@4|)))) (=> (and (|JournalIntervals.__default.ValidJournal#canCall| (Lit |journal'#0@@4|)) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournal (Lit |journal'#0@@4|)))))) (|JournalIntervals.__default.ValidJournalInterval#canCall| (Lit |indices#0@@16|)))) (=> (and (|JournalIntervals.__default.ValidJournalInterval#canCall| (Lit |indices#0@@16|)) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@16|)))))) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@16|)))) (=> (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@16|)) (= (LitInt (JournalIntervals.JournalInterval.len (Lit |indices#0@@16|))) (|Seq#Length| (Lit |newEntries#0@@8|)))) (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit |journal#0@@12|)))) (and (and (|$IsA#Options.Option| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |journal'#0@@4|) |i#1|))) (|$IsA#Options.Option| (JournalIntervals.__default.CyclicSpliceValue (Lit |journal#0@@12|) (Lit |indices#0@@16|) (Lit |newEntries#0@@8|) |i#1|))) (|JournalIntervals.__default.CyclicSpliceValue#canCall| (Lit |journal#0@@12|) (Lit |indices#0@@16|) (Lit |newEntries#0@@8|) |i#1|))) :qid |JournalI.67:16| :skolemid |994| :pattern ( (JournalIntervals.__default.CyclicSpliceValue |journal#0@@12| |indices#0@@16| |newEntries#0@@8| |i#1|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@4| |i#1|))) )))) (and (=> (JournalIntervals.__default.JournalUpdate ($LS $ly@@4) (Lit |journal#0@@12|) (Lit |journal'#0@@4|) (Lit |indices#0@@16|) (Lit |newEntries#0@@8|)) (and (and (and (and (JournalIntervals.__default.ValidJournal (Lit |journal#0@@12|)) (JournalIntervals.__default.ValidJournal (Lit |journal'#0@@4|))) (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@16|))) (= (LitInt (JournalIntervals.JournalInterval.len (Lit |indices#0@@16|))) (|Seq#Length| (Lit |newEntries#0@@8|)))) (forall ((|i#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| (Lit |journal#0@@12|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |journal'#0@@4|) |i#1@@0|)) (JournalIntervals.__default.CyclicSpliceValue (Lit |journal#0@@12|) (Lit |indices#0@@16|) (Lit |newEntries#0@@8|) |i#1@@0|))) :qid |JournalI.67:16| :skolemid |995| :pattern ( (JournalIntervals.__default.CyclicSpliceValue |journal#0@@12| |indices#0@@16| |newEntries#0@@8| |i#1@@0|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@4| |i#1@@0|))) )))) (=> (and (and (and (and (JournalIntervals.__default.ValidJournal (Lit |journal#0@@12|)) (JournalIntervals.__default.ValidJournal (Lit |journal'#0@@4|))) (JournalIntervals.__default.ValidJournalInterval (Lit |indices#0@@16|))) (= (LitInt (JournalIntervals.JournalInterval.len (Lit |indices#0@@16|))) (|Seq#Length| (Lit |newEntries#0@@8|)))) (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| (Lit |journal#0@@12|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |journal'#0@@4|) |i#1@@1|)) (JournalIntervals.__default.CyclicSpliceValue (Lit |journal#0@@12|) (Lit |indices#0@@16|) (Lit |newEntries#0@@8|) |i#1@@1|))) :qid |JournalI.67:16| :skolemid |995| :pattern ( (JournalIntervals.__default.CyclicSpliceValue |journal#0@@12| |indices#0@@16| |newEntries#0@@8| |i#1@@1|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@4| |i#1@@1|))) ))) (JournalIntervals.__default.JournalUpdate ($LS $ly@@4) (Lit |journal#0@@12|) (Lit |journal'#0@@4|) (Lit |indices#0@@16|) (Lit |newEntries#0@@8|)))))) :qid |JournalI.51:23| :weight 3 :skolemid |996| :pattern ( (JournalIntervals.__default.JournalUpdate ($LS $ly@@4) (Lit |journal#0@@12|) (Lit |journal'#0@@4|) (Lit |indices#0@@16|) (Lit |newEntries#0@@8|))) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|i#0@@6| Int) (|indices#0@@17| T@U) ) (!  (=> (and (= (type |indices#0@@17|) DatatypeTypeType) (or (|JournalIntervals.__default.InCyclicRange#canCall| |i#0@@6| |indices#0@@17|) (and (not (= 8 $FunctionContextHeight)) ($Is |indices#0@@17| Tclass.JournalIntervals.JournalInterval)))) true) :qid |JournalI.71:27| :skolemid |1003| :pattern ( (JournalIntervals.__default.InCyclicRange |i#0@@6| |indices#0@@17|)) ))))
(assert (forall ((|i#0@@7| Int) (|indices#0@@18| T@U) ) (!  (=> (and (= (type |indices#0@@18|) DatatypeTypeType) ($Is |indices#0@@18| Tclass.JournalIntervals.JournalInterval)) (and (=> (|JournalIntervals.__default.InCyclicRange#requires| |i#0@@7| |indices#0@@18|) true) (=> true (|JournalIntervals.__default.InCyclicRange#requires| |i#0@@7| |indices#0@@18|)))) :qid |JournalI.71:27| :skolemid |1004| :pattern ( (|JournalIntervals.__default.InCyclicRange#requires| |i#0@@7| |indices#0@@18|)) )))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|i#0@@8| Int) (|indices#0@@19| T@U) ) (!  (=> (and (= (type |indices#0@@19|) DatatypeTypeType) (or (|JournalIntervals.__default.InCyclicRange#canCall| |i#0@@8| |indices#0@@19|) (and (not (= 8 $FunctionContextHeight)) ($Is |indices#0@@19| Tclass.JournalIntervals.JournalInterval)))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@19|) (=> (<= (JournalIntervals.JournalInterval.start |indices#0@@19|) |i#0@@8|) (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@19|) (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@19|)))) (=> (and (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@19|) (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@19|)) (<= (+ (JournalIntervals.JournalInterval.start |indices#0@@19|) (JournalIntervals.JournalInterval.len |indices#0@@19|)) |i#0@@8|)) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@19|) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (<= (JournalIntervals.JournalInterval.start |indices#0@@19|) (+ |i#0@@8| DiskLayout.__default.NumJournalBlocks)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (and (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@19|) (JournalIntervals.JournalInterval.JournalInterval_q |indices#0@@19|))))))) (and (=> (JournalIntervals.__default.InCyclicRange |i#0@@8| |indices#0@@19|) (or (and (<= (JournalIntervals.JournalInterval.start |indices#0@@19|) |i#0@@8|) (< |i#0@@8| (+ (JournalIntervals.JournalInterval.start |indices#0@@19|) (JournalIntervals.JournalInterval.len |indices#0@@19|)))) (and (<= (JournalIntervals.JournalInterval.start |indices#0@@19|) (+ |i#0@@8| DiskLayout.__default.NumJournalBlocks)) (< (+ |i#0@@8| DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start |indices#0@@19|) (JournalIntervals.JournalInterval.len |indices#0@@19|)))))) (=> (or (and (<= (JournalIntervals.JournalInterval.start |indices#0@@19|) |i#0@@8|) (< |i#0@@8| (+ (JournalIntervals.JournalInterval.start |indices#0@@19|) (JournalIntervals.JournalInterval.len |indices#0@@19|)))) (and (<= (JournalIntervals.JournalInterval.start |indices#0@@19|) (+ |i#0@@8| DiskLayout.__default.NumJournalBlocks)) (< (+ |i#0@@8| DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start |indices#0@@19|) (JournalIntervals.JournalInterval.len |indices#0@@19|))))) (JournalIntervals.__default.InCyclicRange |i#0@@8| |indices#0@@19|))))) :qid |JournalI.71:27| :skolemid |1005| :pattern ( (JournalIntervals.__default.InCyclicRange |i#0@@8| |indices#0@@19|)) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|i#0@@9| Int) (|indices#0@@20| T@U) ) (!  (=> (and (= (type |indices#0@@20|) DatatypeTypeType) (or (|JournalIntervals.__default.InCyclicRange#canCall| (LitInt |i#0@@9|) (Lit |indices#0@@20|)) (and (not (= 8 $FunctionContextHeight)) ($Is |indices#0@@20| Tclass.JournalIntervals.JournalInterval)))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@20|)) (=> (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|))) (LitInt |i#0@@9|)) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@20|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@20|))))) (=> (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@20|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@20|))) (not (U_2_bool (Lit (bool_2_U (< |i#0@@9| (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@20|))))))))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@20|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|))) (LitInt (+ |i#0@@9| DiskLayout.__default.NumJournalBlocks))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@20|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |indices#0@@20|)))))))) (and (=> (JournalIntervals.__default.InCyclicRange (LitInt |i#0@@9|) (Lit |indices#0@@20|)) (or (and (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|))) (LitInt |i#0@@9|)) (< |i#0@@9| (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@20|))))) (and (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|))) (LitInt (+ |i#0@@9| DiskLayout.__default.NumJournalBlocks))) (< (+ |i#0@@9| DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@20|))))))) (=> (or (and (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|))) (LitInt |i#0@@9|)) (< |i#0@@9| (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@20|))))) (and (<= (LitInt (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|))) (LitInt (+ |i#0@@9| DiskLayout.__default.NumJournalBlocks))) (< (+ |i#0@@9| DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start (Lit |indices#0@@20|)) (JournalIntervals.JournalInterval.len (Lit |indices#0@@20|)))))) (JournalIntervals.__default.InCyclicRange (LitInt |i#0@@9|) (Lit |indices#0@@20|)))))) :qid |JournalI.71:27| :weight 3 :skolemid |1006| :pattern ( (JournalIntervals.__default.InCyclicRange (LitInt |i#0@@9|) (Lit |indices#0@@20|))) ))))
(assert (forall ((arg0@@223 Int) (arg1@@107 Int) ) (! (= (type (JournalIntervals.__default.JournalFrontInterval arg0@@223 arg1@@107)) DatatypeTypeType) :qid |funType:JournalIntervals.__default.JournalFrontInterval| :pattern ( (JournalIntervals.__default.JournalFrontInterval arg0@@223 arg1@@107)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|start#0| Int) (|len#0| Int) ) (!  (=> (or (|JournalIntervals.__default.JournalFrontInterval#canCall| |start#0| |len#0|) (and (not (= 9 $FunctionContextHeight)) (< |start#0| DiskLayout.__default.NumJournalBlocks))) ($Is (JournalIntervals.__default.JournalFrontInterval |start#0| |len#0|) (Tclass.Options.Option Tclass.JournalIntervals.JournalInterval))) :qid |JournalI.77:33| :skolemid |1009| :pattern ( (JournalIntervals.__default.JournalFrontInterval |start#0| |len#0|)) ))))
(assert (forall ((|start#0@@0| Int) (|len#0@@0| Int) ) (!  (and (=> (|JournalIntervals.__default.JournalFrontInterval#requires| |start#0@@0| |len#0@@0|) (< |start#0@@0| DiskLayout.__default.NumJournalBlocks)) (=> (< |start#0@@0| DiskLayout.__default.NumJournalBlocks) (|JournalIntervals.__default.JournalFrontInterval#requires| |start#0@@0| |len#0@@0|))) :qid |JournalI.77:33| :skolemid |1010| :pattern ( (|JournalIntervals.__default.JournalFrontInterval#requires| |start#0@@0| |len#0@@0|)) )))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|start#0@@1| Int) (|len#0@@1| Int) ) (!  (=> (or (|JournalIntervals.__default.JournalFrontInterval#canCall| |start#0@@1| |len#0@@1|) (and (not (= 9 $FunctionContextHeight)) (< |start#0@@1| DiskLayout.__default.NumJournalBlocks))) (and (=> (not (= |len#0@@1| (LitInt 0))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (- DiskLayout.__default.NumJournalBlocks |start#0@@1|) |len#0@@1|) |DiskLayout.__default.NumJournalBlocks#canCall|))) (= (JournalIntervals.__default.JournalFrontInterval |start#0@@1| |len#0@@1|) (ite (= |len#0@@1| (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| ($Box (|#JournalIntervals.JournalInterval.JournalInterval| |start#0@@1| (ite (<= |len#0@@1| (- DiskLayout.__default.NumJournalBlocks |start#0@@1|)) |len#0@@1| (- DiskLayout.__default.NumJournalBlocks |start#0@@1|))))))))) :qid |JournalI.77:33| :skolemid |1011| :pattern ( (JournalIntervals.__default.JournalFrontInterval |start#0@@1| |len#0@@1|)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|start#0@@2| Int) (|len#0@@2| Int) ) (!  (=> (or (|JournalIntervals.__default.JournalFrontInterval#canCall| (LitInt |start#0@@2|) (LitInt |len#0@@2|)) (and (not (= 9 $FunctionContextHeight)) (U_2_bool (Lit (bool_2_U (< |start#0@@2| DiskLayout.__default.NumJournalBlocks)))))) (and (=> (not (= (LitInt |len#0@@2|) (LitInt 0))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@2|)) (LitInt |len#0@@2|)) |DiskLayout.__default.NumJournalBlocks#canCall|))) (= (JournalIntervals.__default.JournalFrontInterval (LitInt |start#0@@2|) (LitInt |len#0@@2|)) (ite (= (LitInt |len#0@@2|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| ($Box (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt |start#0@@2|) (ite (<= (LitInt |len#0@@2|) (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@2|))) |len#0@@2| (- DiskLayout.__default.NumJournalBlocks |start#0@@2|))))))))) :qid |JournalI.77:33| :weight 3 :skolemid |1012| :pattern ( (JournalIntervals.__default.JournalFrontInterval (LitInt |start#0@@2|) (LitInt |len#0@@2|))) ))))
(assert (forall ((arg0@@224 Int) (arg1@@108 Int) ) (! (= (type (JournalIntervals.__default.JournalBackInterval arg0@@224 arg1@@108)) DatatypeTypeType) :qid |funType:JournalIntervals.__default.JournalBackInterval| :pattern ( (JournalIntervals.__default.JournalBackInterval arg0@@224 arg1@@108)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((|start#0@@3| Int) (|len#0@@3| Int) ) (!  (=> (or (|JournalIntervals.__default.JournalBackInterval#canCall| |start#0@@3| |len#0@@3|) (and (not (= 10 $FunctionContextHeight)) (and (< |start#0@@3| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@3| (LitInt DiskLayout.__default.NumJournalBlocks))))) ($Is (JournalIntervals.__default.JournalBackInterval |start#0@@3| |len#0@@3|) (Tclass.Options.Option Tclass.JournalIntervals.JournalInterval))) :qid |JournalI.93:32| :skolemid |1016| :pattern ( (JournalIntervals.__default.JournalBackInterval |start#0@@3| |len#0@@3|)) ))))
(assert (forall ((|start#0@@4| Int) (|len#0@@4| Int) ) (!  (and (=> (|JournalIntervals.__default.JournalBackInterval#requires| |start#0@@4| |len#0@@4|) (and (< |start#0@@4| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@4| (LitInt DiskLayout.__default.NumJournalBlocks)))) (=> (and (< |start#0@@4| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@4| (LitInt DiskLayout.__default.NumJournalBlocks))) (|JournalIntervals.__default.JournalBackInterval#requires| |start#0@@4| |len#0@@4|))) :qid |JournalI.93:32| :skolemid |1017| :pattern ( (|JournalIntervals.__default.JournalBackInterval#requires| |start#0@@4| |len#0@@4|)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((|start#0@@5| Int) (|len#0@@5| Int) ) (!  (=> (or (|JournalIntervals.__default.JournalBackInterval#canCall| |start#0@@5| |len#0@@5|) (and (not (= 10 $FunctionContextHeight)) (and (< |start#0@@5| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@5| (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (=> (not (= |len#0@@5| (LitInt 0))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (- DiskLayout.__default.NumJournalBlocks |start#0@@5|) |len#0@@5|) |DiskLayout.__default.NumJournalBlocks#canCall|))) (= (JournalIntervals.__default.JournalBackInterval |start#0@@5| |len#0@@5|) (ite (= |len#0@@5| (LitInt 0)) |#Options.Option.None| (ite (<= |len#0@@5| (- DiskLayout.__default.NumJournalBlocks |start#0@@5|)) |#Options.Option.None| (|#Options.Option.Some| ($Box (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (- |len#0@@5| (- DiskLayout.__default.NumJournalBlocks |start#0@@5|)))))))))) :qid |JournalI.93:32| :skolemid |1018| :pattern ( (JournalIntervals.__default.JournalBackInterval |start#0@@5| |len#0@@5|)) ))))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((|start#0@@6| Int) (|len#0@@6| Int) ) (!  (=> (or (|JournalIntervals.__default.JournalBackInterval#canCall| (LitInt |start#0@@6|) (LitInt |len#0@@6|)) (and (not (= 10 $FunctionContextHeight)) (and (U_2_bool (Lit (bool_2_U (< |start#0@@6| DiskLayout.__default.NumJournalBlocks)))) (<= (LitInt |len#0@@6|) (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (=> (not (= (LitInt |len#0@@6|) (LitInt 0))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@6|)) (LitInt |len#0@@6|)) |DiskLayout.__default.NumJournalBlocks#canCall|))) (= (JournalIntervals.__default.JournalBackInterval (LitInt |start#0@@6|) (LitInt |len#0@@6|)) (ite (= (LitInt |len#0@@6|) (LitInt 0)) |#Options.Option.None| (ite (<= (LitInt |len#0@@6|) (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@6|))) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (LitInt (- |len#0@@6| (- DiskLayout.__default.NumJournalBlocks |start#0@@6|)))))))))))) :qid |JournalI.93:32| :weight 3 :skolemid |1019| :pattern ( (JournalIntervals.__default.JournalBackInterval (LitInt |start#0@@6|) (LitInt |len#0@@6|))) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((|a#0@@1| T@U) (|b#0@@1| T@U) ) (!  (=> (and (and (= (type |a#0@@1|) DatatypeTypeType) (= (type |b#0@@1|) DatatypeTypeType)) (or (|JournalIntervals.__default.subinterval#canCall| |a#0@@1| |b#0@@1|) (and (not (= 11 $FunctionContextHeight)) (and ($Is |a#0@@1| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@1| Tclass.JournalIntervals.JournalInterval))))) true) :qid |JournalI.107:25| :skolemid |1024| :pattern ( (JournalIntervals.__default.subinterval |a#0@@1| |b#0@@1|)) ))))
(assert (forall ((|a#0@@2| T@U) (|b#0@@2| T@U) ) (!  (=> (and (and (= (type |a#0@@2|) DatatypeTypeType) (= (type |b#0@@2|) DatatypeTypeType)) (and ($Is |a#0@@2| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@2| Tclass.JournalIntervals.JournalInterval))) (and (=> (|JournalIntervals.__default.subinterval#requires| |a#0@@2| |b#0@@2|) true) (=> true (|JournalIntervals.__default.subinterval#requires| |a#0@@2| |b#0@@2|)))) :qid |JournalI.107:25| :skolemid |1025| :pattern ( (|JournalIntervals.__default.subinterval#requires| |a#0@@2| |b#0@@2|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((|a#0@@3| T@U) (|b#0@@3| T@U) ) (!  (=> (and (and (= (type |a#0@@3|) DatatypeTypeType) (= (type |b#0@@3|) DatatypeTypeType)) (or (|JournalIntervals.__default.subinterval#canCall| |a#0@@3| |b#0@@3|) (and (not (= 11 $FunctionContextHeight)) (and ($Is |a#0@@3| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@3| Tclass.JournalIntervals.JournalInterval))))) (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@3|) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@3|)) (=> (>= (JournalIntervals.JournalInterval.start |a#0@@3|) (JournalIntervals.JournalInterval.start |b#0@@3|)) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@3|) (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@3|)) (and (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@3|) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@3|))))) (=> (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@3|) (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@3|)) (and (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@3|) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@3|))) (< (+ (JournalIntervals.JournalInterval.start |b#0@@3|) (JournalIntervals.JournalInterval.len |b#0@@3|)) (+ (JournalIntervals.JournalInterval.start |a#0@@3|) (JournalIntervals.JournalInterval.len |a#0@@3|)))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@3|) |DiskLayout.__default.NumJournalBlocks#canCall|) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@3|)) (=> (>= (+ (JournalIntervals.JournalInterval.start |a#0@@3|) DiskLayout.__default.NumJournalBlocks) (JournalIntervals.JournalInterval.start |b#0@@3|)) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@3|) |DiskLayout.__default.NumJournalBlocks#canCall|) (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@3|)) (and (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@3|) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@3|))))))) (and (=> (JournalIntervals.__default.subinterval |a#0@@3| |b#0@@3|) (or (and (>= (JournalIntervals.JournalInterval.start |a#0@@3|) (JournalIntervals.JournalInterval.start |b#0@@3|)) (<= (+ (JournalIntervals.JournalInterval.start |a#0@@3|) (JournalIntervals.JournalInterval.len |a#0@@3|)) (+ (JournalIntervals.JournalInterval.start |b#0@@3|) (JournalIntervals.JournalInterval.len |b#0@@3|)))) (and (>= (+ (JournalIntervals.JournalInterval.start |a#0@@3|) DiskLayout.__default.NumJournalBlocks) (JournalIntervals.JournalInterval.start |b#0@@3|)) (<= (+ (+ (JournalIntervals.JournalInterval.start |a#0@@3|) DiskLayout.__default.NumJournalBlocks) (JournalIntervals.JournalInterval.len |a#0@@3|)) (+ (JournalIntervals.JournalInterval.start |b#0@@3|) (JournalIntervals.JournalInterval.len |b#0@@3|)))))) (=> (or (and (>= (JournalIntervals.JournalInterval.start |a#0@@3|) (JournalIntervals.JournalInterval.start |b#0@@3|)) (<= (+ (JournalIntervals.JournalInterval.start |a#0@@3|) (JournalIntervals.JournalInterval.len |a#0@@3|)) (+ (JournalIntervals.JournalInterval.start |b#0@@3|) (JournalIntervals.JournalInterval.len |b#0@@3|)))) (and (>= (+ (JournalIntervals.JournalInterval.start |a#0@@3|) DiskLayout.__default.NumJournalBlocks) (JournalIntervals.JournalInterval.start |b#0@@3|)) (<= (+ (+ (JournalIntervals.JournalInterval.start |a#0@@3|) DiskLayout.__default.NumJournalBlocks) (JournalIntervals.JournalInterval.len |a#0@@3|)) (+ (JournalIntervals.JournalInterval.start |b#0@@3|) (JournalIntervals.JournalInterval.len |b#0@@3|))))) (JournalIntervals.__default.subinterval |a#0@@3| |b#0@@3|))))) :qid |JournalI.107:25| :skolemid |1026| :pattern ( (JournalIntervals.__default.subinterval |a#0@@3| |b#0@@3|)) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((|a#0@@4| T@U) (|b#0@@4| T@U) ) (!  (=> (and (and (= (type |a#0@@4|) DatatypeTypeType) (= (type |b#0@@4|) DatatypeTypeType)) (or (|JournalIntervals.__default.subinterval#canCall| (Lit |a#0@@4|) (Lit |b#0@@4|)) (and (not (= 11 $FunctionContextHeight)) (and ($Is |a#0@@4| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@4| Tclass.JournalIntervals.JournalInterval))))) (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@4|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@4|))) (=> (>= (LitInt (JournalIntervals.JournalInterval.start (Lit |a#0@@4|))) (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@4|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@4|))) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@4|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@4|)))))) (=> (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@4|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@4|))) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@4|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@4|)))) (< (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@4|)))) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@4|)))))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@4|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@4|))) (=> (>= (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@4|)) DiskLayout.__default.NumJournalBlocks)) (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@4|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@4|))) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@4|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@4|)))))))) (and (=> (JournalIntervals.__default.subinterval (Lit |a#0@@4|) (Lit |b#0@@4|)) (or (and (>= (LitInt (JournalIntervals.JournalInterval.start (Lit |a#0@@4|))) (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)))) (<= (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@4|)))) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@4|)))))) (and (>= (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@4|)) DiskLayout.__default.NumJournalBlocks)) (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)))) (<= (LitInt (+ (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@4|)) DiskLayout.__default.NumJournalBlocks) (JournalIntervals.JournalInterval.len (Lit |a#0@@4|)))) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@4|)))))))) (=> (or (and (>= (LitInt (JournalIntervals.JournalInterval.start (Lit |a#0@@4|))) (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)))) (<= (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@4|)))) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@4|)))))) (and (>= (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@4|)) DiskLayout.__default.NumJournalBlocks)) (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)))) (<= (LitInt (+ (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@4|)) DiskLayout.__default.NumJournalBlocks) (JournalIntervals.JournalInterval.len (Lit |a#0@@4|)))) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@4|))))))) (JournalIntervals.__default.subinterval (Lit |a#0@@4|) (Lit |b#0@@4|)))))) :qid |JournalI.107:25| :weight 3 :skolemid |1027| :pattern ( (JournalIntervals.__default.subinterval (Lit |a#0@@4|) (Lit |b#0@@4|))) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|a#0@@5| T@U) (|b#0@@5| T@U) ) (!  (=> (and (and (= (type |a#0@@5|) DatatypeTypeType) (= (type |b#0@@5|) DatatypeTypeType)) (or (|JournalIntervals.__default.journalIntervalOverlap#canCall| |a#0@@5| |b#0@@5|) (and (not (= 12 $FunctionContextHeight)) (and (and ($Is |a#0@@5| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@5| Tclass.JournalIntervals.JournalInterval)) (and (JournalIntervals.__default.ContiguousJournalInterval |a#0@@5|) (JournalIntervals.__default.ContiguousJournalInterval |b#0@@5|)))))) true) :qid |JournalI.114:36| :skolemid |1030| :pattern ( (JournalIntervals.__default.journalIntervalOverlap |a#0@@5| |b#0@@5|)) ))))
(assert (forall ((|a#0@@6| T@U) (|b#0@@6| T@U) ) (!  (=> (and (and (= (type |a#0@@6|) DatatypeTypeType) (= (type |b#0@@6|) DatatypeTypeType)) (and ($Is |a#0@@6| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@6| Tclass.JournalIntervals.JournalInterval))) (and (=> (|JournalIntervals.__default.journalIntervalOverlap#requires| |a#0@@6| |b#0@@6|) (and (JournalIntervals.__default.ContiguousJournalInterval |a#0@@6|) (JournalIntervals.__default.ContiguousJournalInterval |b#0@@6|))) (=> (and (JournalIntervals.__default.ContiguousJournalInterval |a#0@@6|) (JournalIntervals.__default.ContiguousJournalInterval |b#0@@6|)) (|JournalIntervals.__default.journalIntervalOverlap#requires| |a#0@@6| |b#0@@6|)))) :qid |JournalI.114:36| :skolemid |1031| :pattern ( (|JournalIntervals.__default.journalIntervalOverlap#requires| |a#0@@6| |b#0@@6|)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|a#0@@7| T@U) (|b#0@@7| T@U) ) (!  (=> (and (and (= (type |a#0@@7|) DatatypeTypeType) (= (type |b#0@@7|) DatatypeTypeType)) (or (|JournalIntervals.__default.journalIntervalOverlap#canCall| |a#0@@7| |b#0@@7|) (and (not (= 12 $FunctionContextHeight)) (and (and ($Is |a#0@@7| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@7| Tclass.JournalIntervals.JournalInterval)) (and (JournalIntervals.__default.ContiguousJournalInterval |a#0@@7|) (JournalIntervals.__default.ContiguousJournalInterval |b#0@@7|)))))) (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@7|) (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@7|)) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@7|)) (=> (> (+ (JournalIntervals.JournalInterval.start |a#0@@7|) (JournalIntervals.JournalInterval.len |a#0@@7|)) (JournalIntervals.JournalInterval.start |b#0@@7|)) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@7|) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@7|)) (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@7|)))) (and (=> (JournalIntervals.__default.journalIntervalOverlap |a#0@@7| |b#0@@7|) (and (> (+ (JournalIntervals.JournalInterval.start |a#0@@7|) (JournalIntervals.JournalInterval.len |a#0@@7|)) (JournalIntervals.JournalInterval.start |b#0@@7|)) (> (+ (JournalIntervals.JournalInterval.start |b#0@@7|) (JournalIntervals.JournalInterval.len |b#0@@7|)) (JournalIntervals.JournalInterval.start |a#0@@7|)))) (=> (and (> (+ (JournalIntervals.JournalInterval.start |a#0@@7|) (JournalIntervals.JournalInterval.len |a#0@@7|)) (JournalIntervals.JournalInterval.start |b#0@@7|)) (> (+ (JournalIntervals.JournalInterval.start |b#0@@7|) (JournalIntervals.JournalInterval.len |b#0@@7|)) (JournalIntervals.JournalInterval.start |a#0@@7|))) (JournalIntervals.__default.journalIntervalOverlap |a#0@@7| |b#0@@7|))))) :qid |JournalI.114:36| :skolemid |1032| :pattern ( (JournalIntervals.__default.journalIntervalOverlap |a#0@@7| |b#0@@7|)) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|a#0@@8| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (= (type |a#0@@8|) DatatypeTypeType) (= (type |b#0@@8|) DatatypeTypeType)) (or (|JournalIntervals.__default.journalIntervalOverlap#canCall| (Lit |a#0@@8|) (Lit |b#0@@8|)) (and (not (= 12 $FunctionContextHeight)) (and (and ($Is |a#0@@8| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@8| Tclass.JournalIntervals.JournalInterval)) (and (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ContiguousJournalInterval (Lit |a#0@@8|))))) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ContiguousJournalInterval (Lit |b#0@@8|)))))))))) (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@8|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@8|))) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@8|))) (=> (U_2_bool (Lit (bool_2_U (> (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@8|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@8|))) (JournalIntervals.JournalInterval.start (Lit |b#0@@8|)))))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@8|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@8|))) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@8|))))) (and (=> (JournalIntervals.__default.journalIntervalOverlap (Lit |a#0@@8|) (Lit |b#0@@8|)) (U_2_bool (Lit (bool_2_U  (and (> (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@8|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@8|))) (JournalIntervals.JournalInterval.start (Lit |b#0@@8|))) (> (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@8|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@8|))) (JournalIntervals.JournalInterval.start (Lit |a#0@@8|)))))))) (=> (U_2_bool (Lit (bool_2_U  (and (> (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@8|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@8|))) (JournalIntervals.JournalInterval.start (Lit |b#0@@8|))) (> (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@8|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@8|))) (JournalIntervals.JournalInterval.start (Lit |a#0@@8|))))))) (JournalIntervals.__default.journalIntervalOverlap (Lit |a#0@@8|) (Lit |b#0@@8|)))))) :qid |JournalI.114:36| :weight 3 :skolemid |1033| :pattern ( (JournalIntervals.__default.journalIntervalOverlap (Lit |a#0@@8|) (Lit |b#0@@8|))) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|a#0@@9| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (= (type |a#0@@9|) DatatypeTypeType) (= (type |b#0@@9|) DatatypeTypeType)) (or (|JournalIntervals.__default.journalCyclicIntervalOverlap#canCall| |a#0@@9| |b#0@@9|) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |a#0@@9| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@9| Tclass.JournalIntervals.JournalInterval)) (and (JournalIntervals.__default.ValidJournalInterval |a#0@@9|) (JournalIntervals.__default.ValidJournalInterval |b#0@@9|)))))) true) :qid |JournalI.122:42| :skolemid |1036| :pattern ( (JournalIntervals.__default.journalCyclicIntervalOverlap |a#0@@9| |b#0@@9|)) ))))
(assert (forall ((|a#0@@10| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (= (type |a#0@@10|) DatatypeTypeType) (= (type |b#0@@10|) DatatypeTypeType)) (and ($Is |a#0@@10| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@10| Tclass.JournalIntervals.JournalInterval))) (and (=> (|JournalIntervals.__default.journalCyclicIntervalOverlap#requires| |a#0@@10| |b#0@@10|) (and (JournalIntervals.__default.ValidJournalInterval |a#0@@10|) (JournalIntervals.__default.ValidJournalInterval |b#0@@10|))) (=> (and (JournalIntervals.__default.ValidJournalInterval |a#0@@10|) (JournalIntervals.__default.ValidJournalInterval |b#0@@10|)) (|JournalIntervals.__default.journalCyclicIntervalOverlap#requires| |a#0@@10| |b#0@@10|)))) :qid |JournalI.122:42| :skolemid |1037| :pattern ( (|JournalIntervals.__default.journalCyclicIntervalOverlap#requires| |a#0@@10| |b#0@@10|)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|a#0@@11| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (= (type |a#0@@11|) DatatypeTypeType) (= (type |b#0@@11|) DatatypeTypeType)) (or (|JournalIntervals.__default.journalCyclicIntervalOverlap#canCall| |a#0@@11| |b#0@@11|) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |a#0@@11| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@11| Tclass.JournalIntervals.JournalInterval)) (and (JournalIntervals.__default.ValidJournalInterval |a#0@@11|) (JournalIntervals.__default.ValidJournalInterval |b#0@@11|)))))) (and (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@11|) (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@11|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (> (+ (JournalIntervals.JournalInterval.start |a#0@@11|) (JournalIntervals.JournalInterval.len |a#0@@11|)) DiskLayout.__default.NumJournalBlocks) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@11|) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@11|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (>= DiskLayout.__default.NumJournalBlocks (+ (JournalIntervals.JournalInterval.start |b#0@@11|) (JournalIntervals.JournalInterval.len |b#0@@11|))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@11|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@11|))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| (|#JournalIntervals.JournalInterval.JournalInterval| (JournalIntervals.JournalInterval.start |a#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |a#0@@11|))) |b#0@@11|)) (=> (not (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (JournalIntervals.JournalInterval.start |a#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |a#0@@11|))) |b#0@@11|)) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@11|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@11|))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (- (JournalIntervals.JournalInterval.len |a#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |a#0@@11|)))) |b#0@@11|)))))))) (=> (>= DiskLayout.__default.NumJournalBlocks (+ (JournalIntervals.JournalInterval.start |a#0@@11|) (JournalIntervals.JournalInterval.len |a#0@@11|))) (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@11|) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@11|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (> (+ (JournalIntervals.JournalInterval.start |b#0@@11|) (JournalIntervals.JournalInterval.len |b#0@@11|)) DiskLayout.__default.NumJournalBlocks) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@11|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@11|))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| (|#JournalIntervals.JournalInterval.JournalInterval| (JournalIntervals.JournalInterval.start |b#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |b#0@@11|))) |a#0@@11|)) (=> (not (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (JournalIntervals.JournalInterval.start |b#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |b#0@@11|))) |a#0@@11|)) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@11|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@11|))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (- (JournalIntervals.JournalInterval.len |b#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |b#0@@11|)))) |a#0@@11|)))))) (=> (>= DiskLayout.__default.NumJournalBlocks (+ (JournalIntervals.JournalInterval.start |b#0@@11|) (JournalIntervals.JournalInterval.len |b#0@@11|))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| |a#0@@11| |b#0@@11|))))) (and (=> (JournalIntervals.__default.journalCyclicIntervalOverlap |a#0@@11| |b#0@@11|) (ite (> (+ (JournalIntervals.JournalInterval.start |a#0@@11|) (JournalIntervals.JournalInterval.len |a#0@@11|)) DiskLayout.__default.NumJournalBlocks) (ite (> (+ (JournalIntervals.JournalInterval.start |b#0@@11|) (JournalIntervals.JournalInterval.len |b#0@@11|)) DiskLayout.__default.NumJournalBlocks) true  (or (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (JournalIntervals.JournalInterval.start |a#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |a#0@@11|))) |b#0@@11|) (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (- (JournalIntervals.JournalInterval.len |a#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |a#0@@11|)))) |b#0@@11|))) (ite (> (+ (JournalIntervals.JournalInterval.start |b#0@@11|) (JournalIntervals.JournalInterval.len |b#0@@11|)) DiskLayout.__default.NumJournalBlocks)  (or (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (JournalIntervals.JournalInterval.start |b#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |b#0@@11|))) |a#0@@11|) (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (- (JournalIntervals.JournalInterval.len |b#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |b#0@@11|)))) |a#0@@11|)) (JournalIntervals.__default.journalIntervalOverlap |a#0@@11| |b#0@@11|)))) (=> (ite (> (+ (JournalIntervals.JournalInterval.start |a#0@@11|) (JournalIntervals.JournalInterval.len |a#0@@11|)) DiskLayout.__default.NumJournalBlocks) (ite (> (+ (JournalIntervals.JournalInterval.start |b#0@@11|) (JournalIntervals.JournalInterval.len |b#0@@11|)) DiskLayout.__default.NumJournalBlocks) true  (or (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (JournalIntervals.JournalInterval.start |a#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |a#0@@11|))) |b#0@@11|) (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (- (JournalIntervals.JournalInterval.len |a#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |a#0@@11|)))) |b#0@@11|))) (ite (> (+ (JournalIntervals.JournalInterval.start |b#0@@11|) (JournalIntervals.JournalInterval.len |b#0@@11|)) DiskLayout.__default.NumJournalBlocks)  (or (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (JournalIntervals.JournalInterval.start |b#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |b#0@@11|))) |a#0@@11|) (JournalIntervals.__default.journalIntervalOverlap (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (- (JournalIntervals.JournalInterval.len |b#0@@11|) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start |b#0@@11|)))) |a#0@@11|)) (JournalIntervals.__default.journalIntervalOverlap |a#0@@11| |b#0@@11|))) (JournalIntervals.__default.journalCyclicIntervalOverlap |a#0@@11| |b#0@@11|))))) :qid |JournalI.122:42| :skolemid |1038| :pattern ( (JournalIntervals.__default.journalCyclicIntervalOverlap |a#0@@11| |b#0@@11|)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|a#0@@12| T@U) (|b#0@@12| T@U) ) (!  (=> (and (and (= (type |a#0@@12|) DatatypeTypeType) (= (type |b#0@@12|) DatatypeTypeType)) (or (|JournalIntervals.__default.journalCyclicIntervalOverlap#canCall| (Lit |a#0@@12|) (Lit |b#0@@12|)) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |a#0@@12| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@12| Tclass.JournalIntervals.JournalInterval)) (and (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournalInterval (Lit |a#0@@12|))))) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournalInterval (Lit |b#0@@12|)))))))))) (and (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@12|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@12|))) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (U_2_bool (Lit (bool_2_U (> (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@12|))) DiskLayout.__default.NumJournalBlocks)))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@12|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@12|))) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (not (U_2_bool (Lit (bool_2_U (> (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@12|))) DiskLayout.__default.NumJournalBlocks))))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@12|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@12|)))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (JournalIntervals.JournalInterval.start (Lit |a#0@@12|))) (LitInt (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |a#0@@12|)))))) (Lit |b#0@@12|))) (=> (not (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (JournalIntervals.JournalInterval.start (Lit |a#0@@12|))) (LitInt (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |a#0@@12|)))))) (Lit |b#0@@12|)))))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@12|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@12|)))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (LitInt (- (JournalIntervals.JournalInterval.len (Lit |a#0@@12|)) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |a#0@@12|))))))) (Lit |b#0@@12|))))))))) (=> (not (U_2_bool (Lit (bool_2_U (> (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@12|))) DiskLayout.__default.NumJournalBlocks))))) (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@12|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@12|))) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (U_2_bool (Lit (bool_2_U (> (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@12|))) DiskLayout.__default.NumJournalBlocks)))) (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@12|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@12|)))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@12|))) (LitInt (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)))))) (Lit |a#0@@12|))) (=> (not (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@12|))) (LitInt (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)))))) (Lit |a#0@@12|)))))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@12|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@12|)))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (LitInt (- (JournalIntervals.JournalInterval.len (Lit |b#0@@12|)) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |b#0@@12|))))))) (Lit |a#0@@12|))))))) (=> (not (U_2_bool (Lit (bool_2_U (> (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@12|))) DiskLayout.__default.NumJournalBlocks))))) (|JournalIntervals.__default.journalIntervalOverlap#canCall| (Lit |a#0@@12|) (Lit |b#0@@12|)))))) (and (=> (JournalIntervals.__default.journalCyclicIntervalOverlap (Lit |a#0@@12|) (Lit |b#0@@12|)) (ite (> (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@12|))) DiskLayout.__default.NumJournalBlocks) (ite (> (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@12|))) DiskLayout.__default.NumJournalBlocks) true  (or (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (JournalIntervals.JournalInterval.start (Lit |a#0@@12|))) (LitInt (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |a#0@@12|)))))) (Lit |b#0@@12|)) (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (LitInt (- (JournalIntervals.JournalInterval.len (Lit |a#0@@12|)) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |a#0@@12|))))))) (Lit |b#0@@12|)))) (ite (> (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@12|))) DiskLayout.__default.NumJournalBlocks)  (or (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@12|))) (LitInt (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)))))) (Lit |a#0@@12|)) (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (LitInt (- (JournalIntervals.JournalInterval.len (Lit |b#0@@12|)) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |b#0@@12|))))))) (Lit |a#0@@12|))) (JournalIntervals.__default.journalIntervalOverlap (Lit |a#0@@12|) (Lit |b#0@@12|))))) (=> (ite (> (+ (JournalIntervals.JournalInterval.start (Lit |a#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |a#0@@12|))) DiskLayout.__default.NumJournalBlocks) (ite (> (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@12|))) DiskLayout.__default.NumJournalBlocks) true  (or (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (JournalIntervals.JournalInterval.start (Lit |a#0@@12|))) (LitInt (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |a#0@@12|)))))) (Lit |b#0@@12|)) (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (LitInt (- (JournalIntervals.JournalInterval.len (Lit |a#0@@12|)) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |a#0@@12|))))))) (Lit |b#0@@12|)))) (ite (> (+ (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@12|))) DiskLayout.__default.NumJournalBlocks)  (or (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@12|))) (LitInt (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |b#0@@12|)))))) (Lit |a#0@@12|)) (JournalIntervals.__default.journalIntervalOverlap (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt 0) (LitInt (- (JournalIntervals.JournalInterval.len (Lit |b#0@@12|)) (- DiskLayout.__default.NumJournalBlocks (JournalIntervals.JournalInterval.start (Lit |b#0@@12|))))))) (Lit |a#0@@12|))) (JournalIntervals.__default.journalIntervalOverlap (Lit |a#0@@12|) (Lit |b#0@@12|)))) (JournalIntervals.__default.journalCyclicIntervalOverlap (Lit |a#0@@12|) (Lit |b#0@@12|)))))) :qid |JournalI.122:42| :weight 3 :skolemid |1039| :pattern ( (JournalIntervals.__default.journalCyclicIntervalOverlap (Lit |a#0@@12|) (Lit |b#0@@12|))) ))))
(assert (forall ((arg0@@225 T@U) (arg1@@109 T@U) (arg2@@62 T@U) (arg3@@40 T@U) ) (! (= (type (JournalIntervals.__default.CyclicSlice arg0@@225 arg1@@109 arg2@@62 arg3@@40)) (SeqType BoxType)) :qid |funType:JournalIntervals.__default.CyclicSlice| :pattern ( (JournalIntervals.__default.CyclicSlice arg0@@225 arg1@@109 arg2@@62 arg3@@40)) )))
(assert (forall ((JournalIntervals._default.CyclicSlice$T T@U) ($ly@@5 T@U) (|s#0| T@U) (|interval#0| T@U) ) (!  (=> (and (and (and (= (type JournalIntervals._default.CyclicSlice$T) TyType) (= (type $ly@@5) LayerTypeType)) (= (type |s#0|) (SeqType BoxType))) (= (type |interval#0|) DatatypeTypeType)) (= (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T ($LS $ly@@5) |s#0| |interval#0|) (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T $ly@@5 |s#0| |interval#0|))) :qid |unknown.0:0| :skolemid |1054| :pattern ( (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T ($LS $ly@@5) |s#0| |interval#0|)) )))
(assert (forall ((JournalIntervals._default.CyclicSlice$T@@0 T@U) ($ly@@6 T@U) (|s#0@@0| T@U) (|interval#0@@0| T@U) ) (!  (=> (and (and (and (= (type JournalIntervals._default.CyclicSlice$T@@0) TyType) (= (type $ly@@6) LayerTypeType)) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |interval#0@@0|) DatatypeTypeType)) (= (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T@@0 $ly@@6 |s#0@@0| |interval#0@@0|) (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T@@0 $LZ |s#0@@0| |interval#0@@0|))) :qid |unknown.0:0| :skolemid |1055| :pattern ( (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T@@0 (AsFuelBottom $ly@@6) |s#0@@0| |interval#0@@0|)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((JournalIntervals._default.CyclicSlice$T@@1 T@U) ($ly@@7 T@U) (|s#0@@1| T@U) (|interval#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type JournalIntervals._default.CyclicSlice$T@@1) TyType) (= (type $ly@@7) LayerTypeType)) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |interval#0@@1|) DatatypeTypeType)) (or (|JournalIntervals.__default.CyclicSlice#canCall| JournalIntervals._default.CyclicSlice$T@@1 |s#0@@1| |interval#0@@1|) (and (not (= 14 $FunctionContextHeight)) (and (and ($Is |s#0@@1| (TSeq JournalIntervals._default.CyclicSlice$T@@1)) ($Is |interval#0@@1| Tclass.JournalIntervals.JournalInterval)) (and (and (= (|Seq#Length| |s#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval#0@@1|)) (< (JournalIntervals.JournalInterval.start |interval#0@@1|) DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval#0@@1|)) (<= (JournalIntervals.JournalInterval.len |interval#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks)))))))) ($Is (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T@@1 $ly@@7 |s#0@@1| |interval#0@@1|) (TSeq JournalIntervals._default.CyclicSlice$T@@1))) :qid |unknown.0:0| :skolemid |1056| :pattern ( (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T@@1 $ly@@7 |s#0@@1| |interval#0@@1|)) ))))
(assert (forall ((JournalIntervals._default.CyclicSlice$T@@2 T@U) ($ly@@8 T@U) (|s#0@@2| T@U) (|interval#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type JournalIntervals._default.CyclicSlice$T@@2) TyType) (= (type $ly@@8) LayerTypeType)) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |interval#0@@2|) DatatypeTypeType)) (and ($Is |s#0@@2| (TSeq JournalIntervals._default.CyclicSlice$T@@2)) ($Is |interval#0@@2| Tclass.JournalIntervals.JournalInterval))) (and (=> (|JournalIntervals.__default.CyclicSlice#requires| JournalIntervals._default.CyclicSlice$T@@2 $ly@@8 |s#0@@2| |interval#0@@2|) (and (and (= (|Seq#Length| |s#0@@2|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval#0@@2|)) (< (JournalIntervals.JournalInterval.start |interval#0@@2|) DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval#0@@2|)) (<= (JournalIntervals.JournalInterval.len |interval#0@@2|) (LitInt DiskLayout.__default.NumJournalBlocks))))) (=> (and (and (= (|Seq#Length| |s#0@@2|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval#0@@2|)) (< (JournalIntervals.JournalInterval.start |interval#0@@2|) DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval#0@@2|)) (<= (JournalIntervals.JournalInterval.len |interval#0@@2|) (LitInt DiskLayout.__default.NumJournalBlocks)))) (|JournalIntervals.__default.CyclicSlice#requires| JournalIntervals._default.CyclicSlice$T@@2 $ly@@8 |s#0@@2| |interval#0@@2|)))) :qid |unknown.0:0| :skolemid |1057| :pattern ( (|JournalIntervals.__default.CyclicSlice#requires| JournalIntervals._default.CyclicSlice$T@@2 $ly@@8 |s#0@@2| |interval#0@@2|)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((JournalIntervals._default.CyclicSlice$T@@3 T@U) ($ly@@9 T@U) (|s#0@@3| T@U) (|interval#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type JournalIntervals._default.CyclicSlice$T@@3) TyType) (= (type $ly@@9) LayerTypeType)) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |interval#0@@3|) DatatypeTypeType)) (or (|JournalIntervals.__default.CyclicSlice#canCall| JournalIntervals._default.CyclicSlice$T@@3 |s#0@@3| |interval#0@@3|) (and (not (= 14 $FunctionContextHeight)) (and (and ($Is |s#0@@3| (TSeq JournalIntervals._default.CyclicSlice$T@@3)) ($Is |interval#0@@3| Tclass.JournalIntervals.JournalInterval)) (and (and (= (|Seq#Length| |s#0@@3|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval#0@@3|)) (< (JournalIntervals.JournalInterval.start |interval#0@@3|) DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval#0@@3|)) (<= (JournalIntervals.JournalInterval.len |interval#0@@3|) (LitInt DiskLayout.__default.NumJournalBlocks)))))))) (and (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@3|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@3|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (<= (+ (JournalIntervals.JournalInterval.start |interval#0@@3|) (JournalIntervals.JournalInterval.len |interval#0@@3|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@3|) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@3|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@3|))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start |interval#0@@3|) (JournalIntervals.JournalInterval.len |interval#0@@3|))) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@3|) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@3|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@3|)) |DiskLayout.__default.NumJournalBlocks#canCall|)))) (= (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T@@3 ($LS $ly@@9) |s#0@@3| |interval#0@@3|) (ite (<= (+ (JournalIntervals.JournalInterval.start |interval#0@@3|) (JournalIntervals.JournalInterval.len |interval#0@@3|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (|Seq#Drop| (|Seq#Take| |s#0@@3| (+ (JournalIntervals.JournalInterval.start |interval#0@@3|) (JournalIntervals.JournalInterval.len |interval#0@@3|))) (JournalIntervals.JournalInterval.start |interval#0@@3|)) (|Seq#Append| (|Seq#Drop| |s#0@@3| (JournalIntervals.JournalInterval.start |interval#0@@3|)) (|Seq#Take| |s#0@@3| (- (+ (JournalIntervals.JournalInterval.start |interval#0@@3|) (JournalIntervals.JournalInterval.len |interval#0@@3|)) DiskLayout.__default.NumJournalBlocks))))))) :qid |unknown.0:0| :skolemid |1058| :pattern ( (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T@@3 ($LS $ly@@9) |s#0@@3| |interval#0@@3|)) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((JournalIntervals._default.CyclicSlice$T@@4 T@U) ($ly@@10 T@U) (|s#0@@4| T@U) (|interval#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type JournalIntervals._default.CyclicSlice$T@@4) TyType) (= (type $ly@@10) LayerTypeType)) (= (type |s#0@@4|) (SeqType BoxType))) (= (type |interval#0@@4|) DatatypeTypeType)) (or (|JournalIntervals.__default.CyclicSlice#canCall| JournalIntervals._default.CyclicSlice$T@@4 (Lit |s#0@@4|) (Lit |interval#0@@4|)) (and (not (= 14 $FunctionContextHeight)) (and (and ($Is |s#0@@4| (TSeq JournalIntervals._default.CyclicSlice$T@@4)) ($Is |interval#0@@4| Tclass.JournalIntervals.JournalInterval)) (and (and (= (|Seq#Length| (Lit |s#0@@4|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (LitInt (JournalIntervals.JournalInterval.start (Lit |interval#0@@4|)))) (< (JournalIntervals.JournalInterval.start (Lit |interval#0@@4|)) DiskLayout.__default.NumJournalBlocks))) (and (<= (LitInt 0) (LitInt (JournalIntervals.JournalInterval.len (Lit |interval#0@@4|)))) (<= (LitInt (JournalIntervals.JournalInterval.len (Lit |interval#0@@4|))) (LitInt DiskLayout.__default.NumJournalBlocks)))))))) (and (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@4|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@4|))) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (<= (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@4|)))) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@4|)) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@4|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@4|)))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@4|))))) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@4|)) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@4|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@4|))) |DiskLayout.__default.NumJournalBlocks#canCall|)))) (= (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T@@4 ($LS $ly@@10) (Lit |s#0@@4|) (Lit |interval#0@@4|)) (ite (<= (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@4|)))) (LitInt DiskLayout.__default.NumJournalBlocks)) (|Seq#Drop| (|Seq#Take| (Lit |s#0@@4|) (LitInt (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@4|))))) (LitInt (JournalIntervals.JournalInterval.start (Lit |interval#0@@4|)))) (|Seq#Append| (|Seq#Drop| (Lit |s#0@@4|) (LitInt (JournalIntervals.JournalInterval.start (Lit |interval#0@@4|)))) (|Seq#Take| (Lit |s#0@@4|) (LitInt (- (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@4|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@4|))) DiskLayout.__default.NumJournalBlocks)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1059| :pattern ( (JournalIntervals.__default.CyclicSlice JournalIntervals._default.CyclicSlice$T@@4 ($LS $ly@@10) (Lit |s#0@@4|) (Lit |interval#0@@4|))) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|s#0@@5| T@U) ) (!  (=> (and (= (type |s#0@@5|) (SeqType BoxType)) (or (|JournalIntervals.__default.fullRange#canCall| |s#0@@5|) (and (not (= 15 $FunctionContextHeight)) ($Is |s#0@@5| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))))) true) :qid |JournalI.153:23| :skolemid |1065| :pattern ( (JournalIntervals.__default.fullRange |s#0@@5|)) ))))
(assert (forall ((|s#0@@6| T@U) ) (!  (=> (and (= (type |s#0@@6|) (SeqType BoxType)) ($Is |s#0@@6| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))) (and (=> (|JournalIntervals.__default.fullRange#requires| |s#0@@6|) true) (=> true (|JournalIntervals.__default.fullRange#requires| |s#0@@6|)))) :qid |JournalI.153:23| :skolemid |1066| :pattern ( (|JournalIntervals.__default.fullRange#requires| |s#0@@6|)) )))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|s#0@@7| T@U) ) (!  (=> (and (= (type |s#0@@7|) (SeqType BoxType)) (or (|JournalIntervals.__default.fullRange#canCall| |s#0@@7|) (and (not (= 15 $FunctionContextHeight)) ($Is |s#0@@7| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))))) (and (=> (JournalIntervals.__default.fullRange |s#0@@7|) (forall ((|i#0@@10| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@10|) (< |i#0@@10| (|Seq#Length| |s#0@@7|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@7| |i#0@@10|)))) :qid |JournalI.155:12| :skolemid |1067| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@7| |i#0@@10|))) ))) (=> (forall ((|i#0@@11| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@11|) (< |i#0@@11| (|Seq#Length| |s#0@@7|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@7| |i#0@@11|)))) :qid |JournalI.155:12| :skolemid |1067| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@7| |i#0@@11|))) )) (JournalIntervals.__default.fullRange |s#0@@7|)))) :qid |JournalI.153:23| :skolemid |1068| :pattern ( (JournalIntervals.__default.fullRange |s#0@@7|)) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|s#0@@8| T@U) ) (!  (=> (and (= (type |s#0@@8|) (SeqType BoxType)) (or (|JournalIntervals.__default.fullRange#canCall| (Lit |s#0@@8|)) (and (not (= 15 $FunctionContextHeight)) ($Is |s#0@@8| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))))) (and (=> (JournalIntervals.__default.fullRange (Lit |s#0@@8|)) (forall ((|i#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| (Lit |s#0@@8|)))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@8|) |i#1@@2|)))) :qid |JournalI.155:12| :skolemid |1069| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@8| |i#1@@2|))) ))) (=> (forall ((|i#1@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (|Seq#Length| (Lit |s#0@@8|)))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@8|) |i#1@@3|)))) :qid |JournalI.155:12| :skolemid |1069| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@8| |i#1@@3|))) )) (JournalIntervals.__default.fullRange (Lit |s#0@@8|))))) :qid |JournalI.153:23| :weight 3 :skolemid |1070| :pattern ( (JournalIntervals.__default.fullRange (Lit |s#0@@8|))) ))))
(assert (forall ((arg0@@226 T@U) (arg1@@110 T@U) ) (! (= (type (JournalIntervals.__default.concatFold arg0@@226 arg1@@110)) (SeqType BoxType)) :qid |funType:JournalIntervals.__default.concatFold| :pattern ( (JournalIntervals.__default.concatFold arg0@@226 arg1@@110)) )))
(assert (forall (($ly@@11 T@U) (|s#0@@9| T@U) ) (!  (=> (and (= (type $ly@@11) LayerTypeType) (= (type |s#0@@9|) (SeqType BoxType))) (= (JournalIntervals.__default.concatFold ($LS $ly@@11) |s#0@@9|) (JournalIntervals.__default.concatFold $ly@@11 |s#0@@9|))) :qid |JournalI.158:12| :skolemid |1072| :pattern ( (JournalIntervals.__default.concatFold ($LS $ly@@11) |s#0@@9|)) )))
(assert (forall (($ly@@12 T@U) (|s#0@@10| T@U) ) (!  (=> (and (= (type $ly@@12) LayerTypeType) (= (type |s#0@@10|) (SeqType BoxType))) (= (JournalIntervals.__default.concatFold $ly@@12 |s#0@@10|) (JournalIntervals.__default.concatFold $LZ |s#0@@10|))) :qid |JournalI.158:12| :skolemid |1073| :pattern ( (JournalIntervals.__default.concatFold (AsFuelBottom $ly@@12) |s#0@@10|)) )))
(assert  (=> (<= 16 $FunctionContextHeight) (forall (($ly@@13 T@U) (|s#0@@11| T@U) ) (!  (=> (and (and (= (type $ly@@13) LayerTypeType) (= (type |s#0@@11|) (SeqType BoxType))) (or (|JournalIntervals.__default.concatFold#canCall| |s#0@@11|) (and (not (= 16 $FunctionContextHeight)) (and ($Is |s#0@@11| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) (JournalIntervals.__default.fullRange |s#0@@11|))))) (and (and (= (|Seq#Length| (JournalIntervals.__default.concatFold $ly@@13 |s#0@@11|)) (|Seq#Length| |s#0@@11|)) (forall ((|i#0@@12| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@12|) (< |i#0@@12| (|Seq#Length| |s#0@@11|))) (|Options.Option#Equal| (|#Options.Option.Some| (|Seq#Index| (JournalIntervals.__default.concatFold $ly@@13 |s#0@@11|) |i#0@@12|)) ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@11| |i#0@@12|)))) :qid |JournalI.161:18| :skolemid |1074| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@11| |i#0@@12|))) :pattern ( (|Seq#Index| (JournalIntervals.__default.concatFold $ly@@13 |s#0@@11|) |i#0@@12|)) ))) ($Is (JournalIntervals.__default.concatFold $ly@@13 |s#0@@11|) (TSeq Tclass.JournalRanges.JournalBlock)))) :qid |JournalI.158:12| :skolemid |1075| :pattern ( (JournalIntervals.__default.concatFold $ly@@13 |s#0@@11|)) ))))
(assert (forall (($ly@@14 T@U) (|s#0@@12| T@U) ) (!  (=> (and (and (= (type $ly@@14) LayerTypeType) (= (type |s#0@@12|) (SeqType BoxType))) ($Is |s#0@@12| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)))) (and (=> (|JournalIntervals.__default.concatFold#requires| $ly@@14 |s#0@@12|) (JournalIntervals.__default.fullRange |s#0@@12|)) (=> (JournalIntervals.__default.fullRange |s#0@@12|) (|JournalIntervals.__default.concatFold#requires| $ly@@14 |s#0@@12|)))) :qid |JournalI.158:12| :skolemid |1076| :pattern ( (|JournalIntervals.__default.concatFold#requires| $ly@@14 |s#0@@12|)) )))
(assert  (and (and (forall ((arg0@@227 T@U) (arg1@@111 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@227 arg1@@111)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@227 arg1@@111)) )) (forall ((arg0@@228 T@U) ) (! (= (type (Options.Option.value arg0@@228)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@228)) ))) (forall ((arg0@@229 T@U) (arg1@@112 T@U) ) (! (= (type (Sequences.__default.Last arg0@@229 arg1@@112)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@229 arg1@@112)) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall (($ly@@15 T@U) (|s#0@@13| T@U) ) (!  (=> (and (and (= (type $ly@@15) LayerTypeType) (= (type |s#0@@13|) (SeqType BoxType))) (or (|JournalIntervals.__default.concatFold#canCall| |s#0@@13|) (and (not (= 16 $FunctionContextHeight)) (and ($Is |s#0@@13| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) (JournalIntervals.__default.fullRange |s#0@@13|))))) (and (=> (not (|Seq#Equal| |s#0@@13| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |s#0@@13|) (|JournalIntervals.__default.concatFold#canCall| (Sequences.__default.DropLast (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |s#0@@13|))) (|Sequences.__default.Last#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |s#0@@13|))) (= (JournalIntervals.__default.concatFold ($LS $ly@@15) |s#0@@13|) (ite (|Seq#Equal| |s#0@@13| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (JournalIntervals.__default.concatFold $ly@@15 (Sequences.__default.DropLast (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |s#0@@13|)) (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |s#0@@13|))))))))) :qid |JournalI.158:12| :skolemid |1077| :pattern ( (JournalIntervals.__default.concatFold ($LS $ly@@15) |s#0@@13|)) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall (($ly@@16 T@U) (|s#0@@14| T@U) ) (!  (=> (and (and (= (type $ly@@16) LayerTypeType) (= (type |s#0@@14|) (SeqType BoxType))) (or (|JournalIntervals.__default.concatFold#canCall| (Lit |s#0@@14|)) (and (not (= 16 $FunctionContextHeight)) (and ($Is |s#0@@14| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.fullRange (Lit |s#0@@14|))))))))) (and (=> (not (|Seq#Equal| |s#0@@14| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) (Lit |s#0@@14|)) (|JournalIntervals.__default.concatFold#canCall| (Lit (Sequences.__default.DropLast (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) (Lit |s#0@@14|))))) (|Sequences.__default.Last#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) (Lit |s#0@@14|)))) (= (JournalIntervals.__default.concatFold ($LS $ly@@16) (Lit |s#0@@14|)) (ite (|Seq#Equal| |s#0@@14| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (JournalIntervals.__default.concatFold ($LS $ly@@16) (Lit (Sequences.__default.DropLast (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) (Lit |s#0@@14|)))) (|Seq#Build| (|Seq#Empty| BoxType) (Lit (Options.Option.value (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) (Lit |s#0@@14|)))))))))))) :qid |JournalI.158:12| :weight 3 :skolemid |1078| :pattern ( (JournalIntervals.__default.concatFold ($LS $ly@@16) (Lit |s#0@@14|))) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|journal#0@@13| T@U) (|interval#0@@5| T@U) ) (!  (=> (and (and (= (type |journal#0@@13|) (SeqType BoxType)) (= (type |interval#0@@5|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal#0@@13| |interval#0@@5|) (and (not (= 18 $FunctionContextHeight)) (and (and ($Is |journal#0@@13| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@5| Tclass.JournalIntervals.JournalInterval)) (JournalIntervals.__default.ValidJournalInterval |interval#0@@5|))))) true) :qid |JournalI.204:44| :skolemid |1146| :pattern ( (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@13| |interval#0@@5|)) ))))
(assert (forall ((|journal#0@@14| T@U) (|interval#0@@6| T@U) ) (!  (=> (and (and (= (type |journal#0@@14|) (SeqType BoxType)) (= (type |interval#0@@6|) DatatypeTypeType)) (and ($Is |journal#0@@14| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@6| Tclass.JournalIntervals.JournalInterval))) (and (=> (|JournalIntervals.__default.Disk__HasJournalRange#requires| |journal#0@@14| |interval#0@@6|) (JournalIntervals.__default.ValidJournalInterval |interval#0@@6|)) (=> (JournalIntervals.__default.ValidJournalInterval |interval#0@@6|) (|JournalIntervals.__default.Disk__HasJournalRange#requires| |journal#0@@14| |interval#0@@6|)))) :qid |JournalI.204:44| :skolemid |1147| :pattern ( (|JournalIntervals.__default.Disk__HasJournalRange#requires| |journal#0@@14| |interval#0@@6|)) )))
(assert (= (type StartFuel_JournalIntervals._default.CyclicSlice) LayerTypeType))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|journal#0@@15| T@U) (|interval#0@@7| T@U) ) (!  (=> (and (and (= (type |journal#0@@15|) (SeqType BoxType)) (= (type |interval#0@@7|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal#0@@15| |interval#0@@7|) (and (not (= 18 $FunctionContextHeight)) (and (and ($Is |journal#0@@15| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@7| Tclass.JournalIntervals.JournalInterval)) (JournalIntervals.__default.ValidJournalInterval |interval#0@@7|))))) (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (= (|Seq#Length| |journal#0@@15|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (|JournalIntervals.__default.CyclicSlice#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |journal#0@@15| |interval#0@@7|) (let ((|slice#0| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice |journal#0@@15| |interval#0@@7|))) (=> (U_2_bool (Lit (bool_2_U true))) (|JournalIntervals.__default.fullRange#canCall| |slice#0|)))))) (and (=> (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@15| |interval#0@@7|) (and (= (|Seq#Length| |journal#0@@15|) (LitInt DiskLayout.__default.NumJournalBlocks)) (let ((|slice#0@@0| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice |journal#0@@15| |interval#0@@7|))) (and true (JournalIntervals.__default.fullRange |slice#0@@0|))))) (=> (and (= (|Seq#Length| |journal#0@@15|) (LitInt DiskLayout.__default.NumJournalBlocks)) (let ((|slice#0@@1| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice |journal#0@@15| |interval#0@@7|))) (and true (JournalIntervals.__default.fullRange |slice#0@@1|)))) (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@15| |interval#0@@7|))))) :qid |JournalI.204:44| :skolemid |1148| :pattern ( (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@15| |interval#0@@7|)) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|journal#0@@16| T@U) (|interval#0@@8| T@U) ) (!  (=> (and (and (= (type |journal#0@@16|) (SeqType BoxType)) (= (type |interval#0@@8|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__HasJournalRange#canCall| (Lit |journal#0@@16|) (Lit |interval#0@@8|)) (and (not (= 18 $FunctionContextHeight)) (and (and ($Is |journal#0@@16| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@8| Tclass.JournalIntervals.JournalInterval)) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournalInterval (Lit |interval#0@@8|))))))))) (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (= (|Seq#Length| (Lit |journal#0@@16|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (|JournalIntervals.__default.CyclicSlice#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) (Lit |journal#0@@16|) (Lit |interval#0@@8|)) (let ((|slice#1| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice (Lit |journal#0@@16|) (Lit |interval#0@@8|)))) (=> (U_2_bool (Lit (bool_2_U true))) (|JournalIntervals.__default.fullRange#canCall| |slice#1|)))))) (and (=> (JournalIntervals.__default.Disk__HasJournalRange (Lit |journal#0@@16|) (Lit |interval#0@@8|)) (and (= (|Seq#Length| (Lit |journal#0@@16|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (let ((|slice#1@@0| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice (Lit |journal#0@@16|) (Lit |interval#0@@8|)))) (and true (JournalIntervals.__default.fullRange |slice#1@@0|))))) (=> (and (= (|Seq#Length| (Lit |journal#0@@16|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (let ((|slice#1@@1| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice (Lit |journal#0@@16|) (Lit |interval#0@@8|)))) (and true (JournalIntervals.__default.fullRange |slice#1@@1|)))) (JournalIntervals.__default.Disk__HasJournalRange (Lit |journal#0@@16|) (Lit |interval#0@@8|)))))) :qid |JournalI.204:44| :weight 3 :skolemid |1149| :pattern ( (JournalIntervals.__default.Disk__HasJournalRange (Lit |journal#0@@16|) (Lit |interval#0@@8|))) ))))
(assert (forall ((arg0@@230 T@U) (arg1@@113 T@U) ) (! (= (type (JournalIntervals.__default.Disk__JournalRange arg0@@230 arg1@@113)) (SeqType BoxType)) :qid |funType:JournalIntervals.__default.Disk__JournalRange| :pattern ( (JournalIntervals.__default.Disk__JournalRange arg0@@230 arg1@@113)) )))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|journal#0@@17| T@U) (|interval#0@@9| T@U) ) (!  (=> (and (and (= (type |journal#0@@17|) (SeqType BoxType)) (= (type |interval#0@@9|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal#0@@17| |interval#0@@9|) (and (not (= 20 $FunctionContextHeight)) (and (and ($Is |journal#0@@17| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@9| Tclass.JournalIntervals.JournalInterval)) (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@9|) (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@17| |interval#0@@9|)))))) ($Is (JournalIntervals.__default.Disk__JournalRange |journal#0@@17| |interval#0@@9|) (TSeq Tclass.JournalRanges.JournalBlock))) :qid |JournalI.212:40| :skolemid |1154| :pattern ( (JournalIntervals.__default.Disk__JournalRange |journal#0@@17| |interval#0@@9|)) ))))
(assert (forall ((|journal#0@@18| T@U) (|interval#0@@10| T@U) ) (!  (=> (and (and (= (type |journal#0@@18|) (SeqType BoxType)) (= (type |interval#0@@10|) DatatypeTypeType)) (and ($Is |journal#0@@18| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@10| Tclass.JournalIntervals.JournalInterval))) (and (=> (|JournalIntervals.__default.Disk__JournalRange#requires| |journal#0@@18| |interval#0@@10|) (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@10|) (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@18| |interval#0@@10|))) (=> (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@10|) (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@18| |interval#0@@10|)) (|JournalIntervals.__default.Disk__JournalRange#requires| |journal#0@@18| |interval#0@@10|)))) :qid |JournalI.212:40| :skolemid |1155| :pattern ( (|JournalIntervals.__default.Disk__JournalRange#requires| |journal#0@@18| |interval#0@@10|)) )))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|journal#0@@19| T@U) (|interval#0@@11| T@U) ) (!  (=> (and (and (= (type |journal#0@@19|) (SeqType BoxType)) (= (type |interval#0@@11|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal#0@@19| |interval#0@@11|) (and (not (= 20 $FunctionContextHeight)) (and (and ($Is |journal#0@@19| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@11| Tclass.JournalIntervals.JournalInterval)) (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@11|) (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@19| |interval#0@@11|)))))) (and (and (|JournalIntervals.__default.CyclicSlice#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |journal#0@@19| |interval#0@@11|) (let ((|slice#0@@2| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice |journal#0@@19| |interval#0@@11|))) (|JournalIntervals.__default.concatFold#canCall| |slice#0@@2|))) (= (JournalIntervals.__default.Disk__JournalRange |journal#0@@19| |interval#0@@11|) (let ((|slice#0@@3| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice |journal#0@@19| |interval#0@@11|))) (JournalIntervals.__default.concatFold ($LS $LZ) |slice#0@@3|))))) :qid |JournalI.212:40| :skolemid |1156| :pattern ( (JournalIntervals.__default.Disk__JournalRange |journal#0@@19| |interval#0@@11|)) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|journal#0@@20| T@U) (|interval#0@@12| T@U) ) (!  (=> (and (and (= (type |journal#0@@20|) (SeqType BoxType)) (= (type |interval#0@@12|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__JournalRange#canCall| (Lit |journal#0@@20|) (Lit |interval#0@@12|)) (and (not (= 20 $FunctionContextHeight)) (and (and ($Is |journal#0@@20| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@12| Tclass.JournalIntervals.JournalInterval)) (and (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournalInterval (Lit |interval#0@@12|))))) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.Disk__HasJournalRange (Lit |journal#0@@20|) (Lit |interval#0@@12|)))))))))) (and (and (|JournalIntervals.__default.CyclicSlice#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) (Lit |journal#0@@20|) (Lit |interval#0@@12|)) (let ((|slice#1@@2| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice (Lit |journal#0@@20|) (Lit |interval#0@@12|)))) (|JournalIntervals.__default.concatFold#canCall| |slice#1@@2|))) (= (JournalIntervals.__default.Disk__JournalRange (Lit |journal#0@@20|) (Lit |interval#0@@12|)) (let ((|slice#1@@3| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice (Lit |journal#0@@20|) (Lit |interval#0@@12|)))) (JournalIntervals.__default.concatFold ($LS $LZ) |slice#1@@3|))))) :qid |JournalI.212:40| :weight 3 :skolemid |1157| :pattern ( (JournalIntervals.__default.Disk__JournalRange (Lit |journal#0@@20|) (Lit |interval#0@@12|))) ))))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((|journal#0@@21| T@U) (|interval#0@@13| T@U) ) (!  (=> (and (and (= (type |journal#0@@21|) (SeqType BoxType)) (= (type |interval#0@@13|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal#0@@21| |interval#0@@13|) (and (not (= 21 $FunctionContextHeight)) (and (and ($Is |journal#0@@21| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@13| Tclass.JournalIntervals.JournalInterval)) (JournalIntervals.__default.ValidJournalInterval |interval#0@@13|))))) true) :qid |JournalI.221:7| :skolemid |1164| :pattern ( (JournalIntervals.__default.Disk__HasJournal |journal#0@@21| |interval#0@@13|)) ))))
(assert (forall ((|journal#0@@22| T@U) (|interval#0@@14| T@U) ) (!  (=> (and (and (= (type |journal#0@@22|) (SeqType BoxType)) (= (type |interval#0@@14|) DatatypeTypeType)) (and ($Is |journal#0@@22| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@14| Tclass.JournalIntervals.JournalInterval))) (and (=> (|JournalIntervals.__default.Disk__HasJournal#requires| |journal#0@@22| |interval#0@@14|) (JournalIntervals.__default.ValidJournalInterval |interval#0@@14|)) (=> (JournalIntervals.__default.ValidJournalInterval |interval#0@@14|) (|JournalIntervals.__default.Disk__HasJournal#requires| |journal#0@@22| |interval#0@@14|)))) :qid |JournalI.221:7| :skolemid |1165| :pattern ( (|JournalIntervals.__default.Disk__HasJournal#requires| |journal#0@@22| |interval#0@@14|)) )))
(assert (forall ((arg0@@231 T@U) (arg1@@114 T@U) ) (! (= (type (JournalRanges.__default.parseJournalRange arg0@@231 arg1@@114)) DatatypeTypeType) :qid |funType:JournalRanges.__default.parseJournalRange| :pattern ( (JournalRanges.__default.parseJournalRange arg0@@231 arg1@@114)) )))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((|journal#0@@23| T@U) (|interval#0@@15| T@U) ) (!  (=> (and (and (= (type |journal#0@@23|) (SeqType BoxType)) (= (type |interval#0@@15|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal#0@@23| |interval#0@@15|) (and (not (= 21 $FunctionContextHeight)) (and (and ($Is |journal#0@@23| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@15| Tclass.JournalIntervals.JournalInterval)) (JournalIntervals.__default.ValidJournalInterval |interval#0@@15|))))) (and (and (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal#0@@23| |interval#0@@15|) (=> (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@23| |interval#0@@15|) (and (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal#0@@23| |interval#0@@15|) (|JournalRanges.__default.parseJournalRange#canCall| (JournalIntervals.__default.Disk__JournalRange |journal#0@@23| |interval#0@@15|))))) (and (=> (JournalIntervals.__default.Disk__HasJournal |journal#0@@23| |interval#0@@15|) (and (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@23| |interval#0@@15|) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS $LZ) (JournalIntervals.__default.Disk__JournalRange |journal#0@@23| |interval#0@@15|))))) (=> (and (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@23| |interval#0@@15|) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS $LZ) (JournalIntervals.__default.Disk__JournalRange |journal#0@@23| |interval#0@@15|)))) (JournalIntervals.__default.Disk__HasJournal |journal#0@@23| |interval#0@@15|))))) :qid |JournalI.221:7| :skolemid |1166| :pattern ( (JournalIntervals.__default.Disk__HasJournal |journal#0@@23| |interval#0@@15|)) ))))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((|journal#0@@24| T@U) (|interval#0@@16| T@U) ) (!  (=> (and (and (= (type |journal#0@@24|) (SeqType BoxType)) (= (type |interval#0@@16|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__HasJournal#canCall| (Lit |journal#0@@24|) (Lit |interval#0@@16|)) (and (not (= 21 $FunctionContextHeight)) (and (and ($Is |journal#0@@24| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@16| Tclass.JournalIntervals.JournalInterval)) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournalInterval (Lit |interval#0@@16|))))))))) (and (and (|JournalIntervals.__default.Disk__HasJournalRange#canCall| (Lit |journal#0@@24|) (Lit |interval#0@@16|)) (=> (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.Disk__HasJournalRange (Lit |journal#0@@24|) (Lit |interval#0@@16|))))) (and (|JournalIntervals.__default.Disk__JournalRange#canCall| (Lit |journal#0@@24|) (Lit |interval#0@@16|)) (|JournalRanges.__default.parseJournalRange#canCall| (Lit (JournalIntervals.__default.Disk__JournalRange (Lit |journal#0@@24|) (Lit |interval#0@@16|))))))) (and (=> (JournalIntervals.__default.Disk__HasJournal (Lit |journal#0@@24|) (Lit |interval#0@@16|)) (and (JournalIntervals.__default.Disk__HasJournalRange (Lit |journal#0@@24|) (Lit |interval#0@@16|)) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit (JournalIntervals.__default.Disk__JournalRange (Lit |journal#0@@24|) (Lit |interval#0@@16|))))))) (=> (and (JournalIntervals.__default.Disk__HasJournalRange (Lit |journal#0@@24|) (Lit |interval#0@@16|)) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit (JournalIntervals.__default.Disk__JournalRange (Lit |journal#0@@24|) (Lit |interval#0@@16|)))))) (JournalIntervals.__default.Disk__HasJournal (Lit |journal#0@@24|) (Lit |interval#0@@16|)))))) :qid |JournalI.221:7| :weight 3 :skolemid |1167| :pattern ( (JournalIntervals.__default.Disk__HasJournal (Lit |journal#0@@24|) (Lit |interval#0@@16|))) ))))
(assert (= (type Tclass.Journal.JournalEntry) TyType))
(assert (= (Tag Tclass.Journal.JournalEntry) Tagclass.Journal.JournalEntry))
(assert (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 Tclass.Journal.JournalEntry)) (and (= ($Box ($Unbox DatatypeTypeType bx@@80)) bx@@80) ($Is ($Unbox DatatypeTypeType bx@@80) Tclass.Journal.JournalEntry))) :qid |unknown.0:0| :skolemid |1174| :pattern ( ($IsBox bx@@80 Tclass.Journal.JournalEntry)) )))
(assert (forall ((arg0@@232 T@U) (arg1@@115 T@U) ) (! (= (type (JournalIntervals.__default.Disk__Journal arg0@@232 arg1@@115)) (SeqType BoxType)) :qid |funType:JournalIntervals.__default.Disk__Journal| :pattern ( (JournalIntervals.__default.Disk__Journal arg0@@232 arg1@@115)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|journal#0@@25| T@U) (|interval#0@@17| T@U) ) (!  (=> (and (and (= (type |journal#0@@25|) (SeqType BoxType)) (= (type |interval#0@@17|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__Journal#canCall| |journal#0@@25| |interval#0@@17|) (and (not (= 23 $FunctionContextHeight)) (and (and ($Is |journal#0@@25| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@17| Tclass.JournalIntervals.JournalInterval)) (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@17|) (JournalIntervals.__default.Disk__HasJournal |journal#0@@25| |interval#0@@17|)))))) ($Is (JournalIntervals.__default.Disk__Journal |journal#0@@25| |interval#0@@17|) (TSeq Tclass.Journal.JournalEntry))) :qid |JournalI.229:7| :skolemid |1175| :pattern ( (JournalIntervals.__default.Disk__Journal |journal#0@@25| |interval#0@@17|)) ))))
(assert (forall ((|journal#0@@26| T@U) (|interval#0@@18| T@U) ) (!  (=> (and (and (= (type |journal#0@@26|) (SeqType BoxType)) (= (type |interval#0@@18|) DatatypeTypeType)) (and ($Is |journal#0@@26| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@18| Tclass.JournalIntervals.JournalInterval))) (and (=> (|JournalIntervals.__default.Disk__Journal#requires| |journal#0@@26| |interval#0@@18|) (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@18|) (JournalIntervals.__default.Disk__HasJournal |journal#0@@26| |interval#0@@18|))) (=> (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@18|) (JournalIntervals.__default.Disk__HasJournal |journal#0@@26| |interval#0@@18|)) (|JournalIntervals.__default.Disk__Journal#requires| |journal#0@@26| |interval#0@@18|)))) :qid |JournalI.229:7| :skolemid |1176| :pattern ( (|JournalIntervals.__default.Disk__Journal#requires| |journal#0@@26| |interval#0@@18|)) )))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|journal#0@@27| T@U) (|interval#0@@19| T@U) ) (!  (=> (and (and (= (type |journal#0@@27|) (SeqType BoxType)) (= (type |interval#0@@19|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__Journal#canCall| |journal#0@@27| |interval#0@@19|) (and (not (= 23 $FunctionContextHeight)) (and (and ($Is |journal#0@@27| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@19| Tclass.JournalIntervals.JournalInterval)) (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@19|) (JournalIntervals.__default.Disk__HasJournal |journal#0@@27| |interval#0@@19|)))))) (and (and (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal#0@@27| |interval#0@@19|) (|JournalRanges.__default.parseJournalRange#canCall| (JournalIntervals.__default.Disk__JournalRange |journal#0@@27| |interval#0@@19|))) (= (JournalIntervals.__default.Disk__Journal |journal#0@@27| |interval#0@@19|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseJournalRange ($LS $LZ) (JournalIntervals.__default.Disk__JournalRange |journal#0@@27| |interval#0@@19|))))))) :qid |JournalI.229:7| :skolemid |1177| :pattern ( (JournalIntervals.__default.Disk__Journal |journal#0@@27| |interval#0@@19|)) ))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|journal#0@@28| T@U) (|interval#0@@20| T@U) ) (!  (=> (and (and (= (type |journal#0@@28|) (SeqType BoxType)) (= (type |interval#0@@20|) DatatypeTypeType)) (or (|JournalIntervals.__default.Disk__Journal#canCall| (Lit |journal#0@@28|) (Lit |interval#0@@20|)) (and (not (= 23 $FunctionContextHeight)) (and (and ($Is |journal#0@@28| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($Is |interval#0@@20| Tclass.JournalIntervals.JournalInterval)) (and (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.ValidJournalInterval (Lit |interval#0@@20|))))) (U_2_bool (Lit (bool_2_U (JournalIntervals.__default.Disk__HasJournal (Lit |journal#0@@28|) (Lit |interval#0@@20|)))))))))) (and (and (|JournalIntervals.__default.Disk__JournalRange#canCall| (Lit |journal#0@@28|) (Lit |interval#0@@20|)) (|JournalRanges.__default.parseJournalRange#canCall| (Lit (JournalIntervals.__default.Disk__JournalRange (Lit |journal#0@@28|) (Lit |interval#0@@20|))))) (= (JournalIntervals.__default.Disk__Journal (Lit |journal#0@@28|) (Lit |interval#0@@20|)) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit (JournalIntervals.__default.Disk__JournalRange (Lit |journal#0@@28|) (Lit |interval#0@@20|))))))))) :qid |JournalI.229:7| :weight 3 :skolemid |1178| :pattern ( (JournalIntervals.__default.Disk__Journal (Lit |journal#0@@28|) (Lit |interval#0@@20|))) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((|interval#0@@21| T@U) ) (!  (=> (and (= (type |interval#0@@21|) DatatypeTypeType) (or (|JournalIntervals.__default.NextStartPoint#canCall| |interval#0@@21|) (and (not (= 26 $FunctionContextHeight)) ($Is |interval#0@@21| Tclass.JournalIntervals.JournalInterval)))) true) :qid |JournalI.247:27| :skolemid |1191| :pattern ( (JournalIntervals.__default.NextStartPoint |interval#0@@21|)) ))))
(assert (forall ((|interval#0@@22| T@U) ) (!  (=> (and (= (type |interval#0@@22|) DatatypeTypeType) ($Is |interval#0@@22| Tclass.JournalIntervals.JournalInterval)) (and (=> (|JournalIntervals.__default.NextStartPoint#requires| |interval#0@@22|) true) (=> true (|JournalIntervals.__default.NextStartPoint#requires| |interval#0@@22|)))) :qid |JournalI.247:27| :skolemid |1192| :pattern ( (|JournalIntervals.__default.NextStartPoint#requires| |interval#0@@22|)) )))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((|interval#0@@23| T@U) ) (!  (=> (and (= (type |interval#0@@23|) DatatypeTypeType) (or (|JournalIntervals.__default.NextStartPoint#canCall| |interval#0@@23|) (and (not (= 26 $FunctionContextHeight)) ($Is |interval#0@@23| Tclass.JournalIntervals.JournalInterval)))) (and (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@23|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@23|)) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (< (+ (JournalIntervals.JournalInterval.start |interval#0@@23|) (JournalIntervals.JournalInterval.len |interval#0@@23|)) DiskLayout.__default.NumJournalBlocks) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@23|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@23|)))) (=> (<= DiskLayout.__default.NumJournalBlocks (+ (JournalIntervals.JournalInterval.start |interval#0@@23|) (JournalIntervals.JournalInterval.len |interval#0@@23|))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@23|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@23|)) |DiskLayout.__default.NumJournalBlocks#canCall|))) (= (JournalIntervals.__default.NextStartPoint |interval#0@@23|) (ite (< (+ (JournalIntervals.JournalInterval.start |interval#0@@23|) (JournalIntervals.JournalInterval.len |interval#0@@23|)) DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start |interval#0@@23|) (JournalIntervals.JournalInterval.len |interval#0@@23|)) (- (+ (JournalIntervals.JournalInterval.start |interval#0@@23|) (JournalIntervals.JournalInterval.len |interval#0@@23|)) DiskLayout.__default.NumJournalBlocks))))) :qid |JournalI.247:27| :skolemid |1193| :pattern ( (JournalIntervals.__default.NextStartPoint |interval#0@@23|)) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((|interval#0@@24| T@U) ) (!  (=> (and (= (type |interval#0@@24|) DatatypeTypeType) (or (|JournalIntervals.__default.NextStartPoint#canCall| (Lit |interval#0@@24|)) (and (not (= 26 $FunctionContextHeight)) ($Is |interval#0@@24| Tclass.JournalIntervals.JournalInterval)))) (and (and (and (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@24|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@24|))) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (U_2_bool (Lit (bool_2_U (< (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@24|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@24|))) DiskLayout.__default.NumJournalBlocks)))) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@24|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@24|))))) (=> (not (U_2_bool (Lit (bool_2_U (< (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@24|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@24|))) DiskLayout.__default.NumJournalBlocks))))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@24|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |interval#0@@24|))) |DiskLayout.__default.NumJournalBlocks#canCall|))) (= (JournalIntervals.__default.NextStartPoint (Lit |interval#0@@24|)) (ite (< (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@24|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@24|))) DiskLayout.__default.NumJournalBlocks) (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@24|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@24|))) (- (+ (JournalIntervals.JournalInterval.start (Lit |interval#0@@24|)) (JournalIntervals.JournalInterval.len (Lit |interval#0@@24|))) DiskLayout.__default.NumJournalBlocks))))) :qid |JournalI.247:27| :weight 3 :skolemid |1194| :pattern ( (JournalIntervals.__default.NextStartPoint (Lit |interval#0@@24|))) ))))
(assert (forall ((arg0@@233 T@U) (arg1@@116 T@U) ) (! (= (type (JournalIntervals.__default.concatIntervals arg0@@233 arg1@@116)) DatatypeTypeType) :qid |funType:JournalIntervals.__default.concatIntervals| :pattern ( (JournalIntervals.__default.concatIntervals arg0@@233 arg1@@116)) )))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((|a#0@@13| T@U) (|b#0@@13| T@U) ) (!  (=> (and (and (= (type |a#0@@13|) DatatypeTypeType) (= (type |b#0@@13|) DatatypeTypeType)) (or (|JournalIntervals.__default.concatIntervals#canCall| |a#0@@13| |b#0@@13|) (and (not (= 27 $FunctionContextHeight)) (and (and ($Is |a#0@@13| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@13| Tclass.JournalIntervals.JournalInterval)) (= (JournalIntervals.__default.NextStartPoint |a#0@@13|) (JournalIntervals.JournalInterval.start |b#0@@13|)))))) ($Is (JournalIntervals.__default.concatIntervals |a#0@@13| |b#0@@13|) Tclass.JournalIntervals.JournalInterval)) :qid |JournalI.255:28| :skolemid |1197| :pattern ( (JournalIntervals.__default.concatIntervals |a#0@@13| |b#0@@13|)) ))))
(assert (forall ((|a#0@@14| T@U) (|b#0@@14| T@U) ) (!  (=> (and (and (= (type |a#0@@14|) DatatypeTypeType) (= (type |b#0@@14|) DatatypeTypeType)) (and ($Is |a#0@@14| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@14| Tclass.JournalIntervals.JournalInterval))) (and (=> (|JournalIntervals.__default.concatIntervals#requires| |a#0@@14| |b#0@@14|) (= (JournalIntervals.__default.NextStartPoint |a#0@@14|) (JournalIntervals.JournalInterval.start |b#0@@14|))) (=> (= (JournalIntervals.__default.NextStartPoint |a#0@@14|) (JournalIntervals.JournalInterval.start |b#0@@14|)) (|JournalIntervals.__default.concatIntervals#requires| |a#0@@14| |b#0@@14|)))) :qid |JournalI.255:28| :skolemid |1198| :pattern ( (|JournalIntervals.__default.concatIntervals#requires| |a#0@@14| |b#0@@14|)) )))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((|a#0@@15| T@U) (|b#0@@15| T@U) ) (!  (=> (and (and (= (type |a#0@@15|) DatatypeTypeType) (= (type |b#0@@15|) DatatypeTypeType)) (or (|JournalIntervals.__default.concatIntervals#canCall| |a#0@@15| |b#0@@15|) (and (not (= 27 $FunctionContextHeight)) (and (and ($Is |a#0@@15| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@15| Tclass.JournalIntervals.JournalInterval)) (= (JournalIntervals.__default.NextStartPoint |a#0@@15|) (JournalIntervals.JournalInterval.start |b#0@@15|)))))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@15|) (and (JournalIntervals.JournalInterval.JournalInterval_q |a#0@@15|) (JournalIntervals.JournalInterval.JournalInterval_q |b#0@@15|))) (= (JournalIntervals.__default.concatIntervals |a#0@@15| |b#0@@15|) (|#JournalIntervals.JournalInterval.JournalInterval| (JournalIntervals.JournalInterval.start |a#0@@15|) (+ (JournalIntervals.JournalInterval.len |a#0@@15|) (JournalIntervals.JournalInterval.len |b#0@@15|)))))) :qid |JournalI.255:28| :skolemid |1199| :pattern ( (JournalIntervals.__default.concatIntervals |a#0@@15| |b#0@@15|)) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((|a#0@@16| T@U) (|b#0@@16| T@U) ) (!  (=> (and (and (= (type |a#0@@16|) DatatypeTypeType) (= (type |b#0@@16|) DatatypeTypeType)) (or (|JournalIntervals.__default.concatIntervals#canCall| (Lit |a#0@@16|) (Lit |b#0@@16|)) (and (not (= 27 $FunctionContextHeight)) (and (and ($Is |a#0@@16| Tclass.JournalIntervals.JournalInterval) ($Is |b#0@@16| Tclass.JournalIntervals.JournalInterval)) (= (LitInt (JournalIntervals.__default.NextStartPoint (Lit |a#0@@16|))) (LitInt (JournalIntervals.JournalInterval.start (Lit |b#0@@16|)))))))) (and (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@16|)) (and (JournalIntervals.JournalInterval.JournalInterval_q (Lit |a#0@@16|)) (JournalIntervals.JournalInterval.JournalInterval_q (Lit |b#0@@16|)))) (= (JournalIntervals.__default.concatIntervals (Lit |a#0@@16|) (Lit |b#0@@16|)) (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (JournalIntervals.JournalInterval.start (Lit |a#0@@16|))) (LitInt (+ (JournalIntervals.JournalInterval.len (Lit |a#0@@16|)) (JournalIntervals.JournalInterval.len (Lit |b#0@@16|))))))))) :qid |JournalI.255:28| :weight 3 :skolemid |1200| :pattern ( (JournalIntervals.__default.concatIntervals (Lit |a#0@@16|) (Lit |b#0@@16|))) ))))
(assert (= (type Tclass.DiskLayout.Location) TyType))
(assert (= (Tag Tclass.DiskLayout.Location) Tagclass.DiskLayout.Location))
(assert (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 Tclass.DiskLayout.Location)) (and (= ($Box ($Unbox DatatypeTypeType bx@@81)) bx@@81) ($Is ($Unbox DatatypeTypeType bx@@81) Tclass.DiskLayout.Location))) :qid |unknown.0:0| :skolemid |1284| :pattern ( ($IsBox bx@@81 Tclass.DiskLayout.Location)) )))
(assert  (and (and (forall ((arg0@@234 T@U) ) (! (= (type (JournalIntervals.__default.JournalIntervalOfLocation arg0@@234)) DatatypeTypeType) :qid |funType:JournalIntervals.__default.JournalIntervalOfLocation| :pattern ( (JournalIntervals.__default.JournalIntervalOfLocation arg0@@234)) )) (= (type StartFuel_DiskLayout._default.ValidJournalLocation) LayerTypeType)) (forall ((arg0@@235 Int) (arg1@@117 Int) ) (! (= (type (DiskLayout.__default.JournalRangeLocation arg0@@235 arg1@@117)) DatatypeTypeType) :qid |funType:DiskLayout.__default.JournalRangeLocation| :pattern ( (DiskLayout.__default.JournalRangeLocation arg0@@235 arg1@@117)) ))))
(assert  (=> (<= 36 $FunctionContextHeight) (forall ((|loc#0| T@U) ) (!  (=> (and (= (type |loc#0|) DatatypeTypeType) (or (|JournalIntervals.__default.JournalIntervalOfLocation#canCall| |loc#0|) (and (not (= 36 $FunctionContextHeight)) (and ($Is |loc#0| Tclass.DiskLayout.Location) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0|))))) (and (and (JournalIntervals.__default.ContiguousJournalInterval (JournalIntervals.__default.JournalIntervalOfLocation |loc#0|)) (|DiskLayout.Location#Equal| (DiskLayout.__default.JournalRangeLocation (JournalIntervals.JournalInterval.start (JournalIntervals.__default.JournalIntervalOfLocation |loc#0|)) (JournalIntervals.JournalInterval.len (JournalIntervals.__default.JournalIntervalOfLocation |loc#0|))) |loc#0|)) ($Is (JournalIntervals.__default.JournalIntervalOfLocation |loc#0|) Tclass.JournalIntervals.JournalInterval))) :qid |JournalI.448:48| :skolemid |1285| :pattern ( (JournalIntervals.__default.JournalIntervalOfLocation |loc#0|)) ))))
(assert (forall ((|loc#0@@0| T@U) ) (!  (=> (and (= (type |loc#0@@0|) DatatypeTypeType) ($Is |loc#0@@0| Tclass.DiskLayout.Location)) (and (=> (|JournalIntervals.__default.JournalIntervalOfLocation#requires| |loc#0@@0|) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@0|)) (=> (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@0|) (|JournalIntervals.__default.JournalIntervalOfLocation#requires| |loc#0@@0|)))) :qid |JournalI.448:48| :skolemid |1286| :pattern ( (|JournalIntervals.__default.JournalIntervalOfLocation#requires| |loc#0@@0|)) )))
(assert  (and (= (type MoreFuel_DiskLayout._default.ValidJournalLocation0) LayerTypeType) (= (type StartFuelAssert_DiskLayout._default.ValidJournalLocation) LayerTypeType)))
(assert  (=> (<= 36 $FunctionContextHeight) (forall ((|loc#0@@1| T@U) ) (!  (=> (and (= (type |loc#0@@1|) DatatypeTypeType) (or (|JournalIntervals.__default.JournalIntervalOfLocation#canCall| |loc#0@@1|) (and (not (= 36 $FunctionContextHeight)) (and ($Is |loc#0@@1| Tclass.DiskLayout.Location) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@1|))))) (and (and (and (DiskLayout.Location.Location_q |loc#0@@1|) |DiskLayout.__default.JournalStartAddr#canCall|) (DiskLayout.Location.Location_q |loc#0@@1|)) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation0)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation0)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation0) MoreFuel_DiskLayout._default.ValidJournalLocation0)) (= (JournalIntervals.__default.JournalIntervalOfLocation |loc#0@@1|) (|#JournalIntervals.JournalInterval.JournalInterval| (Div (- (DiskLayout.Location.addr |loc#0@@1|) DiskLayout.__default.JournalStartAddr) (LitInt 4096)) (Div (DiskLayout.Location.len |loc#0@@1|) (LitInt 4096))))))) :qid |JournalI.448:48| :skolemid |1287| :pattern ( (JournalIntervals.__default.JournalIntervalOfLocation |loc#0@@1|)) ))))
(assert (= (type MoreFuel_DiskLayout._default.ValidJournalLocation1) LayerTypeType))
(assert  (=> (<= 36 $FunctionContextHeight) (forall ((|loc#0@@2| T@U) ) (!  (=> (and (= (type |loc#0@@2|) DatatypeTypeType) (or (|JournalIntervals.__default.JournalIntervalOfLocation#canCall| (Lit |loc#0@@2|)) (and (not (= 36 $FunctionContextHeight)) (and ($Is |loc#0@@2| Tclass.DiskLayout.Location) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit |loc#0@@2|)))))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@2|)) |DiskLayout.__default.JournalStartAddr#canCall|) (DiskLayout.Location.Location_q (Lit |loc#0@@2|))) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation1)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation1)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation1) MoreFuel_DiskLayout._default.ValidJournalLocation1)) (= (JournalIntervals.__default.JournalIntervalOfLocation (Lit |loc#0@@2|)) (Lit (|#JournalIntervals.JournalInterval.JournalInterval| (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@2|)) DiskLayout.__default.JournalStartAddr) (LitInt 4096))) (LitInt (Div (DiskLayout.Location.len (Lit |loc#0@@2|)) (LitInt 4096))))))))) :qid |JournalI.448:48| :weight 3 :skolemid |1288| :pattern ( (JournalIntervals.__default.JournalIntervalOfLocation (Lit |loc#0@@2|))) ))))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@82)) bx@@82) ($Is ($Unbox intType bx@@82) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1290| :pattern ( ($IsBox bx@@82 Tclass.NativeTypes.uint64)) )))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@83)) bx@@83) ($Is ($Unbox intType bx@@83) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1310| :pattern ( ($IsBox bx@@83 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (and (=> ($Is |i#0@@13| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 128)) ($Is |i#0@@13| Tclass.NativeTypes.sbyte)))) :qid |unknown.0:0| :skolemid |1311| :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@14| T@U) ($h@@26 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@26) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.sbyte $h@@26)) :qid |unknown.0:0| :skolemid |1312| :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.sbyte $h@@26)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@84)) bx@@84) ($Is ($Unbox intType bx@@84) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1313| :pattern ( ($IsBox bx@@84 Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (and (=> ($Is |i#0@@15| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 256)) ($Is |i#0@@15| Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |1314| :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@16| T@U) ($h@@27 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@27) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.byte $h@@27)) :qid |unknown.0:0| :skolemid |1315| :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.byte $h@@27)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@85)) bx@@85) ($Is ($Unbox intType bx@@85) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1316| :pattern ( ($IsBox bx@@85 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (and (=> ($Is |i#0@@17| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768)) ($Is |i#0@@17| Tclass.NativeTypes.int16)))) :qid |unknown.0:0| :skolemid |1317| :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@18| T@U) ($h@@28 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.int16 $h@@28)) :qid |unknown.0:0| :skolemid |1318| :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.int16 $h@@28)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@86)) bx@@86) ($Is ($Unbox intType bx@@86) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1319| :pattern ( ($IsBox bx@@86 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (and (=> ($Is |i#0@@19| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 65536)) ($Is |i#0@@19| Tclass.NativeTypes.uint16)))) :qid |unknown.0:0| :skolemid |1320| :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@20| T@U) ($h@@29 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@29) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.uint16 $h@@29)) :qid |unknown.0:0| :skolemid |1321| :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.uint16 $h@@29)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@87)) bx@@87) ($Is ($Unbox intType bx@@87) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1322| :pattern ( ($IsBox bx@@87 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (and (=> ($Is |i#0@@21| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 2147483648)) ($Is |i#0@@21| Tclass.NativeTypes.int32)))) :qid |unknown.0:0| :skolemid |1323| :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@22| T@U) ($h@@30 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.int32 $h@@30)) :qid |unknown.0:0| :skolemid |1324| :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.int32 $h@@30)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@88)) bx@@88) ($Is ($Unbox intType bx@@88) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1325| :pattern ( ($IsBox bx@@88 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@23| T@U) ) (!  (=> (= (type |i#0@@23|) intType) (and (=> ($Is |i#0@@23| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@23|)) (< (U_2_int |i#0@@23|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@23|)) (< (U_2_int |i#0@@23|) 4294967296)) ($Is |i#0@@23| Tclass.NativeTypes.uint32)))) :qid |unknown.0:0| :skolemid |1326| :pattern ( ($Is |i#0@@23| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@24| T@U) ($h@@31 T@U) ) (!  (=> (and (= (type |i#0@@24|) intType) (= (type $h@@31) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint32 $h@@31)) :qid |unknown.0:0| :skolemid |1327| :pattern ( ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint32 $h@@31)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@89)) bx@@89) ($Is ($Unbox intType bx@@89) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1328| :pattern ( ($IsBox bx@@89 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@25| T@U) ) (!  (=> (= (type |i#0@@25|) intType) (and (=> ($Is |i#0@@25| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@25|)) (< (U_2_int |i#0@@25|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@25|)) (< (U_2_int |i#0@@25|) 9223372036854775808)) ($Is |i#0@@25| Tclass.NativeTypes.int64)))) :qid |unknown.0:0| :skolemid |1329| :pattern ( ($Is |i#0@@25| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@26| T@U) ($h@@32 T@U) ) (!  (=> (and (= (type |i#0@@26|) intType) (= (type $h@@32) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@26| Tclass.NativeTypes.int64 $h@@32)) :qid |unknown.0:0| :skolemid |1330| :pattern ( ($IsAlloc |i#0@@26| Tclass.NativeTypes.int64 $h@@32)) )))
(assert (forall ((|i#0@@27| T@U) ) (!  (=> (= (type |i#0@@27|) intType) (and (=> ($Is |i#0@@27| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@27|)) (< (U_2_int |i#0@@27|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@27|)) (< (U_2_int |i#0@@27|) 18446744073709551616)) ($Is |i#0@@27| Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |1331| :pattern ( ($Is |i#0@@27| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@28| T@U) ($h@@33 T@U) ) (!  (=> (and (= (type |i#0@@28|) intType) (= (type $h@@33) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@28| Tclass.NativeTypes.uint64 $h@@33)) :qid |unknown.0:0| :skolemid |1332| :pattern ( ($IsAlloc |i#0@@28| Tclass.NativeTypes.uint64 $h@@33)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@90)) bx@@90) ($Is ($Unbox intType bx@@90) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1333| :pattern ( ($IsBox bx@@90 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@29| T@U) ) (!  (=> (= (type |i#0@@29|) intType) (and (=> ($Is |i#0@@29| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@29|)) (< (U_2_int |i#0@@29|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@29|)) (< (U_2_int |i#0@@29|) 128)) ($Is |i#0@@29| Tclass.NativeTypes.nat8)))) :qid |unknown.0:0| :skolemid |1334| :pattern ( ($Is |i#0@@29| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@30| T@U) ($h@@34 T@U) ) (!  (=> (and (= (type |i#0@@30|) intType) (= (type $h@@34) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@30| Tclass.NativeTypes.nat8 $h@@34)) :qid |unknown.0:0| :skolemid |1335| :pattern ( ($IsAlloc |i#0@@30| Tclass.NativeTypes.nat8 $h@@34)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@91)) bx@@91) ($Is ($Unbox intType bx@@91) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1336| :pattern ( ($IsBox bx@@91 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@31| T@U) ) (!  (=> (= (type |i#0@@31|) intType) (and (=> ($Is |i#0@@31| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@31|)) (< (U_2_int |i#0@@31|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@31|)) (< (U_2_int |i#0@@31|) 32768)) ($Is |i#0@@31| Tclass.NativeTypes.nat16)))) :qid |unknown.0:0| :skolemid |1337| :pattern ( ($Is |i#0@@31| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@32| T@U) ($h@@35 T@U) ) (!  (=> (and (= (type |i#0@@32|) intType) (= (type $h@@35) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@32| Tclass.NativeTypes.nat16 $h@@35)) :qid |unknown.0:0| :skolemid |1338| :pattern ( ($IsAlloc |i#0@@32| Tclass.NativeTypes.nat16 $h@@35)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@92)) bx@@92) ($Is ($Unbox intType bx@@92) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1339| :pattern ( ($IsBox bx@@92 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@33| T@U) ) (!  (=> (= (type |i#0@@33|) intType) (and (=> ($Is |i#0@@33| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@33|)) (< (U_2_int |i#0@@33|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@33|)) (< (U_2_int |i#0@@33|) 2147483648)) ($Is |i#0@@33| Tclass.NativeTypes.nat32)))) :qid |unknown.0:0| :skolemid |1340| :pattern ( ($Is |i#0@@33| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@34| T@U) ($h@@36 T@U) ) (!  (=> (and (= (type |i#0@@34|) intType) (= (type $h@@36) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@34| Tclass.NativeTypes.nat32 $h@@36)) :qid |unknown.0:0| :skolemid |1341| :pattern ( ($IsAlloc |i#0@@34| Tclass.NativeTypes.nat32 $h@@36)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@93)) bx@@93) ($Is ($Unbox intType bx@@93) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1342| :pattern ( ($IsBox bx@@93 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@35| T@U) ) (!  (=> (= (type |i#0@@35|) intType) (and (=> ($Is |i#0@@35| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@35|)) (< (U_2_int |i#0@@35|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@35|)) (< (U_2_int |i#0@@35|) 9223372036854775808)) ($Is |i#0@@35| Tclass.NativeTypes.nat64)))) :qid |unknown.0:0| :skolemid |1343| :pattern ( ($Is |i#0@@35| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@36| T@U) ($h@@37 T@U) ) (!  (=> (and (= (type |i#0@@36|) intType) (= (type $h@@37) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@36| Tclass.NativeTypes.nat64 $h@@37)) :qid |unknown.0:0| :skolemid |1344| :pattern ( ($IsAlloc |i#0@@36| Tclass.NativeTypes.nat64 $h@@37)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@94)) bx@@94) ($Is ($Unbox refType bx@@94) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1345| :pattern ( ($IsBox bx@@94 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (and (=> ($Is $o@@11 Tclass.NativeTypes.__default) (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default))) (=> (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)) ($Is $o@@11 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1346| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@38 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@38) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@38) (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@38 $o@@12) alloc)))) (=> (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@38 $o@@12) alloc))) ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@38)))) :qid |unknown.0:0| :skolemid |1347| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@38)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.KeyType.Key) TyType))
(assert (= (Tag Tclass.KeyType.Key) Tagclass.KeyType.Key))
(assert (forall ((bx@@95 T@U) ) (!  (=> (and (= (type bx@@95) BoxType) ($IsBox bx@@95 Tclass.KeyType.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@95)) bx@@95) ($Is ($Unbox (SeqType BoxType) bx@@95) Tclass.KeyType.Key))) :qid |unknown.0:0| :skolemid |1348| :pattern ( ($IsBox bx@@95 Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@15| T@U) ) (!  (=> (= (type |s#0@@15|) (SeqType BoxType)) (and (=> ($Is |s#0@@15| Tclass.KeyType.Key) (and ($Is |s#0@@15| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@15|) (LitInt 1024)))) (=> (and ($Is |s#0@@15| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@15|) (LitInt 1024))) ($Is |s#0@@15| Tclass.KeyType.Key)))) :qid |unknown.0:0| :skolemid |1349| :pattern ( ($Is |s#0@@15| Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@16| T@U) ($h@@39 T@U) ) (!  (=> (and (= (type |s#0@@16|) (SeqType BoxType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |s#0@@16| Tclass.KeyType.Key $h@@39) ($IsAlloc |s#0@@16| (TSeq Tclass.NativeTypes.byte) $h@@39)) (=> ($IsAlloc |s#0@@16| (TSeq Tclass.NativeTypes.byte) $h@@39) ($IsAlloc |s#0@@16| Tclass.KeyType.Key $h@@39)))) :qid |unknown.0:0| :skolemid |1350| :pattern ( ($IsAlloc |s#0@@16| Tclass.KeyType.Key $h@@39)) )))
(assert (= (type Tclass.KeyType.__default) TyType))
(assert (= (Tag Tclass.KeyType.__default) Tagclass.KeyType.__default))
(assert (forall ((bx@@96 T@U) ) (!  (=> (and (= (type bx@@96) BoxType) ($IsBox bx@@96 Tclass.KeyType.__default)) (and (= ($Box ($Unbox refType bx@@96)) bx@@96) ($Is ($Unbox refType bx@@96) Tclass.KeyType.__default))) :qid |unknown.0:0| :skolemid |1351| :pattern ( ($IsBox bx@@96 Tclass.KeyType.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (and (=> ($Is $o@@13 Tclass.KeyType.__default) (or (= $o@@13 null) (= (dtype $o@@13) Tclass.KeyType.__default))) (=> (or (= $o@@13 null) (= (dtype $o@@13) Tclass.KeyType.__default)) ($Is $o@@13 Tclass.KeyType.__default)))) :qid |unknown.0:0| :skolemid |1352| :pattern ( ($Is $o@@13 Tclass.KeyType.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@40 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@40) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@14 Tclass.KeyType.__default $h@@40) (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@14) alloc)))) (=> (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@14) alloc))) ($IsAlloc $o@@14 Tclass.KeyType.__default $h@@40)))) :qid |unknown.0:0| :skolemid |1353| :pattern ( ($IsAlloc $o@@14 Tclass.KeyType.__default $h@@40)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) KeyType.__default.MaxLen) (< KeyType.__default.MaxLen 18446744073709551616)))))
(assert  (=> |KeyType.__default.MaxLen#requires| true))
(assert  (=> true |KeyType.__default.MaxLen#requires|))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert (= (type Tclass.Bounds.__default) TyType))
(assert (= (Tag Tclass.Bounds.__default) Tagclass.Bounds.__default))
(assert (forall ((bx@@97 T@U) ) (!  (=> (and (= (type bx@@97) BoxType) ($IsBox bx@@97 Tclass.Bounds.__default)) (and (= ($Box ($Unbox refType bx@@97)) bx@@97) ($Is ($Unbox refType bx@@97) Tclass.Bounds.__default))) :qid |unknown.0:0| :skolemid |1354| :pattern ( ($IsBox bx@@97 Tclass.Bounds.__default)) )))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (and (=> ($Is $o@@15 Tclass.Bounds.__default) (or (= $o@@15 null) (= (dtype $o@@15) Tclass.Bounds.__default))) (=> (or (= $o@@15 null) (= (dtype $o@@15) Tclass.Bounds.__default)) ($Is $o@@15 Tclass.Bounds.__default)))) :qid |unknown.0:0| :skolemid |1355| :pattern ( ($Is $o@@15 Tclass.Bounds.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@41 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@41) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@16 Tclass.Bounds.__default $h@@41) (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@41 $o@@16) alloc)))) (=> (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@41 $o@@16) alloc))) ($IsAlloc $o@@16 Tclass.Bounds.__default $h@@41)))) :qid |unknown.0:0| :skolemid |1356| :pattern ( ($IsAlloc $o@@16 Tclass.Bounds.__default $h@@41)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.NodeBlockSizeUint64) (< Bounds.__default.NodeBlockSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.NodeBlockSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.NodeBlockSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.NodeBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.NodeBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MinNodeBlockIndexUint64) (< Bounds.__default.MinNodeBlockIndexUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.MinNodeBlockIndexUint64#requires| true))
(assert  (=> true |Bounds.__default.MinNodeBlockIndexUint64#requires|))
(assert  (=> true (=> true (and (and (and (and (and |Bounds.__default.SuperblockSizeUint64#canCall| (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| |Bounds.__default.JournalBlockSizeUint64#canCall|)) |Bounds.__default.IndirectionTableBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) (= Bounds.__default.MinNodeBlockIndexUint64 (LitInt (Div (- (+ (+ (+ (Mul (LitInt 2) (LitInt Bounds.__default.SuperblockSizeUint64)) (Mul (LitInt Bounds.__default.DiskNumJournalBlocksUint64) (LitInt Bounds.__default.JournalBlockSizeUint64))) (Mul (LitInt 2) (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))) Bounds.__default.NodeBlockSizeUint64) 1) (LitInt Bounds.__default.NodeBlockSizeUint64))))))))
(assert  (=> true (=> true (and (and (and (and (and |Bounds.__default.SuperblockSizeUint64#canCall| (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| |Bounds.__default.JournalBlockSizeUint64#canCall|)) |Bounds.__default.IndirectionTableBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) (= Bounds.__default.MinNodeBlockIndexUint64 (LitInt (Div (- (+ (+ (+ (Mul (LitInt 2) (LitInt Bounds.__default.SuperblockSizeUint64)) (Mul (LitInt Bounds.__default.DiskNumJournalBlocksUint64) (LitInt Bounds.__default.JournalBlockSizeUint64))) (Mul (LitInt 2) (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))) Bounds.__default.NodeBlockSizeUint64) 1) (LitInt Bounds.__default.NodeBlockSizeUint64))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.SuperblockSizeUint64) (< Bounds.__default.SuperblockSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.SuperblockSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.SuperblockSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.SuperblockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (= Bounds.__default.SuperblockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.JournalBlockSizeUint64) (< Bounds.__default.JournalBlockSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.JournalBlockSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.JournalBlockSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.JournalBlockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (= Bounds.__default.JournalBlockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.DiskNumJournalBlocksUint64) (< Bounds.__default.DiskNumJournalBlocksUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.DiskNumJournalBlocksUint64#requires| true))
(assert  (=> true |Bounds.__default.DiskNumJournalBlocksUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.DiskNumJournalBlocksUint64 (LitInt (Mul (LitInt 64) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.DiskNumJournalBlocksUint64 (LitInt (Mul (LitInt 64) (LitInt 1024)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.IndirectionTableBlockSizeUint64) (< Bounds.__default.IndirectionTableBlockSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.IndirectionTableBlockSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.IndirectionTableBlockSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 24) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 24) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (and (and (<= (LitInt Bounds.__default.IndirectionTableBlockSizeUint64) Bounds.__default.LargestBlockSizeOfAnyTypeUint64) (<= (LitInt Bounds.__default.NodeBlockSizeUint64) Bounds.__default.LargestBlockSizeOfAnyTypeUint64)) (and (<= (LitInt 0) Bounds.__default.LargestBlockSizeOfAnyTypeUint64) (< Bounds.__default.LargestBlockSizeOfAnyTypeUint64 18446744073709551616))))))
(assert  (=> |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires| true))
(assert  (=> true |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires|))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.LargestBlockSizeOfAnyTypeUint64 (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.LargestBlockSizeOfAnyTypeUint64 (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxTotalBucketWeightUint64) (< Bounds.__default.MaxTotalBucketWeightUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.MaxTotalBucketWeightUint64#requires| true))
(assert  (=> true |Bounds.__default.MaxTotalBucketWeightUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.MaxTotalBucketWeightUint64 (LitInt (- (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)) 65536))))))
(assert  (=> true (=> true (= Bounds.__default.MaxTotalBucketWeightUint64 (LitInt (- (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)) 65536))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxCacheSizeUint64) (< Bounds.__default.MaxCacheSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.MaxCacheSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.MaxCacheSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.MaxCacheSizeUint64 (LitInt 100)))))
(assert  (=> true (=> true (= Bounds.__default.MaxCacheSizeUint64 (LitInt 100)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxNumChildrenUint64) (< Bounds.__default.MaxNumChildrenUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.MaxNumChildrenUint64#requires| true))
(assert  (=> true |Bounds.__default.MaxNumChildrenUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.MaxNumChildrenUint64 (LitInt 8)))))
(assert  (=> true (=> true (= Bounds.__default.MaxNumChildrenUint64 (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.FlushTriggerWeightUint64) (< Bounds.__default.FlushTriggerWeightUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.FlushTriggerWeightUint64#requires| true))
(assert  (=> true |Bounds.__default.FlushTriggerWeightUint64#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeightUint64 (LitInt (Div Bounds.__default.MaxTotalBucketWeightUint64 (LitInt 8))))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeightUint64 (LitInt (Div Bounds.__default.MaxTotalBucketWeightUint64 (LitInt 8))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.NumBlocksUint64) (< Bounds.__default.NumBlocksUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.NumBlocksUint64#requires| true))
(assert  (=> true |Bounds.__default.NumBlocksUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.NumBlocksUint64 (LitInt 1048576)))))
(assert  (=> true (=> true (= Bounds.__default.NumBlocksUint64 (LitInt 1048576)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.IndirectionTableMaxSizeUint64) (< Bounds.__default.IndirectionTableMaxSizeUint64 18446744073709551616)))))
(assert  (=> |Bounds.__default.IndirectionTableMaxSizeUint64#requires| true))
(assert  (=> true |Bounds.__default.IndirectionTableMaxSizeUint64#requires|))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableMaxSizeUint64 (LitInt 4294967296)))))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableMaxSizeUint64 (LitInt 4294967296)))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.SuperblockSize#requires| true))
(assert  (=> true |Bounds.__default.SuperblockSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.SuperblockSizeUint64#canCall| (= Bounds.__default.SuperblockSize (LitInt Bounds.__default.SuperblockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.SuperblockSizeUint64#canCall| (= Bounds.__default.SuperblockSize (LitInt Bounds.__default.SuperblockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.IndirectionTableBlockSize#requires| true))
(assert  (=> true |Bounds.__default.IndirectionTableBlockSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.IndirectionTableBlockSize (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.IndirectionTableBlockSize (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.NodeBlockSize#requires| true))
(assert  (=> true |Bounds.__default.NodeBlockSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.NodeBlockSizeUint64#canCall| (= Bounds.__default.NodeBlockSize (LitInt Bounds.__default.NodeBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.NodeBlockSizeUint64#canCall| (= Bounds.__default.NodeBlockSize (LitInt Bounds.__default.NodeBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.MinNodeBlockIndex#requires| true))
(assert  (=> true |Bounds.__default.MinNodeBlockIndex#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MinNodeBlockIndexUint64#canCall| (= Bounds.__default.MinNodeBlockIndex (LitInt Bounds.__default.MinNodeBlockIndexUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MinNodeBlockIndexUint64#canCall| (= Bounds.__default.MinNodeBlockIndex (LitInt Bounds.__default.MinNodeBlockIndexUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.MaxNumChildren#requires| true))
(assert  (=> true |Bounds.__default.MaxNumChildren#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MaxNumChildrenUint64#canCall| (= Bounds.__default.MaxNumChildren (LitInt Bounds.__default.MaxNumChildrenUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxNumChildrenUint64#canCall| (= Bounds.__default.MaxNumChildren (LitInt Bounds.__default.MaxNumChildrenUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.MaxTotalBucketWeight#requires| true))
(assert  (=> true |Bounds.__default.MaxTotalBucketWeight#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.MaxTotalBucketWeight (LitInt Bounds.__default.MaxTotalBucketWeightUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.MaxTotalBucketWeight (LitInt Bounds.__default.MaxTotalBucketWeightUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.MaxCacheSize#requires| true))
(assert  (=> true |Bounds.__default.MaxCacheSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.MaxCacheSizeUint64#canCall| (= Bounds.__default.MaxCacheSize (LitInt Bounds.__default.MaxCacheSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxCacheSizeUint64#canCall| (= Bounds.__default.MaxCacheSize (LitInt Bounds.__default.MaxCacheSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.FlushTriggerWeight#requires| true))
(assert  (=> true |Bounds.__default.FlushTriggerWeight#requires|))
(assert  (=> true (=> true (and |Bounds.__default.FlushTriggerWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeight (LitInt Bounds.__default.FlushTriggerWeightUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.FlushTriggerWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeight (LitInt Bounds.__default.FlushTriggerWeightUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.NumBlocks#requires| true))
(assert  (=> true |Bounds.__default.NumBlocks#requires|))
(assert  (=> true (=> true (and |Bounds.__default.NumBlocksUint64#canCall| (= Bounds.__default.NumBlocks (LitInt Bounds.__default.NumBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.NumBlocksUint64#canCall| (= Bounds.__default.NumBlocks (LitInt Bounds.__default.NumBlocksUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.IndirectionTableMaxSize#requires| true))
(assert  (=> true |Bounds.__default.IndirectionTableMaxSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| (= Bounds.__default.IndirectionTableMaxSize (LitInt Bounds.__default.IndirectionTableMaxSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| (= Bounds.__default.IndirectionTableMaxSize (LitInt Bounds.__default.IndirectionTableMaxSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.JournalBlockSize#requires| true))
(assert  (=> true |Bounds.__default.JournalBlockSize#requires|))
(assert  (=> true (=> true (and |Bounds.__default.JournalBlockSizeUint64#canCall| (= Bounds.__default.JournalBlockSize (LitInt Bounds.__default.JournalBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.JournalBlockSizeUint64#canCall| (= Bounds.__default.JournalBlockSize (LitInt Bounds.__default.JournalBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert  (=> |Bounds.__default.DiskNumJournalBlocks#requires| true))
(assert  (=> true |Bounds.__default.DiskNumJournalBlocks#requires|))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= Bounds.__default.DiskNumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= Bounds.__default.DiskNumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@16 T@U) ) (!  (=> (= (type d@@16) DatatypeTypeType) (and (=> (Options.Option.None_q d@@16) (= (DatatypeCtorId d@@16) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@16) |##Options.Option.None|) (Options.Option.None_q d@@16)))) :qid |unknown.0:0| :skolemid |1357| :pattern ( (Options.Option.None_q d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) (Options.Option.None_q d@@17)) (= d@@17 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1358| :pattern ( (Options.Option.None_q d@@17)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1359| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@42 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@42) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@42)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@42)) :qid |unknown.0:0| :skolemid |1360| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@42)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |1361| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (= (type d@@18) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@18) (= (DatatypeCtorId d@@18) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@18) |##Options.Option.Some|) (Options.Option.Some_q d@@18)))) :qid |unknown.0:0| :skolemid |1362| :pattern ( (Options.Option.Some_q d@@18)) )))
(assert (forall ((d@@19 T@U) ) (!  (=> (and (= (type d@@19) DatatypeTypeType) (Options.Option.Some_q d@@19)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@19 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsd.2:36| :skolemid |1363| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1364| :pattern ( (Options.Option.Some_q d@@19)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4)) (=> ($IsBox |a#7#0#0@@0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |1365| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@43 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@43)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@43) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@43)) (=> ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@43) ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@43)))) :qid |unknown.0:0| :skolemid |1366| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@43)) )))
(assert (forall ((d@@20 T@U) (Options.Option$V@@6 T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (= (type d@@20) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@44) (and (Options.Option.Some_q d@@20) ($IsAlloc d@@20 (Tclass.Options.Option Options.Option$V@@6) $h@@44)))) ($IsAllocBox (Options.Option.value d@@20) Options.Option$V@@6 $h@@44)) :qid |unknown.0:0| :skolemid |1367| :pattern ( ($IsAllocBox (Options.Option.value d@@20) Options.Option$V@@6 $h@@44)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsd.2:36| :skolemid |1368| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsd.2:36| :skolemid |1369| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsd.2:36| :skolemid |1370| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) (|$IsA#Options.Option| d@@21)) (or (Options.Option.None_q d@@21) (Options.Option.Some_q d@@21))) :qid |unknown.0:0| :skolemid |1371| :pattern ( (|$IsA#Options.Option| d@@21)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@22 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@22) DatatypeTypeType)) ($Is d@@22 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@22) (Options.Option.Some_q d@@22))) :qid |unknown.0:0| :skolemid |1372| :pattern ( (Options.Option.Some_q d@@22) ($Is d@@22 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@22) ($Is d@@22 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@118 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@118) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (Options.Option.None_q a@@118) (Options.Option.None_q b@@67))) (and (=> (|Options.Option#Equal| a@@118 b@@67) true) (=> true (|Options.Option#Equal| a@@118 b@@67)))) :qid |unknown.0:0| :skolemid |1373| :pattern ( (|Options.Option#Equal| a@@118 b@@67) (Options.Option.None_q a@@118)) :pattern ( (|Options.Option#Equal| a@@118 b@@67) (Options.Option.None_q b@@67)) )))
(assert (forall ((a@@119 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@119) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (Options.Option.Some_q a@@119) (Options.Option.Some_q b@@68))) (and (=> (|Options.Option#Equal| a@@119 b@@68) (= (Options.Option.value a@@119) (Options.Option.value b@@68))) (=> (= (Options.Option.value a@@119) (Options.Option.value b@@68)) (|Options.Option#Equal| a@@119 b@@68)))) :qid |unknown.0:0| :skolemid |1374| :pattern ( (|Options.Option#Equal| a@@119 b@@68) (Options.Option.Some_q a@@119)) :pattern ( (|Options.Option#Equal| a@@119 b@@68) (Options.Option.Some_q b@@68)) )))
(assert (forall ((a@@120 T@U) (b@@69 T@U) ) (!  (=> (and (= (type a@@120) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@120 b@@69) (= a@@120 b@@69)) (=> (= a@@120 b@@69) (|Options.Option#Equal| a@@120 b@@69)))) :qid |unknown.0:0| :skolemid |1375| :pattern ( (|Options.Option#Equal| a@@120 b@@69)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@98)) bx@@98) ($Is ($Unbox refType bx@@98) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1376| :pattern ( ($IsBox bx@@98 Tclass.Options.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (and (=> ($Is $o@@17 Tclass.Options.__default) (or (= $o@@17 null) (= (dtype $o@@17) Tclass.Options.__default))) (=> (or (= $o@@17 null) (= (dtype $o@@17) Tclass.Options.__default)) ($Is $o@@17 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1377| :pattern ( ($Is $o@@17 Tclass.Options.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@45 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@45) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@18 Tclass.Options.__default $h@@45) (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@45 $o@@18) alloc)))) (=> (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@45 $o@@18) alloc))) ($IsAlloc $o@@18 Tclass.Options.__default $h@@45)))) :qid |unknown.0:0| :skolemid |1378| :pattern ( ($IsAlloc $o@@18 Tclass.Options.__default $h@@45)) )))
(assert (forall ((arg0@@236 T@U) (arg1@@118 T@U) (arg2@@63 T@U) (arg3@@41 T@U) (arg4@@28 T@U) ) (! (= (type (Options.__default.MapOption arg0@@236 arg1@@118 arg2@@63 arg3@@41 arg4@@28)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@236 arg1@@118 arg2@@63 arg3@@41 arg4@@28)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@19|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@19|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@19| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@19 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@19) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@19 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@19| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@19))))) (= (MapType1Select (MapType0Select $h0 $o@@19) $f) (MapType1Select (MapType0Select $h1 $o@@19) $f)))) :qid |unknown.0:0| :skolemid |1379| :no-pattern (type $o@@19) :no-pattern (type $f) :no-pattern (U_2_int $o@@19) :no-pattern (U_2_bool $o@@19) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@19|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@19|))) :qid |unknown.0:0| :skolemid |1380| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@19|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap T@U) (|opt#0@@0| T@U) (|f#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@20|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|) (and (and (and ($IsGoodHeap $Heap) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@20| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@20| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@20| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1381| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@0 T@U) (|opt#0@@1| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@21|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@0) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@21| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@21|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@21| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@21| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@21|)))) :qid |unknown.0:0| :skolemid |1382| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@21|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@1 T@U) (|opt#0@@2| T@U) (|f#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@22|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@22|) (and (and (and ($IsGoodHeap $Heap@@1) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@22| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@22| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@22|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#1| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@22| |v#1|)))))) :qid |unknown.0:0| :skolemid |1383| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@22|)) ))))
(assert (forall ((arg0@@237 T@U) (arg1@@119 T@U) (arg2@@64 T@U) (arg3@@42 T@U) (arg4@@29 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@237 arg1@@119 arg2@@64 arg3@@42 arg4@@29)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@237 arg1@@119 arg2@@64 arg3@@42 arg4@@29)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@23|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@23| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@20 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@20) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@20 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@23| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@20))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@20) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@20) $f@@0)))) :qid |unknown.0:0| :skolemid |1384| :no-pattern (type $o@@20) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@20) :no-pattern (U_2_bool $o@@20) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@23|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@23|))) :qid |unknown.0:0| :skolemid |1385| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@23|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@4| T@U) (|f#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@24|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@24| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@24| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@24| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1386| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@5| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@25| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@25|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@25| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@25| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@25|)))) :qid |unknown.0:0| :skolemid |1387| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@25|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@6| T@U) (|f#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@26|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@26|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@26| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@26| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@26|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#1@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@26| |v#1@@0|)))))) :qid |unknown.0:0| :skolemid |1388| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@26|)) ))))
(assert (forall ((arg0@@238 Int) (arg1@@120 Int) ) (! (= (type (|#DiskLayout.Location.Location| arg0@@238 arg1@@120)) DatatypeTypeType) :qid |funType:#DiskLayout.Location.Location| :pattern ( (|#DiskLayout.Location.Location| arg0@@238 arg1@@120)) )))
(assert (forall ((|a#0#0#0@@0| Int) (|a#0#1#0@@0| Int) ) (! (= (DatatypeCtorId (|#DiskLayout.Location.Location| |a#0#0#0@@0| |a#0#1#0@@0|)) |##DiskLayout.Location.Location|) :qid |DiskLayo.11:32| :skolemid |1389| :pattern ( (|#DiskLayout.Location.Location| |a#0#0#0@@0| |a#0#1#0@@0|)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (= (type d@@23) DatatypeTypeType) (and (=> (DiskLayout.Location.Location_q d@@23) (= (DatatypeCtorId d@@23) |##DiskLayout.Location.Location|)) (=> (= (DatatypeCtorId d@@23) |##DiskLayout.Location.Location|) (DiskLayout.Location.Location_q d@@23)))) :qid |unknown.0:0| :skolemid |1390| :pattern ( (DiskLayout.Location.Location_q d@@23)) )))
(assert (forall ((d@@24 T@U) ) (!  (=> (and (= (type d@@24) DatatypeTypeType) (DiskLayout.Location.Location_q d@@24)) (exists ((|a#1#0#0@@0| Int) (|a#1#1#0@@0| Int) ) (! (= d@@24 (|#DiskLayout.Location.Location| |a#1#0#0@@0| |a#1#1#0@@0|)) :qid |DiskLayo.11:32| :skolemid |1391| ))) :qid |unknown.0:0| :skolemid |1392| :pattern ( (DiskLayout.Location.Location_q d@@24)) )))
(assert (forall ((|a#2#0#0@@0| Int) (|a#2#1#0@@0| Int) ) (!  (and (=> ($Is (|#DiskLayout.Location.Location| |a#2#0#0@@0| |a#2#1#0@@0|) Tclass.DiskLayout.Location) (and ($Is (int_2_U |a#2#0#0@@0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#2#1#0@@0|) Tclass.NativeTypes.uint64))) (=> (and ($Is (int_2_U |a#2#0#0@@0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#2#1#0@@0|) Tclass.NativeTypes.uint64)) ($Is (|#DiskLayout.Location.Location| |a#2#0#0@@0| |a#2#1#0@@0|) Tclass.DiskLayout.Location))) :qid |DiskLayo.11:32| :skolemid |1393| :pattern ( ($Is (|#DiskLayout.Location.Location| |a#2#0#0@@0| |a#2#1#0@@0|) Tclass.DiskLayout.Location)) )))
(assert (forall ((|a#3#0#0@@0| Int) (|a#3#1#0@@0| Int) ($h@@46 T@U) ) (!  (=> (and (= (type $h@@46) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@46)) (and (=> ($IsAlloc (|#DiskLayout.Location.Location| |a#3#0#0@@0| |a#3#1#0@@0|) Tclass.DiskLayout.Location $h@@46) (and ($IsAlloc (int_2_U |a#3#0#0@@0|) Tclass.NativeTypes.uint64 $h@@46) ($IsAlloc (int_2_U |a#3#1#0@@0|) Tclass.NativeTypes.uint64 $h@@46))) (=> (and ($IsAlloc (int_2_U |a#3#0#0@@0|) Tclass.NativeTypes.uint64 $h@@46) ($IsAlloc (int_2_U |a#3#1#0@@0|) Tclass.NativeTypes.uint64 $h@@46)) ($IsAlloc (|#DiskLayout.Location.Location| |a#3#0#0@@0| |a#3#1#0@@0|) Tclass.DiskLayout.Location $h@@46)))) :qid |DiskLayo.11:32| :skolemid |1394| :pattern ( ($IsAlloc (|#DiskLayout.Location.Location| |a#3#0#0@@0| |a#3#1#0@@0|) Tclass.DiskLayout.Location $h@@46)) )))
(assert (forall ((d@@25 T@U) ($h@@47 T@U) ) (!  (=> (and (and (= (type d@@25) DatatypeTypeType) (= (type $h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@47) (and (DiskLayout.Location.Location_q d@@25) ($IsAlloc d@@25 Tclass.DiskLayout.Location $h@@47)))) ($IsAlloc (int_2_U (DiskLayout.Location.addr d@@25)) Tclass.NativeTypes.uint64 $h@@47)) :qid |unknown.0:0| :skolemid |1395| :pattern ( ($IsAlloc (int_2_U (DiskLayout.Location.addr d@@25)) Tclass.NativeTypes.uint64 $h@@47)) )))
(assert (forall ((d@@26 T@U) ($h@@48 T@U) ) (!  (=> (and (and (= (type d@@26) DatatypeTypeType) (= (type $h@@48) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@48) (and (DiskLayout.Location.Location_q d@@26) ($IsAlloc d@@26 Tclass.DiskLayout.Location $h@@48)))) ($IsAlloc (int_2_U (DiskLayout.Location.len d@@26)) Tclass.NativeTypes.uint64 $h@@48)) :qid |unknown.0:0| :skolemid |1396| :pattern ( ($IsAlloc (int_2_U (DiskLayout.Location.len d@@26)) Tclass.NativeTypes.uint64 $h@@48)) )))
(assert (forall ((|a#4#0#0@@0| Int) (|a#4#1#0@@0| Int) ) (! (= (|#DiskLayout.Location.Location| (LitInt |a#4#0#0@@0|) (LitInt |a#4#1#0@@0|)) (Lit (|#DiskLayout.Location.Location| |a#4#0#0@@0| |a#4#1#0@@0|))) :qid |DiskLayo.11:32| :skolemid |1397| :pattern ( (|#DiskLayout.Location.Location| (LitInt |a#4#0#0@@0|) (LitInt |a#4#1#0@@0|))) )))
(assert (forall ((|a#5#0#0@@1| Int) (|a#5#1#0@@0| Int) ) (! (= (DiskLayout.Location.addr (|#DiskLayout.Location.Location| |a#5#0#0@@1| |a#5#1#0@@0|)) |a#5#0#0@@1|) :qid |DiskLayo.11:32| :skolemid |1398| :pattern ( (|#DiskLayout.Location.Location| |a#5#0#0@@1| |a#5#1#0@@0|)) )))
(assert (forall ((|a#6#0#0@@1| Int) (|a#6#1#0@@0| Int) ) (! (= (DiskLayout.Location.len (|#DiskLayout.Location.Location| |a#6#0#0@@1| |a#6#1#0@@0|)) |a#6#1#0@@0|) :qid |DiskLayo.11:32| :skolemid |1399| :pattern ( (|#DiskLayout.Location.Location| |a#6#0#0@@1| |a#6#1#0@@0|)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (and (= (type d@@27) DatatypeTypeType) (|$IsA#DiskLayout.Location| d@@27)) (DiskLayout.Location.Location_q d@@27)) :qid |unknown.0:0| :skolemid |1400| :pattern ( (|$IsA#DiskLayout.Location| d@@27)) )))
(assert (forall ((d@@28 T@U) ) (!  (=> (and (= (type d@@28) DatatypeTypeType) ($Is d@@28 Tclass.DiskLayout.Location)) (DiskLayout.Location.Location_q d@@28)) :qid |unknown.0:0| :skolemid |1401| :pattern ( (DiskLayout.Location.Location_q d@@28) ($Is d@@28 Tclass.DiskLayout.Location)) )))
(assert (forall ((a@@121 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@121) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) true) (and (=> (|DiskLayout.Location#Equal| a@@121 b@@70) (and (= (DiskLayout.Location.addr a@@121) (DiskLayout.Location.addr b@@70)) (= (DiskLayout.Location.len a@@121) (DiskLayout.Location.len b@@70)))) (=> (and (= (DiskLayout.Location.addr a@@121) (DiskLayout.Location.addr b@@70)) (= (DiskLayout.Location.len a@@121) (DiskLayout.Location.len b@@70))) (|DiskLayout.Location#Equal| a@@121 b@@70)))) :qid |unknown.0:0| :skolemid |1402| :pattern ( (|DiskLayout.Location#Equal| a@@121 b@@70)) )))
(assert (forall ((a@@122 T@U) (b@@71 T@U) ) (!  (=> (and (= (type a@@122) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (=> (|DiskLayout.Location#Equal| a@@122 b@@71) (= a@@122 b@@71)) (=> (= a@@122 b@@71) (|DiskLayout.Location#Equal| a@@122 b@@71)))) :qid |unknown.0:0| :skolemid |1403| :pattern ( (|DiskLayout.Location#Equal| a@@122 b@@71)) )))
(assert (= (type Tclass.DiskLayout.__default) TyType))
(assert (= (Tag Tclass.DiskLayout.__default) Tagclass.DiskLayout.__default))
(assert (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 Tclass.DiskLayout.__default)) (and (= ($Box ($Unbox refType bx@@99)) bx@@99) ($Is ($Unbox refType bx@@99) Tclass.DiskLayout.__default))) :qid |unknown.0:0| :skolemid |1404| :pattern ( ($IsBox bx@@99 Tclass.DiskLayout.__default)) )))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (and (=> ($Is $o@@21 Tclass.DiskLayout.__default) (or (= $o@@21 null) (= (dtype $o@@21) Tclass.DiskLayout.__default))) (=> (or (= $o@@21 null) (= (dtype $o@@21) Tclass.DiskLayout.__default)) ($Is $o@@21 Tclass.DiskLayout.__default)))) :qid |unknown.0:0| :skolemid |1405| :pattern ( ($Is $o@@21 Tclass.DiskLayout.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@49 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@49) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@22 Tclass.DiskLayout.__default $h@@49) (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@49 $o@@22) alloc)))) (=> (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@49 $o@@22) alloc))) ($IsAlloc $o@@22 Tclass.DiskLayout.__default $h@@49)))) :qid |unknown.0:0| :skolemid |1406| :pattern ( ($IsAlloc $o@@22 Tclass.DiskLayout.__default $h@@49)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.NumJournalBlocks) (< DiskLayout.__default.NumJournalBlocks 18446744073709551616)))))
(assert  (=> |DiskLayout.__default.NumJournalBlocks#requires| true))
(assert  (=> true |DiskLayout.__default.NumJournalBlocks#requires|))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= DiskLayout.__default.NumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= DiskLayout.__default.NumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.IndirectionTableMaxLength) (< DiskLayout.__default.IndirectionTableMaxLength 18446744073709551616)))))
(assert  (=> |DiskLayout.__default.IndirectionTableMaxLength#requires| true))
(assert  (=> true |DiskLayout.__default.IndirectionTableMaxLength#requires|))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= DiskLayout.__default.IndirectionTableMaxLength (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= DiskLayout.__default.IndirectionTableMaxLength (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.IndirectionTable1Addr) (< DiskLayout.__default.IndirectionTable1Addr 18446744073709551616)))))
(assert  (=> |DiskLayout.__default.IndirectionTable1Addr#requires| true))
(assert  (=> true |DiskLayout.__default.IndirectionTable1Addr#requires|))
(assert  (=> true (=> true (and |DiskLayout.__default.NumJournalBlocks#canCall| (= DiskLayout.__default.IndirectionTable1Addr (LitInt (+ (Mul (LitInt 2) (LitInt 4096)) (Mul (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt 4096)))))))))
(assert  (=> true (=> true (and |DiskLayout.__default.NumJournalBlocks#canCall| (= DiskLayout.__default.IndirectionTable1Addr (LitInt (+ (Mul (LitInt 2) (LitInt 4096)) (Mul (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt 4096)))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.IndirectionTable2Addr) (< DiskLayout.__default.IndirectionTable2Addr 18446744073709551616)))))
(assert  (=> |DiskLayout.__default.IndirectionTable2Addr#requires| true))
(assert  (=> true |DiskLayout.__default.IndirectionTable2Addr#requires|))
(assert  (=> true (=> true (and (and |DiskLayout.__default.IndirectionTable1Addr#canCall| |DiskLayout.__default.IndirectionTableMaxLength#canCall|) (= DiskLayout.__default.IndirectionTable2Addr (LitInt (+ DiskLayout.__default.IndirectionTable1Addr DiskLayout.__default.IndirectionTableMaxLength)))))))
(assert  (=> true (=> true (and (and |DiskLayout.__default.IndirectionTable1Addr#canCall| |DiskLayout.__default.IndirectionTableMaxLength#canCall|) (= DiskLayout.__default.IndirectionTable2Addr (LitInt (+ DiskLayout.__default.IndirectionTable1Addr DiskLayout.__default.IndirectionTableMaxLength)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.JournalStartAddr) (< DiskLayout.__default.JournalStartAddr 18446744073709551616)))))
(assert  (=> |DiskLayout.__default.JournalStartAddr#requires| true))
(assert  (=> true |DiskLayout.__default.JournalStartAddr#requires|))
(assert  (=> true (=> true (= DiskLayout.__default.JournalStartAddr (LitInt (Mul (LitInt 2) (LitInt 4096)))))))
(assert  (=> true (=> true (= DiskLayout.__default.JournalStartAddr (LitInt (Mul (LitInt 2) (LitInt 4096)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) DiskLayout.__default.JournalEndAddr) (< DiskLayout.__default.JournalEndAddr 18446744073709551616)))))
(assert  (=> |DiskLayout.__default.JournalEndAddr#requires| true))
(assert  (=> true |DiskLayout.__default.JournalEndAddr#requires|))
(assert  (=> true (=> true (and (and |DiskLayout.__default.JournalStartAddr#canCall| |DiskLayout.__default.NumJournalBlocks#canCall|) (= DiskLayout.__default.JournalEndAddr (LitInt (+ DiskLayout.__default.JournalStartAddr (Mul (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt 4096)))))))))
(assert  (=> true (=> true (and (and |DiskLayout.__default.JournalStartAddr#canCall| |DiskLayout.__default.NumJournalBlocks#canCall|) (= DiskLayout.__default.JournalEndAddr (LitInt (+ DiskLayout.__default.JournalStartAddr (Mul (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt 4096)))))))))
(assert  (=> true (forall ((|point#0| Int) ) (!  (=> (or (|DiskLayout.__default.JournalPoint#canCall| |point#0|) (and (and (<= (LitInt 0) |point#0|) (< |point#0| 18446744073709551616)) (<= |point#0| (LitInt DiskLayout.__default.NumJournalBlocks)))) (and (<= (LitInt 0) (DiskLayout.__default.JournalPoint |point#0|)) (< (DiskLayout.__default.JournalPoint |point#0|) 18446744073709551616))) :qid |DiskLayo.41:32| :skolemid |1407| :pattern ( (DiskLayout.__default.JournalPoint |point#0|)) ))))
(assert (forall ((|point#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |point#0@@0|) (< |point#0@@0| 18446744073709551616)) (and (=> (|DiskLayout.__default.JournalPoint#requires| |point#0@@0|) (<= |point#0@@0| (LitInt DiskLayout.__default.NumJournalBlocks))) (=> (<= |point#0@@0| (LitInt DiskLayout.__default.NumJournalBlocks)) (|DiskLayout.__default.JournalPoint#requires| |point#0@@0|)))) :qid |DiskLayo.41:32| :skolemid |1408| :pattern ( (|DiskLayout.__default.JournalPoint#requires| |point#0@@0|)) )))
(assert  (=> true (forall ((|point#0@@1| Int) ) (!  (=> (or (|DiskLayout.__default.JournalPoint#canCall| |point#0@@1|) (and (and (<= (LitInt 0) |point#0@@1|) (< |point#0@@1| 18446744073709551616)) (<= |point#0@@1| (LitInt DiskLayout.__default.NumJournalBlocks)))) (and |DiskLayout.__default.JournalStartAddr#canCall| (= (DiskLayout.__default.JournalPoint |point#0@@1|) (+ DiskLayout.__default.JournalStartAddr (Mul |point#0@@1| (LitInt 4096)))))) :qid |DiskLayo.41:32| :skolemid |1409| :pattern ( (DiskLayout.__default.JournalPoint |point#0@@1|)) ))))
(assert  (=> true (forall ((|point#0@@2| Int) ) (!  (=> (or (|DiskLayout.__default.JournalPoint#canCall| (LitInt |point#0@@2|)) (and (and (<= (LitInt 0) |point#0@@2|) (< |point#0@@2| 18446744073709551616)) (<= (LitInt |point#0@@2|) (LitInt DiskLayout.__default.NumJournalBlocks)))) (and |DiskLayout.__default.JournalStartAddr#canCall| (= (DiskLayout.__default.JournalPoint (LitInt |point#0@@2|)) (LitInt (+ DiskLayout.__default.JournalStartAddr (Mul (LitInt |point#0@@2|) (LitInt 4096))))))) :qid |DiskLayo.41:32| :weight 3 :skolemid |1410| :pattern ( (DiskLayout.__default.JournalPoint (LitInt |point#0@@2|))) ))))
(assert  (=> true (forall ((|addr#0| Int) ) (!  (=> (or (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| |addr#0|) (and (<= (LitInt 0) |addr#0|) (< |addr#0| 18446744073709551616))) true) :qid |DiskLayo.49:46| :skolemid |1411| :pattern ( (DiskLayout.__default.ValidIndirectionTableAddr |addr#0|)) ))))
(assert (forall ((|addr#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |addr#0@@0|) (< |addr#0@@0| 18446744073709551616)) (and (=> (|DiskLayout.__default.ValidIndirectionTableAddr#requires| |addr#0@@0|) true) (=> true (|DiskLayout.__default.ValidIndirectionTableAddr#requires| |addr#0@@0|)))) :qid |DiskLayo.49:46| :skolemid |1412| :pattern ( (|DiskLayout.__default.ValidIndirectionTableAddr#requires| |addr#0@@0|)) )))
(assert  (=> true (forall ((|addr#0@@1| Int) ) (!  (=> (or (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| |addr#0@@1|) (and (<= (LitInt 0) |addr#0@@1|) (< |addr#0@@1| 18446744073709551616))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and |DiskLayout.__default.IndirectionTable1Addr#canCall| (=> (not (= |addr#0@@1| (LitInt DiskLayout.__default.IndirectionTable1Addr))) |DiskLayout.__default.IndirectionTable2Addr#canCall|))) (and (=> (DiskLayout.__default.ValidIndirectionTableAddr |addr#0@@1|) (and true (or (= |addr#0@@1| (LitInt DiskLayout.__default.IndirectionTable1Addr)) (= |addr#0@@1| (LitInt DiskLayout.__default.IndirectionTable2Addr))))) (=> (and true (or (= |addr#0@@1| (LitInt DiskLayout.__default.IndirectionTable1Addr)) (= |addr#0@@1| (LitInt DiskLayout.__default.IndirectionTable2Addr)))) (DiskLayout.__default.ValidIndirectionTableAddr |addr#0@@1|))))) :qid |DiskLayo.49:46| :skolemid |1413| :pattern ( (DiskLayout.__default.ValidIndirectionTableAddr |addr#0@@1|)) ))))
(assert  (=> true (forall ((|addr#0@@2| Int) ) (!  (=> (or (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| (LitInt |addr#0@@2|)) (and (<= (LitInt 0) |addr#0@@2|) (< |addr#0@@2| 18446744073709551616))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and |DiskLayout.__default.IndirectionTable1Addr#canCall| (=> (not (= (LitInt |addr#0@@2|) (LitInt DiskLayout.__default.IndirectionTable1Addr))) |DiskLayout.__default.IndirectionTable2Addr#canCall|))) (and (=> (DiskLayout.__default.ValidIndirectionTableAddr (LitInt |addr#0@@2|)) (and true (or (= (LitInt |addr#0@@2|) (LitInt DiskLayout.__default.IndirectionTable1Addr)) (= (LitInt |addr#0@@2|) (LitInt DiskLayout.__default.IndirectionTable2Addr))))) (=> (and true (or (= (LitInt |addr#0@@2|) (LitInt DiskLayout.__default.IndirectionTable1Addr)) (= (LitInt |addr#0@@2|) (LitInt DiskLayout.__default.IndirectionTable2Addr)))) (DiskLayout.__default.ValidIndirectionTableAddr (LitInt |addr#0@@2|)))))) :qid |DiskLayo.49:46| :weight 3 :skolemid |1414| :pattern ( (DiskLayout.__default.ValidIndirectionTableAddr (LitInt |addr#0@@2|))) ))))
(assert (forall (($ly@@17 T@U) (|addr#0@@3| Int) ) (!  (=> (= (type $ly@@17) LayerTypeType) (and (=> (DiskLayout.__default.ValidNodeAddr ($LS $ly@@17) |addr#0@@3|) (DiskLayout.__default.ValidNodeAddr $ly@@17 |addr#0@@3|)) (=> (DiskLayout.__default.ValidNodeAddr $ly@@17 |addr#0@@3|) (DiskLayout.__default.ValidNodeAddr ($LS $ly@@17) |addr#0@@3|)))) :qid |DiskLayo.56:30| :skolemid |1415| :pattern ( (DiskLayout.__default.ValidNodeAddr ($LS $ly@@17) |addr#0@@3|)) )))
(assert (forall (($ly@@18 T@U) (|addr#0@@4| Int) ) (!  (=> (= (type $ly@@18) LayerTypeType) (and (=> (DiskLayout.__default.ValidNodeAddr $ly@@18 |addr#0@@4|) (DiskLayout.__default.ValidNodeAddr $LZ |addr#0@@4|)) (=> (DiskLayout.__default.ValidNodeAddr $LZ |addr#0@@4|) (DiskLayout.__default.ValidNodeAddr $ly@@18 |addr#0@@4|)))) :qid |DiskLayo.56:30| :skolemid |1416| :pattern ( (DiskLayout.__default.ValidNodeAddr (AsFuelBottom $ly@@18) |addr#0@@4|)) )))
(assert  (=> true (forall (($ly@@19 T@U) (|addr#0@@5| Int) ) (!  (=> (and (= (type $ly@@19) LayerTypeType) (or (|DiskLayout.__default.ValidNodeAddr#canCall| |addr#0@@5|) (and (<= (LitInt 0) |addr#0@@5|) (< |addr#0@@5| 18446744073709551616)))) true) :qid |DiskLayo.56:30| :skolemid |1417| :pattern ( (DiskLayout.__default.ValidNodeAddr $ly@@19 |addr#0@@5|)) ))))
(assert (forall (($ly@@20 T@U) (|addr#0@@6| Int) ) (!  (=> (= (type $ly@@20) LayerTypeType) (=> (and (<= (LitInt 0) |addr#0@@6|) (< |addr#0@@6| 18446744073709551616)) (and (=> (|DiskLayout.__default.ValidNodeAddr#requires| $ly@@20 |addr#0@@6|) true) (=> true (|DiskLayout.__default.ValidNodeAddr#requires| $ly@@20 |addr#0@@6|))))) :qid |DiskLayo.56:30| :skolemid |1418| :pattern ( (|DiskLayout.__default.ValidNodeAddr#requires| $ly@@20 |addr#0@@6|)) )))
(assert  (=> true (forall (($ly@@21 T@U) (|addr#0@@7| Int) ) (!  (=> (and (= (type $ly@@21) LayerTypeType) (or (|DiskLayout.__default.ValidNodeAddr#canCall| |addr#0@@7|) (and (<= (LitInt 0) |addr#0@@7|) (< |addr#0@@7| 18446744073709551616)))) (and (and |Bounds.__default.NodeBlockSizeUint64#canCall| (=> (= (Mod |addr#0@@7| (LitInt Bounds.__default.NodeBlockSizeUint64)) (LitInt 0)) (and |Bounds.__default.NodeBlockSizeUint64#canCall| |Bounds.__default.MinNodeBlockIndexUint64#canCall|))) (and (=> (DiskLayout.__default.ValidNodeAddr ($LS $ly@@21) |addr#0@@7|) (and (= (Mod |addr#0@@7| (LitInt Bounds.__default.NodeBlockSizeUint64)) (LitInt 0)) (>= |addr#0@@7| (LitInt (Mul (LitInt Bounds.__default.NodeBlockSizeUint64) (LitInt Bounds.__default.MinNodeBlockIndexUint64)))))) (=> (and (= (Mod |addr#0@@7| (LitInt Bounds.__default.NodeBlockSizeUint64)) (LitInt 0)) (>= |addr#0@@7| (LitInt (Mul (LitInt Bounds.__default.NodeBlockSizeUint64) (LitInt Bounds.__default.MinNodeBlockIndexUint64))))) (DiskLayout.__default.ValidNodeAddr ($LS $ly@@21) |addr#0@@7|))))) :qid |DiskLayo.56:30| :skolemid |1419| :pattern ( (DiskLayout.__default.ValidNodeAddr ($LS $ly@@21) |addr#0@@7|)) ))))
(assert  (=> true (forall (($ly@@22 T@U) (|addr#0@@8| Int) ) (!  (=> (and (= (type $ly@@22) LayerTypeType) (or (|DiskLayout.__default.ValidNodeAddr#canCall| (LitInt |addr#0@@8|)) (and (<= (LitInt 0) |addr#0@@8|) (< |addr#0@@8| 18446744073709551616)))) (and (and |Bounds.__default.NodeBlockSizeUint64#canCall| (=> (= (LitInt (Mod |addr#0@@8| (LitInt Bounds.__default.NodeBlockSizeUint64))) (LitInt 0)) (and |Bounds.__default.NodeBlockSizeUint64#canCall| |Bounds.__default.MinNodeBlockIndexUint64#canCall|))) (and (=> (DiskLayout.__default.ValidNodeAddr ($LS $ly@@22) (LitInt |addr#0@@8|)) (and (= (LitInt (Mod |addr#0@@8| (LitInt Bounds.__default.NodeBlockSizeUint64))) (LitInt 0)) (>= (LitInt |addr#0@@8|) (LitInt (Mul (LitInt Bounds.__default.NodeBlockSizeUint64) (LitInt Bounds.__default.MinNodeBlockIndexUint64)))))) (=> (and (= (LitInt (Mod |addr#0@@8| (LitInt Bounds.__default.NodeBlockSizeUint64))) (LitInt 0)) (>= (LitInt |addr#0@@8|) (LitInt (Mul (LitInt Bounds.__default.NodeBlockSizeUint64) (LitInt Bounds.__default.MinNodeBlockIndexUint64))))) (DiskLayout.__default.ValidNodeAddr ($LS $ly@@22) (LitInt |addr#0@@8|)))))) :qid |DiskLayo.56:30| :weight 3 :skolemid |1420| :pattern ( (DiskLayout.__default.ValidNodeAddr ($LS $ly@@22) (LitInt |addr#0@@8|))) ))))
(assert (forall (($ly@@23 T@U) (|loc#0@@3| T@U) ) (!  (=> (and (= (type $ly@@23) LayerTypeType) (= (type |loc#0@@3|) DatatypeTypeType)) (and (=> (DiskLayout.__default.ValidJournalLocation ($LS $ly@@23) |loc#0@@3|) (DiskLayout.__default.ValidJournalLocation $ly@@23 |loc#0@@3|)) (=> (DiskLayout.__default.ValidJournalLocation $ly@@23 |loc#0@@3|) (DiskLayout.__default.ValidJournalLocation ($LS $ly@@23) |loc#0@@3|)))) :qid |DiskLayo.63:30| :skolemid |1421| :pattern ( (DiskLayout.__default.ValidJournalLocation ($LS $ly@@23) |loc#0@@3|)) )))
(assert (forall (($ly@@24 T@U) (|loc#0@@4| T@U) ) (!  (=> (and (= (type $ly@@24) LayerTypeType) (= (type |loc#0@@4|) DatatypeTypeType)) (and (=> (DiskLayout.__default.ValidJournalLocation $ly@@24 |loc#0@@4|) (DiskLayout.__default.ValidJournalLocation $LZ |loc#0@@4|)) (=> (DiskLayout.__default.ValidJournalLocation $LZ |loc#0@@4|) (DiskLayout.__default.ValidJournalLocation $ly@@24 |loc#0@@4|)))) :qid |DiskLayo.63:30| :skolemid |1422| :pattern ( (DiskLayout.__default.ValidJournalLocation (AsFuelBottom $ly@@24) |loc#0@@4|)) )))
(assert  (=> true (forall (($ly@@25 T@U) (|loc#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@25) LayerTypeType) (= (type |loc#0@@5|) DatatypeTypeType)) (or (|DiskLayout.__default.ValidJournalLocation#canCall| |loc#0@@5|) ($Is |loc#0@@5| Tclass.DiskLayout.Location))) true) :qid |DiskLayo.63:30| :skolemid |1423| :pattern ( (DiskLayout.__default.ValidJournalLocation $ly@@25 |loc#0@@5|)) ))))
(assert (forall (($ly@@26 T@U) (|loc#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@26) LayerTypeType) (= (type |loc#0@@6|) DatatypeTypeType)) ($Is |loc#0@@6| Tclass.DiskLayout.Location)) (and (=> (|DiskLayout.__default.ValidJournalLocation#requires| $ly@@26 |loc#0@@6|) true) (=> true (|DiskLayout.__default.ValidJournalLocation#requires| $ly@@26 |loc#0@@6|)))) :qid |DiskLayo.63:30| :skolemid |1424| :pattern ( (|DiskLayout.__default.ValidJournalLocation#requires| $ly@@26 |loc#0@@6|)) )))
(assert  (=> true (forall (($ly@@27 T@U) (|loc#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@27) LayerTypeType) (= (type |loc#0@@7|) DatatypeTypeType)) (or (|DiskLayout.__default.ValidJournalLocation#canCall| |loc#0@@7|) ($Is |loc#0@@7| Tclass.DiskLayout.Location))) (and (and (and (and (and (and (DiskLayout.Location.Location_q |loc#0@@7|) (=> (= (Mod (DiskLayout.Location.addr |loc#0@@7|) (LitInt 4096)) (LitInt 0)) (DiskLayout.Location.Location_q |loc#0@@7|))) (=> (and (DiskLayout.Location.Location_q |loc#0@@7|) (= (Mod (DiskLayout.Location.len |loc#0@@7|) (LitInt 4096)) (LitInt 0))) (DiskLayout.Location.Location_q |loc#0@@7|))) (=> (and (DiskLayout.Location.Location_q |loc#0@@7|) (>= (DiskLayout.Location.addr |loc#0@@7|) (LitInt (Mul (LitInt 2) (LitInt 4096))))) (and (DiskLayout.Location.Location_q |loc#0@@7|) (=> (<= (LitInt 0) (Div (- (DiskLayout.Location.addr |loc#0@@7|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096))) (and (DiskLayout.Location.Location_q |loc#0@@7|) |DiskLayout.__default.NumJournalBlocks#canCall|))))) (=> (and (and (DiskLayout.Location.Location_q |loc#0@@7|) (=> (<= (LitInt 0) (Div (- (DiskLayout.Location.addr |loc#0@@7|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096))) (and (DiskLayout.Location.Location_q |loc#0@@7|) |DiskLayout.__default.NumJournalBlocks#canCall|))) (and (<= (LitInt 0) (Div (- (DiskLayout.Location.addr |loc#0@@7|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096))) (< (Div (- (DiskLayout.Location.addr |loc#0@@7|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks))) (and (DiskLayout.Location.Location_q |loc#0@@7|) (DiskLayout.Location.Location_q |loc#0@@7|)))) (=> (and (and (DiskLayout.Location.Location_q |loc#0@@7|) (DiskLayout.Location.Location_q |loc#0@@7|)) (<= (DiskLayout.Location.addr |loc#0@@7|) (- 18446744073709551615 (DiskLayout.Location.len |loc#0@@7|)))) (and (and (DiskLayout.Location.Location_q |loc#0@@7|) (DiskLayout.Location.Location_q |loc#0@@7|)) |DiskLayout.__default.NumJournalBlocks#canCall|))) (and (=> (DiskLayout.__default.ValidJournalLocation ($LS $ly@@27) |loc#0@@7|) (and (and (and (and (and (= (Mod (DiskLayout.Location.addr |loc#0@@7|) (LitInt 4096)) (LitInt 0)) (= (Mod (DiskLayout.Location.len |loc#0@@7|) (LitInt 4096)) (LitInt 0))) (>= (DiskLayout.Location.addr |loc#0@@7|) (LitInt (Mul (LitInt 2) (LitInt 4096))))) (and (<= (LitInt 0) (Div (- (DiskLayout.Location.addr |loc#0@@7|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096))) (< (Div (- (DiskLayout.Location.addr |loc#0@@7|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks))) (<= (DiskLayout.Location.addr |loc#0@@7|) (- 18446744073709551615 (DiskLayout.Location.len |loc#0@@7|)))) (<= (+ (DiskLayout.Location.addr |loc#0@@7|) (DiskLayout.Location.len |loc#0@@7|)) (LitInt (Mul (LitInt (+ 2 DiskLayout.__default.NumJournalBlocks)) (LitInt 4096)))))) (=> (and (and (and (and (and (= (Mod (DiskLayout.Location.addr |loc#0@@7|) (LitInt 4096)) (LitInt 0)) (= (Mod (DiskLayout.Location.len |loc#0@@7|) (LitInt 4096)) (LitInt 0))) (>= (DiskLayout.Location.addr |loc#0@@7|) (LitInt (Mul (LitInt 2) (LitInt 4096))))) (and (<= (LitInt 0) (Div (- (DiskLayout.Location.addr |loc#0@@7|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096))) (< (Div (- (DiskLayout.Location.addr |loc#0@@7|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks))) (<= (DiskLayout.Location.addr |loc#0@@7|) (- 18446744073709551615 (DiskLayout.Location.len |loc#0@@7|)))) (<= (+ (DiskLayout.Location.addr |loc#0@@7|) (DiskLayout.Location.len |loc#0@@7|)) (LitInt (Mul (LitInt (+ 2 DiskLayout.__default.NumJournalBlocks)) (LitInt 4096))))) (DiskLayout.__default.ValidJournalLocation ($LS $ly@@27) |loc#0@@7|))))) :qid |DiskLayo.63:30| :skolemid |1425| :pattern ( (DiskLayout.__default.ValidJournalLocation ($LS $ly@@27) |loc#0@@7|)) ))))
(assert  (=> true (forall (($ly@@28 T@U) (|loc#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@28) LayerTypeType) (= (type |loc#0@@8|) DatatypeTypeType)) (or (|DiskLayout.__default.ValidJournalLocation#canCall| (Lit |loc#0@@8|)) ($Is |loc#0@@8| Tclass.DiskLayout.Location))) (and (and (and (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (=> (= (LitInt (Mod (DiskLayout.Location.addr (Lit |loc#0@@8|)) (LitInt 4096))) (LitInt 0)) (DiskLayout.Location.Location_q (Lit |loc#0@@8|)))) (=> (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (= (LitInt (Mod (DiskLayout.Location.len (Lit |loc#0@@8|)) (LitInt 4096))) (LitInt 0))) (DiskLayout.Location.Location_q (Lit |loc#0@@8|)))) (=> (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@8|))) (LitInt (Mul (LitInt 2) (LitInt 4096))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (=> (<= (LitInt 0) (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@8|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) |DiskLayout.__default.NumJournalBlocks#canCall|))))) (=> (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (=> (<= (LitInt 0) (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@8|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) |DiskLayout.__default.NumJournalBlocks#canCall|))) (and (<= (LitInt 0) (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@8|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)))) (< (Div (- (DiskLayout.Location.addr (Lit |loc#0@@8|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (DiskLayout.Location.Location_q (Lit |loc#0@@8|))))) (=> (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (DiskLayout.Location.Location_q (Lit |loc#0@@8|))) (<= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@8|))) (LitInt (- 18446744073709551615 (DiskLayout.Location.len (Lit |loc#0@@8|)))))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@8|)) (DiskLayout.Location.Location_q (Lit |loc#0@@8|))) |DiskLayout.__default.NumJournalBlocks#canCall|))) (and (=> (DiskLayout.__default.ValidJournalLocation ($LS $ly@@28) (Lit |loc#0@@8|)) (and (and (and (and (and (= (LitInt (Mod (DiskLayout.Location.addr (Lit |loc#0@@8|)) (LitInt 4096))) (LitInt 0)) (= (LitInt (Mod (DiskLayout.Location.len (Lit |loc#0@@8|)) (LitInt 4096))) (LitInt 0))) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@8|))) (LitInt (Mul (LitInt 2) (LitInt 4096))))) (and (<= (LitInt 0) (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@8|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)))) (< (Div (- (DiskLayout.Location.addr (Lit |loc#0@@8|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks))) (<= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@8|))) (LitInt (- 18446744073709551615 (DiskLayout.Location.len (Lit |loc#0@@8|)))))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@8|)) (DiskLayout.Location.len (Lit |loc#0@@8|)))) (LitInt (Mul (LitInt (+ 2 DiskLayout.__default.NumJournalBlocks)) (LitInt 4096)))))) (=> (and (and (and (and (and (= (LitInt (Mod (DiskLayout.Location.addr (Lit |loc#0@@8|)) (LitInt 4096))) (LitInt 0)) (= (LitInt (Mod (DiskLayout.Location.len (Lit |loc#0@@8|)) (LitInt 4096))) (LitInt 0))) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@8|))) (LitInt (Mul (LitInt 2) (LitInt 4096))))) (and (<= (LitInt 0) (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@8|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)))) (< (Div (- (DiskLayout.Location.addr (Lit |loc#0@@8|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)) DiskLayout.__default.NumJournalBlocks))) (<= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@8|))) (LitInt (- 18446744073709551615 (DiskLayout.Location.len (Lit |loc#0@@8|)))))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@8|)) (DiskLayout.Location.len (Lit |loc#0@@8|)))) (LitInt (Mul (LitInt (+ 2 DiskLayout.__default.NumJournalBlocks)) (LitInt 4096))))) (DiskLayout.__default.ValidJournalLocation ($LS $ly@@28) (Lit |loc#0@@8|)))))) :qid |DiskLayo.63:30| :weight 3 :skolemid |1426| :pattern ( (DiskLayout.__default.ValidJournalLocation ($LS $ly@@28) (Lit |loc#0@@8|))) ))))
(assert  (=> true (forall ((|loc#0@@9| T@U) ) (!  (=> (and (and (= (type |loc#0@@9|) DatatypeTypeType) (or (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| |loc#0@@9|) ($Is |loc#0@@9| Tclass.DiskLayout.Location))) (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@9|)) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@9|))) :qid |DiskLayo.83:50| :skolemid |1427| :pattern ( (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@9|)) ))))
(assert (forall ((|loc#0@@10| T@U) ) (!  (=> (and (= (type |loc#0@@10|) DatatypeTypeType) ($Is |loc#0@@10| Tclass.DiskLayout.Location)) (and (=> (|DiskLayout.__default.ValidIndirectionTableLocation#requires| |loc#0@@10|) true) (=> true (|DiskLayout.__default.ValidIndirectionTableLocation#requires| |loc#0@@10|)))) :qid |DiskLayo.83:50| :skolemid |1428| :pattern ( (|DiskLayout.__default.ValidIndirectionTableLocation#requires| |loc#0@@10|)) )))
(assert  (=> true (forall ((|loc#0@@11| T@U) ) (!  (=> (and (= (type |loc#0@@11|) DatatypeTypeType) (or (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| |loc#0@@11|) ($Is |loc#0@@11| Tclass.DiskLayout.Location))) (and (and (and (DiskLayout.Location.Location_q |loc#0@@11|) (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| (DiskLayout.Location.addr |loc#0@@11|))) (=> (DiskLayout.__default.ValidIndirectionTableAddr (DiskLayout.Location.addr |loc#0@@11|)) (and (DiskLayout.Location.Location_q |loc#0@@11|) (=> (< 0 (DiskLayout.Location.len |loc#0@@11|)) (and (DiskLayout.Location.Location_q |loc#0@@11|) |DiskLayout.__default.IndirectionTableMaxLength#canCall|))))) (and (=> (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@11|) (and (DiskLayout.__default.ValidIndirectionTableAddr (DiskLayout.Location.addr |loc#0@@11|)) (and (< 0 (DiskLayout.Location.len |loc#0@@11|)) (<= (DiskLayout.Location.len |loc#0@@11|) (LitInt DiskLayout.__default.IndirectionTableMaxLength))))) (=> (and (DiskLayout.__default.ValidIndirectionTableAddr (DiskLayout.Location.addr |loc#0@@11|)) (and (< 0 (DiskLayout.Location.len |loc#0@@11|)) (<= (DiskLayout.Location.len |loc#0@@11|) (LitInt DiskLayout.__default.IndirectionTableMaxLength)))) (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@11|))))) :qid |DiskLayo.83:50| :skolemid |1429| :pattern ( (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@11|)) ))))
(assert  (=> true (forall ((|loc#0@@12| T@U) ) (!  (=> (and (= (type |loc#0@@12|) DatatypeTypeType) (or (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| (Lit |loc#0@@12|)) ($Is |loc#0@@12| Tclass.DiskLayout.Location))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@12|)) (|DiskLayout.__default.ValidIndirectionTableAddr#canCall| (LitInt (DiskLayout.Location.addr (Lit |loc#0@@12|))))) (=> (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidIndirectionTableAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@12|))))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@12|)) (=> (U_2_bool (Lit (bool_2_U (< 0 (DiskLayout.Location.len (Lit |loc#0@@12|)))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@12|)) |DiskLayout.__default.IndirectionTableMaxLength#canCall|))))) (and (=> (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@12|)) (and (DiskLayout.__default.ValidIndirectionTableAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@12|)))) (and (< 0 (DiskLayout.Location.len (Lit |loc#0@@12|))) (<= (LitInt (DiskLayout.Location.len (Lit |loc#0@@12|))) (LitInt DiskLayout.__default.IndirectionTableMaxLength))))) (=> (and (DiskLayout.__default.ValidIndirectionTableAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@12|)))) (and (< 0 (DiskLayout.Location.len (Lit |loc#0@@12|))) (<= (LitInt (DiskLayout.Location.len (Lit |loc#0@@12|))) (LitInt DiskLayout.__default.IndirectionTableMaxLength)))) (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@12|)))))) :qid |DiskLayo.83:50| :weight 3 :skolemid |1430| :pattern ( (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@12|))) ))))
(assert  (=> true (forall ((|loc#0@@13| T@U) ) (!  (=> (and (= (type |loc#0@@13|) DatatypeTypeType) (or (|DiskLayout.__default.ValidNodeLocation#canCall| |loc#0@@13|) ($Is |loc#0@@13| Tclass.DiskLayout.Location))) (and (=> (DiskLayout.__default.ValidNodeLocation |loc#0@@13|) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@13|))) (=> (DiskLayout.__default.ValidNodeLocation |loc#0@@13|) (not (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@13|))))) :qid |DiskLayo.101:38| :skolemid |1431| :pattern ( (DiskLayout.__default.ValidNodeLocation |loc#0@@13|)) ))))
(assert (forall ((|loc#0@@14| T@U) ) (!  (=> (and (= (type |loc#0@@14|) DatatypeTypeType) ($Is |loc#0@@14| Tclass.DiskLayout.Location)) (and (=> (|DiskLayout.__default.ValidNodeLocation#requires| |loc#0@@14|) true) (=> true (|DiskLayout.__default.ValidNodeLocation#requires| |loc#0@@14|)))) :qid |DiskLayo.101:38| :skolemid |1432| :pattern ( (|DiskLayout.__default.ValidNodeLocation#requires| |loc#0@@14|)) )))
(assert (= (type StartFuel_DiskLayout._default.ValidNodeAddr) LayerTypeType))
(assert  (=> true (forall ((|loc#0@@15| T@U) ) (!  (=> (and (= (type |loc#0@@15|) DatatypeTypeType) (or (|DiskLayout.__default.ValidNodeLocation#canCall| |loc#0@@15|) ($Is |loc#0@@15| Tclass.DiskLayout.Location))) (and (and (and (DiskLayout.Location.Location_q |loc#0@@15|) (|DiskLayout.__default.ValidNodeAddr#canCall| (DiskLayout.Location.addr |loc#0@@15|))) (=> (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (DiskLayout.Location.addr |loc#0@@15|)) (and (DiskLayout.Location.Location_q |loc#0@@15|) |Bounds.__default.NodeBlockSizeUint64#canCall|))) (and (=> (DiskLayout.__default.ValidNodeLocation |loc#0@@15|) (and (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (DiskLayout.Location.addr |loc#0@@15|)) (<= (DiskLayout.Location.len |loc#0@@15|) (LitInt Bounds.__default.NodeBlockSizeUint64)))) (=> (and (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (DiskLayout.Location.addr |loc#0@@15|)) (<= (DiskLayout.Location.len |loc#0@@15|) (LitInt Bounds.__default.NodeBlockSizeUint64))) (DiskLayout.__default.ValidNodeLocation |loc#0@@15|))))) :qid |DiskLayo.101:38| :skolemid |1433| :pattern ( (DiskLayout.__default.ValidNodeLocation |loc#0@@15|)) ))))
(assert  (=> true (forall ((|loc#0@@16| T@U) ) (!  (=> (and (= (type |loc#0@@16|) DatatypeTypeType) (or (|DiskLayout.__default.ValidNodeLocation#canCall| (Lit |loc#0@@16|)) ($Is |loc#0@@16| Tclass.DiskLayout.Location))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@16|)) (|DiskLayout.__default.ValidNodeAddr#canCall| (LitInt (DiskLayout.Location.addr (Lit |loc#0@@16|))))) (=> (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@16|)))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@16|)) |Bounds.__default.NodeBlockSizeUint64#canCall|))) (and (=> (DiskLayout.__default.ValidNodeLocation (Lit |loc#0@@16|)) (and (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@16|)))) (<= (LitInt (DiskLayout.Location.len (Lit |loc#0@@16|))) (LitInt Bounds.__default.NodeBlockSizeUint64)))) (=> (and (DiskLayout.__default.ValidNodeAddr StartFuel_DiskLayout._default.ValidNodeAddr (LitInt (DiskLayout.Location.addr (Lit |loc#0@@16|)))) (<= (LitInt (DiskLayout.Location.len (Lit |loc#0@@16|))) (LitInt Bounds.__default.NodeBlockSizeUint64))) (DiskLayout.__default.ValidNodeLocation (Lit |loc#0@@16|)))))) :qid |DiskLayo.101:38| :weight 3 :skolemid |1434| :pattern ( (DiskLayout.__default.ValidNodeLocation (Lit |loc#0@@16|))) ))))
(assert (= (type DiskLayout.__default.Superblock1Location) DatatypeTypeType))
(assert  (=> true (=> true (and (and (and (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidNodeLocation (Lit DiskLayout.__default.Superblock1Location)))))) (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidIndirectionTableLocation (Lit DiskLayout.__default.Superblock1Location))))))) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit DiskLayout.__default.Superblock1Location)))) ($Is DiskLayout.__default.Superblock1Location Tclass.DiskLayout.Location)))))
(assert  (=> |DiskLayout.__default.Superblock1Location#requires| true))
(assert  (=> true |DiskLayout.__default.Superblock1Location#requires|))
(assert  (=> true (=> true (= DiskLayout.__default.Superblock1Location (Lit (|#DiskLayout.Location.Location| (LitInt 0) (LitInt 4096)))))))
(assert  (=> true (=> true (= DiskLayout.__default.Superblock1Location (Lit (|#DiskLayout.Location.Location| (LitInt 0) (LitInt 4096)))))))
(assert (= (type DiskLayout.__default.Superblock2Location) DatatypeTypeType))
(assert  (=> true (=> true (and (and (and (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidNodeLocation (Lit DiskLayout.__default.Superblock2Location)))))) (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidIndirectionTableLocation (Lit DiskLayout.__default.Superblock2Location))))))) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit DiskLayout.__default.Superblock2Location)))) ($Is DiskLayout.__default.Superblock2Location Tclass.DiskLayout.Location)))))
(assert  (=> |DiskLayout.__default.Superblock2Location#requires| true))
(assert  (=> true |DiskLayout.__default.Superblock2Location#requires|))
(assert  (=> true (=> true (= DiskLayout.__default.Superblock2Location (Lit (|#DiskLayout.Location.Location| (LitInt 4096) (LitInt 4096)))))))
(assert  (=> true (=> true (= DiskLayout.__default.Superblock2Location (Lit (|#DiskLayout.Location.Location| (LitInt 4096) (LitInt 4096)))))))
(assert  (=> true (forall ((|loc#0@@17| T@U) ) (!  (=> (and (= (type |loc#0@@17|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock1Location#canCall| |loc#0@@17|) ($Is |loc#0@@17| Tclass.DiskLayout.Location))) (and (and (=> (DiskLayout.__default.ValidSuperblock1Location |loc#0@@17|) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@17|))) (=> (DiskLayout.__default.ValidSuperblock1Location |loc#0@@17|) (not (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@17|)))) (=> (DiskLayout.__default.ValidSuperblock1Location |loc#0@@17|) (not (DiskLayout.__default.ValidNodeLocation |loc#0@@17|))))) :qid |DiskLayo.134:45| :skolemid |1435| :pattern ( (DiskLayout.__default.ValidSuperblock1Location |loc#0@@17|)) ))))
(assert (forall ((|loc#0@@18| T@U) ) (!  (=> (and (= (type |loc#0@@18|) DatatypeTypeType) ($Is |loc#0@@18| Tclass.DiskLayout.Location)) (and (=> (|DiskLayout.__default.ValidSuperblock1Location#requires| |loc#0@@18|) true) (=> true (|DiskLayout.__default.ValidSuperblock1Location#requires| |loc#0@@18|)))) :qid |DiskLayo.134:45| :skolemid |1436| :pattern ( (|DiskLayout.__default.ValidSuperblock1Location#requires| |loc#0@@18|)) )))
(assert  (=> true (forall ((|loc#0@@19| T@U) ) (!  (=> (and (= (type |loc#0@@19|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock1Location#canCall| |loc#0@@19|) ($Is |loc#0@@19| Tclass.DiskLayout.Location))) (and (and (and (|$IsA#DiskLayout.Location| |loc#0@@19|) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock1Location))) |DiskLayout.__default.Superblock1Location#canCall|) (and (=> (DiskLayout.__default.ValidSuperblock1Location |loc#0@@19|) (|DiskLayout.Location#Equal| |loc#0@@19| DiskLayout.__default.Superblock1Location)) (=> (|DiskLayout.Location#Equal| |loc#0@@19| DiskLayout.__default.Superblock1Location) (DiskLayout.__default.ValidSuperblock1Location |loc#0@@19|))))) :qid |DiskLayo.134:45| :skolemid |1437| :pattern ( (DiskLayout.__default.ValidSuperblock1Location |loc#0@@19|)) ))))
(assert  (=> true (forall ((|loc#0@@20| T@U) ) (!  (=> (and (= (type |loc#0@@20|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock1Location#canCall| (Lit |loc#0@@20|)) ($Is |loc#0@@20| Tclass.DiskLayout.Location))) (and (and (and (|$IsA#DiskLayout.Location| (Lit |loc#0@@20|)) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock1Location))) |DiskLayout.__default.Superblock1Location#canCall|) (and (=> (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@20|)) (|DiskLayout.Location#Equal| |loc#0@@20| DiskLayout.__default.Superblock1Location)) (=> (|DiskLayout.Location#Equal| |loc#0@@20| DiskLayout.__default.Superblock1Location) (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@20|)))))) :qid |DiskLayo.134:45| :weight 3 :skolemid |1438| :pattern ( (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@20|))) ))))
(assert  (=> true (forall ((|loc#0@@21| T@U) ) (!  (=> (and (= (type |loc#0@@21|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock2Location#canCall| |loc#0@@21|) ($Is |loc#0@@21| Tclass.DiskLayout.Location))) (and (and (=> (DiskLayout.__default.ValidSuperblock2Location |loc#0@@21|) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@21|))) (=> (DiskLayout.__default.ValidSuperblock2Location |loc#0@@21|) (not (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@21|)))) (=> (DiskLayout.__default.ValidSuperblock2Location |loc#0@@21|) (not (DiskLayout.__default.ValidNodeLocation |loc#0@@21|))))) :qid |DiskLayo.145:45| :skolemid |1439| :pattern ( (DiskLayout.__default.ValidSuperblock2Location |loc#0@@21|)) ))))
(assert (forall ((|loc#0@@22| T@U) ) (!  (=> (and (= (type |loc#0@@22|) DatatypeTypeType) ($Is |loc#0@@22| Tclass.DiskLayout.Location)) (and (=> (|DiskLayout.__default.ValidSuperblock2Location#requires| |loc#0@@22|) true) (=> true (|DiskLayout.__default.ValidSuperblock2Location#requires| |loc#0@@22|)))) :qid |DiskLayo.145:45| :skolemid |1440| :pattern ( (|DiskLayout.__default.ValidSuperblock2Location#requires| |loc#0@@22|)) )))
(assert  (=> true (forall ((|loc#0@@23| T@U) ) (!  (=> (and (= (type |loc#0@@23|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock2Location#canCall| |loc#0@@23|) ($Is |loc#0@@23| Tclass.DiskLayout.Location))) (and (and (and (|$IsA#DiskLayout.Location| |loc#0@@23|) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock2Location))) |DiskLayout.__default.Superblock2Location#canCall|) (and (=> (DiskLayout.__default.ValidSuperblock2Location |loc#0@@23|) (|DiskLayout.Location#Equal| |loc#0@@23| DiskLayout.__default.Superblock2Location)) (=> (|DiskLayout.Location#Equal| |loc#0@@23| DiskLayout.__default.Superblock2Location) (DiskLayout.__default.ValidSuperblock2Location |loc#0@@23|))))) :qid |DiskLayo.145:45| :skolemid |1441| :pattern ( (DiskLayout.__default.ValidSuperblock2Location |loc#0@@23|)) ))))
(assert  (=> true (forall ((|loc#0@@24| T@U) ) (!  (=> (and (= (type |loc#0@@24|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblock2Location#canCall| (Lit |loc#0@@24|)) ($Is |loc#0@@24| Tclass.DiskLayout.Location))) (and (and (and (|$IsA#DiskLayout.Location| (Lit |loc#0@@24|)) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock2Location))) |DiskLayout.__default.Superblock2Location#canCall|) (and (=> (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@24|)) (|DiskLayout.Location#Equal| |loc#0@@24| DiskLayout.__default.Superblock2Location)) (=> (|DiskLayout.Location#Equal| |loc#0@@24| DiskLayout.__default.Superblock2Location) (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@24|)))))) :qid |DiskLayo.145:45| :weight 3 :skolemid |1442| :pattern ( (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@24|))) ))))
(assert  (=> true (forall ((|loc#0@@25| T@U) ) (!  (=> (and (and (= (type |loc#0@@25|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblockLocation#canCall| |loc#0@@25|) ($Is |loc#0@@25| Tclass.DiskLayout.Location))) (DiskLayout.__default.ValidSuperblockLocation |loc#0@@25|)) (or (DiskLayout.__default.ValidSuperblock1Location |loc#0@@25|) (DiskLayout.__default.ValidSuperblock2Location |loc#0@@25|))) :qid |DiskLayo.157:44| :skolemid |1443| :pattern ( (DiskLayout.__default.ValidSuperblockLocation |loc#0@@25|)) ))))
(assert (forall ((|loc#0@@26| T@U) ) (!  (=> (and (= (type |loc#0@@26|) DatatypeTypeType) ($Is |loc#0@@26| Tclass.DiskLayout.Location)) (and (=> (|DiskLayout.__default.ValidSuperblockLocation#requires| |loc#0@@26|) true) (=> true (|DiskLayout.__default.ValidSuperblockLocation#requires| |loc#0@@26|)))) :qid |DiskLayo.157:44| :skolemid |1444| :pattern ( (|DiskLayout.__default.ValidSuperblockLocation#requires| |loc#0@@26|)) )))
(assert  (=> true (forall ((|loc#0@@27| T@U) ) (!  (=> (and (= (type |loc#0@@27|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblockLocation#canCall| |loc#0@@27|) ($Is |loc#0@@27| Tclass.DiskLayout.Location))) (and (and (and (and (|$IsA#DiskLayout.Location| |loc#0@@27|) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock1Location))) |DiskLayout.__default.Superblock1Location#canCall|) (=> (not (|DiskLayout.Location#Equal| |loc#0@@27| DiskLayout.__default.Superblock1Location)) (and (and (|$IsA#DiskLayout.Location| |loc#0@@27|) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock2Location))) |DiskLayout.__default.Superblock2Location#canCall|))) (and (=> (DiskLayout.__default.ValidSuperblockLocation |loc#0@@27|) (or (|DiskLayout.Location#Equal| |loc#0@@27| DiskLayout.__default.Superblock1Location) (|DiskLayout.Location#Equal| |loc#0@@27| DiskLayout.__default.Superblock2Location))) (=> (or (|DiskLayout.Location#Equal| |loc#0@@27| DiskLayout.__default.Superblock1Location) (|DiskLayout.Location#Equal| |loc#0@@27| DiskLayout.__default.Superblock2Location)) (DiskLayout.__default.ValidSuperblockLocation |loc#0@@27|))))) :qid |DiskLayo.157:44| :skolemid |1445| :pattern ( (DiskLayout.__default.ValidSuperblockLocation |loc#0@@27|)) ))))
(assert  (=> true (forall ((|loc#0@@28| T@U) ) (!  (=> (and (= (type |loc#0@@28|) DatatypeTypeType) (or (|DiskLayout.__default.ValidSuperblockLocation#canCall| (Lit |loc#0@@28|)) ($Is |loc#0@@28| Tclass.DiskLayout.Location))) (and (and (and (and (|$IsA#DiskLayout.Location| (Lit |loc#0@@28|)) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock1Location))) |DiskLayout.__default.Superblock1Location#canCall|) (=> (not (|DiskLayout.Location#Equal| |loc#0@@28| DiskLayout.__default.Superblock1Location)) (and (and (|$IsA#DiskLayout.Location| (Lit |loc#0@@28|)) (|$IsA#DiskLayout.Location| (Lit DiskLayout.__default.Superblock2Location))) |DiskLayout.__default.Superblock2Location#canCall|))) (and (=> (DiskLayout.__default.ValidSuperblockLocation (Lit |loc#0@@28|)) (or (|DiskLayout.Location#Equal| |loc#0@@28| DiskLayout.__default.Superblock1Location) (|DiskLayout.Location#Equal| |loc#0@@28| DiskLayout.__default.Superblock2Location))) (=> (or (|DiskLayout.Location#Equal| |loc#0@@28| DiskLayout.__default.Superblock1Location) (|DiskLayout.Location#Equal| |loc#0@@28| DiskLayout.__default.Superblock2Location)) (DiskLayout.__default.ValidSuperblockLocation (Lit |loc#0@@28|)))))) :qid |DiskLayo.157:44| :weight 3 :skolemid |1446| :pattern ( (DiskLayout.__default.ValidSuperblockLocation (Lit |loc#0@@28|))) ))))
(assert  (=> true (forall ((|loc#0@@29| T@U) ) (!  (=> (and (= (type |loc#0@@29|) DatatypeTypeType) (or (|DiskLayout.__default.ValidLocation#canCall| |loc#0@@29|) ($Is |loc#0@@29| Tclass.DiskLayout.Location))) true) :qid |DiskLayo.165:34| :skolemid |1447| :pattern ( (DiskLayout.__default.ValidLocation |loc#0@@29|)) ))))
(assert (forall ((|loc#0@@30| T@U) ) (!  (=> (and (= (type |loc#0@@30|) DatatypeTypeType) ($Is |loc#0@@30| Tclass.DiskLayout.Location)) (and (=> (|DiskLayout.__default.ValidLocation#requires| |loc#0@@30|) true) (=> true (|DiskLayout.__default.ValidLocation#requires| |loc#0@@30|)))) :qid |DiskLayo.165:34| :skolemid |1448| :pattern ( (|DiskLayout.__default.ValidLocation#requires| |loc#0@@30|)) )))
(assert  (=> true (forall ((|loc#0@@31| T@U) ) (!  (=> (and (= (type |loc#0@@31|) DatatypeTypeType) (or (|DiskLayout.__default.ValidLocation#canCall| |loc#0@@31|) ($Is |loc#0@@31| Tclass.DiskLayout.Location))) (and (and (and (and (and (|DiskLayout.__default.ValidSuperblock1Location#canCall| |loc#0@@31|) (=> (not (DiskLayout.__default.ValidSuperblock1Location |loc#0@@31|)) (|DiskLayout.__default.ValidSuperblock2Location#canCall| |loc#0@@31|))) (=> (and (|DiskLayout.__default.ValidSuperblock2Location#canCall| |loc#0@@31|) (not (DiskLayout.__default.ValidSuperblock2Location |loc#0@@31|))) (|DiskLayout.__default.ValidJournalLocation#canCall| |loc#0@@31|))) (=> (and (|DiskLayout.__default.ValidJournalLocation#canCall| |loc#0@@31|) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@31|))) (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| |loc#0@@31|))) (=> (and (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| |loc#0@@31|) (not (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@31|))) (|DiskLayout.__default.ValidNodeLocation#canCall| |loc#0@@31|))) (and (=> (DiskLayout.__default.ValidLocation |loc#0@@31|) (or (or (or (or (DiskLayout.__default.ValidSuperblock1Location |loc#0@@31|) (DiskLayout.__default.ValidSuperblock2Location |loc#0@@31|)) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@31|)) (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@31|)) (DiskLayout.__default.ValidNodeLocation |loc#0@@31|))) (=> (or (or (or (or (DiskLayout.__default.ValidSuperblock1Location |loc#0@@31|) (DiskLayout.__default.ValidSuperblock2Location |loc#0@@31|)) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@31|)) (DiskLayout.__default.ValidIndirectionTableLocation |loc#0@@31|)) (DiskLayout.__default.ValidNodeLocation |loc#0@@31|)) (DiskLayout.__default.ValidLocation |loc#0@@31|))))) :qid |DiskLayo.165:34| :skolemid |1449| :pattern ( (DiskLayout.__default.ValidLocation |loc#0@@31|)) ))))
(assert  (=> true (forall ((|loc#0@@32| T@U) ) (!  (=> (and (= (type |loc#0@@32|) DatatypeTypeType) (or (|DiskLayout.__default.ValidLocation#canCall| (Lit |loc#0@@32|)) ($Is |loc#0@@32| Tclass.DiskLayout.Location))) (and (and (and (and (and (|DiskLayout.__default.ValidSuperblock1Location#canCall| (Lit |loc#0@@32|)) (=> (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@32|)))))) (|DiskLayout.__default.ValidSuperblock2Location#canCall| (Lit |loc#0@@32|)))) (=> (and (|DiskLayout.__default.ValidSuperblock2Location#canCall| (Lit |loc#0@@32|)) (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@32|))))))) (|DiskLayout.__default.ValidJournalLocation#canCall| (Lit |loc#0@@32|)))) (=> (and (|DiskLayout.__default.ValidJournalLocation#canCall| (Lit |loc#0@@32|)) (not (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit |loc#0@@32|)))) (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| (Lit |loc#0@@32|)))) (=> (and (|DiskLayout.__default.ValidIndirectionTableLocation#canCall| (Lit |loc#0@@32|)) (not (U_2_bool (Lit (bool_2_U (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@32|))))))) (|DiskLayout.__default.ValidNodeLocation#canCall| (Lit |loc#0@@32|)))) (and (=> (DiskLayout.__default.ValidLocation (Lit |loc#0@@32|)) (or (or (or (or (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@32|)) (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@32|))) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit |loc#0@@32|))) (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@32|))) (DiskLayout.__default.ValidNodeLocation (Lit |loc#0@@32|)))) (=> (or (or (or (or (DiskLayout.__default.ValidSuperblock1Location (Lit |loc#0@@32|)) (DiskLayout.__default.ValidSuperblock2Location (Lit |loc#0@@32|))) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit |loc#0@@32|))) (DiskLayout.__default.ValidIndirectionTableLocation (Lit |loc#0@@32|))) (DiskLayout.__default.ValidNodeLocation (Lit |loc#0@@32|))) (DiskLayout.__default.ValidLocation (Lit |loc#0@@32|)))))) :qid |DiskLayo.165:34| :weight 3 :skolemid |1450| :pattern ( (DiskLayout.__default.ValidLocation (Lit |loc#0@@32|))) ))))
(assert  (=> true (forall ((|loc#0@@33| T@U) (|loc'#0| T@U) ) (!  (=> (and (and (= (type |loc#0@@33|) DatatypeTypeType) (= (type |loc'#0|) DatatypeTypeType)) (or (|DiskLayout.__default.overlap#canCall| |loc#0@@33| |loc'#0|) (and ($Is |loc#0@@33| Tclass.DiskLayout.Location) ($Is |loc'#0| Tclass.DiskLayout.Location)))) true) :qid |DiskLayo.185:21| :skolemid |1451| :pattern ( (DiskLayout.__default.overlap |loc#0@@33| |loc'#0|)) ))))
(assert (forall ((|loc#0@@34| T@U) (|loc'#0@@0| T@U) ) (!  (=> (and (and (= (type |loc#0@@34|) DatatypeTypeType) (= (type |loc'#0@@0|) DatatypeTypeType)) (and ($Is |loc#0@@34| Tclass.DiskLayout.Location) ($Is |loc'#0@@0| Tclass.DiskLayout.Location))) (and (=> (|DiskLayout.__default.overlap#requires| |loc#0@@34| |loc'#0@@0|) true) (=> true (|DiskLayout.__default.overlap#requires| |loc#0@@34| |loc'#0@@0|)))) :qid |DiskLayo.185:21| :skolemid |1452| :pattern ( (|DiskLayout.__default.overlap#requires| |loc#0@@34| |loc'#0@@0|)) )))
(assert  (=> true (forall ((|loc#0@@35| T@U) (|loc'#0@@1| T@U) ) (!  (=> (and (and (= (type |loc#0@@35|) DatatypeTypeType) (= (type |loc'#0@@1|) DatatypeTypeType)) (or (|DiskLayout.__default.overlap#canCall| |loc#0@@35| |loc'#0@@1|) (and ($Is |loc#0@@35| Tclass.DiskLayout.Location) ($Is |loc'#0@@1| Tclass.DiskLayout.Location)))) (and (and (and (and (DiskLayout.Location.Location_q |loc#0@@35|) (DiskLayout.Location.Location_q |loc#0@@35|)) (DiskLayout.Location.Location_q |loc'#0@@1|)) (=> (> (+ (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.Location.len |loc#0@@35|)) (DiskLayout.Location.addr |loc'#0@@1|)) (and (and (DiskLayout.Location.Location_q |loc'#0@@1|) (DiskLayout.Location.Location_q |loc'#0@@1|)) (DiskLayout.Location.Location_q |loc#0@@35|)))) (and (=> (DiskLayout.__default.overlap |loc#0@@35| |loc'#0@@1|) (and (> (+ (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.Location.len |loc#0@@35|)) (DiskLayout.Location.addr |loc'#0@@1|)) (> (+ (DiskLayout.Location.addr |loc'#0@@1|) (DiskLayout.Location.len |loc'#0@@1|)) (DiskLayout.Location.addr |loc#0@@35|)))) (=> (and (> (+ (DiskLayout.Location.addr |loc#0@@35|) (DiskLayout.Location.len |loc#0@@35|)) (DiskLayout.Location.addr |loc'#0@@1|)) (> (+ (DiskLayout.Location.addr |loc'#0@@1|) (DiskLayout.Location.len |loc'#0@@1|)) (DiskLayout.Location.addr |loc#0@@35|))) (DiskLayout.__default.overlap |loc#0@@35| |loc'#0@@1|))))) :qid |DiskLayo.185:21| :skolemid |1453| :pattern ( (DiskLayout.__default.overlap |loc#0@@35| |loc'#0@@1|)) ))))
(assert  (=> true (forall ((|loc#0@@36| T@U) (|loc'#0@@2| T@U) ) (!  (=> (and (and (= (type |loc#0@@36|) DatatypeTypeType) (= (type |loc'#0@@2|) DatatypeTypeType)) (or (|DiskLayout.__default.overlap#canCall| (Lit |loc#0@@36|) (Lit |loc'#0@@2|)) (and ($Is |loc#0@@36| Tclass.DiskLayout.Location) ($Is |loc'#0@@2| Tclass.DiskLayout.Location)))) (and (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@36|)) (DiskLayout.Location.Location_q (Lit |loc#0@@36|))) (DiskLayout.Location.Location_q (Lit |loc'#0@@2|))) (=> (U_2_bool (Lit (bool_2_U (> (+ (DiskLayout.Location.addr (Lit |loc#0@@36|)) (DiskLayout.Location.len (Lit |loc#0@@36|))) (DiskLayout.Location.addr (Lit |loc'#0@@2|)))))) (and (and (DiskLayout.Location.Location_q (Lit |loc'#0@@2|)) (DiskLayout.Location.Location_q (Lit |loc'#0@@2|))) (DiskLayout.Location.Location_q (Lit |loc#0@@36|))))) (and (=> (DiskLayout.__default.overlap (Lit |loc#0@@36|) (Lit |loc'#0@@2|)) (U_2_bool (Lit (bool_2_U  (and (> (+ (DiskLayout.Location.addr (Lit |loc#0@@36|)) (DiskLayout.Location.len (Lit |loc#0@@36|))) (DiskLayout.Location.addr (Lit |loc'#0@@2|))) (> (+ (DiskLayout.Location.addr (Lit |loc'#0@@2|)) (DiskLayout.Location.len (Lit |loc'#0@@2|))) (DiskLayout.Location.addr (Lit |loc#0@@36|)))))))) (=> (U_2_bool (Lit (bool_2_U  (and (> (+ (DiskLayout.Location.addr (Lit |loc#0@@36|)) (DiskLayout.Location.len (Lit |loc#0@@36|))) (DiskLayout.Location.addr (Lit |loc'#0@@2|))) (> (+ (DiskLayout.Location.addr (Lit |loc'#0@@2|)) (DiskLayout.Location.len (Lit |loc'#0@@2|))) (DiskLayout.Location.addr (Lit |loc#0@@36|))))))) (DiskLayout.__default.overlap (Lit |loc#0@@36|) (Lit |loc'#0@@2|)))))) :qid |DiskLayo.185:21| :weight 3 :skolemid |1454| :pattern ( (DiskLayout.__default.overlap (Lit |loc#0@@36|) (Lit |loc'#0@@2|))) ))))
(assert  (=> true (forall ((|start#0@@7| Int) (|len#0@@7| Int) ) (!  (=> (or (|DiskLayout.__default.JournalRangeLocation#canCall| |start#0@@7| |len#0@@7|) (and (and (and (<= (LitInt 0) |start#0@@7|) (< |start#0@@7| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@7|) (< |len#0@@7| 18446744073709551616))) (and (< |start#0@@7| DiskLayout.__default.NumJournalBlocks) (<= (+ |start#0@@7| |len#0@@7|) (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (DiskLayout.__default.JournalRangeLocation |start#0@@7| |len#0@@7|)) ($Is (DiskLayout.__default.JournalRangeLocation |start#0@@7| |len#0@@7|) Tclass.DiskLayout.Location))) :qid |DiskLayo.231:40| :skolemid |1455| :pattern ( (DiskLayout.__default.JournalRangeLocation |start#0@@7| |len#0@@7|)) ))))
(assert (forall ((|start#0@@8| Int) (|len#0@@8| Int) ) (!  (=> (and (and (<= (LitInt 0) |start#0@@8|) (< |start#0@@8| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@8|) (< |len#0@@8| 18446744073709551616))) (and (=> (|DiskLayout.__default.JournalRangeLocation#requires| |start#0@@8| |len#0@@8|) (and (< |start#0@@8| DiskLayout.__default.NumJournalBlocks) (<= (+ |start#0@@8| |len#0@@8|) (LitInt DiskLayout.__default.NumJournalBlocks)))) (=> (and (< |start#0@@8| DiskLayout.__default.NumJournalBlocks) (<= (+ |start#0@@8| |len#0@@8|) (LitInt DiskLayout.__default.NumJournalBlocks))) (|DiskLayout.__default.JournalRangeLocation#requires| |start#0@@8| |len#0@@8|)))) :qid |DiskLayo.231:40| :skolemid |1456| :pattern ( (|DiskLayout.__default.JournalRangeLocation#requires| |start#0@@8| |len#0@@8|)) )))
(assert (= (type MoreFuel_DiskLayout._default.ValidJournalLocation2) LayerTypeType))
(assert  (=> true (forall ((|start#0@@9| Int) (|len#0@@9| Int) ) (!  (=> (or (|DiskLayout.__default.JournalRangeLocation#canCall| |start#0@@9| |len#0@@9|) (and (and (and (<= (LitInt 0) |start#0@@9|) (< |start#0@@9| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@9|) (< |len#0@@9| 18446744073709551616))) (and (< |start#0@@9| DiskLayout.__default.NumJournalBlocks) (<= (+ |start#0@@9| |len#0@@9|) (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (|DiskLayout.__default.JournalPoint#canCall| |start#0@@9|) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation2)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation2)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation2) MoreFuel_DiskLayout._default.ValidJournalLocation2)) (= (DiskLayout.__default.JournalRangeLocation |start#0@@9| |len#0@@9|) (|#DiskLayout.Location.Location| (DiskLayout.__default.JournalPoint |start#0@@9|) (Mul |len#0@@9| (LitInt 4096))))))) :qid |DiskLayo.231:40| :skolemid |1457| :pattern ( (DiskLayout.__default.JournalRangeLocation |start#0@@9| |len#0@@9|)) ))))
(assert (= (type MoreFuel_DiskLayout._default.ValidJournalLocation3) LayerTypeType))
(assert  (=> true (forall ((|start#0@@10| Int) (|len#0@@10| Int) ) (!  (=> (or (|DiskLayout.__default.JournalRangeLocation#canCall| (LitInt |start#0@@10|) (LitInt |len#0@@10|)) (and (and (and (<= (LitInt 0) |start#0@@10|) (< |start#0@@10| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@10|) (< |len#0@@10| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (< |start#0@@10| DiskLayout.__default.NumJournalBlocks)))) (<= (LitInt (+ |start#0@@10| |len#0@@10|)) (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@10|)) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation3)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation3)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation3) MoreFuel_DiskLayout._default.ValidJournalLocation3)) (= (DiskLayout.__default.JournalRangeLocation (LitInt |start#0@@10|) (LitInt |len#0@@10|)) (Lit (|#DiskLayout.Location.Location| (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@10|))) (LitInt (Mul (LitInt |len#0@@10|) (LitInt 4096))))))))) :qid |DiskLayo.231:40| :weight 3 :skolemid |1458| :pattern ( (DiskLayout.__default.JournalRangeLocation (LitInt |start#0@@10|) (LitInt |len#0@@10|))) ))))
(assert  (=> true (forall ((|loc#0@@37| T@U) (|start#0@@11| Int) (|len#0@@11| Int) ) (!  (=> (and (= (type |loc#0@@37|) DatatypeTypeType) (or (|DiskLayout.__default.locContainedInCircularJournalRange#canCall| |loc#0@@37| |start#0@@11| |len#0@@11|) (and (and (and ($Is |loc#0@@37| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@11|) (< |start#0@@11| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@11|) (< |len#0@@11| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@11|) (< |start#0@@11| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@11|) (<= |len#0@@11| (LitInt DiskLayout.__default.NumJournalBlocks))))))) true) :qid |DiskLayo.240:48| :skolemid |1459| :pattern ( (DiskLayout.__default.locContainedInCircularJournalRange |loc#0@@37| |start#0@@11| |len#0@@11|)) ))))
(assert (forall ((|loc#0@@38| T@U) (|start#0@@12| Int) (|len#0@@12| Int) ) (!  (=> (= (type |loc#0@@38|) DatatypeTypeType) (=> (and (and ($Is |loc#0@@38| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@12|) (< |start#0@@12| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@12|) (< |len#0@@12| 18446744073709551616))) (and (=> (|DiskLayout.__default.locContainedInCircularJournalRange#requires| |loc#0@@38| |start#0@@12| |len#0@@12|) (and (and (<= (LitInt 0) |start#0@@12|) (< |start#0@@12| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@12|) (<= |len#0@@12| (LitInt DiskLayout.__default.NumJournalBlocks))))) (=> (and (and (<= (LitInt 0) |start#0@@12|) (< |start#0@@12| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@12|) (<= |len#0@@12| (LitInt DiskLayout.__default.NumJournalBlocks)))) (|DiskLayout.__default.locContainedInCircularJournalRange#requires| |loc#0@@38| |start#0@@12| |len#0@@12|))))) :qid |DiskLayo.240:48| :skolemid |1460| :pattern ( (|DiskLayout.__default.locContainedInCircularJournalRange#requires| |loc#0@@38| |start#0@@12| |len#0@@12|)) )))
(assert  (=> true (forall ((|loc#0@@39| T@U) (|start#0@@13| Int) (|len#0@@13| Int) ) (!  (=> (and (= (type |loc#0@@39|) DatatypeTypeType) (or (|DiskLayout.__default.locContainedInCircularJournalRange#canCall| |loc#0@@39| |start#0@@13| |len#0@@13|) (and (and (and ($Is |loc#0@@39| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@13|) (< |start#0@@13| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@13|) (< |len#0@@13| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@13|) (< |start#0@@13| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@13|) (<= |len#0@@13| (LitInt DiskLayout.__default.NumJournalBlocks))))))) (and (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (<= (+ |start#0@@13| |len#0@@13|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (|DiskLayout.__default.JournalPoint#canCall| |start#0@@13|)) (=> (>= (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.__default.JournalPoint |start#0@@13|)) (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (DiskLayout.Location.Location_q |loc#0@@39|)) (|DiskLayout.__default.JournalPoint#canCall| (+ |start#0@@13| |len#0@@13|))))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (+ |start#0@@13| |len#0@@13|)) (and (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (|DiskLayout.__default.JournalPoint#canCall| |start#0@@13|)) (=> (>= (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.__default.JournalPoint |start#0@@13|)) (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (DiskLayout.Location.Location_q |loc#0@@39|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))))) (=> (and (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (DiskLayout.Location.Location_q |loc#0@@39|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))) (< (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))) (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)))) (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (|DiskLayout.__default.JournalPoint#canCall| (LitInt 0))) (=> (>= (DiskLayout.Location.addr |loc#0@@39|) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (and (and (DiskLayout.Location.Location_q |loc#0@@39|) (DiskLayout.Location.Location_q |loc#0@@39|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (- (+ |start#0@@13| |len#0@@13|) DiskLayout.__default.NumJournalBlocks)))))))))) (and (=> (DiskLayout.__default.locContainedInCircularJournalRange |loc#0@@39| |start#0@@13| |len#0@@13|) (ite (<= (+ |start#0@@13| |len#0@@13|) (LitInt DiskLayout.__default.NumJournalBlocks))  (and (>= (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.__default.JournalPoint |start#0@@13|)) (<= (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)) (DiskLayout.__default.JournalPoint (+ |start#0@@13| |len#0@@13|))))  (or (and (>= (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.__default.JournalPoint |start#0@@13|)) (<= (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (DiskLayout.Location.addr |loc#0@@39|) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (<= (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)) (DiskLayout.__default.JournalPoint (- (+ |start#0@@13| |len#0@@13|) DiskLayout.__default.NumJournalBlocks))))))) (=> (ite (<= (+ |start#0@@13| |len#0@@13|) (LitInt DiskLayout.__default.NumJournalBlocks))  (and (>= (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.__default.JournalPoint |start#0@@13|)) (<= (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)) (DiskLayout.__default.JournalPoint (+ |start#0@@13| |len#0@@13|))))  (or (and (>= (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.__default.JournalPoint |start#0@@13|)) (<= (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (DiskLayout.Location.addr |loc#0@@39|) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (<= (+ (DiskLayout.Location.addr |loc#0@@39|) (DiskLayout.Location.len |loc#0@@39|)) (DiskLayout.__default.JournalPoint (- (+ |start#0@@13| |len#0@@13|) DiskLayout.__default.NumJournalBlocks)))))) (DiskLayout.__default.locContainedInCircularJournalRange |loc#0@@39| |start#0@@13| |len#0@@13|))))) :qid |DiskLayo.240:48| :skolemid |1461| :pattern ( (DiskLayout.__default.locContainedInCircularJournalRange |loc#0@@39| |start#0@@13| |len#0@@13|)) ))))
(assert  (=> true (forall ((|loc#0@@40| T@U) (|start#0@@14| Int) (|len#0@@14| Int) ) (!  (=> (and (= (type |loc#0@@40|) DatatypeTypeType) (or (|DiskLayout.__default.locContainedInCircularJournalRange#canCall| (Lit |loc#0@@40|) (LitInt |start#0@@14|) (LitInt |len#0@@14|)) (and (and (and ($Is |loc#0@@40| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@14|) (< |start#0@@14| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@14|) (< |len#0@@14| 18446744073709551616))) (and (and (<= (LitInt 0) (LitInt |start#0@@14|)) (< |start#0@@14| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (LitInt |len#0@@14|)) (<= (LitInt |len#0@@14|) (LitInt DiskLayout.__default.NumJournalBlocks))))))) (and (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (<= (LitInt (+ |start#0@@14| |len#0@@14|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@14|))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@14|)))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (DiskLayout.Location.Location_q (Lit |loc#0@@40|))) (|DiskLayout.__default.JournalPoint#canCall| (LitInt (+ |start#0@@14| |len#0@@14|)))))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt (+ |start#0@@14| |len#0@@14|))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@14|))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@14|)))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (DiskLayout.Location.Location_q (Lit |loc#0@@40|))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))))) (=> (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (DiskLayout.Location.Location_q (Lit |loc#0@@40|))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))) (< (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))) (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt 0))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@40|)) (DiskLayout.Location.Location_q (Lit |loc#0@@40|))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt (- (+ |start#0@@14| |len#0@@14|) DiskLayout.__default.NumJournalBlocks))))))))))) (and (=> (DiskLayout.__default.locContainedInCircularJournalRange (Lit |loc#0@@40|) (LitInt |start#0@@14|) (LitInt |len#0@@14|)) (ite (<= (LitInt (+ |start#0@@14| |len#0@@14|)) (LitInt DiskLayout.__default.NumJournalBlocks))  (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@14|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (+ |start#0@@14| |len#0@@14|))))))  (or (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@14|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (- (+ |start#0@@14| |len#0@@14|) DiskLayout.__default.NumJournalBlocks))))))))) (=> (ite (<= (LitInt (+ |start#0@@14| |len#0@@14|)) (LitInt DiskLayout.__default.NumJournalBlocks))  (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@14|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (+ |start#0@@14| |len#0@@14|))))))  (or (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@14|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@40|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@40|)) (DiskLayout.Location.len (Lit |loc#0@@40|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (- (+ |start#0@@14| |len#0@@14|) DiskLayout.__default.NumJournalBlocks)))))))) (DiskLayout.__default.locContainedInCircularJournalRange (Lit |loc#0@@40|) (LitInt |start#0@@14|) (LitInt |len#0@@14|)))))) :qid |DiskLayo.240:48| :weight 3 :skolemid |1462| :pattern ( (DiskLayout.__default.locContainedInCircularJournalRange (Lit |loc#0@@40|) (LitInt |start#0@@14|) (LitInt |len#0@@14|))) ))))
(assert  (=> true (forall ((|loc#0@@41| T@U) (|start#0@@15| Int) (|len#0@@15| Int) ) (!  (=> (and (= (type |loc#0@@41|) DatatypeTypeType) (or (|DiskLayout.__default.locDisjointFromCircularJournalRange#canCall| |loc#0@@41| |start#0@@15| |len#0@@15|) (and (and (and ($Is |loc#0@@41| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@15|) (< |start#0@@15| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@15|) (< |len#0@@15| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@15|) (< |start#0@@15| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@15|) (<= |len#0@@15| (LitInt DiskLayout.__default.NumJournalBlocks))))))) true) :qid |DiskLayo.261:49| :skolemid |1463| :pattern ( (DiskLayout.__default.locDisjointFromCircularJournalRange |loc#0@@41| |start#0@@15| |len#0@@15|)) ))))
(assert (forall ((|loc#0@@42| T@U) (|start#0@@16| Int) (|len#0@@16| Int) ) (!  (=> (= (type |loc#0@@42|) DatatypeTypeType) (=> (and (and ($Is |loc#0@@42| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@16|) (< |start#0@@16| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@16|) (< |len#0@@16| 18446744073709551616))) (and (=> (|DiskLayout.__default.locDisjointFromCircularJournalRange#requires| |loc#0@@42| |start#0@@16| |len#0@@16|) (and (and (<= (LitInt 0) |start#0@@16|) (< |start#0@@16| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@16|) (<= |len#0@@16| (LitInt DiskLayout.__default.NumJournalBlocks))))) (=> (and (and (<= (LitInt 0) |start#0@@16|) (< |start#0@@16| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@16|) (<= |len#0@@16| (LitInt DiskLayout.__default.NumJournalBlocks)))) (|DiskLayout.__default.locDisjointFromCircularJournalRange#requires| |loc#0@@42| |start#0@@16| |len#0@@16|))))) :qid |DiskLayo.261:49| :skolemid |1464| :pattern ( (|DiskLayout.__default.locDisjointFromCircularJournalRange#requires| |loc#0@@42| |start#0@@16| |len#0@@16|)) )))
(assert  (=> true (forall ((|loc#0@@43| T@U) (|start#0@@17| Int) (|len#0@@17| Int) ) (!  (=> (and (= (type |loc#0@@43|) DatatypeTypeType) (or (|DiskLayout.__default.locDisjointFromCircularJournalRange#canCall| |loc#0@@43| |start#0@@17| |len#0@@17|) (and (and (and ($Is |loc#0@@43| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@17|) (< |start#0@@17| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@17|) (< |len#0@@17| 18446744073709551616))) (and (and (<= (LitInt 0) |start#0@@17|) (< |start#0@@17| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) |len#0@@17|) (<= |len#0@@17| (LitInt DiskLayout.__default.NumJournalBlocks))))))) (and (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (<= (+ |start#0@@17| |len#0@@17|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (and (and (DiskLayout.Location.Location_q |loc#0@@43|) (DiskLayout.Location.Location_q |loc#0@@43|)) (|DiskLayout.__default.JournalPoint#canCall| |start#0@@17|)) (=> (< (DiskLayout.__default.JournalPoint |start#0@@17|) (+ (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.Location.len |loc#0@@43|))) (and (DiskLayout.Location.Location_q |loc#0@@43|) (|DiskLayout.__default.JournalPoint#canCall| (+ |start#0@@17| |len#0@@17|))))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (+ |start#0@@17| |len#0@@17|)) (and (and (and (and (DiskLayout.Location.Location_q |loc#0@@43|) (DiskLayout.Location.Location_q |loc#0@@43|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt 0))) (=> (< (LitInt (DiskLayout.__default.JournalPoint (LitInt 0))) (+ (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.Location.len |loc#0@@43|))) (and (DiskLayout.Location.Location_q |loc#0@@43|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))))) (=> (and (and (DiskLayout.Location.Location_q |loc#0@@43|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))) (> (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))) (DiskLayout.Location.addr |loc#0@@43|))) (and (and (DiskLayout.Location.Location_q |loc#0@@43|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (- (+ |start#0@@17| |len#0@@17|) DiskLayout.__default.NumJournalBlocks)))) (=> (>= (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.__default.JournalPoint (- (+ |start#0@@17| |len#0@@17|) DiskLayout.__default.NumJournalBlocks))) (and (and (DiskLayout.Location.Location_q |loc#0@@43|) (DiskLayout.Location.Location_q |loc#0@@43|)) (|DiskLayout.__default.JournalPoint#canCall| |start#0@@17|)))))))) (and (=> (DiskLayout.__default.locDisjointFromCircularJournalRange |loc#0@@43| |start#0@@17| |len#0@@17|) (ite (<= (+ |start#0@@17| |len#0@@17|) (LitInt DiskLayout.__default.NumJournalBlocks))  (or (<= (+ (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.Location.len |loc#0@@43|)) (DiskLayout.__default.JournalPoint |start#0@@17|)) (>= (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.__default.JournalPoint (+ |start#0@@17| |len#0@@17|))))  (or (or (<= (+ (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.Location.len |loc#0@@43|)) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (>= (DiskLayout.Location.addr |loc#0@@43|) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.__default.JournalPoint (- (+ |start#0@@17| |len#0@@17|) DiskLayout.__default.NumJournalBlocks))) (<= (+ (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.Location.len |loc#0@@43|)) (DiskLayout.__default.JournalPoint |start#0@@17|)))))) (=> (ite (<= (+ |start#0@@17| |len#0@@17|) (LitInt DiskLayout.__default.NumJournalBlocks))  (or (<= (+ (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.Location.len |loc#0@@43|)) (DiskLayout.__default.JournalPoint |start#0@@17|)) (>= (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.__default.JournalPoint (+ |start#0@@17| |len#0@@17|))))  (or (or (<= (+ (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.Location.len |loc#0@@43|)) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (>= (DiskLayout.Location.addr |loc#0@@43|) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.__default.JournalPoint (- (+ |start#0@@17| |len#0@@17|) DiskLayout.__default.NumJournalBlocks))) (<= (+ (DiskLayout.Location.addr |loc#0@@43|) (DiskLayout.Location.len |loc#0@@43|)) (DiskLayout.__default.JournalPoint |start#0@@17|))))) (DiskLayout.__default.locDisjointFromCircularJournalRange |loc#0@@43| |start#0@@17| |len#0@@17|))))) :qid |DiskLayo.261:49| :skolemid |1465| :pattern ( (DiskLayout.__default.locDisjointFromCircularJournalRange |loc#0@@43| |start#0@@17| |len#0@@17|)) ))))
(assert  (=> true (forall ((|loc#0@@44| T@U) (|start#0@@18| Int) (|len#0@@18| Int) ) (!  (=> (and (= (type |loc#0@@44|) DatatypeTypeType) (or (|DiskLayout.__default.locDisjointFromCircularJournalRange#canCall| (Lit |loc#0@@44|) (LitInt |start#0@@18|) (LitInt |len#0@@18|)) (and (and (and ($Is |loc#0@@44| Tclass.DiskLayout.Location) (and (<= (LitInt 0) |start#0@@18|) (< |start#0@@18| 18446744073709551616))) (and (<= (LitInt 0) |len#0@@18|) (< |len#0@@18| 18446744073709551616))) (and (and (<= (LitInt 0) (LitInt |start#0@@18|)) (< |start#0@@18| DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (LitInt |len#0@@18|)) (<= (LitInt |len#0@@18|) (LitInt DiskLayout.__default.NumJournalBlocks))))))) (and (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (<= (LitInt (+ |start#0@@18| |len#0@@18|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@44|)) (DiskLayout.Location.Location_q (Lit |loc#0@@44|))) (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@18|))) (=> (< (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@18|))) (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@44|)) (DiskLayout.Location.len (Lit |loc#0@@44|))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@44|)) (|DiskLayout.__default.JournalPoint#canCall| (LitInt (+ |start#0@@18| |len#0@@18|)))))))) (=> (< (LitInt DiskLayout.__default.NumJournalBlocks) (LitInt (+ |start#0@@18| |len#0@@18|))) (and (and (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@44|)) (DiskLayout.Location.Location_q (Lit |loc#0@@44|))) (|DiskLayout.__default.JournalPoint#canCall| (LitInt 0))) (=> (< (LitInt (DiskLayout.__default.JournalPoint (LitInt 0))) (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@44|)) (DiskLayout.Location.len (Lit |loc#0@@44|))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@44|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))))) (=> (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@44|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt DiskLayout.__default.NumJournalBlocks)))) (> (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))) (LitInt (DiskLayout.Location.addr (Lit |loc#0@@44|))))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@44|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalPoint#canCall| (LitInt (- (+ |start#0@@18| |len#0@@18|) DiskLayout.__default.NumJournalBlocks))))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@44|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (- (+ |start#0@@18| |len#0@@18|) DiskLayout.__default.NumJournalBlocks))))) (and (and (DiskLayout.Location.Location_q (Lit |loc#0@@44|)) (DiskLayout.Location.Location_q (Lit |loc#0@@44|))) (|DiskLayout.__default.JournalPoint#canCall| (LitInt |start#0@@18|))))))))) (and (=> (DiskLayout.__default.locDisjointFromCircularJournalRange (Lit |loc#0@@44|) (LitInt |start#0@@18|) (LitInt |len#0@@18|)) (ite (<= (LitInt (+ |start#0@@18| |len#0@@18|)) (LitInt DiskLayout.__default.NumJournalBlocks))  (or (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@44|)) (DiskLayout.Location.len (Lit |loc#0@@44|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@18|)))) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@44|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (+ |start#0@@18| |len#0@@18|))))))  (or (or (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@44|)) (DiskLayout.Location.len (Lit |loc#0@@44|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@44|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@44|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (- (+ |start#0@@18| |len#0@@18|) DiskLayout.__default.NumJournalBlocks))))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@44|)) (DiskLayout.Location.len (Lit |loc#0@@44|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@18|)))))))) (=> (ite (<= (LitInt (+ |start#0@@18| |len#0@@18|)) (LitInt DiskLayout.__default.NumJournalBlocks))  (or (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@44|)) (DiskLayout.Location.len (Lit |loc#0@@44|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@18|)))) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@44|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (+ |start#0@@18| |len#0@@18|))))))  (or (or (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@44|)) (DiskLayout.Location.len (Lit |loc#0@@44|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt 0)))) (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@44|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc#0@@44|))) (LitInt (DiskLayout.__default.JournalPoint (LitInt (- (+ |start#0@@18| |len#0@@18|) DiskLayout.__default.NumJournalBlocks))))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc#0@@44|)) (DiskLayout.Location.len (Lit |loc#0@@44|)))) (LitInt (DiskLayout.__default.JournalPoint (LitInt |start#0@@18|))))))) (DiskLayout.__default.locDisjointFromCircularJournalRange (Lit |loc#0@@44|) (LitInt |start#0@@18|) (LitInt |len#0@@18|)))))) :qid |DiskLayo.261:49| :weight 3 :skolemid |1466| :pattern ( (DiskLayout.__default.locDisjointFromCircularJournalRange (Lit |loc#0@@44|) (LitInt |start#0@@18|) (LitInt |len#0@@18|))) ))))
(assert  (=> true (forall ((|start#0@@19| Int) (|span#0| Int) ) (!  (=> true true) :qid |DiskLayo.282:26| :skolemid |1467| :pattern ( (DiskLayout.__default.JournalPosAdd |start#0@@19| |span#0|)) ))))
(assert (forall ((|start#0@@20| Int) (|span#0@@0| Int) ) (!  (and (=> (|DiskLayout.__default.JournalPosAdd#requires| |start#0@@20| |span#0@@0|) true) (=> true (|DiskLayout.__default.JournalPosAdd#requires| |start#0@@20| |span#0@@0|))) :qid |DiskLayo.282:26| :skolemid |1468| :pattern ( (|DiskLayout.__default.JournalPosAdd#requires| |start#0@@20| |span#0@@0|)) )))
(assert  (=> true (forall ((|start#0@@21| Int) (|span#0@@1| Int) ) (!  (=> true (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (>= (+ |start#0@@21| |span#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks)) |DiskLayout.__default.NumJournalBlocks#canCall|)) (= (DiskLayout.__default.JournalPosAdd |start#0@@21| |span#0@@1|) (ite (>= (+ |start#0@@21| |span#0@@1|) (LitInt DiskLayout.__default.NumJournalBlocks)) (- (+ |start#0@@21| |span#0@@1|) DiskLayout.__default.NumJournalBlocks) (+ |start#0@@21| |span#0@@1|))))) :qid |DiskLayo.282:26| :skolemid |1469| :pattern ( (DiskLayout.__default.JournalPosAdd |start#0@@21| |span#0@@1|)) ))))
(assert  (=> true (forall ((|start#0@@22| Int) (|span#0@@2| Int) ) (!  (=> true (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (>= (LitInt (+ |start#0@@22| |span#0@@2|)) (LitInt DiskLayout.__default.NumJournalBlocks)) |DiskLayout.__default.NumJournalBlocks#canCall|)) (= (DiskLayout.__default.JournalPosAdd (LitInt |start#0@@22|) (LitInt |span#0@@2|)) (ite (>= (LitInt (+ |start#0@@22| |span#0@@2|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (- (+ |start#0@@22| |span#0@@2|) DiskLayout.__default.NumJournalBlocks) (+ |start#0@@22| |span#0@@2|))))) :qid |DiskLayo.282:26| :weight 3 :skolemid |1470| :pattern ( (DiskLayout.__default.JournalPosAdd (LitInt |start#0@@22|) (LitInt |span#0@@2|))) ))))
(assert (forall ((arg0@@239 Int) (arg1@@121 Int) ) (! (= (type (DiskLayout.__default.JournalFrontLocation arg0@@239 arg1@@121)) DatatypeTypeType) :qid |funType:DiskLayout.__default.JournalFrontLocation| :pattern ( (DiskLayout.__default.JournalFrontLocation arg0@@239 arg1@@121)) )))
(assert  (=> true (forall ((|start#0@@23| Int) (|len#0@@19| Int) ) (!  (=> (or (|DiskLayout.__default.JournalFrontLocation#canCall| |start#0@@23| |len#0@@19|) (and (and (and (<= (LitInt 0) |start#0@@23|) (< |start#0@@23| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@19|) (< |len#0@@19| 18446744073709551616))) (< |start#0@@23| DiskLayout.__default.NumJournalBlocks))) ($Is (DiskLayout.__default.JournalFrontLocation |start#0@@23| |len#0@@19|) (Tclass.Options.Option Tclass.DiskLayout.Location))) :qid |DiskLayo.290:33| :skolemid |1471| :pattern ( (DiskLayout.__default.JournalFrontLocation |start#0@@23| |len#0@@19|)) ))))
(assert (forall ((|start#0@@24| Int) (|len#0@@20| Int) ) (!  (=> (and (and (<= (LitInt 0) |start#0@@24|) (< |start#0@@24| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@20|) (< |len#0@@20| 18446744073709551616))) (and (=> (|DiskLayout.__default.JournalFrontLocation#requires| |start#0@@24| |len#0@@20|) (< |start#0@@24| DiskLayout.__default.NumJournalBlocks)) (=> (< |start#0@@24| DiskLayout.__default.NumJournalBlocks) (|DiskLayout.__default.JournalFrontLocation#requires| |start#0@@24| |len#0@@20|)))) :qid |DiskLayo.290:33| :skolemid |1472| :pattern ( (|DiskLayout.__default.JournalFrontLocation#requires| |start#0@@24| |len#0@@20|)) )))
(assert  (=> true (forall ((|start#0@@25| Int) (|len#0@@21| Int) ) (!  (=> (or (|DiskLayout.__default.JournalFrontLocation#canCall| |start#0@@25| |len#0@@21|) (and (and (and (<= (LitInt 0) |start#0@@25|) (< |start#0@@25| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@21|) (< |len#0@@21| 18446744073709551616))) (< |start#0@@25| DiskLayout.__default.NumJournalBlocks))) (and (=> (not (= |len#0@@21| (LitInt 0))) (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (- DiskLayout.__default.NumJournalBlocks |start#0@@25|) |len#0@@21|) |DiskLayout.__default.NumJournalBlocks#canCall|)) (|DiskLayout.__default.JournalRangeLocation#canCall| |start#0@@25| (ite (<= |len#0@@21| (- DiskLayout.__default.NumJournalBlocks |start#0@@25|)) |len#0@@21| (- DiskLayout.__default.NumJournalBlocks |start#0@@25|))))) (= (DiskLayout.__default.JournalFrontLocation |start#0@@25| |len#0@@21|) (ite (= |len#0@@21| (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| ($Box (DiskLayout.__default.JournalRangeLocation |start#0@@25| (ite (<= |len#0@@21| (- DiskLayout.__default.NumJournalBlocks |start#0@@25|)) |len#0@@21| (- DiskLayout.__default.NumJournalBlocks |start#0@@25|))))))))) :qid |DiskLayo.290:33| :skolemid |1473| :pattern ( (DiskLayout.__default.JournalFrontLocation |start#0@@25| |len#0@@21|)) ))))
(assert  (=> true (forall ((|start#0@@26| Int) (|len#0@@22| Int) ) (!  (=> (or (|DiskLayout.__default.JournalFrontLocation#canCall| (LitInt |start#0@@26|) (LitInt |len#0@@22|)) (and (and (and (<= (LitInt 0) |start#0@@26|) (< |start#0@@26| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@22|) (< |len#0@@22| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< |start#0@@26| DiskLayout.__default.NumJournalBlocks)))))) (and (=> (not (= (LitInt |len#0@@22|) (LitInt 0))) (and (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@26|)) (LitInt |len#0@@22|)) |DiskLayout.__default.NumJournalBlocks#canCall|)) (|DiskLayout.__default.JournalRangeLocation#canCall| (LitInt |start#0@@26|) (ite (<= (LitInt |len#0@@22|) (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@26|))) |len#0@@22| (- DiskLayout.__default.NumJournalBlocks |start#0@@26|))))) (= (DiskLayout.__default.JournalFrontLocation (LitInt |start#0@@26|) (LitInt |len#0@@22|)) (ite (= (LitInt |len#0@@22|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| ($Box (DiskLayout.__default.JournalRangeLocation (LitInt |start#0@@26|) (ite (<= (LitInt |len#0@@22|) (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@26|))) |len#0@@22| (- DiskLayout.__default.NumJournalBlocks |start#0@@26|))))))))) :qid |DiskLayo.290:33| :weight 3 :skolemid |1474| :pattern ( (DiskLayout.__default.JournalFrontLocation (LitInt |start#0@@26|) (LitInt |len#0@@22|))) ))))
(assert (forall ((arg0@@240 Int) (arg1@@122 Int) ) (! (= (type (DiskLayout.__default.JournalBackLocation arg0@@240 arg1@@122)) DatatypeTypeType) :qid |funType:DiskLayout.__default.JournalBackLocation| :pattern ( (DiskLayout.__default.JournalBackLocation arg0@@240 arg1@@122)) )))
(assert  (=> true (forall ((|start#0@@27| Int) (|len#0@@23| Int) ) (!  (=> (or (|DiskLayout.__default.JournalBackLocation#canCall| |start#0@@27| |len#0@@23|) (and (and (and (<= (LitInt 0) |start#0@@27|) (< |start#0@@27| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@23|) (< |len#0@@23| 18446744073709551616))) (and (< |start#0@@27| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@23| (LitInt DiskLayout.__default.NumJournalBlocks))))) ($Is (DiskLayout.__default.JournalBackLocation |start#0@@27| |len#0@@23|) (Tclass.Options.Option Tclass.DiskLayout.Location))) :qid |DiskLayo.306:32| :skolemid |1475| :pattern ( (DiskLayout.__default.JournalBackLocation |start#0@@27| |len#0@@23|)) ))))
(assert (forall ((|start#0@@28| Int) (|len#0@@24| Int) ) (!  (=> (and (and (<= (LitInt 0) |start#0@@28|) (< |start#0@@28| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@24|) (< |len#0@@24| 18446744073709551616))) (and (=> (|DiskLayout.__default.JournalBackLocation#requires| |start#0@@28| |len#0@@24|) (and (< |start#0@@28| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@24| (LitInt DiskLayout.__default.NumJournalBlocks)))) (=> (and (< |start#0@@28| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@24| (LitInt DiskLayout.__default.NumJournalBlocks))) (|DiskLayout.__default.JournalBackLocation#requires| |start#0@@28| |len#0@@24|)))) :qid |DiskLayo.306:32| :skolemid |1476| :pattern ( (|DiskLayout.__default.JournalBackLocation#requires| |start#0@@28| |len#0@@24|)) )))
(assert  (=> true (forall ((|start#0@@29| Int) (|len#0@@25| Int) ) (!  (=> (or (|DiskLayout.__default.JournalBackLocation#canCall| |start#0@@29| |len#0@@25|) (and (and (and (<= (LitInt 0) |start#0@@29|) (< |start#0@@29| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@25|) (< |len#0@@25| 18446744073709551616))) (and (< |start#0@@29| DiskLayout.__default.NumJournalBlocks) (<= |len#0@@25| (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (=> (not (= |len#0@@25| (LitInt 0))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (- DiskLayout.__default.NumJournalBlocks |start#0@@29|) |len#0@@25|) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalRangeLocation#canCall| (LitInt 0) (- |len#0@@25| (- DiskLayout.__default.NumJournalBlocks |start#0@@29|))))))) (= (DiskLayout.__default.JournalBackLocation |start#0@@29| |len#0@@25|) (ite (= |len#0@@25| (LitInt 0)) |#Options.Option.None| (ite (<= |len#0@@25| (- DiskLayout.__default.NumJournalBlocks |start#0@@29|)) |#Options.Option.None| (|#Options.Option.Some| ($Box (DiskLayout.__default.JournalRangeLocation (LitInt 0) (- |len#0@@25| (- DiskLayout.__default.NumJournalBlocks |start#0@@29|)))))))))) :qid |DiskLayo.306:32| :skolemid |1477| :pattern ( (DiskLayout.__default.JournalBackLocation |start#0@@29| |len#0@@25|)) ))))
(assert  (=> true (forall ((|start#0@@30| Int) (|len#0@@26| Int) ) (!  (=> (or (|DiskLayout.__default.JournalBackLocation#canCall| (LitInt |start#0@@30|) (LitInt |len#0@@26|)) (and (and (and (<= (LitInt 0) |start#0@@30|) (< |start#0@@30| 18446744073709551616)) (and (<= (LitInt 0) |len#0@@26|) (< |len#0@@26| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (< |start#0@@30| DiskLayout.__default.NumJournalBlocks)))) (<= (LitInt |len#0@@26|) (LitInt DiskLayout.__default.NumJournalBlocks))))) (and (=> (not (= (LitInt |len#0@@26|) (LitInt 0))) (and |DiskLayout.__default.NumJournalBlocks#canCall| (=> (< (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@30|)) (LitInt |len#0@@26|)) (and |DiskLayout.__default.NumJournalBlocks#canCall| (|DiskLayout.__default.JournalRangeLocation#canCall| (LitInt 0) (LitInt (- |len#0@@26| (- DiskLayout.__default.NumJournalBlocks |start#0@@30|)))))))) (= (DiskLayout.__default.JournalBackLocation (LitInt |start#0@@30|) (LitInt |len#0@@26|)) (ite (= (LitInt |len#0@@26|) (LitInt 0)) |#Options.Option.None| (ite (<= (LitInt |len#0@@26|) (LitInt (- DiskLayout.__default.NumJournalBlocks |start#0@@30|))) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lit (DiskLayout.__default.JournalRangeLocation (LitInt 0) (LitInt (- |len#0@@26| (- DiskLayout.__default.NumJournalBlocks |start#0@@30|)))))))))))) :qid |DiskLayo.306:32| :weight 3 :skolemid |1478| :pattern ( (DiskLayout.__default.JournalBackLocation (LitInt |start#0@@30|) (LitInt |len#0@@26|))) ))))
(assert  (=> true (forall ((|loc1#0| T@U) (|loc2#0| T@U) ) (!  (=> (and (and (= (type |loc1#0|) DatatypeTypeType) (= (type |loc2#0|) DatatypeTypeType)) (or (|DiskLayout.__default.LocationSub#canCall| |loc1#0| |loc2#0|) (and ($Is |loc1#0| Tclass.DiskLayout.Location) ($Is |loc2#0| Tclass.DiskLayout.Location)))) true) :qid |DiskLayo.319:25| :skolemid |1479| :pattern ( (DiskLayout.__default.LocationSub |loc1#0| |loc2#0|)) ))))
(assert (forall ((|loc1#0@@0| T@U) (|loc2#0@@0| T@U) ) (!  (=> (and (and (= (type |loc1#0@@0|) DatatypeTypeType) (= (type |loc2#0@@0|) DatatypeTypeType)) (and ($Is |loc1#0@@0| Tclass.DiskLayout.Location) ($Is |loc2#0@@0| Tclass.DiskLayout.Location))) (and (=> (|DiskLayout.__default.LocationSub#requires| |loc1#0@@0| |loc2#0@@0|) true) (=> true (|DiskLayout.__default.LocationSub#requires| |loc1#0@@0| |loc2#0@@0|)))) :qid |DiskLayo.319:25| :skolemid |1480| :pattern ( (|DiskLayout.__default.LocationSub#requires| |loc1#0@@0| |loc2#0@@0|)) )))
(assert  (=> true (forall ((|loc1#0@@1| T@U) (|loc2#0@@1| T@U) ) (!  (=> (and (and (= (type |loc1#0@@1|) DatatypeTypeType) (= (type |loc2#0@@1|) DatatypeTypeType)) (or (|DiskLayout.__default.LocationSub#canCall| |loc1#0@@1| |loc2#0@@1|) (and ($Is |loc1#0@@1| Tclass.DiskLayout.Location) ($Is |loc2#0@@1| Tclass.DiskLayout.Location)))) (and (and (and (DiskLayout.Location.Location_q |loc1#0@@1|) (DiskLayout.Location.Location_q |loc2#0@@1|)) (=> (>= (DiskLayout.Location.addr |loc1#0@@1|) (DiskLayout.Location.addr |loc2#0@@1|)) (and (and (DiskLayout.Location.Location_q |loc1#0@@1|) (DiskLayout.Location.Location_q |loc1#0@@1|)) (and (DiskLayout.Location.Location_q |loc2#0@@1|) (DiskLayout.Location.Location_q |loc2#0@@1|))))) (and (=> (DiskLayout.__default.LocationSub |loc1#0@@1| |loc2#0@@1|) (and (>= (DiskLayout.Location.addr |loc1#0@@1|) (DiskLayout.Location.addr |loc2#0@@1|)) (<= (+ (DiskLayout.Location.addr |loc1#0@@1|) (DiskLayout.Location.len |loc1#0@@1|)) (+ (DiskLayout.Location.addr |loc2#0@@1|) (DiskLayout.Location.len |loc2#0@@1|))))) (=> (and (>= (DiskLayout.Location.addr |loc1#0@@1|) (DiskLayout.Location.addr |loc2#0@@1|)) (<= (+ (DiskLayout.Location.addr |loc1#0@@1|) (DiskLayout.Location.len |loc1#0@@1|)) (+ (DiskLayout.Location.addr |loc2#0@@1|) (DiskLayout.Location.len |loc2#0@@1|)))) (DiskLayout.__default.LocationSub |loc1#0@@1| |loc2#0@@1|))))) :qid |DiskLayo.319:25| :skolemid |1481| :pattern ( (DiskLayout.__default.LocationSub |loc1#0@@1| |loc2#0@@1|)) ))))
(assert  (=> true (forall ((|loc1#0@@2| T@U) (|loc2#0@@2| T@U) ) (!  (=> (and (and (= (type |loc1#0@@2|) DatatypeTypeType) (= (type |loc2#0@@2|) DatatypeTypeType)) (or (|DiskLayout.__default.LocationSub#canCall| (Lit |loc1#0@@2|) (Lit |loc2#0@@2|)) (and ($Is |loc1#0@@2| Tclass.DiskLayout.Location) ($Is |loc2#0@@2| Tclass.DiskLayout.Location)))) (and (and (and (DiskLayout.Location.Location_q (Lit |loc1#0@@2|)) (DiskLayout.Location.Location_q (Lit |loc2#0@@2|))) (=> (>= (LitInt (DiskLayout.Location.addr (Lit |loc1#0@@2|))) (LitInt (DiskLayout.Location.addr (Lit |loc2#0@@2|)))) (and (and (DiskLayout.Location.Location_q (Lit |loc1#0@@2|)) (DiskLayout.Location.Location_q (Lit |loc1#0@@2|))) (and (DiskLayout.Location.Location_q (Lit |loc2#0@@2|)) (DiskLayout.Location.Location_q (Lit |loc2#0@@2|)))))) (and (=> (DiskLayout.__default.LocationSub (Lit |loc1#0@@2|) (Lit |loc2#0@@2|)) (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc1#0@@2|))) (LitInt (DiskLayout.Location.addr (Lit |loc2#0@@2|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc1#0@@2|)) (DiskLayout.Location.len (Lit |loc1#0@@2|)))) (LitInt (+ (DiskLayout.Location.addr (Lit |loc2#0@@2|)) (DiskLayout.Location.len (Lit |loc2#0@@2|))))))) (=> (and (>= (LitInt (DiskLayout.Location.addr (Lit |loc1#0@@2|))) (LitInt (DiskLayout.Location.addr (Lit |loc2#0@@2|)))) (<= (LitInt (+ (DiskLayout.Location.addr (Lit |loc1#0@@2|)) (DiskLayout.Location.len (Lit |loc1#0@@2|)))) (LitInt (+ (DiskLayout.Location.addr (Lit |loc2#0@@2|)) (DiskLayout.Location.len (Lit |loc2#0@@2|)))))) (DiskLayout.__default.LocationSub (Lit |loc1#0@@2|) (Lit |loc2#0@@2|)))))) :qid |DiskLayo.319:25| :weight 3 :skolemid |1482| :pattern ( (DiskLayout.__default.LocationSub (Lit |loc1#0@@2|) (Lit |loc2#0@@2|))) ))))
(assert (forall (($ly@@29 T@U) (|loc#0@@45| T@U) ) (!  (=> (and (= (type $ly@@29) LayerTypeType) (= (type |loc#0@@45|) DatatypeTypeType)) (= (DiskLayout.__default.JournalBlockIdx ($LS $ly@@29) |loc#0@@45|) (DiskLayout.__default.JournalBlockIdx $ly@@29 |loc#0@@45|))) :qid |DiskLayo.326:22| :skolemid |1483| :pattern ( (DiskLayout.__default.JournalBlockIdx ($LS $ly@@29) |loc#0@@45|)) )))
(assert (forall (($ly@@30 T@U) (|loc#0@@46| T@U) ) (!  (=> (and (= (type $ly@@30) LayerTypeType) (= (type |loc#0@@46|) DatatypeTypeType)) (= (DiskLayout.__default.JournalBlockIdx $ly@@30 |loc#0@@46|) (DiskLayout.__default.JournalBlockIdx $LZ |loc#0@@46|))) :qid |DiskLayo.326:22| :skolemid |1484| :pattern ( (DiskLayout.__default.JournalBlockIdx (AsFuelBottom $ly@@30) |loc#0@@46|)) )))
(assert  (=> true (forall (($ly@@31 T@U) (|loc#0@@47| T@U) ) (!  (=> (and (and (= (type $ly@@31) LayerTypeType) (= (type |loc#0@@47|) DatatypeTypeType)) (or (|DiskLayout.__default.JournalBlockIdx#canCall| |loc#0@@47|) (and ($Is |loc#0@@47| Tclass.DiskLayout.Location) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@47|)))) (and (and (<= (LitInt 0) (DiskLayout.__default.JournalBlockIdx $ly@@31 |loc#0@@47|)) (< (DiskLayout.__default.JournalBlockIdx $ly@@31 |loc#0@@47|) DiskLayout.__default.NumJournalBlocks)) (= (DiskLayout.Location.addr |loc#0@@47|) (DiskLayout.__default.JournalPoint (DiskLayout.__default.JournalBlockIdx $ly@@31 |loc#0@@47|))))) :qid |DiskLayo.326:22| :skolemid |1485| :pattern ( (DiskLayout.__default.JournalBlockIdx $ly@@31 |loc#0@@47|)) ))))
(assert (forall (($ly@@32 T@U) (|loc#0@@48| T@U) ) (!  (=> (and (and (= (type $ly@@32) LayerTypeType) (= (type |loc#0@@48|) DatatypeTypeType)) ($Is |loc#0@@48| Tclass.DiskLayout.Location)) (and (=> (|DiskLayout.__default.JournalBlockIdx#requires| $ly@@32 |loc#0@@48|) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@48|)) (=> (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@48|) (|DiskLayout.__default.JournalBlockIdx#requires| $ly@@32 |loc#0@@48|)))) :qid |DiskLayo.326:22| :skolemid |1486| :pattern ( (|DiskLayout.__default.JournalBlockIdx#requires| $ly@@32 |loc#0@@48|)) )))
(assert (= (type MoreFuel_DiskLayout._default.ValidJournalLocation4) LayerTypeType))
(assert  (=> true (forall (($ly@@33 T@U) (|loc#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@33) LayerTypeType) (= (type |loc#0@@49|) DatatypeTypeType)) (or (|DiskLayout.__default.JournalBlockIdx#canCall| |loc#0@@49|) (and ($Is |loc#0@@49| Tclass.DiskLayout.Location) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation |loc#0@@49|)))) (and (DiskLayout.Location.Location_q |loc#0@@49|) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation4)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation4)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation4) MoreFuel_DiskLayout._default.ValidJournalLocation4)) (= (DiskLayout.__default.JournalBlockIdx ($LS $ly@@33) |loc#0@@49|) (Div (- (DiskLayout.Location.addr |loc#0@@49|) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096)))))) :qid |DiskLayo.326:22| :skolemid |1487| :pattern ( (DiskLayout.__default.JournalBlockIdx ($LS $ly@@33) |loc#0@@49|)) ))))
(assert (= (type MoreFuel_DiskLayout._default.ValidJournalLocation5) LayerTypeType))
(assert  (=> true (forall (($ly@@34 T@U) (|loc#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@34) LayerTypeType) (= (type |loc#0@@50|) DatatypeTypeType)) (or (|DiskLayout.__default.JournalBlockIdx#canCall| (Lit |loc#0@@50|)) (and ($Is |loc#0@@50| Tclass.DiskLayout.Location) (DiskLayout.__default.ValidJournalLocation StartFuel_DiskLayout._default.ValidJournalLocation (Lit |loc#0@@50|))))) (and (DiskLayout.Location.Location_q (Lit |loc#0@@50|)) (and (and (and (= StartFuel_DiskLayout._default.ValidJournalLocation ($LS MoreFuel_DiskLayout._default.ValidJournalLocation5)) (= StartFuelAssert_DiskLayout._default.ValidJournalLocation ($LS ($LS MoreFuel_DiskLayout._default.ValidJournalLocation5)))) (= (AsFuelBottom MoreFuel_DiskLayout._default.ValidJournalLocation5) MoreFuel_DiskLayout._default.ValidJournalLocation5)) (= (DiskLayout.__default.JournalBlockIdx ($LS $ly@@34) (Lit |loc#0@@50|)) (LitInt (Div (- (DiskLayout.Location.addr (Lit |loc#0@@50|)) (Mul (LitInt 2) (LitInt 4096))) (LitInt 4096))))))) :qid |DiskLayo.326:22| :weight 3 :skolemid |1488| :pattern ( (DiskLayout.__default.JournalBlockIdx ($LS $ly@@34) (Lit |loc#0@@50|))) ))))
(assert  (=> true (forall ((|addr#0@@9| Int) ) (!  (=> (or (|DiskLayout.__default.otherIndirectionTableAddr#canCall| |addr#0@@9|) (and (<= (LitInt 0) |addr#0@@9|) (< |addr#0@@9| 18446744073709551616))) (and (<= (LitInt 0) (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@9|)) (< (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@9|) 18446744073709551616))) :qid |DiskLayo.379:45| :skolemid |1489| :pattern ( (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@9|)) ))))
(assert (forall ((|addr#0@@10| Int) ) (!  (=> (and (<= (LitInt 0) |addr#0@@10|) (< |addr#0@@10| 18446744073709551616)) (and (=> (|DiskLayout.__default.otherIndirectionTableAddr#requires| |addr#0@@10|) true) (=> true (|DiskLayout.__default.otherIndirectionTableAddr#requires| |addr#0@@10|)))) :qid |DiskLayo.379:45| :skolemid |1490| :pattern ( (|DiskLayout.__default.otherIndirectionTableAddr#requires| |addr#0@@10|)) )))
(assert  (=> true (forall ((|addr#0@@11| Int) ) (!  (=> (or (|DiskLayout.__default.otherIndirectionTableAddr#canCall| |addr#0@@11|) (and (<= (LitInt 0) |addr#0@@11|) (< |addr#0@@11| 18446744073709551616))) (and (and (and |DiskLayout.__default.IndirectionTable1Addr#canCall| (=> (= |addr#0@@11| (LitInt DiskLayout.__default.IndirectionTable1Addr)) |DiskLayout.__default.IndirectionTable2Addr#canCall|)) (=> (not (= |addr#0@@11| (LitInt DiskLayout.__default.IndirectionTable1Addr))) |DiskLayout.__default.IndirectionTable1Addr#canCall|)) (= (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@11|) (ite (= |addr#0@@11| (LitInt DiskLayout.__default.IndirectionTable1Addr)) DiskLayout.__default.IndirectionTable2Addr DiskLayout.__default.IndirectionTable1Addr)))) :qid |DiskLayo.379:45| :skolemid |1491| :pattern ( (DiskLayout.__default.otherIndirectionTableAddr |addr#0@@11|)) ))))
(assert  (=> true (forall ((|addr#0@@12| Int) ) (!  (=> (or (|DiskLayout.__default.otherIndirectionTableAddr#canCall| (LitInt |addr#0@@12|)) (and (<= (LitInt 0) |addr#0@@12|) (< |addr#0@@12| 18446744073709551616))) (and (and (and |DiskLayout.__default.IndirectionTable1Addr#canCall| (=> (= (LitInt |addr#0@@12|) (LitInt DiskLayout.__default.IndirectionTable1Addr)) |DiskLayout.__default.IndirectionTable2Addr#canCall|)) (=> (not (= (LitInt |addr#0@@12|) (LitInt DiskLayout.__default.IndirectionTable1Addr))) |DiskLayout.__default.IndirectionTable1Addr#canCall|)) (= (DiskLayout.__default.otherIndirectionTableAddr (LitInt |addr#0@@12|)) (ite (= (LitInt |addr#0@@12|) (LitInt DiskLayout.__default.IndirectionTable1Addr)) DiskLayout.__default.IndirectionTable2Addr DiskLayout.__default.IndirectionTable1Addr)))) :qid |DiskLayo.379:45| :weight 3 :skolemid |1492| :pattern ( (DiskLayout.__default.otherIndirectionTableAddr (LitInt |addr#0@@12|))) ))))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@100)) bx@@100) ($Is ($Unbox (SeqType BoxType) bx@@100) Tclass.ValueType.Value))) :qid |unknown.0:0| :skolemid |1493| :pattern ( ($IsBox bx@@100 Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@17| T@U) ) (!  (=> (= (type |s#0@@17|) (SeqType BoxType)) (and (=> ($Is |s#0@@17| Tclass.ValueType.Value) (and ($Is |s#0@@17| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@17|) (LitInt 1024)))) (=> (and ($Is |s#0@@17| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@17|) (LitInt 1024))) ($Is |s#0@@17| Tclass.ValueType.Value)))) :qid |unknown.0:0| :skolemid |1494| :pattern ( ($Is |s#0@@17| Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@18| T@U) ($h@@50 T@U) ) (!  (=> (and (= (type |s#0@@18|) (SeqType BoxType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |s#0@@18| Tclass.ValueType.Value $h@@50) ($IsAlloc |s#0@@18| (TSeq Tclass.NativeTypes.byte) $h@@50)) (=> ($IsAlloc |s#0@@18| (TSeq Tclass.NativeTypes.byte) $h@@50) ($IsAlloc |s#0@@18| Tclass.ValueType.Value $h@@50)))) :qid |unknown.0:0| :skolemid |1495| :pattern ( ($IsAlloc |s#0@@18| Tclass.ValueType.Value $h@@50)) )))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 Tclass.ValueType.__default)) (and (= ($Box ($Unbox refType bx@@101)) bx@@101) ($Is ($Unbox refType bx@@101) Tclass.ValueType.__default))) :qid |unknown.0:0| :skolemid |1496| :pattern ( ($IsBox bx@@101 Tclass.ValueType.__default)) )))
(assert (forall (($o@@23 T@U) ) (!  (=> (= (type $o@@23) refType) (and (=> ($Is $o@@23 Tclass.ValueType.__default) (or (= $o@@23 null) (= (dtype $o@@23) Tclass.ValueType.__default))) (=> (or (= $o@@23 null) (= (dtype $o@@23) Tclass.ValueType.__default)) ($Is $o@@23 Tclass.ValueType.__default)))) :qid |unknown.0:0| :skolemid |1497| :pattern ( ($Is $o@@23 Tclass.ValueType.__default)) )))
(assert (forall (($o@@24 T@U) ($h@@51 T@U) ) (!  (=> (and (= (type $o@@24) refType) (= (type $h@@51) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@24 Tclass.ValueType.__default $h@@51) (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@51 $o@@24) alloc)))) (=> (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@51 $o@@24) alloc))) ($IsAlloc $o@@24 Tclass.ValueType.__default $h@@51)))) :qid |unknown.0:0| :skolemid |1498| :pattern ( ($IsAlloc $o@@24 Tclass.ValueType.__default $h@@51)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) ValueType.__default.MaxLen) (< ValueType.__default.MaxLen 18446744073709551616)))))
(assert  (=> |ValueType.__default.MaxLen#requires| true))
(assert  (=> true |ValueType.__default.MaxLen#requires|))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true |ValueType.__default.DefaultValue#requires|))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0| T@U) ) (!  (=> (and (= (type |v#0|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0|) ($Is |v#0| Tclass.ValueType.Value))) (<= (LitInt 0) (ValueType.__default.Len |v#0|))) :qid |KeyTypes.17:15| :skolemid |1499| :pattern ( (ValueType.__default.Len |v#0|)) ))))
(assert (forall ((|v#0@@0| T@U) ) (!  (=> (and (= (type |v#0@@0|) (SeqType BoxType)) ($Is |v#0@@0| Tclass.ValueType.Value)) (and (=> (|ValueType.__default.Len#requires| |v#0@@0|) true) (=> true (|ValueType.__default.Len#requires| |v#0@@0|)))) :qid |KeyTypes.17:15| :skolemid |1500| :pattern ( (|ValueType.__default.Len#requires| |v#0@@0|)) )))
(assert  (=> true (forall ((|v#0@@1| T@U) ) (!  (=> (and (= (type |v#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@1|) ($Is |v#0@@1| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@1|) (|Seq#Length| |v#0@@1|))) :qid |KeyTypes.17:15| :skolemid |1501| :pattern ( (ValueType.__default.Len |v#0@@1|)) ))))
(assert  (=> true (forall ((|v#0@@2| T@U) ) (!  (=> (and (= (type |v#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@2|)) ($Is |v#0@@2| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@2|)) (|Seq#Length| (Lit |v#0@@2|)))) :qid |KeyTypes.17:15| :weight 3 :skolemid |1502| :pattern ( (ValueType.__default.Len (Lit |v#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@19| T@U) ) (!  (=> (and (= (type |s#0@@19|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@19|) ($Is |s#0@@19| (TSeq Tclass.NativeTypes.byte)))) true) :qid |KeyTypes.19:36| :skolemid |1503| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@19|)) ))))
(assert (forall ((|s#0@@20| T@U) ) (!  (=> (and (= (type |s#0@@20|) (SeqType BoxType)) ($Is |s#0@@20| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@20|) true) (=> true (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@20|)))) :qid |KeyTypes.19:36| :skolemid |1504| :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@20|)) )))
(assert  (=> true (forall ((|s#0@@21| T@U) ) (!  (=> (and (= (type |s#0@@21|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@21|) ($Is |s#0@@21| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring |s#0@@21|) (<= (|Seq#Length| |s#0@@21|) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| |s#0@@21|) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring |s#0@@21|))))) :qid |KeyTypes.19:36| :skolemid |1505| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@21|)) ))))
(assert  (=> true (forall ((|s#0@@22| T@U) ) (!  (=> (and (= (type |s#0@@22|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@22|)) ($Is |s#0@@22| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring (Lit |s#0@@22|)) (<= (|Seq#Length| (Lit |s#0@@22|)) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| (Lit |s#0@@22|)) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring (Lit |s#0@@22|)))))) :qid |KeyTypes.19:36| :weight 3 :skolemid |1506| :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@22|))) ))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |KeyTypes.24:37| :skolemid |1507| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|)) ))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true) (=> true (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)))) :qid |KeyTypes.24:37| :skolemid |1508| :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)) )))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@37| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@37|) (< |i#0@@37| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@37|)))) :qid |KeyTypes.26:12| :skolemid |1509| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@37|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#0@@38| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@38|)))) :qid |KeyTypes.26:12| :skolemid |1510| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@38|))) ))) (=> (forall ((|i#0@@39| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@39|)))) :qid |KeyTypes.26:12| :skolemid |1510| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@39|))) )) (ValueType.__default.ValidMessageBytestrings |strs#0@@1|))))) :qid |KeyTypes.24:37| :skolemid |1511| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|)) ))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@4|)))) :qid |KeyTypes.26:12| :skolemid |1512| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@4|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#1@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@5|)))) :qid |KeyTypes.26:12| :skolemid |1513| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@5|))) ))) (=> (forall ((|i#1@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@6|)))) :qid |KeyTypes.26:12| :skolemid |1513| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@6|))) )) (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)))))) :qid |KeyTypes.24:37| :weight 3 :skolemid |1514| :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@102)) bx@@102) ($Is ($Unbox refType bx@@102) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |1515| :pattern ( ($IsBox bx@@102 Tclass.Sequences.__default)) )))
(assert (forall (($o@@25 T@U) ) (!  (=> (= (type $o@@25) refType) (and (=> ($Is $o@@25 Tclass.Sequences.__default) (or (= $o@@25 null) (= (dtype $o@@25) Tclass.Sequences.__default))) (=> (or (= $o@@25 null) (= (dtype $o@@25) Tclass.Sequences.__default)) ($Is $o@@25 Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |1516| :pattern ( ($Is $o@@25 Tclass.Sequences.__default)) )))
(assert (forall (($o@@26 T@U) ($h@@52 T@U) ) (!  (=> (and (= (type $o@@26) refType) (= (type $h@@52) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@26 Tclass.Sequences.__default $h@@52) (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@52 $o@@26) alloc)))) (=> (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@52 $o@@26) alloc))) ($IsAlloc $o@@26 Tclass.Sequences.__default $h@@52)))) :qid |unknown.0:0| :skolemid |1517| :pattern ( ($IsAlloc $o@@26 Tclass.Sequences.__default $h@@52)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0|) (and ($Is |run#0| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |1518| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq Sequences._default.Last$E@@0))) (and (=> (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0)) (=> (> (|Seq#Length| |run#0@@0|) 0) (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)))) :qid |unknown.0:0| :skolemid |1519| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |1520| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1521| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1522| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq Sequences._default.DropLast$E@@0))) (and (=> (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0)) (=> (> (|Seq#Length| |run#0@@4|) 0) (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)))) :qid |unknown.0:0| :skolemid |1523| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |1524| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1525| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (forall ((arg0@@241 T@U) (arg1@@123 T@U) ) (! (= (type (Sequences.__default.Set arg0@@241 arg1@@123)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@241 arg1@@123)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@7|) ($Is |run#0@@7| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |1526| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Set$T@@0))) (and (=> (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|) true) (=> true (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)))) :qid |unknown.0:0| :skolemid |1527| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)) )))
(assert (forall ((arg0@@242 T@U) (arg1@@124 T@U) (arg2@@65 Int) ) (! (= (type (|lambda#62| arg0@@242 arg1@@124 arg2@@65)) (MapType0Type BoxType boolType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@242 arg1@@124 arg2@@65)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@9|) ($Is |run#0@@9| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|) (|lambda#62| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@9|) 0))) :qid |unknown.0:0| :skolemid |1528| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@10|)) ($Is |run#0@@10| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|)) (|lambda#62| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@10|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1529| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@243 T@U) (arg1@@125 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@243 arg1@@125)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@243 arg1@@125)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |1530| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.ISet$T@@0))) (and (=> (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|) true) (=> true (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)))) :qid |unknown.0:0| :skolemid |1531| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|) (|lambda#62| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@13|) 0))) :qid |unknown.0:0| :skolemid |1532| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) (|lambda#62| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@14|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1533| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@35 T@U) (|a#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@35) LayerTypeType)) (= (type |a#0@@17|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@35) |a#0@@17|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@35 |a#0@@17|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@35 |a#0@@17|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@35) |a#0@@17|)))) :qid |unknown.0:0| :skolemid |1534| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@35) |a#0@@17|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@36 T@U) (|a#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@36) LayerTypeType)) (= (type |a#0@@18|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@36 |a#0@@18|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@18|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@18|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@36 |a#0@@18|)))) :qid |unknown.0:0| :skolemid |1535| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@36) |a#0@@18|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@37 T@U) (|a#0@@19| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@37) LayerTypeType)) (= (type |a#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@19|) ($Is |a#0@@19| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |1536| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@37 |a#0@@19|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@38 T@U) (|a#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@38) LayerTypeType)) (= (type |a#0@@20|) (SeqType BoxType))) ($Is |a#0@@20| (TSeq Sequences._default.NoDupes$T@@2))) (and (=> (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@38 |a#0@@20|) true) (=> true (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@38 |a#0@@20|)))) :qid |unknown.0:0| :skolemid |1537| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@38 |a#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@39 T@U) (|a#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@39) LayerTypeType)) (= (type |a#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@21|) ($Is |a#0@@21| (TSeq Sequences._default.NoDupes$T@@3)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@39) |a#0@@21|) (forall ((|i#0@@40| Int) (|j#0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| (|Seq#Length| |a#0@@21|))) (and (<= (LitInt 0) |j#0|) (< |j#0| (|Seq#Length| |a#0@@21|)))) (not (= |i#0@@40| |j#0|))) (not (= (|Seq#Index| |a#0@@21| |i#0@@40|) (|Seq#Index| |a#0@@21| |j#0|))))) :qid |sequence.54:13| :skolemid |1538| :pattern ( (|Seq#Index| |a#0@@21| |j#0|) (|Seq#Index| |a#0@@21| |i#0@@40|)) ))) (=> (forall ((|i#0@@41| Int) (|j#0@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| (|Seq#Length| |a#0@@21|))) (and (<= (LitInt 0) |j#0@@0|) (< |j#0@@0| (|Seq#Length| |a#0@@21|)))) (not (= |i#0@@41| |j#0@@0|))) (not (= (|Seq#Index| |a#0@@21| |i#0@@41|) (|Seq#Index| |a#0@@21| |j#0@@0|))))) :qid |sequence.54:13| :skolemid |1538| :pattern ( (|Seq#Index| |a#0@@21| |j#0@@0|) (|Seq#Index| |a#0@@21| |i#0@@41|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@39) |a#0@@21|)))) :qid |unknown.0:0| :skolemid |1539| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@39) |a#0@@21|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@40 T@U) (|a#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@40) LayerTypeType)) (= (type |a#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@22|)) ($Is |a#0@@22| (TSeq Sequences._default.NoDupes$T@@4)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@40) (Lit |a#0@@22|)) (forall ((|i#1@@7| Int) (|j#1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| (|Seq#Length| (Lit |a#0@@22|)))) (and (<= (LitInt 0) |j#1|) (< |j#1| (|Seq#Length| (Lit |a#0@@22|))))) (not (= |i#1@@7| |j#1|))) (not (= (|Seq#Index| (Lit |a#0@@22|) |i#1@@7|) (|Seq#Index| (Lit |a#0@@22|) |j#1|))))) :qid |sequence.54:13| :skolemid |1540| :pattern ( (|Seq#Index| |a#0@@22| |j#1|) (|Seq#Index| |a#0@@22| |i#1@@7|)) ))) (=> (forall ((|i#1@@8| Int) (|j#1@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| (|Seq#Length| (Lit |a#0@@22|)))) (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| (|Seq#Length| (Lit |a#0@@22|))))) (not (= |i#1@@8| |j#1@@0|))) (not (= (|Seq#Index| (Lit |a#0@@22|) |i#1@@8|) (|Seq#Index| (Lit |a#0@@22|) |j#1@@0|))))) :qid |sequence.54:13| :skolemid |1540| :pattern ( (|Seq#Index| |a#0@@22| |j#1@@0|) (|Seq#Index| |a#0@@22| |i#1@@8|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@40) (Lit |a#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |1541| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@40) (Lit |a#0@@22|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@23| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@23| |e#0|) (and (and ($Is |s#0@@23| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@23| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@23| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@23| |e#0|) (|Seq#Length| |s#0@@23|))) (= (|Seq#Index| |s#0@@23| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@23| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |1542| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@23| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@5 T@U) (|s#0@@24| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@5) ($Is |s#0@@24| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (and (=> (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@24| |e#0@@0|) (|Seq#Contains| |s#0@@24| |e#0@@0|)) (=> (|Seq#Contains| |s#0@@24| |e#0@@0|) (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@24| |e#0@@0|)))) :qid |unknown.0:0| :skolemid |1543| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@24| |e#0@@0|) ($IsGoodHeap $Heap@@5)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@45 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@45) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@45 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e) (|Seq#Length| s@@45))) (= (|Seq#Index| s@@45 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) e))) :qid |sequence.105:5| :skolemid |1544| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@6 T@U) (|s#0@@25| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@25| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@6) ($Is |s#0@@25| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@25| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@25| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@25| |e#0@@1|) (let ((|i#0@@42| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@25| |e#0@@1|))) |i#0@@42|)))) :qid |unknown.0:0| :skolemid |1545| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@25| |e#0@@1|) ($IsGoodHeap $Heap@@6)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@7 T@U) (|s#0@@26| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@26|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |s#0@@26| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@26| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@26|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@26|) |e#0@@2|) (let ((|i#1@@9| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@26|) |e#0@@2|))) |i#1@@9|)))) :qid |unknown.0:0| :weight 3 :skolemid |1546| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@26|) |e#0@@2|) ($IsGoodHeap $Heap@@7)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@8 T@U) (|s#0@@27| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@27|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@27| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@27| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@27|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@27|) (Lit |e#0@@3|)) (let ((|i#2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@27|) (Lit |e#0@@3|)))) |i#2|)))) :qid |unknown.0:0| :weight 3 :skolemid |1547| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@27|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@8)) ))))
(assert (forall ((arg0@@244 T@U) (arg1@@126 Int) ) (! (= (type (Sequences.__default.Range arg0@@244 arg1@@126)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@244 arg1@@126)) )))
(assert (forall (($ly@@41 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@41) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@41) |n#0|) (Sequences.__default.Range $ly@@41 |n#0|))) :qid |sequence.109:22| :skolemid |1548| :pattern ( (Sequences.__default.Range ($LS $ly@@41) |n#0|)) )))
(assert (forall (($ly@@42 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@42) LayerTypeType) (= (Sequences.__default.Range $ly@@42 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |sequence.109:22| :skolemid |1549| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@42) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@43 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@43) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@43 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@43| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@43|) (< |i#0@@43| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@43 |n#0@@1|) |i#0@@43|))) |i#0@@43|)) :qid |sequence.112:20| :skolemid |1550| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@43 |n#0@@1|) |i#0@@43|))) ))) ($Is (Sequences.__default.Range $ly@@43 |n#0@@1|) (TSeq TInt)))) :qid |sequence.109:22| :skolemid |1551| :pattern ( (Sequences.__default.Range $ly@@43 |n#0@@1|)) ))))
(assert (forall (($ly@@44 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@44) LayerTypeType) (and (=> (|Sequences.__default.Range#requires| $ly@@44 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|Sequences.__default.Range#requires| $ly@@44 |n#0@@2|)))) :qid |sequence.109:22| :skolemid |1552| :pattern ( (|Sequences.__default.Range#requires| $ly@@44 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@45 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@45) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@45) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@45 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |sequence.109:22| :skolemid |1553| :pattern ( (Sequences.__default.Range ($LS $ly@@45) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@46 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@46) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@46) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@46) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |sequence.109:22| :weight 3 :skolemid |1554| :pattern ( (Sequences.__default.Range ($LS $ly@@46) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@245 T@U) (arg1@@127 T@U) (arg2@@66 T@U) (arg3@@43 T@U) (arg4@@30 T@U) (arg5@@15 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@245 arg1@@127 arg2@@66 arg3@@43 arg4@@30 arg5@@15)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@245 arg1@@127 arg2@@66 arg3@@43 arg4@@30 arg5@@15)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@47 T@U) ($Heap@@9 T@U) (|f#0@@27| T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |f#0@@27|) HandleTypeType)) (= (type |run#0@@15|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@47) $Heap@@9 |f#0@@27| |run#0@@15|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@47 $Heap@@9 |f#0@@27| |run#0@@15|))) :qid |unknown.0:0| :skolemid |1555| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@47) $Heap@@9 |f#0@@27| |run#0@@15|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@48 T@U) ($Heap@@10 T@U) (|f#0@@28| T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |f#0@@28|) HandleTypeType)) (= (type |run#0@@16|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@48 $Heap@@10 |f#0@@28| |run#0@@16|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@10 |f#0@@28| |run#0@@16|))) :qid |unknown.0:0| :skolemid |1556| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@48) $Heap@@10 |f#0@@28| |run#0@@16|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@49 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@29| T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@29|) HandleTypeType)) (= (type |run#0@@17|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| |run#0@@17|) (and ($Is |f#0@@29| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@17| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@27 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@27) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@27 null)) (exists ((|i#0@@44| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@44|) (< |i#0@@44| (|Seq#Length| |run#0@@17|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@44|)) ($Box |o#0|))))) (= ($Box $o@@27) ($Box |o#0|)))) :qid |sequence.121:15| :skolemid |1557| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@44|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@27) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@27) $f@@1)))) :qid |unknown.0:0| :skolemid |1558| :no-pattern (type $o@@27) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@27) :no-pattern (U_2_bool $o@@27) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@49 $h0@@1 |f#0@@29| |run#0@@17|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@49 $h1@@1 |f#0@@29| |run#0@@17|))) :qid |unknown.0:0| :skolemid |1559| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@49 $h1@@1 |f#0@@29| |run#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@50 T@U) ($Heap@@11 T@U) (|f#0@@30| T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@50) LayerTypeType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |f#0@@30|) HandleTypeType)) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@30| |run#0@@18|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |f#0@@30| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@18| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| (|Seq#Length| |run#0@@18|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@30| (|Seq#Index| |run#0@@18| |i#1@@10|)))) :qid |sequence.118:21| :skolemid |1560| :pattern ( (|Seq#Index| |run#0@@18| |i#1@@10|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@50 $Heap@@11 |f#0@@30| |run#0@@18|)) (|Seq#Length| |run#0@@18|)) (forall ((|i#2@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| |run#0@@18|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@50 $Heap@@11 |f#0@@30| |run#0@@18|) |i#2@@0|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@30| (|Seq#Index| |run#0@@18| |i#2@@0|))))) :qid |sequence.120:20| :skolemid |1561| :pattern ( (|Seq#Index| |run#0@@18| |i#2@@0|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@50 $Heap@@11 |f#0@@30| |run#0@@18|) |i#2@@0|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@50 $Heap@@11 |f#0@@30| |run#0@@18|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |1562| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@50 $Heap@@11 |f#0@@30| |run#0@@18|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@51 T@U) ($Heap@@12 T@U) (|f#0@@31| T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@51) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@31|) HandleTypeType)) (= (type |run#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@12) ($Is |f#0@@31| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@19| (TSeq Sequences._default.Apply$E@@3)))) (and (=> (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@51 $Heap@@12 |f#0@@31| |run#0@@19|) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@31| (|Seq#Index| |run#0@@19| |i#3|)))) :qid |sequence.118:21| :skolemid |1563| :pattern ( (|Seq#Index| |run#0@@19| |i#3|)) ))) (=> (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@31| (|Seq#Index| |run#0@@19| |i#3@@0|)))) :qid |sequence.118:21| :skolemid |1563| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@0|)) )) (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@51 $Heap@@12 |f#0@@31| |run#0@@19|)))) :qid |unknown.0:0| :skolemid |1564| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@51 $Heap@@12 |f#0@@31| |run#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@52 T@U) ($Heap@@13 T@U) (|f#0@@32| T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@52) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@32|) HandleTypeType)) (= (type |run#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@32| |run#0@@20|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |f#0@@32| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@20| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@20|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@32| (|Seq#Index| |run#0@@20| |i#3@@1|)))) :qid |sequence.118:21| :skolemid |1563| :pattern ( (|Seq#Index| |run#0@@20| |i#3@@1|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@20|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@52) $Heap@@13 |f#0@@32| |run#0@@20|) (ite (= (|Seq#Length| |run#0@@20|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@32| (|Seq#Index| |run#0@@20| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@52 $Heap@@13 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1565| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@52) $Heap@@13 |f#0@@32| |run#0@@20|)) ))))
(assert (forall ((arg0@@246 T@U) (arg1@@128 T@U) (arg2@@67 T@U) (arg3@@44 T@U) (arg4@@31 T@U) (arg5@@16 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@246 arg1@@128 arg2@@67 arg3@@44 arg4@@31 arg5@@16)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@246 arg1@@128 arg2@@67 arg3@@44 arg4@@31 arg5@@16)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@53 T@U) ($Heap@@14 T@U) (|f#0@@33| T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@33|) HandleTypeType)) (= (type |run#0@@21|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@53) $Heap@@14 |f#0@@33| |run#0@@21|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@53 $Heap@@14 |f#0@@33| |run#0@@21|))) :qid |unknown.0:0| :skolemid |1566| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@53) $Heap@@14 |f#0@@33| |run#0@@21|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@54 T@U) ($Heap@@15 T@U) (|f#0@@34| T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@54) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@34|) HandleTypeType)) (= (type |run#0@@22|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@54 $Heap@@15 |f#0@@34| |run#0@@22|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@15 |f#0@@34| |run#0@@22|))) :qid |unknown.0:0| :skolemid |1567| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@54) $Heap@@15 |f#0@@34| |run#0@@22|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@55 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@35| T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@55) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@35|) HandleTypeType)) (= (type |run#0@@23|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| |run#0@@23|) (and ($Is |f#0@@35| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@23| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@28 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@28) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@28 null)) (exists ((|i#0@@45| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@45|) (< |i#0@@45| (|Seq#Length| |run#0@@23|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@45|)) ($Box |o#0@@0|))))) (= ($Box $o@@28) ($Box |o#0@@0|)))) :qid |sequence.132:15| :skolemid |1568| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@45|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@28) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@28) $f@@2)))) :qid |unknown.0:0| :skolemid |1569| :no-pattern (type $o@@28) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@28) :no-pattern (U_2_bool $o@@28) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@55 $h0@@2 |f#0@@35| |run#0@@23|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@55 $h1@@2 |f#0@@35| |run#0@@23|))) :qid |unknown.0:0| :skolemid |1570| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@55 $h1@@2 |f#0@@35| |run#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@56 T@U) ($Heap@@16 T@U) (|f#0@@36| T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@56) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@36|) HandleTypeType)) (= (type |run#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@36| |run#0@@24|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@36| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@24| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@11| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@11|) (< |i#1@@11| (|Seq#Length| |run#0@@24|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@36| (|Seq#Index| |run#0@@24| |i#1@@11|)))) :qid |sequence.129:21| :skolemid |1571| :pattern ( (|Seq#Index| |run#0@@24| |i#1@@11|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@56 $Heap@@16 |f#0@@36| |run#0@@24|)) (|Seq#Length| |run#0@@24|)) (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |run#0@@24|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@56 $Heap@@16 |f#0@@36| |run#0@@24|) |i#2@@1|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@36| (|Seq#Index| |run#0@@24| |i#2@@1|))))) :qid |sequence.131:20| :skolemid |1572| :pattern ( (|Seq#Index| |run#0@@24| |i#2@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@56 $Heap@@16 |f#0@@36| |run#0@@24|) |i#2@@1|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@56 $Heap@@16 |f#0@@36| |run#0@@24|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |1573| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@56 $Heap@@16 |f#0@@36| |run#0@@24|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@57 T@U) ($Heap@@17 T@U) (|f#0@@37| T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@57) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@37|) HandleTypeType)) (= (type |run#0@@25|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@37| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@25| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (and (=> (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@57 $Heap@@17 |f#0@@37| |run#0@@25|) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@37| (|Seq#Index| |run#0@@25| |i#3@@2|)))) :qid |sequence.129:21| :skolemid |1574| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@2|)) ))) (=> (forall ((|i#3@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@37| (|Seq#Index| |run#0@@25| |i#3@@3|)))) :qid |sequence.129:21| :skolemid |1574| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@3|)) )) (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@57 $Heap@@17 |f#0@@37| |run#0@@25|)))) :qid |unknown.0:0| :skolemid |1575| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@57 $Heap@@17 |f#0@@37| |run#0@@25|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@58 T@U) ($Heap@@18 T@U) (|f#0@@38| T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@58) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@38|) HandleTypeType)) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@38| |run#0@@26|) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@38| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@26| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |run#0@@26|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@38| (|Seq#Index| |run#0@@26| |i#3@@4|)))) :qid |sequence.129:21| :skolemid |1574| :pattern ( (|Seq#Index| |run#0@@26| |i#3@@4|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@38| |run#0@@26|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@58) $Heap@@18 |f#0@@38| |run#0@@26|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@18 |f#0@@38| |run#0@@26|)))) :qid |unknown.0:0| :skolemid |1576| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@58) $Heap@@18 |f#0@@38| |run#0@@26|)) ))))
(assert (forall ((arg0@@247 T@U) (arg1@@129 T@U) (arg2@@68 T@U) (arg3@@45 T@U) (arg4@@32 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@247 arg1@@129 arg2@@68 arg3@@45 arg4@@32)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@247 arg1@@129 arg2@@68 arg3@@45 arg4@@32)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@59 T@U) ($Heap@@19 T@U) (|f#0@@39| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@59) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@59) $Heap@@19 |f#0@@39| |run#0@@27|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@59 $Heap@@19 |f#0@@39| |run#0@@27|))) :qid |unknown.0:0| :skolemid |1577| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@59) $Heap@@19 |f#0@@39| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@60 T@U) ($Heap@@20 T@U) (|f#0@@40| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@60) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@60 $Heap@@20 |f#0@@40| |run#0@@28|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@20 |f#0@@40| |run#0@@28|))) :qid |unknown.0:0| :skolemid |1578| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@60) $Heap@@20 |f#0@@40| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@61 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@41| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@61) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@41| |run#0@@29|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@29| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@29 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@29) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@29 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@41| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@29) ($Box |_o0#0|)))) :qid |sequence.141:13| :skolemid |1579| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@29) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@29) $f@@3)))) :qid |unknown.0:0| :skolemid |1580| :no-pattern (type $o@@29) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@29) :no-pattern (U_2_bool $o@@29) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@61 $h0@@3 |f#0@@41| |run#0@@29|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@61 $h1@@3 |f#0@@41| |run#0@@29|))) :qid |unknown.0:0| :skolemid |1581| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@61 $h1@@3 |f#0@@41| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@62 T@U) ($Heap@@21 T@U) (|f#0@@42| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@62) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@21 |f#0@@42| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@30| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@46| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@46|) (< |i#0@@46| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@42| (|Seq#Index| |run#0@@30| |i#0@@46|)))) :qid |sequence.138:21| :skolemid |1582| :pattern ( (|Seq#Index| |run#0@@30| |i#0@@46|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@62 $Heap@@21 |f#0@@42| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#1@@12| Int) ) (!  (=> (<= (LitInt 0) |i#1@@12|) (=> (and (< |i#1@@12| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@62 $Heap@@21 |f#0@@42| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@62 $Heap@@21 |f#0@@42| |run#0@@30|) |i#1@@12|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@62 $Heap@@21 |f#0@@42| |run#0@@30|) |i#1@@12|)))))) :qid |sequence.140:20| :skolemid |1583| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@62 $Heap@@21 |f#0@@42| |run#0@@30|) |i#1@@12|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@62 $Heap@@21 |f#0@@42| |run#0@@30|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |1584| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@62 $Heap@@21 |f#0@@42| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@63 T@U) ($Heap@@22 T@U) (|f#0@@43| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@63) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@31| (TSeq Sequences._default.Filter$E@@3)))) (and (=> (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@63 $Heap@@22 |f#0@@43| |run#0@@31|) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@43| (|Seq#Index| |run#0@@31| |i#2@@2|)))) :qid |sequence.138:21| :skolemid |1585| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@2|)) ))) (=> (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@43| (|Seq#Index| |run#0@@31| |i#2@@3|)))) :qid |sequence.138:21| :skolemid |1585| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@3|)) )) (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@63 $Heap@@22 |f#0@@43| |run#0@@31|)))) :qid |unknown.0:0| :skolemid |1586| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@63 $Heap@@22 |f#0@@43| |run#0@@31|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@64 T@U) ($Heap@@23 T@U) (|f#0@@44| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@64) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@44| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@32| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@4|) (< |i#2@@4| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@44| (|Seq#Index| |run#0@@32| |i#2@@4|)))) :qid |sequence.138:21| :skolemid |1585| :pattern ( (|Seq#Index| |run#0@@32| |i#2@@4|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@64) $Heap@@23 |f#0@@44| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@44| (|Seq#Index| |run#0@@32| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@32| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@64 $Heap@@23 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1587| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@64) $Heap@@23 |f#0@@44| |run#0@@32|)) ))))
(assert (forall ((arg0@@248 T@U) (arg1@@130 T@U) (arg2@@69 T@U) (arg3@@46 T@U) (arg4@@33 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@248 arg1@@130 arg2@@69 arg3@@46 arg4@@33 arg5@@17)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@248 arg1@@130 arg2@@69 arg3@@46 arg4@@33 arg5@@17)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@65 T@U) (|f#0@@45| T@U) (|init#0| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@65) LayerTypeType)) (= (type |f#0@@45|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@65) |f#0@@45| |init#0| |run#0@@33|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@65 |f#0@@45| |init#0| |run#0@@33|))) :qid |unknown.0:0| :skolemid |1588| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@65) |f#0@@45| |init#0| |run#0@@33|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@66 T@U) (|f#0@@46| T@U) (|init#0@@0| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@66) LayerTypeType)) (= (type |f#0@@46|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@66 |f#0@@46| |init#0@@0| |run#0@@34|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@46| |init#0@@0| |run#0@@34|))) :qid |unknown.0:0| :skolemid |1589| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@66) |f#0@@46| |init#0@@0| |run#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@67 T@U) (|f#0@@47| T@U) (|init#0@@1| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@67) LayerTypeType)) (= (type |f#0@@47|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@47| |init#0@@1| |run#0@@35|) (and (and ($Is |f#0@@47| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@35| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@67 |f#0@@47| |init#0@@1| |run#0@@35|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |1590| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@67 |f#0@@47| |init#0@@1| |run#0@@35|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@68 T@U) ($Heap@@24 T@U) (|f#0@@48| T@U) (|init#0@@2| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@68) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@36|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@48| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@36| (TSeq Sequences._default.FoldLeft$E@@2)))) (and (=> (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@68 |f#0@@48| |init#0@@2| |run#0@@36|) true) (=> true (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@68 |f#0@@48| |init#0@@2| |run#0@@36|)))) :qid |unknown.0:0| :skolemid |1591| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@68 |f#0@@48| |init#0@@2| |run#0@@36|) ($IsGoodHeap $Heap@@24)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@69 T@U) ($Heap@@25 T@U) (|f#0@@49| T@U) (|init#0@@3| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@69) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| |init#0@@3| |run#0@@37|) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@49| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@37| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@37|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@69) |f#0@@49| |init#0@@3| |run#0@@37|) (ite (= (|Seq#Length| |run#0@@37|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@69 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |1592| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@69) |f#0@@49| |init#0@@3| |run#0@@37|) ($IsGoodHeap $Heap@@25)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@70 T@U) ($Heap@@26 T@U) (|f#0@@50| T@U) (|init#0@@4| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@70) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@50| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@38| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@70) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (ite (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@70) |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1593| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@70) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) ($IsGoodHeap $Heap@@26)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@71 T@U) ($Heap@@27 T@U) (|f#0@@51| T@U) (|init#0@@5| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@71) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@51| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@39| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@71) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (ite (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@71) (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1594| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@71) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) ($IsGoodHeap $Heap@@27)) ))))
(assert (forall ((arg0@@249 T@U) (arg1@@131 T@U) (arg2@@70 T@U) (arg3@@47 T@U) (arg4@@34 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@249 arg1@@131 arg2@@70 arg3@@47 arg4@@34 arg5@@18)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@249 arg1@@131 arg2@@70 arg3@@47 arg4@@34 arg5@@18)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@72 T@U) (|f#0@@52| T@U) (|init#0@@6| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@72) LayerTypeType)) (= (type |f#0@@52|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@72) |f#0@@52| |init#0@@6| |run#0@@40|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@72 |f#0@@52| |init#0@@6| |run#0@@40|))) :qid |unknown.0:0| :skolemid |1595| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@72) |f#0@@52| |init#0@@6| |run#0@@40|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@73 T@U) (|f#0@@53| T@U) (|init#0@@7| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@73) LayerTypeType)) (= (type |f#0@@53|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@41|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@73 |f#0@@53| |init#0@@7| |run#0@@41|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@53| |init#0@@7| |run#0@@41|))) :qid |unknown.0:0| :skolemid |1596| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@73) |f#0@@53| |init#0@@7| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@74 T@U) (|f#0@@54| T@U) (|init#0@@8| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@74) LayerTypeType)) (= (type |f#0@@54|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@54| |init#0@@8| |run#0@@42|) (and (and ($Is |f#0@@54| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@42| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@74 |f#0@@54| |init#0@@8| |run#0@@42|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |1597| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@74 |f#0@@54| |init#0@@8| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@75 T@U) ($Heap@@28 T@U) (|f#0@@55| T@U) (|init#0@@9| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@75) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@55| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@43| (TSeq Sequences._default.FoldRight$E@@2)))) (and (=> (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@75 |f#0@@55| |init#0@@9| |run#0@@43|) true) (=> true (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@75 |f#0@@55| |init#0@@9| |run#0@@43|)))) :qid |unknown.0:0| :skolemid |1598| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@75 |f#0@@55| |init#0@@9| |run#0@@43|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@76 T@U) ($Heap@@29 T@U) (|f#0@@56| T@U) (|init#0@@10| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@76) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@56| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@44| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@76) |f#0@@56| |init#0@@10| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@29 |f#0@@56| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@76 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1))) (|Seq#Index| |run#0@@44| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |1599| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@76) |f#0@@56| |init#0@@10| |run#0@@44|) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@77 T@U) ($Heap@@30 T@U) (|f#0@@57| T@U) (|init#0@@11| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@77) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@57| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@45| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@77) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (ite (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@30 |f#0@@57| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@77) |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@45|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1600| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@77) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) ($IsGoodHeap $Heap@@30)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@78 T@U) ($Heap@@31 T@U) (|f#0@@58| T@U) (|init#0@@12| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@78) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@58| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@46| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@78) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (ite (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@31 (Lit |f#0@@58|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@78) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@46|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1601| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@78) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) ($IsGoodHeap $Heap@@31)) ))))
(assert (forall ((arg0@@250 T@U) (arg1@@132 T@U) (arg2@@71 T@U) (arg3@@48 T@U) (arg4@@35 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@250 arg1@@132 arg2@@71 arg3@@48 arg4@@35 arg5@@19)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@250 arg1@@132 arg2@@71 arg3@@48 arg4@@35 arg5@@19)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@79 T@U) (|f#0@@59| T@U) (|init#0@@13| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@79) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@79) |f#0@@59| |init#0@@13| |run#0@@47|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@79 |f#0@@59| |init#0@@13| |run#0@@47|))) :qid |unknown.0:0| :skolemid |1602| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@79) |f#0@@59| |init#0@@13| |run#0@@47|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@80 T@U) (|f#0@@60| T@U) (|init#0@@14| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@80) LayerTypeType)) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@80 |f#0@@60| |init#0@@14| |run#0@@48|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@60| |init#0@@14| |run#0@@48|))) :qid |unknown.0:0| :skolemid |1603| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@80) |f#0@@60| |init#0@@14| |run#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@81 T@U) (|f#0@@61| T@U) (|init#0@@15| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@81) LayerTypeType)) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@61| |init#0@@15| |run#0@@49|) (and (and ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@49| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@81 |f#0@@61| |init#0@@15| |run#0@@49|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |1604| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@81 |f#0@@61| |init#0@@15| |run#0@@49|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@82 T@U) ($Heap@@32 T@U) (|f#0@@62| T@U) (|init#0@@16| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@82) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@50| (TSeq Sequences._default.FoldFromRight$E@@2)))) (and (=> (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@82 |f#0@@62| |init#0@@16| |run#0@@50|) true) (=> true (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@82 |f#0@@62| |init#0@@16| |run#0@@50|)))) :qid |unknown.0:0| :skolemid |1605| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@82 |f#0@@62| |init#0@@16| |run#0@@50|) ($IsGoodHeap $Heap@@32)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@83 T@U) ($Heap@@33 T@U) (|f#0@@63| T@U) (|init#0@@17| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@83) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| |run#0@@51|) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@51| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@51|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@83) |f#0@@63| |init#0@@17| |run#0@@51|) (ite (= (|Seq#Length| |run#0@@51|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@33 |f#0@@63| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@83 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@51|)))))) :qid |unknown.0:0| :skolemid |1606| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@83) |f#0@@63| |init#0@@17| |run#0@@51|) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@84 T@U) ($Heap@@34 T@U) (|f#0@@64| T@U) (|init#0@@18| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@84) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@64| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@52| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@84) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (ite (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@34 |f#0@@64| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@84) |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1607| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@84) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@85 T@U) ($Heap@@35 T@U) (|f#0@@65| T@U) (|init#0@@19| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@85) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@65| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@53| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@85) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (ite (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@35 (Lit |f#0@@65|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@85) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1608| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@85) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) ($IsGoodHeap $Heap@@35)) ))))
(assert (forall ((arg0@@251 T@U) (arg1@@133 T@U) (arg2@@72 T@U) (arg3@@49 Int) ) (! (= (type (Sequences.__default.remove arg0@@251 arg1@@133 arg2@@72 arg3@@49)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@251 arg1@@133 arg2@@72 arg3@@49)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@86 T@U) (|s#0@@28| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@86) |s#0@@28| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@86 |s#0@@28| |pos#0|))) :qid |unknown.0:0| :skolemid |1609| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@86) |s#0@@28| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@87 T@U) (|s#0@@29| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@87 |s#0@@29| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@29| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |1610| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@87) |s#0@@29| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@88 T@U) (|s#0@@30| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@30| |pos#0@@1|) (and ($Is |s#0@@30| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@30|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@88 |s#0@@30| |pos#0@@1|)) (- (|Seq#Length| |s#0@@30|) 1)) (forall ((|i#0@@47| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@47|) (< |i#0@@47| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@88 |s#0@@30| |pos#0@@1|) |i#0@@47|) (|Seq#Index| |s#0@@30| |i#0@@47|))) :qid |sequence.168:18| :skolemid |1611| :pattern ( (|Seq#Index| |s#0@@30| |i#0@@47|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@88 |s#0@@30| |pos#0@@1|) |i#0@@47|)) ))) (forall ((|i#1@@13| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@13|) (< |i#1@@13| (- (|Seq#Length| |s#0@@30|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@88 |s#0@@30| |pos#0@@1|) |i#1@@13|) (|Seq#Index| |s#0@@30| (+ |i#1@@13| 1)))) :qid |sequence.169:18| :skolemid |1612| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@88 |s#0@@30| |pos#0@@1|) |i#1@@13|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@88 |s#0@@30| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |1613| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@88 |s#0@@30| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@89 T@U) (|s#0@@31| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) ($Is |s#0@@31| (TSeq Sequences._default.remove$A@@2))) (and (=> (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@89 |s#0@@31| |pos#0@@2|) (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@31|)))) (=> (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@31|))) (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@89 |s#0@@31| |pos#0@@2|)))) :qid |unknown.0:0| :skolemid |1614| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@89 |s#0@@31| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@90 T@U) (|s#0@@32| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@90) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@32| |pos#0@@3|) (and ($Is |s#0@@32| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@32|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@90) |s#0@@32| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@32| |pos#0@@3|) (|Seq#Drop| |s#0@@32| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |1615| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@90) |s#0@@32| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@91 T@U) (|s#0@@33| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@33|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@33| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@33|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@91) (Lit |s#0@@33|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@33|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@33|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1616| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@91) (Lit |s#0@@33|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@252 T@U) (arg1@@134 T@U) (arg2@@73 T@U) (arg3@@50 T@U) (arg4@@36 Int) ) (! (= (type (Sequences.__default.insert arg0@@252 arg1@@134 arg2@@73 arg3@@50 arg4@@36)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@252 arg1@@134 arg2@@73 arg3@@50 arg4@@36)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@92 T@U) (|s#0@@34| T@U) (|a#0@@23| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@92) |s#0@@34| |a#0@@23| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@92 |s#0@@34| |a#0@@23| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |1617| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@92) |s#0@@34| |a#0@@23| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@93 T@U) (|s#0@@35| T@U) (|a#0@@24| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@93 |s#0@@35| |a#0@@24| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@35| |a#0@@24| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |1618| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@93) |s#0@@35| |a#0@@24| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@94 T@U) (|s#0@@36| T@U) (|a#0@@25| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@36| |a#0@@25| |pos#0@@7|) (and (and ($Is |s#0@@36| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@25| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@36|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@94 |s#0@@36| |a#0@@25| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@36|) 1)) (forall ((|i#0@@48| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@48|) (< |i#0@@48| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@94 |s#0@@36| |a#0@@25| |pos#0@@7|) |i#0@@48|) (|Seq#Index| |s#0@@36| |i#0@@48|)))) :qid |sequence.177:18| :skolemid |1619| :pattern ( (|Seq#Index| |s#0@@36| |i#0@@48|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@94 |s#0@@36| |a#0@@25| |pos#0@@7|) |i#0@@48|)) ))) (forall ((|i#1@@14| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@14|) (< |i#1@@14| (|Seq#Length| |s#0@@36|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@94 |s#0@@36| |a#0@@25| |pos#0@@7|) (+ |i#1@@14| 1)) (|Seq#Index| |s#0@@36| |i#1@@14|)))) :qid |sequence.178:18| :skolemid |1620| :pattern ( (|Seq#Index| |s#0@@36| |i#1@@14|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@94 |s#0@@36| |a#0@@25| |pos#0@@7|) |pos#0@@7|) |a#0@@25|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@94 |s#0@@36| |a#0@@25| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |1621| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@94 |s#0@@36| |a#0@@25| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@95 T@U) (|s#0@@37| T@U) (|a#0@@26| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (and ($Is |s#0@@37| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@26| Sequences._default.insert$A@@2))) (and (=> (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@95 |s#0@@37| |a#0@@26| |pos#0@@8|) (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@37|)))) (=> (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@37|))) (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@95 |s#0@@37| |a#0@@26| |pos#0@@8|)))) :qid |unknown.0:0| :skolemid |1622| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@95 |s#0@@37| |a#0@@26| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@96 T@U) (|s#0@@38| T@U) (|a#0@@27| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |s#0@@38|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@38| |a#0@@27| |pos#0@@9|) (and (and ($Is |s#0@@38| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@27| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@38|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@96) |s#0@@38| |a#0@@27| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@38| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@27|)) (|Seq#Drop| |s#0@@38| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |1623| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@96) |s#0@@38| |a#0@@27| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@97 T@U) (|s#0@@39| T@U) (|a#0@@28| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |s#0@@39|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@39|) |a#0@@28| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@39| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@28| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@39|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@97) (Lit |s#0@@39|) |a#0@@28| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@39|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@28|)) (|Seq#Drop| (Lit |s#0@@39|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |1624| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@97) (Lit |s#0@@39|) |a#0@@28| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@98 T@U) (|s#0@@40| T@U) (|a#0@@29| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |s#0@@40|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@40|) (Lit |a#0@@29|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@40| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@29| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@40|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@98) (Lit |s#0@@40|) (Lit |a#0@@29|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@40|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@29|))) (|Seq#Drop| (Lit |s#0@@40|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |1625| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@98) (Lit |s#0@@40|) (Lit |a#0@@29|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@253 T@U) (arg1@@135 T@U) (arg2@@74 T@U) (arg3@@51 T@U) (arg4@@37 T@U) (arg5@@20 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@253 arg1@@135 arg2@@74 arg3@@51 arg4@@37 arg5@@20)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@253 arg1@@135 arg2@@74 arg3@@51 arg4@@37 arg5@@20)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@99 T@U) (|s#0@@41| T@U) (|a#0@@30| T@U) (|b#0@@17| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |s#0@@41|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (= (type |b#0@@17|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@99) |s#0@@41| |a#0@@30| |b#0@@17| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@99 |s#0@@41| |a#0@@30| |b#0@@17| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |1626| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@99) |s#0@@41| |a#0@@30| |b#0@@17| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@100 T@U) (|s#0@@42| T@U) (|a#0@@31| T@U) (|b#0@@18| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |s#0@@42|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (= (type |b#0@@18|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@100 |s#0@@42| |a#0@@31| |b#0@@18| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@42| |a#0@@31| |b#0@@18| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |1627| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@100) |s#0@@42| |a#0@@31| |b#0@@18| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@101 T@U) (|s#0@@43| T@U) (|a#0@@32| T@U) (|b#0@@19| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |s#0@@43|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (= (type |b#0@@19|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@43| |a#0@@32| |b#0@@19| |pos#0@@14|) (and (and (and ($Is |s#0@@43| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@32| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@19| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@43|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@101 |s#0@@43| |a#0@@32| |b#0@@19| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@43|) 1)) (forall ((|i#0@@49| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@101 |s#0@@43| |a#0@@32| |b#0@@19| |pos#0@@14|) |i#0@@49|) (|Seq#Index| |s#0@@43| |i#0@@49|)))) :qid |sequence.202:18| :skolemid |1628| :pattern ( (|Seq#Index| |s#0@@43| |i#0@@49|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@101 |s#0@@43| |a#0@@32| |b#0@@19| |pos#0@@14|) |i#0@@49|)) ))) (forall ((|i#1@@15| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@15|) (< |i#1@@15| (|Seq#Length| |s#0@@43|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@101 |s#0@@43| |a#0@@32| |b#0@@19| |pos#0@@14|) (+ |i#1@@15| 1)) (|Seq#Index| |s#0@@43| |i#1@@15|)))) :qid |sequence.203:18| :skolemid |1629| :pattern ( (|Seq#Index| |s#0@@43| |i#1@@15|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@101 |s#0@@43| |a#0@@32| |b#0@@19| |pos#0@@14|) |pos#0@@14|) |a#0@@32|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@101 |s#0@@43| |a#0@@32| |b#0@@19| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@19|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@101 |s#0@@43| |a#0@@32| |b#0@@19| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |1630| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@101 |s#0@@43| |a#0@@32| |b#0@@19| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@102 T@U) (|s#0@@44| T@U) (|a#0@@33| T@U) (|b#0@@20| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |s#0@@44|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (= (type |b#0@@20|) BoxType)) (and (and ($Is |s#0@@44| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@33| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@20| Sequences._default.replace1with2$A@@2))) (and (=> (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@102 |s#0@@44| |a#0@@33| |b#0@@20| |pos#0@@15|) (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@44|)))) (=> (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@44|))) (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@102 |s#0@@44| |a#0@@33| |b#0@@20| |pos#0@@15|)))) :qid |unknown.0:0| :skolemid |1631| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@102 |s#0@@44| |a#0@@33| |b#0@@20| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@103 T@U) (|s#0@@45| T@U) (|a#0@@34| T@U) (|b#0@@21| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |s#0@@45|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (= (type |b#0@@21|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@45| |a#0@@34| |b#0@@21| |pos#0@@16|) (and (and (and ($Is |s#0@@45| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@34| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@21| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@45|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@103) |s#0@@45| |a#0@@34| |b#0@@21| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@45| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@34|) |b#0@@21|)) (|Seq#Drop| |s#0@@45| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |1632| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@103) |s#0@@45| |a#0@@34| |b#0@@21| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@104 T@U) (|s#0@@46| T@U) (|a#0@@35| T@U) (|b#0@@22| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |s#0@@46|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (= (type |b#0@@22|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@46|) |a#0@@35| |b#0@@22| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@46| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@35| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@22| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@46|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@104) (Lit |s#0@@46|) |a#0@@35| |b#0@@22| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@46|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@35|) |b#0@@22|)) (|Seq#Drop| (Lit |s#0@@46|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1633| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@104) (Lit |s#0@@46|) |a#0@@35| |b#0@@22| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@105 T@U) (|s#0@@47| T@U) (|a#0@@36| T@U) (|b#0@@23| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |s#0@@47|) (SeqType BoxType))) (= (type |a#0@@36|) BoxType)) (= (type |b#0@@23|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@47|) (Lit |a#0@@36|) (Lit |b#0@@23|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@47| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@36| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@23| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@47|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@105) (Lit |s#0@@47|) (Lit |a#0@@36|) (Lit |b#0@@23|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@47|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@36|)) (Lit |b#0@@23|))) (|Seq#Drop| (Lit |s#0@@47|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1634| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@105) (Lit |s#0@@47|) (Lit |a#0@@36|) (Lit |b#0@@23|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@254 T@U) (arg1@@136 T@U) (arg2@@75 T@U) (arg3@@52 T@U) (arg4@@38 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@254 arg1@@136 arg2@@75 arg3@@52 arg4@@38)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@254 arg1@@136 arg2@@75 arg3@@52 arg4@@38)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@106 T@U) (|s#0@@48| T@U) (|a#0@@37| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |s#0@@48|) (SeqType BoxType))) (= (type |a#0@@37|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@106) |s#0@@48| |a#0@@37| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@106 |s#0@@48| |a#0@@37| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |1635| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@106) |s#0@@48| |a#0@@37| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@107 T@U) (|s#0@@49| T@U) (|a#0@@38| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |s#0@@49|) (SeqType BoxType))) (= (type |a#0@@38|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@107 |s#0@@49| |a#0@@38| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@49| |a#0@@38| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |1636| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@107) |s#0@@49| |a#0@@38| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@108 T@U) (|s#0@@50| T@U) (|a#0@@39| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |s#0@@50|) (SeqType BoxType))) (= (type |a#0@@39|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@50| |a#0@@39| |pos#0@@21|) (and (and ($Is |s#0@@50| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@39| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@50|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@108 |s#0@@50| |a#0@@39| |pos#0@@21|)) (- (|Seq#Length| |s#0@@50|) 1)) (forall ((|i#0@@50| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@108 |s#0@@50| |a#0@@39| |pos#0@@21|) |i#0@@50|) (|Seq#Index| |s#0@@50| |i#0@@50|)))) :qid |sequence.221:18| :skolemid |1637| :pattern ( (|Seq#Index| |s#0@@50| |i#0@@50|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@108 |s#0@@50| |a#0@@39| |pos#0@@21|) |i#0@@50|)) ))) (forall ((|i#1@@16| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@16|) (< |i#1@@16| (- (|Seq#Length| |s#0@@50|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@108 |s#0@@50| |a#0@@39| |pos#0@@21|) |i#1@@16|) (|Seq#Index| |s#0@@50| (+ |i#1@@16| 1))))) :qid |sequence.222:18| :skolemid |1638| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@108 |s#0@@50| |a#0@@39| |pos#0@@21|) |i#1@@16|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@108 |s#0@@50| |a#0@@39| |pos#0@@21|) |pos#0@@21|) |a#0@@39|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@108 |s#0@@50| |a#0@@39| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |1639| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@108 |s#0@@50| |a#0@@39| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@109 T@U) (|s#0@@51| T@U) (|a#0@@40| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |s#0@@51|) (SeqType BoxType))) (= (type |a#0@@40|) BoxType)) (and ($Is |s#0@@51| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@40| Sequences._default.replace2with1$A@@2))) (and (=> (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@109 |s#0@@51| |a#0@@40| |pos#0@@22|) (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@51|) 1)))) (=> (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@51|) 1))) (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@109 |s#0@@51| |a#0@@40| |pos#0@@22|)))) :qid |unknown.0:0| :skolemid |1640| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@109 |s#0@@51| |a#0@@40| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@110 T@U) (|s#0@@52| T@U) (|a#0@@41| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |s#0@@52|) (SeqType BoxType))) (= (type |a#0@@41|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@52| |a#0@@41| |pos#0@@23|) (and (and ($Is |s#0@@52| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@41| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@52|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@110) |s#0@@52| |a#0@@41| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@52| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@41|)) (|Seq#Drop| |s#0@@52| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |1641| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@110) |s#0@@52| |a#0@@41| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@111 T@U) (|s#0@@53| T@U) (|a#0@@42| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |s#0@@53|) (SeqType BoxType))) (= (type |a#0@@42|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@53|) |a#0@@42| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@53| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@42| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@53|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@111) (Lit |s#0@@53|) |a#0@@42| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@53|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@42|)) (|Seq#Drop| (Lit |s#0@@53|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1642| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@111) (Lit |s#0@@53|) |a#0@@42| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@112 T@U) (|s#0@@54| T@U) (|a#0@@43| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |s#0@@54|) (SeqType BoxType))) (= (type |a#0@@43|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@54|) (Lit |a#0@@43|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@54| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@43| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@54|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@112) (Lit |s#0@@54|) (Lit |a#0@@43|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@54|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@43|))) (|Seq#Drop| (Lit |s#0@@54|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1643| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@112) (Lit |s#0@@54|) (Lit |a#0@@43|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@255 T@U) (arg1@@137 T@U) (arg2@@76 T@U) (arg3@@53 T@U) ) (! (= (type (Sequences.__default.concat arg0@@255 arg1@@137 arg2@@76 arg3@@53)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@255 arg1@@137 arg2@@76 arg3@@53)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@113 T@U) (|a#0@@44| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@113) |a#0@@44| |b#0@@24|) (Sequences.__default.concat Sequences._default.concat$A $ly@@113 |a#0@@44| |b#0@@24|))) :qid |unknown.0:0| :skolemid |1644| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@113) |a#0@@44| |b#0@@24|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@114 T@U) (|a#0@@45| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (= (type |b#0@@25|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@114 |a#0@@45| |b#0@@25|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@45| |b#0@@25|))) :qid |unknown.0:0| :skolemid |1645| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@114) |a#0@@45| |b#0@@25|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@115 T@U) (|a#0@@46| T@U) (|b#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (= (type |b#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@46| |b#0@@26|) (and ($Is |a#0@@46| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@26| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@115 |a#0@@46| |b#0@@26|)) (+ (|Seq#Length| |a#0@@46|) (|Seq#Length| |b#0@@26|))) (forall ((|i#0@@51| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@51|) (< |i#0@@51| (|Seq#Length| |a#0@@46|))) (= (|Seq#Index| |a#0@@46| |i#0@@51|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@115 |a#0@@46| |b#0@@26|) |i#0@@51|)))) :qid |sequence.230:18| :skolemid |1646| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@115 |a#0@@46| |b#0@@26|) |i#0@@51|)) :pattern ( (|Seq#Index| |a#0@@46| |i#0@@51|)) ))) (forall ((|i#1@@17| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@17|) (< |i#1@@17| (|Seq#Length| |b#0@@26|))) (= (|Seq#Index| |b#0@@26| |i#1@@17|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@115 |a#0@@46| |b#0@@26|) (+ (|Seq#Length| |a#0@@46|) |i#1@@17|))))) :qid |sequence.231:18| :skolemid |1647| :pattern ( (|Seq#Index| |b#0@@26| |i#1@@17|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@115 |a#0@@46| |b#0@@26|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |1648| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@115 |a#0@@46| |b#0@@26|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@116 T@U) (|a#0@@47| T@U) (|b#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@27|) (SeqType BoxType))) (and ($Is |a#0@@47| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@27| (TSeq Sequences._default.concat$A@@2)))) (and (=> (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@116 |a#0@@47| |b#0@@27|) true) (=> true (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@116 |a#0@@47| |b#0@@27|)))) :qid |unknown.0:0| :skolemid |1649| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@116 |a#0@@47| |b#0@@27|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@117 T@U) (|a#0@@48| T@U) (|b#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@28|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@48| |b#0@@28|) (and ($Is |a#0@@48| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@28| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@117) |a#0@@48| |b#0@@28|) (|Seq#Append| |a#0@@48| |b#0@@28|))) :qid |unknown.0:0| :skolemid |1650| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@117) |a#0@@48| |b#0@@28|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@118 T@U) (|a#0@@49| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@49|) (Lit |b#0@@29|)) (and ($Is |a#0@@49| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@29| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@118) (Lit |a#0@@49|) (Lit |b#0@@29|)) (|Seq#Append| |a#0@@49| |b#0@@29|))) :qid |unknown.0:0| :weight 3 :skolemid |1651| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@118) (Lit |a#0@@49|) (Lit |b#0@@29|))) ))))
(assert (forall ((arg0@@256 T@U) (arg1@@138 T@U) (arg2@@77 T@U) (arg3@@54 T@U) (arg4@@39 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@256 arg1@@138 arg2@@77 arg3@@54 arg4@@39)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@256 arg1@@138 arg2@@77 arg3@@54 arg4@@39)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@119 T@U) (|a#0@@50| T@U) (|b#0@@30| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@30|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@119) |a#0@@50| |b#0@@30| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@119 |a#0@@50| |b#0@@30| |c#0@@3|))) :qid |unknown.0:0| :skolemid |1652| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@119) |a#0@@50| |b#0@@30| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@120 T@U) (|a#0@@51| T@U) (|b#0@@31| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@31|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@120 |a#0@@51| |b#0@@31| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@51| |b#0@@31| |c#0@@4|))) :qid |unknown.0:0| :skolemid |1653| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@120) |a#0@@51| |b#0@@31| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@121 T@U) (|a#0@@52| T@U) (|b#0@@32| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@32|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@52| |b#0@@32| |c#0@@5|) (and (and ($Is |a#0@@52| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@32| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@121 |a#0@@52| |b#0@@32| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@52|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@52| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@52|) (< |i#0@@52| (|Seq#Length| |a#0@@52|))) (= (|Seq#Index| |a#0@@52| |i#0@@52|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@121 |a#0@@52| |b#0@@32| |c#0@@5|) |i#0@@52|)))) :qid |sequence.238:18| :skolemid |1654| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@121 |a#0@@52| |b#0@@32| |c#0@@5|) |i#0@@52|)) :pattern ( (|Seq#Index| |a#0@@52| |i#0@@52|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@121 |a#0@@52| |b#0@@32| |c#0@@5|) (|Seq#Length| |a#0@@52|)) |b#0@@32|)) (forall ((|i#1@@18| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@18|) (< |i#1@@18| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@18|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@121 |a#0@@52| |b#0@@32| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@52|) 1) |i#1@@18|))))) :qid |sequence.240:18| :skolemid |1655| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@18|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@121 |a#0@@52| |b#0@@32| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |1656| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@121 |a#0@@52| |b#0@@32| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@122 T@U) (|a#0@@53| T@U) (|b#0@@33| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (type |b#0@@33|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@53| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@33| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (and (=> (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@122 |a#0@@53| |b#0@@33| |c#0@@6|) true) (=> true (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@122 |a#0@@53| |b#0@@33| |c#0@@6|)))) :qid |unknown.0:0| :skolemid |1657| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@122 |a#0@@53| |b#0@@33| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@123 T@U) (|a#0@@54| T@U) (|b#0@@34| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@34|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@54| |b#0@@34| |c#0@@7|) (and (and ($Is |a#0@@54| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@34| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@123) |a#0@@54| |b#0@@34| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@54| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@34|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |1658| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@123) |a#0@@54| |b#0@@34| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@124 T@U) (|a#0@@55| T@U) (|b#0@@35| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@35|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@55|) |b#0@@35| (Lit |c#0@@8|)) (and (and ($Is |a#0@@55| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@35| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@124) (Lit |a#0@@55|) |b#0@@35| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@55| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@35|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |1659| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@124) (Lit |a#0@@55|) |b#0@@35| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@125 T@U) (|a#0@@56| T@U) (|b#0@@36| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@36|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@56|) (Lit |b#0@@36|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@56| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@36| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@125) (Lit |a#0@@56|) (Lit |b#0@@36|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@56| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@36|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |1660| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@125) (Lit |a#0@@56|) (Lit |b#0@@36|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@257 T@U) (arg1@@139 T@U) (arg2@@78 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@257 arg1@@139 arg2@@78)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@257 arg1@@139 arg2@@78)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@126 T@U) (|a#0@@57| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@126) |a#0@@57|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@126 |a#0@@57|))) :qid |unknown.0:0| :skolemid |1661| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@126) |a#0@@57|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@127 T@U) (|a#0@@58| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@127 |a#0@@58|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@58|))) :qid |unknown.0:0| :skolemid |1662| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@127) |a#0@@58|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@128 T@U) (|a#0@@59| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@59|) ($Is |a#0@@59| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@128 |a#0@@59|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |1663| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@128 |a#0@@59|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@129 T@U) (|a#0@@60| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) ($Is |a#0@@60| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (and (=> (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@129 |a#0@@60|) true) (=> true (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@129 |a#0@@60|)))) :qid |unknown.0:0| :skolemid |1664| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@129 |a#0@@60|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@130 T@U) (|a#0@@61| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@61|) ($Is |a#0@@61| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@61|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@61|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@61|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@61|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@130) |a#0@@61|) (ite (= (|Seq#Length| |a#0@@61|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@130 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@61|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@61|))))))) :qid |unknown.0:0| :skolemid |1665| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@130) |a#0@@61|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@131 T@U) (|a#0@@62| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@62|)) ($Is |a#0@@62| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@62|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@62|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@62|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@62|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@131) (Lit |a#0@@62|)) (ite (= (|Seq#Length| (Lit |a#0@@62|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@131) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@62|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@62|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1666| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@131) (Lit |a#0@@62|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@132 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@132) |a#0@@63| |b#0@@37|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@132 |a#0@@63| |b#0@@37|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@132 |a#0@@63| |b#0@@37|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@132) |a#0@@63| |b#0@@37|)))) :qid |unknown.0:0| :skolemid |1667| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@132) |a#0@@63| |b#0@@37|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@133 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@133 |a#0@@64| |b#0@@38|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@64| |b#0@@38|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@64| |b#0@@38|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@133 |a#0@@64| |b#0@@38|)))) :qid |unknown.0:0| :skolemid |1668| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@133) |a#0@@64| |b#0@@38|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@134 T@U) (|a#0@@65| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@65| |b#0@@39|) (and ($Is |a#0@@65| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@39| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@134 |a#0@@65| |b#0@@39|)) (<= (|Seq#Length| |a#0@@65|) (|Seq#Length| |b#0@@39|))) :qid |unknown.0:0| :skolemid |1669| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@134 |a#0@@65| |b#0@@39|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@135 T@U) (|a#0@@66| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (and ($Is |a#0@@66| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@40| (TSeq Sequences._default.IsPrefix$A@@2)))) (and (=> (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@135 |a#0@@66| |b#0@@40|) true) (=> true (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@135 |a#0@@66| |b#0@@40|)))) :qid |unknown.0:0| :skolemid |1670| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@135 |a#0@@66| |b#0@@40|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@136 T@U) (|a#0@@67| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@67| |b#0@@41|) (and ($Is |a#0@@67| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@41| (TSeq Sequences._default.IsPrefix$A@@3))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@136) |a#0@@67| |b#0@@41|) (and (<= (|Seq#Length| |a#0@@67|) (|Seq#Length| |b#0@@41|)) (|Seq#Equal| |a#0@@67| (|Seq#Take| |b#0@@41| (|Seq#Length| |a#0@@67|))))) (=> (and (<= (|Seq#Length| |a#0@@67|) (|Seq#Length| |b#0@@41|)) (|Seq#Equal| |a#0@@67| (|Seq#Take| |b#0@@41| (|Seq#Length| |a#0@@67|)))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@136) |a#0@@67| |b#0@@41|)))) :qid |unknown.0:0| :skolemid |1671| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@136) |a#0@@67| |b#0@@41|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@137 T@U) (|a#0@@68| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@68|) (Lit |b#0@@42|)) (and ($Is |a#0@@68| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@42| (TSeq Sequences._default.IsPrefix$A@@4))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@137) (Lit |a#0@@68|) (Lit |b#0@@42|)) (and (<= (|Seq#Length| (Lit |a#0@@68|)) (|Seq#Length| (Lit |b#0@@42|))) (|Seq#Equal| |a#0@@68| (|Seq#Take| (Lit |b#0@@42|) (|Seq#Length| (Lit |a#0@@68|)))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@68|)) (|Seq#Length| (Lit |b#0@@42|))) (|Seq#Equal| |a#0@@68| (|Seq#Take| (Lit |b#0@@42|) (|Seq#Length| (Lit |a#0@@68|))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@137) (Lit |a#0@@68|) (Lit |b#0@@42|))))) :qid |unknown.0:0| :weight 3 :skolemid |1672| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@137) (Lit |a#0@@68|) (Lit |b#0@@42|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@138 T@U) (|a#0@@69| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@138) |a#0@@69| |b#0@@43|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@138 |a#0@@69| |b#0@@43|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@138 |a#0@@69| |b#0@@43|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@138) |a#0@@69| |b#0@@43|)))) :qid |unknown.0:0| :skolemid |1673| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@138) |a#0@@69| |b#0@@43|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@139 T@U) (|a#0@@70| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@139 |a#0@@70| |b#0@@44|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@70| |b#0@@44|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@70| |b#0@@44|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@139 |a#0@@70| |b#0@@44|)))) :qid |unknown.0:0| :skolemid |1674| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@139) |a#0@@70| |b#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@140 T@U) (|a#0@@71| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@71| |b#0@@45|) (and ($Is |a#0@@71| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@45| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |1675| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@140 |a#0@@71| |b#0@@45|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@141 T@U) (|a#0@@72| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (and ($Is |a#0@@72| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@46| (TSeq Sequences._default.IsSuffix$A@@2)))) (and (=> (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@141 |a#0@@72| |b#0@@46|) true) (=> true (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@141 |a#0@@72| |b#0@@46|)))) :qid |unknown.0:0| :skolemid |1676| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@141 |a#0@@72| |b#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@142 T@U) (|a#0@@73| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@73| |b#0@@47|) (and ($Is |a#0@@73| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@47| (TSeq Sequences._default.IsSuffix$A@@3))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@142) |a#0@@73| |b#0@@47|) (and (<= (|Seq#Length| |a#0@@73|) (|Seq#Length| |b#0@@47|)) (|Seq#Equal| |a#0@@73| (|Seq#Drop| |b#0@@47| (- (|Seq#Length| |b#0@@47|) (|Seq#Length| |a#0@@73|)))))) (=> (and (<= (|Seq#Length| |a#0@@73|) (|Seq#Length| |b#0@@47|)) (|Seq#Equal| |a#0@@73| (|Seq#Drop| |b#0@@47| (- (|Seq#Length| |b#0@@47|) (|Seq#Length| |a#0@@73|))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@142) |a#0@@73| |b#0@@47|)))) :qid |unknown.0:0| :skolemid |1677| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@142) |a#0@@73| |b#0@@47|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@143 T@U) (|a#0@@74| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@74|) (Lit |b#0@@48|)) (and ($Is |a#0@@74| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@48| (TSeq Sequences._default.IsSuffix$A@@4))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@143) (Lit |a#0@@74|) (Lit |b#0@@48|)) (and (<= (|Seq#Length| (Lit |a#0@@74|)) (|Seq#Length| (Lit |b#0@@48|))) (|Seq#Equal| |a#0@@74| (|Seq#Drop| (Lit |b#0@@48|) (- (|Seq#Length| (Lit |b#0@@48|)) (|Seq#Length| (Lit |a#0@@74|))))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@74|)) (|Seq#Length| (Lit |b#0@@48|))) (|Seq#Equal| |a#0@@74| (|Seq#Drop| (Lit |b#0@@48|) (- (|Seq#Length| (Lit |b#0@@48|)) (|Seq#Length| (Lit |a#0@@74|)))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@143) (Lit |a#0@@74|) (Lit |b#0@@48|))))) :qid |unknown.0:0| :weight 3 :skolemid |1678| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@143) (Lit |a#0@@74|) (Lit |b#0@@48|))) ))))
(assert (forall ((arg0@@258 T@U) (arg1@@140 T@U) (arg2@@79 T@U) (arg3@@55 T@U) (arg4@@40 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@258 arg1@@140 arg2@@79 arg3@@55 arg4@@40)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@258 arg1@@140 arg2@@79 arg3@@55 arg4@@40)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@144 T@U) (|run#0@@54| T@U) (|needle#0| T@U) (|i#0@@53| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |run#0@@54|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@144) |run#0@@54| |needle#0| |i#0@@53|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@144 |run#0@@54| |needle#0| |i#0@@53|))) :qid |unknown.0:0| :skolemid |1679| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@144) |run#0@@54| |needle#0| |i#0@@53|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@145 T@U) (|run#0@@55| T@U) (|needle#0@@0| T@U) (|i#0@@54| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |run#0@@55|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@145 |run#0@@55| |needle#0@@0| |i#0@@54|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@55| |needle#0@@0| |i#0@@54|))) :qid |unknown.0:0| :skolemid |1680| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@145) |run#0@@55| |needle#0@@0| |i#0@@54|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@146 T@U) (|run#0@@56| T@U) (|needle#0@@1| T@U) (|i#0@@55| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |run#0@@56|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@56| |needle#0@@1| |i#0@@55|) (and (and ($Is |run#0@@56| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@55|) (<= |i#0@@55| (|Seq#Length| |run#0@@56|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@146 |run#0@@56| |needle#0@@1| |i#0@@55|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@146 |run#0@@56| |needle#0@@1| |i#0@@55|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@146 |run#0@@56| |needle#0@@1| |i#0@@55|)))) (|Seq#Length| |run#0@@56|))) (= (|Seq#Index| |run#0@@56| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@146 |run#0@@56| |needle#0@@1| |i#0@@55|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@146 |run#0@@56| |needle#0@@1| |i#0@@55|)) (forall ((|j#0@@1| Int) ) (!  (=> (and (<= |i#0@@55| |j#0@@1|) (< |j#0@@1| (|Seq#Length| |run#0@@56|))) (not (= (|Seq#Index| |run#0@@56| |j#0@@1|) |needle#0@@1|))) :qid |sequence.340:32| :skolemid |1681| :pattern ( (|Seq#Index| |run#0@@56| |j#0@@1|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@146 |run#0@@56| |needle#0@@1| |i#0@@55|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1682| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@146 |run#0@@56| |needle#0@@1| |i#0@@55|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@147 T@U) (|run#0@@57| T@U) (|needle#0@@2| T@U) (|i#0@@56| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |run#0@@57|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@57| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (and (=> (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@147 |run#0@@57| |needle#0@@2| |i#0@@56|) (and (<= (LitInt 0) |i#0@@56|) (<= |i#0@@56| (|Seq#Length| |run#0@@57|)))) (=> (and (<= (LitInt 0) |i#0@@56|) (<= |i#0@@56| (|Seq#Length| |run#0@@57|))) (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@147 |run#0@@57| |needle#0@@2| |i#0@@56|)))) :qid |unknown.0:0| :skolemid |1683| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@147 |run#0@@57| |needle#0@@2| |i#0@@56|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@148 T@U) (|run#0@@58| T@U) (|needle#0@@3| T@U) (|i#0@@57| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| |i#0@@57|) (and (and ($Is |run#0@@58| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@57|) (<= |i#0@@57| (|Seq#Length| |run#0@@58|)))))) (and (=> (not (= |i#0@@57| (|Seq#Length| |run#0@@58|))) (=> (not (= (|Seq#Index| |run#0@@58| |i#0@@57|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| (+ |i#0@@57| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@148) |run#0@@58| |needle#0@@3| |i#0@@57|) (ite (= |i#0@@57| (|Seq#Length| |run#0@@58|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@58| |i#0@@57|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@57|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@148 |run#0@@58| |needle#0@@3| (+ |i#0@@57| 1))))))) :qid |unknown.0:0| :skolemid |1684| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@148) |run#0@@58| |needle#0@@3| |i#0@@57|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@149 T@U) (|run#0@@59| T@U) (|needle#0@@4| T@U) (|i#0@@58| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@58|)) (and (and ($Is |run#0@@59| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@58|)) (<= (LitInt |i#0@@58|) (|Seq#Length| (Lit |run#0@@59|))))))) (and (=> (not (= (LitInt |i#0@@58|) (|Seq#Length| (Lit |run#0@@59|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@58|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@58| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@149) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@58|)) (ite (= (LitInt |i#0@@58|) (|Seq#Length| (Lit |run#0@@59|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@58|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@58|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@149) (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@58| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1685| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@149) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@58|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@150 T@U) (|run#0@@60| T@U) (|needle#0@@5| T@U) (|i#0@@59| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@59|)) (and (and ($Is |run#0@@60| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@59|)) (<= (LitInt |i#0@@59|) (|Seq#Length| (Lit |run#0@@60|))))))) (and (=> (not (= (LitInt |i#0@@59|) (|Seq#Length| (Lit |run#0@@60|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@59|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@59| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@150) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@59|)) (ite (= (LitInt |i#0@@59|) (|Seq#Length| (Lit |run#0@@60|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@59|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@59|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@150) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@59| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1686| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@150) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@59|))) ))))
(assert (forall ((arg0@@259 T@U) (arg1@@141 T@U) (arg2@@80 T@U) (arg3@@56 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@259 arg1@@141 arg2@@80 arg3@@56)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@259 arg1@@141 arg2@@80 arg3@@56)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@151 T@U) (|run#0@@61| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@151) |run#0@@61| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@151 |run#0@@61| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |1687| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@151) |run#0@@61| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@152 T@U) (|run#0@@62| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@152) LayerTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@152 |run#0@@62| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@62| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |1688| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@152) |run#0@@62| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@153 T@U) (|run#0@@63| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@153) LayerTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@63| |needle#0@@8|) (and ($Is |run#0@@63| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@153 |run#0@@63| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@153 |run#0@@63| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@153 |run#0@@63| |needle#0@@8|)))) (|Seq#Length| |run#0@@63|))) (= (|Seq#Index| |run#0@@63| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@153 |run#0@@63| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@153 |run#0@@63| |needle#0@@8|)) (forall ((|i#0@@60| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| (|Seq#Length| |run#0@@63|))) (not (= (|Seq#Index| |run#0@@63| |i#0@@60|) |needle#0@@8|))) :qid |sequence.350:32| :skolemid |1689| :pattern ( (|Seq#Index| |run#0@@63| |i#0@@60|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@153 |run#0@@63| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1690| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@153 |run#0@@63| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@154 T@U) (|run#0@@64| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@154) LayerTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@64| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (and (=> (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@154 |run#0@@64| |needle#0@@9|) true) (=> true (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@154 |run#0@@64| |needle#0@@9|)))) :qid |unknown.0:0| :skolemid |1691| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@154 |run#0@@64| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@155 T@U) (|run#0@@65| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10|) (and ($Is |run#0@@65| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@155) |run#0@@65| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@65| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |1692| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@155) |run#0@@65| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@156 T@U) (|run#0@@66| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11|) (and ($Is |run#0@@66| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@156) (Lit |run#0@@66|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@66|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1693| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@156) (Lit |run#0@@66|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@157 T@U) (|run#0@@67| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|)) (and ($Is |run#0@@67| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@157) (Lit |run#0@@67|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1694| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@157) (Lit |run#0@@67|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@260 T@U) (arg1@@142 T@U) (arg2@@81 Int) (arg3@@57 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@260 arg1@@142 arg2@@81 arg3@@57)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@260 arg1@@142 arg2@@81 arg3@@57)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@158 T@U) (|length#0| Int) (|v#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |v#0@@3|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@158) |length#0| |v#0@@3|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@158 |length#0| |v#0@@3|))) :qid |unknown.0:0| :skolemid |1695| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@158) |length#0| |v#0@@3|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@159 T@U) (|length#0@@0| Int) (|v#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |v#0@@4|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@159 |length#0@@0| |v#0@@4|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@4|))) :qid |unknown.0:0| :skolemid |1696| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@159) |length#0@@0| |v#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@160 T@U) (|length#0@@1| Int) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@5|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@5| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@160 |length#0@@1| |v#0@@5|)) |length#0@@1|) (forall ((|i#0@@61| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@61|) (< |i#0@@61| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@160 |length#0@@1| |v#0@@5|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@160 |length#0@@1| |v#0@@5|) |i#0@@61|) |v#0@@5|)) :qid |sequence.357:18| :skolemid |1697| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@160 |length#0@@1| |v#0@@5|) |i#0@@61|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@160 |length#0@@1| |v#0@@5|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |1698| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@160 |length#0@@1| |v#0@@5|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@161 T@U) (|length#0@@2| Int) (|v#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |v#0@@6|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@6| Sequences._default.SeqOfLength$V@@2))) (and (=> (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@161 |length#0@@2| |v#0@@6|) true) (=> true (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@161 |length#0@@2| |v#0@@6|)))) :qid |unknown.0:0| :skolemid |1699| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@161 |length#0@@2| |v#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@162 T@U) (|length#0@@3| Int) (|v#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |v#0@@7|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@7|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@7| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@7|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@162) |length#0@@3| |v#0@@7|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@7|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@162 (- |length#0@@3| 1) |v#0@@7|)))))) :qid |unknown.0:0| :skolemid |1700| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@162) |length#0@@3| |v#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@163 T@U) (|length#0@@4| Int) (|v#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |v#0@@8|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@8|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@8| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@8|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@163) (LitInt |length#0@@4|) |v#0@@8|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@8|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@163) (LitInt (- |length#0@@4| 1)) |v#0@@8|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1701| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@163) (LitInt |length#0@@4|) |v#0@@8|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@164 T@U) (|length#0@@5| Int) (|v#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |v#0@@9|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@9|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@9| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@9|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@164) (LitInt |length#0@@5|) (Lit |v#0@@9|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@9|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@164) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@9|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1702| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@164) (LitInt |length#0@@5|) (Lit |v#0@@9|))) ))))
(assert (forall ((arg0@@261 T@U) (arg1@@143 T@U) (arg2@@82 T@U) (arg3@@58 Int) (arg4@@41 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@261 arg1@@143 arg2@@82 arg3@@58 arg4@@41)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@261 arg1@@143 arg2@@82 arg3@@58 arg4@@41)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@165 T@U) (|s#0@@55| T@U) (|i#0@@62| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |s#0@@55|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@165) |s#0@@55| |i#0@@62| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@165 |s#0@@55| |i#0@@62| |t#0|))) :qid |unknown.0:0| :skolemid |1703| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@165) |s#0@@55| |i#0@@62| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@166 T@U) (|s#0@@56| T@U) (|i#0@@63| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@166) LayerTypeType)) (= (type |s#0@@56|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@166 |s#0@@56| |i#0@@63| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@56| |i#0@@63| |t#0@@0|))) :qid |unknown.0:0| :skolemid |1704| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@166) |s#0@@56| |i#0@@63| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@167 T@U) (|s#0@@57| T@U) (|i#0@@64| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |s#0@@57|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@57| |i#0@@64| |t#0@@1|) (and (and (and ($Is |s#0@@57| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@64| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| (|Seq#Length| |s#0@@57|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@167 |s#0@@57| |i#0@@64| |t#0@@1|) (|Seq#Update| |s#0@@57| |i#0@@64| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@167 |s#0@@57| |i#0@@64| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |1705| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@167 |s#0@@57| |i#0@@64| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@168 T@U) (|s#0@@58| T@U) (|i#0@@65| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |s#0@@58|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@58| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@65|) (< |i#0@@65| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (and (=> (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@168 |s#0@@58| |i#0@@65| |t#0@@2|) (and (< (+ |i#0@@65| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@65|) (< |i#0@@65| (|Seq#Length| |s#0@@58|))))) (=> (and (< (+ |i#0@@65| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@65|) (< |i#0@@65| (|Seq#Length| |s#0@@58|)))) (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@168 |s#0@@58| |i#0@@65| |t#0@@2|)))) :qid |unknown.0:0| :skolemid |1706| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@168 |s#0@@58| |i#0@@65| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@169 T@U) (|s#0@@59| T@U) (|i#0@@66| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |s#0@@59|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@59| |i#0@@66| |t#0@@3|) (and (and (and ($Is |s#0@@59| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@66|) (< |i#0@@66| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@66| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@66|) (< |i#0@@66| (|Seq#Length| |s#0@@59|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@169) |s#0@@59| |i#0@@66| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@59| |i#0@@66|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@59| (+ |i#0@@66| 1))))) :qid |unknown.0:0| :skolemid |1707| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@169) |s#0@@59| |i#0@@66| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@170 T@U) (|s#0@@60| T@U) (|i#0@@67| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |s#0@@60|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@60|) (LitInt |i#0@@67|) |t#0@@4|) (and (and (and ($Is |s#0@@60| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@67|) (< |i#0@@67| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@67| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@67|)) (< |i#0@@67| (|Seq#Length| (Lit |s#0@@60|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@170) (Lit |s#0@@60|) (LitInt |i#0@@67|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@60|) (LitInt |i#0@@67|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@60|) (LitInt (+ |i#0@@67| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1708| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@170) (Lit |s#0@@60|) (LitInt |i#0@@67|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@171 T@U) (|s#0@@61| T@U) (|i#0@@68| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |s#0@@61|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@61|) (LitInt |i#0@@68|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@61| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@68|) (< |i#0@@68| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@68| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@68|)) (< |i#0@@68| (|Seq#Length| (Lit |s#0@@61|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@171) (Lit |s#0@@61|) (LitInt |i#0@@68|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@61|) (LitInt |i#0@@68|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@61|) (LitInt (+ |i#0@@68| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1709| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@171) (Lit |s#0@@61|) (LitInt |i#0@@68|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@262 T@U) (arg1@@144 T@U) (arg2@@83 T@U) (arg3@@59 T@U) (arg4@@42 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@262 arg1@@144 arg2@@83 arg3@@59 arg4@@42)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@262 arg1@@144 arg2@@83 arg3@@59 arg4@@42)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@172 T@U) (|a#0@@75| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@172) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@172) |a#0@@75| |b#0@@49|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@172 |a#0@@75| |b#0@@49|))) :qid |unknown.0:0| :skolemid |1710| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@172) |a#0@@75| |b#0@@49|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@173 T@U) (|a#0@@76| T@U) (|b#0@@50| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@173) LayerTypeType)) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@50|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@173 |a#0@@76| |b#0@@50|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@76| |b#0@@50|))) :qid |unknown.0:0| :skolemid |1711| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@173) |a#0@@76| |b#0@@50|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@174 T@U) (|a#0@@77| T@U) (|b#0@@51| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@174) LayerTypeType)) (= (type |a#0@@77|) (SeqType BoxType))) (= (type |b#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@77| |b#0@@51|) (and (and ($Is |a#0@@77| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@51| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@77|) (|Seq#Length| |b#0@@51|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@174 |a#0@@77| |b#0@@51|)) (|Seq#Length| |a#0@@77|)) (forall ((|i#0@@69| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@69|) (< |i#0@@69| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@174 |a#0@@77| |b#0@@51|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@174 |a#0@@77| |b#0@@51|) |i#0@@69|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@77| |i#0@@69|) (|Seq#Index| |b#0@@51| |i#0@@69|))))) :qid |sequence.378:20| :skolemid |1712| :pattern ( (|Seq#Index| |b#0@@51| |i#0@@69|)) :pattern ( (|Seq#Index| |a#0@@77| |i#0@@69|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@174 |a#0@@77| |b#0@@51|) |i#0@@69|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@174 |a#0@@77| |b#0@@51|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |1713| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@174 |a#0@@77| |b#0@@51|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@175 T@U) (|a#0@@78| T@U) (|b#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@175) LayerTypeType)) (= (type |a#0@@78|) (SeqType BoxType))) (= (type |b#0@@52|) (SeqType BoxType))) (and ($Is |a#0@@78| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@52| (TSeq Sequences._default.Zip$B@@2)))) (and (=> (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@175 |a#0@@78| |b#0@@52|) (= (|Seq#Length| |a#0@@78|) (|Seq#Length| |b#0@@52|))) (=> (= (|Seq#Length| |a#0@@78|) (|Seq#Length| |b#0@@52|)) (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@175 |a#0@@78| |b#0@@52|)))) :qid |unknown.0:0| :skolemid |1714| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@175 |a#0@@78| |b#0@@52|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@176 T@U) (|a#0@@79| T@U) (|b#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@176) LayerTypeType)) (= (type |a#0@@79|) (SeqType BoxType))) (= (type |b#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@79| |b#0@@53|) (and (and ($Is |a#0@@79| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@53| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@79|) (|Seq#Length| |b#0@@53|))))) (and (=> (not (= (|Seq#Length| |a#0@@79|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@79|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@53|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@79|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@53|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@79|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@53|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@176) |a#0@@79| |b#0@@53|) (ite (= (|Seq#Length| |a#0@@79|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@176 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@79|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@53|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@79|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@53|))))))))) :qid |unknown.0:0| :skolemid |1715| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@176) |a#0@@79| |b#0@@53|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@177 T@U) (|a#0@@80| T@U) (|b#0@@54| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@177) LayerTypeType)) (= (type |a#0@@80|) (SeqType BoxType))) (= (type |b#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@80|) (Lit |b#0@@54|)) (and (and ($Is |a#0@@80| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@54| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@80|)) (|Seq#Length| (Lit |b#0@@54|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@80|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@80|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@54|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@80|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@54|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@80|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@54|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@177) (Lit |a#0@@80|) (Lit |b#0@@54|)) (ite (= (|Seq#Length| (Lit |a#0@@80|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@177) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@80|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@54|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@80|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@54|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1716| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@177) (Lit |a#0@@80|) (Lit |b#0@@54|))) ))))
(assert (forall ((arg0@@263 T@U) (arg1@@145 T@U) (arg2@@84 T@U) (arg3@@60 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@263 arg1@@145 arg2@@84 arg3@@60)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@263 arg1@@145 arg2@@84 arg3@@60)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@178 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@178) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@178) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@178 |z#0|))) :qid |unknown.0:0| :skolemid |1717| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@178) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@179 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@179) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@179 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |1718| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@179) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@180 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@180) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@180 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@180 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@180 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@70| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@70|) (< |i#0@@70| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@180 |z#0@@1|))) |i#0@@70|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@180 |z#0@@1|))) |i#0@@70|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@70|))))) :qid |sequence.386:20| :skolemid |1719| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@70|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@180 |z#0@@1|))) |i#0@@70|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@180 |z#0@@1|))) |i#0@@70|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@180 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |1720| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@180 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@181 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@181) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (and (=> (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@181 |z#0@@2|) true) (=> true (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@181 |z#0@@2|)))) :qid |unknown.0:0| :skolemid |1721| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@181 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@182 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@182) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@182) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@55| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@182 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@81| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@182 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@81| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@55| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |1722| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@182) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@183 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@183) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@183) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@183) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@183) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1723| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@183) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@264 T@U) (arg1@@146 T@U) (arg2@@85 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@264 arg1@@146 arg2@@85)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@264 arg1@@146 arg2@@85)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@184 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@184) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@184 |seqs#0|))) :qid |unknown.0:0| :skolemid |1724| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@184) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@185 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@185 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |1725| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@185) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@186 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@186) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@186 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@71| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@71|) (< |i#0@@71| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@186 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@186 |seqs#0@@1|) |i#0@@71|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@71|)))))) :qid |sequence.408:20| :skolemid |1726| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@71|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@186 |seqs#0@@1|) |i#0@@71|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@186 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |1727| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@186 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@187 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@187) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (and (=> (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@187 |seqs#0@@2|) true) (=> true (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@187 |seqs#0@@2|)))) :qid |unknown.0:0| :skolemid |1728| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@187 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@188 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@188) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@188) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@188 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |1729| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@188) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@189 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@189) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@189) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1730| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@189) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@190 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@190) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@190) |shape#0|) (Sequences.__default.FlattenLength $ly@@190 |shape#0|))) :qid |sequence.419:22| :skolemid |1731| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@190) |shape#0|)) )))
(assert (forall (($ly@@191 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@191) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@191 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |sequence.419:22| :skolemid |1732| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@191) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@192 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@192) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@192 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@192 |shape#0@@1|)))) :qid |sequence.419:22| :skolemid |1733| :pattern ( (Sequences.__default.FlattenLength $ly@@192 |shape#0@@1|)) ))))
(assert (forall (($ly@@193 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@193) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (and (=> (|Sequences.__default.FlattenLength#requires| $ly@@193 |shape#0@@2|) true) (=> true (|Sequences.__default.FlattenLength#requires| $ly@@193 |shape#0@@2|)))) :qid |sequence.419:22| :skolemid |1734| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@193 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@194 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@194) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@194) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@194 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |sequence.419:22| :skolemid |1735| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@194) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@195 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@195) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@195) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@195) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |sequence.419:22| :weight 3 :skolemid |1736| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@195) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@265 T@U) (arg1@@147 T@U) (arg2@@86 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@265 arg1@@147 arg2@@86)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@265 arg1@@147 arg2@@86)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@196 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@196) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@196) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@196 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |1737| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@196) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@197 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@197) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@197 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |1738| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@197) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@198 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@198) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@198 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@198 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@198 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |1739| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@198 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@199 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@199) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (and (=> (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@199 |seqs#0@@8|) true) (=> true (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@199 |seqs#0@@8|)))) :qid |unknown.0:0| :skolemid |1740| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@199 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@200 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@200) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@200) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@200 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |1741| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@200) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@201 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@201) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@201) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@201) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1742| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@201) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@72| Int) (|j#0@@2| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@72| |j#0@@2|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@72|)) (<= (LitInt 0) |j#0@@2|)) (and (< |i#0@@72| (|Seq#Length| |shape#0@@5|)) (< |j#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@72|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@72| |j#0@@2|))) :qid |sequence.488:25| :skolemid |1743| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@72| |j#0@@2|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@73| Int) (|j#0@@3| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@73|)) (<= (LitInt 0) |j#0@@3|)) (and (=> (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@73| |j#0@@3|) (and (< |i#0@@73| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@73|)))))) (=> (and (< |i#0@@73| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@73|))))) (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@73| |j#0@@3|))))) :qid |sequence.488:25| :skolemid |1744| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@73| |j#0@@3|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@74| Int) (|j#0@@4| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@74| |j#0@@4|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@74|)) (<= (LitInt 0) |j#0@@4|)) (and (< |i#0@@74| (|Seq#Length| |shape#0@@7|)) (< |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@74|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@74|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@74| |j#0@@4|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@74|)) |j#0@@4|)))) :qid |sequence.488:25| :skolemid |1745| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@74| |j#0@@4|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@75| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@75|) (LitInt |j#0@@5|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@75|)) (<= (LitInt 0) |j#0@@5|)) (and (< |i#0@@75| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@75|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@75|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@75|) (LitInt |j#0@@5|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@75|)))) |j#0@@5|)))) :qid |sequence.488:25| :weight 3 :skolemid |1746| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@75|) (LitInt |j#0@@5|))) ))))
(assert (forall ((arg0@@266 T@U) (arg1@@148 T@U) (arg2@@87 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@266 arg1@@148 arg2@@87)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@266 arg1@@148 arg2@@87)) )))
(assert (forall (($ly@@202 T@U) (|shape#0@@9| T@U) (|i#0@@76| Int) ) (!  (=> (and (= (type $ly@@202) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@202) |shape#0@@9| |i#0@@76|) (Sequences.__default.UnflattenIndex $ly@@202 |shape#0@@9| |i#0@@76|))) :qid |sequence.495:12| :skolemid |1747| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@202) |shape#0@@9| |i#0@@76|)) )))
(assert (forall (($ly@@203 T@U) (|shape#0@@10| T@U) (|i#0@@77| Int) ) (!  (=> (and (= (type $ly@@203) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@203 |shape#0@@10| |i#0@@77|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@77|))) :qid |sequence.495:12| :skolemid |1748| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@203) |shape#0@@10| |i#0@@77|)) )))
(assert  (=> true (forall (($ly@@204 T@U) (|shape#0@@11| T@U) (|i#0@@78| Int) ) (!  (=> (and (and (= (type $ly@@204) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@78|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@78|)) (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@204 |shape#0@@11| |i#0@@78|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |sequence.495:12| :skolemid |1749| :pattern ( (Sequences.__default.UnflattenIndex $ly@@204 |shape#0@@11| |i#0@@78|)) ))))
(assert (forall (($ly@@205 T@U) (|shape#0@@12| T@U) (|i#0@@79| Int) ) (!  (=> (and (and (= (type $ly@@205) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@79|))) (and (=> (|Sequences.__default.UnflattenIndex#requires| $ly@@205 |shape#0@@12| |i#0@@79|) (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))) (=> (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)) (|Sequences.__default.UnflattenIndex#requires| $ly@@205 |shape#0@@12| |i#0@@79|)))) :qid |sequence.495:12| :skolemid |1750| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@205 |shape#0@@12| |i#0@@79|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@206 T@U) (|shape#0@@13| T@U) (|i#0@@80| Int) ) (!  (=> (and (and (= (type $ly@@206) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@80|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@80|)) (< |i#0@@80| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@80| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@80|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@80|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@206) |shape#0@@13| |i#0@@80|) (ite (< |i#0@@80| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@206 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@80|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@80| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |sequence.495:12| :skolemid |1751| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@206) |shape#0@@13| |i#0@@80|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@207 T@U) (|shape#0@@14| T@U) (|i#0@@81| Int) ) (!  (=> (and (and (= (type $ly@@207) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@81|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@81|)) (< |i#0@@81| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@81| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@81|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@81|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@207) (Lit |shape#0@@14|) (LitInt |i#0@@81|)) (ite (< |i#0@@81| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@207) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@81|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@81| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |sequence.495:12| :weight 3 :skolemid |1752| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@207) (Lit |shape#0@@14|) (LitInt |i#0@@81|))) ))))
(assert (forall ((arg0@@267 T@U) (arg1@@149 T@U) (arg2@@88 Int) (arg3@@61 T@U) ) (! (= (type (Sequences.__default.fill arg0@@267 arg1@@149 arg2@@88 arg3@@61)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@267 arg1@@149 arg2@@88 arg3@@61)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@208 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@208) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@208) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@208 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |1753| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@208) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@209 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@209) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@209 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |1754| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@209) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@210 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@210) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@210 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@82| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@210 |n#0@@7| |t#0@@8|) |i#0@@82|) |t#0@@8|)) :qid |sequence.680:18| :skolemid |1755| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@210 |n#0@@7| |t#0@@8|) |i#0@@82|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@210 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |1756| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@210 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@211 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@211) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (and (=> (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@211 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0))) (=> (>= |n#0@@8| (LitInt 0)) (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@211 |n#0@@8| |t#0@@9|)))) :qid |unknown.0:0| :skolemid |1757| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@211 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@212 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@212) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@212) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@212 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |1758| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@212) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@213 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@213) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@213) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@213) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1759| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@213) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@214 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@214) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@214) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@214) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1760| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@214) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 Tclass.ValueMessage.__default)) (and (= ($Box ($Unbox refType bx@@103)) bx@@103) ($Is ($Unbox refType bx@@103) Tclass.ValueMessage.__default))) :qid |unknown.0:0| :skolemid |1761| :pattern ( ($IsBox bx@@103 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@30 T@U) ) (!  (=> (= (type $o@@30) refType) (and (=> ($Is $o@@30 Tclass.ValueMessage.__default) (or (= $o@@30 null) (= (dtype $o@@30) Tclass.ValueMessage.__default))) (=> (or (= $o@@30 null) (= (dtype $o@@30) Tclass.ValueMessage.__default)) ($Is $o@@30 Tclass.ValueMessage.__default)))) :qid |unknown.0:0| :skolemid |1762| :pattern ( ($Is $o@@30 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@31 T@U) ($h@@53 T@U) ) (!  (=> (and (= (type $o@@31) refType) (= (type $h@@53) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@31 Tclass.ValueMessage.__default $h@@53) (or (= $o@@31 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@31) alloc)))) (=> (or (= $o@@31 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@31) alloc))) ($IsAlloc $o@@31 Tclass.ValueMessage.__default $h@@53)))) :qid |unknown.0:0| :skolemid |1763| :pattern ( ($IsAlloc $o@@31 Tclass.ValueMessage.__default $h@@53)) )))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert (= (type ValueMessage.__default.NopDelta) BoxType))
(assert  (=> true (=> true ($IsBox ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert  (=> |ValueMessage.__default.NopDelta#requires| true))
(assert  (=> true |ValueMessage.__default.NopDelta#requires|))
(assert (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueMessage.__default.DefaultValue#requires| true))
(assert  (=> true |ValueMessage.__default.DefaultValue#requires|))
(assert (forall ((arg0@@268 T@U) (arg1@@150 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@268 arg1@@150)) BoxType) :qid |funType:ValueMessage.__default.CombineDeltas| :pattern ( (ValueMessage.__default.CombineDeltas arg0@@268 arg1@@150)) )))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) BoxType) (= (type |olddelta#0|) BoxType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($IsBox |newdelta#0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (= |newdelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (= |olddelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($IsBox (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta))) :qid |Messagei.25:32| :skolemid |1764| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|)) ))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) BoxType) (= (type |olddelta#0@@0|) BoxType)) (and ($IsBox |newdelta#0@@0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0@@0| Tclass.ValueMessage.Delta))) (and (=> (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true) (=> true (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)))) :qid |Messagei.25:32| :skolemid |1765| :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)) )))
(assert (forall ((arg0@@269 T@U) (arg1@@151 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@269 arg1@@151)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.ApplyDelta| :pattern ( (ValueMessage.__default.ApplyDelta arg0@@269 arg1@@151)) )))
(assert  (=> true (forall ((|delta#0| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0|) BoxType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0| |value#0|) (and ($IsBox |delta#0| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (= |delta#0| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) Tclass.ValueType.Value))) :qid |Messagei.29:29| :skolemid |1766| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0| |value#0|)) ))))
(assert (forall ((|delta#0@@0| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@0|) BoxType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($IsBox |delta#0@@0| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (and (=> (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|) true) (=> true (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)))) :qid |Messagei.29:29| :skolemid |1767| :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)) )))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@104)) bx@@104) ($Is ($Unbox DatatypeTypeType bx@@104) Tclass.ValueMessage.Message))) :qid |unknown.0:0| :skolemid |1768| :pattern ( ($IsBox bx@@104 Tclass.ValueMessage.Message)) )))
(assert (forall ((arg0@@270 T@U) ) (! (= (type (ValueMessage.__default.bytestring__to__Message arg0@@270)) DatatypeTypeType) :qid |funType:ValueMessage.__default.bytestring__to__Message| :pattern ( (ValueMessage.__default.bytestring__to__Message arg0@@270)) )))
(assert  (=> true (forall ((|s#0@@62| T@U) ) (!  (=> (and (= (type |s#0@@62|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@62|) (and ($Is |s#0@@62| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@62|) 4294967296)))) ($Is (ValueMessage.__default.bytestring__to__Message |s#0@@62|) Tclass.ValueMessage.Message)) :qid |Messagei.100:41| :skolemid |1769| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@62|)) ))))
(assert (forall ((|s#0@@63| T@U) ) (!  (=> (and (= (type |s#0@@63|) (SeqType BoxType)) ($Is |s#0@@63| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@63|) (< (|Seq#Length| |s#0@@63|) 4294967296)) (=> (< (|Seq#Length| |s#0@@63|) 4294967296) (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@63|)))) :qid |Messagei.100:41| :skolemid |1770| :pattern ( (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@63|)) )))
(assert  (=> true (forall ((|msg#0| T@U) ) (!  (=> (and (= (type |msg#0|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0|) ($Is |msg#0| Tclass.ValueMessage.Message))) true) :qid |Messagei.113:30| :skolemid |1771| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0|)) ))))
(assert (forall ((|msg#0@@0| T@U) ) (!  (=> (and (= (type |msg#0@@0|) DatatypeTypeType) ($Is |msg#0@@0| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|) true) (=> true (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)))) :qid |Messagei.113:30| :skolemid |1772| :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)) )))
(assert  (=> true (forall ((|msgs#0| T@U) ) (!  (=> (and (= (type |msgs#0|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0|) ($Is |msgs#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |Messagei.118:33| :skolemid |1773| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0|)) ))))
(assert (forall ((|msgs#0@@0| T@U) ) (!  (=> (and (= (type |msgs#0@@0|) (SeqType BoxType)) ($Is |msgs#0@@0| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|) true) (=> true (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)))) :qid |Messagei.118:33| :skolemid |1774| :pattern ( (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)) )))
(assert (forall ((arg0@@271 T@U) ) (! (= (type (ValueMessage.__default.Message__to__bytestring arg0@@271)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.Message__to__bytestring| :pattern ( (ValueMessage.__default.Message__to__bytestring arg0@@271)) )))
(assert  (=> true (forall ((|msg#0@@1| T@U) ) (!  (=> (and (= (type |msg#0@@1|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@1|) (and ($Is |msg#0@@1| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@1|)))) ($Is (ValueMessage.__default.Message__to__bytestring |msg#0@@1|) (TSeq Tclass.NativeTypes.byte))) :qid |Messagei.123:41| :skolemid |1775| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@1|)) ))))
(assert (forall ((|msg#0@@2| T@U) ) (!  (=> (and (= (type |msg#0@@2|) DatatypeTypeType) ($Is |msg#0@@2| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|) (ValueMessage.Message.Define_q |msg#0@@2|)) (=> (ValueMessage.Message.Define_q |msg#0@@2|) (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|)))) :qid |Messagei.123:41| :skolemid |1776| :pattern ( (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|)) )))
(assert (forall ((arg0@@272 T@U) (arg1@@152 T@U) ) (! (= (type (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@272 arg1@@152)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.messageSeq__to__bytestringSeq| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@272 arg1@@152)) )))
(assert (forall (($ly@@215 T@U) (|msgs#0@@1| T@U) ) (!  (=> (and (= (type $ly@@215) LayerTypeType) (= (type |msgs#0@@1|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@215) |msgs#0@@1|) (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@215 |msgs#0@@1|))) :qid |Messagei.129:12| :skolemid |1777| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@215) |msgs#0@@1|)) )))
(assert (forall (($ly@@216 T@U) (|msgs#0@@2| T@U) ) (!  (=> (and (= (type $ly@@216) LayerTypeType) (= (type |msgs#0@@2|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@216 |msgs#0@@2|) (ValueMessage.__default.messageSeq__to__bytestringSeq $LZ |msgs#0@@2|))) :qid |Messagei.129:12| :skolemid |1778| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq (AsFuelBottom $ly@@216) |msgs#0@@2|)) )))
(assert  (=> true (forall (($ly@@217 T@U) (|msgs#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@217) LayerTypeType) (= (type |msgs#0@@3|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@3|) (and ($Is |msgs#0@@3| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@3|)))) (and (and (= (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@217 |msgs#0@@3|)) (|Seq#Length| |msgs#0@@3|)) (forall ((|i#0@@83| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@217 |msgs#0@@3|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@217 |msgs#0@@3|) |i#0@@83|)) (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@3| |i#0@@83|))))) :qid |Messagei.132:20| :skolemid |1779| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@3| |i#0@@83|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@217 |msgs#0@@3|) |i#0@@83|))) ))) ($Is (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@217 |msgs#0@@3|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |Messagei.129:12| :skolemid |1780| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@217 |msgs#0@@3|)) ))))
(assert (forall (($ly@@218 T@U) (|msgs#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@218) LayerTypeType) (= (type |msgs#0@@4|) (SeqType BoxType))) ($Is |msgs#0@@4| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@218 |msgs#0@@4|) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@4|)) (=> (ValueMessage.__default.EncodableMessageSeq |msgs#0@@4|) (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@218 |msgs#0@@4|)))) :qid |Messagei.129:12| :skolemid |1781| :pattern ( (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@218 |msgs#0@@4|)) )))
(assert (forall ((arg0@@273 T@U) (arg1@@153 T@U) ) (! (= (type (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@273 arg1@@153)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.bytestringSeq__to__MessageSeq| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@273 arg1@@153)) )))
(assert (forall (($ly@@219 T@U) (|strings#0| T@U) ) (!  (=> (and (= (type $ly@@219) LayerTypeType) (= (type |strings#0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@219) |strings#0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@219 |strings#0|))) :qid |Messagei.140:12| :skolemid |1782| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@219) |strings#0|)) )))
(assert (forall (($ly@@220 T@U) (|strings#0@@0| T@U) ) (!  (=> (and (= (type $ly@@220) LayerTypeType) (= (type |strings#0@@0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@220 |strings#0@@0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $LZ |strings#0@@0|))) :qid |Messagei.140:12| :skolemid |1783| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq (AsFuelBottom $ly@@220) |strings#0@@0|)) )))
(assert  (=> true (forall (($ly@@221 T@U) (|strings#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@221) LayerTypeType) (= (type |strings#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@1|) (and ($Is |strings#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#0@@84| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| (|Seq#Length| |strings#0@@1|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@84|))) 4294967296)) :qid |Messagei.141:21| :skolemid |1784| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@84|))) ))))) (and (and (= (|Seq#Length| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@221 |strings#0@@1|)) (|Seq#Length| |strings#0@@1|)) (forall ((|i#1@@19| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@19|) (< |i#1@@19| (|Seq#Length| |strings#0@@1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@221 |strings#0@@1|) |i#1@@19|)) (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@19|))))) :qid |Messagei.143:20| :skolemid |1785| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@19|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@221 |strings#0@@1|) |i#1@@19|))) ))) ($Is (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@221 |strings#0@@1|) (TSeq Tclass.ValueMessage.Message)))) :qid |Messagei.140:12| :skolemid |1786| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@221 |strings#0@@1|)) ))))
(assert (forall (($ly@@222 T@U) (|strings#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@222) LayerTypeType) (= (type |strings#0@@2|) (SeqType BoxType))) ($Is |strings#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@222 |strings#0@@2|) (forall ((|i#2@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@5|))) 4294967296)) :qid |Messagei.141:21| :skolemid |1787| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@5|))) ))) (=> (forall ((|i#2@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@6|) (< |i#2@@6| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@6|))) 4294967296)) :qid |Messagei.141:21| :skolemid |1787| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@6|))) )) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@222 |strings#0@@2|)))) :qid |Messagei.140:12| :skolemid |1788| :pattern ( (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@222 |strings#0@@2|)) )))
(assert (forall ((arg0@@274 T@U) (arg1@@154 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@274 arg1@@154)) DatatypeTypeType) :qid |funType:ValueMessage.__default.Merge| :pattern ( (ValueMessage.__default.Merge arg0@@274 arg1@@154)) )))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message)) :qid |Messagei.32:24| :skolemid |1789| :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|)) ))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true) (=> true (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)))) :qid |Messagei.32:24| :skolemid |1790| :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)) )))
(assert  (and (and (and (forall ((arg0@@275 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@275)) (SeqType BoxType)) :qid |funType:ValueMessage.Message.value| :pattern ( (ValueMessage.Message.value arg0@@275)) )) (forall ((arg0@@276 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@276)) BoxType) :qid |funType:ValueMessage.Message.delta| :pattern ( (ValueMessage.Message.delta arg0@@276)) ))) (forall ((arg0@@277 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@277)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Define| :pattern ( (|#ValueMessage.Message.Define| arg0@@277)) ))) (forall ((arg0@@278 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@278)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Update| :pattern ( (|#ValueMessage.Message.Update| arg0@@278)) ))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#0@@1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@1| |value#0@@1|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0@@1| |olddelta#0@@1|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| |newvalue#1|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|delta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#1| |value#1|)))) (let ((|olddelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|newdelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#1| |olddelta#1|))))))))) :qid |Messagei.32:24| :skolemid |1791| :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|)) ))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#2| |value#2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#2| |olddelta#2|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| |newvalue#3|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|delta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#3| |value#3|)))) (let ((|olddelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|newdelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#3| |olddelta#3|))))))))) :qid |Messagei.32:24| :weight 3 :skolemid |1792| :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|))) ))))
(assert (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true |ValueMessage.__default.IdentityMessage#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert (= (type ValueMessage.__default.DefineDefault) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefineDefault Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.DefineDefault#requires| true))
(assert  (=> true |ValueMessage.__default.DefineDefault#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert (forall ((|a#0#0#0@@1| T@U) ) (!  (=> (= (type |a#0#0#0@@1|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@1|)) |##ValueMessage.Message.Define|)) :qid |Messagei.22:13| :skolemid |1793| :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@1|)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (= (type d@@29) DatatypeTypeType) (and (=> (ValueMessage.Message.Define_q d@@29) (= (DatatypeCtorId d@@29) |##ValueMessage.Message.Define|)) (=> (= (DatatypeCtorId d@@29) |##ValueMessage.Message.Define|) (ValueMessage.Message.Define_q d@@29)))) :qid |unknown.0:0| :skolemid |1794| :pattern ( (ValueMessage.Message.Define_q d@@29)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (and (= (type d@@30) DatatypeTypeType) (ValueMessage.Message.Define_q d@@30)) (exists ((|a#1#0#0@@1| T@U) ) (!  (and (= (type |a#1#0#0@@1|) (SeqType BoxType)) (= d@@30 (|#ValueMessage.Message.Define| |a#1#0#0@@1|))) :qid |Messagei.22:13| :skolemid |1795| :no-pattern (type |a#1#0#0@@1|) :no-pattern (U_2_int |a#1#0#0@@1|) :no-pattern (U_2_bool |a#1#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |1796| :pattern ( (ValueMessage.Message.Define_q d@@30)) )))
(assert (forall ((|a#2#0#0@@1| T@U) ) (!  (=> (= (type |a#2#0#0@@1|) (SeqType BoxType)) (and (=> ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@1| Tclass.ValueType.Value)) (=> ($Is |a#2#0#0@@1| Tclass.ValueType.Value) ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message)))) :qid |Messagei.22:13| :skolemid |1797| :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#3#0#0@@1| T@U) ($h@@54 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@1|) (SeqType BoxType)) (= (type $h@@54) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@54)) (and (=> ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@54) ($IsAlloc |a#3#0#0@@1| Tclass.ValueType.Value $h@@54)) (=> ($IsAlloc |a#3#0#0@@1| Tclass.ValueType.Value $h@@54) ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@54)))) :qid |Messagei.22:13| :skolemid |1798| :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@54)) )))
(assert (forall ((d@@31 T@U) ($h@@55 T@U) ) (!  (=> (and (and (= (type d@@31) DatatypeTypeType) (= (type $h@@55) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@55) (and (ValueMessage.Message.Define_q d@@31) ($IsAlloc d@@31 Tclass.ValueMessage.Message $h@@55)))) ($IsAlloc (ValueMessage.Message.value d@@31) Tclass.ValueType.Value $h@@55)) :qid |unknown.0:0| :skolemid |1799| :pattern ( ($IsAlloc (ValueMessage.Message.value d@@31) Tclass.ValueType.Value $h@@55)) )))
(assert (forall ((|a#4#0#0@@1| T@U) ) (!  (=> (= (type |a#4#0#0@@1|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@1|)))) :qid |Messagei.22:13| :skolemid |1800| :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|))) )))
(assert (forall ((|a#5#0#0@@2| T@U) ) (!  (=> (= (type |a#5#0#0@@2|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@2|)) |a#5#0#0@@2|)) :qid |Messagei.22:13| :skolemid |1801| :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@2|)) )))
(assert (forall ((|a#6#0#0@@2| T@U) ) (!  (=> (= (type |a#6#0#0@@2|) BoxType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@2|)) |##ValueMessage.Message.Update|)) :qid |Messagei.23:13| :skolemid |1802| :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@2|)) )))
(assert (forall ((d@@32 T@U) ) (!  (=> (= (type d@@32) DatatypeTypeType) (and (=> (ValueMessage.Message.Update_q d@@32) (= (DatatypeCtorId d@@32) |##ValueMessage.Message.Update|)) (=> (= (DatatypeCtorId d@@32) |##ValueMessage.Message.Update|) (ValueMessage.Message.Update_q d@@32)))) :qid |unknown.0:0| :skolemid |1803| :pattern ( (ValueMessage.Message.Update_q d@@32)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (and (= (type d@@33) DatatypeTypeType) (ValueMessage.Message.Update_q d@@33)) (exists ((|a#7#0#0@@1| T@U) ) (!  (and (= (type |a#7#0#0@@1|) BoxType) (= d@@33 (|#ValueMessage.Message.Update| |a#7#0#0@@1|))) :qid |Messagei.23:13| :skolemid |1804| :no-pattern (type |a#7#0#0@@1|) :no-pattern (U_2_int |a#7#0#0@@1|) :no-pattern (U_2_bool |a#7#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |1805| :pattern ( (ValueMessage.Message.Update_q d@@33)) )))
(assert (forall ((|a#8#0#0@@1| T@U) ) (!  (=> (= (type |a#8#0#0@@1|) BoxType) (and (=> ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message) ($IsBox |a#8#0#0@@1| Tclass.ValueMessage.Delta)) (=> ($IsBox |a#8#0#0@@1| Tclass.ValueMessage.Delta) ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)))) :qid |Messagei.23:13| :skolemid |1806| :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ($h@@56 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@0|) BoxType) (= (type $h@@56) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@56)) (and (=> ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@56) ($IsAllocBox |a#9#0#0@@0| Tclass.ValueMessage.Delta $h@@56)) (=> ($IsAllocBox |a#9#0#0@@0| Tclass.ValueMessage.Delta $h@@56) ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@56)))) :qid |Messagei.23:13| :skolemid |1807| :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@56)) )))
(assert (forall ((d@@34 T@U) ($h@@57 T@U) ) (!  (=> (and (and (= (type d@@34) DatatypeTypeType) (= (type $h@@57) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@57) (and (ValueMessage.Message.Update_q d@@34) ($IsAlloc d@@34 Tclass.ValueMessage.Message $h@@57)))) ($IsAllocBox (ValueMessage.Message.delta d@@34) Tclass.ValueMessage.Delta $h@@57)) :qid |unknown.0:0| :skolemid |1808| :pattern ( ($IsAllocBox (ValueMessage.Message.delta d@@34) Tclass.ValueMessage.Delta $h@@57)) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) BoxType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@0|)))) :qid |Messagei.23:13| :skolemid |1809| :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|))) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) BoxType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@0|)) |a#11#0#0@@0|)) :qid |Messagei.23:13| :skolemid |1810| :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@0|)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@35)) (or (ValueMessage.Message.Define_q d@@35) (ValueMessage.Message.Update_q d@@35))) :qid |unknown.0:0| :skolemid |1811| :pattern ( (|$IsA#ValueMessage.Message| d@@35)) )))
(assert (forall ((d@@36 T@U) ) (!  (=> (and (= (type d@@36) DatatypeTypeType) ($Is d@@36 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@36) (ValueMessage.Message.Update_q d@@36))) :qid |unknown.0:0| :skolemid |1812| :pattern ( (ValueMessage.Message.Update_q d@@36) ($Is d@@36 Tclass.ValueMessage.Message)) :pattern ( (ValueMessage.Message.Define_q d@@36) ($Is d@@36 Tclass.ValueMessage.Message)) )))
(assert (forall ((a@@123 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@123) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@123) (ValueMessage.Message.Define_q b@@72))) (and (=> (|ValueMessage.Message#Equal| a@@123 b@@72) (|Seq#Equal| (ValueMessage.Message.value a@@123) (ValueMessage.Message.value b@@72))) (=> (|Seq#Equal| (ValueMessage.Message.value a@@123) (ValueMessage.Message.value b@@72)) (|ValueMessage.Message#Equal| a@@123 b@@72)))) :qid |unknown.0:0| :skolemid |1813| :pattern ( (|ValueMessage.Message#Equal| a@@123 b@@72) (ValueMessage.Message.Define_q a@@123)) :pattern ( (|ValueMessage.Message#Equal| a@@123 b@@72) (ValueMessage.Message.Define_q b@@72)) )))
(assert (forall ((a@@124 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@124) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@124) (ValueMessage.Message.Update_q b@@73))) (and (=> (|ValueMessage.Message#Equal| a@@124 b@@73) (= (ValueMessage.Message.delta a@@124) (ValueMessage.Message.delta b@@73))) (=> (= (ValueMessage.Message.delta a@@124) (ValueMessage.Message.delta b@@73)) (|ValueMessage.Message#Equal| a@@124 b@@73)))) :qid |unknown.0:0| :skolemid |1814| :pattern ( (|ValueMessage.Message#Equal| a@@124 b@@73) (ValueMessage.Message.Update_q a@@124)) :pattern ( (|ValueMessage.Message#Equal| a@@124 b@@73) (ValueMessage.Message.Update_q b@@73)) )))
(assert (forall ((a@@125 T@U) (b@@74 T@U) ) (!  (=> (and (= (type a@@125) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (=> (|ValueMessage.Message#Equal| a@@125 b@@74) (= a@@125 b@@74)) (=> (= a@@125 b@@74) (|ValueMessage.Message#Equal| a@@125 b@@74)))) :qid |unknown.0:0| :skolemid |1815| :pattern ( (|ValueMessage.Message#Equal| a@@125 b@@74)) )))
(assert (forall ((arg0@@279 T@U) ) (! (= (type (|#UI.RangeStart.SInclusive| arg0@@279)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SInclusive| :pattern ( (|#UI.RangeStart.SInclusive| arg0@@279)) )))
(assert (forall ((|a#12#0#0| T@U) ) (!  (=> (= (type |a#12#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SInclusive| |a#12#0#0|)) |##UI.RangeStart.SInclusive|)) :qid |UIsdfy.10:36| :skolemid |1816| :pattern ( (|#UI.RangeStart.SInclusive| |a#12#0#0|)) )))
(assert (forall ((d@@37 T@U) ) (!  (=> (= (type d@@37) DatatypeTypeType) (and (=> (UI.RangeStart.SInclusive_q d@@37) (= (DatatypeCtorId d@@37) |##UI.RangeStart.SInclusive|)) (=> (= (DatatypeCtorId d@@37) |##UI.RangeStart.SInclusive|) (UI.RangeStart.SInclusive_q d@@37)))) :qid |unknown.0:0| :skolemid |1817| :pattern ( (UI.RangeStart.SInclusive_q d@@37)) )))
(assert (forall ((d@@38 T@U) ) (!  (=> (and (= (type d@@38) DatatypeTypeType) (UI.RangeStart.SInclusive_q d@@38)) (exists ((|a#13#0#0| T@U) ) (!  (and (= (type |a#13#0#0|) (SeqType BoxType)) (= d@@38 (|#UI.RangeStart.SInclusive| |a#13#0#0|))) :qid |UIsdfy.10:36| :skolemid |1818| :no-pattern (type |a#13#0#0|) :no-pattern (U_2_int |a#13#0#0|) :no-pattern (U_2_bool |a#13#0#0|) ))) :qid |unknown.0:0| :skolemid |1819| :pattern ( (UI.RangeStart.SInclusive_q d@@38)) )))
(assert (= (type Tclass.UI.RangeStart) TyType))
(assert (= (Tag Tclass.UI.RangeStart) Tagclass.UI.RangeStart))
(assert (forall ((bx@@105 T@U) ) (!  (=> (and (= (type bx@@105) BoxType) ($IsBox bx@@105 Tclass.UI.RangeStart)) (and (= ($Box ($Unbox DatatypeTypeType bx@@105)) bx@@105) ($Is ($Unbox DatatypeTypeType bx@@105) Tclass.UI.RangeStart))) :qid |unknown.0:0| :skolemid |1820| :pattern ( ($IsBox bx@@105 Tclass.UI.RangeStart)) )))
(assert (forall ((|a#14#0#0@@0| T@U) ) (!  (=> (= (type |a#14#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#14#0#0@@0| Tclass.KeyType.Key)) (=> ($Is |a#14#0#0@@0| Tclass.KeyType.Key) ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart)))) :qid |UIsdfy.10:36| :skolemid |1821| :pattern ( ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#15#0#0@@0| T@U) ($h@@58 T@U) ) (!  (=> (and (and (= (type |a#15#0#0@@0|) (SeqType BoxType)) (= (type $h@@58) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@58)) (and (=> ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@58) ($IsAlloc |a#15#0#0@@0| Tclass.KeyType.Key $h@@58)) (=> ($IsAlloc |a#15#0#0@@0| Tclass.KeyType.Key $h@@58) ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@58)))) :qid |UIsdfy.10:36| :skolemid |1822| :pattern ( ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@58)) )))
(assert (forall ((arg0@@280 T@U) ) (! (= (type (UI.RangeStart.key arg0@@280)) (SeqType BoxType)) :qid |funType:UI.RangeStart.key| :pattern ( (UI.RangeStart.key arg0@@280)) )))
(assert (forall ((d@@39 T@U) ($h@@59 T@U) ) (!  (=> (and (and (= (type d@@39) DatatypeTypeType) (= (type $h@@59) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@59) (and (UI.RangeStart.SInclusive_q d@@39) ($IsAlloc d@@39 Tclass.UI.RangeStart $h@@59)))) ($IsAlloc (UI.RangeStart.key d@@39) Tclass.KeyType.Key $h@@59)) :qid |unknown.0:0| :skolemid |1823| :pattern ( ($IsAlloc (UI.RangeStart.key d@@39) Tclass.KeyType.Key $h@@59)) )))
(assert (forall ((|a#16#0#0@@0| T@U) ) (!  (=> (= (type |a#16#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SInclusive| (Lit |a#16#0#0@@0|)) (Lit (|#UI.RangeStart.SInclusive| |a#16#0#0@@0|)))) :qid |UIsdfy.10:36| :skolemid |1824| :pattern ( (|#UI.RangeStart.SInclusive| (Lit |a#16#0#0@@0|))) )))
(assert (forall ((|a#17#0#0@@0| T@U) ) (!  (=> (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SInclusive| |a#17#0#0@@0|)) |a#17#0#0@@0|)) :qid |UIsdfy.10:36| :skolemid |1825| :pattern ( (|#UI.RangeStart.SInclusive| |a#17#0#0@@0|)) )))
(assert (forall ((arg0@@281 T@U) ) (! (= (type (|#UI.RangeStart.SExclusive| arg0@@281)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SExclusive| :pattern ( (|#UI.RangeStart.SExclusive| arg0@@281)) )))
(assert (forall ((|a#18#0#0@@0| T@U) ) (!  (=> (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SExclusive| |a#18#0#0@@0|)) |##UI.RangeStart.SExclusive|)) :qid |UIsdfy.10:59| :skolemid |1826| :pattern ( (|#UI.RangeStart.SExclusive| |a#18#0#0@@0|)) )))
(assert (forall ((d@@40 T@U) ) (!  (=> (= (type d@@40) DatatypeTypeType) (and (=> (UI.RangeStart.SExclusive_q d@@40) (= (DatatypeCtorId d@@40) |##UI.RangeStart.SExclusive|)) (=> (= (DatatypeCtorId d@@40) |##UI.RangeStart.SExclusive|) (UI.RangeStart.SExclusive_q d@@40)))) :qid |unknown.0:0| :skolemid |1827| :pattern ( (UI.RangeStart.SExclusive_q d@@40)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (and (= (type d@@41) DatatypeTypeType) (UI.RangeStart.SExclusive_q d@@41)) (exists ((|a#19#0#0@@0| T@U) ) (!  (and (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= d@@41 (|#UI.RangeStart.SExclusive| |a#19#0#0@@0|))) :qid |UIsdfy.10:59| :skolemid |1828| :no-pattern (type |a#19#0#0@@0|) :no-pattern (U_2_int |a#19#0#0@@0|) :no-pattern (U_2_bool |a#19#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1829| :pattern ( (UI.RangeStart.SExclusive_q d@@41)) )))
(assert (forall ((|a#20#0#0@@0| T@U) ) (!  (=> (= (type |a#20#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#20#0#0@@0| Tclass.KeyType.Key)) (=> ($Is |a#20#0#0@@0| Tclass.KeyType.Key) ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0@@0|) Tclass.UI.RangeStart)))) :qid |UIsdfy.10:59| :skolemid |1830| :pattern ( ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#21#0#0| T@U) ($h@@60 T@U) ) (!  (=> (and (and (= (type |a#21#0#0|) (SeqType BoxType)) (= (type $h@@60) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@60)) (and (=> ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0|) Tclass.UI.RangeStart $h@@60) ($IsAlloc |a#21#0#0| Tclass.KeyType.Key $h@@60)) (=> ($IsAlloc |a#21#0#0| Tclass.KeyType.Key $h@@60) ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0|) Tclass.UI.RangeStart $h@@60)))) :qid |UIsdfy.10:59| :skolemid |1831| :pattern ( ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0|) Tclass.UI.RangeStart $h@@60)) )))
(assert (forall ((d@@42 T@U) ($h@@61 T@U) ) (!  (=> (and (and (= (type d@@42) DatatypeTypeType) (= (type $h@@61) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@61) (and (UI.RangeStart.SExclusive_q d@@42) ($IsAlloc d@@42 Tclass.UI.RangeStart $h@@61)))) ($IsAlloc (UI.RangeStart.key d@@42) Tclass.KeyType.Key $h@@61)) :qid |unknown.0:0| :skolemid |1832| :pattern ( ($IsAlloc (UI.RangeStart.key d@@42) Tclass.KeyType.Key $h@@61)) )))
(assert (forall ((|a#22#0#0| T@U) ) (!  (=> (= (type |a#22#0#0|) (SeqType BoxType)) (= (|#UI.RangeStart.SExclusive| (Lit |a#22#0#0|)) (Lit (|#UI.RangeStart.SExclusive| |a#22#0#0|)))) :qid |UIsdfy.10:59| :skolemid |1833| :pattern ( (|#UI.RangeStart.SExclusive| (Lit |a#22#0#0|))) )))
(assert (forall ((|a#23#0#0| T@U) ) (!  (=> (= (type |a#23#0#0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SExclusive| |a#23#0#0|)) |a#23#0#0|)) :qid |UIsdfy.10:59| :skolemid |1834| :pattern ( (|#UI.RangeStart.SExclusive| |a#23#0#0|)) )))
(assert (= (type |#UI.RangeStart.NegativeInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeStart.NegativeInf|) |##UI.RangeStart.NegativeInf|))
(assert (forall ((d@@43 T@U) ) (!  (=> (= (type d@@43) DatatypeTypeType) (and (=> (UI.RangeStart.NegativeInf_q d@@43) (= (DatatypeCtorId d@@43) |##UI.RangeStart.NegativeInf|)) (=> (= (DatatypeCtorId d@@43) |##UI.RangeStart.NegativeInf|) (UI.RangeStart.NegativeInf_q d@@43)))) :qid |unknown.0:0| :skolemid |1835| :pattern ( (UI.RangeStart.NegativeInf_q d@@43)) )))
(assert (forall ((d@@44 T@U) ) (!  (=> (and (= (type d@@44) DatatypeTypeType) (UI.RangeStart.NegativeInf_q d@@44)) (= d@@44 |#UI.RangeStart.NegativeInf|)) :qid |unknown.0:0| :skolemid |1836| :pattern ( (UI.RangeStart.NegativeInf_q d@@44)) )))
(assert ($Is |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart))
(assert (forall (($h@@62 T@U) ) (!  (=> (and (= (type $h@@62) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@62)) ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@62)) :qid |DafnyPre.521:12| :skolemid |1837| :pattern ( ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@62)) )))
(assert (= |#UI.RangeStart.NegativeInf| (Lit |#UI.RangeStart.NegativeInf|)))
(assert (forall ((d@@45 T@U) ) (!  (=> (and (= (type d@@45) DatatypeTypeType) (|$IsA#UI.RangeStart| d@@45)) (or (or (UI.RangeStart.SInclusive_q d@@45) (UI.RangeStart.SExclusive_q d@@45)) (UI.RangeStart.NegativeInf_q d@@45))) :qid |unknown.0:0| :skolemid |1838| :pattern ( (|$IsA#UI.RangeStart| d@@45)) )))
(assert (forall ((d@@46 T@U) ) (!  (=> (and (= (type d@@46) DatatypeTypeType) ($Is d@@46 Tclass.UI.RangeStart)) (or (or (UI.RangeStart.SInclusive_q d@@46) (UI.RangeStart.SExclusive_q d@@46)) (UI.RangeStart.NegativeInf_q d@@46))) :qid |unknown.0:0| :skolemid |1839| :pattern ( (UI.RangeStart.NegativeInf_q d@@46) ($Is d@@46 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SExclusive_q d@@46) ($Is d@@46 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SInclusive_q d@@46) ($Is d@@46 Tclass.UI.RangeStart)) )))
(assert (forall ((a@@126 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@126) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (UI.RangeStart.SInclusive_q a@@126) (UI.RangeStart.SInclusive_q b@@75))) (and (=> (|UI.RangeStart#Equal| a@@126 b@@75) (|Seq#Equal| (UI.RangeStart.key a@@126) (UI.RangeStart.key b@@75))) (=> (|Seq#Equal| (UI.RangeStart.key a@@126) (UI.RangeStart.key b@@75)) (|UI.RangeStart#Equal| a@@126 b@@75)))) :qid |unknown.0:0| :skolemid |1840| :pattern ( (|UI.RangeStart#Equal| a@@126 b@@75) (UI.RangeStart.SInclusive_q a@@126)) :pattern ( (|UI.RangeStart#Equal| a@@126 b@@75) (UI.RangeStart.SInclusive_q b@@75)) )))
(assert (forall ((a@@127 T@U) (b@@76 T@U) ) (!  (=> (and (and (= (type a@@127) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (and (UI.RangeStart.SExclusive_q a@@127) (UI.RangeStart.SExclusive_q b@@76))) (and (=> (|UI.RangeStart#Equal| a@@127 b@@76) (|Seq#Equal| (UI.RangeStart.key a@@127) (UI.RangeStart.key b@@76))) (=> (|Seq#Equal| (UI.RangeStart.key a@@127) (UI.RangeStart.key b@@76)) (|UI.RangeStart#Equal| a@@127 b@@76)))) :qid |unknown.0:0| :skolemid |1841| :pattern ( (|UI.RangeStart#Equal| a@@127 b@@76) (UI.RangeStart.SExclusive_q a@@127)) :pattern ( (|UI.RangeStart#Equal| a@@127 b@@76) (UI.RangeStart.SExclusive_q b@@76)) )))
(assert (forall ((a@@128 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@128) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (UI.RangeStart.NegativeInf_q a@@128) (UI.RangeStart.NegativeInf_q b@@77))) (and (=> (|UI.RangeStart#Equal| a@@128 b@@77) true) (=> true (|UI.RangeStart#Equal| a@@128 b@@77)))) :qid |unknown.0:0| :skolemid |1842| :pattern ( (|UI.RangeStart#Equal| a@@128 b@@77) (UI.RangeStart.NegativeInf_q a@@128)) :pattern ( (|UI.RangeStart#Equal| a@@128 b@@77) (UI.RangeStart.NegativeInf_q b@@77)) )))
(assert (forall ((a@@129 T@U) (b@@78 T@U) ) (!  (=> (and (= (type a@@129) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (=> (|UI.RangeStart#Equal| a@@129 b@@78) (= a@@129 b@@78)) (=> (= a@@129 b@@78) (|UI.RangeStart#Equal| a@@129 b@@78)))) :qid |unknown.0:0| :skolemid |1843| :pattern ( (|UI.RangeStart#Equal| a@@129 b@@78)) )))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (|#UI.RangeEnd.EInclusive| arg0@@282)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EInclusive| :pattern ( (|#UI.RangeEnd.EInclusive| arg0@@282)) )))
(assert (forall ((|a#29#0#0| T@U) ) (!  (=> (= (type |a#29#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EInclusive| |a#29#0#0|)) |##UI.RangeEnd.EInclusive|)) :qid |UIsdfy.11:34| :skolemid |1844| :pattern ( (|#UI.RangeEnd.EInclusive| |a#29#0#0|)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (= (type d@@47) DatatypeTypeType) (and (=> (UI.RangeEnd.EInclusive_q d@@47) (= (DatatypeCtorId d@@47) |##UI.RangeEnd.EInclusive|)) (=> (= (DatatypeCtorId d@@47) |##UI.RangeEnd.EInclusive|) (UI.RangeEnd.EInclusive_q d@@47)))) :qid |unknown.0:0| :skolemid |1845| :pattern ( (UI.RangeEnd.EInclusive_q d@@47)) )))
(assert (forall ((d@@48 T@U) ) (!  (=> (and (= (type d@@48) DatatypeTypeType) (UI.RangeEnd.EInclusive_q d@@48)) (exists ((|a#30#0#0| T@U) ) (!  (and (= (type |a#30#0#0|) (SeqType BoxType)) (= d@@48 (|#UI.RangeEnd.EInclusive| |a#30#0#0|))) :qid |UIsdfy.11:34| :skolemid |1846| :no-pattern (type |a#30#0#0|) :no-pattern (U_2_int |a#30#0#0|) :no-pattern (U_2_bool |a#30#0#0|) ))) :qid |unknown.0:0| :skolemid |1847| :pattern ( (UI.RangeEnd.EInclusive_q d@@48)) )))
(assert (= (type Tclass.UI.RangeEnd) TyType))
(assert (= (Tag Tclass.UI.RangeEnd) Tagclass.UI.RangeEnd))
(assert (forall ((bx@@106 T@U) ) (!  (=> (and (= (type bx@@106) BoxType) ($IsBox bx@@106 Tclass.UI.RangeEnd)) (and (= ($Box ($Unbox DatatypeTypeType bx@@106)) bx@@106) ($Is ($Unbox DatatypeTypeType bx@@106) Tclass.UI.RangeEnd))) :qid |unknown.0:0| :skolemid |1848| :pattern ( ($IsBox bx@@106 Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#31#0#0| T@U) ) (!  (=> (= (type |a#31#0#0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0|) Tclass.UI.RangeEnd) ($Is |a#31#0#0| Tclass.KeyType.Key)) (=> ($Is |a#31#0#0| Tclass.KeyType.Key) ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0|) Tclass.UI.RangeEnd)))) :qid |UIsdfy.11:34| :skolemid |1849| :pattern ( ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#32#0#0| T@U) ($h@@63 T@U) ) (!  (=> (and (and (= (type |a#32#0#0|) (SeqType BoxType)) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@63)) (and (=> ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0|) Tclass.UI.RangeEnd $h@@63) ($IsAlloc |a#32#0#0| Tclass.KeyType.Key $h@@63)) (=> ($IsAlloc |a#32#0#0| Tclass.KeyType.Key $h@@63) ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0|) Tclass.UI.RangeEnd $h@@63)))) :qid |UIsdfy.11:34| :skolemid |1850| :pattern ( ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0|) Tclass.UI.RangeEnd $h@@63)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (UI.RangeEnd.key arg0@@283)) (SeqType BoxType)) :qid |funType:UI.RangeEnd.key| :pattern ( (UI.RangeEnd.key arg0@@283)) )))
(assert (forall ((d@@49 T@U) ($h@@64 T@U) ) (!  (=> (and (and (= (type d@@49) DatatypeTypeType) (= (type $h@@64) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@64) (and (UI.RangeEnd.EInclusive_q d@@49) ($IsAlloc d@@49 Tclass.UI.RangeEnd $h@@64)))) ($IsAlloc (UI.RangeEnd.key d@@49) Tclass.KeyType.Key $h@@64)) :qid |unknown.0:0| :skolemid |1851| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@49) Tclass.KeyType.Key $h@@64)) )))
(assert (forall ((|a#33#0#0| T@U) ) (!  (=> (= (type |a#33#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EInclusive| (Lit |a#33#0#0|)) (Lit (|#UI.RangeEnd.EInclusive| |a#33#0#0|)))) :qid |UIsdfy.11:34| :skolemid |1852| :pattern ( (|#UI.RangeEnd.EInclusive| (Lit |a#33#0#0|))) )))
(assert (forall ((|a#34#0#0| T@U) ) (!  (=> (= (type |a#34#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EInclusive| |a#34#0#0|)) |a#34#0#0|)) :qid |UIsdfy.11:34| :skolemid |1853| :pattern ( (|#UI.RangeEnd.EInclusive| |a#34#0#0|)) )))
(assert (forall ((arg0@@284 T@U) ) (! (= (type (|#UI.RangeEnd.EExclusive| arg0@@284)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EExclusive| :pattern ( (|#UI.RangeEnd.EExclusive| arg0@@284)) )))
(assert (forall ((|a#35#0#0| T@U) ) (!  (=> (= (type |a#35#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EExclusive| |a#35#0#0|)) |##UI.RangeEnd.EExclusive|)) :qid |UIsdfy.11:57| :skolemid |1854| :pattern ( (|#UI.RangeEnd.EExclusive| |a#35#0#0|)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (= (type d@@50) DatatypeTypeType) (and (=> (UI.RangeEnd.EExclusive_q d@@50) (= (DatatypeCtorId d@@50) |##UI.RangeEnd.EExclusive|)) (=> (= (DatatypeCtorId d@@50) |##UI.RangeEnd.EExclusive|) (UI.RangeEnd.EExclusive_q d@@50)))) :qid |unknown.0:0| :skolemid |1855| :pattern ( (UI.RangeEnd.EExclusive_q d@@50)) )))
(assert (forall ((d@@51 T@U) ) (!  (=> (and (= (type d@@51) DatatypeTypeType) (UI.RangeEnd.EExclusive_q d@@51)) (exists ((|a#36#0#0| T@U) ) (!  (and (= (type |a#36#0#0|) (SeqType BoxType)) (= d@@51 (|#UI.RangeEnd.EExclusive| |a#36#0#0|))) :qid |UIsdfy.11:57| :skolemid |1856| :no-pattern (type |a#36#0#0|) :no-pattern (U_2_int |a#36#0#0|) :no-pattern (U_2_bool |a#36#0#0|) ))) :qid |unknown.0:0| :skolemid |1857| :pattern ( (UI.RangeEnd.EExclusive_q d@@51)) )))
(assert (forall ((|a#37#0#0| T@U) ) (!  (=> (= (type |a#37#0#0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd) ($Is |a#37#0#0| Tclass.KeyType.Key)) (=> ($Is |a#37#0#0| Tclass.KeyType.Key) ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd)))) :qid |UIsdfy.11:57| :skolemid |1858| :pattern ( ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#38#0#0| T@U) ($h@@65 T@U) ) (!  (=> (and (and (= (type |a#38#0#0|) (SeqType BoxType)) (= (type $h@@65) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@65)) (and (=> ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@65) ($IsAlloc |a#38#0#0| Tclass.KeyType.Key $h@@65)) (=> ($IsAlloc |a#38#0#0| Tclass.KeyType.Key $h@@65) ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@65)))) :qid |UIsdfy.11:57| :skolemid |1859| :pattern ( ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@65)) )))
(assert (forall ((d@@52 T@U) ($h@@66 T@U) ) (!  (=> (and (and (= (type d@@52) DatatypeTypeType) (= (type $h@@66) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@66) (and (UI.RangeEnd.EExclusive_q d@@52) ($IsAlloc d@@52 Tclass.UI.RangeEnd $h@@66)))) ($IsAlloc (UI.RangeEnd.key d@@52) Tclass.KeyType.Key $h@@66)) :qid |unknown.0:0| :skolemid |1860| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@52) Tclass.KeyType.Key $h@@66)) )))
(assert (forall ((|a#39#0#0| T@U) ) (!  (=> (= (type |a#39#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EExclusive| (Lit |a#39#0#0|)) (Lit (|#UI.RangeEnd.EExclusive| |a#39#0#0|)))) :qid |UIsdfy.11:57| :skolemid |1861| :pattern ( (|#UI.RangeEnd.EExclusive| (Lit |a#39#0#0|))) )))
(assert (forall ((|a#40#0#0| T@U) ) (!  (=> (= (type |a#40#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EExclusive| |a#40#0#0|)) |a#40#0#0|)) :qid |UIsdfy.11:57| :skolemid |1862| :pattern ( (|#UI.RangeEnd.EExclusive| |a#40#0#0|)) )))
(assert (= (type |#UI.RangeEnd.PositiveInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeEnd.PositiveInf|) |##UI.RangeEnd.PositiveInf|))
(assert (forall ((d@@53 T@U) ) (!  (=> (= (type d@@53) DatatypeTypeType) (and (=> (UI.RangeEnd.PositiveInf_q d@@53) (= (DatatypeCtorId d@@53) |##UI.RangeEnd.PositiveInf|)) (=> (= (DatatypeCtorId d@@53) |##UI.RangeEnd.PositiveInf|) (UI.RangeEnd.PositiveInf_q d@@53)))) :qid |unknown.0:0| :skolemid |1863| :pattern ( (UI.RangeEnd.PositiveInf_q d@@53)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (and (= (type d@@54) DatatypeTypeType) (UI.RangeEnd.PositiveInf_q d@@54)) (= d@@54 |#UI.RangeEnd.PositiveInf|)) :qid |unknown.0:0| :skolemid |1864| :pattern ( (UI.RangeEnd.PositiveInf_q d@@54)) )))
(assert ($Is |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd))
(assert (forall (($h@@67 T@U) ) (!  (=> (and (= (type $h@@67) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@67)) ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@67)) :qid |DafnyPre.521:12| :skolemid |1865| :pattern ( ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@67)) )))
(assert (= |#UI.RangeEnd.PositiveInf| (Lit |#UI.RangeEnd.PositiveInf|)))
(assert (forall ((d@@55 T@U) ) (!  (=> (and (= (type d@@55) DatatypeTypeType) (|$IsA#UI.RangeEnd| d@@55)) (or (or (UI.RangeEnd.EInclusive_q d@@55) (UI.RangeEnd.EExclusive_q d@@55)) (UI.RangeEnd.PositiveInf_q d@@55))) :qid |unknown.0:0| :skolemid |1866| :pattern ( (|$IsA#UI.RangeEnd| d@@55)) )))
(assert (forall ((d@@56 T@U) ) (!  (=> (and (= (type d@@56) DatatypeTypeType) ($Is d@@56 Tclass.UI.RangeEnd)) (or (or (UI.RangeEnd.EInclusive_q d@@56) (UI.RangeEnd.EExclusive_q d@@56)) (UI.RangeEnd.PositiveInf_q d@@56))) :qid |unknown.0:0| :skolemid |1867| :pattern ( (UI.RangeEnd.PositiveInf_q d@@56) ($Is d@@56 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EExclusive_q d@@56) ($Is d@@56 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EInclusive_q d@@56) ($Is d@@56 Tclass.UI.RangeEnd)) )))
(assert (forall ((a@@130 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@130) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (UI.RangeEnd.EInclusive_q a@@130) (UI.RangeEnd.EInclusive_q b@@79))) (and (=> (|UI.RangeEnd#Equal| a@@130 b@@79) (|Seq#Equal| (UI.RangeEnd.key a@@130) (UI.RangeEnd.key b@@79))) (=> (|Seq#Equal| (UI.RangeEnd.key a@@130) (UI.RangeEnd.key b@@79)) (|UI.RangeEnd#Equal| a@@130 b@@79)))) :qid |unknown.0:0| :skolemid |1868| :pattern ( (|UI.RangeEnd#Equal| a@@130 b@@79) (UI.RangeEnd.EInclusive_q a@@130)) :pattern ( (|UI.RangeEnd#Equal| a@@130 b@@79) (UI.RangeEnd.EInclusive_q b@@79)) )))
(assert (forall ((a@@131 T@U) (b@@80 T@U) ) (!  (=> (and (and (= (type a@@131) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (and (UI.RangeEnd.EExclusive_q a@@131) (UI.RangeEnd.EExclusive_q b@@80))) (and (=> (|UI.RangeEnd#Equal| a@@131 b@@80) (|Seq#Equal| (UI.RangeEnd.key a@@131) (UI.RangeEnd.key b@@80))) (=> (|Seq#Equal| (UI.RangeEnd.key a@@131) (UI.RangeEnd.key b@@80)) (|UI.RangeEnd#Equal| a@@131 b@@80)))) :qid |unknown.0:0| :skolemid |1869| :pattern ( (|UI.RangeEnd#Equal| a@@131 b@@80) (UI.RangeEnd.EExclusive_q a@@131)) :pattern ( (|UI.RangeEnd#Equal| a@@131 b@@80) (UI.RangeEnd.EExclusive_q b@@80)) )))
(assert (forall ((a@@132 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (and (UI.RangeEnd.PositiveInf_q a@@132) (UI.RangeEnd.PositiveInf_q b@@81))) (and (=> (|UI.RangeEnd#Equal| a@@132 b@@81) true) (=> true (|UI.RangeEnd#Equal| a@@132 b@@81)))) :qid |unknown.0:0| :skolemid |1870| :pattern ( (|UI.RangeEnd#Equal| a@@132 b@@81) (UI.RangeEnd.PositiveInf_q a@@132)) :pattern ( (|UI.RangeEnd#Equal| a@@132 b@@81) (UI.RangeEnd.PositiveInf_q b@@81)) )))
(assert (forall ((a@@133 T@U) (b@@82 T@U) ) (!  (=> (and (= (type a@@133) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (=> (|UI.RangeEnd#Equal| a@@133 b@@82) (= a@@133 b@@82)) (=> (= a@@133 b@@82) (|UI.RangeEnd#Equal| a@@133 b@@82)))) :qid |unknown.0:0| :skolemid |1871| :pattern ( (|UI.RangeEnd#Equal| a@@133 b@@82)) )))
(assert (forall ((arg0@@285 T@U) (arg1@@155 T@U) ) (! (= (type (|#UI.SuccResult.SuccResult| arg0@@285 arg1@@155)) DatatypeTypeType) :qid |funType:#UI.SuccResult.SuccResult| :pattern ( (|#UI.SuccResult.SuccResult| arg0@@285 arg1@@155)) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) ) (!  (=> (and (= (type |a#46#0#0|) (SeqType BoxType)) (= (type |a#46#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.SuccResult.SuccResult| |a#46#0#0| |a#46#1#0|)) |##UI.SuccResult.SuccResult|)) :qid |UIsdfy.13:36| :skolemid |1872| :pattern ( (|#UI.SuccResult.SuccResult| |a#46#0#0| |a#46#1#0|)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (= (type d@@57) DatatypeTypeType) (and (=> (UI.SuccResult.SuccResult_q d@@57) (= (DatatypeCtorId d@@57) |##UI.SuccResult.SuccResult|)) (=> (= (DatatypeCtorId d@@57) |##UI.SuccResult.SuccResult|) (UI.SuccResult.SuccResult_q d@@57)))) :qid |unknown.0:0| :skolemid |1873| :pattern ( (UI.SuccResult.SuccResult_q d@@57)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (and (= (type d@@58) DatatypeTypeType) (UI.SuccResult.SuccResult_q d@@58)) (exists ((|a#47#0#0| T@U) (|a#47#1#0| T@U) ) (!  (and (and (= (type |a#47#0#0|) (SeqType BoxType)) (= (type |a#47#1#0|) (SeqType BoxType))) (= d@@58 (|#UI.SuccResult.SuccResult| |a#47#0#0| |a#47#1#0|))) :qid |UIsdfy.13:36| :skolemid |1874| :no-pattern (type |a#47#0#0|) :no-pattern (type |a#47#1#0|) :no-pattern (U_2_int |a#47#0#0|) :no-pattern (U_2_bool |a#47#0#0|) :no-pattern (U_2_int |a#47#1#0|) :no-pattern (U_2_bool |a#47#1#0|) ))) :qid |unknown.0:0| :skolemid |1875| :pattern ( (UI.SuccResult.SuccResult_q d@@58)) )))
(assert (= (type Tclass.UI.SuccResult) TyType))
(assert (= (Tag Tclass.UI.SuccResult) Tagclass.UI.SuccResult))
(assert (forall ((bx@@107 T@U) ) (!  (=> (and (= (type bx@@107) BoxType) ($IsBox bx@@107 Tclass.UI.SuccResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@107)) bx@@107) ($Is ($Unbox DatatypeTypeType bx@@107) Tclass.UI.SuccResult))) :qid |unknown.0:0| :skolemid |1876| :pattern ( ($IsBox bx@@107 Tclass.UI.SuccResult)) )))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (!  (=> (and (= (type |a#48#0#0|) (SeqType BoxType)) (= (type |a#48#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult) (and ($Is |a#48#0#0| Tclass.KeyType.Key) ($Is |a#48#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#48#0#0| Tclass.KeyType.Key) ($Is |a#48#1#0| Tclass.ValueType.Value)) ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult)))) :qid |UIsdfy.13:36| :skolemid |1877| :pattern ( ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ($h@@68 T@U) ) (!  (=> (and (and (and (= (type |a#49#0#0|) (SeqType BoxType)) (= (type |a#49#1#0|) (SeqType BoxType))) (= (type $h@@68) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@68)) (and (=> ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@68) (and ($IsAlloc |a#49#0#0| Tclass.KeyType.Key $h@@68) ($IsAlloc |a#49#1#0| Tclass.ValueType.Value $h@@68))) (=> (and ($IsAlloc |a#49#0#0| Tclass.KeyType.Key $h@@68) ($IsAlloc |a#49#1#0| Tclass.ValueType.Value $h@@68)) ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@68)))) :qid |UIsdfy.13:36| :skolemid |1878| :pattern ( ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@68)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (UI.SuccResult.key arg0@@286)) (SeqType BoxType)) :qid |funType:UI.SuccResult.key| :pattern ( (UI.SuccResult.key arg0@@286)) )))
(assert (forall ((d@@59 T@U) ($h@@69 T@U) ) (!  (=> (and (and (= (type d@@59) DatatypeTypeType) (= (type $h@@69) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@69) (and (UI.SuccResult.SuccResult_q d@@59) ($IsAlloc d@@59 Tclass.UI.SuccResult $h@@69)))) ($IsAlloc (UI.SuccResult.key d@@59) Tclass.KeyType.Key $h@@69)) :qid |unknown.0:0| :skolemid |1879| :pattern ( ($IsAlloc (UI.SuccResult.key d@@59) Tclass.KeyType.Key $h@@69)) )))
(assert (forall ((arg0@@287 T@U) ) (! (= (type (UI.SuccResult.value arg0@@287)) (SeqType BoxType)) :qid |funType:UI.SuccResult.value| :pattern ( (UI.SuccResult.value arg0@@287)) )))
(assert (forall ((d@@60 T@U) ($h@@70 T@U) ) (!  (=> (and (and (= (type d@@60) DatatypeTypeType) (= (type $h@@70) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@70) (and (UI.SuccResult.SuccResult_q d@@60) ($IsAlloc d@@60 Tclass.UI.SuccResult $h@@70)))) ($IsAlloc (UI.SuccResult.value d@@60) Tclass.ValueType.Value $h@@70)) :qid |unknown.0:0| :skolemid |1880| :pattern ( ($IsAlloc (UI.SuccResult.value d@@60) Tclass.ValueType.Value $h@@70)) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (!  (=> (and (= (type |a#50#0#0|) (SeqType BoxType)) (= (type |a#50#1#0|) (SeqType BoxType))) (= (|#UI.SuccResult.SuccResult| (Lit |a#50#0#0|) (Lit |a#50#1#0|)) (Lit (|#UI.SuccResult.SuccResult| |a#50#0#0| |a#50#1#0|)))) :qid |UIsdfy.13:36| :skolemid |1881| :pattern ( (|#UI.SuccResult.SuccResult| (Lit |a#50#0#0|) (Lit |a#50#1#0|))) )))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) ) (!  (=> (and (= (type |a#51#0#0|) (SeqType BoxType)) (= (type |a#51#1#0|) (SeqType BoxType))) (= (UI.SuccResult.key (|#UI.SuccResult.SuccResult| |a#51#0#0| |a#51#1#0|)) |a#51#0#0|)) :qid |UIsdfy.13:36| :skolemid |1882| :pattern ( (|#UI.SuccResult.SuccResult| |a#51#0#0| |a#51#1#0|)) )))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) ) (!  (=> (and (= (type |a#52#0#0|) (SeqType BoxType)) (= (type |a#52#1#0|) (SeqType BoxType))) (= (UI.SuccResult.value (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) |a#52#1#0|)) :qid |UIsdfy.13:36| :skolemid |1883| :pattern ( (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) )))
(assert (forall ((d@@61 T@U) ) (!  (=> (and (= (type d@@61) DatatypeTypeType) (|$IsA#UI.SuccResult| d@@61)) (UI.SuccResult.SuccResult_q d@@61)) :qid |unknown.0:0| :skolemid |1884| :pattern ( (|$IsA#UI.SuccResult| d@@61)) )))
(assert (forall ((d@@62 T@U) ) (!  (=> (and (= (type d@@62) DatatypeTypeType) ($Is d@@62 Tclass.UI.SuccResult)) (UI.SuccResult.SuccResult_q d@@62)) :qid |unknown.0:0| :skolemid |1885| :pattern ( (UI.SuccResult.SuccResult_q d@@62) ($Is d@@62 Tclass.UI.SuccResult)) )))
(assert (forall ((a@@134 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) true) (and (=> (|UI.SuccResult#Equal| a@@134 b@@83) (and (|Seq#Equal| (UI.SuccResult.key a@@134) (UI.SuccResult.key b@@83)) (|Seq#Equal| (UI.SuccResult.value a@@134) (UI.SuccResult.value b@@83)))) (=> (and (|Seq#Equal| (UI.SuccResult.key a@@134) (UI.SuccResult.key b@@83)) (|Seq#Equal| (UI.SuccResult.value a@@134) (UI.SuccResult.value b@@83))) (|UI.SuccResult#Equal| a@@134 b@@83)))) :qid |unknown.0:0| :skolemid |1886| :pattern ( (|UI.SuccResult#Equal| a@@134 b@@83)) )))
(assert (forall ((a@@135 T@U) (b@@84 T@U) ) (!  (=> (and (= (type a@@135) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (and (=> (|UI.SuccResult#Equal| a@@135 b@@84) (= a@@135 b@@84)) (=> (= a@@135 b@@84) (|UI.SuccResult#Equal| a@@135 b@@84)))) :qid |unknown.0:0| :skolemid |1887| :pattern ( (|UI.SuccResult#Equal| a@@135 b@@84)) )))
(assert (forall ((arg0@@288 T@U) (arg1@@156 T@U) ) (! (= (type (|#UI.SuccResultList.SuccResultList| arg0@@288 arg1@@156)) DatatypeTypeType) :qid |funType:#UI.SuccResultList.SuccResultList| :pattern ( (|#UI.SuccResultList.SuccResultList| arg0@@288 arg1@@156)) )))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) ) (!  (=> (and (= (type |a#53#0#0|) (SeqType BoxType)) (= (type |a#53#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.SuccResultList.SuccResultList| |a#53#0#0| |a#53#1#0|)) |##UI.SuccResultList.SuccResultList|)) :qid |UIsdfy.14:44| :skolemid |1888| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#53#0#0| |a#53#1#0|)) )))
(assert (forall ((d@@63 T@U) ) (!  (=> (= (type d@@63) DatatypeTypeType) (and (=> (UI.SuccResultList.SuccResultList_q d@@63) (= (DatatypeCtorId d@@63) |##UI.SuccResultList.SuccResultList|)) (=> (= (DatatypeCtorId d@@63) |##UI.SuccResultList.SuccResultList|) (UI.SuccResultList.SuccResultList_q d@@63)))) :qid |unknown.0:0| :skolemid |1889| :pattern ( (UI.SuccResultList.SuccResultList_q d@@63)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (and (= (type d@@64) DatatypeTypeType) (UI.SuccResultList.SuccResultList_q d@@64)) (exists ((|a#54#0#0| T@U) (|a#54#1#0| T@U) ) (!  (and (and (= (type |a#54#0#0|) (SeqType BoxType)) (= (type |a#54#1#0|) DatatypeTypeType)) (= d@@64 (|#UI.SuccResultList.SuccResultList| |a#54#0#0| |a#54#1#0|))) :qid |UIsdfy.14:44| :skolemid |1890| :no-pattern (type |a#54#0#0|) :no-pattern (type |a#54#1#0|) :no-pattern (U_2_int |a#54#0#0|) :no-pattern (U_2_bool |a#54#0#0|) :no-pattern (U_2_int |a#54#1#0|) :no-pattern (U_2_bool |a#54#1#0|) ))) :qid |unknown.0:0| :skolemid |1891| :pattern ( (UI.SuccResultList.SuccResultList_q d@@64)) )))
(assert (= (type Tclass.UI.SuccResultList) TyType))
(assert (= (Tag Tclass.UI.SuccResultList) Tagclass.UI.SuccResultList))
(assert (forall ((bx@@108 T@U) ) (!  (=> (and (= (type bx@@108) BoxType) ($IsBox bx@@108 Tclass.UI.SuccResultList)) (and (= ($Box ($Unbox DatatypeTypeType bx@@108)) bx@@108) ($Is ($Unbox DatatypeTypeType bx@@108) Tclass.UI.SuccResultList))) :qid |unknown.0:0| :skolemid |1892| :pattern ( ($IsBox bx@@108 Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#55#0#0| T@U) (|a#55#1#0| T@U) ) (!  (=> (and (= (type |a#55#0#0|) (SeqType BoxType)) (= (type |a#55#1#0|) DatatypeTypeType)) (and (=> ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList) (and ($Is |a#55#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#55#1#0| Tclass.UI.RangeEnd))) (=> (and ($Is |a#55#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#55#1#0| Tclass.UI.RangeEnd)) ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList)))) :qid |UIsdfy.14:44| :skolemid |1893| :pattern ( ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#56#0#0| T@U) (|a#56#1#0| T@U) ($h@@71 T@U) ) (!  (=> (and (and (and (= (type |a#56#0#0|) (SeqType BoxType)) (= (type |a#56#1#0|) DatatypeTypeType)) (= (type $h@@71) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@71)) (and (=> ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@71) (and ($IsAlloc |a#56#0#0| (TSeq Tclass.UI.SuccResult) $h@@71) ($IsAlloc |a#56#1#0| Tclass.UI.RangeEnd $h@@71))) (=> (and ($IsAlloc |a#56#0#0| (TSeq Tclass.UI.SuccResult) $h@@71) ($IsAlloc |a#56#1#0| Tclass.UI.RangeEnd $h@@71)) ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@71)))) :qid |UIsdfy.14:44| :skolemid |1894| :pattern ( ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@71)) )))
(assert (forall ((arg0@@289 T@U) ) (! (= (type (UI.SuccResultList.results arg0@@289)) (SeqType BoxType)) :qid |funType:UI.SuccResultList.results| :pattern ( (UI.SuccResultList.results arg0@@289)) )))
(assert (forall ((d@@65 T@U) ($h@@72 T@U) ) (!  (=> (and (and (= (type d@@65) DatatypeTypeType) (= (type $h@@72) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@72) (and (UI.SuccResultList.SuccResultList_q d@@65) ($IsAlloc d@@65 Tclass.UI.SuccResultList $h@@72)))) ($IsAlloc (UI.SuccResultList.results d@@65) (TSeq Tclass.UI.SuccResult) $h@@72)) :qid |unknown.0:0| :skolemid |1895| :pattern ( ($IsAlloc (UI.SuccResultList.results d@@65) (TSeq Tclass.UI.SuccResult) $h@@72)) )))
(assert (forall ((arg0@@290 T@U) ) (! (= (type (UI.SuccResultList.end arg0@@290)) DatatypeTypeType) :qid |funType:UI.SuccResultList.end| :pattern ( (UI.SuccResultList.end arg0@@290)) )))
(assert (forall ((d@@66 T@U) ($h@@73 T@U) ) (!  (=> (and (and (= (type d@@66) DatatypeTypeType) (= (type $h@@73) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@73) (and (UI.SuccResultList.SuccResultList_q d@@66) ($IsAlloc d@@66 Tclass.UI.SuccResultList $h@@73)))) ($IsAlloc (UI.SuccResultList.end d@@66) Tclass.UI.RangeEnd $h@@73)) :qid |unknown.0:0| :skolemid |1896| :pattern ( ($IsAlloc (UI.SuccResultList.end d@@66) Tclass.UI.RangeEnd $h@@73)) )))
(assert (forall ((|a#57#0#0| T@U) (|a#57#1#0| T@U) ) (!  (=> (and (= (type |a#57#0#0|) (SeqType BoxType)) (= (type |a#57#1#0|) DatatypeTypeType)) (= (|#UI.SuccResultList.SuccResultList| (Lit |a#57#0#0|) (Lit |a#57#1#0|)) (Lit (|#UI.SuccResultList.SuccResultList| |a#57#0#0| |a#57#1#0|)))) :qid |UIsdfy.14:44| :skolemid |1897| :pattern ( (|#UI.SuccResultList.SuccResultList| (Lit |a#57#0#0|) (Lit |a#57#1#0|))) )))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) ) (!  (=> (and (= (type |a#58#0#0|) (SeqType BoxType)) (= (type |a#58#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.results (|#UI.SuccResultList.SuccResultList| |a#58#0#0| |a#58#1#0|)) |a#58#0#0|)) :qid |UIsdfy.14:44| :skolemid |1898| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#58#0#0| |a#58#1#0|)) )))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) (i@@31 Int) ) (!  (=> (and (and (= (type |a#59#0#0|) (SeqType BoxType)) (= (type |a#59#1#0|) DatatypeTypeType)) (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#59#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#59#0#0| i@@31))) (DtRank (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)))) :qid |UIsdfy.14:44| :skolemid |1899| :pattern ( (|Seq#Index| |a#59#0#0| i@@31) (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)) )))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) ) (!  (=> (and (= (type |a#60#0#0|) (SeqType BoxType)) (= (type |a#60#1#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#60#0#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)))) :qid |UIsdfy.14:44| :skolemid |1900| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)) )))
(assert (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) ) (!  (=> (and (= (type |a#61#0#0|) (SeqType BoxType)) (= (type |a#61#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.end (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)) |a#61#1#0|)) :qid |UIsdfy.14:44| :skolemid |1901| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)) )))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) ) (!  (=> (and (= (type |a#62#0#0|) (SeqType BoxType)) (= (type |a#62#1#0|) DatatypeTypeType)) (< (DtRank |a#62#1#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)))) :qid |UIsdfy.14:44| :skolemid |1902| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)) )))
(assert (forall ((d@@67 T@U) ) (!  (=> (and (= (type d@@67) DatatypeTypeType) (|$IsA#UI.SuccResultList| d@@67)) (UI.SuccResultList.SuccResultList_q d@@67)) :qid |unknown.0:0| :skolemid |1903| :pattern ( (|$IsA#UI.SuccResultList| d@@67)) )))
(assert (forall ((d@@68 T@U) ) (!  (=> (and (= (type d@@68) DatatypeTypeType) ($Is d@@68 Tclass.UI.SuccResultList)) (UI.SuccResultList.SuccResultList_q d@@68)) :qid |unknown.0:0| :skolemid |1904| :pattern ( (UI.SuccResultList.SuccResultList_q d@@68) ($Is d@@68 Tclass.UI.SuccResultList)) )))
(assert (forall ((a@@136 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) true) (and (=> (|UI.SuccResultList#Equal| a@@136 b@@85) (and (|Seq#Equal| (UI.SuccResultList.results a@@136) (UI.SuccResultList.results b@@85)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@136) (UI.SuccResultList.end b@@85)))) (=> (and (|Seq#Equal| (UI.SuccResultList.results a@@136) (UI.SuccResultList.results b@@85)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@136) (UI.SuccResultList.end b@@85))) (|UI.SuccResultList#Equal| a@@136 b@@85)))) :qid |unknown.0:0| :skolemid |1905| :pattern ( (|UI.SuccResultList#Equal| a@@136 b@@85)) )))
(assert (forall ((a@@137 T@U) (b@@86 T@U) ) (!  (=> (and (= (type a@@137) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (=> (|UI.SuccResultList#Equal| a@@137 b@@86) (= a@@137 b@@86)) (=> (= a@@137 b@@86) (|UI.SuccResultList#Equal| a@@137 b@@86)))) :qid |unknown.0:0| :skolemid |1906| :pattern ( (|UI.SuccResultList#Equal| a@@137 b@@86)) )))
(assert (= (type |#UI.Op.NoOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.NoOp|) |##UI.Op.NoOp|))
(assert (forall ((d@@69 T@U) ) (!  (=> (= (type d@@69) DatatypeTypeType) (and (=> (UI.Op.NoOp_q d@@69) (= (DatatypeCtorId d@@69) |##UI.Op.NoOp|)) (=> (= (DatatypeCtorId d@@69) |##UI.Op.NoOp|) (UI.Op.NoOp_q d@@69)))) :qid |unknown.0:0| :skolemid |1907| :pattern ( (UI.Op.NoOp_q d@@69)) )))
(assert (forall ((d@@70 T@U) ) (!  (=> (and (= (type d@@70) DatatypeTypeType) (UI.Op.NoOp_q d@@70)) (= d@@70 |#UI.Op.NoOp|)) :qid |unknown.0:0| :skolemid |1908| :pattern ( (UI.Op.NoOp_q d@@70)) )))
(assert (= (type Tclass.UI.Op) TyType))
(assert (= (Tag Tclass.UI.Op) Tagclass.UI.Op))
(assert (forall ((bx@@109 T@U) ) (!  (=> (and (= (type bx@@109) BoxType) ($IsBox bx@@109 Tclass.UI.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@109)) bx@@109) ($Is ($Unbox DatatypeTypeType bx@@109) Tclass.UI.Op))) :qid |unknown.0:0| :skolemid |1909| :pattern ( ($IsBox bx@@109 Tclass.UI.Op)) )))
(assert ($Is |#UI.Op.NoOp| Tclass.UI.Op))
(assert (forall (($h@@74 T@U) ) (!  (=> (and (= (type $h@@74) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@74)) ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@74)) :qid |DafnyPre.521:12| :skolemid |1910| :pattern ( ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@74)) )))
(assert (= |#UI.Op.NoOp| (Lit |#UI.Op.NoOp|)))
(assert (= (type |#UI.Op.SyncOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.SyncOp|) |##UI.Op.SyncOp|))
(assert (forall ((d@@71 T@U) ) (!  (=> (= (type d@@71) DatatypeTypeType) (and (=> (UI.Op.SyncOp_q d@@71) (= (DatatypeCtorId d@@71) |##UI.Op.SyncOp|)) (=> (= (DatatypeCtorId d@@71) |##UI.Op.SyncOp|) (UI.Op.SyncOp_q d@@71)))) :qid |unknown.0:0| :skolemid |1911| :pattern ( (UI.Op.SyncOp_q d@@71)) )))
(assert (forall ((d@@72 T@U) ) (!  (=> (and (= (type d@@72) DatatypeTypeType) (UI.Op.SyncOp_q d@@72)) (= d@@72 |#UI.Op.SyncOp|)) :qid |unknown.0:0| :skolemid |1912| :pattern ( (UI.Op.SyncOp_q d@@72)) )))
(assert ($Is |#UI.Op.SyncOp| Tclass.UI.Op))
(assert (forall (($h@@75 T@U) ) (!  (=> (and (= (type $h@@75) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@75)) ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@75)) :qid |DafnyPre.521:12| :skolemid |1913| :pattern ( ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@75)) )))
(assert (= |#UI.Op.SyncOp| (Lit |#UI.Op.SyncOp|)))
(assert (= (type |#UI.Op.CrashOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.CrashOp|) |##UI.Op.CrashOp|))
(assert (forall ((d@@73 T@U) ) (!  (=> (= (type d@@73) DatatypeTypeType) (and (=> (UI.Op.CrashOp_q d@@73) (= (DatatypeCtorId d@@73) |##UI.Op.CrashOp|)) (=> (= (DatatypeCtorId d@@73) |##UI.Op.CrashOp|) (UI.Op.CrashOp_q d@@73)))) :qid |unknown.0:0| :skolemid |1914| :pattern ( (UI.Op.CrashOp_q d@@73)) )))
(assert (forall ((d@@74 T@U) ) (!  (=> (and (= (type d@@74) DatatypeTypeType) (UI.Op.CrashOp_q d@@74)) (= d@@74 |#UI.Op.CrashOp|)) :qid |unknown.0:0| :skolemid |1915| :pattern ( (UI.Op.CrashOp_q d@@74)) )))
(assert ($Is |#UI.Op.CrashOp| Tclass.UI.Op))
(assert (forall (($h@@76 T@U) ) (!  (=> (and (= (type $h@@76) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@76)) ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@76)) :qid |DafnyPre.521:12| :skolemid |1916| :pattern ( ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@76)) )))
(assert (= |#UI.Op.CrashOp| (Lit |#UI.Op.CrashOp|)))
(assert (forall ((arg0@@291 Int) ) (! (= (type (|#UI.Op.PushSyncOp| arg0@@291)) DatatypeTypeType) :qid |funType:#UI.Op.PushSyncOp| :pattern ( (|#UI.Op.PushSyncOp| arg0@@291)) )))
(assert (forall ((|a#78#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PushSyncOp| |a#78#0#0|)) |##UI.Op.PushSyncOp|) :qid |UIsdfy.20:24| :skolemid |1917| :pattern ( (|#UI.Op.PushSyncOp| |a#78#0#0|)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (= (type d@@75) DatatypeTypeType) (and (=> (UI.Op.PushSyncOp_q d@@75) (= (DatatypeCtorId d@@75) |##UI.Op.PushSyncOp|)) (=> (= (DatatypeCtorId d@@75) |##UI.Op.PushSyncOp|) (UI.Op.PushSyncOp_q d@@75)))) :qid |unknown.0:0| :skolemid |1918| :pattern ( (UI.Op.PushSyncOp_q d@@75)) )))
(assert (forall ((d@@76 T@U) ) (!  (=> (and (= (type d@@76) DatatypeTypeType) (UI.Op.PushSyncOp_q d@@76)) (exists ((|a#79#0#0| Int) ) (! (= d@@76 (|#UI.Op.PushSyncOp| |a#79#0#0|)) :qid |UIsdfy.20:24| :skolemid |1919| ))) :qid |unknown.0:0| :skolemid |1920| :pattern ( (UI.Op.PushSyncOp_q d@@76)) )))
(assert (forall ((|a#80#0#0| Int) ) (!  (and (=> ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#80#0#0|) TInt)) (=> ($Is (int_2_U |a#80#0#0|) TInt) ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op))) :qid |UIsdfy.20:24| :skolemid |1921| :pattern ( ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#81#0#0| Int) ($h@@77 T@U) ) (!  (=> (and (= (type $h@@77) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@77)) (and (=> ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@77) ($IsAlloc (int_2_U |a#81#0#0|) TInt $h@@77)) (=> ($IsAlloc (int_2_U |a#81#0#0|) TInt $h@@77) ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@77)))) :qid |UIsdfy.20:24| :skolemid |1922| :pattern ( ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@77)) )))
(assert (forall ((d@@77 T@U) ($h@@78 T@U) ) (!  (=> (and (and (= (type d@@77) DatatypeTypeType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@78) (and (UI.Op.PushSyncOp_q d@@77) ($IsAlloc d@@77 Tclass.UI.Op $h@@78)))) ($IsAlloc (int_2_U (UI.Op.id d@@77)) TInt $h@@78)) :qid |unknown.0:0| :skolemid |1923| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@77)) TInt $h@@78)) )))
(assert (forall ((|a#82#0#0| Int) ) (! (= (|#UI.Op.PushSyncOp| (LitInt |a#82#0#0|)) (Lit (|#UI.Op.PushSyncOp| |a#82#0#0|))) :qid |UIsdfy.20:24| :skolemid |1924| :pattern ( (|#UI.Op.PushSyncOp| (LitInt |a#82#0#0|))) )))
(assert (forall ((|a#83#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PushSyncOp| |a#83#0#0|)) |a#83#0#0|) :qid |UIsdfy.20:24| :skolemid |1925| :pattern ( (|#UI.Op.PushSyncOp| |a#83#0#0|)) )))
(assert (forall ((arg0@@292 Int) ) (! (= (type (|#UI.Op.PopSyncOp| arg0@@292)) DatatypeTypeType) :qid |funType:#UI.Op.PopSyncOp| :pattern ( (|#UI.Op.PopSyncOp| arg0@@292)) )))
(assert (forall ((|a#84#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PopSyncOp| |a#84#0#0|)) |##UI.Op.PopSyncOp|) :qid |UIsdfy.21:23| :skolemid |1926| :pattern ( (|#UI.Op.PopSyncOp| |a#84#0#0|)) )))
(assert (forall ((d@@78 T@U) ) (!  (=> (= (type d@@78) DatatypeTypeType) (and (=> (UI.Op.PopSyncOp_q d@@78) (= (DatatypeCtorId d@@78) |##UI.Op.PopSyncOp|)) (=> (= (DatatypeCtorId d@@78) |##UI.Op.PopSyncOp|) (UI.Op.PopSyncOp_q d@@78)))) :qid |unknown.0:0| :skolemid |1927| :pattern ( (UI.Op.PopSyncOp_q d@@78)) )))
(assert (forall ((d@@79 T@U) ) (!  (=> (and (= (type d@@79) DatatypeTypeType) (UI.Op.PopSyncOp_q d@@79)) (exists ((|a#85#0#0| Int) ) (! (= d@@79 (|#UI.Op.PopSyncOp| |a#85#0#0|)) :qid |UIsdfy.21:23| :skolemid |1928| ))) :qid |unknown.0:0| :skolemid |1929| :pattern ( (UI.Op.PopSyncOp_q d@@79)) )))
(assert (forall ((|a#86#0#0| Int) ) (!  (and (=> ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#86#0#0|) TInt)) (=> ($Is (int_2_U |a#86#0#0|) TInt) ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op))) :qid |UIsdfy.21:23| :skolemid |1930| :pattern ( ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#87#0#0| Int) ($h@@79 T@U) ) (!  (=> (and (= (type $h@@79) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@79)) (and (=> ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@79) ($IsAlloc (int_2_U |a#87#0#0|) TInt $h@@79)) (=> ($IsAlloc (int_2_U |a#87#0#0|) TInt $h@@79) ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@79)))) :qid |UIsdfy.21:23| :skolemid |1931| :pattern ( ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@79)) )))
(assert (forall ((d@@80 T@U) ($h@@80 T@U) ) (!  (=> (and (and (= (type d@@80) DatatypeTypeType) (= (type $h@@80) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@80) (and (UI.Op.PopSyncOp_q d@@80) ($IsAlloc d@@80 Tclass.UI.Op $h@@80)))) ($IsAlloc (int_2_U (UI.Op.id d@@80)) TInt $h@@80)) :qid |unknown.0:0| :skolemid |1932| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@80)) TInt $h@@80)) )))
(assert (forall ((|a#88#0#0| Int) ) (! (= (|#UI.Op.PopSyncOp| (LitInt |a#88#0#0|)) (Lit (|#UI.Op.PopSyncOp| |a#88#0#0|))) :qid |UIsdfy.21:23| :skolemid |1933| :pattern ( (|#UI.Op.PopSyncOp| (LitInt |a#88#0#0|))) )))
(assert (forall ((|a#89#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PopSyncOp| |a#89#0#0|)) |a#89#0#0|) :qid |UIsdfy.21:23| :skolemid |1934| :pattern ( (|#UI.Op.PopSyncOp| |a#89#0#0|)) )))
(assert (forall ((arg0@@293 T@U) (arg1@@157 T@U) ) (! (= (type (|#UI.Op.GetOp| arg0@@293 arg1@@157)) DatatypeTypeType) :qid |funType:#UI.Op.GetOp| :pattern ( (|#UI.Op.GetOp| arg0@@293 arg1@@157)) )))
(assert (forall ((|a#90#0#0| T@U) (|a#90#1#0| T@U) ) (!  (=> (and (= (type |a#90#0#0|) (SeqType BoxType)) (= (type |a#90#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.GetOp| |a#90#0#0| |a#90#1#0|)) |##UI.Op.GetOp|)) :qid |UIsdfy.24:13| :skolemid |1935| :pattern ( (|#UI.Op.GetOp| |a#90#0#0| |a#90#1#0|)) )))
(assert (forall ((d@@81 T@U) ) (!  (=> (= (type d@@81) DatatypeTypeType) (and (=> (UI.Op.GetOp_q d@@81) (= (DatatypeCtorId d@@81) |##UI.Op.GetOp|)) (=> (= (DatatypeCtorId d@@81) |##UI.Op.GetOp|) (UI.Op.GetOp_q d@@81)))) :qid |unknown.0:0| :skolemid |1936| :pattern ( (UI.Op.GetOp_q d@@81)) )))
(assert (forall ((d@@82 T@U) ) (!  (=> (and (= (type d@@82) DatatypeTypeType) (UI.Op.GetOp_q d@@82)) (exists ((|a#91#0#0| T@U) (|a#91#1#0| T@U) ) (!  (and (and (= (type |a#91#0#0|) (SeqType BoxType)) (= (type |a#91#1#0|) (SeqType BoxType))) (= d@@82 (|#UI.Op.GetOp| |a#91#0#0| |a#91#1#0|))) :qid |UIsdfy.24:13| :skolemid |1937| :no-pattern (type |a#91#0#0|) :no-pattern (type |a#91#1#0|) :no-pattern (U_2_int |a#91#0#0|) :no-pattern (U_2_bool |a#91#0#0|) :no-pattern (U_2_int |a#91#1#0|) :no-pattern (U_2_bool |a#91#1#0|) ))) :qid |unknown.0:0| :skolemid |1938| :pattern ( (UI.Op.GetOp_q d@@82)) )))
(assert (forall ((|a#92#0#0| T@U) (|a#92#1#0| T@U) ) (!  (=> (and (= (type |a#92#0#0|) (SeqType BoxType)) (= (type |a#92#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op) (and ($Is |a#92#0#0| Tclass.KeyType.Key) ($Is |a#92#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#92#0#0| Tclass.KeyType.Key) ($Is |a#92#1#0| Tclass.ValueType.Value)) ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op)))) :qid |UIsdfy.24:13| :skolemid |1939| :pattern ( ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#93#0#0| T@U) (|a#93#1#0| T@U) ($h@@81 T@U) ) (!  (=> (and (and (and (= (type |a#93#0#0|) (SeqType BoxType)) (= (type |a#93#1#0|) (SeqType BoxType))) (= (type $h@@81) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@81)) (and (=> ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@81) (and ($IsAlloc |a#93#0#0| Tclass.KeyType.Key $h@@81) ($IsAlloc |a#93#1#0| Tclass.ValueType.Value $h@@81))) (=> (and ($IsAlloc |a#93#0#0| Tclass.KeyType.Key $h@@81) ($IsAlloc |a#93#1#0| Tclass.ValueType.Value $h@@81)) ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@81)))) :qid |UIsdfy.24:13| :skolemid |1940| :pattern ( ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@81)) )))
(assert (forall ((arg0@@294 T@U) ) (! (= (type (UI.Op.key arg0@@294)) (SeqType BoxType)) :qid |funType:UI.Op.key| :pattern ( (UI.Op.key arg0@@294)) )))
(assert (forall ((d@@83 T@U) ($h@@82 T@U) ) (!  (=> (and (and (= (type d@@83) DatatypeTypeType) (= (type $h@@82) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@82) (and (UI.Op.GetOp_q d@@83) ($IsAlloc d@@83 Tclass.UI.Op $h@@82)))) ($IsAlloc (UI.Op.key d@@83) Tclass.KeyType.Key $h@@82)) :qid |unknown.0:0| :skolemid |1941| :pattern ( ($IsAlloc (UI.Op.key d@@83) Tclass.KeyType.Key $h@@82)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (UI.Op.value arg0@@295)) (SeqType BoxType)) :qid |funType:UI.Op.value| :pattern ( (UI.Op.value arg0@@295)) )))
(assert (forall ((d@@84 T@U) ($h@@83 T@U) ) (!  (=> (and (and (= (type d@@84) DatatypeTypeType) (= (type $h@@83) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@83) (and (UI.Op.GetOp_q d@@84) ($IsAlloc d@@84 Tclass.UI.Op $h@@83)))) ($IsAlloc (UI.Op.value d@@84) Tclass.ValueType.Value $h@@83)) :qid |unknown.0:0| :skolemid |1942| :pattern ( ($IsAlloc (UI.Op.value d@@84) Tclass.ValueType.Value $h@@83)) )))
(assert (forall ((|a#94#0#0| T@U) (|a#94#1#0| T@U) ) (!  (=> (and (= (type |a#94#0#0|) (SeqType BoxType)) (= (type |a#94#1#0|) (SeqType BoxType))) (= (|#UI.Op.GetOp| (Lit |a#94#0#0|) (Lit |a#94#1#0|)) (Lit (|#UI.Op.GetOp| |a#94#0#0| |a#94#1#0|)))) :qid |UIsdfy.24:13| :skolemid |1943| :pattern ( (|#UI.Op.GetOp| (Lit |a#94#0#0|) (Lit |a#94#1#0|))) )))
(assert (forall ((|a#95#0#0| T@U) (|a#95#1#0| T@U) ) (!  (=> (and (= (type |a#95#0#0|) (SeqType BoxType)) (= (type |a#95#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.GetOp| |a#95#0#0| |a#95#1#0|)) |a#95#0#0|)) :qid |UIsdfy.24:13| :skolemid |1944| :pattern ( (|#UI.Op.GetOp| |a#95#0#0| |a#95#1#0|)) )))
(assert (forall ((|a#96#0#0| T@U) (|a#96#1#0| T@U) ) (!  (=> (and (= (type |a#96#0#0|) (SeqType BoxType)) (= (type |a#96#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) |a#96#1#0|)) :qid |UIsdfy.24:13| :skolemid |1945| :pattern ( (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) )))
(assert (forall ((arg0@@296 T@U) (arg1@@158 T@U) ) (! (= (type (|#UI.Op.PutOp| arg0@@296 arg1@@158)) DatatypeTypeType) :qid |funType:#UI.Op.PutOp| :pattern ( (|#UI.Op.PutOp| arg0@@296 arg1@@158)) )))
(assert (forall ((|a#97#0#0| T@U) (|a#97#1#0| T@U) ) (!  (=> (and (= (type |a#97#0#0|) (SeqType BoxType)) (= (type |a#97#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.PutOp| |a#97#0#0| |a#97#1#0|)) |##UI.Op.PutOp|)) :qid |UIsdfy.25:13| :skolemid |1946| :pattern ( (|#UI.Op.PutOp| |a#97#0#0| |a#97#1#0|)) )))
(assert (forall ((d@@85 T@U) ) (!  (=> (= (type d@@85) DatatypeTypeType) (and (=> (UI.Op.PutOp_q d@@85) (= (DatatypeCtorId d@@85) |##UI.Op.PutOp|)) (=> (= (DatatypeCtorId d@@85) |##UI.Op.PutOp|) (UI.Op.PutOp_q d@@85)))) :qid |unknown.0:0| :skolemid |1947| :pattern ( (UI.Op.PutOp_q d@@85)) )))
(assert (forall ((d@@86 T@U) ) (!  (=> (and (= (type d@@86) DatatypeTypeType) (UI.Op.PutOp_q d@@86)) (exists ((|a#98#0#0| T@U) (|a#98#1#0| T@U) ) (!  (and (and (= (type |a#98#0#0|) (SeqType BoxType)) (= (type |a#98#1#0|) (SeqType BoxType))) (= d@@86 (|#UI.Op.PutOp| |a#98#0#0| |a#98#1#0|))) :qid |UIsdfy.25:13| :skolemid |1948| :no-pattern (type |a#98#0#0|) :no-pattern (type |a#98#1#0|) :no-pattern (U_2_int |a#98#0#0|) :no-pattern (U_2_bool |a#98#0#0|) :no-pattern (U_2_int |a#98#1#0|) :no-pattern (U_2_bool |a#98#1#0|) ))) :qid |unknown.0:0| :skolemid |1949| :pattern ( (UI.Op.PutOp_q d@@86)) )))
(assert (forall ((|a#99#0#0| T@U) (|a#99#1#0| T@U) ) (!  (=> (and (= (type |a#99#0#0|) (SeqType BoxType)) (= (type |a#99#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.Op.PutOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op) (and ($Is |a#99#0#0| Tclass.KeyType.Key) ($Is |a#99#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#99#0#0| Tclass.KeyType.Key) ($Is |a#99#1#0| Tclass.ValueType.Value)) ($Is (|#UI.Op.PutOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op)))) :qid |UIsdfy.25:13| :skolemid |1950| :pattern ( ($Is (|#UI.Op.PutOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#100#0#0| T@U) (|a#100#1#0| T@U) ($h@@84 T@U) ) (!  (=> (and (and (and (= (type |a#100#0#0|) (SeqType BoxType)) (= (type |a#100#1#0|) (SeqType BoxType))) (= (type $h@@84) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@84)) (and (=> ($IsAlloc (|#UI.Op.PutOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@84) (and ($IsAlloc |a#100#0#0| Tclass.KeyType.Key $h@@84) ($IsAlloc |a#100#1#0| Tclass.ValueType.Value $h@@84))) (=> (and ($IsAlloc |a#100#0#0| Tclass.KeyType.Key $h@@84) ($IsAlloc |a#100#1#0| Tclass.ValueType.Value $h@@84)) ($IsAlloc (|#UI.Op.PutOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@84)))) :qid |UIsdfy.25:13| :skolemid |1951| :pattern ( ($IsAlloc (|#UI.Op.PutOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@84)) )))
(assert (forall ((d@@87 T@U) ($h@@85 T@U) ) (!  (=> (and (and (= (type d@@87) DatatypeTypeType) (= (type $h@@85) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@85) (and (UI.Op.PutOp_q d@@87) ($IsAlloc d@@87 Tclass.UI.Op $h@@85)))) ($IsAlloc (UI.Op.key d@@87) Tclass.KeyType.Key $h@@85)) :qid |unknown.0:0| :skolemid |1952| :pattern ( ($IsAlloc (UI.Op.key d@@87) Tclass.KeyType.Key $h@@85)) )))
(assert (forall ((d@@88 T@U) ($h@@86 T@U) ) (!  (=> (and (and (= (type d@@88) DatatypeTypeType) (= (type $h@@86) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@86) (and (UI.Op.PutOp_q d@@88) ($IsAlloc d@@88 Tclass.UI.Op $h@@86)))) ($IsAlloc (UI.Op.value d@@88) Tclass.ValueType.Value $h@@86)) :qid |unknown.0:0| :skolemid |1953| :pattern ( ($IsAlloc (UI.Op.value d@@88) Tclass.ValueType.Value $h@@86)) )))
(assert (forall ((|a#101#0#0| T@U) (|a#101#1#0| T@U) ) (!  (=> (and (= (type |a#101#0#0|) (SeqType BoxType)) (= (type |a#101#1#0|) (SeqType BoxType))) (= (|#UI.Op.PutOp| (Lit |a#101#0#0|) (Lit |a#101#1#0|)) (Lit (|#UI.Op.PutOp| |a#101#0#0| |a#101#1#0|)))) :qid |UIsdfy.25:13| :skolemid |1954| :pattern ( (|#UI.Op.PutOp| (Lit |a#101#0#0|) (Lit |a#101#1#0|))) )))
(assert (forall ((|a#102#0#0| T@U) (|a#102#1#0| T@U) ) (!  (=> (and (= (type |a#102#0#0|) (SeqType BoxType)) (= (type |a#102#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.PutOp| |a#102#0#0| |a#102#1#0|)) |a#102#0#0|)) :qid |UIsdfy.25:13| :skolemid |1955| :pattern ( (|#UI.Op.PutOp| |a#102#0#0| |a#102#1#0|)) )))
(assert (forall ((|a#103#0#0| T@U) (|a#103#1#0| T@U) ) (!  (=> (and (= (type |a#103#0#0|) (SeqType BoxType)) (= (type |a#103#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.PutOp| |a#103#0#0| |a#103#1#0|)) |a#103#1#0|)) :qid |UIsdfy.25:13| :skolemid |1956| :pattern ( (|#UI.Op.PutOp| |a#103#0#0| |a#103#1#0|)) )))
(assert (forall ((arg0@@297 T@U) (arg1@@159 T@U) (arg2@@89 T@U) ) (! (= (type (|#UI.Op.SuccOp| arg0@@297 arg1@@159 arg2@@89)) DatatypeTypeType) :qid |funType:#UI.Op.SuccOp| :pattern ( (|#UI.Op.SuccOp| arg0@@297 arg1@@159 arg2@@89)) )))
(assert (forall ((|a#104#0#0| T@U) (|a#104#1#0| T@U) (|a#104#2#0| T@U) ) (!  (=> (and (and (= (type |a#104#0#0|) DatatypeTypeType) (= (type |a#104#1#0|) (SeqType BoxType))) (= (type |a#104#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.Op.SuccOp| |a#104#0#0| |a#104#1#0| |a#104#2#0|)) |##UI.Op.SuccOp|)) :qid |UIsdfy.27:14| :skolemid |1957| :pattern ( (|#UI.Op.SuccOp| |a#104#0#0| |a#104#1#0| |a#104#2#0|)) )))
(assert (forall ((d@@89 T@U) ) (!  (=> (= (type d@@89) DatatypeTypeType) (and (=> (UI.Op.SuccOp_q d@@89) (= (DatatypeCtorId d@@89) |##UI.Op.SuccOp|)) (=> (= (DatatypeCtorId d@@89) |##UI.Op.SuccOp|) (UI.Op.SuccOp_q d@@89)))) :qid |unknown.0:0| :skolemid |1958| :pattern ( (UI.Op.SuccOp_q d@@89)) )))
(assert (forall ((d@@90 T@U) ) (!  (=> (and (= (type d@@90) DatatypeTypeType) (UI.Op.SuccOp_q d@@90)) (exists ((|a#105#0#0| T@U) (|a#105#1#0| T@U) (|a#105#2#0| T@U) ) (!  (and (and (and (= (type |a#105#0#0|) DatatypeTypeType) (= (type |a#105#1#0|) (SeqType BoxType))) (= (type |a#105#2#0|) DatatypeTypeType)) (= d@@90 (|#UI.Op.SuccOp| |a#105#0#0| |a#105#1#0| |a#105#2#0|))) :qid |UIsdfy.27:14| :skolemid |1959| :no-pattern (type |a#105#0#0|) :no-pattern (type |a#105#1#0|) :no-pattern (type |a#105#2#0|) :no-pattern (U_2_int |a#105#0#0|) :no-pattern (U_2_bool |a#105#0#0|) :no-pattern (U_2_int |a#105#1#0|) :no-pattern (U_2_bool |a#105#1#0|) :no-pattern (U_2_int |a#105#2#0|) :no-pattern (U_2_bool |a#105#2#0|) ))) :qid |unknown.0:0| :skolemid |1960| :pattern ( (UI.Op.SuccOp_q d@@90)) )))
(assert (forall ((|a#106#0#0| T@U) (|a#106#1#0| T@U) (|a#106#2#0| T@U) ) (!  (=> (and (and (= (type |a#106#0#0|) DatatypeTypeType) (= (type |a#106#1#0|) (SeqType BoxType))) (= (type |a#106#2#0|) DatatypeTypeType)) (and (=> ($Is (|#UI.Op.SuccOp| |a#106#0#0| |a#106#1#0| |a#106#2#0|) Tclass.UI.Op) (and (and ($Is |a#106#0#0| Tclass.UI.RangeStart) ($Is |a#106#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#106#2#0| Tclass.UI.RangeEnd))) (=> (and (and ($Is |a#106#0#0| Tclass.UI.RangeStart) ($Is |a#106#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#106#2#0| Tclass.UI.RangeEnd)) ($Is (|#UI.Op.SuccOp| |a#106#0#0| |a#106#1#0| |a#106#2#0|) Tclass.UI.Op)))) :qid |UIsdfy.27:14| :skolemid |1961| :pattern ( ($Is (|#UI.Op.SuccOp| |a#106#0#0| |a#106#1#0| |a#106#2#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#107#0#0| T@U) (|a#107#1#0| T@U) (|a#107#2#0| T@U) ($h@@87 T@U) ) (!  (=> (and (and (and (and (= (type |a#107#0#0|) DatatypeTypeType) (= (type |a#107#1#0|) (SeqType BoxType))) (= (type |a#107#2#0|) DatatypeTypeType)) (= (type $h@@87) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@87)) (and (=> ($IsAlloc (|#UI.Op.SuccOp| |a#107#0#0| |a#107#1#0| |a#107#2#0|) Tclass.UI.Op $h@@87) (and (and ($IsAlloc |a#107#0#0| Tclass.UI.RangeStart $h@@87) ($IsAlloc |a#107#1#0| (TSeq Tclass.UI.SuccResult) $h@@87)) ($IsAlloc |a#107#2#0| Tclass.UI.RangeEnd $h@@87))) (=> (and (and ($IsAlloc |a#107#0#0| Tclass.UI.RangeStart $h@@87) ($IsAlloc |a#107#1#0| (TSeq Tclass.UI.SuccResult) $h@@87)) ($IsAlloc |a#107#2#0| Tclass.UI.RangeEnd $h@@87)) ($IsAlloc (|#UI.Op.SuccOp| |a#107#0#0| |a#107#1#0| |a#107#2#0|) Tclass.UI.Op $h@@87)))) :qid |UIsdfy.27:14| :skolemid |1962| :pattern ( ($IsAlloc (|#UI.Op.SuccOp| |a#107#0#0| |a#107#1#0| |a#107#2#0|) Tclass.UI.Op $h@@87)) )))
(assert (forall ((arg0@@298 T@U) ) (! (= (type (UI.Op.start arg0@@298)) DatatypeTypeType) :qid |funType:UI.Op.start| :pattern ( (UI.Op.start arg0@@298)) )))
(assert (forall ((d@@91 T@U) ($h@@88 T@U) ) (!  (=> (and (and (= (type d@@91) DatatypeTypeType) (= (type $h@@88) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@88) (and (UI.Op.SuccOp_q d@@91) ($IsAlloc d@@91 Tclass.UI.Op $h@@88)))) ($IsAlloc (UI.Op.start d@@91) Tclass.UI.RangeStart $h@@88)) :qid |unknown.0:0| :skolemid |1963| :pattern ( ($IsAlloc (UI.Op.start d@@91) Tclass.UI.RangeStart $h@@88)) )))
(assert (forall ((arg0@@299 T@U) ) (! (= (type (UI.Op.results arg0@@299)) (SeqType BoxType)) :qid |funType:UI.Op.results| :pattern ( (UI.Op.results arg0@@299)) )))
(assert (forall ((d@@92 T@U) ($h@@89 T@U) ) (!  (=> (and (and (= (type d@@92) DatatypeTypeType) (= (type $h@@89) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@89) (and (UI.Op.SuccOp_q d@@92) ($IsAlloc d@@92 Tclass.UI.Op $h@@89)))) ($IsAlloc (UI.Op.results d@@92) (TSeq Tclass.UI.SuccResult) $h@@89)) :qid |unknown.0:0| :skolemid |1964| :pattern ( ($IsAlloc (UI.Op.results d@@92) (TSeq Tclass.UI.SuccResult) $h@@89)) )))
(assert (forall ((arg0@@300 T@U) ) (! (= (type (UI.Op.end arg0@@300)) DatatypeTypeType) :qid |funType:UI.Op.end| :pattern ( (UI.Op.end arg0@@300)) )))
(assert (forall ((d@@93 T@U) ($h@@90 T@U) ) (!  (=> (and (and (= (type d@@93) DatatypeTypeType) (= (type $h@@90) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@90) (and (UI.Op.SuccOp_q d@@93) ($IsAlloc d@@93 Tclass.UI.Op $h@@90)))) ($IsAlloc (UI.Op.end d@@93) Tclass.UI.RangeEnd $h@@90)) :qid |unknown.0:0| :skolemid |1965| :pattern ( ($IsAlloc (UI.Op.end d@@93) Tclass.UI.RangeEnd $h@@90)) )))
(assert (forall ((|a#108#0#0| T@U) (|a#108#1#0| T@U) (|a#108#2#0| T@U) ) (!  (=> (and (and (= (type |a#108#0#0|) DatatypeTypeType) (= (type |a#108#1#0|) (SeqType BoxType))) (= (type |a#108#2#0|) DatatypeTypeType)) (= (|#UI.Op.SuccOp| (Lit |a#108#0#0|) (Lit |a#108#1#0|) (Lit |a#108#2#0|)) (Lit (|#UI.Op.SuccOp| |a#108#0#0| |a#108#1#0| |a#108#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1966| :pattern ( (|#UI.Op.SuccOp| (Lit |a#108#0#0|) (Lit |a#108#1#0|) (Lit |a#108#2#0|))) )))
(assert (forall ((|a#109#0#0| T@U) (|a#109#1#0| T@U) (|a#109#2#0| T@U) ) (!  (=> (and (and (= (type |a#109#0#0|) DatatypeTypeType) (= (type |a#109#1#0|) (SeqType BoxType))) (= (type |a#109#2#0|) DatatypeTypeType)) (= (UI.Op.start (|#UI.Op.SuccOp| |a#109#0#0| |a#109#1#0| |a#109#2#0|)) |a#109#0#0|)) :qid |UIsdfy.27:14| :skolemid |1967| :pattern ( (|#UI.Op.SuccOp| |a#109#0#0| |a#109#1#0| |a#109#2#0|)) )))
(assert (forall ((|a#110#0#0| T@U) (|a#110#1#0| T@U) (|a#110#2#0| T@U) ) (!  (=> (and (and (= (type |a#110#0#0|) DatatypeTypeType) (= (type |a#110#1#0|) (SeqType BoxType))) (= (type |a#110#2#0|) DatatypeTypeType)) (< (DtRank |a#110#0#0|) (DtRank (|#UI.Op.SuccOp| |a#110#0#0| |a#110#1#0| |a#110#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1968| :pattern ( (|#UI.Op.SuccOp| |a#110#0#0| |a#110#1#0| |a#110#2#0|)) )))
(assert (forall ((|a#111#0#0| T@U) (|a#111#1#0| T@U) (|a#111#2#0| T@U) ) (!  (=> (and (and (= (type |a#111#0#0|) DatatypeTypeType) (= (type |a#111#1#0|) (SeqType BoxType))) (= (type |a#111#2#0|) DatatypeTypeType)) (= (UI.Op.results (|#UI.Op.SuccOp| |a#111#0#0| |a#111#1#0| |a#111#2#0|)) |a#111#1#0|)) :qid |UIsdfy.27:14| :skolemid |1969| :pattern ( (|#UI.Op.SuccOp| |a#111#0#0| |a#111#1#0| |a#111#2#0|)) )))
(assert (forall ((|a#112#0#0| T@U) (|a#112#1#0| T@U) (|a#112#2#0| T@U) (i@@32 Int) ) (!  (=> (and (and (and (= (type |a#112#0#0|) DatatypeTypeType) (= (type |a#112#1#0|) (SeqType BoxType))) (= (type |a#112#2#0|) DatatypeTypeType)) (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#112#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#112#1#0| i@@32))) (DtRank (|#UI.Op.SuccOp| |a#112#0#0| |a#112#1#0| |a#112#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1970| :pattern ( (|Seq#Index| |a#112#1#0| i@@32) (|#UI.Op.SuccOp| |a#112#0#0| |a#112#1#0| |a#112#2#0|)) )))
(assert (forall ((|a#113#0#0| T@U) (|a#113#1#0| T@U) (|a#113#2#0| T@U) ) (!  (=> (and (and (= (type |a#113#0#0|) DatatypeTypeType) (= (type |a#113#1#0|) (SeqType BoxType))) (= (type |a#113#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#113#1#0|) (DtRank (|#UI.Op.SuccOp| |a#113#0#0| |a#113#1#0| |a#113#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1971| :pattern ( (|#UI.Op.SuccOp| |a#113#0#0| |a#113#1#0| |a#113#2#0|)) )))
(assert (forall ((|a#114#0#0| T@U) (|a#114#1#0| T@U) (|a#114#2#0| T@U) ) (!  (=> (and (and (= (type |a#114#0#0|) DatatypeTypeType) (= (type |a#114#1#0|) (SeqType BoxType))) (= (type |a#114#2#0|) DatatypeTypeType)) (= (UI.Op.end (|#UI.Op.SuccOp| |a#114#0#0| |a#114#1#0| |a#114#2#0|)) |a#114#2#0|)) :qid |UIsdfy.27:14| :skolemid |1972| :pattern ( (|#UI.Op.SuccOp| |a#114#0#0| |a#114#1#0| |a#114#2#0|)) )))
(assert (forall ((|a#115#0#0| T@U) (|a#115#1#0| T@U) (|a#115#2#0| T@U) ) (!  (=> (and (and (= (type |a#115#0#0|) DatatypeTypeType) (= (type |a#115#1#0|) (SeqType BoxType))) (= (type |a#115#2#0|) DatatypeTypeType)) (< (DtRank |a#115#2#0|) (DtRank (|#UI.Op.SuccOp| |a#115#0#0| |a#115#1#0| |a#115#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1973| :pattern ( (|#UI.Op.SuccOp| |a#115#0#0| |a#115#1#0| |a#115#2#0|)) )))
(assert (forall ((d@@94 T@U) ) (!  (=> (and (= (type d@@94) DatatypeTypeType) (|$IsA#UI.Op| d@@94)) (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@94) (UI.Op.SyncOp_q d@@94)) (UI.Op.CrashOp_q d@@94)) (UI.Op.PushSyncOp_q d@@94)) (UI.Op.PopSyncOp_q d@@94)) (UI.Op.GetOp_q d@@94)) (UI.Op.PutOp_q d@@94)) (UI.Op.SuccOp_q d@@94))) :qid |unknown.0:0| :skolemid |1974| :pattern ( (|$IsA#UI.Op| d@@94)) )))
(assert (forall ((d@@95 T@U) ) (!  (=> (and (= (type d@@95) DatatypeTypeType) ($Is d@@95 Tclass.UI.Op)) (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@95) (UI.Op.SyncOp_q d@@95)) (UI.Op.CrashOp_q d@@95)) (UI.Op.PushSyncOp_q d@@95)) (UI.Op.PopSyncOp_q d@@95)) (UI.Op.GetOp_q d@@95)) (UI.Op.PutOp_q d@@95)) (UI.Op.SuccOp_q d@@95))) :qid |unknown.0:0| :skolemid |1975| :pattern ( (UI.Op.SuccOp_q d@@95) ($Is d@@95 Tclass.UI.Op)) :pattern ( (UI.Op.PutOp_q d@@95) ($Is d@@95 Tclass.UI.Op)) :pattern ( (UI.Op.GetOp_q d@@95) ($Is d@@95 Tclass.UI.Op)) :pattern ( (UI.Op.PopSyncOp_q d@@95) ($Is d@@95 Tclass.UI.Op)) :pattern ( (UI.Op.PushSyncOp_q d@@95) ($Is d@@95 Tclass.UI.Op)) :pattern ( (UI.Op.CrashOp_q d@@95) ($Is d@@95 Tclass.UI.Op)) :pattern ( (UI.Op.SyncOp_q d@@95) ($Is d@@95 Tclass.UI.Op)) :pattern ( (UI.Op.NoOp_q d@@95) ($Is d@@95 Tclass.UI.Op)) )))
(assert (forall ((a@@138 T@U) (b@@87 T@U) ) (!  (=> (and (and (= (type a@@138) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (UI.Op.NoOp_q a@@138) (UI.Op.NoOp_q b@@87))) (and (=> (|UI.Op#Equal| a@@138 b@@87) true) (=> true (|UI.Op#Equal| a@@138 b@@87)))) :qid |unknown.0:0| :skolemid |1976| :pattern ( (|UI.Op#Equal| a@@138 b@@87) (UI.Op.NoOp_q a@@138)) :pattern ( (|UI.Op#Equal| a@@138 b@@87) (UI.Op.NoOp_q b@@87)) )))
(assert (forall ((a@@139 T@U) (b@@88 T@U) ) (!  (=> (and (and (= (type a@@139) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) (and (UI.Op.SyncOp_q a@@139) (UI.Op.SyncOp_q b@@88))) (and (=> (|UI.Op#Equal| a@@139 b@@88) true) (=> true (|UI.Op#Equal| a@@139 b@@88)))) :qid |unknown.0:0| :skolemid |1977| :pattern ( (|UI.Op#Equal| a@@139 b@@88) (UI.Op.SyncOp_q a@@139)) :pattern ( (|UI.Op#Equal| a@@139 b@@88) (UI.Op.SyncOp_q b@@88)) )))
(assert (forall ((a@@140 T@U) (b@@89 T@U) ) (!  (=> (and (and (= (type a@@140) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) (and (UI.Op.CrashOp_q a@@140) (UI.Op.CrashOp_q b@@89))) (and (=> (|UI.Op#Equal| a@@140 b@@89) true) (=> true (|UI.Op#Equal| a@@140 b@@89)))) :qid |unknown.0:0| :skolemid |1978| :pattern ( (|UI.Op#Equal| a@@140 b@@89) (UI.Op.CrashOp_q a@@140)) :pattern ( (|UI.Op#Equal| a@@140 b@@89) (UI.Op.CrashOp_q b@@89)) )))
(assert (forall ((a@@141 T@U) (b@@90 T@U) ) (!  (=> (and (and (= (type a@@141) DatatypeTypeType) (= (type b@@90) DatatypeTypeType)) (and (UI.Op.PushSyncOp_q a@@141) (UI.Op.PushSyncOp_q b@@90))) (and (=> (|UI.Op#Equal| a@@141 b@@90) (= (UI.Op.id a@@141) (UI.Op.id b@@90))) (=> (= (UI.Op.id a@@141) (UI.Op.id b@@90)) (|UI.Op#Equal| a@@141 b@@90)))) :qid |unknown.0:0| :skolemid |1979| :pattern ( (|UI.Op#Equal| a@@141 b@@90) (UI.Op.PushSyncOp_q a@@141)) :pattern ( (|UI.Op#Equal| a@@141 b@@90) (UI.Op.PushSyncOp_q b@@90)) )))
(assert (forall ((a@@142 T@U) (b@@91 T@U) ) (!  (=> (and (and (= (type a@@142) DatatypeTypeType) (= (type b@@91) DatatypeTypeType)) (and (UI.Op.PopSyncOp_q a@@142) (UI.Op.PopSyncOp_q b@@91))) (and (=> (|UI.Op#Equal| a@@142 b@@91) (= (UI.Op.id a@@142) (UI.Op.id b@@91))) (=> (= (UI.Op.id a@@142) (UI.Op.id b@@91)) (|UI.Op#Equal| a@@142 b@@91)))) :qid |unknown.0:0| :skolemid |1980| :pattern ( (|UI.Op#Equal| a@@142 b@@91) (UI.Op.PopSyncOp_q a@@142)) :pattern ( (|UI.Op#Equal| a@@142 b@@91) (UI.Op.PopSyncOp_q b@@91)) )))
(assert (forall ((a@@143 T@U) (b@@92 T@U) ) (!  (=> (and (and (= (type a@@143) DatatypeTypeType) (= (type b@@92) DatatypeTypeType)) (and (UI.Op.GetOp_q a@@143) (UI.Op.GetOp_q b@@92))) (and (=> (|UI.Op#Equal| a@@143 b@@92) (and (|Seq#Equal| (UI.Op.key a@@143) (UI.Op.key b@@92)) (|Seq#Equal| (UI.Op.value a@@143) (UI.Op.value b@@92)))) (=> (and (|Seq#Equal| (UI.Op.key a@@143) (UI.Op.key b@@92)) (|Seq#Equal| (UI.Op.value a@@143) (UI.Op.value b@@92))) (|UI.Op#Equal| a@@143 b@@92)))) :qid |unknown.0:0| :skolemid |1981| :pattern ( (|UI.Op#Equal| a@@143 b@@92) (UI.Op.GetOp_q a@@143)) :pattern ( (|UI.Op#Equal| a@@143 b@@92) (UI.Op.GetOp_q b@@92)) )))
(assert (forall ((a@@144 T@U) (b@@93 T@U) ) (!  (=> (and (and (= (type a@@144) DatatypeTypeType) (= (type b@@93) DatatypeTypeType)) (and (UI.Op.PutOp_q a@@144) (UI.Op.PutOp_q b@@93))) (and (=> (|UI.Op#Equal| a@@144 b@@93) (and (|Seq#Equal| (UI.Op.key a@@144) (UI.Op.key b@@93)) (|Seq#Equal| (UI.Op.value a@@144) (UI.Op.value b@@93)))) (=> (and (|Seq#Equal| (UI.Op.key a@@144) (UI.Op.key b@@93)) (|Seq#Equal| (UI.Op.value a@@144) (UI.Op.value b@@93))) (|UI.Op#Equal| a@@144 b@@93)))) :qid |unknown.0:0| :skolemid |1982| :pattern ( (|UI.Op#Equal| a@@144 b@@93) (UI.Op.PutOp_q a@@144)) :pattern ( (|UI.Op#Equal| a@@144 b@@93) (UI.Op.PutOp_q b@@93)) )))
(assert (forall ((a@@145 T@U) (b@@94 T@U) ) (!  (=> (and (and (= (type a@@145) DatatypeTypeType) (= (type b@@94) DatatypeTypeType)) (and (UI.Op.SuccOp_q a@@145) (UI.Op.SuccOp_q b@@94))) (and (=> (|UI.Op#Equal| a@@145 b@@94) (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@145) (UI.Op.start b@@94)) (|Seq#Equal| (UI.Op.results a@@145) (UI.Op.results b@@94))) (|UI.RangeEnd#Equal| (UI.Op.end a@@145) (UI.Op.end b@@94)))) (=> (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@145) (UI.Op.start b@@94)) (|Seq#Equal| (UI.Op.results a@@145) (UI.Op.results b@@94))) (|UI.RangeEnd#Equal| (UI.Op.end a@@145) (UI.Op.end b@@94))) (|UI.Op#Equal| a@@145 b@@94)))) :qid |unknown.0:0| :skolemid |1983| :pattern ( (|UI.Op#Equal| a@@145 b@@94) (UI.Op.SuccOp_q a@@145)) :pattern ( (|UI.Op#Equal| a@@145 b@@94) (UI.Op.SuccOp_q b@@94)) )))
(assert (forall ((a@@146 T@U) (b@@95 T@U) ) (!  (=> (and (= (type a@@146) DatatypeTypeType) (= (type b@@95) DatatypeTypeType)) (and (=> (|UI.Op#Equal| a@@146 b@@95) (= a@@146 b@@95)) (=> (= a@@146 b@@95) (|UI.Op#Equal| a@@146 b@@95)))) :qid |unknown.0:0| :skolemid |1984| :pattern ( (|UI.Op#Equal| a@@146 b@@95)) )))
(assert (= (type Tclass.UI.__default) TyType))
(assert (= (Tag Tclass.UI.__default) Tagclass.UI.__default))
(assert (forall ((bx@@110 T@U) ) (!  (=> (and (= (type bx@@110) BoxType) ($IsBox bx@@110 Tclass.UI.__default)) (and (= ($Box ($Unbox refType bx@@110)) bx@@110) ($Is ($Unbox refType bx@@110) Tclass.UI.__default))) :qid |unknown.0:0| :skolemid |1985| :pattern ( ($IsBox bx@@110 Tclass.UI.__default)) )))
(assert (forall (($o@@32 T@U) ) (!  (=> (= (type $o@@32) refType) (and (=> ($Is $o@@32 Tclass.UI.__default) (or (= $o@@32 null) (= (dtype $o@@32) Tclass.UI.__default))) (=> (or (= $o@@32 null) (= (dtype $o@@32) Tclass.UI.__default)) ($Is $o@@32 Tclass.UI.__default)))) :qid |unknown.0:0| :skolemid |1986| :pattern ( ($Is $o@@32 Tclass.UI.__default)) )))
(assert (forall (($o@@33 T@U) ($h@@91 T@U) ) (!  (=> (and (= (type $o@@33) refType) (= (type $h@@91) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@33 Tclass.UI.__default $h@@91) (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@91 $o@@33) alloc)))) (=> (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@91 $o@@33) alloc))) ($IsAlloc $o@@33 Tclass.UI.__default $h@@91)))) :qid |unknown.0:0| :skolemid |1987| :pattern ( ($IsAlloc $o@@33 Tclass.UI.__default $h@@91)) )))
(assert (forall ((arg0@@301 T@U) (arg1@@160 T@U) ) (! (= (type (|#Journal.JournalEntry.JournalInsert| arg0@@301 arg1@@160)) DatatypeTypeType) :qid |funType:#Journal.JournalEntry.JournalInsert| :pattern ( (|#Journal.JournalEntry.JournalInsert| arg0@@301 arg1@@160)) )))
(assert (forall ((|a#116#0#0| T@U) (|a#116#1#0| T@U) ) (!  (=> (and (= (type |a#116#0#0|) (SeqType BoxType)) (= (type |a#116#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#Journal.JournalEntry.JournalInsert| |a#116#0#0| |a#116#1#0|)) |##Journal.JournalEntry.JournalInsert|)) :qid |Journali.12:41| :skolemid |1988| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#116#0#0| |a#116#1#0|)) )))
(assert (forall ((d@@96 T@U) ) (!  (=> (= (type d@@96) DatatypeTypeType) (and (=> (Journal.JournalEntry.JournalInsert_q d@@96) (= (DatatypeCtorId d@@96) |##Journal.JournalEntry.JournalInsert|)) (=> (= (DatatypeCtorId d@@96) |##Journal.JournalEntry.JournalInsert|) (Journal.JournalEntry.JournalInsert_q d@@96)))) :qid |unknown.0:0| :skolemid |1989| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@96)) )))
(assert (forall ((d@@97 T@U) ) (!  (=> (and (= (type d@@97) DatatypeTypeType) (Journal.JournalEntry.JournalInsert_q d@@97)) (exists ((|a#117#0#0| T@U) (|a#117#1#0| T@U) ) (!  (and (and (= (type |a#117#0#0|) (SeqType BoxType)) (= (type |a#117#1#0|) (SeqType BoxType))) (= d@@97 (|#Journal.JournalEntry.JournalInsert| |a#117#0#0| |a#117#1#0|))) :qid |Journali.12:41| :skolemid |1990| :no-pattern (type |a#117#0#0|) :no-pattern (type |a#117#1#0|) :no-pattern (U_2_int |a#117#0#0|) :no-pattern (U_2_bool |a#117#0#0|) :no-pattern (U_2_int |a#117#1#0|) :no-pattern (U_2_bool |a#117#1#0|) ))) :qid |unknown.0:0| :skolemid |1991| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@97)) )))
(assert (forall ((|a#118#0#0| T@U) (|a#118#1#0| T@U) ) (!  (=> (and (= (type |a#118#0#0|) (SeqType BoxType)) (= (type |a#118#1#0|) (SeqType BoxType))) (and (=> ($Is (|#Journal.JournalEntry.JournalInsert| |a#118#0#0| |a#118#1#0|) Tclass.Journal.JournalEntry) (and ($Is |a#118#0#0| Tclass.KeyType.Key) ($Is |a#118#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#118#0#0| Tclass.KeyType.Key) ($Is |a#118#1#0| Tclass.ValueType.Value)) ($Is (|#Journal.JournalEntry.JournalInsert| |a#118#0#0| |a#118#1#0|) Tclass.Journal.JournalEntry)))) :qid |Journali.12:41| :skolemid |1992| :pattern ( ($Is (|#Journal.JournalEntry.JournalInsert| |a#118#0#0| |a#118#1#0|) Tclass.Journal.JournalEntry)) )))
(assert (forall ((|a#119#0#0| T@U) (|a#119#1#0| T@U) ($h@@92 T@U) ) (!  (=> (and (and (and (= (type |a#119#0#0|) (SeqType BoxType)) (= (type |a#119#1#0|) (SeqType BoxType))) (= (type $h@@92) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@92)) (and (=> ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#119#0#0| |a#119#1#0|) Tclass.Journal.JournalEntry $h@@92) (and ($IsAlloc |a#119#0#0| Tclass.KeyType.Key $h@@92) ($IsAlloc |a#119#1#0| Tclass.ValueType.Value $h@@92))) (=> (and ($IsAlloc |a#119#0#0| Tclass.KeyType.Key $h@@92) ($IsAlloc |a#119#1#0| Tclass.ValueType.Value $h@@92)) ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#119#0#0| |a#119#1#0|) Tclass.Journal.JournalEntry $h@@92)))) :qid |Journali.12:41| :skolemid |1993| :pattern ( ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#119#0#0| |a#119#1#0|) Tclass.Journal.JournalEntry $h@@92)) )))
(assert (forall ((arg0@@302 T@U) ) (! (= (type (Journal.JournalEntry.key arg0@@302)) (SeqType BoxType)) :qid |funType:Journal.JournalEntry.key| :pattern ( (Journal.JournalEntry.key arg0@@302)) )))
(assert (forall ((d@@98 T@U) ($h@@93 T@U) ) (!  (=> (and (and (= (type d@@98) DatatypeTypeType) (= (type $h@@93) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@93) (and (Journal.JournalEntry.JournalInsert_q d@@98) ($IsAlloc d@@98 Tclass.Journal.JournalEntry $h@@93)))) ($IsAlloc (Journal.JournalEntry.key d@@98) Tclass.KeyType.Key $h@@93)) :qid |unknown.0:0| :skolemid |1994| :pattern ( ($IsAlloc (Journal.JournalEntry.key d@@98) Tclass.KeyType.Key $h@@93)) )))
(assert (forall ((arg0@@303 T@U) ) (! (= (type (Journal.JournalEntry.value arg0@@303)) (SeqType BoxType)) :qid |funType:Journal.JournalEntry.value| :pattern ( (Journal.JournalEntry.value arg0@@303)) )))
(assert (forall ((d@@99 T@U) ($h@@94 T@U) ) (!  (=> (and (and (= (type d@@99) DatatypeTypeType) (= (type $h@@94) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@94) (and (Journal.JournalEntry.JournalInsert_q d@@99) ($IsAlloc d@@99 Tclass.Journal.JournalEntry $h@@94)))) ($IsAlloc (Journal.JournalEntry.value d@@99) Tclass.ValueType.Value $h@@94)) :qid |unknown.0:0| :skolemid |1995| :pattern ( ($IsAlloc (Journal.JournalEntry.value d@@99) Tclass.ValueType.Value $h@@94)) )))
(assert (forall ((|a#120#0#0| T@U) (|a#120#1#0| T@U) ) (!  (=> (and (= (type |a#120#0#0|) (SeqType BoxType)) (= (type |a#120#1#0|) (SeqType BoxType))) (= (|#Journal.JournalEntry.JournalInsert| (Lit |a#120#0#0|) (Lit |a#120#1#0|)) (Lit (|#Journal.JournalEntry.JournalInsert| |a#120#0#0| |a#120#1#0|)))) :qid |Journali.12:41| :skolemid |1996| :pattern ( (|#Journal.JournalEntry.JournalInsert| (Lit |a#120#0#0|) (Lit |a#120#1#0|))) )))
(assert (forall ((|a#121#0#0| T@U) (|a#121#1#0| T@U) ) (!  (=> (and (= (type |a#121#0#0|) (SeqType BoxType)) (= (type |a#121#1#0|) (SeqType BoxType))) (= (Journal.JournalEntry.key (|#Journal.JournalEntry.JournalInsert| |a#121#0#0| |a#121#1#0|)) |a#121#0#0|)) :qid |Journali.12:41| :skolemid |1997| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#121#0#0| |a#121#1#0|)) )))
(assert (forall ((|a#122#0#0| T@U) (|a#122#1#0| T@U) ) (!  (=> (and (= (type |a#122#0#0|) (SeqType BoxType)) (= (type |a#122#1#0|) (SeqType BoxType))) (= (Journal.JournalEntry.value (|#Journal.JournalEntry.JournalInsert| |a#122#0#0| |a#122#1#0|)) |a#122#1#0|)) :qid |Journali.12:41| :skolemid |1998| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#122#0#0| |a#122#1#0|)) )))
(assert (forall ((d@@100 T@U) ) (!  (=> (and (= (type d@@100) DatatypeTypeType) (|$IsA#Journal.JournalEntry| d@@100)) (Journal.JournalEntry.JournalInsert_q d@@100)) :qid |unknown.0:0| :skolemid |1999| :pattern ( (|$IsA#Journal.JournalEntry| d@@100)) )))
(assert (forall ((d@@101 T@U) ) (!  (=> (and (= (type d@@101) DatatypeTypeType) ($Is d@@101 Tclass.Journal.JournalEntry)) (Journal.JournalEntry.JournalInsert_q d@@101)) :qid |unknown.0:0| :skolemid |2000| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@101) ($Is d@@101 Tclass.Journal.JournalEntry)) )))
(assert (forall ((a@@147 T@U) (b@@96 T@U) ) (!  (=> (and (and (= (type a@@147) DatatypeTypeType) (= (type b@@96) DatatypeTypeType)) true) (and (=> (|Journal.JournalEntry#Equal| a@@147 b@@96) (and (|Seq#Equal| (Journal.JournalEntry.key a@@147) (Journal.JournalEntry.key b@@96)) (|Seq#Equal| (Journal.JournalEntry.value a@@147) (Journal.JournalEntry.value b@@96)))) (=> (and (|Seq#Equal| (Journal.JournalEntry.key a@@147) (Journal.JournalEntry.key b@@96)) (|Seq#Equal| (Journal.JournalEntry.value a@@147) (Journal.JournalEntry.value b@@96))) (|Journal.JournalEntry#Equal| a@@147 b@@96)))) :qid |unknown.0:0| :skolemid |2001| :pattern ( (|Journal.JournalEntry#Equal| a@@147 b@@96)) )))
(assert (forall ((a@@148 T@U) (b@@97 T@U) ) (!  (=> (and (= (type a@@148) DatatypeTypeType) (= (type b@@97) DatatypeTypeType)) (and (=> (|Journal.JournalEntry#Equal| a@@148 b@@97) (= a@@148 b@@97)) (=> (= a@@148 b@@97) (|Journal.JournalEntry#Equal| a@@148 b@@97)))) :qid |unknown.0:0| :skolemid |2002| :pattern ( (|Journal.JournalEntry#Equal| a@@148 b@@97)) )))
(assert (= (type Tclass.Journal.__default) TyType))
(assert (= (Tag Tclass.Journal.__default) Tagclass.Journal.__default))
(assert (forall ((bx@@111 T@U) ) (!  (=> (and (= (type bx@@111) BoxType) ($IsBox bx@@111 Tclass.Journal.__default)) (and (= ($Box ($Unbox refType bx@@111)) bx@@111) ($Is ($Unbox refType bx@@111) Tclass.Journal.__default))) :qid |unknown.0:0| :skolemid |2003| :pattern ( ($IsBox bx@@111 Tclass.Journal.__default)) )))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (and (=> ($Is $o@@34 Tclass.Journal.__default) (or (= $o@@34 null) (= (dtype $o@@34) Tclass.Journal.__default))) (=> (or (= $o@@34 null) (= (dtype $o@@34) Tclass.Journal.__default)) ($Is $o@@34 Tclass.Journal.__default)))) :qid |unknown.0:0| :skolemid |2004| :pattern ( ($Is $o@@34 Tclass.Journal.__default)) )))
(assert (forall (($o@@35 T@U) ($h@@95 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@35 Tclass.Journal.__default $h@@95) (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@95 $o@@35) alloc)))) (=> (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@95 $o@@35) alloc))) ($IsAlloc $o@@35 Tclass.Journal.__default $h@@95)))) :qid |unknown.0:0| :skolemid |2005| :pattern ( ($IsAlloc $o@@35 Tclass.Journal.__default $h@@95)) )))
(assert (forall ((arg0@@304 T@U) ) (! (= (type (Journal.__default.JournalEntriesForUIOp arg0@@304)) (SeqType BoxType)) :qid |funType:Journal.__default.JournalEntriesForUIOp| :pattern ( (Journal.__default.JournalEntriesForUIOp arg0@@304)) )))
(assert  (=> true (forall ((|uiop#0| T@U) ) (!  (=> (and (= (type |uiop#0|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| |uiop#0|) ($Is |uiop#0| Tclass.UI.Op))) ($Is (Journal.__default.JournalEntriesForUIOp |uiop#0|) (TSeq Tclass.Journal.JournalEntry))) :qid |Journali.14:34| :skolemid |2006| :pattern ( (Journal.__default.JournalEntriesForUIOp |uiop#0|)) ))))
(assert (forall ((|uiop#0@@0| T@U) ) (!  (=> (and (= (type |uiop#0@@0|) DatatypeTypeType) ($Is |uiop#0@@0| Tclass.UI.Op)) (and (=> (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@0|) true) (=> true (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@0|)))) :qid |Journali.14:34| :skolemid |2007| :pattern ( (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@0|)) )))
(assert  (=> true (forall ((|uiop#0@@1| T@U) ) (!  (=> (and (= (type |uiop#0@@1|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| |uiop#0@@1|) ($Is |uiop#0@@1| Tclass.UI.Op))) (= (Journal.__default.JournalEntriesForUIOp |uiop#0@@1|) (ite (UI.Op.PutOp_q |uiop#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#Journal.JournalEntry.JournalInsert| (UI.Op.key |uiop#0@@1|) (UI.Op.value |uiop#0@@1|)))) (|Seq#Empty| BoxType)))) :qid |Journali.14:34| :skolemid |2008| :pattern ( (Journal.__default.JournalEntriesForUIOp |uiop#0@@1|)) ))))
(assert  (=> true (forall ((|uiop#0@@2| T@U) ) (!  (=> (and (= (type |uiop#0@@2|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit |uiop#0@@2|)) ($Is |uiop#0@@2| Tclass.UI.Op))) (= (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@2|)) (ite (UI.Op.PutOp_q (Lit |uiop#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#Journal.JournalEntry.JournalInsert| (Lit (UI.Op.key (Lit |uiop#0@@2|))) (Lit (UI.Op.value (Lit |uiop#0@@2|))))))) (|Seq#Empty| BoxType)))) :qid |Journali.14:34| :weight 3 :skolemid |2009| :pattern ( (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@2|))) ))))
(assert (forall ((arg0@@305 T@U) (arg1@@161 T@U) ) (! (= (type (Journal.__default.JournalEntriesForUIOps arg0@@305 arg1@@161)) (SeqType BoxType)) :qid |funType:Journal.__default.JournalEntriesForUIOps| :pattern ( (Journal.__default.JournalEntriesForUIOps arg0@@305 arg1@@161)) )))
(assert (forall (($ly@@223 T@U) (|uiops#0| T@U) ) (!  (=> (and (= (type $ly@@223) LayerTypeType) (= (type |uiops#0|) (SeqType BoxType))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@223) |uiops#0|) (Journal.__default.JournalEntriesForUIOps $ly@@223 |uiops#0|))) :qid |Journali.22:12| :skolemid |2010| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@223) |uiops#0|)) )))
(assert (forall (($ly@@224 T@U) (|uiops#0@@0| T@U) ) (!  (=> (and (= (type $ly@@224) LayerTypeType) (= (type |uiops#0@@0|) (SeqType BoxType))) (= (Journal.__default.JournalEntriesForUIOps $ly@@224 |uiops#0@@0|) (Journal.__default.JournalEntriesForUIOps $LZ |uiops#0@@0|))) :qid |Journali.22:12| :skolemid |2011| :pattern ( (Journal.__default.JournalEntriesForUIOps (AsFuelBottom $ly@@224) |uiops#0@@0|)) )))
(assert  (=> true (forall (($ly@@225 T@U) (|uiops#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@225) LayerTypeType) (= (type |uiops#0@@1|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#0@@1|) ($Is |uiops#0@@1| (TSeq Tclass.UI.Op)))) ($Is (Journal.__default.JournalEntriesForUIOps $ly@@225 |uiops#0@@1|) (TSeq Tclass.Journal.JournalEntry))) :qid |Journali.22:12| :skolemid |2012| :pattern ( (Journal.__default.JournalEntriesForUIOps $ly@@225 |uiops#0@@1|)) ))))
(assert (forall (($ly@@226 T@U) (|uiops#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@226) LayerTypeType) (= (type |uiops#0@@2|) (SeqType BoxType))) ($Is |uiops#0@@2| (TSeq Tclass.UI.Op))) (and (=> (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@226 |uiops#0@@2|) true) (=> true (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@226 |uiops#0@@2|)))) :qid |Journali.22:12| :skolemid |2013| :pattern ( (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@226 |uiops#0@@2|)) )))
(assert  (=> true (forall (($ly@@227 T@U) (|uiops#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@227) LayerTypeType) (= (type |uiops#0@@3|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#0@@3|) ($Is |uiops#0@@3| (TSeq Tclass.UI.Op)))) (and (=> (not (|Seq#Equal| |uiops#0@@3| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.UI.Op |uiops#0@@3|) (|Journal.__default.JournalEntriesForUIOps#canCall| (Sequences.__default.DropLast Tclass.UI.Op |uiops#0@@3|))) (and (|Sequences.__default.Last#canCall| Tclass.UI.Op |uiops#0@@3|) (|Journal.__default.JournalEntriesForUIOp#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op |uiops#0@@3|)))))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@227) |uiops#0@@3|) (ite (|Seq#Equal| |uiops#0@@3| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (Journal.__default.JournalEntriesForUIOps $ly@@227 (Sequences.__default.DropLast Tclass.UI.Op |uiops#0@@3|)) (Journal.__default.JournalEntriesForUIOp ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op |uiops#0@@3|)))))))) :qid |Journali.22:12| :skolemid |2014| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@227) |uiops#0@@3|)) ))))
(assert  (=> true (forall (($ly@@228 T@U) (|uiops#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@228) LayerTypeType) (= (type |uiops#0@@4|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| (Lit |uiops#0@@4|)) ($Is |uiops#0@@4| (TSeq Tclass.UI.Op)))) (and (=> (not (|Seq#Equal| |uiops#0@@4| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.UI.Op (Lit |uiops#0@@4|)) (|Journal.__default.JournalEntriesForUIOps#canCall| (Lit (Sequences.__default.DropLast Tclass.UI.Op (Lit |uiops#0@@4|))))) (and (|Sequences.__default.Last#canCall| Tclass.UI.Op (Lit |uiops#0@@4|)) (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op (Lit |uiops#0@@4|)))))))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@228) (Lit |uiops#0@@4|)) (ite (|Seq#Equal| |uiops#0@@4| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (Journal.__default.JournalEntriesForUIOps ($LS $ly@@228) (Lit (Sequences.__default.DropLast Tclass.UI.Op (Lit |uiops#0@@4|)))) (Journal.__default.JournalEntriesForUIOp (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op (Lit |uiops#0@@4|)))))))))) :qid |Journali.22:12| :weight 3 :skolemid |2015| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@228) (Lit |uiops#0@@4|))) ))))
(assert (= (type Tclass.JournalRanges.__default) TyType))
(assert (= (Tag Tclass.JournalRanges.__default) Tagclass.JournalRanges.__default))
(assert (forall ((bx@@112 T@U) ) (!  (=> (and (= (type bx@@112) BoxType) ($IsBox bx@@112 Tclass.JournalRanges.__default)) (and (= ($Box ($Unbox refType bx@@112)) bx@@112) ($Is ($Unbox refType bx@@112) Tclass.JournalRanges.__default))) :qid |unknown.0:0| :skolemid |2016| :pattern ( ($IsBox bx@@112 Tclass.JournalRanges.__default)) )))
(assert (forall (($o@@36 T@U) ) (!  (=> (= (type $o@@36) refType) (and (=> ($Is $o@@36 Tclass.JournalRanges.__default) (or (= $o@@36 null) (= (dtype $o@@36) Tclass.JournalRanges.__default))) (=> (or (= $o@@36 null) (= (dtype $o@@36) Tclass.JournalRanges.__default)) ($Is $o@@36 Tclass.JournalRanges.__default)))) :qid |unknown.0:0| :skolemid |2017| :pattern ( ($Is $o@@36 Tclass.JournalRanges.__default)) )))
(assert (forall (($o@@37 T@U) ($h@@96 T@U) ) (!  (=> (and (= (type $o@@37) refType) (= (type $h@@96) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@37 Tclass.JournalRanges.__default $h@@96) (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@96 $o@@37) alloc)))) (=> (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@96 $o@@37) alloc))) ($IsAlloc $o@@37 Tclass.JournalRanges.__default $h@@96)))) :qid |unknown.0:0| :skolemid |2018| :pattern ( ($IsAlloc $o@@37 Tclass.JournalRanges.__default $h@@96)) )))
(assert  (=> true (forall ((|jr#0| T@U) ) (!  (=> (and (= (type |jr#0|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeLen#canCall| |jr#0|) ($Is |jr#0| (TSeq Tclass.JournalRanges.JournalBlock)))) (>= (JournalRanges.__default.JournalRangeLen |jr#0|) (LitInt 0))) :qid |JournalR.28:28| :skolemid |2019| :pattern ( (JournalRanges.__default.JournalRangeLen |jr#0|)) ))))
(assert (forall ((|jr#0@@0| T@U) ) (!  (=> (and (= (type |jr#0@@0|) (SeqType BoxType)) ($Is |jr#0@@0| (TSeq Tclass.JournalRanges.JournalBlock))) (and (=> (|JournalRanges.__default.JournalRangeLen#requires| |jr#0@@0|) true) (=> true (|JournalRanges.__default.JournalRangeLen#requires| |jr#0@@0|)))) :qid |JournalR.28:28| :skolemid |2020| :pattern ( (|JournalRanges.__default.JournalRangeLen#requires| |jr#0@@0|)) )))
(assert  (=> true (forall ((|jr#0@@1| T@U) ) (!  (=> (and (= (type |jr#0@@1|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeLen#canCall| |jr#0@@1|) ($Is |jr#0@@1| (TSeq Tclass.JournalRanges.JournalBlock)))) (= (JournalRanges.__default.JournalRangeLen |jr#0@@1|) (|Seq#Length| |jr#0@@1|))) :qid |JournalR.28:28| :skolemid |2021| :pattern ( (JournalRanges.__default.JournalRangeLen |jr#0@@1|)) ))))
(assert  (=> true (forall ((|jr#0@@2| T@U) ) (!  (=> (and (= (type |jr#0@@2|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeLen#canCall| (Lit |jr#0@@2|)) ($Is |jr#0@@2| (TSeq Tclass.JournalRanges.JournalBlock)))) (= (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@2|)) (|Seq#Length| (Lit |jr#0@@2|)))) :qid |JournalR.28:28| :weight 3 :skolemid |2022| :pattern ( (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@2|))) ))))
(assert (forall ((arg0@@306 T@U) (arg1@@162 Int) ) (! (= (type (JournalRanges.__default.JournalRangePrefix arg0@@306 arg1@@162)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalRangePrefix| :pattern ( (JournalRanges.__default.JournalRangePrefix arg0@@306 arg1@@162)) )))
(assert  (=> true (forall ((|jr#0@@3| T@U) (|i#0@@85| Int) ) (!  (=> (and (= (type |jr#0@@3|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangePrefix#canCall| |jr#0@@3| |i#0@@85|) (and ($Is |jr#0@@3| (TSeq Tclass.JournalRanges.JournalBlock)) (and (<= (LitInt 0) |i#0@@85|) (<= |i#0@@85| (JournalRanges.__default.JournalRangeLen |jr#0@@3|)))))) (and (= (JournalRanges.__default.JournalRangeLen (JournalRanges.__default.JournalRangePrefix |jr#0@@3| |i#0@@85|)) |i#0@@85|) ($Is (JournalRanges.__default.JournalRangePrefix |jr#0@@3| |i#0@@85|) (TSeq Tclass.JournalRanges.JournalBlock)))) :qid |JournalR.34:31| :skolemid |2023| :pattern ( (JournalRanges.__default.JournalRangePrefix |jr#0@@3| |i#0@@85|)) ))))
(assert (forall ((|jr#0@@4| T@U) (|i#0@@86| Int) ) (!  (=> (and (= (type |jr#0@@4|) (SeqType BoxType)) ($Is |jr#0@@4| (TSeq Tclass.JournalRanges.JournalBlock))) (and (=> (|JournalRanges.__default.JournalRangePrefix#requires| |jr#0@@4| |i#0@@86|) (and (<= (LitInt 0) |i#0@@86|) (<= |i#0@@86| (JournalRanges.__default.JournalRangeLen |jr#0@@4|)))) (=> (and (<= (LitInt 0) |i#0@@86|) (<= |i#0@@86| (JournalRanges.__default.JournalRangeLen |jr#0@@4|))) (|JournalRanges.__default.JournalRangePrefix#requires| |jr#0@@4| |i#0@@86|)))) :qid |JournalR.34:31| :skolemid |2024| :pattern ( (|JournalRanges.__default.JournalRangePrefix#requires| |jr#0@@4| |i#0@@86|)) )))
(assert (forall ((arg0@@307 T@U) (arg1@@163 Int) ) (! (= (type (JournalRanges.__default.JournalRangeSuffix arg0@@307 arg1@@163)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalRangeSuffix| :pattern ( (JournalRanges.__default.JournalRangeSuffix arg0@@307 arg1@@163)) )))
(assert  (=> true (forall ((|jr#0@@5| T@U) (|i#0@@87| Int) ) (!  (=> (and (= (type |jr#0@@5|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeSuffix#canCall| |jr#0@@5| |i#0@@87|) (and ($Is |jr#0@@5| (TSeq Tclass.JournalRanges.JournalBlock)) (and (<= (LitInt 0) |i#0@@87|) (<= |i#0@@87| (JournalRanges.__default.JournalRangeLen |jr#0@@5|)))))) (and (= (JournalRanges.__default.JournalRangeLen (JournalRanges.__default.JournalRangeSuffix |jr#0@@5| |i#0@@87|)) (- (JournalRanges.__default.JournalRangeLen |jr#0@@5|) |i#0@@87|)) ($Is (JournalRanges.__default.JournalRangeSuffix |jr#0@@5| |i#0@@87|) (TSeq Tclass.JournalRanges.JournalBlock)))) :qid |JournalR.41:31| :skolemid |2025| :pattern ( (JournalRanges.__default.JournalRangeSuffix |jr#0@@5| |i#0@@87|)) ))))
(assert (forall ((|jr#0@@6| T@U) (|i#0@@88| Int) ) (!  (=> (and (= (type |jr#0@@6|) (SeqType BoxType)) ($Is |jr#0@@6| (TSeq Tclass.JournalRanges.JournalBlock))) (and (=> (|JournalRanges.__default.JournalRangeSuffix#requires| |jr#0@@6| |i#0@@88|) (and (<= (LitInt 0) |i#0@@88|) (<= |i#0@@88| (JournalRanges.__default.JournalRangeLen |jr#0@@6|)))) (=> (and (<= (LitInt 0) |i#0@@88|) (<= |i#0@@88| (JournalRanges.__default.JournalRangeLen |jr#0@@6|))) (|JournalRanges.__default.JournalRangeSuffix#requires| |jr#0@@6| |i#0@@88|)))) :qid |JournalR.41:31| :skolemid |2026| :pattern ( (|JournalRanges.__default.JournalRangeSuffix#requires| |jr#0@@6| |i#0@@88|)) )))
(assert (forall ((arg0@@308 T@U) (arg1@@164 T@U) ) (! (= (type (JournalRanges.__default.JournalRangeConcat arg0@@308 arg1@@164)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalRangeConcat| :pattern ( (JournalRanges.__default.JournalRangeConcat arg0@@308 arg1@@164)) )))
(assert  (=> true (forall ((|jr1#0| T@U) (|jr2#0| T@U) ) (!  (=> (and (and (= (type |jr1#0|) (SeqType BoxType)) (= (type |jr2#0|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeConcat#canCall| |jr1#0| |jr2#0|) (and ($Is |jr1#0| (TSeq Tclass.JournalRanges.JournalBlock)) ($Is |jr2#0| (TSeq Tclass.JournalRanges.JournalBlock))))) ($Is (JournalRanges.__default.JournalRangeConcat |jr1#0| |jr2#0|) (TSeq Tclass.JournalRanges.JournalBlock))) :qid |JournalR.49:31| :skolemid |2027| :pattern ( (JournalRanges.__default.JournalRangeConcat |jr1#0| |jr2#0|)) ))))
(assert (forall ((|jr1#0@@0| T@U) (|jr2#0@@0| T@U) ) (!  (=> (and (and (= (type |jr1#0@@0|) (SeqType BoxType)) (= (type |jr2#0@@0|) (SeqType BoxType))) (and ($Is |jr1#0@@0| (TSeq Tclass.JournalRanges.JournalBlock)) ($Is |jr2#0@@0| (TSeq Tclass.JournalRanges.JournalBlock)))) (and (=> (|JournalRanges.__default.JournalRangeConcat#requires| |jr1#0@@0| |jr2#0@@0|) true) (=> true (|JournalRanges.__default.JournalRangeConcat#requires| |jr1#0@@0| |jr2#0@@0|)))) :qid |JournalR.49:31| :skolemid |2028| :pattern ( (|JournalRanges.__default.JournalRangeConcat#requires| |jr1#0@@0| |jr2#0@@0|)) )))
(assert  (=> true (forall ((|jr1#0@@1| T@U) (|jr2#0@@1| T@U) ) (!  (=> (and (and (= (type |jr1#0@@1|) (SeqType BoxType)) (= (type |jr2#0@@1|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeConcat#canCall| |jr1#0@@1| |jr2#0@@1|) (and ($Is |jr1#0@@1| (TSeq Tclass.JournalRanges.JournalBlock)) ($Is |jr2#0@@1| (TSeq Tclass.JournalRanges.JournalBlock))))) (= (JournalRanges.__default.JournalRangeConcat |jr1#0@@1| |jr2#0@@1|) (|Seq#Append| |jr1#0@@1| |jr2#0@@1|))) :qid |JournalR.49:31| :skolemid |2029| :pattern ( (JournalRanges.__default.JournalRangeConcat |jr1#0@@1| |jr2#0@@1|)) ))))
(assert  (=> true (forall ((|jr1#0@@2| T@U) (|jr2#0@@2| T@U) ) (!  (=> (and (and (= (type |jr1#0@@2|) (SeqType BoxType)) (= (type |jr2#0@@2|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeConcat#canCall| (Lit |jr1#0@@2|) (Lit |jr2#0@@2|)) (and ($Is |jr1#0@@2| (TSeq Tclass.JournalRanges.JournalBlock)) ($Is |jr2#0@@2| (TSeq Tclass.JournalRanges.JournalBlock))))) (= (JournalRanges.__default.JournalRangeConcat (Lit |jr1#0@@2|) (Lit |jr2#0@@2|)) (|Seq#Append| |jr1#0@@2| |jr2#0@@2|))) :qid |JournalR.49:31| :weight 3 :skolemid |2030| :pattern ( (JournalRanges.__default.JournalRangeConcat (Lit |jr1#0@@2|) (Lit |jr2#0@@2|))) ))))
(assert (= (type JournalRanges.__default.JournalRangeEmpty) (SeqType BoxType)))
(assert  (=> true (=> true ($Is JournalRanges.__default.JournalRangeEmpty (TSeq Tclass.JournalRanges.JournalBlock)))))
(assert  (=> |JournalRanges.__default.JournalRangeEmpty#requires| true))
(assert  (=> true |JournalRanges.__default.JournalRangeEmpty#requires|))
(assert  (=> true (=> true (= JournalRanges.__default.JournalRangeEmpty (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= JournalRanges.__default.JournalRangeEmpty (Lit (|Seq#Empty| BoxType))))))
(assert (forall ((arg0@@309 T@U) ) (! (= (type (JournalRanges.__default.JournalBlocks arg0@@309)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalBlocks| :pattern ( (JournalRanges.__default.JournalBlocks arg0@@309)) )))
(assert  (=> true (forall ((|jr#0@@7| T@U) ) (!  (=> (and (= (type |jr#0@@7|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlocks#canCall| |jr#0@@7|) ($Is |jr#0@@7| (TSeq Tclass.JournalRanges.JournalBlock)))) (and (= (|Seq#Length| (JournalRanges.__default.JournalBlocks |jr#0@@7|)) (JournalRanges.__default.JournalRangeLen |jr#0@@7|)) ($Is (JournalRanges.__default.JournalBlocks |jr#0@@7|) (TSeq (TSeq Tclass.JournalRanges.JournalBlock))))) :qid |JournalR.69:26| :skolemid |2031| :pattern ( (JournalRanges.__default.JournalBlocks |jr#0@@7|)) ))))
(assert (forall ((|jr#0@@8| T@U) ) (!  (=> (and (= (type |jr#0@@8|) (SeqType BoxType)) ($Is |jr#0@@8| (TSeq Tclass.JournalRanges.JournalBlock))) (and (=> (|JournalRanges.__default.JournalBlocks#requires| |jr#0@@8|) true) (=> true (|JournalRanges.__default.JournalBlocks#requires| |jr#0@@8|)))) :qid |JournalR.69:26| :skolemid |2032| :pattern ( (|JournalRanges.__default.JournalBlocks#requires| |jr#0@@8|)) )))
(assert (forall ((arg0@@310 T@U) (arg1@@165 Int) ) (! (= (type (JournalRanges.__default.JournalBlockGet arg0@@310 arg1@@165)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalBlockGet| :pattern ( (JournalRanges.__default.JournalBlockGet arg0@@310 arg1@@165)) )))
(assert  (=> true (forall ((|jr#0@@9| T@U) (|i#0@@89| Int) ) (!  (=> (and (= (type |jr#0@@9|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlockGet#canCall| |jr#0@@9| |i#0@@89|) (and ($Is |jr#0@@9| (TSeq Tclass.JournalRanges.JournalBlock)) (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| (JournalRanges.__default.JournalRangeLen |jr#0@@9|)))))) ($Is (JournalRanges.__default.JournalBlockGet |jr#0@@9| |i#0@@89|) (TSeq Tclass.JournalRanges.JournalBlock))) :qid |JournalR.75:28| :skolemid |2033| :pattern ( (JournalRanges.__default.JournalBlockGet |jr#0@@9| |i#0@@89|)) ))))
(assert (forall ((|jr#0@@10| T@U) (|i#0@@90| Int) ) (!  (=> (and (= (type |jr#0@@10|) (SeqType BoxType)) ($Is |jr#0@@10| (TSeq Tclass.JournalRanges.JournalBlock))) (and (=> (|JournalRanges.__default.JournalBlockGet#requires| |jr#0@@10| |i#0@@90|) (and (<= (LitInt 0) |i#0@@90|) (< |i#0@@90| (JournalRanges.__default.JournalRangeLen |jr#0@@10|)))) (=> (and (<= (LitInt 0) |i#0@@90|) (< |i#0@@90| (JournalRanges.__default.JournalRangeLen |jr#0@@10|))) (|JournalRanges.__default.JournalBlockGet#requires| |jr#0@@10| |i#0@@90|)))) :qid |JournalR.75:28| :skolemid |2034| :pattern ( (|JournalRanges.__default.JournalBlockGet#requires| |jr#0@@10| |i#0@@90|)) )))
(assert  (=> true (forall ((|jr#0@@11| T@U) (|i#0@@91| Int) ) (!  (=> (and (= (type |jr#0@@11|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlockGet#canCall| |jr#0@@11| |i#0@@91|) (and ($Is |jr#0@@11| (TSeq Tclass.JournalRanges.JournalBlock)) (and (<= (LitInt 0) |i#0@@91|) (< |i#0@@91| (JournalRanges.__default.JournalRangeLen |jr#0@@11|)))))) (and (|JournalRanges.__default.JournalBlocks#canCall| |jr#0@@11|) (= (JournalRanges.__default.JournalBlockGet |jr#0@@11| |i#0@@91|) ($Unbox (SeqType BoxType) (|Seq#Index| (JournalRanges.__default.JournalBlocks |jr#0@@11|) |i#0@@91|))))) :qid |JournalR.75:28| :skolemid |2035| :pattern ( (JournalRanges.__default.JournalBlockGet |jr#0@@11| |i#0@@91|)) ))))
(assert  (=> true (forall ((|jr#0@@12| T@U) (|i#0@@92| Int) ) (!  (=> (and (= (type |jr#0@@12|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlockGet#canCall| (Lit |jr#0@@12|) (LitInt |i#0@@92|)) (and ($Is |jr#0@@12| (TSeq Tclass.JournalRanges.JournalBlock)) (and (<= (LitInt 0) (LitInt |i#0@@92|)) (< |i#0@@92| (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@12|))))))) (and (|JournalRanges.__default.JournalBlocks#canCall| (Lit |jr#0@@12|)) (= (JournalRanges.__default.JournalBlockGet (Lit |jr#0@@12|) (LitInt |i#0@@92|)) ($Unbox (SeqType BoxType) (|Seq#Index| (JournalRanges.__default.JournalBlocks (Lit |jr#0@@12|)) (LitInt |i#0@@92|)))))) :qid |JournalR.75:28| :weight 3 :skolemid |2036| :pattern ( (JournalRanges.__default.JournalBlockGet (Lit |jr#0@@12|) (LitInt |i#0@@92|))) ))))
(assert (forall (($ly@@229 T@U) (|jr#0@@13| T@U) ) (!  (=> (and (= (type $ly@@229) LayerTypeType) (= (type |jr#0@@13|) (SeqType BoxType))) (= (JournalRanges.__default.parseJournalRange ($LS $ly@@229) |jr#0@@13|) (JournalRanges.__default.parseJournalRange $ly@@229 |jr#0@@13|))) :qid |JournalR.138:12| :skolemid |2037| :pattern ( (JournalRanges.__default.parseJournalRange ($LS $ly@@229) |jr#0@@13|)) )))
(assert (forall (($ly@@230 T@U) (|jr#0@@14| T@U) ) (!  (=> (and (= (type $ly@@230) LayerTypeType) (= (type |jr#0@@14|) (SeqType BoxType))) (= (JournalRanges.__default.parseJournalRange $ly@@230 |jr#0@@14|) (JournalRanges.__default.parseJournalRange $LZ |jr#0@@14|))) :qid |JournalR.138:12| :skolemid |2038| :pattern ( (JournalRanges.__default.parseJournalRange (AsFuelBottom $ly@@230) |jr#0@@14|)) )))
(assert  (=> true (forall (($ly@@231 T@U) (|jr#0@@15| T@U) ) (!  (=> (and (and (= (type $ly@@231) LayerTypeType) (= (type |jr#0@@15|) (SeqType BoxType))) (or (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@@15|) ($Is |jr#0@@15| (TSeq Tclass.JournalRanges.JournalBlock)))) ($Is (JournalRanges.__default.parseJournalRange $ly@@231 |jr#0@@15|) (Tclass.Options.Option (TSeq Tclass.Journal.JournalEntry)))) :qid |JournalR.138:12| :skolemid |2039| :pattern ( (JournalRanges.__default.parseJournalRange $ly@@231 |jr#0@@15|)) ))))
(assert (forall (($ly@@232 T@U) (|jr#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@232) LayerTypeType) (= (type |jr#0@@16|) (SeqType BoxType))) ($Is |jr#0@@16| (TSeq Tclass.JournalRanges.JournalBlock))) (and (=> (|JournalRanges.__default.parseJournalRange#requires| $ly@@232 |jr#0@@16|) true) (=> true (|JournalRanges.__default.parseJournalRange#requires| $ly@@232 |jr#0@@16|)))) :qid |JournalR.138:12| :skolemid |2040| :pattern ( (|JournalRanges.__default.parseJournalRange#requires| $ly@@232 |jr#0@@16|)) )))
(assert  (=> true (forall ((|jr#0@@17| T@U) (|jes#0| T@U) ) (!  (=> (and (and (= (type |jr#0@@17|) (SeqType BoxType)) (= (type |jes#0|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeParses#canCall| |jr#0@@17| |jes#0|) (and ($Is |jr#0@@17| (TSeq Tclass.JournalRanges.JournalBlock)) ($Is |jes#0| (TSeq Tclass.Journal.JournalEntry))))) true) :qid |JournalR.169:32| :skolemid |2041| :pattern ( (JournalRanges.__default.JournalRangeParses |jr#0@@17| |jes#0|)) ))))
(assert (forall ((|jr#0@@18| T@U) (|jes#0@@0| T@U) ) (!  (=> (and (and (= (type |jr#0@@18|) (SeqType BoxType)) (= (type |jes#0@@0|) (SeqType BoxType))) (and ($Is |jr#0@@18| (TSeq Tclass.JournalRanges.JournalBlock)) ($Is |jes#0@@0| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (|JournalRanges.__default.JournalRangeParses#requires| |jr#0@@18| |jes#0@@0|) true) (=> true (|JournalRanges.__default.JournalRangeParses#requires| |jr#0@@18| |jes#0@@0|)))) :qid |JournalR.169:32| :skolemid |2042| :pattern ( (|JournalRanges.__default.JournalRangeParses#requires| |jr#0@@18| |jes#0@@0|)) )))
(assert  (=> true (forall ((|jr#0@@19| T@U) (|jes#0@@1| T@U) ) (!  (=> (and (and (= (type |jr#0@@19|) (SeqType BoxType)) (= (type |jes#0@@1|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeParses#canCall| |jr#0@@19| |jes#0@@1|) (and ($Is |jr#0@@19| (TSeq Tclass.JournalRanges.JournalBlock)) ($Is |jes#0@@1| (TSeq Tclass.Journal.JournalEntry))))) (and (and (|$IsA#Options.Option| (JournalRanges.__default.parseJournalRange ($LS $LZ) |jr#0@@19|)) (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@@19|)) (and (=> (JournalRanges.__default.JournalRangeParses |jr#0@@19| |jes#0@@1|) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) |jr#0@@19|) (|#Options.Option.Some| ($Box |jes#0@@1|)))) (=> (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) |jr#0@@19|) (|#Options.Option.Some| ($Box |jes#0@@1|))) (JournalRanges.__default.JournalRangeParses |jr#0@@19| |jes#0@@1|))))) :qid |JournalR.169:32| :skolemid |2043| :pattern ( (JournalRanges.__default.JournalRangeParses |jr#0@@19| |jes#0@@1|)) ))))
(assert  (=> true (forall ((|jr#0@@20| T@U) (|jes#0@@2| T@U) ) (!  (=> (and (and (= (type |jr#0@@20|) (SeqType BoxType)) (= (type |jes#0@@2|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeParses#canCall| (Lit |jr#0@@20|) (Lit |jes#0@@2|)) (and ($Is |jr#0@@20| (TSeq Tclass.JournalRanges.JournalBlock)) ($Is |jes#0@@2| (TSeq Tclass.Journal.JournalEntry))))) (and (and (|$IsA#Options.Option| (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit |jr#0@@20|))) (|JournalRanges.__default.parseJournalRange#canCall| (Lit |jr#0@@20|))) (and (=> (JournalRanges.__default.JournalRangeParses (Lit |jr#0@@20|) (Lit |jes#0@@2|)) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit |jr#0@@20|)) (|#Options.Option.Some| ($Box (Lit |jes#0@@2|))))) (=> (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit |jr#0@@20|)) (|#Options.Option.Some| ($Box (Lit |jes#0@@2|)))) (JournalRanges.__default.JournalRangeParses (Lit |jr#0@@20|) (Lit |jes#0@@2|)))))) :qid |JournalR.169:32| :weight 3 :skolemid |2044| :pattern ( (JournalRanges.__default.JournalRangeParses (Lit |jr#0@@20|) (Lit |jes#0@@2|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@311 T@T) (arg1@@166 T@T) ) (! (= (Ctor (MapType6Type arg0@@311 arg1@@166)) 25) :qid |ctor:MapType6Type| )) (forall ((arg0@@312 T@T) (arg1@@167 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@312 arg1@@167)) arg0@@312) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@312 arg1@@167)) ))) (forall ((arg0@@313 T@T) (arg1@@168 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@313 arg1@@168)) arg1@@168) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@313 arg1@@168)) ))) (forall ((arg0@@314 T@U) (arg1@@169 T@U) (arg2@@90 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@314)))) (= (type (MapType6Select arg0@@314 arg1@@169 arg2@@90)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@314 arg1@@169 arg2@@90)) ))) (forall ((arg0@@315 T@U) (arg1@@170 T@U) (arg2@@91 T@U) (arg3@@62 T@U) ) (! (let ((aVar1@@7 (type arg3@@62))) (let ((aVar0@@4 (type arg1@@170))) (= (type (MapType6Store arg0@@315 arg1@@170 arg2@@91 arg3@@62)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@315 arg1@@170 arg2@@91 arg3@@62)) ))) (forall ((m@@49 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@49)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@49 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@50 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@50 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@50 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@51 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@51 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@51 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@52 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@52 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@52 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@316 T@U) (arg1@@171 T@U) (arg2@@92 T@U) (arg3@@63 Bool) ) (! (= (type (|lambda#0| arg0@@316 arg1@@171 arg2@@92 arg3@@63)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@316 arg1@@171 arg2@@92 arg3@@63)) ))))
(assert (forall (($o@@38 T@U) ($f@@4 T@U) (|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type $o@@38) refType) (= (type $f@@4) (FieldType alpha@@11))) (= (type |l#0|) refType)) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@38 $f@@4))  (=> (and (not (= $o@@38 |l#0|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@38) |l#2|))) |l#3|)))) :qid |JournalI.15:13| :skolemid |2045| :pattern ( (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@38 $f@@4)) )))
(assert (forall ((arg0@@317 T@U) (arg1@@172 T@U) (arg2@@93 T@U) (arg3@@64 Bool) ) (! (= (type (|lambda#1| arg0@@317 arg1@@172 arg2@@93 arg3@@64)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@317 arg1@@172 arg2@@93 arg3@@64)) )))
(assert (forall (($o@@39 T@U) ($f@@5 T@U) (|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type $o@@39) refType) (= (type $f@@5) (FieldType alpha@@12))) (= (type |l#0@@0|) refType)) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@39 $f@@5))  (=> (and (not (= $o@@39 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@39) |l#2@@0|))) |l#3@@0|)))) :qid |JournalI.15:13| :skolemid |2046| :pattern ( (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@39 $f@@5)) )))
(assert (forall ((arg0@@318 T@U) (arg1@@173 T@U) (arg2@@94 T@U) (arg3@@65 Bool) ) (! (= (type (|lambda#2| arg0@@318 arg1@@173 arg2@@94 arg3@@65)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@318 arg1@@173 arg2@@94 arg3@@65)) )))
(assert (forall (($o@@40 T@U) ($f@@6 T@U) (|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type $o@@40) refType) (= (type $f@@6) (FieldType alpha@@13))) (= (type |l#0@@1|) refType)) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@40 $f@@6))  (=> (and (not (= $o@@40 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@40) |l#2@@1|))) |l#3@@1|)))) :qid |JournalI.21:13| :skolemid |2047| :pattern ( (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@40 $f@@6)) )))
(assert (forall ((arg0@@319 T@U) (arg1@@174 T@U) (arg2@@95 T@U) (arg3@@66 Bool) ) (! (= (type (|lambda#3| arg0@@319 arg1@@174 arg2@@95 arg3@@66)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@319 arg1@@174 arg2@@95 arg3@@66)) )))
(assert (forall (($o@@41 T@U) ($f@@7 T@U) (|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type $o@@41) refType) (= (type $f@@7) (FieldType alpha@@14))) (= (type |l#0@@2|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@41 $f@@7))  (=> (and (not (= $o@@41 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@41) |l#2@@2|))) |l#3@@2|)))) :qid |JournalI.21:13| :skolemid |2048| :pattern ( (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@41 $f@@7)) )))
(assert (forall ((arg0@@320 T@U) (arg1@@175 T@U) (arg2@@96 T@U) (arg3@@67 Bool) ) (! (= (type (|lambda#4| arg0@@320 arg1@@175 arg2@@96 arg3@@67)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@320 arg1@@175 arg2@@96 arg3@@67)) )))
(assert (forall (($o@@42 T@U) ($f@@8 T@U) (|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type $o@@42) refType) (= (type $f@@8) (FieldType alpha@@15))) (= (type |l#0@@3|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@42 $f@@8))  (=> (and (not (= $o@@42 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@42) |l#2@@3|))) |l#3@@3|)))) :qid |JournalI.27:13| :skolemid |2049| :pattern ( (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@42 $f@@8)) )))
(assert (forall ((arg0@@321 T@U) (arg1@@176 T@U) (arg2@@97 T@U) (arg3@@68 Bool) ) (! (= (type (|lambda#5| arg0@@321 arg1@@176 arg2@@97 arg3@@68)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@321 arg1@@176 arg2@@97 arg3@@68)) )))
(assert (forall (($o@@43 T@U) ($f@@9 T@U) (|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type $o@@43) refType) (= (type $f@@9) (FieldType alpha@@16))) (= (type |l#0@@4|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@43 $f@@9))  (=> (and (not (= $o@@43 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@43) |l#2@@4|))) |l#3@@4|)))) :qid |JournalI.27:13| :skolemid |2050| :pattern ( (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@43 $f@@9)) )))
(assert (forall ((arg0@@322 T@U) (arg1@@177 T@U) (arg2@@98 T@U) (arg3@@69 Bool) ) (! (= (type (|lambda#6| arg0@@322 arg1@@177 arg2@@98 arg3@@69)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@322 arg1@@177 arg2@@98 arg3@@69)) )))
(assert (forall (($o@@44 T@U) ($f@@10 T@U) (|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type $o@@44) refType) (= (type $f@@10) (FieldType alpha@@17))) (= (type |l#0@@5|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@44 $f@@10))  (=> (and (not (= $o@@44 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@44) |l#2@@5|))) |l#3@@5|)))) :qid |JournalI.32:12| :skolemid |2051| :pattern ( (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@44 $f@@10)) )))
(assert (forall ((arg0@@323 T@U) (arg1@@178 T@U) (arg2@@99 T@U) (arg3@@70 Bool) ) (! (= (type (|lambda#7| arg0@@323 arg1@@178 arg2@@99 arg3@@70)) (MapType6Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@323 arg1@@178 arg2@@99 arg3@@70)) )))
(assert (forall (($o@@45 T@U) ($f@@11 T@U) (|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type $o@@45) refType) (= (type $f@@11) (FieldType alpha@@18))) (= (type |l#0@@6|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@45 $f@@11))  (=> (and (not (= $o@@45 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@45) |l#2@@6|))) |l#3@@6|)))) :qid |JournalI.32:12| :skolemid |2052| :pattern ( (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@45 $f@@11)) )))
(assert (forall ((arg0@@324 T@U) (arg1@@179 T@U) (arg2@@100 T@U) (arg3@@71 Bool) ) (! (= (type (|lambda#8| arg0@@324 arg1@@179 arg2@@100 arg3@@71)) (MapType6Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@324 arg1@@179 arg2@@100 arg3@@71)) )))
(assert (forall (($o@@46 T@U) ($f@@12 T@U) (|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type $o@@46) refType) (= (type $f@@12) (FieldType alpha@@19))) (= (type |l#0@@7|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@46 $f@@12))  (=> (and (not (= $o@@46 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@46) |l#2@@7|))) |l#3@@7|)))) :qid |JournalI.51:23| :skolemid |2053| :pattern ( (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@46 $f@@12)) )))
(assert (forall ((arg0@@325 T@U) (arg1@@180 T@U) (arg2@@101 T@U) (arg3@@72 Bool) ) (! (= (type (|lambda#9| arg0@@325 arg1@@180 arg2@@101 arg3@@72)) (MapType6Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@325 arg1@@180 arg2@@101 arg3@@72)) )))
(assert (forall (($o@@47 T@U) ($f@@13 T@U) (|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type $o@@47) refType) (= (type $f@@13) (FieldType alpha@@20))) (= (type |l#0@@8|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@47 $f@@13))  (=> (and (not (= $o@@47 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@47) |l#2@@8|))) |l#3@@8|)))) :qid |JournalI.51:23| :skolemid |2054| :pattern ( (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@47 $f@@13)) )))
(assert (forall ((arg0@@326 T@U) (arg1@@181 T@U) (arg2@@102 T@U) (arg3@@73 Bool) ) (! (= (type (|lambda#10| arg0@@326 arg1@@181 arg2@@102 arg3@@73)) (MapType6Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@326 arg1@@181 arg2@@102 arg3@@73)) )))
(assert (forall (($o@@48 T@U) ($f@@14 T@U) (|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type $o@@48) refType) (= (type $f@@14) (FieldType alpha@@21))) (= (type |l#0@@9|) refType)) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@48 $f@@14))  (=> (and (not (= $o@@48 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@48) |l#2@@9|))) |l#3@@9|)))) :qid |JournalI.71:13| :skolemid |2055| :pattern ( (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@48 $f@@14)) )))
(assert (forall ((arg0@@327 T@U) (arg1@@182 T@U) (arg2@@103 T@U) (arg3@@74 Bool) ) (! (= (type (|lambda#11| arg0@@327 arg1@@182 arg2@@103 arg3@@74)) (MapType6Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@327 arg1@@182 arg2@@103 arg3@@74)) )))
(assert (forall (($o@@49 T@U) ($f@@15 T@U) (|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type $o@@49) refType) (= (type $f@@15) (FieldType alpha@@22))) (= (type |l#0@@10|) refType)) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@49 $f@@15))  (=> (and (not (= $o@@49 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@49) |l#2@@10|))) |l#3@@10|)))) :qid |JournalI.71:13| :skolemid |2056| :pattern ( (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@49 $f@@15)) )))
(assert (forall ((arg0@@328 T@U) (arg1@@183 T@U) (arg2@@104 T@U) (arg3@@75 Bool) ) (! (= (type (|lambda#12| arg0@@328 arg1@@183 arg2@@104 arg3@@75)) (MapType6Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@328 arg1@@183 arg2@@104 arg3@@75)) )))
(assert (forall (($o@@50 T@U) ($f@@16 T@U) (|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type $o@@50) refType) (= (type $f@@16) (FieldType alpha@@23))) (= (type |l#0@@11|) refType)) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@50 $f@@16))  (=> (and (not (= $o@@50 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@50) |l#2@@11|))) |l#3@@11|)))) :qid |JournalI.77:12| :skolemid |2057| :pattern ( (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@50 $f@@16)) )))
(assert (forall ((arg0@@329 T@U) (arg1@@184 T@U) (arg2@@105 T@U) (arg3@@76 Bool) ) (! (= (type (|lambda#13| arg0@@329 arg1@@184 arg2@@105 arg3@@76)) (MapType6Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@329 arg1@@184 arg2@@105 arg3@@76)) )))
(assert (forall (($o@@51 T@U) ($f@@17 T@U) (|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type $o@@51) refType) (= (type $f@@17) (FieldType alpha@@24))) (= (type |l#0@@12|) refType)) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@51 $f@@17))  (=> (and (not (= $o@@51 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@51) |l#2@@12|))) |l#3@@12|)))) :qid |JournalI.77:12| :skolemid |2058| :pattern ( (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@51 $f@@17)) )))
(assert (forall ((arg0@@330 T@U) (arg1@@185 T@U) (arg2@@106 T@U) (arg3@@77 Bool) ) (! (= (type (|lambda#14| arg0@@330 arg1@@185 arg2@@106 arg3@@77)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@330 arg1@@185 arg2@@106 arg3@@77)) )))
(assert (forall (($o@@52 T@U) ($f@@18 T@U) (|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type $o@@52) refType) (= (type $f@@18) (FieldType alpha@@25))) (= (type |l#0@@13|) refType)) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@52 $f@@18))  (=> (and (not (= $o@@52 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@52) |l#2@@13|))) |l#3@@13|)))) :qid |JournalI.93:12| :skolemid |2059| :pattern ( (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@52 $f@@18)) )))
(assert (forall ((arg0@@331 T@U) (arg1@@186 T@U) (arg2@@107 T@U) (arg3@@78 Bool) ) (! (= (type (|lambda#15| arg0@@331 arg1@@186 arg2@@107 arg3@@78)) (MapType6Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@331 arg1@@186 arg2@@107 arg3@@78)) )))
(assert (forall (($o@@53 T@U) ($f@@19 T@U) (|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type $o@@53) refType) (= (type $f@@19) (FieldType alpha@@26))) (= (type |l#0@@14|) refType)) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@53 $f@@19))  (=> (and (not (= $o@@53 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@53) |l#2@@14|))) |l#3@@14|)))) :qid |JournalI.93:12| :skolemid |2060| :pattern ( (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@53 $f@@19)) )))
(assert (forall ((arg0@@332 T@U) (arg1@@187 T@U) (arg2@@108 T@U) (arg3@@79 Bool) ) (! (= (type (|lambda#16| arg0@@332 arg1@@187 arg2@@108 arg3@@79)) (MapType6Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@332 arg1@@187 arg2@@108 arg3@@79)) )))
(assert (forall (($o@@54 T@U) ($f@@20 T@U) (|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type $o@@54) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type |l#0@@15|) refType)) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@54 $f@@20))  (=> (and (not (= $o@@54 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@54) |l#2@@15|))) |l#3@@15|)))) :qid |JournalI.107:13| :skolemid |2061| :pattern ( (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@54 $f@@20)) )))
(assert (forall ((arg0@@333 T@U) (arg1@@188 T@U) (arg2@@109 T@U) (arg3@@80 Bool) ) (! (= (type (|lambda#17| arg0@@333 arg1@@188 arg2@@109 arg3@@80)) (MapType6Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@333 arg1@@188 arg2@@109 arg3@@80)) )))
(assert (forall (($o@@55 T@U) ($f@@21 T@U) (|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type $o@@55) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@16|) refType)) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@55 $f@@21))  (=> (and (not (= $o@@55 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@55) |l#2@@16|))) |l#3@@16|)))) :qid |JournalI.107:13| :skolemid |2062| :pattern ( (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@55 $f@@21)) )))
(assert (forall ((arg0@@334 T@U) (arg1@@189 T@U) (arg2@@110 T@U) (arg3@@81 Bool) ) (! (= (type (|lambda#18| arg0@@334 arg1@@189 arg2@@110 arg3@@81)) (MapType6Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@334 arg1@@189 arg2@@110 arg3@@81)) )))
(assert (forall (($o@@56 T@U) ($f@@22 T@U) (|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@56) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@17|) refType)) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@56 $f@@22))  (=> (and (not (= $o@@56 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@56) |l#2@@17|))) |l#3@@17|)))) :qid |JournalI.114:13| :skolemid |2063| :pattern ( (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@56 $f@@22)) )))
(assert (forall ((arg0@@335 T@U) (arg1@@190 T@U) (arg2@@111 T@U) (arg3@@82 Bool) ) (! (= (type (|lambda#19| arg0@@335 arg1@@190 arg2@@111 arg3@@82)) (MapType6Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@335 arg1@@190 arg2@@111 arg3@@82)) )))
(assert (forall (($o@@57 T@U) ($f@@23 T@U) (|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@57) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@18|) refType)) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@57 $f@@23))  (=> (and (not (= $o@@57 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@57) |l#2@@18|))) |l#3@@18|)))) :qid |JournalI.114:13| :skolemid |2064| :pattern ( (MapType6Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@57 $f@@23)) )))
(assert (forall ((arg0@@336 T@U) (arg1@@191 T@U) (arg2@@112 T@U) (arg3@@83 Bool) ) (! (= (type (|lambda#20| arg0@@336 arg1@@191 arg2@@112 arg3@@83)) (MapType6Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@336 arg1@@191 arg2@@112 arg3@@83)) )))
(assert (forall (($o@@58 T@U) ($f@@24 T@U) (|l#0@@19| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@58) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@19|) refType)) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@58 $f@@24))  (=> (and (not (= $o@@58 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@58) |l#2@@19|))) |l#3@@19|)))) :qid |JournalI.122:13| :skolemid |2065| :pattern ( (MapType6Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@58 $f@@24)) )))
(assert (forall ((arg0@@337 T@U) (arg1@@192 T@U) (arg2@@113 T@U) (arg3@@84 Bool) ) (! (= (type (|lambda#21| arg0@@337 arg1@@192 arg2@@113 arg3@@84)) (MapType6Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@337 arg1@@192 arg2@@113 arg3@@84)) )))
(assert (forall (($o@@59 T@U) ($f@@25 T@U) (|l#0@@20| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@20| Bool) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type $o@@59) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@20|) refType)) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@59 $f@@25))  (=> (and (not (= $o@@59 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@59) |l#2@@20|))) |l#3@@20|)))) :qid |JournalI.122:13| :skolemid |2066| :pattern ( (MapType6Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@59 $f@@25)) )))
(assert (forall ((arg0@@338 T@U) (arg1@@193 T@U) (arg2@@114 T@U) (arg3@@85 Bool) ) (! (= (type (|lambda#22| arg0@@338 arg1@@193 arg2@@114 arg3@@85)) (MapType6Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@338 arg1@@193 arg2@@114 arg3@@85)) )))
(assert (forall (($o@@60 T@U) ($f@@26 T@U) (|l#0@@21| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@21| Bool) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type $o@@60) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@21|) refType)) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@60 $f@@26))  (=> (and (not (= $o@@60 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@60) |l#2@@21|))) |l#3@@21|)))) :qid |JournalI.141:22| :skolemid |2067| :pattern ( (MapType6Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@60 $f@@26)) )))
(assert (forall ((arg0@@339 T@U) (arg1@@194 T@U) (arg2@@115 T@U) (arg3@@86 Bool) ) (! (= (type (|lambda#23| arg0@@339 arg1@@194 arg2@@115 arg3@@86)) (MapType6Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@339 arg1@@194 arg2@@115 arg3@@86)) )))
(assert (forall (($o@@61 T@U) ($f@@27 T@U) (|l#0@@22| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@61) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@22|) refType)) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@61 $f@@27))  (=> (and (not (= $o@@61 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@61) |l#2@@22|))) |l#3@@22|)))) :qid |JournalI.141:22| :skolemid |2068| :pattern ( (MapType6Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@61 $f@@27)) )))
(assert (forall ((arg0@@340 T@U) (arg1@@195 T@U) (arg2@@116 T@U) (arg3@@87 Bool) ) (! (= (type (|lambda#24| arg0@@340 arg1@@195 arg2@@116 arg3@@87)) (MapType6Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@340 arg1@@195 arg2@@116 arg3@@87)) )))
(assert (forall (($o@@62 T@U) ($f@@28 T@U) (|l#0@@23| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@62) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@23|) refType)) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@62 $f@@28))  (=> (and (not (= $o@@62 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@62) |l#2@@23|))) |l#3@@23|)))) :qid |JournalI.153:13| :skolemid |2069| :pattern ( (MapType6Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@62 $f@@28)) )))
(assert (forall ((arg0@@341 T@U) (arg1@@196 T@U) (arg2@@117 T@U) (arg3@@88 Bool) ) (! (= (type (|lambda#25| arg0@@341 arg1@@196 arg2@@117 arg3@@88)) (MapType6Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@341 arg1@@196 arg2@@117 arg3@@88)) )))
(assert (forall (($o@@63 T@U) ($f@@29 T@U) (|l#0@@24| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@24| Bool) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type $o@@63) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type |l#0@@24|) refType)) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@63 $f@@29))  (=> (and (not (= $o@@63 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@63) |l#2@@24|))) |l#3@@24|)))) :qid |JournalI.153:13| :skolemid |2070| :pattern ( (MapType6Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@63 $f@@29)) )))
(assert (forall ((arg0@@342 T@U) (arg1@@197 T@U) (arg2@@118 T@U) (arg3@@89 Bool) ) (! (= (type (|lambda#26| arg0@@342 arg1@@197 arg2@@118 arg3@@89)) (MapType6Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@342 arg1@@197 arg2@@118 arg3@@89)) )))
(assert (forall (($o@@64 T@U) ($f@@30 T@U) (|l#0@@25| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@25| Bool) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type $o@@64) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type |l#0@@25|) refType)) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@64 $f@@30))  (=> (and (not (= $o@@64 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@64) |l#2@@25|))) |l#3@@25|)))) :qid |JournalI.158:12| :skolemid |2071| :pattern ( (MapType6Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@64 $f@@30)) )))
(assert (forall ((arg0@@343 T@U) (arg1@@198 T@U) (arg2@@119 T@U) (arg3@@90 Bool) ) (! (= (type (|lambda#27| arg0@@343 arg1@@198 arg2@@119 arg3@@90)) (MapType6Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@343 arg1@@198 arg2@@119 arg3@@90)) )))
(assert (forall (($o@@65 T@U) ($f@@31 T@U) (|l#0@@26| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type $o@@65) refType) (= (type $f@@31) (FieldType alpha@@38))) (= (type |l#0@@26|) refType)) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@65 $f@@31))  (=> (and (not (= $o@@65 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@65) |l#2@@26|))) |l#3@@26|)))) :qid |JournalI.158:12| :skolemid |2072| :pattern ( (MapType6Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@65 $f@@31)) )))
(assert (forall ((arg0@@344 T@U) (arg1@@199 T@U) (arg2@@120 T@U) (arg3@@91 Bool) ) (! (= (type (|lambda#28| arg0@@344 arg1@@199 arg2@@120 arg3@@91)) (MapType6Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@344 arg1@@199 arg2@@120 arg3@@91)) )))
(assert (forall (($o@@66 T@U) ($f@@32 T@U) (|l#0@@27| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type $o@@66) refType) (= (type $f@@32) (FieldType alpha@@39))) (= (type |l#0@@27|) refType)) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@66 $f@@32))  (=> (and (not (= $o@@66 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@66) |l#2@@27|))) |l#3@@27|)))) :qid |JournalI.167:9| :skolemid |2073| :pattern ( (MapType6Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@66 $f@@32)) )))
(assert (forall ((arg0@@345 T@U) (arg1@@200 T@U) (arg2@@121 T@U) (arg3@@92 Bool) ) (! (= (type (|lambda#29| arg0@@345 arg1@@200 arg2@@121 arg3@@92)) (MapType6Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@345 arg1@@200 arg2@@121 arg3@@92)) )))
(assert (forall (($o@@67 T@U) ($f@@33 T@U) (|l#0@@28| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type $o@@67) refType) (= (type $f@@33) (FieldType alpha@@40))) (= (type |l#0@@28|) refType)) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@67 $f@@33))  (=> (and (not (= $o@@67 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@67) |l#2@@28|))) |l#3@@28|)))) :qid |JournalI.167:9| :skolemid |2074| :pattern ( (MapType6Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@67 $f@@33)) )))
(assert (forall ((arg0@@346 T@U) (arg1@@201 T@U) (arg2@@122 T@U) (arg3@@93 Bool) ) (! (= (type (|lambda#30| arg0@@346 arg1@@201 arg2@@122 arg3@@93)) (MapType6Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@346 arg1@@201 arg2@@122 arg3@@93)) )))
(assert (forall (($o@@68 T@U) ($f@@34 T@U) (|l#0@@29| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type $o@@68) refType) (= (type $f@@34) (FieldType alpha@@41))) (= (type |l#0@@29|) refType)) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@68 $f@@34))  (=> (and (not (= $o@@68 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@68) |l#2@@29|))) |l#3@@29|)))) :qid |JournalI.204:23| :skolemid |2075| :pattern ( (MapType6Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@68 $f@@34)) )))
(assert (forall ((arg0@@347 T@U) (arg1@@202 T@U) (arg2@@123 T@U) (arg3@@94 Bool) ) (! (= (type (|lambda#31| arg0@@347 arg1@@202 arg2@@123 arg3@@94)) (MapType6Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@347 arg1@@202 arg2@@123 arg3@@94)) )))
(assert (forall (($o@@69 T@U) ($f@@35 T@U) (|l#0@@30| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type $o@@69) refType) (= (type $f@@35) (FieldType alpha@@42))) (= (type |l#0@@30|) refType)) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@69 $f@@35))  (=> (and (not (= $o@@69 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@69) |l#2@@30|))) |l#3@@30|)))) :qid |JournalI.204:23| :skolemid |2076| :pattern ( (MapType6Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@69 $f@@35)) )))
(assert (forall ((arg0@@348 T@U) (arg1@@203 T@U) (arg2@@124 T@U) (arg3@@95 Bool) ) (! (= (type (|lambda#32| arg0@@348 arg1@@203 arg2@@124 arg3@@95)) (MapType6Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@348 arg1@@203 arg2@@124 arg3@@95)) )))
(assert (forall (($o@@70 T@U) ($f@@36 T@U) (|l#0@@31| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type $o@@70) refType) (= (type $f@@36) (FieldType alpha@@43))) (= (type |l#0@@31|) refType)) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@70 $f@@36))  (=> (and (not (= $o@@70 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@70) |l#2@@31|))) |l#3@@31|)))) :qid |JournalI.212:22| :skolemid |2077| :pattern ( (MapType6Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@70 $f@@36)) )))
(assert (forall ((arg0@@349 T@U) (arg1@@204 T@U) (arg2@@125 T@U) (arg3@@96 Bool) ) (! (= (type (|lambda#33| arg0@@349 arg1@@204 arg2@@125 arg3@@96)) (MapType6Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@349 arg1@@204 arg2@@125 arg3@@96)) )))
(assert (forall (($o@@71 T@U) ($f@@37 T@U) (|l#0@@32| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type $o@@71) refType) (= (type $f@@37) (FieldType alpha@@44))) (= (type |l#0@@32|) refType)) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@71 $f@@37))  (=> (and (not (= $o@@71 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@71) |l#2@@32|))) |l#3@@32|)))) :qid |JournalI.212:22| :skolemid |2078| :pattern ( (MapType6Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@71 $f@@37)) )))
(assert (forall ((arg0@@350 T@U) (arg1@@205 T@U) (arg2@@126 T@U) (arg3@@97 Bool) ) (! (= (type (|lambda#34| arg0@@350 arg1@@205 arg2@@126 arg3@@97)) (MapType6Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@350 arg1@@205 arg2@@126 arg3@@97)) )))
(assert (forall (($o@@72 T@U) ($f@@38 T@U) (|l#0@@33| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type $o@@72) refType) (= (type $f@@38) (FieldType alpha@@45))) (= (type |l#0@@33|) refType)) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@72 $f@@38))  (=> (and (not (= $o@@72 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@72) |l#2@@33|))) |l#3@@33|)))) :qid |JournalI.220:23| :skolemid |2079| :pattern ( (MapType6Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@72 $f@@38)) )))
(assert (forall ((arg0@@351 T@U) (arg1@@206 T@U) (arg2@@127 T@U) (arg3@@98 Bool) ) (! (= (type (|lambda#35| arg0@@351 arg1@@206 arg2@@127 arg3@@98)) (MapType6Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@351 arg1@@206 arg2@@127 arg3@@98)) )))
(assert (forall (($o@@73 T@U) ($f@@39 T@U) (|l#0@@34| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type $o@@73) refType) (= (type $f@@39) (FieldType alpha@@46))) (= (type |l#0@@34|) refType)) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@73 $f@@39))  (=> (and (not (= $o@@73 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@73) |l#2@@34|))) |l#3@@34|)))) :qid |JournalI.220:23| :skolemid |2080| :pattern ( (MapType6Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@73 $f@@39)) )))
(assert (forall ((arg0@@352 T@U) (arg1@@207 T@U) (arg2@@128 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#36| arg0@@352 arg1@@207 arg2@@128 arg3@@99)) (MapType6Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@352 arg1@@207 arg2@@128 arg3@@99)) )))
(assert (forall (($o@@74 T@U) ($f@@40 T@U) (|l#0@@35| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type $o@@74) refType) (= (type $f@@40) (FieldType alpha@@47))) (= (type |l#0@@35|) refType)) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@74 $f@@40))  (=> (and (not (= $o@@74 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@74) |l#2@@35|))) |l#3@@35|)))) :qid |JournalI.228:22| :skolemid |2081| :pattern ( (MapType6Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@74 $f@@40)) )))
(assert (forall ((arg0@@353 T@U) (arg1@@208 T@U) (arg2@@129 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#37| arg0@@353 arg1@@208 arg2@@129 arg3@@100)) (MapType6Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@353 arg1@@208 arg2@@129 arg3@@100)) )))
(assert (forall (($o@@75 T@U) ($f@@41 T@U) (|l#0@@36| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@36| Bool) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type $o@@75) refType) (= (type $f@@41) (FieldType alpha@@48))) (= (type |l#0@@36|) refType)) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@75 $f@@41))  (=> (and (not (= $o@@75 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@75) |l#2@@36|))) |l#3@@36|)))) :qid |JournalI.228:22| :skolemid |2082| :pattern ( (MapType6Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@75 $f@@41)) )))
(assert (forall ((arg0@@354 T@U) (arg1@@209 T@U) (arg2@@130 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#38| arg0@@354 arg1@@209 arg2@@130 arg3@@101)) (MapType6Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@354 arg1@@209 arg2@@130 arg3@@101)) )))
(assert (forall (($o@@76 T@U) ($f@@42 T@U) (|l#0@@37| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type $o@@76) refType) (= (type $f@@42) (FieldType alpha@@49))) (= (type |l#0@@37|) refType)) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@76 $f@@42))  (=> (and (not (= $o@@76 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@76) |l#2@@37|))) |l#3@@37|)))) :qid |JournalI.236:9| :skolemid |2083| :pattern ( (MapType6Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@76 $f@@42)) )))
(assert (forall ((arg0@@355 T@U) (arg1@@210 T@U) (arg2@@131 T@U) (arg3@@102 Bool) ) (! (= (type (|lambda#39| arg0@@355 arg1@@210 arg2@@131 arg3@@102)) (MapType6Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@355 arg1@@210 arg2@@131 arg3@@102)) )))
(assert (forall (($o@@77 T@U) ($f@@43 T@U) (|l#0@@38| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@38| Bool) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type $o@@77) refType) (= (type $f@@43) (FieldType alpha@@50))) (= (type |l#0@@38|) refType)) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#39| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@77 $f@@43))  (=> (and (not (= $o@@77 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@77) |l#2@@38|))) |l#3@@38|)))) :qid |JournalI.236:9| :skolemid |2084| :pattern ( (MapType6Select (|lambda#39| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@77 $f@@43)) )))
(assert (forall ((arg0@@356 T@U) (arg1@@211 T@U) (arg2@@132 T@U) (arg3@@103 Bool) ) (! (= (type (|lambda#40| arg0@@356 arg1@@211 arg2@@132 arg3@@103)) (MapType6Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@356 arg1@@211 arg2@@132 arg3@@103)) )))
(assert (forall (($o@@78 T@U) ($f@@44 T@U) (|l#0@@39| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@39| Bool) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type $o@@78) refType) (= (type $f@@44) (FieldType alpha@@51))) (= (type |l#0@@39|) refType)) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#40| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@78 $f@@44))  (=> (and (not (= $o@@78 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@78) |l#2@@39|))) |l#3@@39|)))) :qid |JournalI.247:12| :skolemid |2085| :pattern ( (MapType6Select (|lambda#40| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@78 $f@@44)) )))
(assert (forall ((arg0@@357 T@U) (arg1@@212 T@U) (arg2@@133 T@U) (arg3@@104 Bool) ) (! (= (type (|lambda#41| arg0@@357 arg1@@212 arg2@@133 arg3@@104)) (MapType6Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@357 arg1@@212 arg2@@133 arg3@@104)) )))
(assert (forall (($o@@79 T@U) ($f@@45 T@U) (|l#0@@40| T@U) (|l#1@@40| T@U) (|l#2@@40| T@U) (|l#3@@40| Bool) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type $o@@79) refType) (= (type $f@@45) (FieldType alpha@@52))) (= (type |l#0@@40|) refType)) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#41| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@79 $f@@45))  (=> (and (not (= $o@@79 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@79) |l#2@@40|))) |l#3@@40|)))) :qid |JournalI.247:12| :skolemid |2086| :pattern ( (MapType6Select (|lambda#41| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@79 $f@@45)) )))
(assert (forall ((arg0@@358 T@U) (arg1@@213 T@U) (arg2@@134 T@U) (arg3@@105 Bool) ) (! (= (type (|lambda#42| arg0@@358 arg1@@213 arg2@@134 arg3@@105)) (MapType6Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@358 arg1@@213 arg2@@134 arg3@@105)) )))
(assert (forall (($o@@80 T@U) ($f@@46 T@U) (|l#0@@41| T@U) (|l#1@@41| T@U) (|l#2@@41| T@U) (|l#3@@41| Bool) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type $o@@80) refType) (= (type $f@@46) (FieldType alpha@@53))) (= (type |l#0@@41|) refType)) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#42| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@80 $f@@46))  (=> (and (not (= $o@@80 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@80) |l#2@@41|))) |l#3@@41|)))) :qid |JournalI.255:12| :skolemid |2087| :pattern ( (MapType6Select (|lambda#42| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@80 $f@@46)) )))
(assert (forall ((arg0@@359 T@U) (arg1@@214 T@U) (arg2@@135 T@U) (arg3@@106 Bool) ) (! (= (type (|lambda#43| arg0@@359 arg1@@214 arg2@@135 arg3@@106)) (MapType6Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@359 arg1@@214 arg2@@135 arg3@@106)) )))
(assert (forall (($o@@81 T@U) ($f@@47 T@U) (|l#0@@42| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@42| Bool) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type $o@@81) refType) (= (type $f@@47) (FieldType alpha@@54))) (= (type |l#0@@42|) refType)) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#43| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@81 $f@@47))  (=> (and (not (= $o@@81 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@81) |l#2@@42|))) |l#3@@42|)))) :qid |JournalI.255:12| :skolemid |2088| :pattern ( (MapType6Select (|lambda#43| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@81 $f@@47)) )))
(assert (forall ((arg0@@360 T@U) (arg1@@215 T@U) (arg2@@136 T@U) (arg3@@107 Bool) ) (! (= (type (|lambda#44| arg0@@360 arg1@@215 arg2@@136 arg3@@107)) (MapType6Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@360 arg1@@215 arg2@@136 arg3@@107)) )))
(assert (forall (($o@@82 T@U) ($f@@48 T@U) (|l#0@@43| T@U) (|l#1@@43| T@U) (|l#2@@43| T@U) (|l#3@@43| Bool) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type $o@@82) refType) (= (type $f@@48) (FieldType alpha@@55))) (= (type |l#0@@43|) refType)) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#44| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@82 $f@@48))  (=> (and (not (= $o@@82 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@82) |l#2@@43|))) |l#3@@43|)))) :qid |JournalI.261:9| :skolemid |2089| :pattern ( (MapType6Select (|lambda#44| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@82 $f@@48)) )))
(assert (forall ((arg0@@361 T@U) (arg1@@216 T@U) (arg2@@137 T@U) (arg3@@108 Bool) ) (! (= (type (|lambda#45| arg0@@361 arg1@@216 arg2@@137 arg3@@108)) (MapType6Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@361 arg1@@216 arg2@@137 arg3@@108)) )))
(assert (forall (($o@@83 T@U) ($f@@49 T@U) (|l#0@@44| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@44| Bool) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type $o@@83) refType) (= (type $f@@49) (FieldType alpha@@56))) (= (type |l#0@@44|) refType)) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#45| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@83 $f@@49))  (=> (and (not (= $o@@83 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@83) |l#2@@44|))) |l#3@@44|)))) :qid |JournalI.261:9| :skolemid |2090| :pattern ( (MapType6Select (|lambda#45| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@83 $f@@49)) )))
(assert (forall ((arg0@@362 T@U) (arg1@@217 T@U) (arg2@@138 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#46| arg0@@362 arg1@@217 arg2@@138 arg3@@109)) (MapType6Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@362 arg1@@217 arg2@@138 arg3@@109)) )))
(assert (forall (($o@@84 T@U) ($f@@50 T@U) (|l#0@@45| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) (|l#3@@45| Bool) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type $o@@84) refType) (= (type $f@@50) (FieldType alpha@@57))) (= (type |l#0@@45|) refType)) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#46| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@84 $f@@50))  (=> (and (not (= $o@@84 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@84) |l#2@@45|))) |l#3@@45|)))) :qid |JournalI.286:9| :skolemid |2091| :pattern ( (MapType6Select (|lambda#46| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@84 $f@@50)) )))
(assert (forall ((arg0@@363 T@U) (arg1@@218 T@U) (arg2@@139 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#47| arg0@@363 arg1@@218 arg2@@139 arg3@@110)) (MapType6Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@363 arg1@@218 arg2@@139 arg3@@110)) )))
(assert (forall (($o@@85 T@U) ($f@@51 T@U) (|l#0@@46| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) (|l#3@@46| Bool) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type $o@@85) refType) (= (type $f@@51) (FieldType alpha@@58))) (= (type |l#0@@46|) refType)) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#47| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@85 $f@@51))  (=> (and (not (= $o@@85 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@85) |l#2@@46|))) |l#3@@46|)))) :qid |JournalI.286:9| :skolemid |2092| :pattern ( (MapType6Select (|lambda#47| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@85 $f@@51)) )))
(assert (forall ((arg0@@364 T@U) (arg1@@219 T@U) (arg2@@140 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#48| arg0@@364 arg1@@219 arg2@@140 arg3@@111)) (MapType6Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@364 arg1@@219 arg2@@140 arg3@@111)) )))
(assert (forall (($o@@86 T@U) ($f@@52 T@U) (|l#0@@47| T@U) (|l#1@@47| T@U) (|l#2@@47| T@U) (|l#3@@47| Bool) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type $o@@86) refType) (= (type $f@@52) (FieldType alpha@@59))) (= (type |l#0@@47|) refType)) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#48| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@86 $f@@52))  (=> (and (not (= $o@@86 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@86) |l#2@@47|))) |l#3@@47|)))) :qid |JournalI.383:9| :skolemid |2093| :pattern ( (MapType6Select (|lambda#48| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@86 $f@@52)) )))
(assert (forall ((arg0@@365 T@U) (arg1@@220 T@U) (arg2@@141 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#49| arg0@@365 arg1@@220 arg2@@141 arg3@@112)) (MapType6Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@365 arg1@@220 arg2@@141 arg3@@112)) )))
(assert (forall (($o@@87 T@U) ($f@@53 T@U) (|l#0@@48| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) (|l#3@@48| Bool) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type $o@@87) refType) (= (type $f@@53) (FieldType alpha@@60))) (= (type |l#0@@48|) refType)) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#49| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@48|) $o@@87 $f@@53))  (=> (and (not (= $o@@87 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@87) |l#2@@48|))) |l#3@@48|)))) :qid |JournalI.383:9| :skolemid |2094| :pattern ( (MapType6Select (|lambda#49| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@48|) $o@@87 $f@@53)) )))
(assert (forall ((arg0@@366 T@U) (arg1@@221 T@U) (arg2@@142 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#50| arg0@@366 arg1@@221 arg2@@142 arg3@@113)) (MapType6Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@366 arg1@@221 arg2@@142 arg3@@113)) )))
(assert (forall (($o@@88 T@U) ($f@@54 T@U) (|l#0@@49| T@U) (|l#1@@49| T@U) (|l#2@@49| T@U) (|l#3@@49| Bool) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type $o@@88) refType) (= (type $f@@54) (FieldType alpha@@61))) (= (type |l#0@@49|) refType)) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#50| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@49|) $o@@88 $f@@54))  (=> (and (not (= $o@@88 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@88) |l#2@@49|))) |l#3@@49|)))) :qid |JournalI.395:9| :skolemid |2095| :pattern ( (MapType6Select (|lambda#50| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@49|) $o@@88 $f@@54)) )))
(assert (forall ((arg0@@367 T@U) (arg1@@222 T@U) (arg2@@143 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#51| arg0@@367 arg1@@222 arg2@@143 arg3@@114)) (MapType6Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@367 arg1@@222 arg2@@143 arg3@@114)) )))
(assert (forall (($o@@89 T@U) ($f@@55 T@U) (|l#0@@50| T@U) (|l#1@@50| T@U) (|l#2@@50| T@U) (|l#3@@50| Bool) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type $o@@89) refType) (= (type $f@@55) (FieldType alpha@@62))) (= (type |l#0@@50|) refType)) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#51| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@50|) $o@@89 $f@@55))  (=> (and (not (= $o@@89 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@89) |l#2@@50|))) |l#3@@50|)))) :qid |JournalI.395:9| :skolemid |2096| :pattern ( (MapType6Select (|lambda#51| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@50|) $o@@89 $f@@55)) )))
(assert (forall ((arg0@@368 T@U) (arg1@@223 T@U) (arg2@@144 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#52| arg0@@368 arg1@@223 arg2@@144 arg3@@115)) (MapType6Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@368 arg1@@223 arg2@@144 arg3@@115)) )))
(assert (forall (($o@@90 T@U) ($f@@56 T@U) (|l#0@@51| T@U) (|l#1@@51| T@U) (|l#2@@51| T@U) (|l#3@@51| Bool) ) (! (let ((alpha@@63 (FieldTypeInv0 (type $f@@56)))) (=> (and (and (and (and (= (type $o@@90) refType) (= (type $f@@56) (FieldType alpha@@63))) (= (type |l#0@@51|) refType)) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#52| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@51|) $o@@90 $f@@56))  (=> (and (not (= $o@@90 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@90) |l#2@@51|))) |l#3@@51|)))) :qid |JournalI.423:9| :skolemid |2097| :pattern ( (MapType6Select (|lambda#52| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@51|) $o@@90 $f@@56)) )))
(assert (forall ((arg0@@369 T@U) (arg1@@224 T@U) (arg2@@145 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#53| arg0@@369 arg1@@224 arg2@@145 arg3@@116)) (MapType6Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@369 arg1@@224 arg2@@145 arg3@@116)) )))
(assert (forall (($o@@91 T@U) ($f@@57 T@U) (|l#0@@52| T@U) (|l#1@@52| T@U) (|l#2@@52| T@U) (|l#3@@52| Bool) ) (! (let ((alpha@@64 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (and (and (= (type $o@@91) refType) (= (type $f@@57) (FieldType alpha@@64))) (= (type |l#0@@52|) refType)) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#53| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@52|) $o@@91 $f@@57))  (=> (and (not (= $o@@91 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@91) |l#2@@52|))) |l#3@@52|)))) :qid |JournalI.423:9| :skolemid |2098| :pattern ( (MapType6Select (|lambda#53| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@52|) $o@@91 $f@@57)) )))
(assert (forall ((arg0@@370 T@U) (arg1@@225 T@U) (arg2@@146 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#54| arg0@@370 arg1@@225 arg2@@146 arg3@@117)) (MapType6Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@370 arg1@@225 arg2@@146 arg3@@117)) )))
(assert (forall (($o@@92 T@U) ($f@@58 T@U) (|l#0@@53| T@U) (|l#1@@53| T@U) (|l#2@@53| T@U) (|l#3@@53| Bool) ) (! (let ((alpha@@65 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (and (and (= (type $o@@92) refType) (= (type $f@@58) (FieldType alpha@@65))) (= (type |l#0@@53|) refType)) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#54| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@53|) $o@@92 $f@@58))  (=> (and (not (= $o@@92 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@92) |l#2@@53|))) |l#3@@53|)))) :qid |JournalI.448:22| :skolemid |2099| :pattern ( (MapType6Select (|lambda#54| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@53|) $o@@92 $f@@58)) )))
(assert (forall ((arg0@@371 T@U) (arg1@@226 T@U) (arg2@@147 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#55| arg0@@371 arg1@@226 arg2@@147 arg3@@118)) (MapType6Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@371 arg1@@226 arg2@@147 arg3@@118)) )))
(assert (forall (($o@@93 T@U) ($f@@59 T@U) (|l#0@@54| T@U) (|l#1@@54| T@U) (|l#2@@54| T@U) (|l#3@@54| Bool) ) (! (let ((alpha@@66 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (and (and (= (type $o@@93) refType) (= (type $f@@59) (FieldType alpha@@66))) (= (type |l#0@@54|) refType)) (= (type |l#1@@54|) (MapType0Type refType MapType1Type))) (= (type |l#2@@54|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#55| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@54|) $o@@93 $f@@59))  (=> (and (not (= $o@@93 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@54| $o@@93) |l#2@@54|))) |l#3@@54|)))) :qid |JournalI.448:22| :skolemid |2100| :pattern ( (MapType6Select (|lambda#55| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@54|) $o@@93 $f@@59)) )))
(assert (forall ((arg0@@372 T@U) (arg1@@227 T@U) (arg2@@148 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#56| arg0@@372 arg1@@227 arg2@@148 arg3@@119)) (MapType6Type refType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@372 arg1@@227 arg2@@148 arg3@@119)) )))
(assert (forall (($o@@94 T@U) ($f@@60 T@U) (|l#0@@55| T@U) (|l#1@@55| T@U) (|l#2@@55| T@U) (|l#3@@55| Bool) ) (! (let ((alpha@@67 (FieldTypeInv0 (type $f@@60)))) (=> (and (and (and (and (= (type $o@@94) refType) (= (type $f@@60) (FieldType alpha@@67))) (= (type |l#0@@55|) refType)) (= (type |l#1@@55|) (MapType0Type refType MapType1Type))) (= (type |l#2@@55|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#56| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@55|) $o@@94 $f@@60))  (=> (and (not (= $o@@94 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@55| $o@@94) |l#2@@55|))) |l#3@@55|)))) :qid |JournalI.460:9| :skolemid |2101| :pattern ( (MapType6Select (|lambda#56| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@55|) $o@@94 $f@@60)) )))
(assert (forall ((arg0@@373 T@U) (arg1@@228 T@U) (arg2@@149 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#57| arg0@@373 arg1@@228 arg2@@149 arg3@@120)) (MapType6Type refType boolType)) :qid |funType:lambda#57| :pattern ( (|lambda#57| arg0@@373 arg1@@228 arg2@@149 arg3@@120)) )))
(assert (forall (($o@@95 T@U) ($f@@61 T@U) (|l#0@@56| T@U) (|l#1@@56| T@U) (|l#2@@56| T@U) (|l#3@@56| Bool) ) (! (let ((alpha@@68 (FieldTypeInv0 (type $f@@61)))) (=> (and (and (and (and (= (type $o@@95) refType) (= (type $f@@61) (FieldType alpha@@68))) (= (type |l#0@@56|) refType)) (= (type |l#1@@56|) (MapType0Type refType MapType1Type))) (= (type |l#2@@56|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#57| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@56|) $o@@95 $f@@61))  (=> (and (not (= $o@@95 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@56| $o@@95) |l#2@@56|))) |l#3@@56|)))) :qid |JournalI.460:9| :skolemid |2102| :pattern ( (MapType6Select (|lambda#57| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@56|) $o@@95 $f@@61)) )))
(assert (forall ((arg0@@374 T@U) (arg1@@229 T@U) (arg2@@150 T@U) (arg3@@121 Bool) ) (! (= (type (|lambda#58| arg0@@374 arg1@@229 arg2@@150 arg3@@121)) (MapType6Type refType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@374 arg1@@229 arg2@@150 arg3@@121)) )))
(assert (forall (($o@@96 T@U) ($f@@62 T@U) (|l#0@@57| T@U) (|l#1@@57| T@U) (|l#2@@57| T@U) (|l#3@@57| Bool) ) (! (let ((alpha@@69 (FieldTypeInv0 (type $f@@62)))) (=> (and (and (and (and (= (type $o@@96) refType) (= (type $f@@62) (FieldType alpha@@69))) (= (type |l#0@@57|) refType)) (= (type |l#1@@57|) (MapType0Type refType MapType1Type))) (= (type |l#2@@57|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#58| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@57|) $o@@96 $f@@62))  (=> (and (not (= $o@@96 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@57| $o@@96) |l#2@@57|))) |l#3@@57|)))) :qid |JournalI.482:9| :skolemid |2103| :pattern ( (MapType6Select (|lambda#58| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@57|) $o@@96 $f@@62)) )))
(assert (forall ((arg0@@375 T@U) (arg1@@230 T@U) (arg2@@151 T@U) (arg3@@122 Bool) ) (! (= (type (|lambda#59| arg0@@375 arg1@@230 arg2@@151 arg3@@122)) (MapType6Type refType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@375 arg1@@230 arg2@@151 arg3@@122)) )))
(assert (forall (($o@@97 T@U) ($f@@63 T@U) (|l#0@@58| T@U) (|l#1@@58| T@U) (|l#2@@58| T@U) (|l#3@@58| Bool) ) (! (let ((alpha@@70 (FieldTypeInv0 (type $f@@63)))) (=> (and (and (and (and (= (type $o@@97) refType) (= (type $f@@63) (FieldType alpha@@70))) (= (type |l#0@@58|) refType)) (= (type |l#1@@58|) (MapType0Type refType MapType1Type))) (= (type |l#2@@58|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#59| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@58|) $o@@97 $f@@63))  (=> (and (not (= $o@@97 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@58| $o@@97) |l#2@@58|))) |l#3@@58|)))) :qid |JournalI.482:9| :skolemid |2104| :pattern ( (MapType6Select (|lambda#59| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@58|) $o@@97 $f@@63)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@231 T@U) (arg2@@152 T@U) (arg3@@123 Bool) ) (! (= (type (|lambda#60| arg0@@376 arg1@@231 arg2@@152 arg3@@123)) (MapType6Type refType boolType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@376 arg1@@231 arg2@@152 arg3@@123)) )))
(assert (forall (($o@@98 T@U) ($f@@64 T@U) (|l#0@@59| T@U) (|l#1@@59| T@U) (|l#2@@59| T@U) (|l#3@@59| Bool) ) (! (let ((alpha@@71 (FieldTypeInv0 (type $f@@64)))) (=> (and (and (and (and (= (type $o@@98) refType) (= (type $f@@64) (FieldType alpha@@71))) (= (type |l#0@@59|) refType)) (= (type |l#1@@59|) (MapType0Type refType MapType1Type))) (= (type |l#2@@59|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#60| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@59|) $o@@98 $f@@64))  (=> (and (not (= $o@@98 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@59| $o@@98) |l#2@@59|))) |l#3@@59|)))) :qid |JournalI.496:9| :skolemid |2105| :pattern ( (MapType6Select (|lambda#60| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@59|) $o@@98 $f@@64)) )))
(assert (forall ((arg0@@377 T@U) (arg1@@232 T@U) (arg2@@153 T@U) (arg3@@124 Bool) ) (! (= (type (|lambda#61| arg0@@377 arg1@@232 arg2@@153 arg3@@124)) (MapType6Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@377 arg1@@232 arg2@@153 arg3@@124)) )))
(assert (forall (($o@@99 T@U) ($f@@65 T@U) (|l#0@@60| T@U) (|l#1@@60| T@U) (|l#2@@60| T@U) (|l#3@@60| Bool) ) (! (let ((alpha@@72 (FieldTypeInv0 (type $f@@65)))) (=> (and (and (and (and (= (type $o@@99) refType) (= (type $f@@65) (FieldType alpha@@72))) (= (type |l#0@@60|) refType)) (= (type |l#1@@60|) (MapType0Type refType MapType1Type))) (= (type |l#2@@60|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#61| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@60|) $o@@99 $f@@65))  (=> (and (not (= $o@@99 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@60| $o@@99) |l#2@@60|))) |l#3@@60|)))) :qid |JournalI.496:9| :skolemid |2106| :pattern ( (MapType6Select (|lambda#61| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@60|) $o@@99 $f@@65)) )))
(assert (forall ((|$y#0| T@U) (|l#0@@61| T@U) (|l#1@@61| T@U) (|l#2@@61| Int) ) (!  (=> (and (and (= (type |$y#0|) BoxType) (= (type |l#0@@61|) TyType)) (= (type |l#1@@61|) (MapType0Type BoxType intType))) (= (U_2_bool (MapType0Select (|lambda#62| |l#0@@61| |l#1@@61| |l#2@@61|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@61|) (> (U_2_int (MapType0Select |l#1@@61| |$y#0|)) |l#2@@61|)))) :qid |sequence.28:5| :skolemid |2107| :pattern ( (MapType0Select (|lambda#62| |l#0@@61| |l#1@@61| |l#2@@61|) |$y#0|)) )))
(declare-fun $_Frame@0 () T@U)
(declare-fun TType () T@T)
(declare-fun type@@0 (T@U) T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun MoreFuel_JournalIntervals._default.CyclicSlice0 () T@U)
(declare-fun StartFuelAssert_JournalIntervals._default.CyclicSlice () T@U)
(declare-fun |a#0@0| () T@U)
(declare-fun |b#0@0| () T@U)
(declare-fun |journal'#0@@5| () T@U)
(declare-fun |interval#0@@25| () T@U)
(declare-fun |interval_write#0| () T@U)
(declare-fun |journal#0@@29| () T@U)
(declare-fun |jr#0@@21| () T@U)
(declare-fun |##interval#7@0| () T@U)
(declare-fun |##interval#8@0| () T@U)
(declare-fun |a##0@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |slice'#0@0| () T@U)
(declare-fun |slice#4@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun StartFuel_JournalIntervals._default.JournalUpdate () T@U)
(declare-fun MoreFuel_JournalIntervals._default.JournalUpdate0 () T@U)
(declare-fun StartFuelAssert_JournalIntervals._default.JournalUpdate () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun StartFuelAssert_DiskLayout._default.ValidNodeAddr () T@U)
(declare-fun StartFuel_DiskLayout._default.JournalBlockIdx () T@U)
(declare-fun StartFuelAssert_DiskLayout._default.JournalBlockIdx () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun $Heap@@36 () T@U)
(declare-fun |interval'#0@0| () T@U)
(declare-fun |interval'#0| () T@U)
(declare-fun |slice#4| () T@U)
(declare-fun |slice'#0| () T@U)
(declare-fun |a#0@@82| () T@U)
(declare-fun |b#0@@56| () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun |i#4@0| () Int)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%@2 () Bool)
(declare-fun %lbl%+3 () Bool)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%@5 () Bool)
(declare-fun %lbl%+6 () Bool)
(declare-fun %lbl%@7 () Bool)
(declare-fun %lbl%@8 () Bool)
(declare-fun %lbl%+9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun %lbl%+11 () Bool)
(declare-fun %lbl%@12 () Bool)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%+14 () Bool)
(declare-fun %lbl%@15 () Bool)
(declare-fun %lbl%+16 () Bool)
(declare-fun %lbl%@17 () Bool)
(declare-fun %lbl%+18 () Bool)
(declare-fun %lbl%@19 () Bool)
(declare-fun %lbl%@20 () Bool)
(declare-fun %lbl%+21 () Bool)
(declare-fun %lbl%+22 () Bool)
(declare-fun %lbl%+23 () Bool)
(declare-fun %lbl%+24 () Bool)
(declare-fun %lbl%+25 () Bool)
(declare-fun %lbl%+26 () Bool)
(declare-fun %lbl%@27 () Bool)
(declare-fun %lbl%@28 () Bool)
(declare-fun %lbl%+29 () Bool)
(declare-fun %lbl%@30 () Bool)
(declare-fun $o@@100 () T@U)
(declare-fun $f@@66 () T@U)
(declare-fun %lbl%@31 () Bool)
(declare-fun $o@@101 () T@U)
(declare-fun $f@@67 () T@U)
(declare-fun %lbl%+32 () Bool)
(declare-fun %lbl%+33 () Bool)
(declare-fun %lbl%+34 () Bool)
(declare-fun %lbl%+35 () Bool)
(declare-fun |i#9@0| () Int)
(declare-fun %lbl%@36 () Bool)
(declare-fun %lbl%@37 () Bool)
(declare-fun %lbl%+38 () Bool)
(declare-fun %lbl%@39 () Bool)
(declare-fun %lbl%@40 () Bool)
(declare-fun %lbl%+41 () Bool)
(declare-fun %lbl%@42 () Bool)
(declare-fun %lbl%@43 () Bool)
(declare-fun %lbl%+44 () Bool)
(declare-fun %lbl%@45 () Bool)
(declare-fun %lbl%+46 () Bool)
(declare-fun %lbl%@47 () Bool)
(declare-fun %lbl%@48 () Bool)
(declare-fun %lbl%+49 () Bool)
(declare-fun %lbl%@50 () Bool)
(declare-fun %lbl%+51 () Bool)
(declare-fun %lbl%@52 () Bool)
(declare-fun %lbl%@53 () Bool)
(declare-fun %lbl%+54 () Bool)
(declare-fun %lbl%@55 () Bool)
(declare-fun %lbl%@56 () Bool)
(declare-fun %lbl%@57 () Bool)
(declare-fun %lbl%+58 () Bool)
(declare-fun %lbl%@59 () Bool)
(declare-fun %lbl%@60 () Bool)
(declare-fun %lbl%@61 () Bool)
(declare-fun %lbl%+62 () Bool)
(declare-fun %lbl%@63 () Bool)
(declare-fun %lbl%+64 () Bool)
(declare-fun %lbl%@65 () Bool)
(declare-fun %lbl%+66 () Bool)
(declare-fun %lbl%+67 () Bool)
(declare-fun %lbl%+68 () Bool)
(declare-fun %lbl%+69 () Bool)
(declare-fun %lbl%+70 () Bool)
(declare-fun %lbl%+71 () Bool)
(declare-fun %lbl%+72 () Bool)
(declare-fun %lbl%+73 () Bool)
(declare-fun %lbl%+74 () Bool)
(declare-fun %lbl%@75 () Bool)
(declare-fun %lbl%@76 () Bool)
(declare-fun %lbl%+77 () Bool)
(declare-fun %lbl%@78 () Bool)
(declare-fun %lbl%@79 () Bool)
(declare-fun %lbl%@80 () Bool)
(declare-fun %lbl%+81 () Bool)
(declare-fun %lbl%@82 () Bool)
(declare-fun %lbl%@83 () Bool)
(declare-fun %lbl%@84 () Bool)
(declare-fun %lbl%+85 () Bool)
(declare-fun %lbl%@86 () Bool)
(declare-fun %lbl%+87 () Bool)
(declare-fun %lbl%+88 () Bool)
(declare-fun %lbl%+89 () Bool)
(declare-fun %lbl%@90 () Bool)
(declare-fun $o@@102 () T@U)
(declare-fun $f@@68 () T@U)
(declare-fun %lbl%@91 () Bool)
(declare-fun $o@@103 () T@U)
(declare-fun $f@@69 () T@U)
(declare-fun %lbl%+92 () Bool)
(declare-fun %lbl%+93 () Bool)
(declare-fun %lbl%+94 () Bool)
(declare-fun %lbl%+95 () Bool)
(declare-fun %lbl%@96 () Bool)
(declare-fun %lbl%@97 () Bool)
(declare-fun %lbl%@98 () Bool)
(declare-fun %lbl%@99 () Bool)
(declare-fun %lbl%@100 () Bool)
(declare-fun %lbl%+101 () Bool)
(declare-fun %lbl%@102 () Bool)
(declare-fun %lbl%@103 () Bool)
(declare-fun %lbl%@104 () Bool)
(declare-fun %lbl%@105 () Bool)
(declare-fun %lbl%@106 () Bool)
(declare-fun %lbl%@107 () Bool)
(declare-fun %lbl%@108 () Bool)
(declare-fun %lbl%@109 () Bool)
(declare-fun %lbl%@110 () Bool)
(declare-fun %lbl%@111 () Bool)
(declare-fun %lbl%@112 () Bool)
(declare-fun %lbl%@113 () Bool)
(declare-fun %lbl%@114 () Bool)
(declare-fun %lbl%@115 () Bool)
(declare-fun %lbl%@116 () Bool)
(declare-fun %lbl%@117 () Bool)
(declare-fun %lbl%@118 () Bool)
(declare-fun %lbl%@119 () Bool)
(declare-fun %lbl%@120 () Bool)
(declare-fun %lbl%@121 () Bool)
(declare-fun %lbl%@122 () Bool)
(declare-fun %lbl%@123 () Bool)
(declare-fun %lbl%@124 () Bool)
(declare-fun %lbl%@125 () Bool)
(declare-fun %lbl%@126 () Bool)
(declare-fun %lbl%@127 () Bool)
(declare-fun %lbl%@128 () Bool)
(declare-fun %lbl%@129 () Bool)
(declare-fun %lbl%@130 () Bool)
(declare-fun %lbl%@131 () Bool)
(declare-fun %lbl%@132 () Bool)
(declare-fun %lbl%@133 () Bool)
(declare-fun $o@@104 () T@U)
(declare-fun $f@@70 () T@U)
(declare-fun %lbl%@134 () Bool)
(declare-fun %lbl%@135 () Bool)
(declare-fun %lbl%+136 () Bool)
(declare-fun %lbl%+137 () Bool)
(declare-fun %lbl%@138 () Bool)
(declare-fun $o@@105 () T@U)
(declare-fun $f@@71 () T@U)
(declare-fun %lbl%@139 () Bool)
(declare-fun %lbl%+140 () Bool)
(declare-fun %lbl%@141 () Bool)
(declare-fun %lbl%@142 () Bool)
(declare-fun %lbl%@143 () Bool)
(declare-fun %lbl%+144 () Bool)
(declare-fun %lbl%@145 () Bool)
(declare-fun %lbl%@146 () Bool)
(declare-fun %lbl%@147 () Bool)
(declare-fun %lbl%@148 () Bool)
(declare-fun %lbl%@149 () Bool)
(declare-fun %lbl%@150 () Bool)
(declare-fun %lbl%@151 () Bool)
(declare-fun %lbl%@152 () Bool)
(declare-fun %lbl%@153 () Bool)
(declare-fun %lbl%@154 () Bool)
(declare-fun %lbl%@155 () Bool)
(declare-fun %lbl%+156 () Bool)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $_Frame@0) (MapType6Type refType boolType)) (= (Ctor TType) 26)) (forall ((arg0@@378 T@U) ) (! (= (type (type@@0 arg0@@378)) TType) :qid |funType:type| :pattern ( (type@@0 arg0@@378)) ))) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type MoreFuel_JournalIntervals._default.CyclicSlice0) LayerTypeType)) (= (type StartFuelAssert_JournalIntervals._default.CyclicSlice) LayerTypeType)) (= (type |a#0@0|) (SeqType BoxType))) (= (type |b#0@0|) (SeqType BoxType))) (= (type |journal'#0@@5|) (SeqType BoxType))) (= (type |interval#0@@25|) DatatypeTypeType)) (= (type |interval_write#0|) DatatypeTypeType)) (= (type |journal#0@@29|) (SeqType BoxType))) (= (type |jr#0@@21|) (SeqType BoxType))) (= (type |##interval#7@0|) DatatypeTypeType)) (= (type |##interval#8@0|) DatatypeTypeType)) (= (type |a##0@0|) (SeqType BoxType))) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type |slice'#0@0|) (SeqType BoxType))) (= (type |slice#4@0|) (SeqType BoxType))) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type StartFuel_JournalIntervals._default.JournalUpdate) LayerTypeType)) (= (type MoreFuel_JournalIntervals._default.JournalUpdate0) LayerTypeType)) (= (type StartFuelAssert_JournalIntervals._default.JournalUpdate) LayerTypeType)) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type $Heap@6) (MapType0Type refType MapType1Type))) (= (type StartFuelAssert_DiskLayout._default.ValidNodeAddr) LayerTypeType)) (= (type StartFuel_DiskLayout._default.JournalBlockIdx) LayerTypeType)) (= (type StartFuelAssert_DiskLayout._default.JournalBlockIdx) LayerTypeType)) (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |interval'#0@0|) DatatypeTypeType)) (= (type |interval'#0|) DatatypeTypeType)) (= (type |slice#4|) (SeqType BoxType))) (= (type |slice'#0|) (SeqType BoxType))) (= (type |a#0@@82|) (SeqType BoxType))) (= (type |b#0@@56|) (SeqType BoxType))))
(push 1)
(set-info :boogie-vc-id Impl$$JournalIntervals.__default.Disk__Journal__append)
(assert (not (let ((anon59_Then_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (=> (and (and (<= 0 (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal'#0@@5|))) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|)) (and (! (or %lbl%@1  (and (<= 0 |i#4@0|) (< |i#4@0| (|Seq#Length| |slice'#0@0|)))) :lblneg @1) (! (or %lbl%@2 (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)))) ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#4@0|)))) :lblneg @2))))))) (let ((anon58_Then_correct  (=> (! (and %lbl%+3 true) :lblpos +3) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (=> (and (and (<= 0 (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal#0@@29|))) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|))) (and (! (or %lbl%@4  (and (<= 0 (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal'#0@@5|)))) :lblneg @4) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (! (or %lbl%@5 (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |journal#0@@29| (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)))) ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)))))) :lblneg @5)))))))) (let ((anon57_Then_correct  (=> (! (and %lbl%+6 true) :lblpos +6) (=> (and (and (<= 0 |i#4@0|) (< |i#4@0| (|Seq#Length| |slice#4@0|))) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|)) (and (! (or %lbl%@7  (and (<= 0 (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal#0@@29|)))) :lblneg @7) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (! (or %lbl%@8 (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#4@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |journal#0@@29| (+ |i#4@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)))))) :lblneg @8))))))) (let ((anon56_Then_correct  (=> (! (and %lbl%+9 true) :lblpos +9) (! (or %lbl%@10  (and (<= 0 |i#4@0|) (< |i#4@0| (|Seq#Length| |slice#4@0|)))) :lblneg @10)))) (let ((anon61_Then_correct  (=> (! (and %lbl%+11 true) :lblpos +11) (=> (and (<= 0 |i#4@0|) (< |i#4@0| (|Seq#Length| |slice#4@0|))) (and (! (or %lbl%@12  (and (<= 0 |i#4@0|) (< |i#4@0| (|Seq#Length| |slice'#0@0|)))) :lblneg @12) (! (or %lbl%@13 (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#4@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#4@0|)))) :lblneg @13)))))) (let ((anon60_Then_correct  (=> (! (and %lbl%+14 true) :lblpos +14) (! (or %lbl%@15  (and (<= 0 |i#4@0|) (< |i#4@0| (|Seq#Length| |slice#4@0|)))) :lblneg @15)))) (let ((anon17_correct  (=> (! (and %lbl%+16 true) :lblpos +16) (! (or %lbl%@17 (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#4@0|)))) :lblneg @17)))) (let ((anon15_correct  (=> (! (and %lbl%+18 true) :lblpos +18) (and (! (or %lbl%@19  (and (<= 0 |i#4@0|) (< |i#4@0| (|Seq#Length| |slice'#0@0|)))) :lblneg @19) (and (! (or %lbl%@20 (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#4@0|)))) :lblneg @20) (=> (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#4@0|))) anon17_correct)))))) (let ((anon59_Else_correct  (=> (! (and %lbl%+21 true) :lblpos +21) (=> (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#4@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#4@0|))) anon15_correct)))) (let ((anon55_Then_correct  (=> (! (and %lbl%+22 true) :lblpos +22) (=> (< (+ (JournalIntervals.JournalInterval.start |interval#0@@25|) |i#4@0|) DiskLayout.__default.NumJournalBlocks) (and (and (and (and anon56_Then_correct anon57_Then_correct) anon58_Then_correct) anon59_Then_correct) anon59_Else_correct))))) (let ((anon61_Else_correct  (=> (! (and %lbl%+23 true) :lblpos +23) (=> (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#4@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#4@0|))) anon15_correct)))) (let ((anon55_Else_correct  (=> (! (and %lbl%+24 true) :lblpos +24) (=> (<= DiskLayout.__default.NumJournalBlocks (+ (JournalIntervals.JournalInterval.start |interval#0@@25|) |i#4@0|)) (and (and anon60_Then_correct anon61_Then_correct) anon61_Else_correct))))) (let ((anon54_Then_correct  (=> (! (and %lbl%+25 true) :lblpos +25) (=> (< |i#4@0| (JournalIntervals.JournalInterval.len |interval#0@@25|)) (=> (and (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|)) (and anon55_Then_correct anon55_Else_correct)))))) (let ((anon54_Else_correct  (=> (! (and %lbl%+26 true) :lblpos +26) (=> (<= (JournalIntervals.JournalInterval.len |interval#0@@25|) |i#4@0|) (and (! (or %lbl%@27  (and (<= 0 |i#4@0|) (< |i#4@0| (|Seq#Length| |slice'#0@0|)))) :lblneg @27) (and (! (or %lbl%@28 (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#4@0|)))) :lblneg @28) (=> (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#4@0|))) anon17_correct))))))) (let ((anon3_correct  (=> (! (and %lbl%+29 true) :lblpos +29) (=> (and (<= (LitInt 0) |i#4@0|) (< |i#4@0| (|Seq#Length| |slice'#0@0|))) (and (! (or %lbl%@30 (forall (($o@@106 T@U) ($f@@72 T@U) ) (! (let ((alpha@@73 (FieldTypeInv0 (type $f@@72)))) (=> (and (and (= (type $o@@106) refType) (= (type $f@@72) (FieldType alpha@@73))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@106 $f@@72)))) :qid |JournalI.310:25| :skolemid |1221| :no-pattern (type $o@@106) :no-pattern (type $f@@72) :no-pattern (U_2_int $o@@106) :no-pattern (U_2_bool $o@@106) :no-pattern (U_2_int $f@@72) :no-pattern (U_2_bool $f@@72) ))) :lblneg @30) (=> (forall (($o@@107 T@U) ($f@@73 T@U) ) (! (let ((alpha@@74 (FieldTypeInv0 (type $f@@73)))) (=> (and (and (= (type $o@@107) refType) (= (type $f@@73) (FieldType alpha@@74))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@107 $f@@73)))) :qid |JournalI.310:25| :skolemid |1221| :no-pattern (type@@0 $o@@100) :no-pattern (type@@0 $f@@66) :no-pattern (type $o@@107) :no-pattern (type $f@@73) :no-pattern (U_2_int $o@@107) :no-pattern (U_2_bool $o@@107) :no-pattern (U_2_int $f@@73) :no-pattern (U_2_bool $f@@73) )) (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (= $Heap@0 $Heap@5) (= StartFuel_JournalIntervals._default.CyclicSlice ($LS MoreFuel_JournalIntervals._default.CyclicSlice0))) (and (= StartFuelAssert_JournalIntervals._default.CyclicSlice ($LS ($LS MoreFuel_JournalIntervals._default.CyclicSlice0))) (= (AsFuelBottom MoreFuel_JournalIntervals._default.CyclicSlice0) MoreFuel_JournalIntervals._default.CyclicSlice0))) (and (! (or %lbl%@31 (forall (($o@@108 T@U) ($f@@74 T@U) ) (! (let ((alpha@@75 (FieldTypeInv0 (type $f@@74)))) (=> (and (and (= (type $o@@108) refType) (= (type $f@@74) (FieldType alpha@@75))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@108 $f@@74)))) :qid |JournalI.311:27| :skolemid |1222| :no-pattern (type $o@@108) :no-pattern (type $f@@74) :no-pattern (U_2_int $o@@108) :no-pattern (U_2_bool $o@@108) :no-pattern (U_2_int $f@@74) :no-pattern (U_2_bool $f@@74) ))) :lblneg @31) (=> (forall (($o@@109 T@U) ($f@@75 T@U) ) (! (let ((alpha@@76 (FieldTypeInv0 (type $f@@75)))) (=> (and (and (= (type $o@@109) refType) (= (type $f@@75) (FieldType alpha@@76))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@109 $f@@75)))) :qid |JournalI.311:27| :skolemid |1222| :no-pattern (type@@0 $o@@101) :no-pattern (type@@0 $f@@67) :no-pattern (type $o@@109) :no-pattern (type $f@@75) :no-pattern (U_2_int $o@@109) :no-pattern (U_2_bool $o@@109) :no-pattern (U_2_int $f@@75) :no-pattern (U_2_bool $f@@75) )) (=> (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (= $Heap@5 $Heap@6) (= StartFuel_JournalIntervals._default.JournalUpdate ($LS MoreFuel_JournalIntervals._default.JournalUpdate0)))) (and (and (= StartFuelAssert_JournalIntervals._default.JournalUpdate ($LS ($LS MoreFuel_JournalIntervals._default.JournalUpdate0))) (= (AsFuelBottom MoreFuel_JournalIntervals._default.JournalUpdate0) MoreFuel_JournalIntervals._default.JournalUpdate0)) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|)))) (and anon54_Then_correct anon54_Else_correct)))))))))))) (let ((anon53_Else_correct  (=> (! (and %lbl%+32 true) :lblpos +32) (=> (< |i#4@0| (LitInt 0)) anon3_correct)))) (let ((anon53_Then_correct  (=> (! (and %lbl%+33 true) :lblpos +33) (=> (<= (LitInt 0) |i#4@0|) anon3_correct)))) (let ((anon52_Then_correct  (=> (! (and %lbl%+34 true) :lblpos +34) (and anon53_Then_correct anon53_Else_correct)))) (let ((anon70_Then_correct  (=> (! (and %lbl%+35 true) :lblpos +35) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (=> (and (and (<= 0 (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal'#0@@5|))) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|)) (and (! (or %lbl%@36  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice'#0@0|)))) :lblneg @36) (! (or %lbl%@37 (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)))) ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|)))) :lblneg @37))))))) (let ((anon69_Then_correct  (=> (! (and %lbl%+38 true) :lblpos +38) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (=> (and (and (<= 0 (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal#0@@29|))) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|))) (and (! (or %lbl%@39  (and (<= 0 (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal'#0@@5|)))) :lblneg @39) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (! (or %lbl%@40 (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |journal#0@@29| (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)))) ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)))))) :lblneg @40)))))))) (let ((anon68_Then_correct  (=> (! (and %lbl%+41 true) :lblpos +41) (=> (and (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice#4@0|))) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|)) (and (! (or %lbl%@42  (and (<= 0 (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal#0@@29|)))) :lblneg @42) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (! (or %lbl%@43 (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#9@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |journal#0@@29| (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)))))) :lblneg @43))))))) (let ((anon67_Then_correct  (=> (! (and %lbl%+44 true) :lblpos +44) (! (or %lbl%@45  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice#4@0|)))) :lblneg @45)))) (let ((anon72_Then_correct  (=> (! (and %lbl%+46 true) :lblpos +46) (=> (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice#4@0|))) (and (! (or %lbl%@47  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice'#0@0|)))) :lblneg @47) (! (or %lbl%@48 (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#9@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|)))) :lblneg @48)))))) (let ((anon71_Then_correct  (=> (! (and %lbl%+49 true) :lblpos +49) (! (or %lbl%@50  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice#4@0|)))) :lblneg @50)))) (let ((anon77_Then_correct  (=> (! (and %lbl%+51 true) :lblpos +51) (=> (and (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice'#0@0|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|)))) (and (! (or %lbl%@52  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |a#0@0|)))) :lblneg @52) (! (or %lbl%@53 (= (Options.Option.value ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|))) (|Seq#Index| |a#0@0| |i#9@0|))) :lblneg @53)))))) (let ((anon76_Then_correct  (=> (! (and %lbl%+54 true) :lblpos +54) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (=> (and (and (<= 0 (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal'#0@@5|))) (and (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))))) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|))) (and (! (or %lbl%@55  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice'#0@0|)))) :lblneg @55) (and (! (or %lbl%@56 (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|)))) :lblneg @56) (=> (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|))) (! (or %lbl%@57 (= (Options.Option.value ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))))) (Options.Option.value ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|))))) :lblneg @57))))))))) (let ((anon75_Then_correct  (=> (! (and %lbl%+58 true) :lblpos +58) (=> (and (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |b#0@0|))) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|)) (and (! (or %lbl%@59  (and (<= 0 (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))) (< (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) (|Seq#Length| |journal'#0@@5|)))) :lblneg @59) (and (! (or %lbl%@60 (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)))))) :lblneg @60) (=> (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))))) (=> (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (! (or %lbl%@61 (= (|Seq#Index| |b#0@0| |i#9@0|) (Options.Option.value ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|))))))) :lblneg @61))))))))) (let ((anon74_Then_correct  (=> (! (and %lbl%+62 true) :lblpos +62) (! (or %lbl%@63  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |b#0@0|)))) :lblneg @63)))) (let ((anon49_correct  (=> (! (and %lbl%+64 true) :lblpos +64) (! (or %lbl%@65 (= (|Seq#Index| |a#0@0| |i#9@0|) (|Seq#Index| |b#0@0| |i#9@0|))) :lblneg @65)))) (let ((anon70_Else_correct  (=> (! (and %lbl%+66 true) :lblpos +66) (=> (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#9@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|))) anon49_correct)))) (let ((anon66_Then_correct  (=> (! (and %lbl%+67 true) :lblpos +67) (=> (< (+ (JournalIntervals.JournalInterval.start |interval#0@@25|) |i#9@0|) DiskLayout.__default.NumJournalBlocks) (and (and (and (and anon67_Then_correct anon68_Then_correct) anon69_Then_correct) anon70_Then_correct) anon70_Else_correct))))) (let ((anon72_Else_correct  (=> (! (and %lbl%+68 true) :lblpos +68) (=> (|Options.Option#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#9@0|)) ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|))) anon49_correct)))) (let ((anon66_Else_correct  (=> (! (and %lbl%+69 true) :lblpos +69) (=> (<= DiskLayout.__default.NumJournalBlocks (+ (JournalIntervals.JournalInterval.start |interval#0@@25|) |i#9@0|)) (and (and anon71_Then_correct anon72_Then_correct) anon72_Else_correct))))) (let ((anon65_Then_correct  (=> (! (and %lbl%+70 true) :lblpos +70) (=> (< |i#9@0| (JournalIntervals.JournalInterval.len |interval#0@@25|)) (=> (and (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|)) (and anon66_Then_correct anon66_Else_correct)))))) (let ((anon77_Else_correct  (=> (! (and %lbl%+71 true) :lblpos +71) (=> (= (|Seq#Index| |b#0@0| |i#9@0|) (|Seq#Index| |a#0@0| |i#9@0|)) anon49_correct)))) (let ((anon73_Then_correct  (=> (! (and %lbl%+72 true) :lblpos +72) (=> (< (+ (JournalIntervals.JournalInterval.start |interval#0@@25|) |i#9@0|) DiskLayout.__default.NumJournalBlocks) (and (and (and (and anon74_Then_correct anon75_Then_correct) anon76_Then_correct) anon77_Then_correct) anon77_Else_correct))))) (let ((anon81_Else_correct  (=> (! (and %lbl%+73 true) :lblpos +73) (=> (= (|Seq#Index| |b#0@0| |i#9@0|) (|Seq#Index| |a#0@0| |i#9@0|)) anon49_correct)))) (let ((anon81_Then_correct  (=> (! (and %lbl%+74 true) :lblpos +74) (=> (and (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice'#0@0|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|)))) (and (! (or %lbl%@75  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |a#0@0|)))) :lblneg @75) (! (or %lbl%@76 (= (Options.Option.value ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|))) (|Seq#Index| |a#0@0| |i#9@0|))) :lblneg @76)))))) (let ((anon80_Then_correct  (=> (! (and %lbl%+77 true) :lblpos +77) (=> (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|) (=> (and (and (and (<= 0 (- (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) DiskLayout.__default.NumJournalBlocks)) (< (- (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) DiskLayout.__default.NumJournalBlocks) (|Seq#Length| |journal'#0@@5|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (- (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) DiskLayout.__default.NumJournalBlocks))))) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|)) (and (! (or %lbl%@78  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |slice'#0@0|)))) :lblneg @78) (and (! (or %lbl%@79 (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|)))) :lblneg @79) (=> (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|))) (! (or %lbl%@80 (= (Options.Option.value ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (- (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) DiskLayout.__default.NumJournalBlocks)))) (Options.Option.value ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#9@0|))))) :lblneg @80))))))))) (let ((anon79_Then_correct  (=> (! (and %lbl%+81 true) :lblpos +81) (=> (and (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |b#0@0|))) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|)) (and (! (or %lbl%@82  (and (<= 0 (- (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) DiskLayout.__default.NumJournalBlocks)) (< (- (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) DiskLayout.__default.NumJournalBlocks) (|Seq#Length| |journal'#0@@5|)))) :lblneg @82) (and (! (or %lbl%@83 (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (- (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) DiskLayout.__default.NumJournalBlocks))))) :lblneg @83) (=> (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (- (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) DiskLayout.__default.NumJournalBlocks)))) (=> (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|) (! (or %lbl%@84 (= (|Seq#Index| |b#0@0| |i#9@0|) (Options.Option.value ($Unbox DatatypeTypeType (|Seq#Index| |journal'#0@@5| (- (+ |i#9@0| (JournalIntervals.JournalInterval.start |interval#0@@25|)) DiskLayout.__default.NumJournalBlocks)))))) :lblneg @84))))))))) (let ((anon78_Then_correct  (=> (! (and %lbl%+85 true) :lblpos +85) (! (or %lbl%@86  (and (<= 0 |i#9@0|) (< |i#9@0| (|Seq#Length| |b#0@0|)))) :lblneg @86)))) (let ((anon73_Else_correct  (=> (! (and %lbl%+87 true) :lblpos +87) (=> (<= DiskLayout.__default.NumJournalBlocks (+ (JournalIntervals.JournalInterval.start |interval#0@@25|) |i#9@0|)) (and (and (and (and anon78_Then_correct anon79_Then_correct) anon80_Then_correct) anon81_Then_correct) anon81_Else_correct))))) (let ((anon65_Else_correct  (=> (! (and %lbl%+88 true) :lblpos +88) (=> (<= (JournalIntervals.JournalInterval.len |interval#0@@25|) |i#9@0|) (=> (and (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) |DiskLayout.__default.NumJournalBlocks#canCall|)) (and anon73_Then_correct anon73_Else_correct)))))) (let ((anon24_correct  (=> (! (and %lbl%+89 true) :lblpos +89) (=> (and (<= (LitInt 0) |i#9@0|) (< |i#9@0| (|Seq#Length| |a#0@0|))) (and (! (or %lbl%@90 (forall (($o@@110 T@U) ($f@@76 T@U) ) (! (let ((alpha@@77 (FieldTypeInv0 (type $f@@76)))) (=> (and (and (= (type $o@@110) refType) (= (type $f@@76) (FieldType alpha@@77))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@110 $f@@76)))) :qid |JournalI.342:25| :skolemid |1231| :no-pattern (type $o@@110) :no-pattern (type $f@@76) :no-pattern (U_2_int $o@@110) :no-pattern (U_2_bool $o@@110) :no-pattern (U_2_int $f@@76) :no-pattern (U_2_bool $f@@76) ))) :lblneg @90) (=> (forall (($o@@111 T@U) ($f@@77 T@U) ) (! (let ((alpha@@78 (FieldTypeInv0 (type $f@@77)))) (=> (and (and (= (type $o@@111) refType) (= (type $f@@77) (FieldType alpha@@78))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@111 $f@@77)))) :qid |JournalI.342:25| :skolemid |1231| :no-pattern (type@@0 $o@@102) :no-pattern (type@@0 $f@@68) :no-pattern (type $o@@111) :no-pattern (type $f@@77) :no-pattern (U_2_int $o@@111) :no-pattern (U_2_bool $o@@111) :no-pattern (U_2_int $f@@77) :no-pattern (U_2_bool $f@@77) )) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (= $Heap@0 $Heap@3) (= StartFuel_JournalIntervals._default.CyclicSlice ($LS MoreFuel_JournalIntervals._default.CyclicSlice0))) (and (= StartFuelAssert_JournalIntervals._default.CyclicSlice ($LS ($LS MoreFuel_JournalIntervals._default.CyclicSlice0))) (= (AsFuelBottom MoreFuel_JournalIntervals._default.CyclicSlice0) MoreFuel_JournalIntervals._default.CyclicSlice0))) (and (! (or %lbl%@91 (forall (($o@@112 T@U) ($f@@78 T@U) ) (! (let ((alpha@@79 (FieldTypeInv0 (type $f@@78)))) (=> (and (and (= (type $o@@112) refType) (= (type $f@@78) (FieldType alpha@@79))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@112 $f@@78)))) :qid |JournalI.343:27| :skolemid |1232| :no-pattern (type $o@@112) :no-pattern (type $f@@78) :no-pattern (U_2_int $o@@112) :no-pattern (U_2_bool $o@@112) :no-pattern (U_2_int $f@@78) :no-pattern (U_2_bool $f@@78) ))) :lblneg @91) (=> (forall (($o@@113 T@U) ($f@@79 T@U) ) (! (let ((alpha@@80 (FieldTypeInv0 (type $f@@79)))) (=> (and (and (= (type $o@@113) refType) (= (type $f@@79) (FieldType alpha@@80))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@113 $f@@79)))) :qid |JournalI.343:27| :skolemid |1232| :no-pattern (type@@0 $o@@103) :no-pattern (type@@0 $f@@69) :no-pattern (type $o@@113) :no-pattern (type $f@@79) :no-pattern (U_2_int $o@@113) :no-pattern (U_2_bool $o@@113) :no-pattern (U_2_int $f@@79) :no-pattern (U_2_bool $f@@79) )) (=> (and (and (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (and (= $Heap@3 $Heap@4) (= StartFuel_JournalIntervals._default.JournalUpdate ($LS MoreFuel_JournalIntervals._default.JournalUpdate0)))) (and (and (= StartFuelAssert_JournalIntervals._default.JournalUpdate ($LS ($LS MoreFuel_JournalIntervals._default.JournalUpdate0))) (= (AsFuelBottom MoreFuel_JournalIntervals._default.JournalUpdate0) MoreFuel_JournalIntervals._default.JournalUpdate0)) (and (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|) (JournalIntervals.JournalInterval.JournalInterval_q |interval#0@@25|)))) (and anon65_Then_correct anon65_Else_correct)))))))))))) (let ((anon64_Else_correct  (=> (! (and %lbl%+92 true) :lblpos +92) (=> (< |i#9@0| (LitInt 0)) anon24_correct)))) (let ((anon64_Then_correct  (=> (! (and %lbl%+93 true) :lblpos +93) (=> (<= (LitInt 0) |i#9@0|) anon24_correct)))) (let ((anon63_Then_correct  (=> (! (and %lbl%+94 true) :lblpos +94) (and anon64_Then_correct anon64_Else_correct)))) (let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+95 true) :lblpos +95) (and (! (or %lbl%@96  (=> (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (= (|Seq#Length| |journal'#0@@5|) (LitInt DiskLayout.__default.NumJournalBlocks))))))) :lblneg @96) (=> (=> (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (= (|Seq#Length| |journal'#0@@5|) (LitInt DiskLayout.__default.NumJournalBlocks)))))) (and (! (or %lbl%@97  (=> (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (U_2_bool (Lit (bool_2_U true)))))))) :lblneg @97) (=> (=> (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (U_2_bool (Lit (bool_2_U true))))))) (and (! (or %lbl%@98  (=> (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (let ((|slice#3| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuelAssert_JournalIntervals._default.CyclicSlice |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)))) (=> (|JournalIntervals.__default.fullRange#canCall| |slice#3|) (or (JournalIntervals.__default.fullRange |slice#3|) (forall ((|i#3@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@5|) (< |i#3@@5| (|Seq#Length| |slice#3|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice#3| |i#3@@5|)))) :qid |JournalI.155:12| :skolemid |1218| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice#3| |i#3@@5|))) )))))))))) :lblneg @98) (=> (=> (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (let ((|slice#3@@0| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuelAssert_JournalIntervals._default.CyclicSlice |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)))) (=> (|JournalIntervals.__default.fullRange#canCall| |slice#3@@0|) (or (JournalIntervals.__default.fullRange |slice#3@@0|) (forall ((|i#3@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@6|) (< |i#3@@6| (|Seq#Length| |slice#3@@0|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice#3@@0| |i#3@@6|)))) :qid |JournalI.155:12| :skolemid |1218| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice#3@@0| |i#3@@6|))) ))))))))) (and (! (or %lbl%@99  (=> (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) (JournalIntervals.__default.Disk__JournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|))))))) :lblneg @99) (=> (=> (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) (JournalIntervals.__default.Disk__JournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)))))) (! (or %lbl%@100 (|Seq#Equal| (JournalIntervals.__default.Disk__Journal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (|Seq#Append| (JournalIntervals.__default.Disk__Journal |journal#0@@29| |interval#0@@25|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) |jr#0@@21|)))))) :lblneg @100)))))))))))) (let ((anon63_Else_correct  (=> (! (and %lbl%+101 true) :lblpos +101) (=> (forall ((|i#10| Int) ) (!  (=> (and (<= (LitInt 0) |i#10|) (< |i#10| (|Seq#Length| |a#0@0|))) (= (|Seq#Index| |a#0@0| |i#10|) (|Seq#Index| |b#0@0| |i#10|))) :qid |JournalI.339:12| :skolemid |1233| :pattern ( (|Seq#Index| |b#0@0| |i#10|)) :pattern ( (|Seq#Index| |a#0@0| |i#10|)) )) (=> (and ($IsAlloc |interval#0@@25| Tclass.JournalIntervals.JournalInterval $Heap@0) ($IsAlloc |interval_write#0| Tclass.JournalIntervals.JournalInterval $Heap@0)) (and (! (or %lbl%@102 (= (JournalIntervals.__default.NextStartPoint |interval#0@@25|) (JournalIntervals.JournalInterval.start |interval_write#0|))) :lblneg @102) (=> (|JournalIntervals.__default.concatIntervals#canCall| |interval#0@@25| |interval_write#0|) (=> (and (and (JournalIntervals.JournalInterval.JournalInterval_q (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) ($IsAlloc |journal'#0@@5| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@0)) (and (= |##interval#7@0| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) ($IsAlloc |##interval#7@0| Tclass.JournalIntervals.JournalInterval $Heap@0))) (and (! (or %lbl%@103  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |##interval#7@0|) (or (JournalIntervals.__default.ValidJournalInterval |##interval#7@0|) (<= (LitInt 0) (JournalIntervals.JournalInterval.start |##interval#7@0|))))) :lblneg @103) (and (! (or %lbl%@104  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |##interval#7@0|) (or (JournalIntervals.__default.ValidJournalInterval |##interval#7@0|) (< (JournalIntervals.JournalInterval.start |##interval#7@0|) DiskLayout.__default.NumJournalBlocks)))) :lblneg @104) (and (! (or %lbl%@105  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |##interval#7@0|) (or (JournalIntervals.__default.ValidJournalInterval |##interval#7@0|) (<= (LitInt 0) (JournalIntervals.JournalInterval.len |##interval#7@0|))))) :lblneg @105) (and (! (or %lbl%@106  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |##interval#7@0|) (or (JournalIntervals.__default.ValidJournalInterval |##interval#7@0|) (<= (JournalIntervals.JournalInterval.len |##interval#7@0|) (LitInt DiskLayout.__default.NumJournalBlocks))))) :lblneg @106) (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (=> (and (|JournalIntervals.__default.concatIntervals#canCall| |interval#0@@25| |interval_write#0|) (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|))) (and (! (or %lbl%@107  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (= (|Seq#Length| |journal'#0@@5|) (LitInt DiskLayout.__default.NumJournalBlocks))))) :lblneg @107) (and (! (or %lbl%@108  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (U_2_bool (Lit (bool_2_U true)))))) :lblneg @108) (and (! (or %lbl%@109  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (let ((|slice#5| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuelAssert_JournalIntervals._default.CyclicSlice |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)))) (=> (|JournalIntervals.__default.fullRange#canCall| |slice#5|) (or (JournalIntervals.__default.fullRange |slice#5|) (forall ((|i#11| Int) ) (!  (=> (and (<= (LitInt 0) |i#11|) (< |i#11| (|Seq#Length| |slice#5|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice#5| |i#11|)))) :qid |JournalI.155:12| :skolemid |1234| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice#5| |i#11|))) )))))))) :lblneg @109) (=> (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (=> (and ($IsAlloc |interval#0@@25| Tclass.JournalIntervals.JournalInterval $Heap@0) ($IsAlloc |interval_write#0| Tclass.JournalIntervals.JournalInterval $Heap@0)) (and (! (or %lbl%@110 (= (JournalIntervals.__default.NextStartPoint |interval#0@@25|) (JournalIntervals.JournalInterval.start |interval_write#0|))) :lblneg @110) (=> (|JournalIntervals.__default.concatIntervals#canCall| |interval#0@@25| |interval_write#0|) (=> (and (and (JournalIntervals.JournalInterval.JournalInterval_q (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) ($IsAlloc |journal'#0@@5| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@0)) (and (= |##interval#8@0| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) ($IsAlloc |##interval#8@0| Tclass.JournalIntervals.JournalInterval $Heap@0))) (and (! (or %lbl%@111  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |##interval#8@0|) (or (JournalIntervals.__default.ValidJournalInterval |##interval#8@0|) (<= (LitInt 0) (JournalIntervals.JournalInterval.start |##interval#8@0|))))) :lblneg @111) (and (! (or %lbl%@112  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |##interval#8@0|) (or (JournalIntervals.__default.ValidJournalInterval |##interval#8@0|) (< (JournalIntervals.JournalInterval.start |##interval#8@0|) DiskLayout.__default.NumJournalBlocks)))) :lblneg @112) (and (! (or %lbl%@113  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |##interval#8@0|) (or (JournalIntervals.__default.ValidJournalInterval |##interval#8@0|) (<= (LitInt 0) (JournalIntervals.JournalInterval.len |##interval#8@0|))))) :lblneg @113) (and (! (or %lbl%@114  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |##interval#8@0|) (or (JournalIntervals.__default.ValidJournalInterval |##interval#8@0|) (<= (JournalIntervals.JournalInterval.len |##interval#8@0|) (LitInt DiskLayout.__default.NumJournalBlocks))))) :lblneg @114) (and (! (or %lbl%@115  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| |##interval#8@0|) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| |##interval#8@0|) (= (|Seq#Length| |journal'#0@@5|) (LitInt DiskLayout.__default.NumJournalBlocks))))) :lblneg @115) (and (! (or %lbl%@116  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| |##interval#8@0|) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| |##interval#8@0|) (U_2_bool (Lit (bool_2_U true)))))) :lblneg @116) (and (! (or %lbl%@117  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal'#0@@5| |##interval#8@0|) (or (JournalIntervals.__default.Disk__HasJournalRange |journal'#0@@5| |##interval#8@0|) (let ((|slice#6| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuelAssert_JournalIntervals._default.CyclicSlice |journal'#0@@5| |##interval#8@0|))) (=> (|JournalIntervals.__default.fullRange#canCall| |slice#6|) (or (JournalIntervals.__default.fullRange |slice#6|) (forall ((|i#12| Int) ) (!  (=> (and (<= (LitInt 0) |i#12|) (< |i#12| (|Seq#Length| |slice#6|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice#6| |i#12|)))) :qid |JournalI.155:12| :skolemid |1236| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice#6| |i#12|))) )))))))) :lblneg @117) (=> (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (=> (and ($IsAlloc |journal#0@@29| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@0) ($IsAlloc |interval#0@@25| Tclass.JournalIntervals.JournalInterval $Heap@0)) (and (! (or %lbl%@118  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |interval#0@@25|) (or (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval#0@@25|))))) :lblneg @118) (and (! (or %lbl%@119  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |interval#0@@25|) (or (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (< (JournalIntervals.JournalInterval.start |interval#0@@25|) DiskLayout.__default.NumJournalBlocks)))) :lblneg @119) (and (! (or %lbl%@120  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |interval#0@@25|) (or (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval#0@@25|))))) :lblneg @120) (and (! (or %lbl%@121  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |interval#0@@25|) (or (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (<= (JournalIntervals.JournalInterval.len |interval#0@@25|) (LitInt DiskLayout.__default.NumJournalBlocks))))) :lblneg @121) (and (! (or %lbl%@122  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal#0@@29| |interval#0@@25|) (or (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@29| |interval#0@@25|) (= (|Seq#Length| |journal#0@@29|) (LitInt DiskLayout.__default.NumJournalBlocks))))) :lblneg @122) (and (! (or %lbl%@123  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal#0@@29| |interval#0@@25|) (or (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@29| |interval#0@@25|) (U_2_bool (Lit (bool_2_U true)))))) :lblneg @123) (and (! (or %lbl%@124  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal#0@@29| |interval#0@@25|) (or (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@29| |interval#0@@25|) (let ((|slice#7| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuelAssert_JournalIntervals._default.CyclicSlice |journal#0@@29| |interval#0@@25|))) (=> (|JournalIntervals.__default.fullRange#canCall| |slice#7|) (or (JournalIntervals.__default.fullRange |slice#7|) (forall ((|i#13| Int) ) (!  (=> (and (<= (LitInt 0) |i#13|) (< |i#13| (|Seq#Length| |slice#7|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice#7| |i#13|)))) :qid |JournalI.155:12| :skolemid |1238| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice#7| |i#13|))) )))))))) :lblneg @124) (=> (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal#0@@29| |interval#0@@25|) (=> (and (and (|JournalIntervals.__default.concatIntervals#canCall| |interval#0@@25| |interval_write#0|) (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|))) (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal#0@@29| |interval#0@@25|)) (and (! (or %lbl%@125 (|Seq#Equal| (JournalIntervals.__default.Disk__JournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (|Seq#Append| (JournalIntervals.__default.Disk__JournalRange |journal#0@@29| |interval#0@@25|) |jr#0@@21|))) :lblneg @125) (=> (|Seq#Equal| (JournalIntervals.__default.Disk__JournalRange |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (|Seq#Append| (JournalIntervals.__default.Disk__JournalRange |journal#0@@29| |interval#0@@25|) |jr#0@@21|)) (=> (and ($IsAlloc |journal#0@@29| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@0) ($IsAlloc |interval#0@@25| Tclass.JournalIntervals.JournalInterval $Heap@0)) (and (! (or %lbl%@126  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |interval#0@@25|) (or (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval#0@@25|))))) :lblneg @126) (and (! (or %lbl%@127  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |interval#0@@25|) (or (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (< (JournalIntervals.JournalInterval.start |interval#0@@25|) DiskLayout.__default.NumJournalBlocks)))) :lblneg @127) (and (! (or %lbl%@128  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |interval#0@@25|) (or (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval#0@@25|))))) :lblneg @128) (and (! (or %lbl%@129  (=> (|JournalIntervals.__default.ValidJournalInterval#canCall| |interval#0@@25|) (or (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (<= (JournalIntervals.JournalInterval.len |interval#0@@25|) (LitInt DiskLayout.__default.NumJournalBlocks))))) :lblneg @129) (=> (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (and (! (or %lbl%@130  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal#0@@29| |interval#0@@25|) (or (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@29| |interval#0@@25|) (= (|Seq#Length| |journal#0@@29|) (LitInt DiskLayout.__default.NumJournalBlocks))))) :lblneg @130) (and (! (or %lbl%@131  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal#0@@29| |interval#0@@25|) (or (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@29| |interval#0@@25|) (U_2_bool (Lit (bool_2_U true)))))) :lblneg @131) (and (! (or %lbl%@132  (=> (|JournalIntervals.__default.Disk__HasJournalRange#canCall| |journal#0@@29| |interval#0@@25|) (or (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@29| |interval#0@@25|) (let ((|slice#8| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuelAssert_JournalIntervals._default.CyclicSlice |journal#0@@29| |interval#0@@25|))) (=> (|JournalIntervals.__default.fullRange#canCall| |slice#8|) (or (JournalIntervals.__default.fullRange |slice#8|) (forall ((|i#14| Int) ) (!  (=> (and (<= (LitInt 0) |i#14|) (< |i#14| (|Seq#Length| |slice#8|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice#8| |i#14|)))) :qid |JournalI.155:12| :skolemid |1240| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice#8| |i#14|))) )))))))) :lblneg @132) (=> (and (and (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@29| |interval#0@@25|) (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal#0@@29| |interval#0@@25|)) (and (|JournalIntervals.__default.Disk__JournalRange#canCall| |journal#0@@29| |interval#0@@25|) (= |a##0@0| (JournalIntervals.__default.Disk__JournalRange |journal#0@@29| |interval#0@@25|)))) (and (! (or %lbl%@133 (forall (($o@@114 T@U) ($f@@80 T@U) ) (! (let ((alpha@@81 (FieldTypeInv0 (type $f@@80)))) (=> (and (and (= (type $o@@114) refType) (= (type $f@@80) (FieldType alpha@@81))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@114 $f@@80)))) :qid |JournalI.380:30| :skolemid |1242| :no-pattern (type $o@@114) :no-pattern (type $f@@80) :no-pattern (U_2_int $o@@114) :no-pattern (U_2_bool $o@@114) :no-pattern (U_2_int $f@@80) :no-pattern (U_2_bool $f@@80) ))) :lblneg @133) (=> (forall (($o@@115 T@U) ($f@@81 T@U) ) (! (let ((alpha@@82 (FieldTypeInv0 (type $f@@81)))) (=> (and (and (= (type $o@@115) refType) (= (type $f@@81) (FieldType alpha@@82))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@115 $f@@81)))) :qid |JournalI.380:30| :skolemid |1242| :no-pattern (type@@0 $o@@104) :no-pattern (type@@0 $f@@70) :no-pattern (type $o@@115) :no-pattern (type $f@@81) :no-pattern (U_2_int $o@@115) :no-pattern (U_2_bool $o@@115) :no-pattern (U_2_int $f@@81) :no-pattern (U_2_bool $f@@81) )) (and (! (or %lbl%@134 (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) |a##0@0|))) :lblneg @134) (=> (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) |a##0@0|)) (and (! (or %lbl%@135 (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) |jr#0@@21|))) :lblneg @135) (=> (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) |jr#0@@21|)) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (|JournalRanges.__default.JournalRangeConcat#canCall| |a##0@0| |jr#0@@21|) (|JournalRanges.__default.parseJournalRange#canCall| (JournalRanges.__default.JournalRangeConcat |a##0@0| |jr#0@@21|))) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) (JournalRanges.__default.JournalRangeConcat |a##0@0| |jr#0@@21|)))) (=> (and (and (and (|JournalRanges.__default.JournalRangeConcat#canCall| |a##0@0| |jr#0@@21|) (|JournalRanges.__default.parseJournalRange#canCall| (JournalRanges.__default.JournalRangeConcat |a##0@0| |jr#0@@21|))) (and (|JournalRanges.__default.parseJournalRange#canCall| |a##0@0|) (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@@21|))) (and (|Seq#Equal| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) (JournalRanges.__default.JournalRangeConcat |a##0@0| |jr#0@@21|)))) (|Seq#Append| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) |a##0@0|))) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) |jr#0@@21|))))) (= $Heap@0 $Heap@2))) GeneratedUnifiedExit_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon62_Else_correct  (=> (! (and %lbl%+136 true) :lblpos +136) (=> (= (|Seq#Length| |a#0@0|) (|Seq#Length| |b#0@0|)) (and anon63_Then_correct anon63_Else_correct))))) (let ((anon62_Then_correct  (=> (! (and %lbl%+137 true) :lblpos +137) (and (! (or %lbl%@138 (forall (($o@@116 T@U) ($f@@82 T@U) ) (! (let ((alpha@@83 (FieldTypeInv0 (type $f@@82)))) (=> (and (and (= (type $o@@116) refType) (= (type $f@@82) (FieldType alpha@@83))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@116 $f@@82)))) :qid |JournalI.337:46| :skolemid |1230| :no-pattern (type $o@@116) :no-pattern (type $f@@82) :no-pattern (U_2_int $o@@116) :no-pattern (U_2_bool $o@@116) :no-pattern (U_2_int $f@@82) :no-pattern (U_2_bool $f@@82) ))) :lblneg @138) (=> (forall (($o@@117 T@U) ($f@@83 T@U) ) (! (let ((alpha@@84 (FieldTypeInv0 (type $f@@83)))) (=> (and (and (= (type $o@@117) refType) (= (type $f@@83) (FieldType alpha@@84))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@117 $f@@83)))) :qid |JournalI.337:46| :skolemid |1230| :no-pattern (type@@0 $o@@105) :no-pattern (type@@0 $f@@71) :no-pattern (type $o@@117) :no-pattern (type $f@@83) :no-pattern (U_2_int $o@@117) :no-pattern (U_2_bool $o@@117) :no-pattern (U_2_int $f@@83) :no-pattern (U_2_bool $f@@83) )) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (= $Heap@0 $Heap@1) (= StartFuel_JournalIntervals._default.CyclicSlice ($LS MoreFuel_JournalIntervals._default.CyclicSlice0))) (and (= StartFuelAssert_JournalIntervals._default.CyclicSlice ($LS ($LS MoreFuel_JournalIntervals._default.CyclicSlice0))) (= (AsFuelBottom MoreFuel_JournalIntervals._default.CyclicSlice0) MoreFuel_JournalIntervals._default.CyclicSlice0))) (! (or %lbl%@139 (= (|Seq#Length| |a#0@0|) (|Seq#Length| |b#0@0|))) :lblneg @139)))))))) (let ((anon52_Else_correct  (=> (! (and %lbl%+140 true) :lblpos +140) (=> (and (and (forall ((|i#5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5|) (< |i#5| (|Seq#Length| |slice'#0@0|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#5|)))) :qid |JournalI.307:12| :skolemid |1223| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#5|))) )) ($IsAlloc |slice'#0@0| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@0)) (and (|JournalIntervals.__default.fullRange#canCall| |slice'#0@0|) (|JournalIntervals.__default.fullRange#canCall| |slice'#0@0|))) (and (! (or %lbl%@141  (=> (|JournalIntervals.__default.fullRange#canCall| |slice'#0@0|) (or (JournalIntervals.__default.fullRange |slice'#0@0|) (forall ((|i#6| Int) ) (!  (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (|Seq#Length| |slice'#0@0|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#6|)))) :qid |JournalI.155:12| :skolemid |1224| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#6|))) ))))) :lblneg @141) (=> (and (JournalIntervals.__default.fullRange |slice'#0@0|) ($IsAlloc |slice'#0@0| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@0)) (and (! (or %lbl%@142  (=> (|JournalIntervals.__default.fullRange#canCall| |slice'#0@0|) (or (JournalIntervals.__default.fullRange |slice'#0@0|) (forall ((|i#7| Int) ) (!  (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (|Seq#Length| |slice'#0@0|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#7|)))) :qid |JournalI.155:12| :skolemid |1226| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice'#0@0| |i#7|))) ))))) :lblneg @142) (=> (JournalIntervals.__default.fullRange |slice'#0@0|) (=> (and (and (|JournalIntervals.__default.concatFold#canCall| |slice'#0@0|) (|JournalIntervals.__default.concatFold#canCall| |slice'#0@0|)) (and (= |a#0@0| (JournalIntervals.__default.concatFold ($LS $LZ) |slice'#0@0|)) ($IsAlloc |slice#4@0| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@0))) (and (! (or %lbl%@143  (=> (|JournalIntervals.__default.fullRange#canCall| |slice#4@0|) (or (JournalIntervals.__default.fullRange |slice#4@0|) (forall ((|i#8| Int) ) (!  (=> (and (<= (LitInt 0) |i#8|) (< |i#8| (|Seq#Length| |slice#4@0|))) (Options.Option.Some_q ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#8|)))) :qid |JournalI.155:12| :skolemid |1228| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |slice#4@0| |i#8|))) ))))) :lblneg @143) (=> (and (and (JournalIntervals.__default.fullRange |slice#4@0|) (|JournalIntervals.__default.concatFold#canCall| |slice#4@0|)) (and (|JournalIntervals.__default.concatFold#canCall| |slice#4@0|) (= |b#0@0| (|Seq#Append| (JournalIntervals.__default.concatFold ($LS $LZ) |slice#4@0|) |jr#0@@21|)))) (and anon62_Then_correct anon62_Else_correct)))))))))))) (let ((anon0_correct  (=> (! (and %lbl%+144 true) :lblpos +144) (=> (= (AsFuelBottom StartFuel_DiskLayout._default.ValidNodeAddr) StartFuel_DiskLayout._default.ValidNodeAddr) (=> (and (= (AsFuelBottom StartFuelAssert_DiskLayout._default.ValidNodeAddr) StartFuelAssert_DiskLayout._default.ValidNodeAddr) (= (AsFuelBottom StartFuel_DiskLayout._default.ValidJournalLocation) StartFuel_DiskLayout._default.ValidJournalLocation)) (=> (and (and (= (AsFuelBottom StartFuelAssert_DiskLayout._default.ValidJournalLocation) StartFuelAssert_DiskLayout._default.ValidJournalLocation) (= (AsFuelBottom StartFuel_DiskLayout._default.JournalBlockIdx) StartFuel_DiskLayout._default.JournalBlockIdx)) (and (= (AsFuelBottom StartFuelAssert_DiskLayout._default.JournalBlockIdx) StartFuelAssert_DiskLayout._default.JournalBlockIdx) (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes))) (=> (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)))) (=> (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate))))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_JournalIntervals._default.JournalUpdate) StartFuel_JournalIntervals._default.JournalUpdate))) (and (and (= (AsFuelBottom StartFuelAssert_JournalIntervals._default.JournalUpdate) StartFuelAssert_JournalIntervals._default.JournalUpdate) (= (AsFuelBottom StartFuel_JournalIntervals._default.CyclicSlice) StartFuel_JournalIntervals._default.CyclicSlice)) (and (= (AsFuelBottom StartFuelAssert_JournalIntervals._default.CyclicSlice) StartFuelAssert_JournalIntervals._default.CyclicSlice) (= $_Frame@0 (|lambda#47| null $Heap@@36 alloc false))))) (and (and (and (|$IsA#JournalIntervals.JournalInterval| |interval#0@@25|) (|$IsA#JournalIntervals.JournalInterval| |interval_write#0|)) (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0))) (and (and (= $Heap@@36 $Heap@0) (forall ((|$ih#jr0#0| T@U) ) (!  (=> (= (type |$ih#jr0#0|) (SeqType BoxType)) (=> (and (and ($Is |$ih#jr0#0| (TSeq Tclass.JournalRanges.JournalBlock)) (and (and (and (and (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (JournalIntervals.__default.JournalUpdate StartFuel_JournalIntervals._default.JournalUpdate |journal#0@@29| |journal'#0@@5| |interval_write#0| |$ih#jr0#0|)) (JournalIntervals.__default.Disk__HasJournal |journal#0@@29| |interval#0@@25|)) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS $LZ) |$ih#jr0#0|))) (<= (+ (JournalIntervals.JournalInterval.len |interval#0@@25|) (|Seq#Length| |$ih#jr0#0|)) (LitInt DiskLayout.__default.NumJournalBlocks))) (= (JournalIntervals.JournalInterval.start |interval_write#0|) (JournalIntervals.__default.NextStartPoint |interval#0@@25|)))) (or (< (|Seq#Rank| |journal#0@@29|) (|Seq#Rank| |journal#0@@29|)) (and (= (|Seq#Rank| |journal#0@@29|) (|Seq#Rank| |journal#0@@29|)) (or (< (|Seq#Rank| |journal'#0@@5|) (|Seq#Rank| |journal'#0@@5|)) (and (= (|Seq#Rank| |journal'#0@@5|) (|Seq#Rank| |journal'#0@@5|)) (or (< (DtRank |interval#0@@25|) (DtRank |interval#0@@25|)) (and (= (DtRank |interval#0@@25|) (DtRank |interval#0@@25|)) (or (< (DtRank |interval_write#0|) (DtRank |interval_write#0|)) (and (= (DtRank |interval_write#0|) (DtRank |interval_write#0|)) (< (|Seq#Rank| |$ih#jr0#0|) (|Seq#Rank| |jr#0@@21|))))))))))) (and (JournalIntervals.__default.Disk__HasJournal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (|Seq#Equal| (JournalIntervals.__default.Disk__Journal |journal'#0@@5| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|)) (|Seq#Append| (JournalIntervals.__default.Disk__Journal |journal#0@@29| |interval#0@@25|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseJournalRange ($LS $LZ) |$ih#jr0#0|)))))))) :qid |JournalI.291:7| :skolemid |1220| :no-pattern (type |$ih#jr0#0|) :no-pattern (U_2_int |$ih#jr0#0|) :no-pattern (U_2_bool |$ih#jr0#0|) ))) (and ($IsAlloc |interval#0@@25| Tclass.JournalIntervals.JournalInterval $Heap@0) ($IsAlloc |interval_write#0| Tclass.JournalIntervals.JournalInterval $Heap@0)))))) (and (! (or %lbl%@145 (= (JournalIntervals.__default.NextStartPoint |interval#0@@25|) (JournalIntervals.JournalInterval.start |interval_write#0|))) :lblneg @145) (=> (= (JournalIntervals.__default.NextStartPoint |interval#0@@25|) (JournalIntervals.JournalInterval.start |interval_write#0|)) (=> (and (|JournalIntervals.__default.concatIntervals#canCall| |interval#0@@25| |interval_write#0|) (JournalIntervals.JournalInterval.JournalInterval_q (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|))) (=> (and (and (|JournalIntervals.__default.concatIntervals#canCall| |interval#0@@25| |interval_write#0|) (= |interval'#0@0| (JournalIntervals.__default.concatIntervals |interval#0@@25| |interval_write#0|))) (and ($IsAlloc |journal#0@@29| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@0) ($IsAlloc |interval#0@@25| Tclass.JournalIntervals.JournalInterval $Heap@0))) (and (! (or %lbl%@146 (= (|Seq#Length| |journal#0@@29|) (LitInt DiskLayout.__default.NumJournalBlocks))) :lblneg @146) (=> (= (|Seq#Length| |journal#0@@29|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (! (or %lbl%@147 (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval#0@@25|))) :lblneg @147) (and (! (or %lbl%@148 (< (JournalIntervals.JournalInterval.start |interval#0@@25|) DiskLayout.__default.NumJournalBlocks)) :lblneg @148) (=> (and (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval#0@@25|)) (< (JournalIntervals.JournalInterval.start |interval#0@@25|) DiskLayout.__default.NumJournalBlocks)) (and (! (or %lbl%@149 (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval#0@@25|))) :lblneg @149) (and (! (or %lbl%@150 (<= (JournalIntervals.JournalInterval.len |interval#0@@25|) (LitInt DiskLayout.__default.NumJournalBlocks))) :lblneg @150) (=> (and (and (and (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval#0@@25|)) (<= (JournalIntervals.JournalInterval.len |interval#0@@25|) (LitInt DiskLayout.__default.NumJournalBlocks))) (|JournalIntervals.__default.CyclicSlice#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |journal#0@@29| |interval#0@@25|)) (and (and (|JournalIntervals.__default.CyclicSlice#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |journal#0@@29| |interval#0@@25|) (= |slice#4@0| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice |journal#0@@29| |interval#0@@25|))) (and ($IsAlloc |journal'#0@@5| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@0) ($IsAlloc |interval'#0@0| Tclass.JournalIntervals.JournalInterval $Heap@0)))) (and (! (or %lbl%@151 (= (|Seq#Length| |journal'#0@@5|) (LitInt DiskLayout.__default.NumJournalBlocks))) :lblneg @151) (=> (= (|Seq#Length| |journal'#0@@5|) (LitInt DiskLayout.__default.NumJournalBlocks)) (and (! (or %lbl%@152 (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval'#0@0|))) :lblneg @152) (and (! (or %lbl%@153 (< (JournalIntervals.JournalInterval.start |interval'#0@0|) DiskLayout.__default.NumJournalBlocks)) :lblneg @153) (=> (and (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval'#0@0|)) (< (JournalIntervals.JournalInterval.start |interval'#0@0|) DiskLayout.__default.NumJournalBlocks)) (and (! (or %lbl%@154 (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval'#0@0|))) :lblneg @154) (and (! (or %lbl%@155 (<= (JournalIntervals.JournalInterval.len |interval'#0@0|) (LitInt DiskLayout.__default.NumJournalBlocks))) :lblneg @155) (=> (and (and (and (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval'#0@0|)) (<= (JournalIntervals.JournalInterval.len |interval'#0@0|) (LitInt DiskLayout.__default.NumJournalBlocks))) (|JournalIntervals.__default.CyclicSlice#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |journal'#0@@5| |interval'#0@0|)) (and (|JournalIntervals.__default.CyclicSlice#canCall| (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) |journal'#0@@5| |interval'#0@0|) (= |slice'#0@0| (JournalIntervals.__default.CyclicSlice (Tclass.Options.Option Tclass.JournalRanges.JournalBlock) StartFuel_JournalIntervals._default.CyclicSlice |journal'#0@@5| |interval'#0@0|)))) (and anon52_Then_correct anon52_Else_correct)))))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+156 true) :lblpos +156) (=> (and ($IsGoodHeap $Heap@@36) ($IsHeapAnchor $Heap@@36)) (=> (and (and (and ($Is |journal#0@@29| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($IsAlloc |journal#0@@29| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@@36)) (and ($Is |journal'#0@@5| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($IsAlloc |journal'#0@@5| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@@36))) (and (and ($Is |interval#0@@25| Tclass.JournalIntervals.JournalInterval) ($IsAlloc |interval#0@@25| Tclass.JournalIntervals.JournalInterval $Heap@@36)) (|$IsA#JournalIntervals.JournalInterval| |interval#0@@25|))) (=> (and (and (and (and (and ($Is |interval_write#0| Tclass.JournalIntervals.JournalInterval) ($IsAlloc |interval_write#0| Tclass.JournalIntervals.JournalInterval $Heap@@36)) (|$IsA#JournalIntervals.JournalInterval| |interval_write#0|)) (and ($Is |jr#0@@21| (TSeq Tclass.JournalRanges.JournalBlock)) ($IsAlloc |jr#0@@21| (TSeq Tclass.JournalRanges.JournalBlock) $Heap@@36))) (and (and (and ($Is |interval'#0| Tclass.JournalIntervals.JournalInterval) ($IsAlloc |interval'#0| Tclass.JournalIntervals.JournalInterval $Heap@@36)) (and ($Is |slice#4| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($IsAlloc |slice#4| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@@36))) (and (and ($Is |slice'#0| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock))) ($IsAlloc |slice'#0| (TSeq (Tclass.Options.Option Tclass.JournalRanges.JournalBlock)) $Heap@@36)) (and ($Is |a#0@@82| (TSeq Tclass.JournalRanges.JournalBlock)) ($IsAlloc |a#0@@82| (TSeq Tclass.JournalRanges.JournalBlock) $Heap@@36))))) (and (and (and (and ($Is |b#0@@56| (TSeq Tclass.JournalRanges.JournalBlock)) ($IsAlloc |b#0@@56| (TSeq Tclass.JournalRanges.JournalBlock) $Heap@@36)) (= 30 $FunctionContextHeight)) (and (and (|JournalIntervals.__default.ValidJournalInterval#canCall| |interval#0@@25|) (and (JournalIntervals.__default.ValidJournalInterval |interval#0@@25|) (and (and (<= (LitInt 0) (JournalIntervals.JournalInterval.start |interval#0@@25|)) (< (JournalIntervals.JournalInterval.start |interval#0@@25|) DiskLayout.__default.NumJournalBlocks)) (and (<= (LitInt 0) (JournalIntervals.JournalInterval.len |interval#0@@25|)) (<= (JournalIntervals.JournalInterval.len |interval#0@@25|) (LitInt DiskLayout.__default.NumJournalBlocks)))))) (JournalIntervals.__default.JournalUpdate StartFuelAssert_JournalIntervals._default.JournalUpdate |journal#0@@29| |journal'#0@@5| |interval_write#0| |jr#0@@21|))) (and (and (and (|JournalIntervals.__default.Disk__HasJournal#canCall| |journal#0@@29| |interval#0@@25|) (and (JournalIntervals.__default.Disk__HasJournal |journal#0@@29| |interval#0@@25|) (and (JournalIntervals.__default.Disk__HasJournalRange |journal#0@@29| |interval#0@@25|) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS $LZ) (JournalIntervals.__default.Disk__JournalRange |journal#0@@29| |interval#0@@25|)))))) (Options.Option.Some_q (JournalRanges.__default.parseJournalRange ($LS ($LS $LZ)) |jr#0@@21|))) (and (<= (+ (JournalIntervals.JournalInterval.len |interval#0@@25|) (|Seq#Length| |jr#0@@21|)) (LitInt DiskLayout.__default.NumJournalBlocks)) (= (JournalIntervals.JournalInterval.start |interval_write#0|) (JournalIntervals.__default.NextStartPoint |interval#0@@25|)))))) anon0_correct)))))) PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))) ))
(check-sat)
