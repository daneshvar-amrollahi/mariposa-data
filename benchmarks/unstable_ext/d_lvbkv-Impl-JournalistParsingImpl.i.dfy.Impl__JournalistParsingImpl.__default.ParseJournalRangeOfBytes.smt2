(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc5 () T@U)
(declare-fun Tagclass._System.___hPartialFunc5 () T@U)
(declare-fun Tagclass._System.___hTotalFunc5 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun Tagclass._System.___hFunc2LLO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LLO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LLO () T@U)
(declare-fun Tagclass._System.___hFunc0L () T@U)
(declare-fun Tagclass._System.___hPartialFunc0L () T@U)
(declare-fun Tagclass._System.___hTotalFunc0L () T@U)
(declare-fun Tagclass._System.___hFunc3LLLO () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLLO () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLLO () T@U)
(declare-fun Tagclass._System.___hFunc6 () T@U)
(declare-fun Tagclass._System.___hPartialFunc6 () T@U)
(declare-fun Tagclass._System.___hTotalFunc6 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun |##_System._tuple#3._#Make3| () T@U)
(declare-fun Tagclass._System.Tuple3 () T@U)
(declare-fun class._System.Tuple3 () T@U)
(declare-fun Tagclass._System.___hFunc2OSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2OSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2OSO () T@U)
(declare-fun Tagclass._System.___hFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hFunc1OS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OS () T@U)
(declare-fun Tagclass._System.___hFunc2LOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LOO () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun Tagclass._System.___hFunc1OL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OL () T@U)
(declare-fun Tagclass._System.___hFunc1LO () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LO () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LO () T@U)
(declare-fun |##_System._tuple#2OLL._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2OLL () T@U)
(declare-fun class._System.Tuple2OLL () T@U)
(declare-fun Tagclass._System.___hFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hFunc2SSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2SSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2SSO () T@U)
(declare-fun Tagclass._System.___hFunc1SS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1SS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1SS () T@U)
(declare-fun Tagclass._System.___hFunc1LL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LL () T@U)
(declare-fun class.JournalistParsingImpl.__default () T@U)
(declare-fun Tagclass.JournalistParsingImpl.__default () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.Journal.JournalEntry () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun class.LinearMaybe.predefined () T@U)
(declare-fun class.LinearMaybe.__default () T@U)
(declare-fun Tagclass.LinearMaybe.__default () T@U)
(declare-fun class.LinearExtern.predefined () T@U)
(declare-fun class.LinearExtern.__default () T@U)
(declare-fun Tagclass.LinearExtern.__default () T@U)
(declare-fun class.SequencesLite.__default () T@U)
(declare-fun Tagclass.SequencesLite.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun |##UI.RangeStart.SInclusive| () T@U)
(declare-fun Tagclass.UI.RangeStart () T@U)
(declare-fun |##UI.RangeStart.SExclusive| () T@U)
(declare-fun |##UI.RangeStart.NegativeInf| () T@U)
(declare-fun class.UI.RangeStart () T@U)
(declare-fun |##UI.RangeEnd.EInclusive| () T@U)
(declare-fun Tagclass.UI.RangeEnd () T@U)
(declare-fun |##UI.RangeEnd.EExclusive| () T@U)
(declare-fun |##UI.RangeEnd.PositiveInf| () T@U)
(declare-fun class.UI.RangeEnd () T@U)
(declare-fun |##UI.SuccResult.SuccResult| () T@U)
(declare-fun Tagclass.UI.SuccResult () T@U)
(declare-fun class.UI.SuccResult () T@U)
(declare-fun |##UI.SuccResultList.SuccResultList| () T@U)
(declare-fun Tagclass.UI.SuccResultList () T@U)
(declare-fun class.UI.SuccResultList () T@U)
(declare-fun |##UI.Op.NoOp| () T@U)
(declare-fun Tagclass.UI.Op () T@U)
(declare-fun |##UI.Op.SyncOp| () T@U)
(declare-fun |##UI.Op.CrashOp| () T@U)
(declare-fun |##UI.Op.PushSyncOp| () T@U)
(declare-fun |##UI.Op.PopSyncOp| () T@U)
(declare-fun |##UI.Op.GetOp| () T@U)
(declare-fun |##UI.Op.GetBeginOp| () T@U)
(declare-fun |##UI.Op.GetEndOp| () T@U)
(declare-fun |##UI.Op.PutOp| () T@U)
(declare-fun |##UI.Op.SuccOp| () T@U)
(declare-fun class.UI.Op () T@U)
(declare-fun class.UI.__default () T@U)
(declare-fun Tagclass.UI.__default () T@U)
(declare-fun |##Journal.JournalEntry.JournalInsert| () T@U)
(declare-fun class.Journal.JournalEntry () T@U)
(declare-fun class.Journal.__default () T@U)
(declare-fun Tagclass.Journal.__default () T@U)
(declare-fun class.NativePackedInts.__default () T@U)
(declare-fun Tagclass.NativePackedInts.__default () T@U)
(declare-fun |##JournalRanges.Header.Header| () T@U)
(declare-fun Tagclass.JournalRanges.Header () T@U)
(declare-fun class.JournalRanges.Header () T@U)
(declare-fun class.JournalRanges.__default () T@U)
(declare-fun Tagclass.JournalRanges.__default () T@U)
(declare-fun class.MapRemove_s.__default () T@U)
(declare-fun Tagclass.MapRemove_s.__default () T@U)
(declare-fun class.Bits__s.__default () T@U)
(declare-fun Tagclass.Bits__s.__default () T@U)
(declare-fun class.F2__X__s.__default () T@U)
(declare-fun Tagclass.F2__X__s.__default () T@U)
(declare-fun class.CRC32__C.__default () T@U)
(declare-fun Tagclass.CRC32__C.__default () T@U)
(declare-fun |##AsyncDisk.ReqRead.ReqRead| () T@U)
(declare-fun Tagclass.AsyncDisk.ReqRead () T@U)
(declare-fun class.AsyncDisk.ReqRead () T@U)
(declare-fun |##AsyncDisk.ReqWrite.ReqWrite| () T@U)
(declare-fun Tagclass.AsyncDisk.ReqWrite () T@U)
(declare-fun class.AsyncDisk.ReqWrite () T@U)
(declare-fun |##AsyncDisk.RespRead.RespRead| () T@U)
(declare-fun Tagclass.AsyncDisk.RespRead () T@U)
(declare-fun class.AsyncDisk.RespRead () T@U)
(declare-fun |##AsyncDisk.RespWrite.RespWrite| () T@U)
(declare-fun Tagclass.AsyncDisk.RespWrite () T@U)
(declare-fun class.AsyncDisk.RespWrite () T@U)
(declare-fun |##AsyncDisk.DiskOp.ReqReadOp| () T@U)
(declare-fun Tagclass.AsyncDisk.DiskOp () T@U)
(declare-fun |##AsyncDisk.DiskOp.ReqWriteOp| () T@U)
(declare-fun |##AsyncDisk.DiskOp.ReqWrite2Op| () T@U)
(declare-fun |##AsyncDisk.DiskOp.RespReadOp| () T@U)
(declare-fun |##AsyncDisk.DiskOp.RespWriteOp| () T@U)
(declare-fun |##AsyncDisk.DiskOp.NoDiskOp| () T@U)
(declare-fun class.AsyncDisk.DiskOp () T@U)
(declare-fun |##AsyncDisk.Variables.Variables| () T@U)
(declare-fun Tagclass.AsyncDisk.Variables () T@U)
(declare-fun class.AsyncDisk.Variables () T@U)
(declare-fun |##AsyncDisk.Step.RecvReadStep| () T@U)
(declare-fun Tagclass.AsyncDisk.Step () T@U)
(declare-fun |##AsyncDisk.Step.RecvWriteStep| () T@U)
(declare-fun |##AsyncDisk.Step.RecvWrite2Step| () T@U)
(declare-fun |##AsyncDisk.Step.AckReadStep| () T@U)
(declare-fun |##AsyncDisk.Step.AckWriteStep| () T@U)
(declare-fun |##AsyncDisk.Step.StutterStep| () T@U)
(declare-fun class.AsyncDisk.Step () T@U)
(declare-fun |##AsyncDisk.InternalStep.ProcessReadFailureStep| () T@U)
(declare-fun Tagclass.AsyncDisk.InternalStep () T@U)
(declare-fun |##AsyncDisk.InternalStep.ProcessWriteStep| () T@U)
(declare-fun |##AsyncDisk.InternalStep.HavocConflictingWritesStep| () T@U)
(declare-fun |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep| () T@U)
(declare-fun class.AsyncDisk.InternalStep () T@U)
(declare-fun class.AsyncDisk.__default () T@U)
(declare-fun Tagclass.AsyncDisk.__default () T@U)
(declare-fun class.JournalBytes.__default () T@U)
(declare-fun Tagclass.JournalBytes.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun class.CRC32__C__Impl.__default () T@U)
(declare-fun Tagclass.CRC32__C__Impl.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func5| () T@U)
(declare-fun |tytagFamily$_#PartialFunc5| () T@U)
(declare-fun |tytagFamily$_#TotalFunc5| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_#Func2LLO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#Func0L| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0L| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0L| () T@U)
(declare-fun |tytagFamily$_#Func3LLLO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLLO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLLO| () T@U)
(declare-fun |tytagFamily$_#Func6| () T@U)
(declare-fun |tytagFamily$_#PartialFunc6| () T@U)
(declare-fun |tytagFamily$_#TotalFunc6| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_tuple#3| () T@U)
(declare-fun |tytagFamily$_#Func2OSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#Func3LLOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#Func1OS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OS| () T@U)
(declare-fun |tytagFamily$_#Func2LOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LOO| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun |tytagFamily$_#Func1OL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OL| () T@U)
(declare-fun |tytagFamily$_#Func1LO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LO| () T@U)
(declare-fun |tytagFamily$_tuple#2OLL| () T@U)
(declare-fun |tytagFamily$_#Func3LLOL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#Func2SSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#Func1SS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1SS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1SS| () T@U)
(declare-fun |tytagFamily$_#Func1LL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LL| () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$JournalEntry () T@U)
(declare-fun tytagFamily$Key () T@U)
(declare-fun tytagFamily$Value () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun tytagFamily$Delta () T@U)
(declare-fun tytagFamily$Message () T@U)
(declare-fun tytagFamily$RangeStart () T@U)
(declare-fun tytagFamily$RangeEnd () T@U)
(declare-fun tytagFamily$SuccResult () T@U)
(declare-fun tytagFamily$SuccResultList () T@U)
(declare-fun tytagFamily$Op () T@U)
(declare-fun tytagFamily$Header () T@U)
(declare-fun tytagFamily$ReqRead () T@U)
(declare-fun tytagFamily$ReqWrite () T@U)
(declare-fun tytagFamily$RespRead () T@U)
(declare-fun tytagFamily$RespWrite () T@U)
(declare-fun tytagFamily$DiskOp () T@U)
(declare-fun tytagFamily$Variables () T@U)
(declare-fun tytagFamily$Step () T@U)
(declare-fun tytagFamily$InternalStep () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_5 (T@U) T@U)
(declare-fun Apply5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle5 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4TypeInv5 (T@T) T@T)
(declare-fun MapType4TypeInv6 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun MapType6Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6TypeInv2 (T@T) T@T)
(declare-fun MapType6TypeInv3 (T@T) T@T)
(declare-fun MapType6TypeInv4 (T@T) T@T)
(declare-fun MapType6TypeInv5 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLLO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLLO_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLLO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLLO_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLLO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLLO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLLO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLLO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLLO_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_6 (T@U) T@U)
(declare-fun Apply6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle6 (T@U T@U T@U) T@U)
(declare-fun MapType7Type (T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType7Select (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType7TypeInv0 (T@T) T@T)
(declare-fun MapType7TypeInv1 (T@T) T@T)
(declare-fun MapType7TypeInv2 (T@T) T@T)
(declare-fun MapType7TypeInv3 (T@T) T@T)
(declare-fun MapType7TypeInv4 (T@T) T@T)
(declare-fun MapType7TypeInv5 (T@T) T@T)
(declare-fun MapType7TypeInv6 (T@T) T@T)
(declare-fun MapType7TypeInv7 (T@T) T@T)
(declare-fun MapType7Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_6 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun |#_System._tuple#3._#Make3| (T@U T@U T@U) T@U)
(declare-fun _System.Tuple3.___hMake3_q (T@U) Bool)
(declare-fun Tclass._System.Tuple3 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.Tuple3_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple3_1 (T@U) T@U)
(declare-fun Tclass._System.Tuple3_2 (T@U) T@U)
(declare-fun _System.Tuple3._0 (T@U) T@U)
(declare-fun _System.Tuple3._1 (T@U) T@U)
(declare-fun _System.Tuple3._2 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple3| (T@U) Bool)
(declare-fun |_System.Tuple3#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_2 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_1 (T@U) T@U)
(declare-fun |#_System._tuple#2OLL._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2OLL.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2OLL (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_1 (T@U) T@U)
(declare-fun _System.Tuple2OLL._0 (T@U) T@U)
(declare-fun _System.Tuple2OLL._1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2OLL| (T@U) Bool)
(declare-fun |_System.Tuple2OLL#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_1 (T@U) T@U)
(declare-fun Tclass.JournalistParsingImpl.__default () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Tclass.Journal.JournalEntry () T@U)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.KeyType.__default () T@U)
(declare-fun KeyType.__default.MaxLen () Int)
(declare-fun |KeyType.__default.MaxLen#requires| () Bool)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun Tclass.LinearMaybe.__default () T@U)
(declare-fun LinearMaybe.__default.has (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.has#canCall| (T@U T@U) Bool)
(declare-fun |#$maybe| (T@U) T@U)
(declare-fun |LinearMaybe.__default.has#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.read (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.read#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.read#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.peek (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.peek#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.peek#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.unwrap (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.unwrap#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.unwrap#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.give (T@U T@U T@U) T@U)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |LinearMaybe.__default.give#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.give#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMaybe.__default.empty (T@U) T@U)
(declare-fun |LinearMaybe.__default.empty#requires| (T@U) Bool)
(declare-fun LinearMaybe.__default.discard (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.discard#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.discard#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.imagine (T@U Bool T@U) T@U)
(declare-fun |LinearMaybe.__default.imagine#canCall| (T@U Bool T@U) Bool)
(declare-fun |LinearMaybe.__default.imagine#requires| (T@U Bool T@U) Bool)
(declare-fun Tclass.LinearExtern.__default () T@U)
(declare-fun LinearExtern.__default.seq_get (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.seq_get#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.seq_get#requires| (T@U T@U Int) Bool)
(declare-fun LinearExtern.__default.seq_set (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_set#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_set#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_length (T@U T@U) Int)
(declare-fun |LinearExtern.__default.seq_length#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_length#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_empty (T@U) T@U)
(declare-fun |LinearExtern.__default.seq_empty#requires| (T@U) Bool)
(declare-fun LinearExtern.__default.seq_alloc (T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_alloc#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_alloc#requires| (T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_free (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_free#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_free#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_unleash (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_unleash#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_unleash#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseqs__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#canCall| (T@U T@U) Bool)
(declare-fun |#$lseq| (T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq__has (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq__has#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq__has#requires| (T@U T@U) Bool)
(declare-fun |lambda#16| (T@U) T@U)
(declare-fun |lambda#12| (T@U T@U) T@U)
(declare-fun |lambda#13| (T@U Int Int) T@U)
(declare-fun |lambda#15| (T@U) T@U)
(declare-fun |lambda#14| (Bool) T@U)
(declare-fun LinearExtern.__default.imagine__lseq__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_length_raw (T@U T@U) Int)
(declare-fun |LinearExtern.__default.lseq_length_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_length_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_alloc_raw (T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#canCall| (T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#requires| (T@U Int) Bool)
(declare-fun LinearExtern.__default.lseq_free_raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_free_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_free_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_swap_raw_fun (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.lseq_share_raw (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_share_raw#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_share_raw#requires| (T@U T@U Int) Bool)
(declare-fun Tclass.SequencesLite.__default () T@U)
(declare-fun SequencesLite.__default.Last (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.Last#requires| (T@U T@U) Bool)
(declare-fun SequencesLite.__default.DropLast (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#22| (T@U T@U Int) T@U)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun |lambda#24| (T@U T@U) T@U)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.FirstOpt (T@U T@U) T@U)
(declare-fun |Sequences.__default.FirstOpt#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FirstOpt#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.RemoveOneValue (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.RemoveOneValue#canCall| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |Sequences.__default.RemoveOneValue#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$let#4_i| (T@U T@U T@U) Int)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.NoDupes0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes1 () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes2 () T@U)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.seqMax (T@U T@U) Int)
(declare-fun |Sequences.__default.seqMax#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.seqMax#requires| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun ValueMessage.__default.bytestring__to__Message (T@U) T@U)
(declare-fun |ValueMessage.__default.bytestring__to__Message#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestring__to__Message#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessageSeq (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.Message__to__bytestring (T@U) T@U)
(declare-fun |ValueMessage.__default.Message__to__bytestring#canCall| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun |ValueMessage.__default.Message__to__bytestring#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.messageSeq__to__bytestringSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestringSeq__to__MessageSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun ValueMessage.__default.DefineDefault () T@U)
(declare-fun |ValueMessage.__default.DefineDefault#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun |#UI.RangeStart.SInclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeStart () T@U)
(declare-fun UI.RangeStart.key (T@U) T@U)
(declare-fun |#UI.RangeStart.SExclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeStart.NegativeInf| () T@U)
(declare-fun UI.RangeStart.NegativeInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeStart| (T@U) Bool)
(declare-fun |UI.RangeStart#Equal| (T@U T@U) Bool)
(declare-fun |#UI.RangeEnd.EInclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeEnd () T@U)
(declare-fun UI.RangeEnd.key (T@U) T@U)
(declare-fun |#UI.RangeEnd.EExclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeEnd.PositiveInf| () T@U)
(declare-fun UI.RangeEnd.PositiveInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeEnd| (T@U) Bool)
(declare-fun |UI.RangeEnd#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResult.SuccResult| (T@U T@U) T@U)
(declare-fun UI.SuccResult.SuccResult_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResult () T@U)
(declare-fun UI.SuccResult.key (T@U) T@U)
(declare-fun UI.SuccResult.value (T@U) T@U)
(declare-fun |$IsA#UI.SuccResult| (T@U) Bool)
(declare-fun |UI.SuccResult#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResultList.SuccResultList| (T@U T@U) T@U)
(declare-fun UI.SuccResultList.SuccResultList_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResultList () T@U)
(declare-fun UI.SuccResultList.results (T@U) T@U)
(declare-fun UI.SuccResultList.end (T@U) T@U)
(declare-fun |$IsA#UI.SuccResultList| (T@U) Bool)
(declare-fun |UI.SuccResultList#Equal| (T@U T@U) Bool)
(declare-fun |#UI.Op.NoOp| () T@U)
(declare-fun UI.Op.NoOp_q (T@U) Bool)
(declare-fun Tclass.UI.Op () T@U)
(declare-fun |#UI.Op.SyncOp| () T@U)
(declare-fun UI.Op.SyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.CrashOp| () T@U)
(declare-fun UI.Op.CrashOp_q (T@U) Bool)
(declare-fun |#UI.Op.PushSyncOp| (Int) T@U)
(declare-fun UI.Op.PushSyncOp_q (T@U) Bool)
(declare-fun UI.Op.id (T@U) Int)
(declare-fun |#UI.Op.PopSyncOp| (Int) T@U)
(declare-fun UI.Op.PopSyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetOp| (T@U T@U) T@U)
(declare-fun UI.Op.GetOp_q (T@U) Bool)
(declare-fun UI.Op.key (T@U) T@U)
(declare-fun UI.Op.value (T@U) T@U)
(declare-fun |#UI.Op.GetBeginOp| (T@U Int) T@U)
(declare-fun UI.Op.GetBeginOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetEndOp| (T@U Int) T@U)
(declare-fun UI.Op.GetEndOp_q (T@U) Bool)
(declare-fun |#UI.Op.PutOp| (T@U T@U) T@U)
(declare-fun UI.Op.PutOp_q (T@U) Bool)
(declare-fun |#UI.Op.SuccOp| (T@U T@U T@U) T@U)
(declare-fun UI.Op.SuccOp_q (T@U) Bool)
(declare-fun UI.Op.start (T@U) T@U)
(declare-fun UI.Op.results (T@U) T@U)
(declare-fun UI.Op.end (T@U) T@U)
(declare-fun |$IsA#UI.Op| (T@U) Bool)
(declare-fun |UI.Op#Equal| (T@U T@U) Bool)
(declare-fun Tclass.UI.__default () T@U)
(declare-fun |#Journal.JournalEntry.JournalInsert| (T@U T@U) T@U)
(declare-fun Journal.JournalEntry.JournalInsert_q (T@U) Bool)
(declare-fun Journal.JournalEntry.key (T@U) T@U)
(declare-fun Journal.JournalEntry.value (T@U) T@U)
(declare-fun |$IsA#Journal.JournalEntry| (T@U) Bool)
(declare-fun |Journal.JournalEntry#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Journal.__default () T@U)
(declare-fun Journal.__default.JournalEntriesForUIOp (T@U) T@U)
(declare-fun |Journal.__default.JournalEntriesForUIOp#canCall| (T@U) Bool)
(declare-fun |Journal.__default.JournalEntriesForUIOp#requires| (T@U) Bool)
(declare-fun Journal.__default.JournalEntriesForUIOps (T@U T@U) T@U)
(declare-fun |Journal.__default.JournalEntriesForUIOps#canCall| (T@U) Bool)
(declare-fun |Journal.__default.JournalEntriesForUIOps#requires| (T@U T@U) Bool)
(declare-fun Tclass.NativePackedInts.__default () T@U)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint32 (T@U T@U) Int)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (T@U) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| (T@U T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint64 (T@U T@U) Int)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (T@U) Bool)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| (T@U T@U) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq (T@U T@U Int) T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (T@U Int) Bool)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 () T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| (T@U T@U Int) Bool)
(declare-fun NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq (T@U T@U Int) T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (T@U Int) Bool)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 () T@U)
(declare-fun |NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| (T@U T@U Int) Bool)
(declare-fun |#JournalRanges.Header.Header| (Int Int) T@U)
(declare-fun JournalRanges.Header.Header_q (T@U) Bool)
(declare-fun Tclass.JournalRanges.Header () T@U)
(declare-fun JournalRanges.Header.nentries (T@U) Int)
(declare-fun JournalRanges.Header.nblocks (T@U) Int)
(declare-fun |$IsA#JournalRanges.Header| (T@U) Bool)
(declare-fun |JournalRanges.Header#Equal| (T@U T@U) Bool)
(declare-fun Tclass.JournalRanges.__default () T@U)
(declare-fun JournalRanges.__default.JournalRangeLen (T@U) Int)
(declare-fun |JournalRanges.__default.JournalRangeLen#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeLen#requires| (T@U) Bool)
(declare-fun JournalRanges.__default.JournalRangePrefix (T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalRangePrefix#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalRangePrefix#requires| (T@U Int) Bool)
(declare-fun JournalRanges.__default.JournalRangeSuffix (T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalRangeSuffix#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalRangeSuffix#requires| (T@U Int) Bool)
(declare-fun JournalRanges.__default.JournalRangeConcat (T@U T@U) T@U)
(declare-fun |JournalRanges.__default.JournalRangeConcat#canCall| (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeConcat#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.JournalRangeEmpty () T@U)
(declare-fun |JournalRanges.__default.JournalRangeEmpty#requires| () Bool)
(declare-fun JournalRanges.__default.JournalBlocksI (T@U T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalBlocksI#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalBlocksI#requires| (T@U T@U Int) Bool)
(declare-fun JournalRanges.__default.JournalBlocks (T@U) T@U)
(declare-fun |JournalRanges.__default.JournalBlocks#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.JournalBlocks#requires| (T@U) Bool)
(declare-fun JournalRanges.__default.JournalBlockGet (T@U Int) T@U)
(declare-fun |JournalRanges.__default.JournalBlockGet#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.JournalBlockGet#requires| (T@U Int) Bool)
(declare-fun JournalRanges.__default.parseHeader (T@U T@U) T@U)
(declare-fun |JournalRanges.__default.parseHeader#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.parseHeader#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.parseEntries (T@U T@U Int Int) T@U)
(declare-fun |JournalRanges.__default.parseEntries#canCall| (T@U Int Int) Bool)
(declare-fun |JournalRanges.__default.parseEntries#requires| (T@U T@U Int Int) Bool)
(declare-fun |KeyType.__default.MaxLen#canCall| () Bool)
(declare-fun JournalRanges.__default.parseJournalRangeOfBytes (T@U Int) T@U)
(declare-fun |JournalRanges.__default.parseJournalRangeOfBytes#canCall| (T@U Int) Bool)
(declare-fun |JournalRanges.__default.parseJournalRangeOfBytes#requires| (T@U Int) Bool)
(declare-fun JournalRanges.__default.parseJournalRange (T@U T@U) T@U)
(declare-fun |JournalRanges.__default.parseJournalRange#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.parseJournalRange#requires| (T@U T@U) Bool)
(declare-fun StartFuel_JournalRanges._default.parseHeader () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun JournalRanges.__default.JournalRangeParses (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeParses#canCall| (T@U T@U) Bool)
(declare-fun |JournalRanges.__default.JournalRangeParses#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.WeightJournalEntryUint64 (T@U) Int)
(declare-fun |JournalRanges.__default.WeightJournalEntryUint64#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.WeightJournalEntryUint64#requires| (T@U) Bool)
(declare-fun JournalRanges.__default.WeightJournalEntry (T@U) Int)
(declare-fun |JournalRanges.__default.WeightJournalEntry#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.WeightJournalEntry#requires| (T@U) Bool)
(declare-fun JournalRanges.__default.SumJournalEntries (T@U T@U) Int)
(declare-fun |JournalRanges.__default.SumJournalEntries#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.SumJournalEntries#requires| (T@U T@U) Bool)
(declare-fun JournalRanges.__default.WeightJournalEntries (T@U T@U) Int)
(declare-fun |JournalRanges.__default.WeightJournalEntries#canCall| (T@U) Bool)
(declare-fun |JournalRanges.__default.WeightJournalEntries#requires| (T@U T@U) Bool)
(declare-fun Tclass.MapRemove_s.__default () T@U)
(declare-fun MapRemove_s.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |MapRemove_s.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapRemove_s.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#30| (T@U T@U T@U) T@U)
(declare-fun |lambda#31| (T@U) T@U)
(declare-fun Tclass.Bits__s.__default () T@U)
(declare-fun Bits__s.__default.bits__of__int (T@U Int Int) T@U)
(declare-fun |Bits__s.__default.bits__of__int#canCall| (Int Int) Bool)
(declare-fun |Bits__s.__default.bits__of__int#requires| (T@U Int Int) Bool)
(declare-fun Bits__s.__default.zeroes (T@U Int) T@U)
(declare-fun |Bits__s.__default.zeroes#canCall| (Int) Bool)
(declare-fun |Bits__s.__default.zeroes#requires| (T@U Int) Bool)
(declare-fun Bits__s.__default.ones (T@U Int) T@U)
(declare-fun |Bits__s.__default.ones#canCall| (Int) Bool)
(declare-fun |Bits__s.__default.ones#requires| (T@U Int) Bool)
(declare-fun Bits__s.__default.mm__cvtepu32__epi64 (T@U) T@U)
(declare-fun |Bits__s.__default.mm__cvtepu32__epi64#canCall| (T@U) Bool)
(declare-fun |Bits__s.__default.mm__cvtepu32__epi64#requires| (T@U) Bool)
(declare-fun StartFuel_Bits_s._default.zeroes () T@U)
(declare-fun Bits__s.__default.intrinsic_mm_cvtepu32_epi64 (Int) Int)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtepu32_epi64#canCall| (Int) Bool)
(declare-fun StartFuel_Bits_s._default.bits_of_int () T@U)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtepu32_epi64#requires| (Int) Bool)
(declare-fun Bits__s.__default.intrinsic_mm_loadu_si128 (T@U Int) Int)
(declare-fun |Bits__s.__default.intrinsic_mm_loadu_si128#canCall| (T@U Int) Bool)
(declare-fun |Bits__s.__default.intrinsic_mm_loadu_si128#requires| (T@U Int) Bool)
(declare-fun Bits__s.__default.intrinsic_mm_cvtsi64_si128 (Int) Int)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtsi64_si128#canCall| (Int) Bool)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtsi64_si128#requires| (Int) Bool)
(declare-fun Bits__s.__default.intrinsic_mm_cvtsi128_si64 (Int) Int)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtsi128_si64#canCall| (Int) Bool)
(declare-fun |Bits__s.__default.intrinsic_mm_cvtsi128_si64#requires| (Int) Bool)
(declare-fun Tclass.F2__X__s.__default () T@U)
(declare-fun F2__X__s.__default.reverse (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.reverse#canCall| (T@U) Bool)
(declare-fun |F2__X__s.__default.reverse#requires| (T@U T@U) Bool)
(declare-fun F2__X__s.__default.bool__xor (Bool Bool) Bool)
(declare-fun |F2__X__s.__default.bool__xor#requires| (Bool Bool) Bool)
(declare-fun F2__X__s.__default.xor (T@U T@U T@U) T@U)
(declare-fun |F2__X__s.__default.xor#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.xor#requires| (T@U T@U T@U) Bool)
(declare-fun |F2__X__s.__default.bool__xor#canCall| (Bool Bool) Bool)
(declare-fun F2__X__s.__default.extend (T@U Int) T@U)
(declare-fun |F2__X__s.__default.extend#canCall| (T@U Int) Bool)
(declare-fun |F2__X__s.__default.extend#requires| (T@U Int) Bool)
(declare-fun F2__X__s.__default.bits__get (T@U Int) Bool)
(declare-fun |F2__X__s.__default.bits__get#canCall| (T@U Int) Bool)
(declare-fun |F2__X__s.__default.bits__get#requires| (T@U Int) Bool)
(declare-fun F2__X__s.__default.mul__F2__X__digit__partial (T@U T@U T@U Int Int) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X__digit__partial#canCall| (T@U T@U Int Int) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X__digit__partial#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun F2__X__s.__default.mul__F2__X__digit (T@U T@U Int) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X__digit#canCall| (T@U T@U Int) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X__digit#requires| (T@U T@U Int) Bool)
(declare-fun F2__X__s.__default.mul__F2__X (T@U T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mul__F2__X#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mul__F2__X#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#36| (T@U T@U) T@U)
(declare-fun |lambda#37| (T@U Int) T@U)
(declare-fun F2__X__s.__default.shift (T@U Int) T@U)
(declare-fun |F2__X__s.__default.shift#canCall| (T@U Int) Bool)
(declare-fun |F2__X__s.__default.shift#requires| (T@U Int) Bool)
(declare-fun F2__X__s.__default.mod__F2__X (T@U T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mod__F2__X#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mod__F2__X#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_F2_X_s._default.xor () T@U)
(declare-fun F2__X__s.__default.mm__crc32__u8 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__crc32__u8#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__crc32__u8#requires| (T@U T@U) Bool)
(declare-fun StartFuel_F2_X_s._default.reverse () T@U)
(declare-fun F2__X__s.__default.intrinsic_mm_crc32_u8 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u8#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u8#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__crc32__u16 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__crc32__u16#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__crc32__u16#requires| (T@U T@U) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_crc32_u16 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u16#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u16#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__crc32__u32 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__crc32__u32#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__crc32__u32#requires| (T@U T@U) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_crc32_u32 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u32#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u32#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__crc32__u64 (T@U T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__crc32__u64#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__crc32__u64#requires| (T@U T@U T@U) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_crc32_u64 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u64#canCall| (Int Int) Bool)
(declare-fun StartFuel_F2_X_s._default.mm_crc32_u64 () T@U)
(declare-fun |F2__X__s.__default.intrinsic_mm_crc32_u64#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__clmulepi64__si128__0 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__clmulepi64__si128__0#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__clmulepi64__si128__0#requires| (T@U T@U) Bool)
(declare-fun StartFuel_F2_X_s._default.mul_F2_X () T@U)
(declare-fun F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.mm__clmulepi64__si128__16 (T@U T@U) T@U)
(declare-fun |F2__X__s.__default.mm__clmulepi64__si128__16#canCall| (T@U T@U) Bool)
(declare-fun |F2__X__s.__default.mm__clmulepi64__si128__16#requires| (T@U T@U) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.intrinsic_mm_xor_si128 (Int Int) Int)
(declare-fun |F2__X__s.__default.intrinsic_mm_xor_si128#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.intrinsic_mm_xor_si128#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.bitxor32 (Int Int) Int)
(declare-fun |F2__X__s.__default.bitxor32#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.bitxor32#requires| (Int Int) Bool)
(declare-fun F2__X__s.__default.bitxor64 (Int Int) Int)
(declare-fun |F2__X__s.__default.bitxor64#canCall| (Int Int) Bool)
(declare-fun |F2__X__s.__default.bitxor64#requires| (Int Int) Bool)
(declare-fun Tclass.CRC32__C.__default () T@U)
(declare-fun CRC32__C.__default.bits__of__bytes (T@U T@U) T@U)
(declare-fun |CRC32__C.__default.bits__of__bytes#canCall| (T@U) Bool)
(declare-fun |CRC32__C.__default.bits__of__bytes#requires| (T@U T@U) Bool)
(declare-fun CRC32__C.__default.byte__of__bits (T@U) Int)
(declare-fun |CRC32__C.__default.byte__of__bits#canCall| (T@U) Bool)
(declare-fun |CRC32__C.__default.byte__of__bits#requires| (T@U) Bool)
(declare-fun CRC32__C.__default.crc32__c (T@U T@U) T@U)
(declare-fun |CRC32__C.__default.crc32__c#canCall| (T@U) Bool)
(declare-fun |CRC32__C.__default.crc32__c#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Bits_s._default.ones () T@U)
(declare-fun CRC32__C.__default.crc32__c__padded (T@U) T@U)
(declare-fun |CRC32__C.__default.crc32__c__padded#canCall| (T@U) Bool)
(declare-fun |CRC32__C.__default.crc32__c__padded#requires| (T@U) Bool)
(declare-fun StartFuel_CRC32_C._default.crc32_c () T@U)
(declare-fun |lambda#46| (T@U) T@U)
(declare-fun |lambda#47| (T@U) T@U)
(declare-fun |#AsyncDisk.ReqRead.ReqRead| (Int Int) T@U)
(declare-fun AsyncDisk.ReqRead.ReqRead_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.ReqRead () T@U)
(declare-fun AsyncDisk.ReqRead.addr (T@U) Int)
(declare-fun AsyncDisk.ReqRead.len (T@U) Int)
(declare-fun |$IsA#AsyncDisk.ReqRead| (T@U) Bool)
(declare-fun |AsyncDisk.ReqRead#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.ReqWrite.ReqWrite| (Int T@U) T@U)
(declare-fun AsyncDisk.ReqWrite.ReqWrite_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.ReqWrite () T@U)
(declare-fun AsyncDisk.ReqWrite.addr (T@U) Int)
(declare-fun AsyncDisk.ReqWrite.bytes (T@U) T@U)
(declare-fun |$IsA#AsyncDisk.ReqWrite| (T@U) Bool)
(declare-fun |AsyncDisk.ReqWrite#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.RespRead.RespRead| (Int T@U) T@U)
(declare-fun AsyncDisk.RespRead.RespRead_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.RespRead () T@U)
(declare-fun AsyncDisk.RespRead.addr (T@U) Int)
(declare-fun AsyncDisk.RespRead.bytes (T@U) T@U)
(declare-fun |$IsA#AsyncDisk.RespRead| (T@U) Bool)
(declare-fun |AsyncDisk.RespRead#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.RespWrite.RespWrite| (Int Int) T@U)
(declare-fun AsyncDisk.RespWrite.RespWrite_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.RespWrite () T@U)
(declare-fun AsyncDisk.RespWrite.addr (T@U) Int)
(declare-fun AsyncDisk.RespWrite.len (T@U) Int)
(declare-fun |$IsA#AsyncDisk.RespWrite| (T@U) Bool)
(declare-fun |AsyncDisk.RespWrite#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.DiskOp.ReqReadOp| (Int T@U) T@U)
(declare-fun AsyncDisk.DiskOp.ReqReadOp_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.DiskOp () T@U)
(declare-fun AsyncDisk.DiskOp.id (T@U) Int)
(declare-fun AsyncDisk.DiskOp.reqRead (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.ReqWriteOp| (Int T@U) T@U)
(declare-fun AsyncDisk.DiskOp.ReqWriteOp_q (T@U) Bool)
(declare-fun AsyncDisk.DiskOp.reqWrite (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.ReqWrite2Op| (Int Int T@U T@U) T@U)
(declare-fun AsyncDisk.DiskOp.ReqWrite2Op_q (T@U) Bool)
(declare-fun AsyncDisk.DiskOp.id1 (T@U) Int)
(declare-fun AsyncDisk.DiskOp.id2 (T@U) Int)
(declare-fun AsyncDisk.DiskOp.reqWrite1 (T@U) T@U)
(declare-fun AsyncDisk.DiskOp.reqWrite2 (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.RespReadOp| (Int T@U) T@U)
(declare-fun AsyncDisk.DiskOp.RespReadOp_q (T@U) Bool)
(declare-fun AsyncDisk.DiskOp.respRead (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.RespWriteOp| (Int T@U) T@U)
(declare-fun AsyncDisk.DiskOp.RespWriteOp_q (T@U) Bool)
(declare-fun AsyncDisk.DiskOp.respWrite (T@U) T@U)
(declare-fun |#AsyncDisk.DiskOp.NoDiskOp| () T@U)
(declare-fun AsyncDisk.DiskOp.NoDiskOp_q (T@U) Bool)
(declare-fun |$IsA#AsyncDisk.DiskOp| (T@U) Bool)
(declare-fun |AsyncDisk.DiskOp#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.Variables.Variables| (T@U T@U T@U T@U T@U) T@U)
(declare-fun AsyncDisk.Variables.Variables_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.Variables () T@U)
(declare-fun AsyncDisk.Variables.reqReads (T@U) T@U)
(declare-fun AsyncDisk.Variables.reqWrites (T@U) T@U)
(declare-fun AsyncDisk.Variables.respReads (T@U) T@U)
(declare-fun AsyncDisk.Variables.respWrites (T@U) T@U)
(declare-fun AsyncDisk.Variables.contents (T@U) T@U)
(declare-fun |$IsA#AsyncDisk.Variables| (T@U) Bool)
(declare-fun |AsyncDisk.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.Step.RecvReadStep| () T@U)
(declare-fun AsyncDisk.Step.RecvReadStep_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.Step () T@U)
(declare-fun |#AsyncDisk.Step.RecvWriteStep| () T@U)
(declare-fun AsyncDisk.Step.RecvWriteStep_q (T@U) Bool)
(declare-fun |#AsyncDisk.Step.RecvWrite2Step| () T@U)
(declare-fun AsyncDisk.Step.RecvWrite2Step_q (T@U) Bool)
(declare-fun |#AsyncDisk.Step.AckReadStep| () T@U)
(declare-fun AsyncDisk.Step.AckReadStep_q (T@U) Bool)
(declare-fun |#AsyncDisk.Step.AckWriteStep| () T@U)
(declare-fun AsyncDisk.Step.AckWriteStep_q (T@U) Bool)
(declare-fun |#AsyncDisk.Step.StutterStep| () T@U)
(declare-fun AsyncDisk.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#AsyncDisk.Step| (T@U) Bool)
(declare-fun |AsyncDisk.Step#Equal| (T@U T@U) Bool)
(declare-fun |#AsyncDisk.InternalStep.ProcessReadFailureStep| (Int T@U) T@U)
(declare-fun AsyncDisk.InternalStep.ProcessReadFailureStep_q (T@U) Bool)
(declare-fun Tclass.AsyncDisk.InternalStep () T@U)
(declare-fun AsyncDisk.InternalStep.id (T@U) Int)
(declare-fun AsyncDisk.InternalStep.fakeContents (T@U) T@U)
(declare-fun |#AsyncDisk.InternalStep.ProcessWriteStep| (Int) T@U)
(declare-fun AsyncDisk.InternalStep.ProcessWriteStep_q (T@U) Bool)
(declare-fun |#AsyncDisk.InternalStep.HavocConflictingWritesStep| (Int Int) T@U)
(declare-fun AsyncDisk.InternalStep.HavocConflictingWritesStep_q (T@U) Bool)
(declare-fun AsyncDisk.InternalStep.id_k (T@U) Int)
(declare-fun |#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| (Int Int) T@U)
(declare-fun AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (T@U) Bool)
(declare-fun |$IsA#AsyncDisk.InternalStep| (T@U) Bool)
(declare-fun |AsyncDisk.InternalStep#Equal| (T@U T@U) Bool)
(declare-fun Tclass.AsyncDisk.__default () T@U)
(declare-fun AsyncDisk.__default.Init (T@U) Bool)
(declare-fun |AsyncDisk.__default.Init#canCall| (T@U) Bool)
(declare-fun |AsyncDisk.__default.Init#requires| (T@U) Bool)
(declare-fun AsyncDisk.__default.RecvRead (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvRead#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvRead#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.RecvWrite (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvWrite#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvWrite#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.RecvWrite2 (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvWrite2#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.RecvWrite2#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.AckRead (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AckRead#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AckRead#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun AsyncDisk.__default.AckWrite (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AckWrite#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AckWrite#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.Stutter (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Stutter#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Stutter#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.Next (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.ChecksumChecksOut (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.ChecksumChecksOut#canCall| (T@U) Bool)
(declare-fun |AsyncDisk.__default.ChecksumChecksOut#requires| (T@U T@U) Bool)
(declare-fun AsyncDisk.__default.ChecksumsCheckOutForSlice (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.ChecksumsCheckOutForSlice#requires| (T@U T@U Int Int) Bool)
(declare-fun StartFuel_AsyncDisk._default.ChecksumChecksOut () T@U)
(declare-fun AsyncDisk.__default.AllChecksumsCheckOut (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AllChecksumsCheckOut#canCall| (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.AllChecksumsCheckOut#requires| (T@U T@U) Bool)
(declare-fun AsyncDisk.__default.ProcessReadFailure (T@U T@U Int T@U) Bool)
(declare-fun |AsyncDisk.__default.ProcessReadFailure#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |AsyncDisk.__default.ProcessReadFailure#requires| (T@U T@U Int T@U) Bool)
(declare-fun AsyncDisk.__default.splice (T@U T@U Int T@U) T@U)
(declare-fun |AsyncDisk.__default.splice#canCall| (T@U Int T@U) Bool)
(declare-fun |AsyncDisk.__default.splice#requires| (T@U T@U Int T@U) Bool)
(declare-fun AsyncDisk.__default.ProcessWrite (T@U T@U Int) Bool)
(declare-fun |AsyncDisk.__default.ProcessWrite#canCall| (T@U T@U Int) Bool)
(declare-fun |AsyncDisk.__default.ProcessWrite#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_AsyncDisk._default.splice () T@U)
(declare-fun AsyncDisk.__default.overlap (Int Int Int Int) Bool)
(declare-fun |AsyncDisk.__default.overlap#requires| (Int Int Int Int) Bool)
(declare-fun AsyncDisk.__default.HavocConflictingWrites (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.HavocConflictingWrites#canCall| (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.HavocConflictingWrites#requires| (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.overlap#canCall| (Int Int Int Int) Bool)
(declare-fun AsyncDisk.__default.HavocConflictingWriteRead (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.HavocConflictingWriteRead#canCall| (T@U T@U Int Int) Bool)
(declare-fun |AsyncDisk.__default.HavocConflictingWriteRead#requires| (T@U T@U Int Int) Bool)
(declare-fun AsyncDisk.__default.NextInternalStep (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextInternalStep#canCall| (T@U T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextInternalStep#requires| (T@U T@U T@U) Bool)
(declare-fun AsyncDisk.__default.NextInternal (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextInternal#canCall| (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.NextInternal#requires| (T@U T@U) Bool)
(declare-fun AsyncDisk.__default.Crash (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Crash#canCall| (T@U T@U) Bool)
(declare-fun |AsyncDisk.__default.Crash#requires| (T@U T@U) Bool)
(declare-fun Tclass.JournalBytes.__default () T@U)
(declare-fun JournalBytes.__default.JournalBlockOfByteSeq (T@U T@U) T@U)
(declare-fun |JournalBytes.__default.JournalBlockOfByteSeq#canCall| (T@U) Bool)
(declare-fun |JournalBytes.__default.JournalBlockOfByteSeq#requires| (T@U T@U) Bool)
(declare-fun JournalBytes.__default.JournalRangeOfByteSeq (T@U T@U) T@U)
(declare-fun |JournalBytes.__default.JournalRangeOfByteSeq#canCall| (T@U) Bool)
(declare-fun |JournalBytes.__default.JournalRangeOfByteSeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_JournalBytes._default.JournalBlockOfByteSeq () T@U)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun Tclass.CRC32__C__Impl.__default () T@U)
(declare-fun MapType8Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType8Type (T@T T@T) T@T)
(declare-fun MapType8TypeInv0 (T@T) T@T)
(declare-fun MapType8TypeInv1 (T@T) T@T)
(declare-fun MapType8Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :qid |typeInv:U_2_string| :pattern ( (string_2_U arg0@@7)) ))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :qid |cast:U_2_string| :pattern ( (U_2_string x@@3)) ))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType) :qid |funType:string_2_U| :pattern ( (string_2_U arg0@@8)) ))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :qid |typeInv:U_2_regex| :pattern ( (regex_2_U arg0@@9)) ))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :qid |cast:U_2_regex| :pattern ( (U_2_regex x@@4)) ))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType) :qid |funType:regex_2_U| :pattern ( (regex_2_U arg0@@10)) ))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) )))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z)) )))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType| ))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@12)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc5) TyTagType)) (= (type Tagclass._System.___hPartialFunc5) TyTagType)) (= (type Tagclass._System.___hTotalFunc5) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type Tagclass._System.___hFunc2LLO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LLO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LLO) TyTagType)) (= (type Tagclass._System.___hFunc0L) TyTagType)) (= (type Tagclass._System.___hPartialFunc0L) TyTagType)) (= (type Tagclass._System.___hTotalFunc0L) TyTagType)) (= (type Tagclass._System.___hFunc3LLLO) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLLO) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLLO) TyTagType)) (= (type Tagclass._System.___hFunc6) TyTagType)) (= (type Tagclass._System.___hPartialFunc6) TyTagType)) (= (type Tagclass._System.___hTotalFunc6) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type |##_System._tuple#3._#Make3|) DtCtorIdType)) (= (type Tagclass._System.Tuple3) TyTagType)) (= (type class._System.Tuple3) ClassNameType)) (= (type Tagclass._System.___hFunc2OSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2OSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2OSO) TyTagType)) (= (type Tagclass._System.___hFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hFunc1OS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OS) TyTagType)) (= (type Tagclass._System.___hFunc2LOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LOO) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type Tagclass._System.___hFunc1OL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OL) TyTagType)) (= (type Tagclass._System.___hFunc1LO) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LO) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LO) TyTagType)) (= (type |##_System._tuple#2OLL._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2OLL) TyTagType)) (= (type class._System.Tuple2OLL) ClassNameType)) (= (type Tagclass._System.___hFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hFunc2SSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2SSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2SSO) TyTagType)) (= (type Tagclass._System.___hFunc1SS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1SS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1SS) TyTagType)) (= (type Tagclass._System.___hFunc1LL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LL) TyTagType)) (= (type class.JournalistParsingImpl.__default) ClassNameType)) (= (type Tagclass.JournalistParsingImpl.__default) TyTagType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.Journal.JournalEntry) TyTagType)) (= (type Tagclass.KeyType.Key) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.KeyType.__default) ClassNameType)) (= (type Tagclass.KeyType.__default) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type class.LinearMaybe.predefined) ClassNameType)) (= (type class.LinearMaybe.__default) ClassNameType)) (= (type Tagclass.LinearMaybe.__default) TyTagType)) (= (type class.LinearExtern.predefined) ClassNameType)) (= (type class.LinearExtern.__default) ClassNameType)) (= (type Tagclass.LinearExtern.__default) TyTagType)) (= (type class.SequencesLite.__default) ClassNameType)) (= (type Tagclass.SequencesLite.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type |##UI.RangeStart.SInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeStart) TyTagType)) (= (type |##UI.RangeStart.SExclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.NegativeInf|) DtCtorIdType)) (= (type class.UI.RangeStart) ClassNameType)) (= (type |##UI.RangeEnd.EInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeEnd) TyTagType)) (= (type |##UI.RangeEnd.EExclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.PositiveInf|) DtCtorIdType)) (= (type class.UI.RangeEnd) ClassNameType)) (= (type |##UI.SuccResult.SuccResult|) DtCtorIdType)) (= (type Tagclass.UI.SuccResult) TyTagType)) (= (type class.UI.SuccResult) ClassNameType)) (= (type |##UI.SuccResultList.SuccResultList|) DtCtorIdType)) (= (type Tagclass.UI.SuccResultList) TyTagType)) (= (type class.UI.SuccResultList) ClassNameType)) (= (type |##UI.Op.NoOp|) DtCtorIdType)) (= (type Tagclass.UI.Op) TyTagType)) (= (type |##UI.Op.SyncOp|) DtCtorIdType)) (= (type |##UI.Op.CrashOp|) DtCtorIdType)) (= (type |##UI.Op.PushSyncOp|) DtCtorIdType)) (= (type |##UI.Op.PopSyncOp|) DtCtorIdType)) (= (type |##UI.Op.GetOp|) DtCtorIdType)) (= (type |##UI.Op.GetBeginOp|) DtCtorIdType)) (= (type |##UI.Op.GetEndOp|) DtCtorIdType)) (= (type |##UI.Op.PutOp|) DtCtorIdType)) (= (type |##UI.Op.SuccOp|) DtCtorIdType)) (= (type class.UI.Op) ClassNameType)) (= (type class.UI.__default) ClassNameType)) (= (type Tagclass.UI.__default) TyTagType)) (= (type |##Journal.JournalEntry.JournalInsert|) DtCtorIdType)) (= (type class.Journal.JournalEntry) ClassNameType)) (= (type class.Journal.__default) ClassNameType)) (= (type Tagclass.Journal.__default) TyTagType)) (= (type class.NativePackedInts.__default) ClassNameType)) (= (type Tagclass.NativePackedInts.__default) TyTagType)) (= (type |##JournalRanges.Header.Header|) DtCtorIdType)) (= (type Tagclass.JournalRanges.Header) TyTagType)) (= (type class.JournalRanges.Header) ClassNameType)) (= (type class.JournalRanges.__default) ClassNameType)) (= (type Tagclass.JournalRanges.__default) TyTagType)) (= (type class.MapRemove_s.__default) ClassNameType)) (= (type Tagclass.MapRemove_s.__default) TyTagType)) (= (type class.Bits__s.__default) ClassNameType)) (= (type Tagclass.Bits__s.__default) TyTagType)) (= (type class.F2__X__s.__default) ClassNameType)) (= (type Tagclass.F2__X__s.__default) TyTagType)) (= (type class.CRC32__C.__default) ClassNameType)) (= (type Tagclass.CRC32__C.__default) TyTagType)) (= (type |##AsyncDisk.ReqRead.ReqRead|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.ReqRead) TyTagType)) (= (type class.AsyncDisk.ReqRead) ClassNameType)) (= (type |##AsyncDisk.ReqWrite.ReqWrite|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.ReqWrite) TyTagType)) (= (type class.AsyncDisk.ReqWrite) ClassNameType)) (= (type |##AsyncDisk.RespRead.RespRead|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.RespRead) TyTagType)) (= (type class.AsyncDisk.RespRead) ClassNameType)) (= (type |##AsyncDisk.RespWrite.RespWrite|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.RespWrite) TyTagType)) (= (type class.AsyncDisk.RespWrite) ClassNameType)) (= (type |##AsyncDisk.DiskOp.ReqReadOp|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.DiskOp) TyTagType)) (= (type |##AsyncDisk.DiskOp.ReqWriteOp|) DtCtorIdType)) (= (type |##AsyncDisk.DiskOp.ReqWrite2Op|) DtCtorIdType)) (= (type |##AsyncDisk.DiskOp.RespReadOp|) DtCtorIdType)) (= (type |##AsyncDisk.DiskOp.RespWriteOp|) DtCtorIdType)) (= (type |##AsyncDisk.DiskOp.NoDiskOp|) DtCtorIdType)) (= (type class.AsyncDisk.DiskOp) ClassNameType)) (= (type |##AsyncDisk.Variables.Variables|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.Variables) TyTagType)) (= (type class.AsyncDisk.Variables) ClassNameType)) (= (type |##AsyncDisk.Step.RecvReadStep|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.Step) TyTagType)) (= (type |##AsyncDisk.Step.RecvWriteStep|) DtCtorIdType)) (= (type |##AsyncDisk.Step.RecvWrite2Step|) DtCtorIdType)) (= (type |##AsyncDisk.Step.AckReadStep|) DtCtorIdType)) (= (type |##AsyncDisk.Step.AckWriteStep|) DtCtorIdType)) (= (type |##AsyncDisk.Step.StutterStep|) DtCtorIdType)) (= (type class.AsyncDisk.Step) ClassNameType)) (= (type |##AsyncDisk.InternalStep.ProcessReadFailureStep|) DtCtorIdType)) (= (type Tagclass.AsyncDisk.InternalStep) TyTagType)) (= (type |##AsyncDisk.InternalStep.ProcessWriteStep|) DtCtorIdType)) (= (type |##AsyncDisk.InternalStep.HavocConflictingWritesStep|) DtCtorIdType)) (= (type |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep|) DtCtorIdType)) (= (type class.AsyncDisk.InternalStep) ClassNameType)) (= (type class.AsyncDisk.__default) ClassNameType)) (= (type Tagclass.AsyncDisk.__default) TyTagType)) (= (type class.JournalBytes.__default) ClassNameType)) (= (type Tagclass.JournalBytes.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type class.CRC32__C__Impl.__default) ClassNameType)) (= (type Tagclass.CRC32__C__Impl.__default) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func5|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func4|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LLO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0L|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLLO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLLO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLLO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func6|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc6|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc6|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2OLL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LL|) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$Option) TyTagFamilyType)) (= (type tytagFamily$JournalEntry) TyTagFamilyType)) (= (type tytagFamily$Key) TyTagFamilyType)) (= (type tytagFamily$Value) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)) (= (type tytagFamily$Delta) TyTagFamilyType)) (= (type tytagFamily$Message) TyTagFamilyType)) (= (type tytagFamily$RangeStart) TyTagFamilyType)) (= (type tytagFamily$RangeEnd) TyTagFamilyType)) (= (type tytagFamily$SuccResult) TyTagFamilyType)) (= (type tytagFamily$SuccResultList) TyTagFamilyType)) (= (type tytagFamily$Op) TyTagFamilyType)) (= (type tytagFamily$Header) TyTagFamilyType)) (= (type tytagFamily$ReqRead) TyTagFamilyType)) (= (type tytagFamily$ReqWrite) TyTagFamilyType)) (= (type tytagFamily$RespRead) TyTagFamilyType)) (= (type tytagFamily$RespWrite) TyTagFamilyType)) (= (type tytagFamily$DiskOp) TyTagFamilyType)) (= (type tytagFamily$Variables) TyTagFamilyType)) (= (type tytagFamily$Step) TyTagFamilyType)) (= (type tytagFamily$InternalStep) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc5 Tagclass._System.___hPartialFunc5 Tagclass._System.___hTotalFunc5 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 Tagclass._System.___hFunc2LLO Tagclass._System.___hPartialFunc2LLO Tagclass._System.___hTotalFunc2LLO Tagclass._System.___hFunc0L Tagclass._System.___hPartialFunc0L Tagclass._System.___hTotalFunc0L Tagclass._System.___hFunc3LLLO Tagclass._System.___hPartialFunc3LLLO Tagclass._System.___hTotalFunc3LLLO Tagclass._System.___hFunc6 Tagclass._System.___hPartialFunc6 Tagclass._System.___hTotalFunc6 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 |##_System._tuple#3._#Make3| Tagclass._System.Tuple3 class._System.Tuple3 Tagclass._System.___hFunc2OSO Tagclass._System.___hPartialFunc2OSO Tagclass._System.___hTotalFunc2OSO Tagclass._System.___hFunc3LLOO Tagclass._System.___hPartialFunc3LLOO Tagclass._System.___hTotalFunc3LLOO Tagclass._System.___hFunc1OS Tagclass._System.___hPartialFunc1OS Tagclass._System.___hTotalFunc1OS Tagclass._System.___hFunc2LOO Tagclass._System.___hPartialFunc2LOO Tagclass._System.___hTotalFunc2LOO |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 Tagclass._System.___hFunc1OL Tagclass._System.___hPartialFunc1OL Tagclass._System.___hTotalFunc1OL Tagclass._System.___hFunc1LO Tagclass._System.___hPartialFunc1LO Tagclass._System.___hTotalFunc1LO |##_System._tuple#2OLL._#Make2| Tagclass._System.Tuple2OLL class._System.Tuple2OLL Tagclass._System.___hFunc3LLOL Tagclass._System.___hPartialFunc3LLOL Tagclass._System.___hTotalFunc3LLOL Tagclass._System.___hFunc2SSO Tagclass._System.___hPartialFunc2SSO Tagclass._System.___hTotalFunc2SSO Tagclass._System.___hFunc1SS Tagclass._System.___hPartialFunc1SS Tagclass._System.___hTotalFunc1SS Tagclass._System.___hFunc1LL Tagclass._System.___hPartialFunc1LL Tagclass._System.___hTotalFunc1LL class.JournalistParsingImpl.__default Tagclass.JournalistParsingImpl.__default Tagclass.NativeTypes.byte Tagclass.Options.Option Tagclass.Journal.JournalEntry Tagclass.KeyType.Key Tagclass.ValueType.Value Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default class.KeyType.__default Tagclass.KeyType.__default class.ValueType.__default Tagclass.ValueType.__default class.LinearMaybe.predefined class.LinearMaybe.__default Tagclass.LinearMaybe.__default class.LinearExtern.predefined class.LinearExtern.__default Tagclass.LinearExtern.__default class.SequencesLite.__default Tagclass.SequencesLite.__default |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.Mathematics.__default Tagclass.Mathematics.__default class.Sequences.__default Tagclass.Sequences.__default class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default Tagclass.ValueMessage.Delta Tagclass.ValueMessage.Message |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message |##UI.RangeStart.SInclusive| Tagclass.UI.RangeStart |##UI.RangeStart.SExclusive| |##UI.RangeStart.NegativeInf| class.UI.RangeStart |##UI.RangeEnd.EInclusive| Tagclass.UI.RangeEnd |##UI.RangeEnd.EExclusive| |##UI.RangeEnd.PositiveInf| class.UI.RangeEnd |##UI.SuccResult.SuccResult| Tagclass.UI.SuccResult class.UI.SuccResult |##UI.SuccResultList.SuccResultList| Tagclass.UI.SuccResultList class.UI.SuccResultList |##UI.Op.NoOp| Tagclass.UI.Op |##UI.Op.SyncOp| |##UI.Op.CrashOp| |##UI.Op.PushSyncOp| |##UI.Op.PopSyncOp| |##UI.Op.GetOp| |##UI.Op.GetBeginOp| |##UI.Op.GetEndOp| |##UI.Op.PutOp| |##UI.Op.SuccOp| class.UI.Op class.UI.__default Tagclass.UI.__default |##Journal.JournalEntry.JournalInsert| class.Journal.JournalEntry class.Journal.__default Tagclass.Journal.__default class.NativePackedInts.__default Tagclass.NativePackedInts.__default |##JournalRanges.Header.Header| Tagclass.JournalRanges.Header class.JournalRanges.Header class.JournalRanges.__default Tagclass.JournalRanges.__default class.MapRemove_s.__default Tagclass.MapRemove_s.__default class.Bits__s.__default Tagclass.Bits__s.__default class.F2__X__s.__default Tagclass.F2__X__s.__default class.CRC32__C.__default Tagclass.CRC32__C.__default |##AsyncDisk.ReqRead.ReqRead| Tagclass.AsyncDisk.ReqRead class.AsyncDisk.ReqRead |##AsyncDisk.ReqWrite.ReqWrite| Tagclass.AsyncDisk.ReqWrite class.AsyncDisk.ReqWrite |##AsyncDisk.RespRead.RespRead| Tagclass.AsyncDisk.RespRead class.AsyncDisk.RespRead |##AsyncDisk.RespWrite.RespWrite| Tagclass.AsyncDisk.RespWrite class.AsyncDisk.RespWrite |##AsyncDisk.DiskOp.ReqReadOp| Tagclass.AsyncDisk.DiskOp |##AsyncDisk.DiskOp.ReqWriteOp| |##AsyncDisk.DiskOp.ReqWrite2Op| |##AsyncDisk.DiskOp.RespReadOp| |##AsyncDisk.DiskOp.RespWriteOp| |##AsyncDisk.DiskOp.NoDiskOp| class.AsyncDisk.DiskOp |##AsyncDisk.Variables.Variables| Tagclass.AsyncDisk.Variables class.AsyncDisk.Variables |##AsyncDisk.Step.RecvReadStep| Tagclass.AsyncDisk.Step |##AsyncDisk.Step.RecvWriteStep| |##AsyncDisk.Step.RecvWrite2Step| |##AsyncDisk.Step.AckReadStep| |##AsyncDisk.Step.AckWriteStep| |##AsyncDisk.Step.StutterStep| class.AsyncDisk.Step |##AsyncDisk.InternalStep.ProcessReadFailureStep| Tagclass.AsyncDisk.InternalStep |##AsyncDisk.InternalStep.ProcessWriteStep| |##AsyncDisk.InternalStep.HavocConflictingWritesStep| |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep| class.AsyncDisk.InternalStep class.AsyncDisk.__default Tagclass.AsyncDisk.__default class.JournalBytes.__default Tagclass.JournalBytes.__default class.SeqComparison.__default Tagclass.SeqComparison.__default class.NativeArrays.__default Tagclass.NativeArrays.__default class.CRC32__C__Impl.__default Tagclass.CRC32__C__Impl.__default tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_#Func5| |tytagFamily$_#PartialFunc5| |tytagFamily$_#TotalFunc5| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_#Func4| |tytagFamily$_#PartialFunc4| |tytagFamily$_#TotalFunc4| |tytagFamily$_#Func2LLO| |tytagFamily$_#PartialFunc2LLO| |tytagFamily$_#TotalFunc2LLO| |tytagFamily$_#Func0L| |tytagFamily$_#PartialFunc0L| |tytagFamily$_#TotalFunc0L| |tytagFamily$_#Func3LLLO| |tytagFamily$_#PartialFunc3LLLO| |tytagFamily$_#TotalFunc3LLLO| |tytagFamily$_#Func6| |tytagFamily$_#PartialFunc6| |tytagFamily$_#TotalFunc6| |tytagFamily$_tuple#2| |tytagFamily$_tuple#3| |tytagFamily$_#Func2OSO| |tytagFamily$_#PartialFunc2OSO| |tytagFamily$_#TotalFunc2OSO| |tytagFamily$_#Func3LLOO| |tytagFamily$_#PartialFunc3LLOO| |tytagFamily$_#TotalFunc3LLOO| |tytagFamily$_#Func1OS| |tytagFamily$_#PartialFunc1OS| |tytagFamily$_#TotalFunc1OS| |tytagFamily$_#Func2LOO| |tytagFamily$_#PartialFunc2LOO| |tytagFamily$_#TotalFunc2LOO| |tytagFamily$_tuple#0| |tytagFamily$_#Func1OL| |tytagFamily$_#PartialFunc1OL| |tytagFamily$_#TotalFunc1OL| |tytagFamily$_#Func1LO| |tytagFamily$_#PartialFunc1LO| |tytagFamily$_#TotalFunc1LO| |tytagFamily$_tuple#2OLL| |tytagFamily$_#Func3LLOL| |tytagFamily$_#PartialFunc3LLOL| |tytagFamily$_#TotalFunc3LLOL| |tytagFamily$_#Func2SSO| |tytagFamily$_#PartialFunc2SSO| |tytagFamily$_#TotalFunc2SSO| |tytagFamily$_#Func1SS| |tytagFamily$_#PartialFunc1SS| |tytagFamily$_#TotalFunc1SS| |tytagFamily$_#Func1LL| |tytagFamily$_#PartialFunc1LL| |tytagFamily$_#TotalFunc1LL| tytagFamily$byte tytagFamily$Option tytagFamily$JournalEntry tytagFamily$Key tytagFamily$Value tytagFamily$sbyte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$uint32 tytagFamily$int64 tytagFamily$uint64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128 tytagFamily$Delta tytagFamily$Message tytagFamily$RangeStart tytagFamily$RangeEnd tytagFamily$SuccResult tytagFamily$SuccResultList tytagFamily$Op tytagFamily$Header tytagFamily$ReqRead tytagFamily$ReqWrite tytagFamily$RespRead tytagFamily$RespWrite tytagFamily$DiskOp tytagFamily$Variables tytagFamily$Step tytagFamily$InternalStep) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@13)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPreludebpl.34:15| :skolemid |347| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@15)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPreludebpl.36:15| :skolemid |348| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@17)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPreludebpl.38:15| :skolemid |349| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@18)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@19)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPreludebpl.40:15| :skolemid |350| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@20)) )) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@21)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPreludebpl.42:15| :skolemid |351| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@22 arg1)) )) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@23)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPreludebpl.45:15| :skolemid |352| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@24)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPreludebpl.46:15| :skolemid |353| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@25 arg1@@0)) )) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@26)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPreludebpl.49:15| :skolemid |354| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@27)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPreludebpl.50:15| :skolemid |355| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@28)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPreludebpl.76:15| :skolemid |356| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPreludebpl.77:15| :skolemid |357| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPreludebpl.78:15| :skolemid |358| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPreludebpl.79:15| :skolemid |359| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPreludebpl.80:15| :skolemid |360| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPreludebpl.81:15| :skolemid |361| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29))) (= (type (Lit arg0@@29)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@29)) )))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8) :qid |DafnyPreludebpl.89:29| :skolemid |362| :pattern ( (Lit x@@8)) )))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@30)) ))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :qid |DafnyPreludebpl.90:18| :skolemid |363| :pattern ( ($Box (Lit x@@9))) )))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10) :qid |DafnyPreludebpl.95:29| :skolemid |364| :pattern ( (LitInt x@@10)) )))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :qid |DafnyPreludebpl.96:15| :skolemid |365| :pattern ( ($Box (int_2_U (LitInt x@@11)))) )))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12) :qid |DafnyPreludebpl.97:30| :skolemid |366| :pattern ( (LitReal x@@12)) )))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :qid |DafnyPreludebpl.98:15| :skolemid |367| :pattern ( ($Box (real_2_U (LitReal x@@13)))) )))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@31)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPreludebpl.107:15| :skolemid |368| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPreludebpl.111:15| :skolemid |369| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@32 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPreludebpl.117:15| :skolemid |370| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@33 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPreludebpl.120:15| :skolemid |371| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@34)) )))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14))) (= ($Unbox T@@1 ($Box x@@14)) x@@14)) :qid |DafnyPreludebpl.141:18| :skolemid |372| :pattern ( ($Box x@@14)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPreludebpl.143:15| :skolemid |373| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPreludebpl.146:15| :skolemid |374| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPreludebpl.149:15| :skolemid |375| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPreludebpl.152:15| :skolemid |376| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type| )) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@36 arg1@@4)) ))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@37 arg1@@5)) ))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38)))) (= (type (MapType0Select arg0@@38 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@38 arg1@@6)) ))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :qid |DafnyPreludebpl.158:15| :skolemid |377| :pattern ( ($IsBox bx@@3 (TBitvector 0))) )))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :qid |DafnyPreludebpl.162:15| :skolemid |378| :pattern ( ($IsBox bx@@4 (TSet t@@13))) )))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :qid |DafnyPreludebpl.165:15| :skolemid |379| :pattern ( ($IsBox bx@@5 (TISet t@@14))) )))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :qid |DafnyPreludebpl.168:15| :skolemid |380| :pattern ( ($IsBox bx@@6 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType| )) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@41)) ))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :qid |DafnyPreludebpl.171:15| :skolemid |381| :pattern ( ($IsBox bx@@7 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType| )) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@43 arg1@@9)) ))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@44 arg1@@10)) ))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :qid |DafnyPreludebpl.174:15| :skolemid |382| :pattern ( ($IsBox bx@@8 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType| )) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@46 arg1@@12)) ))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@47 arg1@@13)) ))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :qid |DafnyPreludebpl.177:15| :skolemid |383| :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :qid |DafnyPreludebpl.181:18| :skolemid |384| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@48 arg1@@14)) )) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :qid |DafnyPreludebpl.184:18| :skolemid |385| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPreludebpl.202:14| :skolemid |386| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPreludebpl.203:14| :skolemid |387| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPreludebpl.204:14| :skolemid |388| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPreludebpl.205:14| :skolemid |389| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPreludebpl.206:14| :skolemid |390| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPreludebpl.208:14| :skolemid |391| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPreludebpl.209:14| :skolemid |392| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPreludebpl.210:14| :skolemid |393| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPreludebpl.211:14| :skolemid |394| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPreludebpl.212:14| :skolemid |395| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :qid |DafnyPreludebpl.216:15| :skolemid |396| :pattern ( ($Is v@@11 (TBitvector 0))) )))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :qid |DafnyPreludebpl.217:15| :skolemid |397| :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5)) )))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPreludebpl.221:11| :skolemid |398| :pattern ( (MapType0Select v@@13 bx@@10)) )))) :qid |DafnyPreludebpl.219:15| :skolemid |399| :pattern ( ($Is v@@13 (TSet t0))) )))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPreludebpl.225:11| :skolemid |400| :pattern ( (MapType0Select v@@14 bx@@11)) )))) :qid |DafnyPreludebpl.223:15| :skolemid |401| :pattern ( ($Is v@@14 (TISet t0@@0))) )))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :qid |DafnyPreludebpl.229:11| :skolemid |402| :pattern ( (MapType0Select v@@15 bx@@12)) )))) :qid |DafnyPreludebpl.227:15| :skolemid |403| :pattern ( ($Is v@@15 (TMultiSet t0@@1))) )))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :qid |DafnyPreludebpl.231:15| :skolemid |404| :pattern ( ($Is v@@16 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50)))) (= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@50 arg1@@16)) )))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :qid |DafnyPreludebpl.235:11| :skolemid |405| :pattern ( (|Seq#Index| v@@17 i)) )))) :qid |DafnyPreludebpl.233:15| :skolemid |406| :pattern ( ($Is v@@17 (TSeq t0@@3))) )))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :qid |DafnyPreludebpl.240:11| :skolemid |407| :pattern ( (MapType0Select v@@18 bx@@13)) )))) :qid |DafnyPreludebpl.238:15| :skolemid |408| :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6)) )))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :qid |DafnyPreludebpl.244:11| :skolemid |409| :pattern ( (MapType0Select v@@19 bx@@14)) )))) :qid |DafnyPreludebpl.242:15| :skolemid |410| :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7)) )))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :qid |DafnyPreludebpl.248:11| :skolemid |411| :pattern ( (MapType0Select v@@20 bx@@15)) )))) :qid |DafnyPreludebpl.246:15| :skolemid |412| :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) )))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :qid |DafnyPreludebpl.252:11| :skolemid |413| :pattern ( (|Seq#Index| v@@21 i@@0)) )))) :qid |DafnyPreludebpl.250:15| :skolemid |414| :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) )))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51)))) (let ((U (MapTypeInv0 (type arg0@@51)))) (= (type (|Map#Elements| arg0@@51)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@51)) )) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52)))) (= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@52)) ))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :qid |DafnyPreludebpl.259:19| :skolemid |415| :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16)) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16)) )))) :qid |DafnyPreludebpl.256:15| :skolemid |416| :pattern ( ($Is v@@22 (TMap t0@@8 t1))) )))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :qid |DafnyPreludebpl.267:19| :skolemid |417| :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17)) :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17)) )))) :qid |DafnyPreludebpl.264:15| :skolemid |418| :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) )))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53)))) (= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@53)) )) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@54)) ))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17)) ))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :qid |DafnyPreludebpl.272:15| :skolemid |419| :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1))) )))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@56)))) (= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@56)) )) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57)))) (= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@57)) ))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :qid |DafnyPreludebpl.282:19| :skolemid |420| :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18)) :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18)) )))) :qid |DafnyPreludebpl.279:15| :skolemid |421| :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2))) )))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :qid |DafnyPreludebpl.290:19| :skolemid |422| :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19)) :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19)) )))) :qid |DafnyPreludebpl.287:15| :skolemid |423| :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) )))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58)))) (= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@58)) )) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@59)) ))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :qid |DafnyPreludebpl.295:15| :skolemid |424| :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4))) )))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@60 arg1@@18)) )) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@61)) ))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@62)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPreludebpl.322:15| :skolemid |425| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@63)) )))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :qid |DafnyPreludebpl.331:15| :skolemid |426| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPreludebpl.333:15| :skolemid |427| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPreludebpl.352:15| :skolemid |428| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPreludebpl.367:15| :skolemid |429| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@64)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPreludebpl.373:15| :skolemid |430| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPreludebpl.375:15| :skolemid |431| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPreludebpl.379:15| :skolemid |432| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPreludebpl.385:15| :skolemid |433| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPreludebpl.388:15| :skolemid |434| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :qid |DafnyPreludebpl.395:15| :skolemid |435| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@65 arg1@@19)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPreludebpl.399:15| :skolemid |436| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPreludebpl.404:15| :skolemid |437| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPreludebpl.407:15| :skolemid |438| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@66 arg1@@20)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPreludebpl.412:15| :skolemid |439| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPreludebpl.416:15| :skolemid |440| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPreludebpl.422:15| :skolemid |441| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPreludebpl.427:15| :skolemid |442| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPreludebpl.432:15| :skolemid |443| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPreludebpl.438:15| :skolemid |444| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67)))) (= (type (AtLayer arg0@@67 arg1@@21)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@67 arg1@@21)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPreludebpl.462:18| :skolemid |445| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@68)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPreludebpl.463:18| :skolemid |446| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@69)) )))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1) :qid |DafnyPreludebpl.474:15| :skolemid |447| :pattern ( (IndexField i@@1)) )))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :qid |DafnyPreludebpl.476:15| :skolemid |448| :pattern ( (IndexField i@@2)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@70 arg1@@22)) )))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :qid |DafnyPreludebpl.479:15| :skolemid |449| :pattern ( (MultiIndexField f@@1 i@@3)) )))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71)))) (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@71)) )))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :qid |DafnyPreludebpl.482:15| :skolemid |450| :pattern ( (MultiIndexField f@@2 i@@4)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) )) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@73)) ))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@74)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPreludebpl.491:18| :skolemid |451| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :qid |DafnyPreludebpl.504:17| :skolemid |452| :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) )))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :qid |DafnyPreludebpl.507:14| :skolemid |453| :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPreludebpl.524:15| :skolemid |454| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15)) :qid |DafnyPreludebpl.530:14| :skolemid |455| :pattern ( (q@Int x@@15)) )))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16)) :qid |DafnyPreludebpl.531:15| :skolemid |456| :pattern ( (q@Real x@@16)) )))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5) :qid |DafnyPreludebpl.532:15| :skolemid |457| :pattern ( (q@Int (q@Real i@@5))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17))) (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))))) :qid |DafnyPreludebpl.554:22| :skolemid |458| :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPreludebpl.557:15| :skolemid |459| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPreludebpl.560:30| :skolemid |460| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPreludebpl.559:15| :skolemid |461| :pattern ( ($HeapSucc h@@15 k@@1)) )))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPreludebpl.566:20| :skolemid |462| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPreludebpl.563:15| :skolemid |463| :pattern ( ($HeapSuccGhost h@@16 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPreludebpl.624:18| :skolemid |468| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPreludebpl.627:18| :skolemid |469| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18))) :qid |DafnyPreludebpl.630:33| :skolemid |470| :no-pattern (type x@@18) :no-pattern (U_2_int x@@18) :no-pattern (U_2_bool x@@18) )))))) :qid |DafnyPreludebpl.628:18| :skolemid |471| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75))) (= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@75)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPreludebpl.636:18| :skolemid |472| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)))) :qid |DafnyPreludebpl.637:18| :skolemid |473| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPreludebpl.638:18| :skolemid |474| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24))) (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24)) )))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19)))))) :qid |DafnyPreludebpl.641:18| :skolemid |475| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20)))) :qid |DafnyPreludebpl.643:18| :skolemid |476| :pattern ( (|Set#UnionOne| a@@4 x@@20)) )))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1)))) :qid |DafnyPreludebpl.645:18| :skolemid |477| :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6)))) :qid |DafnyPreludebpl.647:18| :skolemid |478| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22))) )))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPreludebpl.649:18| :skolemid |479| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@77 arg1@@25)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))))) :qid |DafnyPreludebpl.653:18| :skolemid |480| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPreludebpl.655:18| :skolemid |481| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPreludebpl.657:18| :skolemid |482| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@78 arg1@@26)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPreludebpl.659:18| :skolemid |483| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@79 arg1@@27)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))))) :qid |DafnyPreludebpl.669:18| :skolemid |484| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPreludebpl.672:18| :skolemid |485| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPreludebpl.674:18| :skolemid |486| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPreludebpl.676:18| :skolemid |487| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPreludebpl.678:18| :skolemid |488| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPreludebpl.680:18| :skolemid |489| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))))) :qid |DafnyPreludebpl.684:18| :skolemid |490| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPreludebpl.686:18| :skolemid |491| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPreludebpl.688:18| :skolemid |492| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPreludebpl.697:32| :skolemid |493| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))))) :qid |DafnyPreludebpl.696:17| :skolemid |494| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :qid |DafnyPreludebpl.705:31| :skolemid |495| :pattern ( (MapType0Select a@@22 o@@24)) :pattern ( (MapType0Select b@@17 o@@24)) ))))) :qid |DafnyPreludebpl.704:17| :skolemid |496| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPreludebpl.706:17| :skolemid |497| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :qid |DafnyPreludebpl.711:34| :skolemid |498| :pattern ( (MapType0Select a@@24 o@@25)) :pattern ( (MapType0Select b@@19 o@@25)) ))))) :qid |DafnyPreludebpl.710:18| :skolemid |499| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26)))) :qid |DafnyPreludebpl.720:18| :skolemid |500| :pattern ( (let ((T@@38 (type o@@26))) (MapType0Select (|ISet#Empty| T@@38) o@@26))) )))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28))) (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28)) )))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27)))))) :qid |DafnyPreludebpl.727:18| :skolemid |501| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) )))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25)))) :qid |DafnyPreludebpl.729:18| :skolemid |502| :pattern ( (|ISet#UnionOne| a@@26 x@@25)) )))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5)))) :qid |DafnyPreludebpl.731:18| :skolemid |503| :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81)))) (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@81 arg1@@29)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28)))))) :qid |DafnyPreludebpl.735:18| :skolemid |504| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPreludebpl.737:18| :skolemid |505| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPreludebpl.739:18| :skolemid |506| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82)))) (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@82 arg1@@30)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPreludebpl.741:18| :skolemid |507| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83)))) (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29)))))) :qid |DafnyPreludebpl.747:18| :skolemid |508| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPreludebpl.750:18| :skolemid |509| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPreludebpl.752:18| :skolemid |510| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPreludebpl.754:18| :skolemid |511| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPreludebpl.756:18| :skolemid |512| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30))))))) :qid |DafnyPreludebpl.761:18| :skolemid |513| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPreludebpl.763:18| :skolemid |514| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :qid |DafnyPreludebpl.768:33| :skolemid |515| :pattern ( (MapType0Select a@@39 o@@31)) :pattern ( (MapType0Select b@@31 o@@31)) ))))) :qid |DafnyPreludebpl.767:17| :skolemid |516| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :qid |DafnyPreludebpl.772:32| :skolemid |517| :pattern ( (MapType0Select a@@40 o@@32)) :pattern ( (MapType0Select b@@32 o@@32)) ))))) :qid |DafnyPreludebpl.771:17| :skolemid |518| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPreludebpl.773:17| :skolemid |519| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :qid |DafnyPreludebpl.778:35| :skolemid |520| :pattern ( (MapType0Select a@@42 o@@33)) :pattern ( (MapType0Select b@@34 o@@33)) ))))) :qid |DafnyPreludebpl.777:18| :skolemid |521| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :qid |DafnyPreludebpl.785:15| :skolemid |522| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :qid |DafnyPreludebpl.786:15| :skolemid |523| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPreludebpl.787:15| :skolemid |524| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPreludebpl.790:15| :skolemid |525| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPreludebpl.791:15| :skolemid |526| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :qid |DafnyPreludebpl.799:11| :skolemid |527| :pattern ( (MapType0Select ms bx@@22)) ))))) :qid |DafnyPreludebpl.797:18| :skolemid |528| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPreludebpl.802:18| :skolemid |529| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5))))) :qid |DafnyPreludebpl.803:18| :skolemid |530| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0)) :qid |DafnyPreludebpl.807:18| :skolemid |531| :pattern ( (let ((T@@65 (type o@@34))) (MapType0Select (|MultiSet#Empty| T@@65) o@@34))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28)))) :qid |DafnyPreludebpl.810:38| :skolemid |532| :no-pattern (type x@@28) :no-pattern (U_2_int x@@28) :no-pattern (U_2_bool x@@28) )))))) :qid |DafnyPreludebpl.808:18| :skolemid |533| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84))) (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@84)) )))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35)))))) :qid |DafnyPreludebpl.813:18| :skolemid |534| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) )))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32))) (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPreludebpl.815:18| :skolemid |535| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36))))))) :qid |DafnyPreludebpl.819:18| :skolemid |536| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) )))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1)))) :qid |DafnyPreludebpl.822:18| :skolemid |537| :pattern ( (|MultiSet#UnionOne| a@@49 x@@30)) )))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9))))) :qid |DafnyPreludebpl.825:18| :skolemid |538| :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10))))) :qid |DafnyPreludebpl.828:18| :skolemid |539| :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPreludebpl.830:18| :skolemid |540| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) )))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86)))) (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37)))))) :qid |DafnyPreludebpl.836:18| :skolemid |541| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPreludebpl.838:18| :skolemid |542| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87)))) (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38)))))) :qid |DafnyPreludebpl.842:18| :skolemid |543| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPreludebpl.846:18| :skolemid |544| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPreludebpl.848:18| :skolemid |545| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88)))) (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39))))))) :qid |DafnyPreludebpl.853:18| :skolemid |546| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPreludebpl.855:18| :skolemid |547| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPreludebpl.857:18| :skolemid |548| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :qid |DafnyPreludebpl.867:37| :skolemid |549| :pattern ( (MapType0Select a@@61 o@@40)) :pattern ( (MapType0Select b@@46 o@@40)) ))))) :qid |DafnyPreludebpl.866:17| :skolemid |550| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :qid |DafnyPreludebpl.871:36| :skolemid |551| :pattern ( (MapType0Select a@@62 o@@41)) :pattern ( (MapType0Select b@@47 o@@41)) ))))) :qid |DafnyPreludebpl.870:17| :skolemid |552| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPreludebpl.873:17| :skolemid |553| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :qid |DafnyPreludebpl.878:39| :skolemid |554| :pattern ( (MapType0Select a@@64 o@@42)) :pattern ( (MapType0Select b@@49 o@@42)) ))))) :qid |DafnyPreludebpl.877:18| :skolemid |555| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@89)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65)))))) :qid |DafnyPreludebpl.882:18| :skolemid |556| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPreludebpl.885:18| :skolemid |557| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90)))) (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@90)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPreludebpl.891:18| :skolemid |558| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPreludebpl.893:18| :skolemid |559| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36))) (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@91 arg1@@36)) )))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29)))) :qid |DafnyPreludebpl.897:18| :skolemid |560| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| )))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92)))) (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@92 arg1@@37)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPreludebpl.904:18| :skolemid |562| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34))))) :qid |DafnyPreludebpl.909:18| :skolemid |563| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) )))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35))) (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7))) :qid |DafnyPreludebpl.916:11| :skolemid |564| :pattern ( (|Seq#Index| s@@14 i@@7)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))))) :qid |DafnyPreludebpl.915:18| :skolemid |565| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPreludebpl.925:18| :skolemid |566| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |567| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPreludebpl.929:18| :skolemid |568| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94))) (= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@94)) )))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :qid |DafnyPreludebpl.942:18| :skolemid |569| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95)))) (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96)))) (= (type (|Seq#Build_inv1| arg0@@96)) T@@111)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@96)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5))) (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPreludebpl.947:18| :skolemid |570| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31))) (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPreludebpl.952:18| :skolemid |571| :pattern ( (|Seq#Build| s@@18 v@@31)) )))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32))) (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8)))))) :qid |DafnyPreludebpl.955:18| :skolemid |572| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) )))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :qid |DafnyPreludebpl.960:15| :skolemid |573| :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) )))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPreludebpl.964:15| :skolemid |574| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :qid |DafnyPreludebpl.968:15| :skolemid |575| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPreludebpl.974:18| :skolemid |576| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :qid |DafnyPreludebpl.978:18| :skolemid |577| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0)) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0)))) (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0)))))))) :qid |DafnyPreludebpl.979:18| :skolemid |578| :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33))) (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21))))) :qid |DafnyPreludebpl.984:18| :skolemid |579| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) )))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34))) (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPreludebpl.986:18| :skolemid |580| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36))) (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36)) :qid |DafnyPreludebpl.994:13| :skolemid |581| :pattern ( (|Seq#Index| s@@23 i@@12)) ))))) :qid |DafnyPreludebpl.992:18| :skolemid |582| :pattern ( (|Seq#Contains| s@@23 x@@36)) )))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37))) (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) :qid |DafnyPreludebpl.995:18| :skolemid |583| :pattern ( (let ((T@@120 (type x@@37))) (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38))) (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38))))) :qid |DafnyPreludebpl.999:18| :skolemid |584| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) )))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35))) (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39))))) :qid |DafnyPreludebpl.1004:18| :skolemid |585| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) )))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99)))) (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@99 arg1@@41)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40))) (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40)) :qid |DafnyPreludebpl.1011:13| :skolemid |586| :pattern ( (|Seq#Index| s@@25 i@@13)) ))))) :qid |DafnyPreludebpl.1008:18| :skolemid |587| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) )))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100)))) (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@100 arg1@@42)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41))) (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41)) :qid |DafnyPreludebpl.1016:13| :skolemid |588| :pattern ( (|Seq#Index| s@@26 i@@14)) ))))) :qid |DafnyPreludebpl.1013:18| :skolemid |589| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2)))) (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :qid |DafnyPreludebpl.1023:13| :skolemid |590| :pattern ( (|Seq#Index| s0@@2 j)) :pattern ( (|Seq#Index| s1@@2 j)) )))))) :qid |DafnyPreludebpl.1020:18| :skolemid |591| :pattern ( (|Seq#Equal| s0@@2 s1@@2)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPreludebpl.1025:18| :skolemid |592| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPreludebpl.1031:13| :skolemid |593| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))))) :qid |DafnyPreludebpl.1029:18| :skolemid |594| :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPreludebpl.1035:18| :skolemid |595| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1))))) :qid |DafnyPreludebpl.1037:18| :weight 25 :skolemid |596| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPreludebpl.1045:18| :skolemid |597| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14)))))) :qid |DafnyPreludebpl.1047:18| :weight 25 :skolemid |598| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPreludebpl.1052:18| :weight 25 :skolemid |599| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26)))) :qid |DafnyPreludebpl.1058:18| :skolemid |600| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) )))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43)) )))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPreludebpl.1067:15| :skolemid |601| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) )))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :qid |DafnyPreludebpl.1072:11| :skolemid |602| :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) ))) :qid |DafnyPreludebpl.1070:15| :skolemid |603| :pattern ( (|Seq#FromArray| h@@18 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPreludebpl.1082:15| :skolemid |604| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :qid |DafnyPreludebpl.1087:15| :skolemid |605| :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37))) (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37))))) :qid |DafnyPreludebpl.1092:18| :skolemid |606| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38))) (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPreludebpl.1095:18| :skolemid |607| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39))) (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39))))) :qid |DafnyPreludebpl.1098:18| :skolemid |608| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40))) (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPreludebpl.1101:18| :skolemid |609| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) )))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :qid |DafnyPreludebpl.1105:15| :skolemid |610| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41))) (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41))))) :qid |DafnyPreludebpl.1109:18| :skolemid |611| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :qid |DafnyPreludebpl.1114:15| :skolemid |612| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) )))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39))))) :qid |DafnyPreludebpl.1117:18| :skolemid |613| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) )))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40))))) :qid |DafnyPreludebpl.1120:18| :skolemid |614| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23))) )))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41))))) :qid |DafnyPreludebpl.1123:18| :skolemid |615| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPreludebpl.1128:18| :skolemid |616| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145)))) :qid |DafnyPreludebpl.1130:18| :skolemid |617| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPreludebpl.1132:18| :skolemid |618| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPreludebpl.1150:20| :skolemid |619| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@4 V@@4)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11)))) (let ((U@@5 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5)))))) :qid |DafnyPreludebpl.1152:21| :skolemid |620| :pattern ( (|Map#Card| m@@11)) )))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12)))) (let ((U@@6 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4))) :qid |DafnyPreludebpl.1158:31| :skolemid |621| :no-pattern (type k@@4) :no-pattern (U_2_int k@@4) :no-pattern (U_2_bool k@@4) )))))) :qid |DafnyPreludebpl.1156:21| :skolemid |622| :pattern ( (|Map#Domain| m@@12)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13)))) (let ((U@@7 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42))) :qid |DafnyPreludebpl.1161:31| :skolemid |623| :no-pattern (type v@@42) :no-pattern (U_2_int v@@42) :no-pattern (U_2_bool v@@42) )))))) :qid |DafnyPreludebpl.1159:21| :skolemid |624| :pattern ( (|Map#Values| m@@13)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) )))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14)))) (let ((U@@8 (MapTypeInv0 (type m@@14)))) (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43))))) :qid |DafnyPreludebpl.1164:31| :skolemid |625| :no-pattern (type k@@5) :no-pattern (type v@@43) :no-pattern (U_2_int k@@5) :no-pattern (U_2_bool k@@5) :no-pattern (U_2_int v@@43) :no-pattern (U_2_bool v@@43) )))))) :qid |DafnyPreludebpl.1162:21| :skolemid |626| :pattern ( (|Map#Items| m@@14)) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))))) :qid |DafnyPreludebpl.1166:21| :skolemid |627| :pattern ( (|Set#Card| (|Map#Domain| m@@15))) )))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16)))) (let ((U@@10 (MapTypeInv0 (type m@@16)))) (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))))) :qid |DafnyPreludebpl.1169:21| :skolemid |628| :pattern ( (|Set#Card| (|Map#Values| m@@16))) )))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17)))) (let ((U@@11 (MapTypeInv0 (type m@@17)))) (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))))) :qid |DafnyPreludebpl.1172:21| :skolemid |629| :pattern ( (|Set#Card| (|Map#Items| m@@17))) )))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44))) (let ((U@@12 (MapTypeInv0 (type m@@18)))) (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :qid |DafnyPreludebpl.1185:10| :skolemid |630| :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5)) )))))) :qid |DafnyPreludebpl.1183:20| :skolemid |631| :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44)) )))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@103)) )) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@104)) ))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :qid |DafnyPreludebpl.1204:15| :skolemid |632| :pattern ( (MapType0Select (|Map#Items| m@@19) item)) )))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))) :qid |DafnyPreludebpl.1212:21| :skolemid |633| :pattern ( (let ((U@@13 (type u@@6))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))) )))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@14 (MapType0TypeInv0 (type arg0@@105)))) (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52)))) (let ((U@@15 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)))) :qid |DafnyPreludebpl.1217:21| :skolemid |634| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53)))) (let ((U@@16 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)))) :qid |DafnyPreludebpl.1220:21| :skolemid |635| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))) :qid |DafnyPreludebpl.1226:11| :skolemid |636| :no-pattern (type bx@@24) :no-pattern (U_2_int bx@@24) :no-pattern (U_2_bool bx@@24) ))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :qid |DafnyPreludebpl.1223:15| :skolemid |637| :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) )))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5))) (let ((U@@17 (type arg1@@46))) (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) )))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45))) (let ((U@@18 (type u@@7))) (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))))) :qid |DafnyPreludebpl.1237:21| :skolemid |638| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) )))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46))) (let ((U@@19 (type u@@8))) (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))))) :qid |DafnyPreludebpl.1243:21| :skolemid |639| :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) )))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47))) (let ((U@@20 (type u@@9))) (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))))) :qid |DafnyPreludebpl.1245:21| :skolemid |640| :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) )))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107)))) (let ((U@@21 (MapTypeInv0 (type arg0@@107)))) (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21)))) :qid |funType:Map#Merge| :pattern ( (|Map#Merge| arg0@@107 arg1@@47)) )))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23)))) (let ((U@@22 (MapTypeInv0 (type m@@23)))) (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))))) :qid |DafnyPreludebpl.1250:21| :skolemid |641| :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25))) )))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24)))) (let ((U@@23 (type u@@10))) (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))))) :qid |DafnyPreludebpl.1253:21| :skolemid |642| :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) )))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108)))) (let ((U@@24 (MapTypeInv0 (type arg0@@108)))) (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24)))) :qid |funType:Map#Subtract| :pattern ( (|Map#Subtract| arg0@@108 arg1@@48)) )))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25)))) (let ((U@@25 (MapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))))) :qid |DafnyPreludebpl.1260:21| :skolemid |643| :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45))) )))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26)))) (let ((U@@26 (type u@@11))) (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))))) :qid |DafnyPreludebpl.1263:21| :skolemid |644| :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11)) )))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27)))) (let ((U@@27 (MapTypeInv0 (type m@@27)))) (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :qid |DafnyPreludebpl.1272:35| :skolemid |645| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPreludebpl.1273:35| :skolemid |646| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) ))))))) :qid |DafnyPreludebpl.1270:21| :skolemid |647| :pattern ( (|Map#Equal| m@@27 |m'|)) )))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28)))) (let ((U@@28 (MapTypeInv0 (type m@@28)))) (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)))) :qid |DafnyPreludebpl.1275:21| :skolemid |648| :pattern ( (|Map#Equal| m@@28 |m'@@0|)) )))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29)))) (let ((U@@29 (MapTypeInv0 (type m@@29)))) (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :qid |DafnyPreludebpl.1282:38| :skolemid |649| :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43)) )))))) :qid |DafnyPreludebpl.1280:21| :skolemid |650| :pattern ( (|Map#Disjoint| m@@29 |m'@@1|)) )))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@30 V@@30)) )))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30)))) (let ((U@@31 (IMapTypeInv0 (type m@@30)))) (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6))) :qid |DafnyPreludebpl.1298:32| :skolemid |651| :no-pattern (type k@@6) :no-pattern (U_2_int k@@6) :no-pattern (U_2_bool k@@6) )))))) :qid |DafnyPreludebpl.1296:21| :skolemid |652| :pattern ( (|IMap#Domain| m@@30)) )))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31)))) (let ((U@@32 (IMapTypeInv0 (type m@@31)))) (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48))) :qid |DafnyPreludebpl.1301:32| :skolemid |653| :no-pattern (type v@@48) :no-pattern (U_2_int v@@48) :no-pattern (U_2_bool v@@48) )))))) :qid |DafnyPreludebpl.1299:21| :skolemid |654| :pattern ( (|IMap#Values| m@@31)) )))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32)))) (let ((U@@33 (IMapTypeInv0 (type m@@32)))) (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49))))) :qid |DafnyPreludebpl.1304:32| :skolemid |655| :no-pattern (type k@@7) :no-pattern (type v@@49) :no-pattern (U_2_int k@@7) :no-pattern (U_2_bool k@@7) :no-pattern (U_2_int v@@49) :no-pattern (U_2_bool v@@49) )))))) :qid |DafnyPreludebpl.1302:21| :skolemid |656| :pattern ( (|IMap#Items| m@@32)) )))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33)))) (let ((U@@34 (IMapTypeInv0 (type m@@33)))) (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34)))))) :qid |DafnyPreludebpl.1306:21| :skolemid |657| :pattern ( (|IMap#Domain| m@@33)) )))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34)))) (let ((U@@35 (IMapTypeInv0 (type m@@34)))) (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35)))))) :qid |DafnyPreludebpl.1309:21| :skolemid |658| :pattern ( (|IMap#Values| m@@34)) )))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35)))) (let ((U@@36 (IMapTypeInv0 (type m@@35)))) (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))))) :qid |DafnyPreludebpl.1312:21| :skolemid |659| :pattern ( (|IMap#Items| m@@35)) )))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50))) (let ((U@@37 (IMapTypeInv0 (type m@@36)))) (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :qid |DafnyPreludebpl.1325:10| :skolemid |660| :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14)) :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14)) )))))) :qid |DafnyPreludebpl.1323:20| :skolemid |661| :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50)) )))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :qid |DafnyPreludebpl.1340:15| :skolemid |662| :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0)) )))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))) :qid |DafnyPreludebpl.1347:21| :skolemid |663| :pattern ( (let ((U@@38 (type u@@15))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))) )))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49)))) (let ((U@@39 (MapType0TypeInv0 (type arg0@@109)))) (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55)))) (let ((U@@40 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)))) :qid |DafnyPreludebpl.1352:21| :skolemid |664| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56)))) (let ((U@@41 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)))) :qid |DafnyPreludebpl.1355:21| :skolemid |665| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6))) :qid |DafnyPreludebpl.1361:11| :skolemid |666| :no-pattern (type bx@@25) :no-pattern (U_2_int bx@@25) :no-pattern (U_2_bool bx@@25) ))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :qid |DafnyPreludebpl.1358:15| :skolemid |667| :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) )))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7))) (let ((U@@42 (type arg1@@50))) (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) )))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51))) (let ((U@@43 (type u@@16))) (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))))) :qid |DafnyPreludebpl.1371:21| :skolemid |668| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) )))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39)))) (let ((U@@44 (IMapTypeInv0 (type m@@39)))) (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :qid |DafnyPreludebpl.1382:36| :skolemid |669| :no-pattern (type u@@17) :no-pattern (U_2_int u@@17) :no-pattern (U_2_bool u@@17) )) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :qid |DafnyPreludebpl.1383:35| :skolemid |670| :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) ))))))) :qid |DafnyPreludebpl.1380:21| :skolemid |671| :pattern ( (|IMap#Equal| m@@39 |m'@@2|)) )))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40)))) (let ((U@@45 (IMapTypeInv0 (type m@@40)))) (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)))) :qid |DafnyPreludebpl.1385:21| :skolemid |672| :pattern ( (|IMap#Equal| m@@40 |m'@@3|)) )))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111)))) (let ((U@@46 (IMapTypeInv0 (type arg0@@111)))) (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46)))) :qid |funType:IMap#Merge| :pattern ( (|IMap#Merge| arg0@@111 arg1@@51)) )))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41)))) (let ((U@@47 (IMapTypeInv0 (type m@@41)))) (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))))) :qid |DafnyPreludebpl.1391:21| :skolemid |673| :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) )))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42)))) (let ((U@@48 (type u@@19))) (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))))) :qid |DafnyPreludebpl.1394:21| :skolemid |674| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19)) )))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112)))) (let ((U@@49 (IMapTypeInv0 (type arg0@@112)))) (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49)))) :qid |funType:IMap#Subtract| :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52)) )))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43)))) (let ((U@@50 (IMapTypeInv0 (type m@@43)))) (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))))) :qid |DafnyPreludebpl.1401:21| :skolemid |675| :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) )))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44)))) (let ((U@@51 (type u@@20))) (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))))) :qid |DafnyPreludebpl.1404:21| :skolemid |676| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20)) )))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :qid |DafnyPreludebpl.1413:30| :skolemid |677| :pattern ( (INTERNAL_add_boogie x@@42 y@@12)) )))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :qid |DafnyPreludebpl.1414:30| :skolemid |678| :pattern ( (INTERNAL_sub_boogie x@@43 y@@13)) )))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :qid |DafnyPreludebpl.1415:30| :skolemid |679| :pattern ( (INTERNAL_mul_boogie x@@44 y@@14)) )))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :qid |DafnyPreludebpl.1416:30| :skolemid |680| :pattern ( (INTERNAL_div_boogie x@@45 y@@15)) )))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :qid |DafnyPreludebpl.1417:30| :skolemid |681| :pattern ( (INTERNAL_mod_boogie x@@46 y@@16)) )))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :qid |DafnyPreludebpl.1418:51| :skolemid |682| :pattern ( (INTERNAL_lt_boogie x@@47 y@@17)) )))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :qid |DafnyPreludebpl.1419:51| :skolemid |683| :pattern ( (INTERNAL_le_boogie x@@48 y@@18)) )))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19)) :qid |DafnyPreludebpl.1420:51| :skolemid |684| :pattern ( (INTERNAL_gt_boogie x@@49 y@@19)) )))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20)) :qid |DafnyPreludebpl.1421:51| :skolemid |685| :pattern ( (INTERNAL_ge_boogie x@@50 y@@20)) )))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :qid |DafnyPreludebpl.1423:14| :skolemid |686| :pattern ( (Mul x@@51 y@@21)) )))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :qid |DafnyPreludebpl.1424:14| :skolemid |687| :pattern ( (Div x@@52 y@@22)) )))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :qid |DafnyPreludebpl.1425:14| :skolemid |688| :pattern ( (Mod x@@53 y@@23)) )))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :qid |DafnyPreludebpl.1426:14| :skolemid |689| :pattern ( (Add x@@54 y@@24)) )))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :qid |DafnyPreludebpl.1427:14| :skolemid |690| :pattern ( (Sub x@@55 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPreludebpl.1468:15| :skolemid |691| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPreludebpl.1473:15| :skolemid |692| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPreludebpl.1478:15| :skolemid |693| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (TagFamily arg0@@113)) TyTagFamilyType) :qid |funType:TagFamily| :pattern ( (TagFamily arg0@@113)) )))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@26)) bx@@26) ($Is ($Unbox intType bx@@26) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($IsBox bx@@26 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@27)) bx@@27) ($Is ($Unbox refType bx@@27) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsBox bx@@27 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |698| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsBox bx@@28 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :qid |unknown.0:0| :skolemid |702| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.array? arg0@@114)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@114)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.array? _System.array$arg)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@115)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@115)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.array? _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@29) BoxType)) ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) (Tclass._System.array? _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |705| :pattern ( ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (dtype arg0@@116)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@116)) )))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :qid |unknown.0:0| :skolemid |706| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2)) )))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :qid |unknown.0:0| :skolemid |707| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3)) )))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :qid |unknown.0:0| :skolemid |708| :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) )))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :qid |unknown.0:0| :skolemid |709| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)) )))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |710| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6)) )))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |711| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array arg0@@117)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@117)) )))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |712| :pattern ( (Tclass._System.array _System.array$arg@@8)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@118)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@118)) )))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :qid |unknown.0:0| :skolemid |713| :pattern ( (Tclass._System.array _System.array$arg@@9)) )))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array _System.array$arg@@10)))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) )))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :qid |unknown.0:0| :skolemid |715| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) )))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6)) )))
(assert (forall ((arg0@@119 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) )))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :qid |unknown.0:0| :skolemid |717| :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@120)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |718| :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) )))
(assert (forall ((arg0@@121 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@121)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@121)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :qid |unknown.0:0| :skolemid |719| :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@31)) bx@@31) ($Is ($Unbox HandleTypeType bx@@31) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@122 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@122 arg1@@54 arg2@@8)) 24) :qid |ctor:MapType2Type| )) (forall ((arg0@@123 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@123 arg1@@55 arg2@@9)) arg0@@123) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@123 arg1@@55 arg2@@9)) ))) (forall ((arg0@@124 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@124 arg1@@56 arg2@@10)) arg1@@56) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@124 arg1@@56 arg2@@10)) ))) (forall ((arg0@@125 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@125 arg1@@57 arg2@@11)) arg2@@11) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@125 arg1@@57 arg2@@11)) ))) (forall ((arg0@@126 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@58 arg2@@12)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@58 arg2@@12)) ))) (forall ((arg0@@127 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1))) (let ((aVar1@@2 (type arg2@@13))) (let ((aVar0@@0 (type arg1@@59))) (= (type (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) ))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45)))) (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@128 arg1@@60 arg2@@14)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@128 arg1@@60 arg2@@14)) ))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@1 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@1 bx0))) :qid |unknown.0:0| :skolemid |721| :pattern ( (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0)) )))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@2 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@2 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :qid |unknown.0:0| :skolemid |722| :pattern ( (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) )))
(assert (forall ((arg0@@129 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@3 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@32) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@3 bx0@@1) bx@@32)))) :qid |unknown.0:0| :skolemid |723| :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) )))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld)))) :qid |unknown.0:0| :skolemid |724| :no-pattern (type o@@44) :no-pattern (type fld) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :qid |unknown.0:0| :skolemid |725| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) )))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0)))) :qid |unknown.0:0| :skolemid |726| :no-pattern (type o@@45) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) )))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@46) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) )))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@47) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) )))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3)))) :qid |unknown.0:0| :skolemid |732| :no-pattern (type o@@48) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) )))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4)))) :qid |unknown.0:0| :skolemid |734| :no-pattern (type o@@49) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) )))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@4 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@4) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |736| :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@4)) :pattern ( (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8)) )))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@5 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9))) :qid |unknown.0:0| :skolemid |737| :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@5)) :pattern ( (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9)) )))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :qid |DafnyPreludebpl.545:12| :skolemid |738| :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) )))) :qid |unknown.0:0| :skolemid |739| :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) )))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@33 T@U) ) (!  (=> (and (= (type bx@@33) BoxType) ($IsBox bx@@33 u0)) ($IsBox bx@@33 t0@@28)) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@33 u0)) :pattern ( ($IsBox bx@@33 t0@@28)) ))) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 t1@@19)) ($IsBox bx@@34 u1)) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@34 t1@@19)) :pattern ( ($IsBox bx@@34 u1)) )))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) )))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |743| :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9))) )))) :qid |unknown.0:0| :skolemid |744| :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) )))) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :qid |unknown.0:0| :skolemid |746| :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ))) :qid |unknown.0:0| :skolemid |747| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) )))
(assert (forall ((arg0@@131 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@131)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@131)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :qid |unknown.0:0| :skolemid |749| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :qid |unknown.0:0| :skolemid |750| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@35 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@35) BoxType)) ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@35)) bx@@35) ($Is ($Unbox HandleTypeType bx@@35) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) )))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |752| :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) ))))) :qid |unknown.0:0| :skolemid |753| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) )))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :qid |unknown.0:0| :skolemid |754| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7)) )))
(assert (forall ((arg0@@133 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@134)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@134)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :qid |unknown.0:0| :skolemid |756| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) )))
(assert (forall ((arg0@@135 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@135)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@135)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) )))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :qid |unknown.0:0| :skolemid |759| :no-pattern (type |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) ))))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) )))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :qid |unknown.0:0| :skolemid |761| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@136)) )))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :qid |unknown.0:0| :skolemid |762| :pattern ( (Tclass._System.___hFunc0 |#$R@@15|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@137)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@137)) )))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :qid |unknown.0:0| :skolemid |763| :pattern ( (Tclass._System.___hFunc0 |#$R@@16|)) )))
(assert (forall ((|#$R@@17| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$R@@17|)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) )))
(assert  (and (forall ((arg0@@138 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@138 arg1@@64 arg2@@16)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@138 arg1@@64 arg2@@16)) )) (forall ((arg0@@139 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@139 arg1@@65 arg2@@17)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@139 arg1@@65 arg2@@17)) ))))
(assert (forall ((t0@@31 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@6))) :qid |unknown.0:0| :skolemid |765| :pattern ( (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2))) )))
(assert (forall ((t0@@32 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@7))) (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) :qid |unknown.0:0| :skolemid |766| :pattern ( (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) )))
(assert (forall ((arg0@@140 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@140 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@140 arg1@@66 arg2@@18)) )))
(assert (forall ((t0@@33 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@38) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@8) bx@@38)))) :qid |unknown.0:0| :skolemid |767| :pattern ( (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) )))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@50) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) )))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@51) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) )))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@52) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) )))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8)))) :qid |unknown.0:0| :skolemid |774| :no-pattern (type o@@53) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) )))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9)))) :qid |unknown.0:0| :skolemid |776| :no-pattern (type o@@54) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) )))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10)))) :qid |unknown.0:0| :skolemid |778| :no-pattern (type o@@55) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :qid |unknown.0:0| :skolemid |779| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) )))
(assert (forall ((t0@@40 T@U) (heap@@9 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@9) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@9 f@@23) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |780| :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@9)) :pattern ( (Reads0 t0@@40 heap@@9 f@@23)) )))
(assert (forall ((t0@@41 T@U) (heap@@10 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@10) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@10 f@@24))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@10)) :pattern ( (Requires0 t0@@41 heap@@10 f@@24)) )))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :qid |DafnyPreludebpl.545:12| :skolemid |782| :pattern ( (Apply0 t0@@42 h@@30 f@@25)) )))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) )))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@39 T@U) ) (!  (=> (and (= (type bx@@39) BoxType) ($IsBox bx@@39 t0@@43)) ($IsBox bx@@39 u0@@0)) :qid |unknown.0:0| :skolemid |784| :pattern ( ($IsBox bx@@39 t0@@43)) :pattern ( ($IsBox bx@@39 u0@@0)) )))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :qid |unknown.0:0| :skolemid |785| :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) )))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :qid |unknown.0:0| :skolemid |786| :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13))) ))))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) )))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@141)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@141)) )))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :qid |unknown.0:0| :skolemid |789| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|)) )))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@142)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@142)) )))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|)) )))
(assert (forall ((|#$R@@20| T@U) (bx@@40 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@40) BoxType)) ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :qid |unknown.0:0| :skolemid |791| :pattern ( ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) )))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |792| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) )))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@143)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@143)) )))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@144)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@144)) )))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :qid |unknown.0:0| :skolemid |795| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|)) )))
(assert (forall ((|#$R@@25| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) )))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) )))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :qid |unknown.0:0| :skolemid |798| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@42 T@U) ) (!  (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@42)) bx@@42) ($Is ($Unbox refType bx@@42) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |799| :pattern ( ($IsBox bx@@42 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |800| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :qid |unknown.0:0| :skolemid |801| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |802| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :qid |unknown.0:0| :skolemid |803| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@145 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@146)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :qid |unknown.0:0| :skolemid |805| :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) )))
(assert (forall ((arg0@@147 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@147)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@147)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |806| :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@148)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :qid |unknown.0:0| :skolemid |807| :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@149 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@149 arg1@@68 arg2@@20 arg3@@3)) 25) :qid |ctor:MapType3Type| )) (forall ((arg0@@150 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) arg0@@150) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) ))) (forall ((arg0@@151 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) ))) (forall ((arg0@@152 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) ))) (forall ((arg0@@153 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) ))) (forall ((arg0@@154 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@154)))) (= (type (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) ))) (forall ((arg0@@155 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@1 (type arg1@@74))) (= (type (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49)))) (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@156 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@157 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@157 arg1@@76 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@157 arg1@@76 arg2@@28)) ))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@11 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@11 bx0@@13 bx1))) :qid |unknown.0:0| :skolemid |809| :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@12 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@12 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@13 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@44) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@15 bx1@@1) bx@@44)))) :qid |unknown.0:0| :skolemid |811| :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11)))) :qid |unknown.0:0| :skolemid |812| :no-pattern (type o@@56) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :qid |unknown.0:0| :skolemid |813| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12)))) :qid |unknown.0:0| :skolemid |814| :no-pattern (type o@@57) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :qid |unknown.0:0| :skolemid |815| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@58) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14)))) :qid |unknown.0:0| :skolemid |818| :no-pattern (type o@@59) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :qid |unknown.0:0| :skolemid |819| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) )))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@60) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) )))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@61) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) )))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |824| :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@14)) :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8)) )))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9))) :qid |unknown.0:0| :skolemid |825| :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@15)) :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |826| :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) )))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@45 T@U) ) (!  (=> (and (= (type bx@@45) BoxType) ($IsBox bx@@45 u0@@1)) ($IsBox bx@@45 t0@@58)) :qid |unknown.0:0| :skolemid |828| :pattern ( ($IsBox bx@@45 u0@@1)) :pattern ( ($IsBox bx@@45 t0@@58)) ))) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u1@@0)) ($IsBox bx@@46 t1@@34)) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsBox bx@@46 u1@@0)) :pattern ( ($IsBox bx@@46 t1@@34)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 t2@@11)) ($IsBox bx@@47 u2)) :qid |unknown.0:0| :skolemid |830| :pattern ( ($IsBox bx@@47 t2@@11)) :pattern ( ($IsBox bx@@47 u2)) )))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :qid |unknown.0:0| :skolemid |832| :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17))) )))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) )))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) )))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :qid |unknown.0:0| :skolemid |835| :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38)) )))
(assert (forall ((arg0@@159 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@160)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@160)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@161)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@161)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |839| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@162)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |840| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@48 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@48) BoxType)) ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@48)) bx@@48) ($Is ($Unbox HandleTypeType bx@@48) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |841| :pattern ( ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |842| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) ))))) :qid |unknown.0:0| :skolemid |843| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :qid |unknown.0:0| :skolemid |844| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)) )))
(assert (forall ((arg0@@163 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@164)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :qid |unknown.0:0| :skolemid |846| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@165)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@165)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |847| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@166)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |848| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :qid |unknown.0:0| :skolemid |850| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))))) :qid |unknown.0:0| :skolemid |851| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@167 T@U) (arg1@@80 T@U) (arg2@@32 T@U) (arg3@@12 T@U) (arg4@@4 T@U) (arg5@@1 T@U) ) (! (= (type (Tclass._System.___hFunc5 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4 arg5@@1)) TyType) :qid |funType:Tclass._System.___hFunc5| :pattern ( (Tclass._System.___hFunc5 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4 arg5@@1)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$T3| T@U) (|#$T4| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$T4|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc5 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$T4| |#$R@@47|)) Tagclass._System.___hFunc5) (= (TagFamily (Tclass._System.___hFunc5 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$T4| |#$R@@47|)) |tytagFamily$_#Func5|))) :qid |unknown.0:0| :skolemid |853| :pattern ( (Tclass._System.___hFunc5 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$T4| |#$R@@47|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hFunc5_0 arg0@@168)) TyType) :qid |funType:Tclass._System.___hFunc5_0| :pattern ( (Tclass._System.___hFunc5_0 arg0@@168)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$T3@@0| T@U) (|#$T4@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$T4@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc5_0 (Tclass._System.___hFunc5 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$T4@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hFunc5 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$T4@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@169 T@U) ) (! (= (type (Tclass._System.___hFunc5_1 arg0@@169)) TyType) :qid |funType:Tclass._System.___hFunc5_1| :pattern ( (Tclass._System.___hFunc5_1 arg0@@169)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$T3@@1| T@U) (|#$T4@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$T4@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc5_1 (Tclass._System.___hFunc5 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$T4@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hFunc5 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$T4@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc5_2 arg0@@170)) TyType) :qid |funType:Tclass._System.___hFunc5_2| :pattern ( (Tclass._System.___hFunc5_2 arg0@@170)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$T3@@2| T@U) (|#$T4@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$T4@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc5_2 (Tclass._System.___hFunc5 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$T4@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hFunc5 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$T4@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc5_3 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc5_3| :pattern ( (Tclass._System.___hFunc5_3 arg0@@171)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$T3@@3| T@U) (|#$T4@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$T4@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc5_3 (Tclass._System.___hFunc5 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$T4@@3| |#$R@@51|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hFunc5 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$T4@@3| |#$R@@51|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc5_4 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc5_4| :pattern ( (Tclass._System.___hFunc5_4 arg0@@172)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$T3@@4| T@U) (|#$T4@@4| T@U) (|#$R@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$T4@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (Tclass._System.___hFunc5_4 (Tclass._System.___hFunc5 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$T4@@4| |#$R@@52|)) |#$T4@@4|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hFunc5 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$T4@@4| |#$R@@52|)) )))
(assert (forall ((arg0@@173 T@U) ) (! (= (type (Tclass._System.___hFunc5_5 arg0@@173)) TyType) :qid |funType:Tclass._System.___hFunc5_5| :pattern ( (Tclass._System.___hFunc5_5 arg0@@173)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$T3@@5| T@U) (|#$T4@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$T4@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (Tclass._System.___hFunc5_5 (Tclass._System.___hFunc5 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$T4@@5| |#$R@@53|)) |#$R@@53|)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Tclass._System.___hFunc5 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$T4@@5| |#$R@@53|)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$T3@@6| T@U) (|#$T4@@6| T@U) (|#$R@@54| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$T4@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hFunc5 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$T4@@6| |#$R@@54|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hFunc5 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$T4@@6| |#$R@@54|)))) :qid |unknown.0:0| :skolemid |860| :pattern ( ($IsBox bx@@50 (Tclass._System.___hFunc5 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$T4@@6| |#$R@@54|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@174 T@T) (arg1@@81 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@5 T@T) (arg5@@2 T@T) (arg6@@1 T@T) ) (! (= (Ctor (MapType4Type arg0@@174 arg1@@81 arg2@@33 arg3@@13 arg4@@5 arg5@@2 arg6@@1)) 26) :qid |ctor:MapType4Type| )) (forall ((arg0@@175 T@T) (arg1@@82 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@6 T@T) (arg5@@3 T@T) (arg6@@2 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@175 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@3 arg6@@2)) arg0@@175) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@175 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@3 arg6@@2)) ))) (forall ((arg0@@176 T@T) (arg1@@83 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@7 T@T) (arg5@@4 T@T) (arg6@@3 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@176 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@4 arg6@@3)) arg1@@83) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@176 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@4 arg6@@3)) ))) (forall ((arg0@@177 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@8 T@T) (arg5@@5 T@T) (arg6@@4 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@177 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@5 arg6@@4)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@177 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@5 arg6@@4)) ))) (forall ((arg0@@178 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@9 T@T) (arg5@@6 T@T) (arg6@@5 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@178 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@6 arg6@@5)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@178 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@6 arg6@@5)) ))) (forall ((arg0@@179 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@10 T@T) (arg5@@7 T@T) (arg6@@6 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@179 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@7 arg6@@6)) arg4@@10) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@179 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@7 arg6@@6)) ))) (forall ((arg0@@180 T@T) (arg1@@87 T@T) (arg2@@39 T@T) (arg3@@19 T@T) (arg4@@11 T@T) (arg5@@8 T@T) (arg6@@7 T@T) ) (! (= (MapType4TypeInv5 (MapType4Type arg0@@180 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@8 arg6@@7)) arg5@@8) :qid |typeInv:MapType4TypeInv5| :pattern ( (MapType4Type arg0@@180 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@8 arg6@@7)) ))) (forall ((arg0@@181 T@T) (arg1@@88 T@T) (arg2@@40 T@T) (arg3@@20 T@T) (arg4@@12 T@T) (arg5@@9 T@T) (arg6@@8 T@T) ) (! (= (MapType4TypeInv6 (MapType4Type arg0@@181 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@9 arg6@@8)) arg6@@8) :qid |typeInv:MapType4TypeInv6| :pattern ( (MapType4Type arg0@@181 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@9 arg6@@8)) ))) (forall ((arg0@@182 T@U) (arg1@@89 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@13 T@U) (arg5@@10 T@U) (arg6@@9 T@U) ) (! (let ((aVar6 (MapType4TypeInv6 (type arg0@@182)))) (= (type (MapType4Select arg0@@182 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@10 arg6@@9)) aVar6)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@182 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@10 arg6@@9)) ))) (forall ((arg0@@183 T@U) (arg1@@90 T@U) (arg2@@42 T@U) (arg3@@22 T@U) (arg4@@14 T@U) (arg5@@11 T@U) (arg6@@10 T@U) (arg7 T@U) ) (! (let ((aVar6@@0 (type arg7))) (let ((aVar5 (type arg6@@10))) (let ((aVar4 (type arg5@@11))) (let ((aVar3@@2 (type arg4@@14))) (let ((aVar2@@3 (type arg3@@22))) (let ((aVar1@@4 (type arg2@@42))) (let ((aVar0@@2 (type arg1@@90))) (= (type (MapType4Store arg0@@183 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@11 arg6@@10 arg7)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4 aVar5 aVar6@@0))))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@183 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@11 arg6@@10 arg7)) ))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (x4 T@U) (x5 T@U) (val@@15 T@U) ) (! (let ((aVar6@@1 (MapType4TypeInv6 (type m@@54)))) (=> (= (type val@@15) aVar6@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 x4 x5 val@@15) x0@@14 x1@@8 x2@@4 x3 x4 x5) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (x4@@0 T@U) (x5@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) (y4 T@U) (y5 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 x4@@0 x5@@0 val@@16) y0@@10 y1@@6 y2@@3 y3 y4 y5) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3 y4 y5))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (x4@@1 T@U) (x5@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) (y4@@0 T@U) (y5@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 x4@@1 x5@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0 y4@@0 y5@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0 y4@@0 y5@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (x4@@2 T@U) (x5@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) (y4@@1 T@U) (y5@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 x4@@2 x5@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1 y4@@1 y5@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1 y4@@1 y5@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (x4@@3 T@U) (x5@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) (y4@@2 T@U) (y5@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 x4@@3 x5@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2 y4@@2 y5@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2 y4@@2 y5@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (x4@@4 T@U) (x5@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) (y4@@3 T@U) (y5@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 x4@@4 x5@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3 y4@@3 y5@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3 y4@@3 y5@@3))) :qid |mapAx1:MapType4Select:4| :weight 0 ))) (forall ((val@@21 T@U) (m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4@@5 T@U) (x5@@5 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4@@4 T@U) (y5@@4 T@U) ) (!  (or (= x5@@5 y5@@4) (= (MapType4Select (MapType4Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4@@5 x5@@5 val@@21) y0@@15 y1@@11 y2@@8 y3@@4 y4@@4 y5@@4) (MapType4Select m@@60 y0@@15 y1@@11 y2@@8 y3@@4 y4@@4 y5@@4))) :qid |mapAx1:MapType4Select:5| :weight 0 ))) (forall ((val@@22 T@U) (m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@6 T@U) (x5@@6 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@5 T@U) (y5@@5 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 x4@@6 x5@@6 val@@22) y0@@16 y1@@12 y2@@9 y3@@5 y4@@5 y5@@5) (MapType4Select m@@61 y0@@16 y1@@12 y2@@9 y3@@5 y4@@5 y5@@5))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@184 T@U) (arg1@@91 T@U) (arg2@@43 T@U) (arg3@@23 T@U) (arg4@@15 T@U) (arg5@@12 T@U) (arg6@@11 T@U) (arg7@@0 T@U) (arg8 T@U) (arg9 T@U) (arg10 T@U) (arg11 T@U) (arg12 T@U) ) (! (= (type (Apply5 arg0@@184 arg1@@91 arg2@@43 arg3@@23 arg4@@15 arg5@@12 arg6@@11 arg7@@0 arg8 arg9 arg10 arg11 arg12)) BoxType) :qid |funType:Apply5| :pattern ( (Apply5 arg0@@184 arg1@@91 arg2@@43 arg3@@23 arg4@@15 arg5@@12 arg6@@11 arg7@@0 arg8 arg9 arg10 arg11 arg12)) ))) (forall ((arg0@@185 T@U) (arg1@@92 T@U) (arg2@@44 T@U) ) (! (= (type (Handle5 arg0@@185 arg1@@92 arg2@@44)) HandleTypeType) :qid |funType:Handle5| :pattern ( (Handle5 arg0@@185 arg1@@92 arg2@@44)) ))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (t4 T@U) (t5 T@U) (heap@@16 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) (bx3 T@U) (bx4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type t4) TyType)) (= (type t5) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (type bx3) BoxType)) (= (type bx4) BoxType)) (= (Apply5 t0@@61 t1@@37 t2@@14 t3 t4 t5 heap@@16 (Handle5 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3 bx4) (MapType4Select h@@39 heap@@16 bx0@@27 bx1@@13 bx2 bx3 bx4))) :qid |unknown.0:0| :skolemid |861| :pattern ( (Apply5 t0@@61 t1@@37 t2@@14 t3 t4 t5 heap@@16 (Handle5 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3 bx4)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (t4@@0 T@U) (t5@@0 T@U) (heap@@17 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) (bx3@@0 T@U) (bx4@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type t4@@0) TyType)) (= (type t5@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (= (type bx3@@0) BoxType)) (= (type bx4@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@17 bx0@@28 bx1@@14 bx2@@0 bx3@@0 bx4@@0))) (Requires5 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 t5@@0 heap@@17 (Handle5 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0 bx4@@0)) :qid |unknown.0:0| :skolemid |862| :pattern ( (Requires5 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 t5@@0 heap@@17 (Handle5 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0 bx4@@0)) )))
(assert (forall ((arg0@@186 T@U) (arg1@@93 T@U) (arg2@@45 T@U) (arg3@@24 T@U) (arg4@@16 T@U) (arg5@@13 T@U) (arg6@@12 T@U) (arg7@@1 T@U) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 T@U) (arg11@@0 T@U) (arg12@@0 T@U) ) (! (= (type (Reads5 arg0@@186 arg1@@93 arg2@@45 arg3@@24 arg4@@16 arg5@@13 arg6@@12 arg7@@1 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads5| :pattern ( (Reads5 arg0@@186 arg1@@93 arg2@@45 arg3@@24 arg4@@16 arg5@@13 arg6@@12 arg7@@1 arg8@@0 arg9@@0 arg10@@0 arg11@@0 arg12@@0)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (t4@@1 T@U) (t5@@1 T@U) (heap@@18 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx3@@1 T@U) (bx4@@1 T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type t4@@1) TyType)) (= (type t5@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx4@@1) BoxType)) (= (type bx@@51) BoxType)) (= (U_2_bool (MapType0Select (Reads5 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 t5@@1 heap@@18 (Handle5 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1 bx4@@1) bx@@51)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@29 bx1@@15 bx2@@1 bx3@@1 bx4@@1) bx@@51)))) :qid |unknown.0:0| :skolemid |863| :pattern ( (MapType0Select (Reads5 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 t5@@1 heap@@18 (Handle5 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1 bx4@@1) bx@@51)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (t4@@2 T@U) (t5@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) (bx3@@2 T@U) (bx4@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type t4@@2) TyType)) (= (type t5@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (= (type bx3@@2) BoxType)) (= (type bx4@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($IsBox bx3@@2 t3@@2)) ($IsBox bx4@@2 t4@@2)) ($Is f@@41 (Tclass._System.___hFunc5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2 bx4@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17)))) :qid |unknown.0:0| :skolemid |864| :no-pattern (type o@@62) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2 bx4@@2) (Reads5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2 bx4@@2))) :qid |unknown.0:0| :skolemid |865| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads5 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 t5@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2 bx4@@2)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (t4@@3 T@U) (t5@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) (bx3@@3 T@U) (bx4@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type t4@@3) TyType)) (= (type t5@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (= (type bx3@@3) BoxType)) (= (type bx4@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($IsBox bx3@@3 t3@@3)) ($IsBox bx4@@3 t4@@3)) ($Is f@@42 (Tclass._System.___hFunc5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3 bx4@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18)))) :qid |unknown.0:0| :skolemid |866| :no-pattern (type o@@63) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3 bx4@@3) (Reads5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3 bx4@@3))) :qid |unknown.0:0| :skolemid |867| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads5 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 t5@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3 bx4@@3)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (t4@@4 T@U) (t5@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) (bx3@@4 T@U) (bx4@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type t4@@4) TyType)) (= (type t5@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (= (type bx3@@4) BoxType)) (= (type bx4@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($IsBox bx3@@4 t3@@4)) ($IsBox bx4@@4 t4@@4)) ($Is f@@43 (Tclass._System.___hFunc5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4 bx4@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19)))) :qid |unknown.0:0| :skolemid |868| :no-pattern (type o@@64) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (= (Requires5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4 bx4@@4) (Requires5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4 bx4@@4))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires5 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 t5@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4 bx4@@4)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (t4@@5 T@U) (t5@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) (bx3@@5 T@U) (bx4@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type t4@@5) TyType)) (= (type t5@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (= (type bx3@@5) BoxType)) (= (type bx4@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($IsBox bx3@@5 t3@@5)) ($IsBox bx4@@5 t4@@5)) ($Is f@@44 (Tclass._System.___hFunc5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5 bx4@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20)))) :qid |unknown.0:0| :skolemid |870| :no-pattern (type o@@65) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (= (Requires5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5 bx4@@5) (Requires5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5 bx4@@5))) :qid |unknown.0:0| :skolemid |871| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires5 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 t5@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5 bx4@@5)) )))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (t4@@6 T@U) (t5@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) (bx3@@6 T@U) (bx4@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type t4@@6) TyType)) (= (type t5@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (= (type bx3@@6) BoxType)) (= (type bx4@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($IsBox bx3@@6 t3@@6)) ($IsBox bx4@@6 t4@@6)) ($Is f@@45 (Tclass._System.___hFunc5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6 bx4@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21)))) :qid |unknown.0:0| :skolemid |872| :no-pattern (type o@@66) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6 bx4@@6) (Apply5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6 bx4@@6))) :qid |unknown.0:0| :skolemid |873| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply5 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 t5@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6 bx4@@6)) )))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (t4@@7 T@U) (t5@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) (bx3@@7 T@U) (bx4@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type t4@@7) TyType)) (= (type t5@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (= (type bx3@@7) BoxType)) (= (type bx4@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($IsBox bx3@@7 t3@@7)) ($IsBox bx4@@7 t4@@7)) ($Is f@@46 (Tclass._System.___hFunc5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7 bx4@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22)))) :qid |unknown.0:0| :skolemid |874| :no-pattern (type o@@67) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7 bx4@@7) (Apply5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7 bx4@@7))) :qid |unknown.0:0| :skolemid |875| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply5 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 t5@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7 bx4@@7)) )))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (t4@@8 T@U) (t5@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) (bx3@@8 T@U) (bx4@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type t4@@8) TyType)) (= (type t5@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (= (type bx3@@8) BoxType)) (= (type bx4@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($IsBox bx3@@8 t3@@8)) ($IsBox bx4@@8 t4@@8)) ($Is f@@47 (Tclass._System.___hFunc5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8))))) (= (|Set#Equal| (Reads5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8 bx4@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8 bx4@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |876| :pattern ( (Reads5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8 bx4@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads5 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 t5@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8 bx4@@8)) )))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (t4@@9 T@U) (t5@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) (bx3@@9 T@U) (bx4@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type t4@@9) TyType)) (= (type t5@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (= (type bx3@@9) BoxType)) (= (type bx4@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($IsBox bx3@@9 t3@@9)) ($IsBox bx4@@9 t4@@9)) ($Is f@@48 (Tclass._System.___hFunc5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9)))) (|Set#Equal| (Reads5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9) (|Set#Empty| BoxType)))) (= (Requires5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9) (Requires5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9))) :qid |unknown.0:0| :skolemid |877| :pattern ( (Requires5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires5 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 t5@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9 bx4@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) (t4@@10 T@U) (t5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= (type t4@@10) TyType)) (= (type t5@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) (bx3@@10 T@U) (bx4@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (= (type bx3@@10) BoxType)) (= (type bx4@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25)) ($IsBox bx3@@10 t3@@10)) ($IsBox bx4@@10 t4@@10))) (Requires5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10 bx4@@10))) ($IsBox (Apply5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10 bx4@@10) t5@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |878| :pattern ( (Apply5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10 bx4@@10)) )))) :qid |unknown.0:0| :skolemid |879| :pattern ( ($Is f@@49 (Tclass._System.___hFunc5 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 t5@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (t4@@11 T@U) (t5@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) (u4 T@U) (u5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type t4@@11) TyType)) (= (type t5@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (= (type u4) TyType)) (= (type u5) TyType)) (and (and (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc5 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11 t5@@11)) (forall ((bx@@52 T@U) ) (!  (=> (and (= (type bx@@52) BoxType) ($IsBox bx@@52 u0@@2)) ($IsBox bx@@52 t0@@73)) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@52 u0@@2)) :pattern ( ($IsBox bx@@52 t0@@73)) ))) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u1@@1)) ($IsBox bx@@53 t1@@49)) :qid |unknown.0:0| :skolemid |881| :pattern ( ($IsBox bx@@53 u1@@1)) :pattern ( ($IsBox bx@@53 t1@@49)) ))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u2@@0)) ($IsBox bx@@54 t2@@26)) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@54 u2@@0)) :pattern ( ($IsBox bx@@54 t2@@26)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 u3)) ($IsBox bx@@55 t3@@11)) :qid |unknown.0:0| :skolemid |883| :pattern ( ($IsBox bx@@55 u3)) :pattern ( ($IsBox bx@@55 t3@@11)) ))) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 u4)) ($IsBox bx@@56 t4@@11)) :qid |unknown.0:0| :skolemid |884| :pattern ( ($IsBox bx@@56 u4)) :pattern ( ($IsBox bx@@56 t4@@11)) ))) (forall ((bx@@57 T@U) ) (!  (=> (and (= (type bx@@57) BoxType) ($IsBox bx@@57 t5@@11)) ($IsBox bx@@57 u5)) :qid |unknown.0:0| :skolemid |885| :pattern ( ($IsBox bx@@57 t5@@11)) :pattern ( ($IsBox bx@@57 u5)) )))) ($Is f@@50 (Tclass._System.___hFunc5 u0@@2 u1@@1 u2@@0 u3 u4 u5))) :qid |unknown.0:0| :skolemid |886| :pattern ( ($Is f@@50 (Tclass._System.___hFunc5 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11 t5@@11)) ($Is f@@50 (Tclass._System.___hFunc5 u0@@2 u1@@1 u2@@0 u3 u4 u5))) )))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (t4@@12 T@U) (t5@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type t4@@12) TyType)) (= (type t5@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) (bx3@@11 T@U) (bx4@@11 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (= (type bx3@@11) BoxType)) (= (type bx4@@11) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (and ($IsBox bx3@@11 t3@@12) ($IsAllocBox bx3@@11 t3@@12 h@@43))) (and ($IsBox bx4@@11 t4@@12) ($IsAllocBox bx4@@11 t4@@12 h@@43))) (Requires5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc)))) :qid |unknown.0:0| :skolemid |887| :pattern ( (MapType0Select (Reads5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11) ($Box r@@21))) )))) :qid |unknown.0:0| :skolemid |888| :pattern ( (Apply5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11)) :pattern ( (Reads5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11 bx4@@11)) )))) :qid |unknown.0:0| :skolemid |889| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc5 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 t5@@12) h@@43)) )))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (t4@@13 T@U) (t5@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type t4@@13) TyType)) (= (type t5@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) (bx3@@12 T@U) (bx4@@12 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (= (type bx3@@12) BoxType)) (= (type bx4@@12) BoxType)) (=> (and (and (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) ($IsAllocBox bx3@@12 t3@@13 h@@44)) ($IsAllocBox bx4@@12 t4@@13 h@@44)) (Requires5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12 bx4@@12)) ($IsAllocBox (Apply5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12 bx4@@12) t5@@13 h@@44))) :qid |unknown.0:0| :skolemid |890| :pattern ( (Apply5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12 bx4@@12)) ))) :qid |unknown.0:0| :skolemid |891| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc5 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 t5@@13) h@@44)) )))
(assert (forall ((arg0@@187 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@17 T@U) (arg5@@14 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5 arg0@@187 arg1@@94 arg2@@46 arg3@@25 arg4@@17 arg5@@14)) TyType) :qid |funType:Tclass._System.___hPartialFunc5| :pattern ( (Tclass._System.___hPartialFunc5 arg0@@187 arg1@@94 arg2@@46 arg3@@25 arg4@@17 arg5@@14)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$T3@@7| T@U) (|#$T4@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$T4@@7|) TyType)) (= (type |#$R@@55|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc5 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$T4@@7| |#$R@@55|)) Tagclass._System.___hPartialFunc5) (= (TagFamily (Tclass._System.___hPartialFunc5 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$T4@@7| |#$R@@55|)) |tytagFamily$_#PartialFunc5|))) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$T4@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_0 arg0@@188)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_0| :pattern ( (Tclass._System.___hPartialFunc5_0 arg0@@188)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$T3@@8| T@U) (|#$T4@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$T4@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc5_0 (Tclass._System.___hPartialFunc5 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$T4@@8| |#$R@@56|)) |#$T0@@43|)) :qid |unknown.0:0| :skolemid |893| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$T4@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_1 arg0@@189)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_1| :pattern ( (Tclass._System.___hPartialFunc5_1 arg0@@189)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$T3@@9| T@U) (|#$T4@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$T4@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc5_1 (Tclass._System.___hPartialFunc5 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$T4@@9| |#$R@@57|)) |#$T1@@28|)) :qid |unknown.0:0| :skolemid |894| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$T4@@9| |#$R@@57|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_2 arg0@@190)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_2| :pattern ( (Tclass._System.___hPartialFunc5_2 arg0@@190)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$T3@@10| T@U) (|#$T4@@10| T@U) (|#$R@@58| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$T4@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (Tclass._System.___hPartialFunc5_2 (Tclass._System.___hPartialFunc5 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$T4@@10| |#$R@@58|)) |#$T2@@10|)) :qid |unknown.0:0| :skolemid |895| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$T4@@10| |#$R@@58|)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_3 arg0@@191)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_3| :pattern ( (Tclass._System.___hPartialFunc5_3 arg0@@191)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$T3@@11| T@U) (|#$T4@@11| T@U) (|#$R@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$T4@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (Tclass._System.___hPartialFunc5_3 (Tclass._System.___hPartialFunc5 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$T4@@11| |#$R@@59|)) |#$T3@@11|)) :qid |unknown.0:0| :skolemid |896| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$T4@@11| |#$R@@59|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_4 arg0@@192)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_4| :pattern ( (Tclass._System.___hPartialFunc5_4 arg0@@192)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$T3@@12| T@U) (|#$T4@@12| T@U) (|#$R@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$T4@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (Tclass._System.___hPartialFunc5_4 (Tclass._System.___hPartialFunc5 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$T4@@12| |#$R@@60|)) |#$T4@@12|)) :qid |unknown.0:0| :skolemid |897| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$T4@@12| |#$R@@60|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_5 arg0@@193)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_5| :pattern ( (Tclass._System.___hPartialFunc5_5 arg0@@193)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$T3@@13| T@U) (|#$T4@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$T4@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tclass._System.___hPartialFunc5_5 (Tclass._System.___hPartialFunc5 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$T4@@13| |#$R@@61|)) |#$R@@61|)) :qid |unknown.0:0| :skolemid |898| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$T4@@13| |#$R@@61|)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$T3@@14| T@U) (|#$T4@@14| T@U) (|#$R@@62| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$T4@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hPartialFunc5 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$T4@@14| |#$R@@62|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hPartialFunc5 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$T4@@14| |#$R@@62|)))) :qid |unknown.0:0| :skolemid |899| :pattern ( ($IsBox bx@@58 (Tclass._System.___hPartialFunc5 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$T4@@14| |#$R@@62|))) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$T3@@15| T@U) (|#$T4@@15| T@U) (|#$R@@63| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$T4@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc5 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$T4@@15| |#$R@@63|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc5 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$T4@@15| |#$R@@63|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) (|x2#0| T@U) (|x3#0| T@U) (|x4#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (= (type |x2#0|) BoxType)) (= (type |x3#0|) BoxType)) (= (type |x4#0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@3| |#$T0@@50|) ($IsBox |x1#0@@1| |#$T1@@34|)) ($IsBox |x2#0| |#$T2@@15|)) ($IsBox |x3#0| |#$T3@@15|)) ($IsBox |x4#0| |#$T4@@15|))) (|Set#Equal| (Reads5 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$T4@@15| |#$R@@63| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1| |x2#0| |x3#0| |x4#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |900| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@1|) :no-pattern (type |x2#0|) :no-pattern (type |x3#0|) :no-pattern (type |x4#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) :no-pattern (U_2_int |x4#0|) :no-pattern (U_2_bool |x4#0|) ))))) :qid |unknown.0:0| :skolemid |901| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc5 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$T4@@15| |#$R@@63|))) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$T3@@16| T@U) (|#$T4@@16| T@U) (|#$R@@64| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$T4@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc5 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$T4@@16| |#$R@@64|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc5 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$T4@@16| |#$R@@64|) $h@@14))) :qid |unknown.0:0| :skolemid |902| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc5 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$T4@@16| |#$R@@64|) $h@@14)) )))
(assert (forall ((arg0@@194 T@U) (arg1@@95 T@U) (arg2@@47 T@U) (arg3@@26 T@U) (arg4@@18 T@U) (arg5@@15 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5 arg0@@194 arg1@@95 arg2@@47 arg3@@26 arg4@@18 arg5@@15)) TyType) :qid |funType:Tclass._System.___hTotalFunc5| :pattern ( (Tclass._System.___hTotalFunc5 arg0@@194 arg1@@95 arg2@@47 arg3@@26 arg4@@18 arg5@@15)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$T3@@17| T@U) (|#$T4@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$T4@@17|) TyType)) (= (type |#$R@@65|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc5 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$T4@@17| |#$R@@65|)) Tagclass._System.___hTotalFunc5) (= (TagFamily (Tclass._System.___hTotalFunc5 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$T4@@17| |#$R@@65|)) |tytagFamily$_#TotalFunc5|))) :qid |unknown.0:0| :skolemid |903| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$T4@@17| |#$R@@65|)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_0 arg0@@195)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_0| :pattern ( (Tclass._System.___hTotalFunc5_0 arg0@@195)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$T3@@18| T@U) (|#$T4@@18| T@U) (|#$R@@66| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$T4@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (Tclass._System.___hTotalFunc5_0 (Tclass._System.___hTotalFunc5 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$T4@@18| |#$R@@66|)) |#$T0@@53|)) :qid |unknown.0:0| :skolemid |904| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$T4@@18| |#$R@@66|)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_1 arg0@@196)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_1| :pattern ( (Tclass._System.___hTotalFunc5_1 arg0@@196)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$T3@@19| T@U) (|#$T4@@19| T@U) (|#$R@@67| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$T4@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (Tclass._System.___hTotalFunc5_1 (Tclass._System.___hTotalFunc5 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$T4@@19| |#$R@@67|)) |#$T1@@38|)) :qid |unknown.0:0| :skolemid |905| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$T4@@19| |#$R@@67|)) )))
(assert (forall ((arg0@@197 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_2 arg0@@197)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_2| :pattern ( (Tclass._System.___hTotalFunc5_2 arg0@@197)) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$T3@@20| T@U) (|#$T4@@20| T@U) (|#$R@@68| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$T4@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (Tclass._System.___hTotalFunc5_2 (Tclass._System.___hTotalFunc5 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$T4@@20| |#$R@@68|)) |#$T2@@20|)) :qid |unknown.0:0| :skolemid |906| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$T4@@20| |#$R@@68|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_3 arg0@@198)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_3| :pattern ( (Tclass._System.___hTotalFunc5_3 arg0@@198)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3@@21| T@U) (|#$T4@@21| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$T4@@21|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tclass._System.___hTotalFunc5_3 (Tclass._System.___hTotalFunc5 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$T4@@21| |#$R@@69|)) |#$T3@@21|)) :qid |unknown.0:0| :skolemid |907| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$T4@@21| |#$R@@69|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_4 arg0@@199)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_4| :pattern ( (Tclass._System.___hTotalFunc5_4 arg0@@199)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@22| T@U) (|#$T4@@22| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$T4@@22|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hTotalFunc5_4 (Tclass._System.___hTotalFunc5 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$T4@@22| |#$R@@70|)) |#$T4@@22|)) :qid |unknown.0:0| :skolemid |908| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$T4@@22| |#$R@@70|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_5 arg0@@200)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_5| :pattern ( (Tclass._System.___hTotalFunc5_5 arg0@@200)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@23| T@U) (|#$T4@@23| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$T4@@23|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hTotalFunc5_5 (Tclass._System.___hTotalFunc5 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$T4@@23| |#$R@@71|)) |#$R@@71|)) :qid |unknown.0:0| :skolemid |909| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$T4@@23| |#$R@@71|)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@24| T@U) (|#$T4@@24| T@U) (|#$R@@72| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$T4@@24|) TyType)) (= (type |#$R@@72|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hTotalFunc5 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4@@24| |#$R@@72|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hTotalFunc5 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4@@24| |#$R@@72|)))) :qid |unknown.0:0| :skolemid |910| :pattern ( ($IsBox bx@@59 (Tclass._System.___hTotalFunc5 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4@@24| |#$R@@72|))) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@25| T@U) (|#$T4@@25| T@U) (|#$R@@73| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$T4@@25|) TyType)) (= (type |#$R@@73|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@25| |#$R@@73|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@25| |#$R@@73|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) (|x2#0@@0| T@U) (|x3#0@@0| T@U) (|x4#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (= (type |x2#0@@0|) BoxType)) (= (type |x3#0@@0|) BoxType)) (= (type |x4#0@@0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@4| |#$T0@@60|) ($IsBox |x1#0@@2| |#$T1@@44|)) ($IsBox |x2#0@@0| |#$T2@@25|)) ($IsBox |x3#0@@0| |#$T3@@25|)) ($IsBox |x4#0@@0| |#$T4@@25|))) (Requires5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@25| |#$R@@73| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2| |x2#0@@0| |x3#0@@0| |x4#0@@0|)) :qid |unknown.0:0| :skolemid |911| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@2|) :no-pattern (type |x2#0@@0|) :no-pattern (type |x3#0@@0|) :no-pattern (type |x4#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) :no-pattern (U_2_int |x4#0@@0|) :no-pattern (U_2_bool |x4#0@@0|) ))))) :qid |unknown.0:0| :skolemid |912| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc5 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@25| |#$R@@73|))) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@26| T@U) (|#$T4@@26| T@U) (|#$R@@74| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$T4@@26|) TyType)) (= (type |#$R@@74|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc5 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@26| |#$R@@74|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc5 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@26| |#$R@@74|) $h@@15))) :qid |unknown.0:0| :skolemid |913| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc5 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@26| |#$R@@74|) $h@@15)) )))
(assert (forall ((arg0@@201 T@U) (arg1@@96 T@U) (arg2@@48 T@U) (arg3@@27 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@201 arg1@@96 arg2@@48 arg3@@27)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@201 arg1@@96 arg2@@48 arg3@@27)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$R@@75|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) |tytagFamily$_#Func3|))) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$R@@75|)) )))
(assert (forall ((arg0@@202 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@202)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@202)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) |#$T0@@63|)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$R@@76|)) )))
(assert (forall ((arg0@@203 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@203)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@203)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|)) |#$T1@@48|)) :qid |unknown.0:0| :skolemid |916| :pattern ( (Tclass._System.___hFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$R@@77|)) )))
(assert (forall ((arg0@@204 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@204)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@204)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) |#$T2@@30|)) :qid |unknown.0:0| :skolemid |917| :pattern ( (Tclass._System.___hFunc3 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$R@@78|)) )))
(assert (forall ((arg0@@205 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@205)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@205)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) |#$R@@79|)) :qid |unknown.0:0| :skolemid |918| :pattern ( (Tclass._System.___hFunc3 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$R@@79|)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$R@@80| T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$R@@80|) TyType)) (= (type bx@@60) BoxType)) ($IsBox bx@@60 (Tclass._System.___hFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|))) (and (= ($Box ($Unbox HandleTypeType bx@@60)) bx@@60) ($Is ($Unbox HandleTypeType bx@@60) (Tclass._System.___hFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|)))) :qid |unknown.0:0| :skolemid |919| :pattern ( ($IsBox bx@@60 (Tclass._System.___hFunc3 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$R@@80|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@206 T@T) (arg1@@97 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@19 T@T) ) (! (= (Ctor (MapType5Type arg0@@206 arg1@@97 arg2@@49 arg3@@28 arg4@@19)) 27) :qid |ctor:MapType5Type| )) (forall ((arg0@@207 T@T) (arg1@@98 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@20 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@207 arg1@@98 arg2@@50 arg3@@29 arg4@@20)) arg0@@207) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@207 arg1@@98 arg2@@50 arg3@@29 arg4@@20)) ))) (forall ((arg0@@208 T@T) (arg1@@99 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@21 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@208 arg1@@99 arg2@@51 arg3@@30 arg4@@21)) arg1@@99) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@208 arg1@@99 arg2@@51 arg3@@30 arg4@@21)) ))) (forall ((arg0@@209 T@T) (arg1@@100 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@22 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@209 arg1@@100 arg2@@52 arg3@@31 arg4@@22)) arg2@@52) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@209 arg1@@100 arg2@@52 arg3@@31 arg4@@22)) ))) (forall ((arg0@@210 T@T) (arg1@@101 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@23 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@210 arg1@@101 arg2@@53 arg3@@32 arg4@@23)) arg3@@32) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@210 arg1@@101 arg2@@53 arg3@@32 arg4@@23)) ))) (forall ((arg0@@211 T@T) (arg1@@102 T@T) (arg2@@54 T@T) (arg3@@33 T@T) (arg4@@24 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@211 arg1@@102 arg2@@54 arg3@@33 arg4@@24)) arg4@@24) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@211 arg1@@102 arg2@@54 arg3@@33 arg4@@24)) ))) (forall ((arg0@@212 T@U) (arg1@@103 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@25 T@U) ) (! (let ((aVar4@@0 (MapType5TypeInv4 (type arg0@@212)))) (= (type (MapType5Select arg0@@212 arg1@@103 arg2@@55 arg3@@34 arg4@@25)) aVar4@@0)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@212 arg1@@103 arg2@@55 arg3@@34 arg4@@25)) ))) (forall ((arg0@@213 T@U) (arg1@@104 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@26 T@U) (arg5@@16 T@U) ) (! (let ((aVar4@@1 (type arg5@@16))) (let ((aVar3@@3 (type arg4@@26))) (let ((aVar2@@4 (type arg3@@35))) (let ((aVar1@@5 (type arg2@@56))) (let ((aVar0@@3 (type arg1@@104))) (= (type (MapType5Store arg0@@213 arg1@@104 arg2@@56 arg3@@35 arg4@@26 arg5@@16)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@1))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@213 arg1@@104 arg2@@56 arg3@@35 arg4@@26 arg5@@16)) ))) (forall ((m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (val@@23 T@U) ) (! (let ((aVar4@@2 (MapType5TypeInv4 (type m@@62)))) (=> (= (type val@@23) aVar4@@2) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 val@@23) x0@@22 x1@@16 x2@@12 x3@@7) val@@23))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) ) (!  (or (= x0@@23 y0@@17) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 val@@24) y0@@17 y1@@13 y2@@10 y3@@6) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) ) (!  (or (= x1@@18 y1@@14) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 val@@25) y0@@18 y1@@14 y2@@11 y3@@7) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) ) (!  (or (= x2@@15 y2@@12) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 val@@26) y0@@19 y1@@15 y2@@12 y3@@8) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) ) (!  (or (= x3@@11 y3@@9) (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 val@@27) y0@@20 y1@@16 y2@@13 y3@@9) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@28 T@U) (m@@67 T@U) (x0@@27 T@U) (x1@@21 T@U) (x2@@17 T@U) (x3@@12 T@U) (y0@@21 T@U) (y1@@17 T@U) (y2@@14 T@U) (y3@@10 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@67 x0@@27 x1@@21 x2@@17 x3@@12 val@@28) y0@@21 y1@@17 y2@@14 y3@@10) (MapType5Select m@@67 y0@@21 y1@@17 y2@@14 y3@@10))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@214 T@U) (arg1@@105 T@U) (arg2@@57 T@U) (arg3@@36 T@U) (arg4@@27 T@U) (arg5@@17 T@U) (arg6@@13 T@U) (arg7@@2 T@U) (arg8@@1 T@U) ) (! (= (type (Apply3 arg0@@214 arg1@@105 arg2@@57 arg3@@36 arg4@@27 arg5@@17 arg6@@13 arg7@@2 arg8@@1)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@214 arg1@@105 arg2@@57 arg3@@36 arg4@@27 arg5@@17 arg6@@13 arg7@@2 arg8@@1)) ))) (forall ((arg0@@215 T@U) (arg1@@106 T@U) (arg2@@58 T@U) ) (! (= (type (Handle3 arg0@@215 arg1@@106 arg2@@58)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@215 arg1@@106 arg2@@58)) ))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (heap@@21 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (Apply3 t0@@76 t1@@52 t2@@29 t3@@14 heap@@21 (Handle3 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13) (MapType5Select h@@45 heap@@21 bx0@@41 bx1@@27 bx2@@13))) :qid |unknown.0:0| :skolemid |920| :pattern ( (Apply3 t0@@76 t1@@52 t2@@29 t3@@14 heap@@21 (Handle3 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (heap@@22 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@22 bx0@@42 bx1@@28 bx2@@14))) (Requires3 t0@@77 t1@@53 t2@@30 t3@@15 heap@@22 (Handle3 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14)) :qid |unknown.0:0| :skolemid |921| :pattern ( (Requires3 t0@@77 t1@@53 t2@@30 t3@@15 heap@@22 (Handle3 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14)) )))
(assert (forall ((arg0@@216 T@U) (arg1@@107 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@28 T@U) (arg5@@18 T@U) (arg6@@14 T@U) (arg7@@3 T@U) (arg8@@2 T@U) ) (! (= (type (Reads3 arg0@@216 arg1@@107 arg2@@59 arg3@@37 arg4@@28 arg5@@18 arg6@@14 arg7@@3 arg8@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@216 arg1@@107 arg2@@59 arg3@@37 arg4@@28 arg5@@18 arg6@@14 arg7@@3 arg8@@2)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (heap@@23 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx@@61) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@78 t1@@54 t2@@31 t3@@16 heap@@23 (Handle3 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15) bx@@61)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@43 bx1@@29 bx2@@15) bx@@61)))) :qid |unknown.0:0| :skolemid |922| :pattern ( (MapType0Select (Reads3 t0@@78 t1@@54 t2@@31 t3@@16 heap@@23 (Handle3 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15) bx@@61)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($Is f@@53 (Tclass._System.___hFunc3 t0@@79 t1@@55 t2@@32 t3@@17)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23)))) :qid |unknown.0:0| :skolemid |923| :no-pattern (type o@@68) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16) (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16))) :qid |unknown.0:0| :skolemid |924| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads3 t0@@79 t1@@55 t2@@32 t3@@17 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($Is f@@54 (Tclass._System.___hFunc3 t0@@80 t1@@56 t2@@33 t3@@18)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24)))) :qid |unknown.0:0| :skolemid |925| :no-pattern (type o@@69) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17) (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17))) :qid |unknown.0:0| :skolemid |926| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads3 t0@@80 t1@@56 t2@@33 t3@@18 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($Is f@@55 (Tclass._System.___hFunc3 t0@@81 t1@@57 t2@@34 t3@@19)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads3 t0@@81 t1@@57 t2@@34 t3@@19 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25)))) :qid |unknown.0:0| :skolemid |927| :no-pattern (type o@@70) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (= (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18) (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18))) :qid |unknown.0:0| :skolemid |928| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires3 t0@@81 t1@@57 t2@@34 t3@@19 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($Is f@@56 (Tclass._System.___hFunc3 t0@@82 t1@@58 t2@@35 t3@@20)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26)))) :qid |unknown.0:0| :skolemid |929| :no-pattern (type o@@71) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (= (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19) (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19))) :qid |unknown.0:0| :skolemid |930| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires3 t0@@82 t1@@58 t2@@35 t3@@20 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19)) )))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($Is f@@57 (Tclass._System.___hFunc3 t0@@83 t1@@59 t2@@36 t3@@21)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@83 t1@@59 t2@@36 t3@@21 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27)))) :qid |unknown.0:0| :skolemid |931| :no-pattern (type o@@72) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20) (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20))) :qid |unknown.0:0| :skolemid |932| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply3 t0@@83 t1@@59 t2@@36 t3@@21 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20)) )))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($Is f@@58 (Tclass._System.___hFunc3 t0@@84 t1@@60 t2@@37 t3@@22)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28)))) :qid |unknown.0:0| :skolemid |933| :no-pattern (type o@@73) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21) (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21))) :qid |unknown.0:0| :skolemid |934| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply3 t0@@84 t1@@60 t2@@37 t3@@22 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21)) )))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($Is f@@59 (Tclass._System.___hFunc3 t0@@85 t1@@61 t2@@38 t3@@23))))) (= (|Set#Equal| (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |935| :pattern ( (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22) ($IsGoodHeap heap@@24)) :pattern ( (Reads3 t0@@85 t1@@61 t2@@38 t3@@23 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22)) )))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($Is f@@60 (Tclass._System.___hFunc3 t0@@86 t1@@62 t2@@39 t3@@24)))) (|Set#Equal| (Reads3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) (|Set#Empty| BoxType)))) (= (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23))) :qid |unknown.0:0| :skolemid |936| :pattern ( (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23) ($IsGoodHeap heap@@25)) :pattern ( (Requires3 t0@@86 t1@@62 t2@@39 t3@@24 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23)) )))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc3 t0@@87 t1@@63 t2@@40 t3@@25)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) ) (!  (=> (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40))) (Requires3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24))) ($IsBox (Apply3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24) t3@@25)) :qid |DafnyPreludebpl.545:12| :skolemid |937| :pattern ( (Apply3 t0@@87 t1@@63 t2@@40 t3@@25 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24)) )))) :qid |unknown.0:0| :skolemid |938| :pattern ( ($Is f@@61 (Tclass._System.___hFunc3 t0@@87 t1@@63 t2@@40 t3@@25))) )))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc3 t0@@88 t1@@64 t2@@41 t3@@26)) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u0@@3)) ($IsBox bx@@62 t0@@88)) :qid |unknown.0:0| :skolemid |939| :pattern ( ($IsBox bx@@62 u0@@3)) :pattern ( ($IsBox bx@@62 t0@@88)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u1@@2)) ($IsBox bx@@63 t1@@64)) :qid |unknown.0:0| :skolemid |940| :pattern ( ($IsBox bx@@63 u1@@2)) :pattern ( ($IsBox bx@@63 t1@@64)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 u2@@1)) ($IsBox bx@@64 t2@@41)) :qid |unknown.0:0| :skolemid |941| :pattern ( ($IsBox bx@@64 u2@@1)) :pattern ( ($IsBox bx@@64 t2@@41)) ))) (forall ((bx@@65 T@U) ) (!  (=> (and (= (type bx@@65) BoxType) ($IsBox bx@@65 t3@@26)) ($IsBox bx@@65 u3@@0)) :qid |unknown.0:0| :skolemid |942| :pattern ( ($IsBox bx@@65 t3@@26)) :pattern ( ($IsBox bx@@65 u3@@0)) )))) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) :qid |unknown.0:0| :skolemid |943| :pattern ( ($Is f@@62 (Tclass._System.___hFunc3 t0@@88 t1@@64 t2@@41 t3@@26)) ($Is f@@62 (Tclass._System.___hFunc3 u0@@3 u1@@2 u2@@1 u3@@0))) )))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@89 t1@@65 t2@@42 t3@@27) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) ) (!  (=> (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (=> (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (Requires3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |944| :pattern ( (MapType0Select (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |945| :pattern ( (Apply3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) :pattern ( (Reads3 t0@@89 t1@@65 t2@@42 t3@@27 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25)) )))) :qid |unknown.0:0| :skolemid |946| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc3 t0@@89 t1@@65 t2@@42 t3@@27) h@@49)) )))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@90 t1@@66 t2@@43 t3@@28) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) ) (!  (=> (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) (Requires3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26)) ($IsAllocBox (Apply3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26) t3@@28 h@@50))) :qid |unknown.0:0| :skolemid |947| :pattern ( (Apply3 t0@@90 t1@@66 t2@@43 t3@@28 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26)) ))) :qid |unknown.0:0| :skolemid |948| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc3 t0@@90 t1@@66 t2@@43 t3@@28) h@@50)) )))
(assert (forall ((arg0@@217 T@U) (arg1@@108 T@U) (arg2@@60 T@U) (arg3@@38 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@217 arg1@@108 arg2@@60 arg3@@38)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@217 arg1@@108 arg2@@60 arg3@@38)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$R@@81|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) |tytagFamily$_#PartialFunc3|))) :qid |unknown.0:0| :skolemid |949| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$R@@81|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@218)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@218)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$R@@82| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$R@@82|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) |#$T0@@69|)) :qid |unknown.0:0| :skolemid |950| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$R@@82|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@219)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@219)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$R@@83| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$R@@83|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|)) |#$T1@@54|)) :qid |unknown.0:0| :skolemid |951| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$R@@83|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@220)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@220)) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$R@@84| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$R@@84|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|)) |#$T2@@36|)) :qid |unknown.0:0| :skolemid |952| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$R@@84|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@221)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@221)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$R@@85|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|)) |#$R@@85|)) :qid |unknown.0:0| :skolemid |953| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$R@@85|)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$R@@86| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$R@@86|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hPartialFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hPartialFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|)))) :qid |unknown.0:0| :skolemid |954| :pattern ( ($IsBox bx@@66 (Tclass._System.___hPartialFunc3 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$R@@86|))) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$R@@87| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$R@@87|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@5| |#$T0@@74|) ($IsBox |x1#0@@3| |#$T1@@58|)) ($IsBox |x2#0@@1| |#$T2@@39|))) (|Set#Equal| (Reads3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0@@1|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |955| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) ))))) :qid |unknown.0:0| :skolemid |956| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc3 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$R@@87|))) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$R@@88| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$R@@88|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|) $h@@16))) :qid |unknown.0:0| :skolemid |957| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc3 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$R@@88|) $h@@16)) )))
(assert (forall ((arg0@@222 T@U) (arg1@@109 T@U) (arg2@@61 T@U) (arg3@@39 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@222 arg1@@109 arg2@@61 arg3@@39)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@222 arg1@@109 arg2@@61 arg3@@39)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$R@@89|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) |tytagFamily$_#TotalFunc3|))) :qid |unknown.0:0| :skolemid |958| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$R@@89|)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@223)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@223)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) |#$T0@@77|)) :qid |unknown.0:0| :skolemid |959| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$R@@90|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@224)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@224)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$R@@91| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$R@@91|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|)) |#$T1@@62|)) :qid |unknown.0:0| :skolemid |960| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$R@@91|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@225)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@225)) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$R@@92| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$R@@92|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|)) |#$T2@@44|)) :qid |unknown.0:0| :skolemid |961| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$R@@92|)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@226)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@226)) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$R@@93| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$R@@93|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|)) |#$R@@93|)) :qid |unknown.0:0| :skolemid |962| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$R@@93|)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@46| T@U) (|#$R@@94| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$R@@94|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hTotalFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$R@@94|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hTotalFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$R@@94|)))) :qid |unknown.0:0| :skolemid |963| :pattern ( ($IsBox bx@@67 (Tclass._System.___hTotalFunc3 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$R@@94|))) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@47| T@U) (|#$R@@95| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$R@@95|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$R@@95|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc3 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$R@@95|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@6| |#$T0@@82|) ($IsBox |x1#0@@4| |#$T1@@66|)) ($IsBox |x2#0@@2| |#$T2@@47|))) (Requires3 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$R@@95| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |964| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))))) :qid |unknown.0:0| :skolemid |965| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc3 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$R@@95|))) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@48| T@U) (|#$R@@96| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$R@@96|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$R@@96|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc3 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$R@@96|) $h@@17))) :qid |unknown.0:0| :skolemid |966| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc3 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$R@@96|) $h@@17)) )))
(assert (forall ((arg0@@227 T@U) (arg1@@110 T@U) (arg2@@62 T@U) (arg3@@40 T@U) (arg4@@29 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@227 arg1@@110 arg2@@62 arg3@@40 arg4@@29)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@227 arg1@@110 arg2@@62 arg3@@40 arg4@@29)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@49| T@U) (|#$T3@@27| T@U) (|#$R@@97| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$R@@97|) TyType)) (and (= (Tag (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@27| |#$R@@97|)) Tagclass._System.___hFunc4) (= (TagFamily (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@27| |#$R@@97|)) |tytagFamily$_#Func4|))) :qid |unknown.0:0| :skolemid |967| :pattern ( (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@27| |#$R@@97|)) )))
(assert (forall ((arg0@@228 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@228)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@228)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@50| T@U) (|#$T3@@28| T@U) (|#$R@@98| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$R@@98|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@28| |#$R@@98|)) |#$T0@@85|)) :qid |unknown.0:0| :skolemid |968| :pattern ( (Tclass._System.___hFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@28| |#$R@@98|)) )))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@229)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@229)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@51| T@U) (|#$T3@@29| T@U) (|#$R@@99| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$R@@99|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@29| |#$R@@99|)) |#$T1@@70|)) :qid |unknown.0:0| :skolemid |969| :pattern ( (Tclass._System.___hFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@29| |#$R@@99|)) )))
(assert (forall ((arg0@@230 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@230)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@230)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@52| T@U) (|#$T3@@30| T@U) (|#$R@@100| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$R@@100|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@30| |#$R@@100|)) |#$T2@@52|)) :qid |unknown.0:0| :skolemid |970| :pattern ( (Tclass._System.___hFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@30| |#$R@@100|)) )))
(assert (forall ((arg0@@231 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@231)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@231)) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@53| T@U) (|#$T3@@31| T@U) (|#$R@@101| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$T3@@31|) TyType)) (= (type |#$R@@101|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$R@@101|)) |#$T3@@31|)) :qid |unknown.0:0| :skolemid |971| :pattern ( (Tclass._System.___hFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@31| |#$R@@101|)) )))
(assert (forall ((arg0@@232 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@232)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@232)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@54| T@U) (|#$T3@@32| T@U) (|#$R@@102| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$T3@@32|) TyType)) (= (type |#$R@@102|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$R@@102|)) |#$R@@102|)) :qid |unknown.0:0| :skolemid |972| :pattern ( (Tclass._System.___hFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@32| |#$R@@102|)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@55| T@U) (|#$T3@@33| T@U) (|#$R@@103| T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$T3@@33|) TyType)) (= (type |#$R@@103|) TyType)) (= (type bx@@68) BoxType)) ($IsBox bx@@68 (Tclass._System.___hFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$R@@103|))) (and (= ($Box ($Unbox HandleTypeType bx@@68)) bx@@68) ($Is ($Unbox HandleTypeType bx@@68) (Tclass._System.___hFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$R@@103|)))) :qid |unknown.0:0| :skolemid |973| :pattern ( ($IsBox bx@@68 (Tclass._System.___hFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@33| |#$R@@103|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@233 T@T) (arg1@@111 T@T) (arg2@@63 T@T) (arg3@@41 T@T) (arg4@@30 T@T) (arg5@@19 T@T) ) (! (= (Ctor (MapType6Type arg0@@233 arg1@@111 arg2@@63 arg3@@41 arg4@@30 arg5@@19)) 28) :qid |ctor:MapType6Type| )) (forall ((arg0@@234 T@T) (arg1@@112 T@T) (arg2@@64 T@T) (arg3@@42 T@T) (arg4@@31 T@T) (arg5@@20 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@234 arg1@@112 arg2@@64 arg3@@42 arg4@@31 arg5@@20)) arg0@@234) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@234 arg1@@112 arg2@@64 arg3@@42 arg4@@31 arg5@@20)) ))) (forall ((arg0@@235 T@T) (arg1@@113 T@T) (arg2@@65 T@T) (arg3@@43 T@T) (arg4@@32 T@T) (arg5@@21 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@235 arg1@@113 arg2@@65 arg3@@43 arg4@@32 arg5@@21)) arg1@@113) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@235 arg1@@113 arg2@@65 arg3@@43 arg4@@32 arg5@@21)) ))) (forall ((arg0@@236 T@T) (arg1@@114 T@T) (arg2@@66 T@T) (arg3@@44 T@T) (arg4@@33 T@T) (arg5@@22 T@T) ) (! (= (MapType6TypeInv2 (MapType6Type arg0@@236 arg1@@114 arg2@@66 arg3@@44 arg4@@33 arg5@@22)) arg2@@66) :qid |typeInv:MapType6TypeInv2| :pattern ( (MapType6Type arg0@@236 arg1@@114 arg2@@66 arg3@@44 arg4@@33 arg5@@22)) ))) (forall ((arg0@@237 T@T) (arg1@@115 T@T) (arg2@@67 T@T) (arg3@@45 T@T) (arg4@@34 T@T) (arg5@@23 T@T) ) (! (= (MapType6TypeInv3 (MapType6Type arg0@@237 arg1@@115 arg2@@67 arg3@@45 arg4@@34 arg5@@23)) arg3@@45) :qid |typeInv:MapType6TypeInv3| :pattern ( (MapType6Type arg0@@237 arg1@@115 arg2@@67 arg3@@45 arg4@@34 arg5@@23)) ))) (forall ((arg0@@238 T@T) (arg1@@116 T@T) (arg2@@68 T@T) (arg3@@46 T@T) (arg4@@35 T@T) (arg5@@24 T@T) ) (! (= (MapType6TypeInv4 (MapType6Type arg0@@238 arg1@@116 arg2@@68 arg3@@46 arg4@@35 arg5@@24)) arg4@@35) :qid |typeInv:MapType6TypeInv4| :pattern ( (MapType6Type arg0@@238 arg1@@116 arg2@@68 arg3@@46 arg4@@35 arg5@@24)) ))) (forall ((arg0@@239 T@T) (arg1@@117 T@T) (arg2@@69 T@T) (arg3@@47 T@T) (arg4@@36 T@T) (arg5@@25 T@T) ) (! (= (MapType6TypeInv5 (MapType6Type arg0@@239 arg1@@117 arg2@@69 arg3@@47 arg4@@36 arg5@@25)) arg5@@25) :qid |typeInv:MapType6TypeInv5| :pattern ( (MapType6Type arg0@@239 arg1@@117 arg2@@69 arg3@@47 arg4@@36 arg5@@25)) ))) (forall ((arg0@@240 T@U) (arg1@@118 T@U) (arg2@@70 T@U) (arg3@@48 T@U) (arg4@@37 T@U) (arg5@@26 T@U) ) (! (let ((aVar5@@0 (MapType6TypeInv5 (type arg0@@240)))) (= (type (MapType6Select arg0@@240 arg1@@118 arg2@@70 arg3@@48 arg4@@37 arg5@@26)) aVar5@@0)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@240 arg1@@118 arg2@@70 arg3@@48 arg4@@37 arg5@@26)) ))) (forall ((arg0@@241 T@U) (arg1@@119 T@U) (arg2@@71 T@U) (arg3@@49 T@U) (arg4@@38 T@U) (arg5@@27 T@U) (arg6@@15 T@U) ) (! (let ((aVar5@@1 (type arg6@@15))) (let ((aVar4@@3 (type arg5@@27))) (let ((aVar3@@4 (type arg4@@38))) (let ((aVar2@@5 (type arg3@@49))) (let ((aVar1@@6 (type arg2@@71))) (let ((aVar0@@4 (type arg1@@119))) (= (type (MapType6Store arg0@@241 arg1@@119 arg2@@71 arg3@@49 arg4@@38 arg5@@27 arg6@@15)) (MapType6Type aVar0@@4 aVar1@@6 aVar2@@5 aVar3@@4 aVar4@@3 aVar5@@1)))))))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@241 arg1@@119 arg2@@71 arg3@@49 arg4@@38 arg5@@27 arg6@@15)) ))) (forall ((m@@68 T@U) (x0@@28 T@U) (x1@@22 T@U) (x2@@18 T@U) (x3@@13 T@U) (x4@@7 T@U) (val@@29 T@U) ) (! (let ((aVar5@@2 (MapType6TypeInv5 (type m@@68)))) (=> (= (type val@@29) aVar5@@2) (= (MapType6Select (MapType6Store m@@68 x0@@28 x1@@22 x2@@18 x3@@13 x4@@7 val@@29) x0@@28 x1@@22 x2@@18 x3@@13 x4@@7) val@@29))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@30 T@U) (m@@69 T@U) (x0@@29 T@U) (x1@@23 T@U) (x2@@19 T@U) (x3@@14 T@U) (x4@@8 T@U) (y0@@22 T@U) (y1@@18 T@U) (y2@@15 T@U) (y3@@11 T@U) (y4@@6 T@U) ) (!  (or (= x0@@29 y0@@22) (= (MapType6Select (MapType6Store m@@69 x0@@29 x1@@23 x2@@19 x3@@14 x4@@8 val@@30) y0@@22 y1@@18 y2@@15 y3@@11 y4@@6) (MapType6Select m@@69 y0@@22 y1@@18 y2@@15 y3@@11 y4@@6))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@31 T@U) (m@@70 T@U) (x0@@30 T@U) (x1@@24 T@U) (x2@@20 T@U) (x3@@15 T@U) (x4@@9 T@U) (y0@@23 T@U) (y1@@19 T@U) (y2@@16 T@U) (y3@@12 T@U) (y4@@7 T@U) ) (!  (or (= x1@@24 y1@@19) (= (MapType6Select (MapType6Store m@@70 x0@@30 x1@@24 x2@@20 x3@@15 x4@@9 val@@31) y0@@23 y1@@19 y2@@16 y3@@12 y4@@7) (MapType6Select m@@70 y0@@23 y1@@19 y2@@16 y3@@12 y4@@7))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@32 T@U) (m@@71 T@U) (x0@@31 T@U) (x1@@25 T@U) (x2@@21 T@U) (x3@@16 T@U) (x4@@10 T@U) (y0@@24 T@U) (y1@@20 T@U) (y2@@17 T@U) (y3@@13 T@U) (y4@@8 T@U) ) (!  (or (= x2@@21 y2@@17) (= (MapType6Select (MapType6Store m@@71 x0@@31 x1@@25 x2@@21 x3@@16 x4@@10 val@@32) y0@@24 y1@@20 y2@@17 y3@@13 y4@@8) (MapType6Select m@@71 y0@@24 y1@@20 y2@@17 y3@@13 y4@@8))) :qid |mapAx1:MapType6Select:2| :weight 0 ))) (forall ((val@@33 T@U) (m@@72 T@U) (x0@@32 T@U) (x1@@26 T@U) (x2@@22 T@U) (x3@@17 T@U) (x4@@11 T@U) (y0@@25 T@U) (y1@@21 T@U) (y2@@18 T@U) (y3@@14 T@U) (y4@@9 T@U) ) (!  (or (= x3@@17 y3@@14) (= (MapType6Select (MapType6Store m@@72 x0@@32 x1@@26 x2@@22 x3@@17 x4@@11 val@@33) y0@@25 y1@@21 y2@@18 y3@@14 y4@@9) (MapType6Select m@@72 y0@@25 y1@@21 y2@@18 y3@@14 y4@@9))) :qid |mapAx1:MapType6Select:3| :weight 0 ))) (forall ((val@@34 T@U) (m@@73 T@U) (x0@@33 T@U) (x1@@27 T@U) (x2@@23 T@U) (x3@@18 T@U) (x4@@12 T@U) (y0@@26 T@U) (y1@@22 T@U) (y2@@19 T@U) (y3@@15 T@U) (y4@@10 T@U) ) (!  (or (= x4@@12 y4@@10) (= (MapType6Select (MapType6Store m@@73 x0@@33 x1@@27 x2@@23 x3@@18 x4@@12 val@@34) y0@@26 y1@@22 y2@@19 y3@@15 y4@@10) (MapType6Select m@@73 y0@@26 y1@@22 y2@@19 y3@@15 y4@@10))) :qid |mapAx1:MapType6Select:4| :weight 0 ))) (forall ((val@@35 T@U) (m@@74 T@U) (x0@@34 T@U) (x1@@28 T@U) (x2@@24 T@U) (x3@@19 T@U) (x4@@13 T@U) (y0@@27 T@U) (y1@@23 T@U) (y2@@20 T@U) (y3@@16 T@U) (y4@@11 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@74 x0@@34 x1@@28 x2@@24 x3@@19 x4@@13 val@@35) y0@@27 y1@@23 y2@@20 y3@@16 y4@@11) (MapType6Select m@@74 y0@@27 y1@@23 y2@@20 y3@@16 y4@@11))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@242 T@U) (arg1@@120 T@U) (arg2@@72 T@U) (arg3@@50 T@U) (arg4@@39 T@U) (arg5@@28 T@U) (arg6@@16 T@U) (arg7@@4 T@U) (arg8@@3 T@U) (arg9@@1 T@U) (arg10@@1 T@U) ) (! (= (type (Apply4 arg0@@242 arg1@@120 arg2@@72 arg3@@50 arg4@@39 arg5@@28 arg6@@16 arg7@@4 arg8@@3 arg9@@1 arg10@@1)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@242 arg1@@120 arg2@@72 arg3@@50 arg4@@39 arg5@@28 arg6@@16 arg7@@4 arg8@@3 arg9@@1 arg10@@1)) ))) (forall ((arg0@@243 T@U) (arg1@@121 T@U) (arg2@@73 T@U) ) (! (= (type (Handle4 arg0@@243 arg1@@121 arg2@@73)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@243 arg1@@121 arg2@@73)) ))))
(assert (forall ((t0@@91 T@U) (t1@@67 T@U) (t2@@44 T@U) (t3@@29 T@U) (t4@@14 T@U) (heap@@26 T@U) (h@@51 T@U) (r@@26 T@U) (rd@@14 T@U) (bx0@@55 T@U) (bx1@@41 T@U) (bx2@@27 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@91) TyType) (= (type t1@@67) TyType)) (= (type t2@@44) TyType)) (= (type t3@@29) TyType)) (= (type t4@@14) TyType)) (= (type heap@@26) (MapType0Type refType MapType1Type))) (= (type h@@51) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@14) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@55) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@13) BoxType)) (= (Apply4 t0@@91 t1@@67 t2@@44 t3@@29 t4@@14 heap@@26 (Handle4 h@@51 r@@26 rd@@14) bx0@@55 bx1@@41 bx2@@27 bx3@@13) (MapType6Select h@@51 heap@@26 bx0@@55 bx1@@41 bx2@@27 bx3@@13))) :qid |unknown.0:0| :skolemid |974| :pattern ( (Apply4 t0@@91 t1@@67 t2@@44 t3@@29 t4@@14 heap@@26 (Handle4 h@@51 r@@26 rd@@14) bx0@@55 bx1@@41 bx2@@27 bx3@@13)) )))
(assert (forall ((t0@@92 T@U) (t1@@68 T@U) (t2@@45 T@U) (t3@@30 T@U) (t4@@15 T@U) (heap@@27 T@U) (h@@52 T@U) (r@@27 T@U) (rd@@15 T@U) (bx0@@56 T@U) (bx1@@42 T@U) (bx2@@28 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@92) TyType) (= (type t1@@68) TyType)) (= (type t2@@45) TyType)) (= (type t3@@30) TyType)) (= (type t4@@15) TyType)) (= (type heap@@27) (MapType0Type refType MapType1Type))) (= (type h@@52) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@15) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@56) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@14) BoxType)) (U_2_bool (MapType6Select r@@27 heap@@27 bx0@@56 bx1@@42 bx2@@28 bx3@@14))) (Requires4 t0@@92 t1@@68 t2@@45 t3@@30 t4@@15 heap@@27 (Handle4 h@@52 r@@27 rd@@15) bx0@@56 bx1@@42 bx2@@28 bx3@@14)) :qid |unknown.0:0| :skolemid |975| :pattern ( (Requires4 t0@@92 t1@@68 t2@@45 t3@@30 t4@@15 heap@@27 (Handle4 h@@52 r@@27 rd@@15) bx0@@56 bx1@@42 bx2@@28 bx3@@14)) )))
(assert (forall ((arg0@@244 T@U) (arg1@@122 T@U) (arg2@@74 T@U) (arg3@@51 T@U) (arg4@@40 T@U) (arg5@@29 T@U) (arg6@@17 T@U) (arg7@@5 T@U) (arg8@@4 T@U) (arg9@@2 T@U) (arg10@@2 T@U) ) (! (= (type (Reads4 arg0@@244 arg1@@122 arg2@@74 arg3@@51 arg4@@40 arg5@@29 arg6@@17 arg7@@5 arg8@@4 arg9@@2 arg10@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@244 arg1@@122 arg2@@74 arg3@@51 arg4@@40 arg5@@29 arg6@@17 arg7@@5 arg8@@4 arg9@@2 arg10@@2)) )))
(assert (forall ((t0@@93 T@U) (t1@@69 T@U) (t2@@46 T@U) (t3@@31 T@U) (t4@@16 T@U) (heap@@28 T@U) (h@@53 T@U) (r@@28 T@U) (rd@@16 T@U) (bx0@@57 T@U) (bx1@@43 T@U) (bx2@@29 T@U) (bx3@@15 T@U) (bx@@69 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@93) TyType) (= (type t1@@69) TyType)) (= (type t2@@46) TyType)) (= (type t3@@31) TyType)) (= (type t4@@16) TyType)) (= (type heap@@28) (MapType0Type refType MapType1Type))) (= (type h@@53) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@16) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@57) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@15) BoxType)) (= (type bx@@69) BoxType)) (= (U_2_bool (MapType0Select (Reads4 t0@@93 t1@@69 t2@@46 t3@@31 t4@@16 heap@@28 (Handle4 h@@53 r@@28 rd@@16) bx0@@57 bx1@@43 bx2@@29 bx3@@15) bx@@69)) (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@57 bx1@@43 bx2@@29 bx3@@15) bx@@69)))) :qid |unknown.0:0| :skolemid |976| :pattern ( (MapType0Select (Reads4 t0@@93 t1@@69 t2@@46 t3@@31 t4@@16 heap@@28 (Handle4 h@@53 r@@28 rd@@16) bx0@@57 bx1@@43 bx2@@29 bx3@@15) bx@@69)) )))
(assert (forall ((t0@@94 T@U) (t1@@70 T@U) (t2@@47 T@U) (t3@@32 T@U) (t4@@17 T@U) (h0@@30 T@U) (h1@@30 T@U) (f@@65 T@U) (bx0@@58 T@U) (bx1@@44 T@U) (bx2@@30 T@U) (bx3@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@94) TyType) (= (type t1@@70) TyType)) (= (type t2@@47) TyType)) (= (type t3@@32) TyType)) (= (type t4@@17) TyType)) (= (type h0@@30) (MapType0Type refType MapType1Type))) (= (type h1@@30) (MapType0Type refType MapType1Type))) (= (type f@@65) HandleTypeType)) (= (type bx0@@58) BoxType)) (= (type bx1@@44) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@16) BoxType)) (and (and (and ($HeapSucc h0@@30 h1@@30) (and ($IsGoodHeap h0@@30) ($IsGoodHeap h1@@30))) (and (and (and (and ($IsBox bx0@@58 t0@@94) ($IsBox bx1@@44 t1@@70)) ($IsBox bx2@@30 t2@@47)) ($IsBox bx3@@16 t3@@32)) ($Is f@@65 (Tclass._System.___hFunc4 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17)))) (forall ((o@@74 T@U) (fld@@29 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@29)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@29) (FieldType a@@112))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads4 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 h0@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@30 o@@74) fld@@29) (MapType1Select (MapType0Select h1@@30 o@@74) fld@@29)))) :qid |unknown.0:0| :skolemid |977| :no-pattern (type o@@74) :no-pattern (type fld@@29) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@29) :no-pattern (U_2_bool fld@@29) )))) (= (Reads4 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 h0@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16) (Reads4 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 h1@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16))) :qid |unknown.0:0| :skolemid |978| :pattern ( ($HeapSucc h0@@30 h1@@30) (Reads4 t0@@94 t1@@70 t2@@47 t3@@32 t4@@17 h1@@30 f@@65 bx0@@58 bx1@@44 bx2@@30 bx3@@16)) )))
(assert (forall ((t0@@95 T@U) (t1@@71 T@U) (t2@@48 T@U) (t3@@33 T@U) (t4@@18 T@U) (h0@@31 T@U) (h1@@31 T@U) (f@@66 T@U) (bx0@@59 T@U) (bx1@@45 T@U) (bx2@@31 T@U) (bx3@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@95) TyType) (= (type t1@@71) TyType)) (= (type t2@@48) TyType)) (= (type t3@@33) TyType)) (= (type t4@@18) TyType)) (= (type h0@@31) (MapType0Type refType MapType1Type))) (= (type h1@@31) (MapType0Type refType MapType1Type))) (= (type f@@66) HandleTypeType)) (= (type bx0@@59) BoxType)) (= (type bx1@@45) BoxType)) (= (type bx2@@31) BoxType)) (= (type bx3@@17) BoxType)) (and (and (and ($HeapSucc h0@@31 h1@@31) (and ($IsGoodHeap h0@@31) ($IsGoodHeap h1@@31))) (and (and (and (and ($IsBox bx0@@59 t0@@95) ($IsBox bx1@@45 t1@@71)) ($IsBox bx2@@31 t2@@48)) ($IsBox bx3@@17 t3@@33)) ($Is f@@66 (Tclass._System.___hFunc4 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18)))) (forall ((o@@75 T@U) (fld@@30 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@30)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@30) (FieldType a@@113))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads4 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@31 o@@75) fld@@30) (MapType1Select (MapType0Select h1@@31 o@@75) fld@@30)))) :qid |unknown.0:0| :skolemid |979| :no-pattern (type o@@75) :no-pattern (type fld@@30) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@30) :no-pattern (U_2_bool fld@@30) )))) (= (Reads4 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 h0@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17) (Reads4 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17))) :qid |unknown.0:0| :skolemid |980| :pattern ( ($HeapSucc h0@@31 h1@@31) (Reads4 t0@@95 t1@@71 t2@@48 t3@@33 t4@@18 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31 bx3@@17)) )))
(assert (forall ((t0@@96 T@U) (t1@@72 T@U) (t2@@49 T@U) (t3@@34 T@U) (t4@@19 T@U) (h0@@32 T@U) (h1@@32 T@U) (f@@67 T@U) (bx0@@60 T@U) (bx1@@46 T@U) (bx2@@32 T@U) (bx3@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@96) TyType) (= (type t1@@72) TyType)) (= (type t2@@49) TyType)) (= (type t3@@34) TyType)) (= (type t4@@19) TyType)) (= (type h0@@32) (MapType0Type refType MapType1Type))) (= (type h1@@32) (MapType0Type refType MapType1Type))) (= (type f@@67) HandleTypeType)) (= (type bx0@@60) BoxType)) (= (type bx1@@46) BoxType)) (= (type bx2@@32) BoxType)) (= (type bx3@@18) BoxType)) (and (and (and ($HeapSucc h0@@32 h1@@32) (and ($IsGoodHeap h0@@32) ($IsGoodHeap h1@@32))) (and (and (and (and ($IsBox bx0@@60 t0@@96) ($IsBox bx1@@46 t1@@72)) ($IsBox bx2@@32 t2@@49)) ($IsBox bx3@@18 t3@@34)) ($Is f@@67 (Tclass._System.___hFunc4 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19)))) (forall ((o@@76 T@U) (fld@@31 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@31)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@31) (FieldType a@@114))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads4 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 h0@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@32 o@@76) fld@@31) (MapType1Select (MapType0Select h1@@32 o@@76) fld@@31)))) :qid |unknown.0:0| :skolemid |981| :no-pattern (type o@@76) :no-pattern (type fld@@31) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@31) :no-pattern (U_2_bool fld@@31) )))) (= (Requires4 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 h0@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18) (Requires4 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 h1@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18))) :qid |unknown.0:0| :skolemid |982| :pattern ( ($HeapSucc h0@@32 h1@@32) (Requires4 t0@@96 t1@@72 t2@@49 t3@@34 t4@@19 h1@@32 f@@67 bx0@@60 bx1@@46 bx2@@32 bx3@@18)) )))
(assert (forall ((t0@@97 T@U) (t1@@73 T@U) (t2@@50 T@U) (t3@@35 T@U) (t4@@20 T@U) (h0@@33 T@U) (h1@@33 T@U) (f@@68 T@U) (bx0@@61 T@U) (bx1@@47 T@U) (bx2@@33 T@U) (bx3@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@97) TyType) (= (type t1@@73) TyType)) (= (type t2@@50) TyType)) (= (type t3@@35) TyType)) (= (type t4@@20) TyType)) (= (type h0@@33) (MapType0Type refType MapType1Type))) (= (type h1@@33) (MapType0Type refType MapType1Type))) (= (type f@@68) HandleTypeType)) (= (type bx0@@61) BoxType)) (= (type bx1@@47) BoxType)) (= (type bx2@@33) BoxType)) (= (type bx3@@19) BoxType)) (and (and (and ($HeapSucc h0@@33 h1@@33) (and ($IsGoodHeap h0@@33) ($IsGoodHeap h1@@33))) (and (and (and (and ($IsBox bx0@@61 t0@@97) ($IsBox bx1@@47 t1@@73)) ($IsBox bx2@@33 t2@@50)) ($IsBox bx3@@19 t3@@35)) ($Is f@@68 (Tclass._System.___hFunc4 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20)))) (forall ((o@@77 T@U) (fld@@32 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@32)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@32) (FieldType a@@115))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads4 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@33 o@@77) fld@@32) (MapType1Select (MapType0Select h1@@33 o@@77) fld@@32)))) :qid |unknown.0:0| :skolemid |983| :no-pattern (type o@@77) :no-pattern (type fld@@32) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@32) :no-pattern (U_2_bool fld@@32) )))) (= (Requires4 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 h0@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19) (Requires4 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19))) :qid |unknown.0:0| :skolemid |984| :pattern ( ($HeapSucc h0@@33 h1@@33) (Requires4 t0@@97 t1@@73 t2@@50 t3@@35 t4@@20 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33 bx3@@19)) )))
(assert (forall ((t0@@98 T@U) (t1@@74 T@U) (t2@@51 T@U) (t3@@36 T@U) (t4@@21 T@U) (h0@@34 T@U) (h1@@34 T@U) (f@@69 T@U) (bx0@@62 T@U) (bx1@@48 T@U) (bx2@@34 T@U) (bx3@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@98) TyType) (= (type t1@@74) TyType)) (= (type t2@@51) TyType)) (= (type t3@@36) TyType)) (= (type t4@@21) TyType)) (= (type h0@@34) (MapType0Type refType MapType1Type))) (= (type h1@@34) (MapType0Type refType MapType1Type))) (= (type f@@69) HandleTypeType)) (= (type bx0@@62) BoxType)) (= (type bx1@@48) BoxType)) (= (type bx2@@34) BoxType)) (= (type bx3@@20) BoxType)) (and (and (and ($HeapSucc h0@@34 h1@@34) (and ($IsGoodHeap h0@@34) ($IsGoodHeap h1@@34))) (and (and (and (and ($IsBox bx0@@62 t0@@98) ($IsBox bx1@@48 t1@@74)) ($IsBox bx2@@34 t2@@51)) ($IsBox bx3@@20 t3@@36)) ($Is f@@69 (Tclass._System.___hFunc4 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21)))) (forall ((o@@78 T@U) (fld@@33 T@U) ) (! (let ((a@@116 (FieldTypeInv0 (type fld@@33)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@33) (FieldType a@@116))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads4 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 h0@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@34 o@@78) fld@@33) (MapType1Select (MapType0Select h1@@34 o@@78) fld@@33)))) :qid |unknown.0:0| :skolemid |985| :no-pattern (type o@@78) :no-pattern (type fld@@33) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@33) :no-pattern (U_2_bool fld@@33) )))) (= (Apply4 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 h0@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20) (Apply4 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 h1@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20))) :qid |unknown.0:0| :skolemid |986| :pattern ( ($HeapSucc h0@@34 h1@@34) (Apply4 t0@@98 t1@@74 t2@@51 t3@@36 t4@@21 h1@@34 f@@69 bx0@@62 bx1@@48 bx2@@34 bx3@@20)) )))
(assert (forall ((t0@@99 T@U) (t1@@75 T@U) (t2@@52 T@U) (t3@@37 T@U) (t4@@22 T@U) (h0@@35 T@U) (h1@@35 T@U) (f@@70 T@U) (bx0@@63 T@U) (bx1@@49 T@U) (bx2@@35 T@U) (bx3@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@99) TyType) (= (type t1@@75) TyType)) (= (type t2@@52) TyType)) (= (type t3@@37) TyType)) (= (type t4@@22) TyType)) (= (type h0@@35) (MapType0Type refType MapType1Type))) (= (type h1@@35) (MapType0Type refType MapType1Type))) (= (type f@@70) HandleTypeType)) (= (type bx0@@63) BoxType)) (= (type bx1@@49) BoxType)) (= (type bx2@@35) BoxType)) (= (type bx3@@21) BoxType)) (and (and (and ($HeapSucc h0@@35 h1@@35) (and ($IsGoodHeap h0@@35) ($IsGoodHeap h1@@35))) (and (and (and (and ($IsBox bx0@@63 t0@@99) ($IsBox bx1@@49 t1@@75)) ($IsBox bx2@@35 t2@@52)) ($IsBox bx3@@21 t3@@37)) ($Is f@@70 (Tclass._System.___hFunc4 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22)))) (forall ((o@@79 T@U) (fld@@34 T@U) ) (! (let ((a@@117 (FieldTypeInv0 (type fld@@34)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@34) (FieldType a@@117))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads4 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@35 o@@79) fld@@34) (MapType1Select (MapType0Select h1@@35 o@@79) fld@@34)))) :qid |unknown.0:0| :skolemid |987| :no-pattern (type o@@79) :no-pattern (type fld@@34) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@34) :no-pattern (U_2_bool fld@@34) )))) (= (Apply4 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 h0@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21) (Apply4 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21))) :qid |unknown.0:0| :skolemid |988| :pattern ( ($HeapSucc h0@@35 h1@@35) (Apply4 t0@@99 t1@@75 t2@@52 t3@@37 t4@@22 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35 bx3@@21)) )))
(assert (forall ((t0@@100 T@U) (t1@@76 T@U) (t2@@53 T@U) (t3@@38 T@U) (t4@@23 T@U) (heap@@29 T@U) (f@@71 T@U) (bx0@@64 T@U) (bx1@@50 T@U) (bx2@@36 T@U) (bx3@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@100) TyType) (= (type t1@@76) TyType)) (= (type t2@@53) TyType)) (= (type t3@@38) TyType)) (= (type t4@@23) TyType)) (= (type heap@@29) (MapType0Type refType MapType1Type))) (= (type f@@71) HandleTypeType)) (= (type bx0@@64) BoxType)) (= (type bx1@@50) BoxType)) (= (type bx2@@36) BoxType)) (= (type bx3@@22) BoxType)) (and ($IsGoodHeap heap@@29) (and (and (and (and ($IsBox bx0@@64 t0@@100) ($IsBox bx1@@50 t1@@76)) ($IsBox bx2@@36 t2@@53)) ($IsBox bx3@@22 t3@@38)) ($Is f@@71 (Tclass._System.___hFunc4 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23))))) (= (|Set#Equal| (Reads4 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 $OneHeap f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 heap@@29 f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |989| :pattern ( (Reads4 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 $OneHeap f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22) ($IsGoodHeap heap@@29)) :pattern ( (Reads4 t0@@100 t1@@76 t2@@53 t3@@38 t4@@23 heap@@29 f@@71 bx0@@64 bx1@@50 bx2@@36 bx3@@22)) )))
(assert (forall ((t0@@101 T@U) (t1@@77 T@U) (t2@@54 T@U) (t3@@39 T@U) (t4@@24 T@U) (heap@@30 T@U) (f@@72 T@U) (bx0@@65 T@U) (bx1@@51 T@U) (bx2@@37 T@U) (bx3@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@101) TyType) (= (type t1@@77) TyType)) (= (type t2@@54) TyType)) (= (type t3@@39) TyType)) (= (type t4@@24) TyType)) (= (type heap@@30) (MapType0Type refType MapType1Type))) (= (type f@@72) HandleTypeType)) (= (type bx0@@65) BoxType)) (= (type bx1@@51) BoxType)) (= (type bx2@@37) BoxType)) (= (type bx3@@23) BoxType)) (and (and ($IsGoodHeap heap@@30) (and (and (and (and ($IsBox bx0@@65 t0@@101) ($IsBox bx1@@51 t1@@77)) ($IsBox bx2@@37 t2@@54)) ($IsBox bx3@@23 t3@@39)) ($Is f@@72 (Tclass._System.___hFunc4 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24)))) (|Set#Equal| (Reads4 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23) (|Set#Empty| BoxType)))) (= (Requires4 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23) (Requires4 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 heap@@30 f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23))) :qid |unknown.0:0| :skolemid |990| :pattern ( (Requires4 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23) ($IsGoodHeap heap@@30)) :pattern ( (Requires4 t0@@101 t1@@77 t2@@54 t3@@39 t4@@24 heap@@30 f@@72 bx0@@65 bx1@@51 bx2@@37 bx3@@23)) )))
(assert (forall ((f@@73 T@U) (t0@@102 T@U) (t1@@78 T@U) (t2@@55 T@U) (t3@@40 T@U) (t4@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@73) HandleTypeType) (= (type t0@@102) TyType)) (= (type t1@@78) TyType)) (= (type t2@@55) TyType)) (= (type t3@@40) TyType)) (= (type t4@@25) TyType)) (= ($Is f@@73 (Tclass._System.___hFunc4 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25)) (forall ((h@@54 T@U) (bx0@@66 T@U) (bx1@@52 T@U) (bx2@@38 T@U) (bx3@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@54) (MapType0Type refType MapType1Type)) (= (type bx0@@66) BoxType)) (= (type bx1@@52) BoxType)) (= (type bx2@@38) BoxType)) (= (type bx3@@24) BoxType)) (and (and ($IsGoodHeap h@@54) (and (and (and ($IsBox bx0@@66 t0@@102) ($IsBox bx1@@52 t1@@78)) ($IsBox bx2@@38 t2@@55)) ($IsBox bx3@@24 t3@@40))) (Requires4 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38 bx3@@24))) ($IsBox (Apply4 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38 bx3@@24) t4@@25)) :qid |DafnyPreludebpl.545:12| :skolemid |991| :pattern ( (Apply4 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38 bx3@@24)) )))) :qid |unknown.0:0| :skolemid |992| :pattern ( ($Is f@@73 (Tclass._System.___hFunc4 t0@@102 t1@@78 t2@@55 t3@@40 t4@@25))) )))
(assert (forall ((f@@74 T@U) (t0@@103 T@U) (t1@@79 T@U) (t2@@56 T@U) (t3@@41 T@U) (t4@@26 T@U) (u0@@4 T@U) (u1@@3 T@U) (u2@@2 T@U) (u3@@1 T@U) (u4@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@74) HandleTypeType) (= (type t0@@103) TyType)) (= (type t1@@79) TyType)) (= (type t2@@56) TyType)) (= (type t3@@41) TyType)) (= (type t4@@26) TyType)) (= (type u0@@4) TyType)) (= (type u1@@3) TyType)) (= (type u2@@2) TyType)) (= (type u3@@1) TyType)) (= (type u4@@0) TyType)) (and (and (and (and (and ($Is f@@74 (Tclass._System.___hFunc4 t0@@103 t1@@79 t2@@56 t3@@41 t4@@26)) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u0@@4)) ($IsBox bx@@70 t0@@103)) :qid |unknown.0:0| :skolemid |993| :pattern ( ($IsBox bx@@70 u0@@4)) :pattern ( ($IsBox bx@@70 t0@@103)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u1@@3)) ($IsBox bx@@71 t1@@79)) :qid |unknown.0:0| :skolemid |994| :pattern ( ($IsBox bx@@71 u1@@3)) :pattern ( ($IsBox bx@@71 t1@@79)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 u2@@2)) ($IsBox bx@@72 t2@@56)) :qid |unknown.0:0| :skolemid |995| :pattern ( ($IsBox bx@@72 u2@@2)) :pattern ( ($IsBox bx@@72 t2@@56)) ))) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 u3@@1)) ($IsBox bx@@73 t3@@41)) :qid |unknown.0:0| :skolemid |996| :pattern ( ($IsBox bx@@73 u3@@1)) :pattern ( ($IsBox bx@@73 t3@@41)) ))) (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 t4@@26)) ($IsBox bx@@74 u4@@0)) :qid |unknown.0:0| :skolemid |997| :pattern ( ($IsBox bx@@74 t4@@26)) :pattern ( ($IsBox bx@@74 u4@@0)) )))) ($Is f@@74 (Tclass._System.___hFunc4 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0))) :qid |unknown.0:0| :skolemid |998| :pattern ( ($Is f@@74 (Tclass._System.___hFunc4 t0@@103 t1@@79 t2@@56 t3@@41 t4@@26)) ($Is f@@74 (Tclass._System.___hFunc4 u0@@4 u1@@3 u2@@2 u3@@1 u4@@0))) )))
(assert (forall ((f@@75 T@U) (t0@@104 T@U) (t1@@80 T@U) (t2@@57 T@U) (t3@@42 T@U) (t4@@27 T@U) (h@@55 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@75) HandleTypeType) (= (type t0@@104) TyType)) (= (type t1@@80) TyType)) (= (type t2@@57) TyType)) (= (type t3@@42) TyType)) (= (type t4@@27) TyType)) (= (type h@@55) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@55)) (= ($IsAlloc f@@75 (Tclass._System.___hFunc4 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27) h@@55) (forall ((bx0@@67 T@U) (bx1@@53 T@U) (bx2@@39 T@U) (bx3@@25 T@U) ) (!  (=> (and (and (and (= (type bx0@@67) BoxType) (= (type bx1@@53) BoxType)) (= (type bx2@@39) BoxType)) (= (type bx3@@25) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@67 t0@@104) ($IsAllocBox bx0@@67 t0@@104 h@@55)) (and ($IsBox bx1@@53 t1@@80) ($IsAllocBox bx1@@53 t1@@80 h@@55))) (and ($IsBox bx2@@39 t2@@57) ($IsAllocBox bx2@@39 t2@@57 h@@55))) (and ($IsBox bx3@@25 t3@@42) ($IsAllocBox bx3@@25 t3@@42 h@@55))) (Requires4 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads4 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@55 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |999| :pattern ( (MapType0Select (Reads4 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |1000| :pattern ( (Apply4 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25)) :pattern ( (Reads4 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39 bx3@@25)) )))) :qid |unknown.0:0| :skolemid |1001| :pattern ( ($IsAlloc f@@75 (Tclass._System.___hFunc4 t0@@104 t1@@80 t2@@57 t3@@42 t4@@27) h@@55)) )))
(assert (forall ((f@@76 T@U) (t0@@105 T@U) (t1@@81 T@U) (t2@@58 T@U) (t3@@43 T@U) (t4@@28 T@U) (h@@56 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@76) HandleTypeType) (= (type t0@@105) TyType)) (= (type t1@@81) TyType)) (= (type t2@@58) TyType)) (= (type t3@@43) TyType)) (= (type t4@@28) TyType)) (= (type h@@56) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@56) ($IsAlloc f@@76 (Tclass._System.___hFunc4 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28) h@@56))) (forall ((bx0@@68 T@U) (bx1@@54 T@U) (bx2@@40 T@U) (bx3@@26 T@U) ) (!  (=> (and (and (and (= (type bx0@@68) BoxType) (= (type bx1@@54) BoxType)) (= (type bx2@@40) BoxType)) (= (type bx3@@26) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@68 t0@@105 h@@56) ($IsAllocBox bx1@@54 t1@@81 h@@56)) ($IsAllocBox bx2@@40 t2@@58 h@@56)) ($IsAllocBox bx3@@26 t3@@43 h@@56)) (Requires4 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40 bx3@@26)) ($IsAllocBox (Apply4 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40 bx3@@26) t4@@28 h@@56))) :qid |unknown.0:0| :skolemid |1002| :pattern ( (Apply4 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40 bx3@@26)) ))) :qid |unknown.0:0| :skolemid |1003| :pattern ( ($IsAlloc f@@76 (Tclass._System.___hFunc4 t0@@105 t1@@81 t2@@58 t3@@43 t4@@28) h@@56)) )))
(assert (forall ((arg0@@245 T@U) (arg1@@123 T@U) (arg2@@75 T@U) (arg3@@52 T@U) (arg4@@41 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@245 arg1@@123 arg2@@75 arg3@@52 arg4@@41)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@245 arg1@@123 arg2@@75 arg3@@52 arg4@@41)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@56| T@U) (|#$T3@@34| T@U) (|#$R@@104| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$T3@@34|) TyType)) (= (type |#$R@@104|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@34| |#$R@@104|)) Tagclass._System.___hPartialFunc4) (= (TagFamily (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@34| |#$R@@104|)) |tytagFamily$_#PartialFunc4|))) :qid |unknown.0:0| :skolemid |1004| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@34| |#$R@@104|)) )))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@246)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@246)) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@57| T@U) (|#$T3@@35| T@U) (|#$R@@105| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$T3@@35|) TyType)) (= (type |#$R@@105|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@35| |#$R@@105|)) |#$T0@@92|)) :qid |unknown.0:0| :skolemid |1005| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@35| |#$R@@105|)) )))
(assert (forall ((arg0@@247 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@247)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@247)) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@58| T@U) (|#$T3@@36| T@U) (|#$R@@106| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$T3@@36|) TyType)) (= (type |#$R@@106|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@36| |#$R@@106|)) |#$T1@@77|)) :qid |unknown.0:0| :skolemid |1006| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@36| |#$R@@106|)) )))
(assert (forall ((arg0@@248 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@248)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@248)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@59| T@U) (|#$T3@@37| T@U) (|#$R@@107| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$T3@@37|) TyType)) (= (type |#$R@@107|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@37| |#$R@@107|)) |#$T2@@59|)) :qid |unknown.0:0| :skolemid |1007| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@37| |#$R@@107|)) )))
(assert (forall ((arg0@@249 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@249)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@249)) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@60| T@U) (|#$T3@@38| T@U) (|#$R@@108| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$T3@@38|) TyType)) (= (type |#$R@@108|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@38| |#$R@@108|)) |#$T3@@38|)) :qid |unknown.0:0| :skolemid |1008| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@38| |#$R@@108|)) )))
(assert (forall ((arg0@@250 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@250)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@250)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@61| T@U) (|#$T3@@39| T@U) (|#$R@@109| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$T3@@39|) TyType)) (= (type |#$R@@109|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$R@@109|)) |#$R@@109|)) :qid |unknown.0:0| :skolemid |1009| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@39| |#$R@@109|)) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$T2@@62| T@U) (|#$T3@@40| T@U) (|#$R@@110| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$T3@@40|) TyType)) (= (type |#$R@@110|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hPartialFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$R@@110|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hPartialFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$R@@110|)))) :qid |unknown.0:0| :skolemid |1010| :pattern ( ($IsBox bx@@75 (Tclass._System.___hPartialFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@40| |#$R@@110|))) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$T2@@63| T@U) (|#$T3@@41| T@U) (|#$R@@111| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$T3@@41|) TyType)) (= (type |#$R@@111|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (= ($Is |f#0@@19| (Tclass._System.___hPartialFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111|))  (and ($Is |f#0@@19| (Tclass._System.___hFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111|)) (forall ((|x0#0@@7| T@U) (|x1#0@@5| T@U) (|x2#0@@3| T@U) (|x3#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0@@1|) BoxType)) (and (and (and ($IsBox |x0#0@@7| |#$T0@@98|) ($IsBox |x1#0@@5| |#$T1@@82|)) ($IsBox |x2#0@@3| |#$T2@@63|)) ($IsBox |x3#0@@1| |#$T3@@41|))) (|Set#Equal| (Reads4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111| $OneHeap |f#0@@19| |x0#0@@7| |x1#0@@5| |x2#0@@3| |x3#0@@1|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1011| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0@@1|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) ))))) :qid |unknown.0:0| :skolemid |1012| :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@41| |#$R@@111|))) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$T2@@64| T@U) (|#$T3@@42| T@U) (|#$R@@112| T@U) (|f#0@@20| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$T3@@42|) TyType)) (= (type |#$R@@112|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$R@@112|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$R@@112|) $h@@18))) :qid |unknown.0:0| :skolemid |1013| :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@42| |#$R@@112|) $h@@18)) )))
(assert (forall ((arg0@@251 T@U) (arg1@@124 T@U) (arg2@@76 T@U) (arg3@@53 T@U) (arg4@@42 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@251 arg1@@124 arg2@@76 arg3@@53 arg4@@42)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@251 arg1@@124 arg2@@76 arg3@@53 arg4@@42)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@65| T@U) (|#$T3@@43| T@U) (|#$R@@113| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$T3@@43|) TyType)) (= (type |#$R@@113|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@43| |#$R@@113|)) Tagclass._System.___hTotalFunc4) (= (TagFamily (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@43| |#$R@@113|)) |tytagFamily$_#TotalFunc4|))) :qid |unknown.0:0| :skolemid |1014| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@43| |#$R@@113|)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@252)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@252)) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@66| T@U) (|#$T3@@44| T@U) (|#$R@@114| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$T3@@44|) TyType)) (= (type |#$R@@114|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@44| |#$R@@114|)) |#$T0@@101|)) :qid |unknown.0:0| :skolemid |1015| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@44| |#$R@@114|)) )))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@253)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@253)) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@67| T@U) (|#$T3@@45| T@U) (|#$R@@115| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$T3@@45|) TyType)) (= (type |#$R@@115|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@45| |#$R@@115|)) |#$T1@@86|)) :qid |unknown.0:0| :skolemid |1016| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@45| |#$R@@115|)) )))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@254)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@254)) )))
(assert (forall ((|#$T0@@103| T@U) (|#$T1@@87| T@U) (|#$T2@@68| T@U) (|#$T3@@46| T@U) (|#$R@@116| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@103|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$T3@@46|) TyType)) (= (type |#$R@@116|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@46| |#$R@@116|)) |#$T2@@68|)) :qid |unknown.0:0| :skolemid |1017| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@46| |#$R@@116|)) )))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@255)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@255)) )))
(assert (forall ((|#$T0@@104| T@U) (|#$T1@@88| T@U) (|#$T2@@69| T@U) (|#$T3@@47| T@U) (|#$R@@117| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$T3@@47|) TyType)) (= (type |#$R@@117|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@47| |#$R@@117|)) |#$T3@@47|)) :qid |unknown.0:0| :skolemid |1018| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@47| |#$R@@117|)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@256)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@256)) )))
(assert (forall ((|#$T0@@105| T@U) (|#$T1@@89| T@U) (|#$T2@@70| T@U) (|#$T3@@48| T@U) (|#$R@@118| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@105|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$T3@@48|) TyType)) (= (type |#$R@@118|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@48| |#$R@@118|)) |#$R@@118|)) :qid |unknown.0:0| :skolemid |1019| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@48| |#$R@@118|)) )))
(assert (forall ((|#$T0@@106| T@U) (|#$T1@@90| T@U) (|#$T2@@71| T@U) (|#$T3@@49| T@U) (|#$R@@119| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$T3@@49|) TyType)) (= (type |#$R@@119|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hTotalFunc4 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$R@@119|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hTotalFunc4 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$R@@119|)))) :qid |unknown.0:0| :skolemid |1020| :pattern ( ($IsBox bx@@76 (Tclass._System.___hTotalFunc4 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@49| |#$R@@119|))) )))
(assert (forall ((|#$T0@@107| T@U) (|#$T1@@91| T@U) (|#$T2@@72| T@U) (|#$T3@@50| T@U) (|#$R@@120| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@107|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$T3@@50|) TyType)) (= (type |#$R@@120|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (= ($Is |f#0@@21| (Tclass._System.___hTotalFunc4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120|))  (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120|)) (forall ((|x0#0@@8| T@U) (|x1#0@@6| T@U) (|x2#0@@4| T@U) (|x3#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@2|) BoxType)) (and (and (and ($IsBox |x0#0@@8| |#$T0@@107|) ($IsBox |x1#0@@6| |#$T1@@91|)) ($IsBox |x2#0@@4| |#$T2@@72|)) ($IsBox |x3#0@@2| |#$T3@@50|))) (Requires4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120| $OneHeap |f#0@@21| |x0#0@@8| |x1#0@@6| |x2#0@@4| |x3#0@@2|)) :qid |unknown.0:0| :skolemid |1021| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@2|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) ))))) :qid |unknown.0:0| :skolemid |1022| :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc4 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@50| |#$R@@120|))) )))
(assert (forall ((|#$T0@@108| T@U) (|#$T1@@92| T@U) (|#$T2@@73| T@U) (|#$T3@@51| T@U) (|#$R@@121| T@U) (|f#0@@22| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@108|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$T3@@51|) TyType)) (= (type |#$R@@121|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc4 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$R@@121|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc4 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$R@@121|) $h@@19))) :qid |unknown.0:0| :skolemid |1023| :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc4 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@51| |#$R@@121|) $h@@19)) )))
(assert (forall ((arg0@@257 T@U) (arg1@@125 T@U) (arg2@@77 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO arg0@@257 arg1@@125 arg2@@77)) TyType) :qid |funType:Tclass._System.___hFunc2LLO| :pattern ( (Tclass._System.___hFunc2LLO arg0@@257 arg1@@125 arg2@@77)) )))
(assert (forall ((|#$T0@@109| T@U) (|#$T1@@93| T@U) (|#$R@@122| T@U) ) (!  (=> (and (and (= (type |#$T0@@109|) TyType) (= (type |#$T1@@93|) TyType)) (= (type |#$R@@122|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LLO |#$T0@@109| |#$T1@@93| |#$R@@122|)) Tagclass._System.___hFunc2LLO) (= (TagFamily (Tclass._System.___hFunc2LLO |#$T0@@109| |#$T1@@93| |#$R@@122|)) |tytagFamily$_#Func2LLO|))) :qid |unknown.0:0| :skolemid |1024| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@109| |#$T1@@93| |#$R@@122|)) )))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_0 arg0@@258)) TyType) :qid |funType:Tclass._System.___hFunc2LLO_0| :pattern ( (Tclass._System.___hFunc2LLO_0 arg0@@258)) )))
(assert (forall ((|#$T0@@110| T@U) (|#$T1@@94| T@U) (|#$R@@123| T@U) ) (!  (=> (and (and (= (type |#$T0@@110|) TyType) (= (type |#$T1@@94|) TyType)) (= (type |#$R@@123|) TyType)) (= (Tclass._System.___hFunc2LLO_0 (Tclass._System.___hFunc2LLO |#$T0@@110| |#$T1@@94| |#$R@@123|)) |#$T0@@110|)) :qid |unknown.0:0| :skolemid |1025| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@110| |#$T1@@94| |#$R@@123|)) )))
(assert (forall ((arg0@@259 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_1 arg0@@259)) TyType) :qid |funType:Tclass._System.___hFunc2LLO_1| :pattern ( (Tclass._System.___hFunc2LLO_1 arg0@@259)) )))
(assert (forall ((|#$T0@@111| T@U) (|#$T1@@95| T@U) (|#$R@@124| T@U) ) (!  (=> (and (and (= (type |#$T0@@111|) TyType) (= (type |#$T1@@95|) TyType)) (= (type |#$R@@124|) TyType)) (= (Tclass._System.___hFunc2LLO_1 (Tclass._System.___hFunc2LLO |#$T0@@111| |#$T1@@95| |#$R@@124|)) |#$T1@@95|)) :qid |unknown.0:0| :skolemid |1026| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@111| |#$T1@@95| |#$R@@124|)) )))
(assert (forall ((arg0@@260 T@U) ) (! (= (type (Tclass._System.___hFunc2LLO_2 arg0@@260)) TyType) :qid |funType:Tclass._System.___hFunc2LLO_2| :pattern ( (Tclass._System.___hFunc2LLO_2 arg0@@260)) )))
(assert (forall ((|#$T0@@112| T@U) (|#$T1@@96| T@U) (|#$R@@125| T@U) ) (!  (=> (and (and (= (type |#$T0@@112|) TyType) (= (type |#$T1@@96|) TyType)) (= (type |#$R@@125|) TyType)) (= (Tclass._System.___hFunc2LLO_2 (Tclass._System.___hFunc2LLO |#$T0@@112| |#$T1@@96| |#$R@@125|)) |#$R@@125|)) :qid |unknown.0:0| :skolemid |1027| :pattern ( (Tclass._System.___hFunc2LLO |#$T0@@112| |#$T1@@96| |#$R@@125|)) )))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@97| T@U) (|#$R@@126| T@U) (bx@@77 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |#$R@@126|) TyType)) (= (type bx@@77) BoxType)) ($IsBox bx@@77 (Tclass._System.___hFunc2LLO |#$T0@@113| |#$T1@@97| |#$R@@126|))) (and (= ($Box ($Unbox HandleTypeType bx@@77)) bx@@77) ($Is ($Unbox HandleTypeType bx@@77) (Tclass._System.___hFunc2LLO |#$T0@@113| |#$T1@@97| |#$R@@126|)))) :qid |unknown.0:0| :skolemid |1028| :pattern ( ($IsBox bx@@77 (Tclass._System.___hFunc2LLO |#$T0@@113| |#$T1@@97| |#$R@@126|))) )))
(assert (forall ((arg0@@261 T@U) (arg1@@126 T@U) (arg2@@78 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO arg0@@261 arg1@@126 arg2@@78)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO| :pattern ( (Tclass._System.___hPartialFunc2LLO arg0@@261 arg1@@126 arg2@@78)) )))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@98| T@U) (|#$R@@127| T@U) ) (!  (=> (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |#$R@@127|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LLO |#$T0@@114| |#$T1@@98| |#$R@@127|)) Tagclass._System.___hPartialFunc2LLO) (= (TagFamily (Tclass._System.___hPartialFunc2LLO |#$T0@@114| |#$T1@@98| |#$R@@127|)) |tytagFamily$_#PartialFunc2LLO|))) :qid |unknown.0:0| :skolemid |1029| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@114| |#$T1@@98| |#$R@@127|)) )))
(assert (forall ((arg0@@262 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_0 arg0@@262)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO_0| :pattern ( (Tclass._System.___hPartialFunc2LLO_0 arg0@@262)) )))
(assert (forall ((|#$T0@@115| T@U) (|#$T1@@99| T@U) (|#$R@@128| T@U) ) (!  (=> (and (and (= (type |#$T0@@115|) TyType) (= (type |#$T1@@99|) TyType)) (= (type |#$R@@128|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_0 (Tclass._System.___hPartialFunc2LLO |#$T0@@115| |#$T1@@99| |#$R@@128|)) |#$T0@@115|)) :qid |unknown.0:0| :skolemid |1030| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@115| |#$T1@@99| |#$R@@128|)) )))
(assert (forall ((arg0@@263 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_1 arg0@@263)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO_1| :pattern ( (Tclass._System.___hPartialFunc2LLO_1 arg0@@263)) )))
(assert (forall ((|#$T0@@116| T@U) (|#$T1@@100| T@U) (|#$R@@129| T@U) ) (!  (=> (and (and (= (type |#$T0@@116|) TyType) (= (type |#$T1@@100|) TyType)) (= (type |#$R@@129|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_1 (Tclass._System.___hPartialFunc2LLO |#$T0@@116| |#$T1@@100| |#$R@@129|)) |#$T1@@100|)) :qid |unknown.0:0| :skolemid |1031| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@116| |#$T1@@100| |#$R@@129|)) )))
(assert (forall ((arg0@@264 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LLO_2 arg0@@264)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LLO_2| :pattern ( (Tclass._System.___hPartialFunc2LLO_2 arg0@@264)) )))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@101| T@U) (|#$R@@130| T@U) ) (!  (=> (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@101|) TyType)) (= (type |#$R@@130|) TyType)) (= (Tclass._System.___hPartialFunc2LLO_2 (Tclass._System.___hPartialFunc2LLO |#$T0@@117| |#$T1@@101| |#$R@@130|)) |#$R@@130|)) :qid |unknown.0:0| :skolemid |1032| :pattern ( (Tclass._System.___hPartialFunc2LLO |#$T0@@117| |#$T1@@101| |#$R@@130|)) )))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@102| T@U) (|#$R@@131| T@U) (bx@@78 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$R@@131|) TyType)) (= (type bx@@78) BoxType)) ($IsBox bx@@78 (Tclass._System.___hPartialFunc2LLO |#$T0@@118| |#$T1@@102| |#$R@@131|))) (and (= ($Box ($Unbox HandleTypeType bx@@78)) bx@@78) ($Is ($Unbox HandleTypeType bx@@78) (Tclass._System.___hPartialFunc2LLO |#$T0@@118| |#$T1@@102| |#$R@@131|)))) :qid |unknown.0:0| :skolemid |1033| :pattern ( ($IsBox bx@@78 (Tclass._System.___hPartialFunc2LLO |#$T0@@118| |#$T1@@102| |#$R@@131|))) )))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@103| T@U) (|#$R@@132| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$R@@132|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (= ($Is |f#0@@23| (Tclass._System.___hPartialFunc2LLO |#$T0@@119| |#$T1@@103| |#$R@@132|))  (and ($Is |f#0@@23| (Tclass._System.___hFunc2LLO |#$T0@@119| |#$T1@@103| |#$R@@132|)) (forall ((|x0#0@@9| T@U) (|x1#0@@7| T@U) ) (!  (=> (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@7|) BoxType)) (and ($IsBox |x0#0@@9| |#$T0@@119|) ($IsBox |x1#0@@7| |#$T1@@103|))) (|Set#Equal| (Reads2 |#$T0@@119| |#$T1@@103| |#$R@@132| $OneHeap |f#0@@23| |x0#0@@9| |x1#0@@7|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1034| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@7|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) ))))) :qid |unknown.0:0| :skolemid |1035| :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc2LLO |#$T0@@119| |#$T1@@103| |#$R@@132|))) )))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@104| T@U) (|#$R@@133| T@U) (|f#0@@24| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$R@@133|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc2LLO |#$T0@@120| |#$T1@@104| |#$R@@133|) $h@@20) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc2LLO |#$T0@@120| |#$T1@@104| |#$R@@133|) $h@@20))) :qid |unknown.0:0| :skolemid |1036| :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc2LLO |#$T0@@120| |#$T1@@104| |#$R@@133|) $h@@20)) )))
(assert (forall ((arg0@@265 T@U) (arg1@@127 T@U) (arg2@@79 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO arg0@@265 arg1@@127 arg2@@79)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO| :pattern ( (Tclass._System.___hTotalFunc2LLO arg0@@265 arg1@@127 arg2@@79)) )))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@105| T@U) (|#$R@@134| T@U) ) (!  (=> (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$R@@134|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LLO |#$T0@@121| |#$T1@@105| |#$R@@134|)) Tagclass._System.___hTotalFunc2LLO) (= (TagFamily (Tclass._System.___hTotalFunc2LLO |#$T0@@121| |#$T1@@105| |#$R@@134|)) |tytagFamily$_#TotalFunc2LLO|))) :qid |unknown.0:0| :skolemid |1037| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@121| |#$T1@@105| |#$R@@134|)) )))
(assert (forall ((arg0@@266 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_0 arg0@@266)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO_0| :pattern ( (Tclass._System.___hTotalFunc2LLO_0 arg0@@266)) )))
(assert (forall ((|#$T0@@122| T@U) (|#$T1@@106| T@U) (|#$R@@135| T@U) ) (!  (=> (and (and (= (type |#$T0@@122|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$R@@135|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_0 (Tclass._System.___hTotalFunc2LLO |#$T0@@122| |#$T1@@106| |#$R@@135|)) |#$T0@@122|)) :qid |unknown.0:0| :skolemid |1038| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@122| |#$T1@@106| |#$R@@135|)) )))
(assert (forall ((arg0@@267 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_1 arg0@@267)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO_1| :pattern ( (Tclass._System.___hTotalFunc2LLO_1 arg0@@267)) )))
(assert (forall ((|#$T0@@123| T@U) (|#$T1@@107| T@U) (|#$R@@136| T@U) ) (!  (=> (and (and (= (type |#$T0@@123|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$R@@136|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_1 (Tclass._System.___hTotalFunc2LLO |#$T0@@123| |#$T1@@107| |#$R@@136|)) |#$T1@@107|)) :qid |unknown.0:0| :skolemid |1039| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@123| |#$T1@@107| |#$R@@136|)) )))
(assert (forall ((arg0@@268 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LLO_2 arg0@@268)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LLO_2| :pattern ( (Tclass._System.___hTotalFunc2LLO_2 arg0@@268)) )))
(assert (forall ((|#$T0@@124| T@U) (|#$T1@@108| T@U) (|#$R@@137| T@U) ) (!  (=> (and (and (= (type |#$T0@@124|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$R@@137|) TyType)) (= (Tclass._System.___hTotalFunc2LLO_2 (Tclass._System.___hTotalFunc2LLO |#$T0@@124| |#$T1@@108| |#$R@@137|)) |#$R@@137|)) :qid |unknown.0:0| :skolemid |1040| :pattern ( (Tclass._System.___hTotalFunc2LLO |#$T0@@124| |#$T1@@108| |#$R@@137|)) )))
(assert (forall ((|#$T0@@125| T@U) (|#$T1@@109| T@U) (|#$R@@138| T@U) (bx@@79 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@125|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$R@@138|) TyType)) (= (type bx@@79) BoxType)) ($IsBox bx@@79 (Tclass._System.___hTotalFunc2LLO |#$T0@@125| |#$T1@@109| |#$R@@138|))) (and (= ($Box ($Unbox HandleTypeType bx@@79)) bx@@79) ($Is ($Unbox HandleTypeType bx@@79) (Tclass._System.___hTotalFunc2LLO |#$T0@@125| |#$T1@@109| |#$R@@138|)))) :qid |unknown.0:0| :skolemid |1041| :pattern ( ($IsBox bx@@79 (Tclass._System.___hTotalFunc2LLO |#$T0@@125| |#$T1@@109| |#$R@@138|))) )))
(assert (forall ((|#$T0@@126| T@U) (|#$T1@@110| T@U) (|#$R@@139| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@126|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$R@@139|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (= ($Is |f#0@@25| (Tclass._System.___hTotalFunc2LLO |#$T0@@126| |#$T1@@110| |#$R@@139|))  (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc2LLO |#$T0@@126| |#$T1@@110| |#$R@@139|)) (forall ((|x0#0@@10| T@U) (|x1#0@@8| T@U) ) (!  (=> (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@8|) BoxType)) (and ($IsBox |x0#0@@10| |#$T0@@126|) ($IsBox |x1#0@@8| |#$T1@@110|))) (Requires2 |#$T0@@126| |#$T1@@110| |#$R@@139| $OneHeap |f#0@@25| |x0#0@@10| |x1#0@@8|)) :qid |unknown.0:0| :skolemid |1042| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@8|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) ))))) :qid |unknown.0:0| :skolemid |1043| :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc2LLO |#$T0@@126| |#$T1@@110| |#$R@@139|))) )))
(assert (forall ((|#$T0@@127| T@U) (|#$T1@@111| T@U) (|#$R@@140| T@U) (|f#0@@26| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@127|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$R@@140|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc2LLO |#$T0@@127| |#$T1@@111| |#$R@@140|) $h@@21) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc2LLO |#$T0@@127| |#$T1@@111| |#$R@@140|) $h@@21))) :qid |unknown.0:0| :skolemid |1044| :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc2LLO |#$T0@@127| |#$T1@@111| |#$R@@140|) $h@@21)) )))
(assert (forall ((arg0@@269 T@U) ) (! (= (type (Tclass._System.___hFunc0L arg0@@269)) TyType) :qid |funType:Tclass._System.___hFunc0L| :pattern ( (Tclass._System.___hFunc0L arg0@@269)) )))
(assert (forall ((|#$R@@141| T@U) ) (!  (=> (= (type |#$R@@141|) TyType) (and (= (Tag (Tclass._System.___hFunc0L |#$R@@141|)) Tagclass._System.___hFunc0L) (= (TagFamily (Tclass._System.___hFunc0L |#$R@@141|)) |tytagFamily$_#Func0L|))) :qid |unknown.0:0| :skolemid |1045| :pattern ( (Tclass._System.___hFunc0L |#$R@@141|)) )))
(assert (forall ((arg0@@270 T@U) ) (! (= (type (Tclass._System.___hFunc0L_0 arg0@@270)) TyType) :qid |funType:Tclass._System.___hFunc0L_0| :pattern ( (Tclass._System.___hFunc0L_0 arg0@@270)) )))
(assert (forall ((|#$R@@142| T@U) ) (!  (=> (= (type |#$R@@142|) TyType) (= (Tclass._System.___hFunc0L_0 (Tclass._System.___hFunc0L |#$R@@142|)) |#$R@@142|)) :qid |unknown.0:0| :skolemid |1046| :pattern ( (Tclass._System.___hFunc0L |#$R@@142|)) )))
(assert (forall ((|#$R@@143| T@U) (bx@@80 T@U) ) (!  (=> (and (and (= (type |#$R@@143|) TyType) (= (type bx@@80) BoxType)) ($IsBox bx@@80 (Tclass._System.___hFunc0L |#$R@@143|))) (and (= ($Box ($Unbox HandleTypeType bx@@80)) bx@@80) ($Is ($Unbox HandleTypeType bx@@80) (Tclass._System.___hFunc0L |#$R@@143|)))) :qid |unknown.0:0| :skolemid |1047| :pattern ( ($IsBox bx@@80 (Tclass._System.___hFunc0L |#$R@@143|))) )))
(assert (forall ((arg0@@271 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L arg0@@271)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L| :pattern ( (Tclass._System.___hPartialFunc0L arg0@@271)) )))
(assert (forall ((|#$R@@144| T@U) ) (!  (=> (= (type |#$R@@144|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0L |#$R@@144|)) Tagclass._System.___hPartialFunc0L) (= (TagFamily (Tclass._System.___hPartialFunc0L |#$R@@144|)) |tytagFamily$_#PartialFunc0L|))) :qid |unknown.0:0| :skolemid |1048| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@144|)) )))
(assert (forall ((arg0@@272 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L_0 arg0@@272)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L_0| :pattern ( (Tclass._System.___hPartialFunc0L_0 arg0@@272)) )))
(assert (forall ((|#$R@@145| T@U) ) (!  (=> (= (type |#$R@@145|) TyType) (= (Tclass._System.___hPartialFunc0L_0 (Tclass._System.___hPartialFunc0L |#$R@@145|)) |#$R@@145|)) :qid |unknown.0:0| :skolemid |1049| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@145|)) )))
(assert (forall ((|#$R@@146| T@U) (bx@@81 T@U) ) (!  (=> (and (and (= (type |#$R@@146|) TyType) (= (type bx@@81) BoxType)) ($IsBox bx@@81 (Tclass._System.___hPartialFunc0L |#$R@@146|))) (and (= ($Box ($Unbox HandleTypeType bx@@81)) bx@@81) ($Is ($Unbox HandleTypeType bx@@81) (Tclass._System.___hPartialFunc0L |#$R@@146|)))) :qid |unknown.0:0| :skolemid |1050| :pattern ( ($IsBox bx@@81 (Tclass._System.___hPartialFunc0L |#$R@@146|))) )))
(assert (forall ((|#$R@@147| T@U) (|f#0@@27| T@U) ) (!  (=> (and (= (type |#$R@@147|) TyType) (= (type |f#0@@27|) HandleTypeType)) (= ($Is |f#0@@27| (Tclass._System.___hPartialFunc0L |#$R@@147|))  (and ($Is |f#0@@27| (Tclass._System.___hFunc0L |#$R@@147|)) (|Set#Equal| (Reads0 |#$R@@147| $OneHeap |f#0@@27|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1051| :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc0L |#$R@@147|))) )))
(assert (forall ((|#$R@@148| T@U) (|f#0@@28| T@U) ($h@@22 T@U) ) (!  (=> (and (and (= (type |#$R@@148|) TyType) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc0L |#$R@@148|) $h@@22) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc0L |#$R@@148|) $h@@22))) :qid |unknown.0:0| :skolemid |1052| :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc0L |#$R@@148|) $h@@22)) )))
(assert (forall ((arg0@@273 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L arg0@@273)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L| :pattern ( (Tclass._System.___hTotalFunc0L arg0@@273)) )))
(assert (forall ((|#$R@@149| T@U) ) (!  (=> (= (type |#$R@@149|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0L |#$R@@149|)) Tagclass._System.___hTotalFunc0L) (= (TagFamily (Tclass._System.___hTotalFunc0L |#$R@@149|)) |tytagFamily$_#TotalFunc0L|))) :qid |unknown.0:0| :skolemid |1053| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@149|)) )))
(assert (forall ((arg0@@274 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L_0 arg0@@274)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L_0| :pattern ( (Tclass._System.___hTotalFunc0L_0 arg0@@274)) )))
(assert (forall ((|#$R@@150| T@U) ) (!  (=> (= (type |#$R@@150|) TyType) (= (Tclass._System.___hTotalFunc0L_0 (Tclass._System.___hTotalFunc0L |#$R@@150|)) |#$R@@150|)) :qid |unknown.0:0| :skolemid |1054| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@150|)) )))
(assert (forall ((|#$R@@151| T@U) (bx@@82 T@U) ) (!  (=> (and (and (= (type |#$R@@151|) TyType) (= (type bx@@82) BoxType)) ($IsBox bx@@82 (Tclass._System.___hTotalFunc0L |#$R@@151|))) (and (= ($Box ($Unbox HandleTypeType bx@@82)) bx@@82) ($Is ($Unbox HandleTypeType bx@@82) (Tclass._System.___hTotalFunc0L |#$R@@151|)))) :qid |unknown.0:0| :skolemid |1055| :pattern ( ($IsBox bx@@82 (Tclass._System.___hTotalFunc0L |#$R@@151|))) )))
(assert (forall ((|#$R@@152| T@U) (|f#0@@29| T@U) ) (!  (=> (and (= (type |#$R@@152|) TyType) (= (type |f#0@@29|) HandleTypeType)) (= ($Is |f#0@@29| (Tclass._System.___hTotalFunc0L |#$R@@152|))  (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc0L |#$R@@152|)) (Requires0 |#$R@@152| $OneHeap |f#0@@29|)))) :qid |unknown.0:0| :skolemid |1056| :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc0L |#$R@@152|))) )))
(assert (forall ((|#$R@@153| T@U) (|f#0@@30| T@U) ($h@@23 T@U) ) (!  (=> (and (and (= (type |#$R@@153|) TyType) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc0L |#$R@@153|) $h@@23) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc0L |#$R@@153|) $h@@23))) :qid |unknown.0:0| :skolemid |1057| :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc0L |#$R@@153|) $h@@23)) )))
(assert (forall ((arg0@@275 T@U) (arg1@@128 T@U) (arg2@@80 T@U) (arg3@@54 T@U) ) (! (= (type (Tclass._System.___hFunc3LLLO arg0@@275 arg1@@128 arg2@@80 arg3@@54)) TyType) :qid |funType:Tclass._System.___hFunc3LLLO| :pattern ( (Tclass._System.___hFunc3LLLO arg0@@275 arg1@@128 arg2@@80 arg3@@54)) )))
(assert (forall ((|#$T0@@128| T@U) (|#$T1@@112| T@U) (|#$T2@@74| T@U) (|#$R@@154| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@128|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$R@@154|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLLO |#$T0@@128| |#$T1@@112| |#$T2@@74| |#$R@@154|)) Tagclass._System.___hFunc3LLLO) (= (TagFamily (Tclass._System.___hFunc3LLLO |#$T0@@128| |#$T1@@112| |#$T2@@74| |#$R@@154|)) |tytagFamily$_#Func3LLLO|))) :qid |unknown.0:0| :skolemid |1058| :pattern ( (Tclass._System.___hFunc3LLLO |#$T0@@128| |#$T1@@112| |#$T2@@74| |#$R@@154|)) )))
(assert (forall ((arg0@@276 T@U) ) (! (= (type (Tclass._System.___hFunc3LLLO_0 arg0@@276)) TyType) :qid |funType:Tclass._System.___hFunc3LLLO_0| :pattern ( (Tclass._System.___hFunc3LLLO_0 arg0@@276)) )))
(assert (forall ((|#$T0@@129| T@U) (|#$T1@@113| T@U) (|#$T2@@75| T@U) (|#$R@@155| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@129|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$R@@155|) TyType)) (= (Tclass._System.___hFunc3LLLO_0 (Tclass._System.___hFunc3LLLO |#$T0@@129| |#$T1@@113| |#$T2@@75| |#$R@@155|)) |#$T0@@129|)) :qid |unknown.0:0| :skolemid |1059| :pattern ( (Tclass._System.___hFunc3LLLO |#$T0@@129| |#$T1@@113| |#$T2@@75| |#$R@@155|)) )))
(assert (forall ((arg0@@277 T@U) ) (! (= (type (Tclass._System.___hFunc3LLLO_1 arg0@@277)) TyType) :qid |funType:Tclass._System.___hFunc3LLLO_1| :pattern ( (Tclass._System.___hFunc3LLLO_1 arg0@@277)) )))
(assert (forall ((|#$T0@@130| T@U) (|#$T1@@114| T@U) (|#$T2@@76| T@U) (|#$R@@156| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@130|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$R@@156|) TyType)) (= (Tclass._System.___hFunc3LLLO_1 (Tclass._System.___hFunc3LLLO |#$T0@@130| |#$T1@@114| |#$T2@@76| |#$R@@156|)) |#$T1@@114|)) :qid |unknown.0:0| :skolemid |1060| :pattern ( (Tclass._System.___hFunc3LLLO |#$T0@@130| |#$T1@@114| |#$T2@@76| |#$R@@156|)) )))
(assert (forall ((arg0@@278 T@U) ) (! (= (type (Tclass._System.___hFunc3LLLO_2 arg0@@278)) TyType) :qid |funType:Tclass._System.___hFunc3LLLO_2| :pattern ( (Tclass._System.___hFunc3LLLO_2 arg0@@278)) )))
(assert (forall ((|#$T0@@131| T@U) (|#$T1@@115| T@U) (|#$T2@@77| T@U) (|#$R@@157| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@131|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$R@@157|) TyType)) (= (Tclass._System.___hFunc3LLLO_2 (Tclass._System.___hFunc3LLLO |#$T0@@131| |#$T1@@115| |#$T2@@77| |#$R@@157|)) |#$T2@@77|)) :qid |unknown.0:0| :skolemid |1061| :pattern ( (Tclass._System.___hFunc3LLLO |#$T0@@131| |#$T1@@115| |#$T2@@77| |#$R@@157|)) )))
(assert (forall ((arg0@@279 T@U) ) (! (= (type (Tclass._System.___hFunc3LLLO_3 arg0@@279)) TyType) :qid |funType:Tclass._System.___hFunc3LLLO_3| :pattern ( (Tclass._System.___hFunc3LLLO_3 arg0@@279)) )))
(assert (forall ((|#$T0@@132| T@U) (|#$T1@@116| T@U) (|#$T2@@78| T@U) (|#$R@@158| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@132|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$R@@158|) TyType)) (= (Tclass._System.___hFunc3LLLO_3 (Tclass._System.___hFunc3LLLO |#$T0@@132| |#$T1@@116| |#$T2@@78| |#$R@@158|)) |#$R@@158|)) :qid |unknown.0:0| :skolemid |1062| :pattern ( (Tclass._System.___hFunc3LLLO |#$T0@@132| |#$T1@@116| |#$T2@@78| |#$R@@158|)) )))
(assert (forall ((|#$T0@@133| T@U) (|#$T1@@117| T@U) (|#$T2@@79| T@U) (|#$R@@159| T@U) (bx@@83 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@133|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$R@@159|) TyType)) (= (type bx@@83) BoxType)) ($IsBox bx@@83 (Tclass._System.___hFunc3LLLO |#$T0@@133| |#$T1@@117| |#$T2@@79| |#$R@@159|))) (and (= ($Box ($Unbox HandleTypeType bx@@83)) bx@@83) ($Is ($Unbox HandleTypeType bx@@83) (Tclass._System.___hFunc3LLLO |#$T0@@133| |#$T1@@117| |#$T2@@79| |#$R@@159|)))) :qid |unknown.0:0| :skolemid |1063| :pattern ( ($IsBox bx@@83 (Tclass._System.___hFunc3LLLO |#$T0@@133| |#$T1@@117| |#$T2@@79| |#$R@@159|))) )))
(assert (forall ((arg0@@280 T@U) (arg1@@129 T@U) (arg2@@81 T@U) (arg3@@55 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLLO arg0@@280 arg1@@129 arg2@@81 arg3@@55)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLLO| :pattern ( (Tclass._System.___hPartialFunc3LLLO arg0@@280 arg1@@129 arg2@@81 arg3@@55)) )))
(assert (forall ((|#$T0@@134| T@U) (|#$T1@@118| T@U) (|#$T2@@80| T@U) (|#$R@@160| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@134|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$R@@160|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLLO |#$T0@@134| |#$T1@@118| |#$T2@@80| |#$R@@160|)) Tagclass._System.___hPartialFunc3LLLO) (= (TagFamily (Tclass._System.___hPartialFunc3LLLO |#$T0@@134| |#$T1@@118| |#$T2@@80| |#$R@@160|)) |tytagFamily$_#PartialFunc3LLLO|))) :qid |unknown.0:0| :skolemid |1064| :pattern ( (Tclass._System.___hPartialFunc3LLLO |#$T0@@134| |#$T1@@118| |#$T2@@80| |#$R@@160|)) )))
(assert (forall ((arg0@@281 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLLO_0 arg0@@281)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLLO_0| :pattern ( (Tclass._System.___hPartialFunc3LLLO_0 arg0@@281)) )))
(assert (forall ((|#$T0@@135| T@U) (|#$T1@@119| T@U) (|#$T2@@81| T@U) (|#$R@@161| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@135|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$R@@161|) TyType)) (= (Tclass._System.___hPartialFunc3LLLO_0 (Tclass._System.___hPartialFunc3LLLO |#$T0@@135| |#$T1@@119| |#$T2@@81| |#$R@@161|)) |#$T0@@135|)) :qid |unknown.0:0| :skolemid |1065| :pattern ( (Tclass._System.___hPartialFunc3LLLO |#$T0@@135| |#$T1@@119| |#$T2@@81| |#$R@@161|)) )))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLLO_1 arg0@@282)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLLO_1| :pattern ( (Tclass._System.___hPartialFunc3LLLO_1 arg0@@282)) )))
(assert (forall ((|#$T0@@136| T@U) (|#$T1@@120| T@U) (|#$T2@@82| T@U) (|#$R@@162| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@136|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$R@@162|) TyType)) (= (Tclass._System.___hPartialFunc3LLLO_1 (Tclass._System.___hPartialFunc3LLLO |#$T0@@136| |#$T1@@120| |#$T2@@82| |#$R@@162|)) |#$T1@@120|)) :qid |unknown.0:0| :skolemid |1066| :pattern ( (Tclass._System.___hPartialFunc3LLLO |#$T0@@136| |#$T1@@120| |#$T2@@82| |#$R@@162|)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLLO_2 arg0@@283)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLLO_2| :pattern ( (Tclass._System.___hPartialFunc3LLLO_2 arg0@@283)) )))
(assert (forall ((|#$T0@@137| T@U) (|#$T1@@121| T@U) (|#$T2@@83| T@U) (|#$R@@163| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@137|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$R@@163|) TyType)) (= (Tclass._System.___hPartialFunc3LLLO_2 (Tclass._System.___hPartialFunc3LLLO |#$T0@@137| |#$T1@@121| |#$T2@@83| |#$R@@163|)) |#$T2@@83|)) :qid |unknown.0:0| :skolemid |1067| :pattern ( (Tclass._System.___hPartialFunc3LLLO |#$T0@@137| |#$T1@@121| |#$T2@@83| |#$R@@163|)) )))
(assert (forall ((arg0@@284 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLLO_3 arg0@@284)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLLO_3| :pattern ( (Tclass._System.___hPartialFunc3LLLO_3 arg0@@284)) )))
(assert (forall ((|#$T0@@138| T@U) (|#$T1@@122| T@U) (|#$T2@@84| T@U) (|#$R@@164| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@138|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$R@@164|) TyType)) (= (Tclass._System.___hPartialFunc3LLLO_3 (Tclass._System.___hPartialFunc3LLLO |#$T0@@138| |#$T1@@122| |#$T2@@84| |#$R@@164|)) |#$R@@164|)) :qid |unknown.0:0| :skolemid |1068| :pattern ( (Tclass._System.___hPartialFunc3LLLO |#$T0@@138| |#$T1@@122| |#$T2@@84| |#$R@@164|)) )))
(assert (forall ((|#$T0@@139| T@U) (|#$T1@@123| T@U) (|#$T2@@85| T@U) (|#$R@@165| T@U) (bx@@84 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@139|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$R@@165|) TyType)) (= (type bx@@84) BoxType)) ($IsBox bx@@84 (Tclass._System.___hPartialFunc3LLLO |#$T0@@139| |#$T1@@123| |#$T2@@85| |#$R@@165|))) (and (= ($Box ($Unbox HandleTypeType bx@@84)) bx@@84) ($Is ($Unbox HandleTypeType bx@@84) (Tclass._System.___hPartialFunc3LLLO |#$T0@@139| |#$T1@@123| |#$T2@@85| |#$R@@165|)))) :qid |unknown.0:0| :skolemid |1069| :pattern ( ($IsBox bx@@84 (Tclass._System.___hPartialFunc3LLLO |#$T0@@139| |#$T1@@123| |#$T2@@85| |#$R@@165|))) )))
(assert (forall ((|#$T0@@140| T@U) (|#$T1@@124| T@U) (|#$T2@@86| T@U) (|#$R@@166| T@U) (|f#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@140|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$R@@166|) TyType)) (= (type |f#0@@31|) HandleTypeType)) (= ($Is |f#0@@31| (Tclass._System.___hPartialFunc3LLLO |#$T0@@140| |#$T1@@124| |#$T2@@86| |#$R@@166|))  (and ($Is |f#0@@31| (Tclass._System.___hFunc3LLLO |#$T0@@140| |#$T1@@124| |#$T2@@86| |#$R@@166|)) (forall ((|x0#0@@11| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (and (and ($IsBox |x0#0@@11| |#$T0@@140|) ($IsBox |x1#0@@9| |#$T1@@124|)) ($IsBox |x2#0@@5| |#$T2@@86|))) (|Set#Equal| (Reads3 |#$T0@@140| |#$T1@@124| |#$T2@@86| |#$R@@166| $OneHeap |f#0@@31| |x0#0@@11| |x1#0@@9| |x2#0@@5|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1070| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) ))))) :qid |unknown.0:0| :skolemid |1071| :pattern ( ($Is |f#0@@31| (Tclass._System.___hPartialFunc3LLLO |#$T0@@140| |#$T1@@124| |#$T2@@86| |#$R@@166|))) )))
(assert (forall ((|#$T0@@141| T@U) (|#$T1@@125| T@U) (|#$T2@@87| T@U) (|#$R@@167| T@U) (|f#0@@32| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@141|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$R@@167|) TyType)) (= (type |f#0@@32|) HandleTypeType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc3LLLO |#$T0@@141| |#$T1@@125| |#$T2@@87| |#$R@@167|) $h@@24) ($IsAlloc |f#0@@32| (Tclass._System.___hFunc3LLLO |#$T0@@141| |#$T1@@125| |#$T2@@87| |#$R@@167|) $h@@24))) :qid |unknown.0:0| :skolemid |1072| :pattern ( ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc3LLLO |#$T0@@141| |#$T1@@125| |#$T2@@87| |#$R@@167|) $h@@24)) )))
(assert (forall ((arg0@@285 T@U) (arg1@@130 T@U) (arg2@@82 T@U) (arg3@@56 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLLO arg0@@285 arg1@@130 arg2@@82 arg3@@56)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLLO| :pattern ( (Tclass._System.___hTotalFunc3LLLO arg0@@285 arg1@@130 arg2@@82 arg3@@56)) )))
(assert (forall ((|#$T0@@142| T@U) (|#$T1@@126| T@U) (|#$T2@@88| T@U) (|#$R@@168| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@142|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$R@@168|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLLO |#$T0@@142| |#$T1@@126| |#$T2@@88| |#$R@@168|)) Tagclass._System.___hTotalFunc3LLLO) (= (TagFamily (Tclass._System.___hTotalFunc3LLLO |#$T0@@142| |#$T1@@126| |#$T2@@88| |#$R@@168|)) |tytagFamily$_#TotalFunc3LLLO|))) :qid |unknown.0:0| :skolemid |1073| :pattern ( (Tclass._System.___hTotalFunc3LLLO |#$T0@@142| |#$T1@@126| |#$T2@@88| |#$R@@168|)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLLO_0 arg0@@286)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLLO_0| :pattern ( (Tclass._System.___hTotalFunc3LLLO_0 arg0@@286)) )))
(assert (forall ((|#$T0@@143| T@U) (|#$T1@@127| T@U) (|#$T2@@89| T@U) (|#$R@@169| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@143|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$R@@169|) TyType)) (= (Tclass._System.___hTotalFunc3LLLO_0 (Tclass._System.___hTotalFunc3LLLO |#$T0@@143| |#$T1@@127| |#$T2@@89| |#$R@@169|)) |#$T0@@143|)) :qid |unknown.0:0| :skolemid |1074| :pattern ( (Tclass._System.___hTotalFunc3LLLO |#$T0@@143| |#$T1@@127| |#$T2@@89| |#$R@@169|)) )))
(assert (forall ((arg0@@287 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLLO_1 arg0@@287)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLLO_1| :pattern ( (Tclass._System.___hTotalFunc3LLLO_1 arg0@@287)) )))
(assert (forall ((|#$T0@@144| T@U) (|#$T1@@128| T@U) (|#$T2@@90| T@U) (|#$R@@170| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@144|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$T2@@90|) TyType)) (= (type |#$R@@170|) TyType)) (= (Tclass._System.___hTotalFunc3LLLO_1 (Tclass._System.___hTotalFunc3LLLO |#$T0@@144| |#$T1@@128| |#$T2@@90| |#$R@@170|)) |#$T1@@128|)) :qid |unknown.0:0| :skolemid |1075| :pattern ( (Tclass._System.___hTotalFunc3LLLO |#$T0@@144| |#$T1@@128| |#$T2@@90| |#$R@@170|)) )))
(assert (forall ((arg0@@288 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLLO_2 arg0@@288)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLLO_2| :pattern ( (Tclass._System.___hTotalFunc3LLLO_2 arg0@@288)) )))
(assert (forall ((|#$T0@@145| T@U) (|#$T1@@129| T@U) (|#$T2@@91| T@U) (|#$R@@171| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@145|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$T2@@91|) TyType)) (= (type |#$R@@171|) TyType)) (= (Tclass._System.___hTotalFunc3LLLO_2 (Tclass._System.___hTotalFunc3LLLO |#$T0@@145| |#$T1@@129| |#$T2@@91| |#$R@@171|)) |#$T2@@91|)) :qid |unknown.0:0| :skolemid |1076| :pattern ( (Tclass._System.___hTotalFunc3LLLO |#$T0@@145| |#$T1@@129| |#$T2@@91| |#$R@@171|)) )))
(assert (forall ((arg0@@289 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLLO_3 arg0@@289)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLLO_3| :pattern ( (Tclass._System.___hTotalFunc3LLLO_3 arg0@@289)) )))
(assert (forall ((|#$T0@@146| T@U) (|#$T1@@130| T@U) (|#$T2@@92| T@U) (|#$R@@172| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@146|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$T2@@92|) TyType)) (= (type |#$R@@172|) TyType)) (= (Tclass._System.___hTotalFunc3LLLO_3 (Tclass._System.___hTotalFunc3LLLO |#$T0@@146| |#$T1@@130| |#$T2@@92| |#$R@@172|)) |#$R@@172|)) :qid |unknown.0:0| :skolemid |1077| :pattern ( (Tclass._System.___hTotalFunc3LLLO |#$T0@@146| |#$T1@@130| |#$T2@@92| |#$R@@172|)) )))
(assert (forall ((|#$T0@@147| T@U) (|#$T1@@131| T@U) (|#$T2@@93| T@U) (|#$R@@173| T@U) (bx@@85 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@147|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$T2@@93|) TyType)) (= (type |#$R@@173|) TyType)) (= (type bx@@85) BoxType)) ($IsBox bx@@85 (Tclass._System.___hTotalFunc3LLLO |#$T0@@147| |#$T1@@131| |#$T2@@93| |#$R@@173|))) (and (= ($Box ($Unbox HandleTypeType bx@@85)) bx@@85) ($Is ($Unbox HandleTypeType bx@@85) (Tclass._System.___hTotalFunc3LLLO |#$T0@@147| |#$T1@@131| |#$T2@@93| |#$R@@173|)))) :qid |unknown.0:0| :skolemid |1078| :pattern ( ($IsBox bx@@85 (Tclass._System.___hTotalFunc3LLLO |#$T0@@147| |#$T1@@131| |#$T2@@93| |#$R@@173|))) )))
(assert (forall ((|#$T0@@148| T@U) (|#$T1@@132| T@U) (|#$T2@@94| T@U) (|#$R@@174| T@U) (|f#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@148|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$T2@@94|) TyType)) (= (type |#$R@@174|) TyType)) (= (type |f#0@@33|) HandleTypeType)) (= ($Is |f#0@@33| (Tclass._System.___hTotalFunc3LLLO |#$T0@@148| |#$T1@@132| |#$T2@@94| |#$R@@174|))  (and ($Is |f#0@@33| (Tclass._System.___hPartialFunc3LLLO |#$T0@@148| |#$T1@@132| |#$T2@@94| |#$R@@174|)) (forall ((|x0#0@@12| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (and (and ($IsBox |x0#0@@12| |#$T0@@148|) ($IsBox |x1#0@@10| |#$T1@@132|)) ($IsBox |x2#0@@6| |#$T2@@94|))) (Requires3 |#$T0@@148| |#$T1@@132| |#$T2@@94| |#$R@@174| $OneHeap |f#0@@33| |x0#0@@12| |x1#0@@10| |x2#0@@6|)) :qid |unknown.0:0| :skolemid |1079| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) ))))) :qid |unknown.0:0| :skolemid |1080| :pattern ( ($Is |f#0@@33| (Tclass._System.___hTotalFunc3LLLO |#$T0@@148| |#$T1@@132| |#$T2@@94| |#$R@@174|))) )))
(assert (forall ((|#$T0@@149| T@U) (|#$T1@@133| T@U) (|#$T2@@95| T@U) (|#$R@@175| T@U) (|f#0@@34| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@149|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$T2@@95|) TyType)) (= (type |#$R@@175|) TyType)) (= (type |f#0@@34|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc3LLLO |#$T0@@149| |#$T1@@133| |#$T2@@95| |#$R@@175|) $h@@25) ($IsAlloc |f#0@@34| (Tclass._System.___hPartialFunc3LLLO |#$T0@@149| |#$T1@@133| |#$T2@@95| |#$R@@175|) $h@@25))) :qid |unknown.0:0| :skolemid |1081| :pattern ( ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc3LLLO |#$T0@@149| |#$T1@@133| |#$T2@@95| |#$R@@175|) $h@@25)) )))
(assert (forall ((arg0@@290 T@U) (arg1@@131 T@U) (arg2@@83 T@U) (arg3@@57 T@U) (arg4@@43 T@U) (arg5@@30 T@U) (arg6@@18 T@U) ) (! (= (type (Tclass._System.___hFunc6 arg0@@290 arg1@@131 arg2@@83 arg3@@57 arg4@@43 arg5@@30 arg6@@18)) TyType) :qid |funType:Tclass._System.___hFunc6| :pattern ( (Tclass._System.___hFunc6 arg0@@290 arg1@@131 arg2@@83 arg3@@57 arg4@@43 arg5@@30 arg6@@18)) )))
(assert (forall ((|#$T0@@150| T@U) (|#$T1@@134| T@U) (|#$T2@@96| T@U) (|#$T3@@52| T@U) (|#$T4@@27| T@U) (|#$T5| T@U) (|#$R@@176| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@150|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$T2@@96|) TyType)) (= (type |#$T3@@52|) TyType)) (= (type |#$T4@@27|) TyType)) (= (type |#$T5|) TyType)) (= (type |#$R@@176|) TyType)) (and (= (Tag (Tclass._System.___hFunc6 |#$T0@@150| |#$T1@@134| |#$T2@@96| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@176|)) Tagclass._System.___hFunc6) (= (TagFamily (Tclass._System.___hFunc6 |#$T0@@150| |#$T1@@134| |#$T2@@96| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@176|)) |tytagFamily$_#Func6|))) :qid |unknown.0:0| :skolemid |1082| :pattern ( (Tclass._System.___hFunc6 |#$T0@@150| |#$T1@@134| |#$T2@@96| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@176|)) )))
(assert (forall ((arg0@@291 T@U) ) (! (= (type (Tclass._System.___hFunc6_0 arg0@@291)) TyType) :qid |funType:Tclass._System.___hFunc6_0| :pattern ( (Tclass._System.___hFunc6_0 arg0@@291)) )))
(assert (forall ((|#$T0@@151| T@U) (|#$T1@@135| T@U) (|#$T2@@97| T@U) (|#$T3@@53| T@U) (|#$T4@@28| T@U) (|#$T5@@0| T@U) (|#$R@@177| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@151|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$T2@@97|) TyType)) (= (type |#$T3@@53|) TyType)) (= (type |#$T4@@28|) TyType)) (= (type |#$T5@@0|) TyType)) (= (type |#$R@@177|) TyType)) (= (Tclass._System.___hFunc6_0 (Tclass._System.___hFunc6 |#$T0@@151| |#$T1@@135| |#$T2@@97| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@177|)) |#$T0@@151|)) :qid |unknown.0:0| :skolemid |1083| :pattern ( (Tclass._System.___hFunc6 |#$T0@@151| |#$T1@@135| |#$T2@@97| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@177|)) )))
(assert (forall ((arg0@@292 T@U) ) (! (= (type (Tclass._System.___hFunc6_1 arg0@@292)) TyType) :qid |funType:Tclass._System.___hFunc6_1| :pattern ( (Tclass._System.___hFunc6_1 arg0@@292)) )))
(assert (forall ((|#$T0@@152| T@U) (|#$T1@@136| T@U) (|#$T2@@98| T@U) (|#$T3@@54| T@U) (|#$T4@@29| T@U) (|#$T5@@1| T@U) (|#$R@@178| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@152|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$T2@@98|) TyType)) (= (type |#$T3@@54|) TyType)) (= (type |#$T4@@29|) TyType)) (= (type |#$T5@@1|) TyType)) (= (type |#$R@@178|) TyType)) (= (Tclass._System.___hFunc6_1 (Tclass._System.___hFunc6 |#$T0@@152| |#$T1@@136| |#$T2@@98| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@178|)) |#$T1@@136|)) :qid |unknown.0:0| :skolemid |1084| :pattern ( (Tclass._System.___hFunc6 |#$T0@@152| |#$T1@@136| |#$T2@@98| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@178|)) )))
(assert (forall ((arg0@@293 T@U) ) (! (= (type (Tclass._System.___hFunc6_2 arg0@@293)) TyType) :qid |funType:Tclass._System.___hFunc6_2| :pattern ( (Tclass._System.___hFunc6_2 arg0@@293)) )))
(assert (forall ((|#$T0@@153| T@U) (|#$T1@@137| T@U) (|#$T2@@99| T@U) (|#$T3@@55| T@U) (|#$T4@@30| T@U) (|#$T5@@2| T@U) (|#$R@@179| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@153|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$T2@@99|) TyType)) (= (type |#$T3@@55|) TyType)) (= (type |#$T4@@30|) TyType)) (= (type |#$T5@@2|) TyType)) (= (type |#$R@@179|) TyType)) (= (Tclass._System.___hFunc6_2 (Tclass._System.___hFunc6 |#$T0@@153| |#$T1@@137| |#$T2@@99| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@179|)) |#$T2@@99|)) :qid |unknown.0:0| :skolemid |1085| :pattern ( (Tclass._System.___hFunc6 |#$T0@@153| |#$T1@@137| |#$T2@@99| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@179|)) )))
(assert (forall ((arg0@@294 T@U) ) (! (= (type (Tclass._System.___hFunc6_3 arg0@@294)) TyType) :qid |funType:Tclass._System.___hFunc6_3| :pattern ( (Tclass._System.___hFunc6_3 arg0@@294)) )))
(assert (forall ((|#$T0@@154| T@U) (|#$T1@@138| T@U) (|#$T2@@100| T@U) (|#$T3@@56| T@U) (|#$T4@@31| T@U) (|#$T5@@3| T@U) (|#$R@@180| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@154|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$T2@@100|) TyType)) (= (type |#$T3@@56|) TyType)) (= (type |#$T4@@31|) TyType)) (= (type |#$T5@@3|) TyType)) (= (type |#$R@@180|) TyType)) (= (Tclass._System.___hFunc6_3 (Tclass._System.___hFunc6 |#$T0@@154| |#$T1@@138| |#$T2@@100| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@180|)) |#$T3@@56|)) :qid |unknown.0:0| :skolemid |1086| :pattern ( (Tclass._System.___hFunc6 |#$T0@@154| |#$T1@@138| |#$T2@@100| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@180|)) )))
(assert (forall ((arg0@@295 T@U) ) (! (= (type (Tclass._System.___hFunc6_4 arg0@@295)) TyType) :qid |funType:Tclass._System.___hFunc6_4| :pattern ( (Tclass._System.___hFunc6_4 arg0@@295)) )))
(assert (forall ((|#$T0@@155| T@U) (|#$T1@@139| T@U) (|#$T2@@101| T@U) (|#$T3@@57| T@U) (|#$T4@@32| T@U) (|#$T5@@4| T@U) (|#$R@@181| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@155|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$T2@@101|) TyType)) (= (type |#$T3@@57|) TyType)) (= (type |#$T4@@32|) TyType)) (= (type |#$T5@@4|) TyType)) (= (type |#$R@@181|) TyType)) (= (Tclass._System.___hFunc6_4 (Tclass._System.___hFunc6 |#$T0@@155| |#$T1@@139| |#$T2@@101| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@181|)) |#$T4@@32|)) :qid |unknown.0:0| :skolemid |1087| :pattern ( (Tclass._System.___hFunc6 |#$T0@@155| |#$T1@@139| |#$T2@@101| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@181|)) )))
(assert (forall ((arg0@@296 T@U) ) (! (= (type (Tclass._System.___hFunc6_5 arg0@@296)) TyType) :qid |funType:Tclass._System.___hFunc6_5| :pattern ( (Tclass._System.___hFunc6_5 arg0@@296)) )))
(assert (forall ((|#$T0@@156| T@U) (|#$T1@@140| T@U) (|#$T2@@102| T@U) (|#$T3@@58| T@U) (|#$T4@@33| T@U) (|#$T5@@5| T@U) (|#$R@@182| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@156|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$T2@@102|) TyType)) (= (type |#$T3@@58|) TyType)) (= (type |#$T4@@33|) TyType)) (= (type |#$T5@@5|) TyType)) (= (type |#$R@@182|) TyType)) (= (Tclass._System.___hFunc6_5 (Tclass._System.___hFunc6 |#$T0@@156| |#$T1@@140| |#$T2@@102| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@182|)) |#$T5@@5|)) :qid |unknown.0:0| :skolemid |1088| :pattern ( (Tclass._System.___hFunc6 |#$T0@@156| |#$T1@@140| |#$T2@@102| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@182|)) )))
(assert (forall ((arg0@@297 T@U) ) (! (= (type (Tclass._System.___hFunc6_6 arg0@@297)) TyType) :qid |funType:Tclass._System.___hFunc6_6| :pattern ( (Tclass._System.___hFunc6_6 arg0@@297)) )))
(assert (forall ((|#$T0@@157| T@U) (|#$T1@@141| T@U) (|#$T2@@103| T@U) (|#$T3@@59| T@U) (|#$T4@@34| T@U) (|#$T5@@6| T@U) (|#$R@@183| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@157|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$T2@@103|) TyType)) (= (type |#$T3@@59|) TyType)) (= (type |#$T4@@34|) TyType)) (= (type |#$T5@@6|) TyType)) (= (type |#$R@@183|) TyType)) (= (Tclass._System.___hFunc6_6 (Tclass._System.___hFunc6 |#$T0@@157| |#$T1@@141| |#$T2@@103| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@183|)) |#$R@@183|)) :qid |unknown.0:0| :skolemid |1089| :pattern ( (Tclass._System.___hFunc6 |#$T0@@157| |#$T1@@141| |#$T2@@103| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@183|)) )))
(assert (forall ((|#$T0@@158| T@U) (|#$T1@@142| T@U) (|#$T2@@104| T@U) (|#$T3@@60| T@U) (|#$T4@@35| T@U) (|#$T5@@7| T@U) (|#$R@@184| T@U) (bx@@86 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@158|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$T2@@104|) TyType)) (= (type |#$T3@@60|) TyType)) (= (type |#$T4@@35|) TyType)) (= (type |#$T5@@7|) TyType)) (= (type |#$R@@184|) TyType)) (= (type bx@@86) BoxType)) ($IsBox bx@@86 (Tclass._System.___hFunc6 |#$T0@@158| |#$T1@@142| |#$T2@@104| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@184|))) (and (= ($Box ($Unbox HandleTypeType bx@@86)) bx@@86) ($Is ($Unbox HandleTypeType bx@@86) (Tclass._System.___hFunc6 |#$T0@@158| |#$T1@@142| |#$T2@@104| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@184|)))) :qid |unknown.0:0| :skolemid |1090| :pattern ( ($IsBox bx@@86 (Tclass._System.___hFunc6 |#$T0@@158| |#$T1@@142| |#$T2@@104| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@184|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@298 T@T) (arg1@@132 T@T) (arg2@@84 T@T) (arg3@@58 T@T) (arg4@@44 T@T) (arg5@@31 T@T) (arg6@@19 T@T) (arg7@@6 T@T) ) (! (= (Ctor (MapType7Type arg0@@298 arg1@@132 arg2@@84 arg3@@58 arg4@@44 arg5@@31 arg6@@19 arg7@@6)) 29) :qid |ctor:MapType7Type| )) (forall ((arg0@@299 T@T) (arg1@@133 T@T) (arg2@@85 T@T) (arg3@@59 T@T) (arg4@@45 T@T) (arg5@@32 T@T) (arg6@@20 T@T) (arg7@@7 T@T) ) (! (= (MapType7TypeInv0 (MapType7Type arg0@@299 arg1@@133 arg2@@85 arg3@@59 arg4@@45 arg5@@32 arg6@@20 arg7@@7)) arg0@@299) :qid |typeInv:MapType7TypeInv0| :pattern ( (MapType7Type arg0@@299 arg1@@133 arg2@@85 arg3@@59 arg4@@45 arg5@@32 arg6@@20 arg7@@7)) ))) (forall ((arg0@@300 T@T) (arg1@@134 T@T) (arg2@@86 T@T) (arg3@@60 T@T) (arg4@@46 T@T) (arg5@@33 T@T) (arg6@@21 T@T) (arg7@@8 T@T) ) (! (= (MapType7TypeInv1 (MapType7Type arg0@@300 arg1@@134 arg2@@86 arg3@@60 arg4@@46 arg5@@33 arg6@@21 arg7@@8)) arg1@@134) :qid |typeInv:MapType7TypeInv1| :pattern ( (MapType7Type arg0@@300 arg1@@134 arg2@@86 arg3@@60 arg4@@46 arg5@@33 arg6@@21 arg7@@8)) ))) (forall ((arg0@@301 T@T) (arg1@@135 T@T) (arg2@@87 T@T) (arg3@@61 T@T) (arg4@@47 T@T) (arg5@@34 T@T) (arg6@@22 T@T) (arg7@@9 T@T) ) (! (= (MapType7TypeInv2 (MapType7Type arg0@@301 arg1@@135 arg2@@87 arg3@@61 arg4@@47 arg5@@34 arg6@@22 arg7@@9)) arg2@@87) :qid |typeInv:MapType7TypeInv2| :pattern ( (MapType7Type arg0@@301 arg1@@135 arg2@@87 arg3@@61 arg4@@47 arg5@@34 arg6@@22 arg7@@9)) ))) (forall ((arg0@@302 T@T) (arg1@@136 T@T) (arg2@@88 T@T) (arg3@@62 T@T) (arg4@@48 T@T) (arg5@@35 T@T) (arg6@@23 T@T) (arg7@@10 T@T) ) (! (= (MapType7TypeInv3 (MapType7Type arg0@@302 arg1@@136 arg2@@88 arg3@@62 arg4@@48 arg5@@35 arg6@@23 arg7@@10)) arg3@@62) :qid |typeInv:MapType7TypeInv3| :pattern ( (MapType7Type arg0@@302 arg1@@136 arg2@@88 arg3@@62 arg4@@48 arg5@@35 arg6@@23 arg7@@10)) ))) (forall ((arg0@@303 T@T) (arg1@@137 T@T) (arg2@@89 T@T) (arg3@@63 T@T) (arg4@@49 T@T) (arg5@@36 T@T) (arg6@@24 T@T) (arg7@@11 T@T) ) (! (= (MapType7TypeInv4 (MapType7Type arg0@@303 arg1@@137 arg2@@89 arg3@@63 arg4@@49 arg5@@36 arg6@@24 arg7@@11)) arg4@@49) :qid |typeInv:MapType7TypeInv4| :pattern ( (MapType7Type arg0@@303 arg1@@137 arg2@@89 arg3@@63 arg4@@49 arg5@@36 arg6@@24 arg7@@11)) ))) (forall ((arg0@@304 T@T) (arg1@@138 T@T) (arg2@@90 T@T) (arg3@@64 T@T) (arg4@@50 T@T) (arg5@@37 T@T) (arg6@@25 T@T) (arg7@@12 T@T) ) (! (= (MapType7TypeInv5 (MapType7Type arg0@@304 arg1@@138 arg2@@90 arg3@@64 arg4@@50 arg5@@37 arg6@@25 arg7@@12)) arg5@@37) :qid |typeInv:MapType7TypeInv5| :pattern ( (MapType7Type arg0@@304 arg1@@138 arg2@@90 arg3@@64 arg4@@50 arg5@@37 arg6@@25 arg7@@12)) ))) (forall ((arg0@@305 T@T) (arg1@@139 T@T) (arg2@@91 T@T) (arg3@@65 T@T) (arg4@@51 T@T) (arg5@@38 T@T) (arg6@@26 T@T) (arg7@@13 T@T) ) (! (= (MapType7TypeInv6 (MapType7Type arg0@@305 arg1@@139 arg2@@91 arg3@@65 arg4@@51 arg5@@38 arg6@@26 arg7@@13)) arg6@@26) :qid |typeInv:MapType7TypeInv6| :pattern ( (MapType7Type arg0@@305 arg1@@139 arg2@@91 arg3@@65 arg4@@51 arg5@@38 arg6@@26 arg7@@13)) ))) (forall ((arg0@@306 T@T) (arg1@@140 T@T) (arg2@@92 T@T) (arg3@@66 T@T) (arg4@@52 T@T) (arg5@@39 T@T) (arg6@@27 T@T) (arg7@@14 T@T) ) (! (= (MapType7TypeInv7 (MapType7Type arg0@@306 arg1@@140 arg2@@92 arg3@@66 arg4@@52 arg5@@39 arg6@@27 arg7@@14)) arg7@@14) :qid |typeInv:MapType7TypeInv7| :pattern ( (MapType7Type arg0@@306 arg1@@140 arg2@@92 arg3@@66 arg4@@52 arg5@@39 arg6@@27 arg7@@14)) ))) (forall ((arg0@@307 T@U) (arg1@@141 T@U) (arg2@@93 T@U) (arg3@@67 T@U) (arg4@@53 T@U) (arg5@@40 T@U) (arg6@@28 T@U) (arg7@@15 T@U) ) (! (let ((aVar7 (MapType7TypeInv7 (type arg0@@307)))) (= (type (MapType7Select arg0@@307 arg1@@141 arg2@@93 arg3@@67 arg4@@53 arg5@@40 arg6@@28 arg7@@15)) aVar7)) :qid |funType:MapType7Select| :pattern ( (MapType7Select arg0@@307 arg1@@141 arg2@@93 arg3@@67 arg4@@53 arg5@@40 arg6@@28 arg7@@15)) ))) (forall ((arg0@@308 T@U) (arg1@@142 T@U) (arg2@@94 T@U) (arg3@@68 T@U) (arg4@@54 T@U) (arg5@@41 T@U) (arg6@@29 T@U) (arg7@@16 T@U) (arg8@@5 T@U) ) (! (let ((aVar7@@0 (type arg8@@5))) (let ((aVar6@@2 (type arg7@@16))) (let ((aVar5@@3 (type arg6@@29))) (let ((aVar4@@4 (type arg5@@41))) (let ((aVar3@@5 (type arg4@@54))) (let ((aVar2@@6 (type arg3@@68))) (let ((aVar1@@7 (type arg2@@94))) (let ((aVar0@@5 (type arg1@@142))) (= (type (MapType7Store arg0@@308 arg1@@142 arg2@@94 arg3@@68 arg4@@54 arg5@@41 arg6@@29 arg7@@16 arg8@@5)) (MapType7Type aVar0@@5 aVar1@@7 aVar2@@6 aVar3@@5 aVar4@@4 aVar5@@3 aVar6@@2 aVar7@@0)))))))))) :qid |funType:MapType7Store| :pattern ( (MapType7Store arg0@@308 arg1@@142 arg2@@94 arg3@@68 arg4@@54 arg5@@41 arg6@@29 arg7@@16 arg8@@5)) ))) (forall ((m@@75 T@U) (x0@@35 T@U) (x1@@29 T@U) (x2@@25 T@U) (x3@@20 T@U) (x4@@14 T@U) (x5@@7 T@U) (x6 T@U) (val@@36 T@U) ) (! (let ((aVar7@@1 (MapType7TypeInv7 (type m@@75)))) (=> (= (type val@@36) aVar7@@1) (= (MapType7Select (MapType7Store m@@75 x0@@35 x1@@29 x2@@25 x3@@20 x4@@14 x5@@7 x6 val@@36) x0@@35 x1@@29 x2@@25 x3@@20 x4@@14 x5@@7 x6) val@@36))) :qid |mapAx0:MapType7Select| :weight 0 ))) (and (and (and (and (and (and (and (forall ((val@@37 T@U) (m@@76 T@U) (x0@@36 T@U) (x1@@30 T@U) (x2@@26 T@U) (x3@@21 T@U) (x4@@15 T@U) (x5@@8 T@U) (x6@@0 T@U) (y0@@28 T@U) (y1@@24 T@U) (y2@@21 T@U) (y3@@17 T@U) (y4@@12 T@U) (y5@@6 T@U) (y6 T@U) ) (!  (or (= x0@@36 y0@@28) (= (MapType7Select (MapType7Store m@@76 x0@@36 x1@@30 x2@@26 x3@@21 x4@@15 x5@@8 x6@@0 val@@37) y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6) (MapType7Select m@@76 y0@@28 y1@@24 y2@@21 y3@@17 y4@@12 y5@@6 y6))) :qid |mapAx1:MapType7Select:0| :weight 0 )) (forall ((val@@38 T@U) (m@@77 T@U) (x0@@37 T@U) (x1@@31 T@U) (x2@@27 T@U) (x3@@22 T@U) (x4@@16 T@U) (x5@@9 T@U) (x6@@1 T@U) (y0@@29 T@U) (y1@@25 T@U) (y2@@22 T@U) (y3@@18 T@U) (y4@@13 T@U) (y5@@7 T@U) (y6@@0 T@U) ) (!  (or (= x1@@31 y1@@25) (= (MapType7Select (MapType7Store m@@77 x0@@37 x1@@31 x2@@27 x3@@22 x4@@16 x5@@9 x6@@1 val@@38) y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@0) (MapType7Select m@@77 y0@@29 y1@@25 y2@@22 y3@@18 y4@@13 y5@@7 y6@@0))) :qid |mapAx1:MapType7Select:1| :weight 0 ))) (forall ((val@@39 T@U) (m@@78 T@U) (x0@@38 T@U) (x1@@32 T@U) (x2@@28 T@U) (x3@@23 T@U) (x4@@17 T@U) (x5@@10 T@U) (x6@@2 T@U) (y0@@30 T@U) (y1@@26 T@U) (y2@@23 T@U) (y3@@19 T@U) (y4@@14 T@U) (y5@@8 T@U) (y6@@1 T@U) ) (!  (or (= x2@@28 y2@@23) (= (MapType7Select (MapType7Store m@@78 x0@@38 x1@@32 x2@@28 x3@@23 x4@@17 x5@@10 x6@@2 val@@39) y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@1) (MapType7Select m@@78 y0@@30 y1@@26 y2@@23 y3@@19 y4@@14 y5@@8 y6@@1))) :qid |mapAx1:MapType7Select:2| :weight 0 ))) (forall ((val@@40 T@U) (m@@79 T@U) (x0@@39 T@U) (x1@@33 T@U) (x2@@29 T@U) (x3@@24 T@U) (x4@@18 T@U) (x5@@11 T@U) (x6@@3 T@U) (y0@@31 T@U) (y1@@27 T@U) (y2@@24 T@U) (y3@@20 T@U) (y4@@15 T@U) (y5@@9 T@U) (y6@@2 T@U) ) (!  (or (= x3@@24 y3@@20) (= (MapType7Select (MapType7Store m@@79 x0@@39 x1@@33 x2@@29 x3@@24 x4@@18 x5@@11 x6@@3 val@@40) y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@2) (MapType7Select m@@79 y0@@31 y1@@27 y2@@24 y3@@20 y4@@15 y5@@9 y6@@2))) :qid |mapAx1:MapType7Select:3| :weight 0 ))) (forall ((val@@41 T@U) (m@@80 T@U) (x0@@40 T@U) (x1@@34 T@U) (x2@@30 T@U) (x3@@25 T@U) (x4@@19 T@U) (x5@@12 T@U) (x6@@4 T@U) (y0@@32 T@U) (y1@@28 T@U) (y2@@25 T@U) (y3@@21 T@U) (y4@@16 T@U) (y5@@10 T@U) (y6@@3 T@U) ) (!  (or (= x4@@19 y4@@16) (= (MapType7Select (MapType7Store m@@80 x0@@40 x1@@34 x2@@30 x3@@25 x4@@19 x5@@12 x6@@4 val@@41) y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@3) (MapType7Select m@@80 y0@@32 y1@@28 y2@@25 y3@@21 y4@@16 y5@@10 y6@@3))) :qid |mapAx1:MapType7Select:4| :weight 0 ))) (forall ((val@@42 T@U) (m@@81 T@U) (x0@@41 T@U) (x1@@35 T@U) (x2@@31 T@U) (x3@@26 T@U) (x4@@20 T@U) (x5@@13 T@U) (x6@@5 T@U) (y0@@33 T@U) (y1@@29 T@U) (y2@@26 T@U) (y3@@22 T@U) (y4@@17 T@U) (y5@@11 T@U) (y6@@4 T@U) ) (!  (or (= x5@@13 y5@@11) (= (MapType7Select (MapType7Store m@@81 x0@@41 x1@@35 x2@@31 x3@@26 x4@@20 x5@@13 x6@@5 val@@42) y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@4) (MapType7Select m@@81 y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@4))) :qid |mapAx1:MapType7Select:5| :weight 0 ))) (forall ((val@@43 T@U) (m@@82 T@U) (x0@@42 T@U) (x1@@36 T@U) (x2@@32 T@U) (x3@@27 T@U) (x4@@21 T@U) (x5@@14 T@U) (x6@@6 T@U) (y0@@34 T@U) (y1@@30 T@U) (y2@@27 T@U) (y3@@23 T@U) (y4@@18 T@U) (y5@@12 T@U) (y6@@5 T@U) ) (!  (or (= x6@@6 y6@@5) (= (MapType7Select (MapType7Store m@@82 x0@@42 x1@@36 x2@@32 x3@@27 x4@@21 x5@@14 x6@@6 val@@43) y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@5) (MapType7Select m@@82 y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@5))) :qid |mapAx1:MapType7Select:6| :weight 0 ))) (forall ((val@@44 T@U) (m@@83 T@U) (x0@@43 T@U) (x1@@37 T@U) (x2@@33 T@U) (x3@@28 T@U) (x4@@22 T@U) (x5@@15 T@U) (x6@@7 T@U) (y0@@35 T@U) (y1@@31 T@U) (y2@@28 T@U) (y3@@24 T@U) (y4@@19 T@U) (y5@@13 T@U) (y6@@6 T@U) ) (!  (or true (= (MapType7Select (MapType7Store m@@83 x0@@43 x1@@37 x2@@33 x3@@28 x4@@22 x5@@15 x6@@7 val@@44) y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@6) (MapType7Select m@@83 y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@6))) :qid |mapAx2:MapType7Select| :weight 0 )))) (forall ((arg0@@309 T@U) (arg1@@143 T@U) (arg2@@95 T@U) (arg3@@69 T@U) (arg4@@55 T@U) (arg5@@42 T@U) (arg6@@30 T@U) (arg7@@17 T@U) (arg8@@6 T@U) (arg9@@3 T@U) (arg10@@3 T@U) (arg11@@1 T@U) (arg12@@1 T@U) (arg13 T@U) (arg14 T@U) ) (! (= (type (Apply6 arg0@@309 arg1@@143 arg2@@95 arg3@@69 arg4@@55 arg5@@42 arg6@@30 arg7@@17 arg8@@6 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) BoxType) :qid |funType:Apply6| :pattern ( (Apply6 arg0@@309 arg1@@143 arg2@@95 arg3@@69 arg4@@55 arg5@@42 arg6@@30 arg7@@17 arg8@@6 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) ))) (forall ((arg0@@310 T@U) (arg1@@144 T@U) (arg2@@96 T@U) ) (! (= (type (Handle6 arg0@@310 arg1@@144 arg2@@96)) HandleTypeType) :qid |funType:Handle6| :pattern ( (Handle6 arg0@@310 arg1@@144 arg2@@96)) ))))
(assert (forall ((t0@@106 T@U) (t1@@82 T@U) (t2@@59 T@U) (t3@@44 T@U) (t4@@29 T@U) (t5@@14 T@U) (t6 T@U) (heap@@31 T@U) (h@@57 T@U) (r@@30 T@U) (rd@@17 T@U) (bx0@@69 T@U) (bx1@@55 T@U) (bx2@@41 T@U) (bx3@@27 T@U) (bx4@@13 T@U) (bx5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@106) TyType) (= (type t1@@82) TyType)) (= (type t2@@59) TyType)) (= (type t3@@44) TyType)) (= (type t4@@29) TyType)) (= (type t5@@14) TyType)) (= (type t6) TyType)) (= (type heap@@31) (MapType0Type refType MapType1Type))) (= (type h@@57) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@30) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@17) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@69) BoxType)) (= (type bx1@@55) BoxType)) (= (type bx2@@41) BoxType)) (= (type bx3@@27) BoxType)) (= (type bx4@@13) BoxType)) (= (type bx5) BoxType)) (= (Apply6 t0@@106 t1@@82 t2@@59 t3@@44 t4@@29 t5@@14 t6 heap@@31 (Handle6 h@@57 r@@30 rd@@17) bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5) (MapType7Select h@@57 heap@@31 bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5))) :qid |unknown.0:0| :skolemid |1091| :pattern ( (Apply6 t0@@106 t1@@82 t2@@59 t3@@44 t4@@29 t5@@14 t6 heap@@31 (Handle6 h@@57 r@@30 rd@@17) bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5)) )))
(assert (forall ((t0@@107 T@U) (t1@@83 T@U) (t2@@60 T@U) (t3@@45 T@U) (t4@@30 T@U) (t5@@15 T@U) (t6@@0 T@U) (heap@@32 T@U) (h@@58 T@U) (r@@31 T@U) (rd@@18 T@U) (bx0@@70 T@U) (bx1@@56 T@U) (bx2@@42 T@U) (bx3@@28 T@U) (bx4@@14 T@U) (bx5@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@107) TyType) (= (type t1@@83) TyType)) (= (type t2@@60) TyType)) (= (type t3@@45) TyType)) (= (type t4@@30) TyType)) (= (type t5@@15) TyType)) (= (type t6@@0) TyType)) (= (type heap@@32) (MapType0Type refType MapType1Type))) (= (type h@@58) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@31) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@18) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@70) BoxType)) (= (type bx1@@56) BoxType)) (= (type bx2@@42) BoxType)) (= (type bx3@@28) BoxType)) (= (type bx4@@14) BoxType)) (= (type bx5@@0) BoxType)) (U_2_bool (MapType7Select r@@31 heap@@32 bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@0))) (Requires6 t0@@107 t1@@83 t2@@60 t3@@45 t4@@30 t5@@15 t6@@0 heap@@32 (Handle6 h@@58 r@@31 rd@@18) bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@0)) :qid |unknown.0:0| :skolemid |1092| :pattern ( (Requires6 t0@@107 t1@@83 t2@@60 t3@@45 t4@@30 t5@@15 t6@@0 heap@@32 (Handle6 h@@58 r@@31 rd@@18) bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@0)) )))
(assert (forall ((arg0@@311 T@U) (arg1@@145 T@U) (arg2@@97 T@U) (arg3@@70 T@U) (arg4@@56 T@U) (arg5@@43 T@U) (arg6@@31 T@U) (arg7@@18 T@U) (arg8@@7 T@U) (arg9@@4 T@U) (arg10@@4 T@U) (arg11@@2 T@U) (arg12@@2 T@U) (arg13@@0 T@U) (arg14@@0 T@U) ) (! (= (type (Reads6 arg0@@311 arg1@@145 arg2@@97 arg3@@70 arg4@@56 arg5@@43 arg6@@31 arg7@@18 arg8@@7 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads6| :pattern ( (Reads6 arg0@@311 arg1@@145 arg2@@97 arg3@@70 arg4@@56 arg5@@43 arg6@@31 arg7@@18 arg8@@7 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) )))
(assert (forall ((t0@@108 T@U) (t1@@84 T@U) (t2@@61 T@U) (t3@@46 T@U) (t4@@31 T@U) (t5@@16 T@U) (t6@@1 T@U) (heap@@33 T@U) (h@@59 T@U) (r@@32 T@U) (rd@@19 T@U) (bx0@@71 T@U) (bx1@@57 T@U) (bx2@@43 T@U) (bx3@@29 T@U) (bx4@@15 T@U) (bx5@@1 T@U) (bx@@87 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@108) TyType) (= (type t1@@84) TyType)) (= (type t2@@61) TyType)) (= (type t3@@46) TyType)) (= (type t4@@31) TyType)) (= (type t5@@16) TyType)) (= (type t6@@1) TyType)) (= (type heap@@33) (MapType0Type refType MapType1Type))) (= (type h@@59) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@32) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@19) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@71) BoxType)) (= (type bx1@@57) BoxType)) (= (type bx2@@43) BoxType)) (= (type bx3@@29) BoxType)) (= (type bx4@@15) BoxType)) (= (type bx5@@1) BoxType)) (= (type bx@@87) BoxType)) (= (U_2_bool (MapType0Select (Reads6 t0@@108 t1@@84 t2@@61 t3@@46 t4@@31 t5@@16 t6@@1 heap@@33 (Handle6 h@@59 r@@32 rd@@19) bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@1) bx@@87)) (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@1) bx@@87)))) :qid |unknown.0:0| :skolemid |1093| :pattern ( (MapType0Select (Reads6 t0@@108 t1@@84 t2@@61 t3@@46 t4@@31 t5@@16 t6@@1 heap@@33 (Handle6 h@@59 r@@32 rd@@19) bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@1) bx@@87)) )))
(assert (forall ((t0@@109 T@U) (t1@@85 T@U) (t2@@62 T@U) (t3@@47 T@U) (t4@@32 T@U) (t5@@17 T@U) (t6@@2 T@U) (h0@@36 T@U) (h1@@36 T@U) (f@@77 T@U) (bx0@@72 T@U) (bx1@@58 T@U) (bx2@@44 T@U) (bx3@@30 T@U) (bx4@@16 T@U) (bx5@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@109) TyType) (= (type t1@@85) TyType)) (= (type t2@@62) TyType)) (= (type t3@@47) TyType)) (= (type t4@@32) TyType)) (= (type t5@@17) TyType)) (= (type t6@@2) TyType)) (= (type h0@@36) (MapType0Type refType MapType1Type))) (= (type h1@@36) (MapType0Type refType MapType1Type))) (= (type f@@77) HandleTypeType)) (= (type bx0@@72) BoxType)) (= (type bx1@@58) BoxType)) (= (type bx2@@44) BoxType)) (= (type bx3@@30) BoxType)) (= (type bx4@@16) BoxType)) (= (type bx5@@2) BoxType)) (and (and (and ($HeapSucc h0@@36 h1@@36) (and ($IsGoodHeap h0@@36) ($IsGoodHeap h1@@36))) (and (and (and (and (and (and ($IsBox bx0@@72 t0@@109) ($IsBox bx1@@58 t1@@85)) ($IsBox bx2@@44 t2@@62)) ($IsBox bx3@@30 t3@@47)) ($IsBox bx4@@16 t4@@32)) ($IsBox bx5@@2 t5@@17)) ($Is f@@77 (Tclass._System.___hFunc6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2)))) (forall ((o@@80 T@U) (fld@@35 T@U) ) (! (let ((a@@118 (FieldTypeInv0 (type fld@@35)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@35) (FieldType a@@118))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h0@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@36 o@@80) fld@@35) (MapType1Select (MapType0Select h1@@36 o@@80) fld@@35)))) :qid |unknown.0:0| :skolemid |1094| :no-pattern (type o@@80) :no-pattern (type fld@@35) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@35) :no-pattern (U_2_bool fld@@35) )))) (= (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h0@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2) (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h1@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2))) :qid |unknown.0:0| :skolemid |1095| :pattern ( ($HeapSucc h0@@36 h1@@36) (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@2 h1@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@2)) )))
(assert (forall ((t0@@110 T@U) (t1@@86 T@U) (t2@@63 T@U) (t3@@48 T@U) (t4@@33 T@U) (t5@@18 T@U) (t6@@3 T@U) (h0@@37 T@U) (h1@@37 T@U) (f@@78 T@U) (bx0@@73 T@U) (bx1@@59 T@U) (bx2@@45 T@U) (bx3@@31 T@U) (bx4@@17 T@U) (bx5@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@110) TyType) (= (type t1@@86) TyType)) (= (type t2@@63) TyType)) (= (type t3@@48) TyType)) (= (type t4@@33) TyType)) (= (type t5@@18) TyType)) (= (type t6@@3) TyType)) (= (type h0@@37) (MapType0Type refType MapType1Type))) (= (type h1@@37) (MapType0Type refType MapType1Type))) (= (type f@@78) HandleTypeType)) (= (type bx0@@73) BoxType)) (= (type bx1@@59) BoxType)) (= (type bx2@@45) BoxType)) (= (type bx3@@31) BoxType)) (= (type bx4@@17) BoxType)) (= (type bx5@@3) BoxType)) (and (and (and ($HeapSucc h0@@37 h1@@37) (and ($IsGoodHeap h0@@37) ($IsGoodHeap h1@@37))) (and (and (and (and (and (and ($IsBox bx0@@73 t0@@110) ($IsBox bx1@@59 t1@@86)) ($IsBox bx2@@45 t2@@63)) ($IsBox bx3@@31 t3@@48)) ($IsBox bx4@@17 t4@@33)) ($IsBox bx5@@3 t5@@18)) ($Is f@@78 (Tclass._System.___hFunc6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3)))) (forall ((o@@81 T@U) (fld@@36 T@U) ) (! (let ((a@@119 (FieldTypeInv0 (type fld@@36)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@36) (FieldType a@@119))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@37 o@@81) fld@@36) (MapType1Select (MapType0Select h1@@37 o@@81) fld@@36)))) :qid |unknown.0:0| :skolemid |1096| :no-pattern (type o@@81) :no-pattern (type fld@@36) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@36) :no-pattern (U_2_bool fld@@36) )))) (= (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h0@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3) (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3))) :qid |unknown.0:0| :skolemid |1097| :pattern ( ($HeapSucc h0@@37 h1@@37) (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@3 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@3)) )))
(assert (forall ((t0@@111 T@U) (t1@@87 T@U) (t2@@64 T@U) (t3@@49 T@U) (t4@@34 T@U) (t5@@19 T@U) (t6@@4 T@U) (h0@@38 T@U) (h1@@38 T@U) (f@@79 T@U) (bx0@@74 T@U) (bx1@@60 T@U) (bx2@@46 T@U) (bx3@@32 T@U) (bx4@@18 T@U) (bx5@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@111) TyType) (= (type t1@@87) TyType)) (= (type t2@@64) TyType)) (= (type t3@@49) TyType)) (= (type t4@@34) TyType)) (= (type t5@@19) TyType)) (= (type t6@@4) TyType)) (= (type h0@@38) (MapType0Type refType MapType1Type))) (= (type h1@@38) (MapType0Type refType MapType1Type))) (= (type f@@79) HandleTypeType)) (= (type bx0@@74) BoxType)) (= (type bx1@@60) BoxType)) (= (type bx2@@46) BoxType)) (= (type bx3@@32) BoxType)) (= (type bx4@@18) BoxType)) (= (type bx5@@4) BoxType)) (and (and (and ($HeapSucc h0@@38 h1@@38) (and ($IsGoodHeap h0@@38) ($IsGoodHeap h1@@38))) (and (and (and (and (and (and ($IsBox bx0@@74 t0@@111) ($IsBox bx1@@60 t1@@87)) ($IsBox bx2@@46 t2@@64)) ($IsBox bx3@@32 t3@@49)) ($IsBox bx4@@18 t4@@34)) ($IsBox bx5@@4 t5@@19)) ($Is f@@79 (Tclass._System.___hFunc6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4)))) (forall ((o@@82 T@U) (fld@@37 T@U) ) (! (let ((a@@120 (FieldTypeInv0 (type fld@@37)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@37) (FieldType a@@120))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h0@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@38 o@@82) fld@@37) (MapType1Select (MapType0Select h1@@38 o@@82) fld@@37)))) :qid |unknown.0:0| :skolemid |1098| :no-pattern (type o@@82) :no-pattern (type fld@@37) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@37) :no-pattern (U_2_bool fld@@37) )))) (= (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h0@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4) (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h1@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4))) :qid |unknown.0:0| :skolemid |1099| :pattern ( ($HeapSucc h0@@38 h1@@38) (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@4 h1@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@4)) )))
(assert (forall ((t0@@112 T@U) (t1@@88 T@U) (t2@@65 T@U) (t3@@50 T@U) (t4@@35 T@U) (t5@@20 T@U) (t6@@5 T@U) (h0@@39 T@U) (h1@@39 T@U) (f@@80 T@U) (bx0@@75 T@U) (bx1@@61 T@U) (bx2@@47 T@U) (bx3@@33 T@U) (bx4@@19 T@U) (bx5@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@112) TyType) (= (type t1@@88) TyType)) (= (type t2@@65) TyType)) (= (type t3@@50) TyType)) (= (type t4@@35) TyType)) (= (type t5@@20) TyType)) (= (type t6@@5) TyType)) (= (type h0@@39) (MapType0Type refType MapType1Type))) (= (type h1@@39) (MapType0Type refType MapType1Type))) (= (type f@@80) HandleTypeType)) (= (type bx0@@75) BoxType)) (= (type bx1@@61) BoxType)) (= (type bx2@@47) BoxType)) (= (type bx3@@33) BoxType)) (= (type bx4@@19) BoxType)) (= (type bx5@@5) BoxType)) (and (and (and ($HeapSucc h0@@39 h1@@39) (and ($IsGoodHeap h0@@39) ($IsGoodHeap h1@@39))) (and (and (and (and (and (and ($IsBox bx0@@75 t0@@112) ($IsBox bx1@@61 t1@@88)) ($IsBox bx2@@47 t2@@65)) ($IsBox bx3@@33 t3@@50)) ($IsBox bx4@@19 t4@@35)) ($IsBox bx5@@5 t5@@20)) ($Is f@@80 (Tclass._System.___hFunc6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5)))) (forall ((o@@83 T@U) (fld@@38 T@U) ) (! (let ((a@@121 (FieldTypeInv0 (type fld@@38)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@38) (FieldType a@@121))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@39 o@@83) fld@@38) (MapType1Select (MapType0Select h1@@39 o@@83) fld@@38)))) :qid |unknown.0:0| :skolemid |1100| :no-pattern (type o@@83) :no-pattern (type fld@@38) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@38) :no-pattern (U_2_bool fld@@38) )))) (= (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h0@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5) (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5))) :qid |unknown.0:0| :skolemid |1101| :pattern ( ($HeapSucc h0@@39 h1@@39) (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@5 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@5)) )))
(assert (forall ((t0@@113 T@U) (t1@@89 T@U) (t2@@66 T@U) (t3@@51 T@U) (t4@@36 T@U) (t5@@21 T@U) (t6@@6 T@U) (h0@@40 T@U) (h1@@40 T@U) (f@@81 T@U) (bx0@@76 T@U) (bx1@@62 T@U) (bx2@@48 T@U) (bx3@@34 T@U) (bx4@@20 T@U) (bx5@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@113) TyType) (= (type t1@@89) TyType)) (= (type t2@@66) TyType)) (= (type t3@@51) TyType)) (= (type t4@@36) TyType)) (= (type t5@@21) TyType)) (= (type t6@@6) TyType)) (= (type h0@@40) (MapType0Type refType MapType1Type))) (= (type h1@@40) (MapType0Type refType MapType1Type))) (= (type f@@81) HandleTypeType)) (= (type bx0@@76) BoxType)) (= (type bx1@@62) BoxType)) (= (type bx2@@48) BoxType)) (= (type bx3@@34) BoxType)) (= (type bx4@@20) BoxType)) (= (type bx5@@6) BoxType)) (and (and (and ($HeapSucc h0@@40 h1@@40) (and ($IsGoodHeap h0@@40) ($IsGoodHeap h1@@40))) (and (and (and (and (and (and ($IsBox bx0@@76 t0@@113) ($IsBox bx1@@62 t1@@89)) ($IsBox bx2@@48 t2@@66)) ($IsBox bx3@@34 t3@@51)) ($IsBox bx4@@20 t4@@36)) ($IsBox bx5@@6 t5@@21)) ($Is f@@81 (Tclass._System.___hFunc6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6)))) (forall ((o@@84 T@U) (fld@@39 T@U) ) (! (let ((a@@122 (FieldTypeInv0 (type fld@@39)))) (=> (and (and (= (type o@@84) refType) (= (type fld@@39) (FieldType a@@122))) (and (not (= o@@84 null)) (U_2_bool (MapType0Select (Reads6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h0@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6) ($Box o@@84))))) (= (MapType1Select (MapType0Select h0@@40 o@@84) fld@@39) (MapType1Select (MapType0Select h1@@40 o@@84) fld@@39)))) :qid |unknown.0:0| :skolemid |1102| :no-pattern (type o@@84) :no-pattern (type fld@@39) :no-pattern (U_2_int o@@84) :no-pattern (U_2_bool o@@84) :no-pattern (U_2_int fld@@39) :no-pattern (U_2_bool fld@@39) )))) (= (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h0@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6) (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h1@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6))) :qid |unknown.0:0| :skolemid |1103| :pattern ( ($HeapSucc h0@@40 h1@@40) (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@6 h1@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@6)) )))
(assert (forall ((t0@@114 T@U) (t1@@90 T@U) (t2@@67 T@U) (t3@@52 T@U) (t4@@37 T@U) (t5@@22 T@U) (t6@@7 T@U) (h0@@41 T@U) (h1@@41 T@U) (f@@82 T@U) (bx0@@77 T@U) (bx1@@63 T@U) (bx2@@49 T@U) (bx3@@35 T@U) (bx4@@21 T@U) (bx5@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@114) TyType) (= (type t1@@90) TyType)) (= (type t2@@67) TyType)) (= (type t3@@52) TyType)) (= (type t4@@37) TyType)) (= (type t5@@22) TyType)) (= (type t6@@7) TyType)) (= (type h0@@41) (MapType0Type refType MapType1Type))) (= (type h1@@41) (MapType0Type refType MapType1Type))) (= (type f@@82) HandleTypeType)) (= (type bx0@@77) BoxType)) (= (type bx1@@63) BoxType)) (= (type bx2@@49) BoxType)) (= (type bx3@@35) BoxType)) (= (type bx4@@21) BoxType)) (= (type bx5@@7) BoxType)) (and (and (and ($HeapSucc h0@@41 h1@@41) (and ($IsGoodHeap h0@@41) ($IsGoodHeap h1@@41))) (and (and (and (and (and (and ($IsBox bx0@@77 t0@@114) ($IsBox bx1@@63 t1@@90)) ($IsBox bx2@@49 t2@@67)) ($IsBox bx3@@35 t3@@52)) ($IsBox bx4@@21 t4@@37)) ($IsBox bx5@@7 t5@@22)) ($Is f@@82 (Tclass._System.___hFunc6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7)))) (forall ((o@@85 T@U) (fld@@40 T@U) ) (! (let ((a@@123 (FieldTypeInv0 (type fld@@40)))) (=> (and (and (= (type o@@85) refType) (= (type fld@@40) (FieldType a@@123))) (and (not (= o@@85 null)) (U_2_bool (MapType0Select (Reads6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7) ($Box o@@85))))) (= (MapType1Select (MapType0Select h0@@41 o@@85) fld@@40) (MapType1Select (MapType0Select h1@@41 o@@85) fld@@40)))) :qid |unknown.0:0| :skolemid |1104| :no-pattern (type o@@85) :no-pattern (type fld@@40) :no-pattern (U_2_int o@@85) :no-pattern (U_2_bool o@@85) :no-pattern (U_2_int fld@@40) :no-pattern (U_2_bool fld@@40) )))) (= (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h0@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7) (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7))) :qid |unknown.0:0| :skolemid |1105| :pattern ( ($HeapSucc h0@@41 h1@@41) (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@7 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@7)) )))
(assert (forall ((t0@@115 T@U) (t1@@91 T@U) (t2@@68 T@U) (t3@@53 T@U) (t4@@38 T@U) (t5@@23 T@U) (t6@@8 T@U) (heap@@34 T@U) (f@@83 T@U) (bx0@@78 T@U) (bx1@@64 T@U) (bx2@@50 T@U) (bx3@@36 T@U) (bx4@@22 T@U) (bx5@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@115) TyType) (= (type t1@@91) TyType)) (= (type t2@@68) TyType)) (= (type t3@@53) TyType)) (= (type t4@@38) TyType)) (= (type t5@@23) TyType)) (= (type t6@@8) TyType)) (= (type heap@@34) (MapType0Type refType MapType1Type))) (= (type f@@83) HandleTypeType)) (= (type bx0@@78) BoxType)) (= (type bx1@@64) BoxType)) (= (type bx2@@50) BoxType)) (= (type bx3@@36) BoxType)) (= (type bx4@@22) BoxType)) (= (type bx5@@8) BoxType)) (and ($IsGoodHeap heap@@34) (and (and (and (and (and (and ($IsBox bx0@@78 t0@@115) ($IsBox bx1@@64 t1@@91)) ($IsBox bx2@@50 t2@@68)) ($IsBox bx3@@36 t3@@53)) ($IsBox bx4@@22 t4@@38)) ($IsBox bx5@@8 t5@@23)) ($Is f@@83 (Tclass._System.___hFunc6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8))))) (= (|Set#Equal| (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 $OneHeap f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 heap@@34 f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |1106| :pattern ( (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 $OneHeap f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8) ($IsGoodHeap heap@@34)) :pattern ( (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@8 heap@@34 f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@8)) )))
(assert (forall ((t0@@116 T@U) (t1@@92 T@U) (t2@@69 T@U) (t3@@54 T@U) (t4@@39 T@U) (t5@@24 T@U) (t6@@9 T@U) (heap@@35 T@U) (f@@84 T@U) (bx0@@79 T@U) (bx1@@65 T@U) (bx2@@51 T@U) (bx3@@37 T@U) (bx4@@23 T@U) (bx5@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@116) TyType) (= (type t1@@92) TyType)) (= (type t2@@69) TyType)) (= (type t3@@54) TyType)) (= (type t4@@39) TyType)) (= (type t5@@24) TyType)) (= (type t6@@9) TyType)) (= (type heap@@35) (MapType0Type refType MapType1Type))) (= (type f@@84) HandleTypeType)) (= (type bx0@@79) BoxType)) (= (type bx1@@65) BoxType)) (= (type bx2@@51) BoxType)) (= (type bx3@@37) BoxType)) (= (type bx4@@23) BoxType)) (= (type bx5@@9) BoxType)) (and (and ($IsGoodHeap heap@@35) (and (and (and (and (and (and ($IsBox bx0@@79 t0@@116) ($IsBox bx1@@65 t1@@92)) ($IsBox bx2@@51 t2@@69)) ($IsBox bx3@@37 t3@@54)) ($IsBox bx4@@23 t4@@39)) ($IsBox bx5@@9 t5@@24)) ($Is f@@84 (Tclass._System.___hFunc6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9)))) (|Set#Equal| (Reads6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9) (|Set#Empty| BoxType)))) (= (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9) (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 heap@@35 f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9))) :qid |unknown.0:0| :skolemid |1107| :pattern ( (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9) ($IsGoodHeap heap@@35)) :pattern ( (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@9 heap@@35 f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@9)) )))
(assert (forall ((f@@85 T@U) (t0@@117 T@U) (t1@@93 T@U) (t2@@70 T@U) (t3@@55 T@U) (t4@@40 T@U) (t5@@25 T@U) (t6@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@85) HandleTypeType) (= (type t0@@117) TyType)) (= (type t1@@93) TyType)) (= (type t2@@70) TyType)) (= (type t3@@55) TyType)) (= (type t4@@40) TyType)) (= (type t5@@25) TyType)) (= (type t6@@10) TyType)) (= ($Is f@@85 (Tclass._System.___hFunc6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10)) (forall ((h@@60 T@U) (bx0@@80 T@U) (bx1@@66 T@U) (bx2@@52 T@U) (bx3@@38 T@U) (bx4@@24 T@U) (bx5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@60) (MapType0Type refType MapType1Type)) (= (type bx0@@80) BoxType)) (= (type bx1@@66) BoxType)) (= (type bx2@@52) BoxType)) (= (type bx3@@38) BoxType)) (= (type bx4@@24) BoxType)) (= (type bx5@@10) BoxType)) (and (and ($IsGoodHeap h@@60) (and (and (and (and (and ($IsBox bx0@@80 t0@@117) ($IsBox bx1@@66 t1@@93)) ($IsBox bx2@@52 t2@@70)) ($IsBox bx3@@38 t3@@55)) ($IsBox bx4@@24 t4@@40)) ($IsBox bx5@@10 t5@@25))) (Requires6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@10))) ($IsBox (Apply6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@10) t6@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |1108| :pattern ( (Apply6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@10)) )))) :qid |unknown.0:0| :skolemid |1109| :pattern ( ($Is f@@85 (Tclass._System.___hFunc6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@10))) )))
(assert (forall ((f@@86 T@U) (t0@@118 T@U) (t1@@94 T@U) (t2@@71 T@U) (t3@@56 T@U) (t4@@41 T@U) (t5@@26 T@U) (t6@@11 T@U) (u0@@5 T@U) (u1@@4 T@U) (u2@@3 T@U) (u3@@2 T@U) (u4@@1 T@U) (u5@@0 T@U) (u6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@86) HandleTypeType) (= (type t0@@118) TyType)) (= (type t1@@94) TyType)) (= (type t2@@71) TyType)) (= (type t3@@56) TyType)) (= (type t4@@41) TyType)) (= (type t5@@26) TyType)) (= (type t6@@11) TyType)) (= (type u0@@5) TyType)) (= (type u1@@4) TyType)) (= (type u2@@3) TyType)) (= (type u3@@2) TyType)) (= (type u4@@1) TyType)) (= (type u5@@0) TyType)) (= (type u6) TyType)) (and (and (and (and (and (and (and ($Is f@@86 (Tclass._System.___hFunc6 t0@@118 t1@@94 t2@@71 t3@@56 t4@@41 t5@@26 t6@@11)) (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 u0@@5)) ($IsBox bx@@88 t0@@118)) :qid |unknown.0:0| :skolemid |1110| :pattern ( ($IsBox bx@@88 u0@@5)) :pattern ( ($IsBox bx@@88 t0@@118)) ))) (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 u1@@4)) ($IsBox bx@@89 t1@@94)) :qid |unknown.0:0| :skolemid |1111| :pattern ( ($IsBox bx@@89 u1@@4)) :pattern ( ($IsBox bx@@89 t1@@94)) ))) (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 u2@@3)) ($IsBox bx@@90 t2@@71)) :qid |unknown.0:0| :skolemid |1112| :pattern ( ($IsBox bx@@90 u2@@3)) :pattern ( ($IsBox bx@@90 t2@@71)) ))) (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 u3@@2)) ($IsBox bx@@91 t3@@56)) :qid |unknown.0:0| :skolemid |1113| :pattern ( ($IsBox bx@@91 u3@@2)) :pattern ( ($IsBox bx@@91 t3@@56)) ))) (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 u4@@1)) ($IsBox bx@@92 t4@@41)) :qid |unknown.0:0| :skolemid |1114| :pattern ( ($IsBox bx@@92 u4@@1)) :pattern ( ($IsBox bx@@92 t4@@41)) ))) (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 u5@@0)) ($IsBox bx@@93 t5@@26)) :qid |unknown.0:0| :skolemid |1115| :pattern ( ($IsBox bx@@93 u5@@0)) :pattern ( ($IsBox bx@@93 t5@@26)) ))) (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 t6@@11)) ($IsBox bx@@94 u6)) :qid |unknown.0:0| :skolemid |1116| :pattern ( ($IsBox bx@@94 t6@@11)) :pattern ( ($IsBox bx@@94 u6)) )))) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6))) :qid |unknown.0:0| :skolemid |1117| :pattern ( ($Is f@@86 (Tclass._System.___hFunc6 t0@@118 t1@@94 t2@@71 t3@@56 t4@@41 t5@@26 t6@@11)) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6))) )))
(assert (forall ((f@@87 T@U) (t0@@119 T@U) (t1@@95 T@U) (t2@@72 T@U) (t3@@57 T@U) (t4@@42 T@U) (t5@@27 T@U) (t6@@12 T@U) (h@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@87) HandleTypeType) (= (type t0@@119) TyType)) (= (type t1@@95) TyType)) (= (type t2@@72) TyType)) (= (type t3@@57) TyType)) (= (type t4@@42) TyType)) (= (type t5@@27) TyType)) (= (type t6@@12) TyType)) (= (type h@@61) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@61)) (= ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12) h@@61) (forall ((bx0@@81 T@U) (bx1@@67 T@U) (bx2@@53 T@U) (bx3@@39 T@U) (bx4@@25 T@U) (bx5@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@81) BoxType) (= (type bx1@@67) BoxType)) (= (type bx2@@53) BoxType)) (= (type bx3@@39) BoxType)) (= (type bx4@@25) BoxType)) (= (type bx5@@11) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@81 t0@@119) ($IsAllocBox bx0@@81 t0@@119 h@@61)) (and ($IsBox bx1@@67 t1@@95) ($IsAllocBox bx1@@67 t1@@95 h@@61))) (and ($IsBox bx2@@53 t2@@72) ($IsAllocBox bx2@@53 t2@@72 h@@61))) (and ($IsBox bx3@@39 t3@@57) ($IsAllocBox bx3@@39 t3@@57 h@@61))) (and ($IsBox bx4@@25 t4@@42) ($IsAllocBox bx4@@25 t4@@42 h@@61))) (and ($IsBox bx5@@11 t5@@27) ($IsAllocBox bx5@@11 t5@@27 h@@61))) (Requires6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11)) (forall ((r@@33 T@U) ) (!  (=> (= (type r@@33) refType) (=> (and (not (= r@@33 null)) (U_2_bool (MapType0Select (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11) ($Box r@@33)))) (U_2_bool (MapType1Select (MapType0Select h@@61 r@@33) alloc)))) :qid |unknown.0:0| :skolemid |1118| :pattern ( (MapType0Select (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11) ($Box r@@33))) )))) :qid |unknown.0:0| :skolemid |1119| :pattern ( (Apply6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11)) :pattern ( (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@11)) )))) :qid |unknown.0:0| :skolemid |1120| :pattern ( ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@12) h@@61)) )))
(assert (forall ((f@@88 T@U) (t0@@120 T@U) (t1@@96 T@U) (t2@@73 T@U) (t3@@58 T@U) (t4@@43 T@U) (t5@@28 T@U) (t6@@13 T@U) (h@@62 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@88) HandleTypeType) (= (type t0@@120) TyType)) (= (type t1@@96) TyType)) (= (type t2@@73) TyType)) (= (type t3@@58) TyType)) (= (type t4@@43) TyType)) (= (type t5@@28) TyType)) (= (type t6@@13) TyType)) (= (type h@@62) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@62) ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13) h@@62))) (forall ((bx0@@82 T@U) (bx1@@68 T@U) (bx2@@54 T@U) (bx3@@40 T@U) (bx4@@26 T@U) (bx5@@12 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@82) BoxType) (= (type bx1@@68) BoxType)) (= (type bx2@@54) BoxType)) (= (type bx3@@40) BoxType)) (= (type bx4@@26) BoxType)) (= (type bx5@@12) BoxType)) (=> (and (and (and (and (and (and ($IsAllocBox bx0@@82 t0@@120 h@@62) ($IsAllocBox bx1@@68 t1@@96 h@@62)) ($IsAllocBox bx2@@54 t2@@73 h@@62)) ($IsAllocBox bx3@@40 t3@@58 h@@62)) ($IsAllocBox bx4@@26 t4@@43 h@@62)) ($IsAllocBox bx5@@12 t5@@28 h@@62)) (Requires6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@12)) ($IsAllocBox (Apply6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@12) t6@@13 h@@62))) :qid |unknown.0:0| :skolemid |1121| :pattern ( (Apply6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@12)) ))) :qid |unknown.0:0| :skolemid |1122| :pattern ( ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@13) h@@62)) )))
(assert (forall ((arg0@@312 T@U) (arg1@@146 T@U) (arg2@@98 T@U) (arg3@@71 T@U) (arg4@@57 T@U) (arg5@@44 T@U) (arg6@@32 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6 arg0@@312 arg1@@146 arg2@@98 arg3@@71 arg4@@57 arg5@@44 arg6@@32)) TyType) :qid |funType:Tclass._System.___hPartialFunc6| :pattern ( (Tclass._System.___hPartialFunc6 arg0@@312 arg1@@146 arg2@@98 arg3@@71 arg4@@57 arg5@@44 arg6@@32)) )))
(assert (forall ((|#$T0@@159| T@U) (|#$T1@@143| T@U) (|#$T2@@105| T@U) (|#$T3@@61| T@U) (|#$T4@@36| T@U) (|#$T5@@8| T@U) (|#$R@@185| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@159|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$T2@@105|) TyType)) (= (type |#$T3@@61|) TyType)) (= (type |#$T4@@36|) TyType)) (= (type |#$T5@@8|) TyType)) (= (type |#$R@@185|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc6 |#$T0@@159| |#$T1@@143| |#$T2@@105| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@185|)) Tagclass._System.___hPartialFunc6) (= (TagFamily (Tclass._System.___hPartialFunc6 |#$T0@@159| |#$T1@@143| |#$T2@@105| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@185|)) |tytagFamily$_#PartialFunc6|))) :qid |unknown.0:0| :skolemid |1123| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@159| |#$T1@@143| |#$T2@@105| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@185|)) )))
(assert (forall ((arg0@@313 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_0 arg0@@313)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_0| :pattern ( (Tclass._System.___hPartialFunc6_0 arg0@@313)) )))
(assert (forall ((|#$T0@@160| T@U) (|#$T1@@144| T@U) (|#$T2@@106| T@U) (|#$T3@@62| T@U) (|#$T4@@37| T@U) (|#$T5@@9| T@U) (|#$R@@186| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@160|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$T2@@106|) TyType)) (= (type |#$T3@@62|) TyType)) (= (type |#$T4@@37|) TyType)) (= (type |#$T5@@9|) TyType)) (= (type |#$R@@186|) TyType)) (= (Tclass._System.___hPartialFunc6_0 (Tclass._System.___hPartialFunc6 |#$T0@@160| |#$T1@@144| |#$T2@@106| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@186|)) |#$T0@@160|)) :qid |unknown.0:0| :skolemid |1124| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@160| |#$T1@@144| |#$T2@@106| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@186|)) )))
(assert (forall ((arg0@@314 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_1 arg0@@314)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_1| :pattern ( (Tclass._System.___hPartialFunc6_1 arg0@@314)) )))
(assert (forall ((|#$T0@@161| T@U) (|#$T1@@145| T@U) (|#$T2@@107| T@U) (|#$T3@@63| T@U) (|#$T4@@38| T@U) (|#$T5@@10| T@U) (|#$R@@187| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@161|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$T2@@107|) TyType)) (= (type |#$T3@@63|) TyType)) (= (type |#$T4@@38|) TyType)) (= (type |#$T5@@10|) TyType)) (= (type |#$R@@187|) TyType)) (= (Tclass._System.___hPartialFunc6_1 (Tclass._System.___hPartialFunc6 |#$T0@@161| |#$T1@@145| |#$T2@@107| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@187|)) |#$T1@@145|)) :qid |unknown.0:0| :skolemid |1125| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@161| |#$T1@@145| |#$T2@@107| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@187|)) )))
(assert (forall ((arg0@@315 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_2 arg0@@315)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_2| :pattern ( (Tclass._System.___hPartialFunc6_2 arg0@@315)) )))
(assert (forall ((|#$T0@@162| T@U) (|#$T1@@146| T@U) (|#$T2@@108| T@U) (|#$T3@@64| T@U) (|#$T4@@39| T@U) (|#$T5@@11| T@U) (|#$R@@188| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@162|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$T2@@108|) TyType)) (= (type |#$T3@@64|) TyType)) (= (type |#$T4@@39|) TyType)) (= (type |#$T5@@11|) TyType)) (= (type |#$R@@188|) TyType)) (= (Tclass._System.___hPartialFunc6_2 (Tclass._System.___hPartialFunc6 |#$T0@@162| |#$T1@@146| |#$T2@@108| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@188|)) |#$T2@@108|)) :qid |unknown.0:0| :skolemid |1126| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@162| |#$T1@@146| |#$T2@@108| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@188|)) )))
(assert (forall ((arg0@@316 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_3 arg0@@316)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_3| :pattern ( (Tclass._System.___hPartialFunc6_3 arg0@@316)) )))
(assert (forall ((|#$T0@@163| T@U) (|#$T1@@147| T@U) (|#$T2@@109| T@U) (|#$T3@@65| T@U) (|#$T4@@40| T@U) (|#$T5@@12| T@U) (|#$R@@189| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@163|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$T2@@109|) TyType)) (= (type |#$T3@@65|) TyType)) (= (type |#$T4@@40|) TyType)) (= (type |#$T5@@12|) TyType)) (= (type |#$R@@189|) TyType)) (= (Tclass._System.___hPartialFunc6_3 (Tclass._System.___hPartialFunc6 |#$T0@@163| |#$T1@@147| |#$T2@@109| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@189|)) |#$T3@@65|)) :qid |unknown.0:0| :skolemid |1127| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@163| |#$T1@@147| |#$T2@@109| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@189|)) )))
(assert (forall ((arg0@@317 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_4 arg0@@317)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_4| :pattern ( (Tclass._System.___hPartialFunc6_4 arg0@@317)) )))
(assert (forall ((|#$T0@@164| T@U) (|#$T1@@148| T@U) (|#$T2@@110| T@U) (|#$T3@@66| T@U) (|#$T4@@41| T@U) (|#$T5@@13| T@U) (|#$R@@190| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@164|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$T2@@110|) TyType)) (= (type |#$T3@@66|) TyType)) (= (type |#$T4@@41|) TyType)) (= (type |#$T5@@13|) TyType)) (= (type |#$R@@190|) TyType)) (= (Tclass._System.___hPartialFunc6_4 (Tclass._System.___hPartialFunc6 |#$T0@@164| |#$T1@@148| |#$T2@@110| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@190|)) |#$T4@@41|)) :qid |unknown.0:0| :skolemid |1128| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@164| |#$T1@@148| |#$T2@@110| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@190|)) )))
(assert (forall ((arg0@@318 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_5 arg0@@318)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_5| :pattern ( (Tclass._System.___hPartialFunc6_5 arg0@@318)) )))
(assert (forall ((|#$T0@@165| T@U) (|#$T1@@149| T@U) (|#$T2@@111| T@U) (|#$T3@@67| T@U) (|#$T4@@42| T@U) (|#$T5@@14| T@U) (|#$R@@191| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@165|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$T2@@111|) TyType)) (= (type |#$T3@@67|) TyType)) (= (type |#$T4@@42|) TyType)) (= (type |#$T5@@14|) TyType)) (= (type |#$R@@191|) TyType)) (= (Tclass._System.___hPartialFunc6_5 (Tclass._System.___hPartialFunc6 |#$T0@@165| |#$T1@@149| |#$T2@@111| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@191|)) |#$T5@@14|)) :qid |unknown.0:0| :skolemid |1129| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@165| |#$T1@@149| |#$T2@@111| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@191|)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_6 arg0@@319)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_6| :pattern ( (Tclass._System.___hPartialFunc6_6 arg0@@319)) )))
(assert (forall ((|#$T0@@166| T@U) (|#$T1@@150| T@U) (|#$T2@@112| T@U) (|#$T3@@68| T@U) (|#$T4@@43| T@U) (|#$T5@@15| T@U) (|#$R@@192| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@166|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$T2@@112|) TyType)) (= (type |#$T3@@68|) TyType)) (= (type |#$T4@@43|) TyType)) (= (type |#$T5@@15|) TyType)) (= (type |#$R@@192|) TyType)) (= (Tclass._System.___hPartialFunc6_6 (Tclass._System.___hPartialFunc6 |#$T0@@166| |#$T1@@150| |#$T2@@112| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@192|)) |#$R@@192|)) :qid |unknown.0:0| :skolemid |1130| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@166| |#$T1@@150| |#$T2@@112| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@192|)) )))
(assert (forall ((|#$T0@@167| T@U) (|#$T1@@151| T@U) (|#$T2@@113| T@U) (|#$T3@@69| T@U) (|#$T4@@44| T@U) (|#$T5@@16| T@U) (|#$R@@193| T@U) (bx@@95 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@167|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$T2@@113|) TyType)) (= (type |#$T3@@69|) TyType)) (= (type |#$T4@@44|) TyType)) (= (type |#$T5@@16|) TyType)) (= (type |#$R@@193|) TyType)) (= (type bx@@95) BoxType)) ($IsBox bx@@95 (Tclass._System.___hPartialFunc6 |#$T0@@167| |#$T1@@151| |#$T2@@113| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@193|))) (and (= ($Box ($Unbox HandleTypeType bx@@95)) bx@@95) ($Is ($Unbox HandleTypeType bx@@95) (Tclass._System.___hPartialFunc6 |#$T0@@167| |#$T1@@151| |#$T2@@113| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@193|)))) :qid |unknown.0:0| :skolemid |1131| :pattern ( ($IsBox bx@@95 (Tclass._System.___hPartialFunc6 |#$T0@@167| |#$T1@@151| |#$T2@@113| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@193|))) )))
(assert (forall ((|#$T0@@168| T@U) (|#$T1@@152| T@U) (|#$T2@@114| T@U) (|#$T3@@70| T@U) (|#$T4@@45| T@U) (|#$T5@@17| T@U) (|#$R@@194| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@168|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$T2@@114|) TyType)) (= (type |#$T3@@70|) TyType)) (= (type |#$T4@@45|) TyType)) (= (type |#$T5@@17|) TyType)) (= (type |#$R@@194|) TyType)) (= (type |f#0@@35|) HandleTypeType)) (= ($Is |f#0@@35| (Tclass._System.___hPartialFunc6 |#$T0@@168| |#$T1@@152| |#$T2@@114| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@194|))  (and ($Is |f#0@@35| (Tclass._System.___hFunc6 |#$T0@@168| |#$T1@@152| |#$T2@@114| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@194|)) (forall ((|x0#0@@13| T@U) (|x1#0@@11| T@U) (|x2#0@@7| T@U) (|x3#0@@3| T@U) (|x4#0@@1| T@U) (|x5#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@11|) BoxType)) (= (type |x2#0@@7|) BoxType)) (= (type |x3#0@@3|) BoxType)) (= (type |x4#0@@1|) BoxType)) (= (type |x5#0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@13| |#$T0@@168|) ($IsBox |x1#0@@11| |#$T1@@152|)) ($IsBox |x2#0@@7| |#$T2@@114|)) ($IsBox |x3#0@@3| |#$T3@@70|)) ($IsBox |x4#0@@1| |#$T4@@45|)) ($IsBox |x5#0| |#$T5@@17|))) (|Set#Equal| (Reads6 |#$T0@@168| |#$T1@@152| |#$T2@@114| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@194| $OneHeap |f#0@@35| |x0#0@@13| |x1#0@@11| |x2#0@@7| |x3#0@@3| |x4#0@@1| |x5#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1132| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@11|) :no-pattern (type |x2#0@@7|) :no-pattern (type |x3#0@@3|) :no-pattern (type |x4#0@@1|) :no-pattern (type |x5#0|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@11|) :no-pattern (U_2_bool |x1#0@@11|) :no-pattern (U_2_int |x2#0@@7|) :no-pattern (U_2_bool |x2#0@@7|) :no-pattern (U_2_int |x3#0@@3|) :no-pattern (U_2_bool |x3#0@@3|) :no-pattern (U_2_int |x4#0@@1|) :no-pattern (U_2_bool |x4#0@@1|) :no-pattern (U_2_int |x5#0|) :no-pattern (U_2_bool |x5#0|) ))))) :qid |unknown.0:0| :skolemid |1133| :pattern ( ($Is |f#0@@35| (Tclass._System.___hPartialFunc6 |#$T0@@168| |#$T1@@152| |#$T2@@114| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@194|))) )))
(assert (forall ((|#$T0@@169| T@U) (|#$T1@@153| T@U) (|#$T2@@115| T@U) (|#$T3@@71| T@U) (|#$T4@@46| T@U) (|#$T5@@18| T@U) (|#$R@@195| T@U) (|f#0@@36| T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@169|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$T2@@115|) TyType)) (= (type |#$T3@@71|) TyType)) (= (type |#$T4@@46|) TyType)) (= (type |#$T5@@18|) TyType)) (= (type |#$R@@195|) TyType)) (= (type |f#0@@36|) HandleTypeType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc6 |#$T0@@169| |#$T1@@153| |#$T2@@115| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@195|) $h@@26) ($IsAlloc |f#0@@36| (Tclass._System.___hFunc6 |#$T0@@169| |#$T1@@153| |#$T2@@115| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@195|) $h@@26))) :qid |unknown.0:0| :skolemid |1134| :pattern ( ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc6 |#$T0@@169| |#$T1@@153| |#$T2@@115| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@195|) $h@@26)) )))
(assert (forall ((arg0@@320 T@U) (arg1@@147 T@U) (arg2@@99 T@U) (arg3@@72 T@U) (arg4@@58 T@U) (arg5@@45 T@U) (arg6@@33 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6 arg0@@320 arg1@@147 arg2@@99 arg3@@72 arg4@@58 arg5@@45 arg6@@33)) TyType) :qid |funType:Tclass._System.___hTotalFunc6| :pattern ( (Tclass._System.___hTotalFunc6 arg0@@320 arg1@@147 arg2@@99 arg3@@72 arg4@@58 arg5@@45 arg6@@33)) )))
(assert (forall ((|#$T0@@170| T@U) (|#$T1@@154| T@U) (|#$T2@@116| T@U) (|#$T3@@72| T@U) (|#$T4@@47| T@U) (|#$T5@@19| T@U) (|#$R@@196| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@170|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$T2@@116|) TyType)) (= (type |#$T3@@72|) TyType)) (= (type |#$T4@@47|) TyType)) (= (type |#$T5@@19|) TyType)) (= (type |#$R@@196|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc6 |#$T0@@170| |#$T1@@154| |#$T2@@116| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@196|)) Tagclass._System.___hTotalFunc6) (= (TagFamily (Tclass._System.___hTotalFunc6 |#$T0@@170| |#$T1@@154| |#$T2@@116| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@196|)) |tytagFamily$_#TotalFunc6|))) :qid |unknown.0:0| :skolemid |1135| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@170| |#$T1@@154| |#$T2@@116| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@196|)) )))
(assert (forall ((arg0@@321 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_0 arg0@@321)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_0| :pattern ( (Tclass._System.___hTotalFunc6_0 arg0@@321)) )))
(assert (forall ((|#$T0@@171| T@U) (|#$T1@@155| T@U) (|#$T2@@117| T@U) (|#$T3@@73| T@U) (|#$T4@@48| T@U) (|#$T5@@20| T@U) (|#$R@@197| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@171|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$T2@@117|) TyType)) (= (type |#$T3@@73|) TyType)) (= (type |#$T4@@48|) TyType)) (= (type |#$T5@@20|) TyType)) (= (type |#$R@@197|) TyType)) (= (Tclass._System.___hTotalFunc6_0 (Tclass._System.___hTotalFunc6 |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@197|)) |#$T0@@171|)) :qid |unknown.0:0| :skolemid |1136| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@171| |#$T1@@155| |#$T2@@117| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@197|)) )))
(assert (forall ((arg0@@322 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_1 arg0@@322)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_1| :pattern ( (Tclass._System.___hTotalFunc6_1 arg0@@322)) )))
(assert (forall ((|#$T0@@172| T@U) (|#$T1@@156| T@U) (|#$T2@@118| T@U) (|#$T3@@74| T@U) (|#$T4@@49| T@U) (|#$T5@@21| T@U) (|#$R@@198| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@172|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$T2@@118|) TyType)) (= (type |#$T3@@74|) TyType)) (= (type |#$T4@@49|) TyType)) (= (type |#$T5@@21|) TyType)) (= (type |#$R@@198|) TyType)) (= (Tclass._System.___hTotalFunc6_1 (Tclass._System.___hTotalFunc6 |#$T0@@172| |#$T1@@156| |#$T2@@118| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@198|)) |#$T1@@156|)) :qid |unknown.0:0| :skolemid |1137| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@172| |#$T1@@156| |#$T2@@118| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@198|)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_2 arg0@@323)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_2| :pattern ( (Tclass._System.___hTotalFunc6_2 arg0@@323)) )))
(assert (forall ((|#$T0@@173| T@U) (|#$T1@@157| T@U) (|#$T2@@119| T@U) (|#$T3@@75| T@U) (|#$T4@@50| T@U) (|#$T5@@22| T@U) (|#$R@@199| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@173|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$T2@@119|) TyType)) (= (type |#$T3@@75|) TyType)) (= (type |#$T4@@50|) TyType)) (= (type |#$T5@@22|) TyType)) (= (type |#$R@@199|) TyType)) (= (Tclass._System.___hTotalFunc6_2 (Tclass._System.___hTotalFunc6 |#$T0@@173| |#$T1@@157| |#$T2@@119| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@199|)) |#$T2@@119|)) :qid |unknown.0:0| :skolemid |1138| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@173| |#$T1@@157| |#$T2@@119| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@199|)) )))
(assert (forall ((arg0@@324 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_3 arg0@@324)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_3| :pattern ( (Tclass._System.___hTotalFunc6_3 arg0@@324)) )))
(assert (forall ((|#$T0@@174| T@U) (|#$T1@@158| T@U) (|#$T2@@120| T@U) (|#$T3@@76| T@U) (|#$T4@@51| T@U) (|#$T5@@23| T@U) (|#$R@@200| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@174|) TyType) (= (type |#$T1@@158|) TyType)) (= (type |#$T2@@120|) TyType)) (= (type |#$T3@@76|) TyType)) (= (type |#$T4@@51|) TyType)) (= (type |#$T5@@23|) TyType)) (= (type |#$R@@200|) TyType)) (= (Tclass._System.___hTotalFunc6_3 (Tclass._System.___hTotalFunc6 |#$T0@@174| |#$T1@@158| |#$T2@@120| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@200|)) |#$T3@@76|)) :qid |unknown.0:0| :skolemid |1139| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@174| |#$T1@@158| |#$T2@@120| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@200|)) )))
(assert (forall ((arg0@@325 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_4 arg0@@325)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_4| :pattern ( (Tclass._System.___hTotalFunc6_4 arg0@@325)) )))
(assert (forall ((|#$T0@@175| T@U) (|#$T1@@159| T@U) (|#$T2@@121| T@U) (|#$T3@@77| T@U) (|#$T4@@52| T@U) (|#$T5@@24| T@U) (|#$R@@201| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@175|) TyType) (= (type |#$T1@@159|) TyType)) (= (type |#$T2@@121|) TyType)) (= (type |#$T3@@77|) TyType)) (= (type |#$T4@@52|) TyType)) (= (type |#$T5@@24|) TyType)) (= (type |#$R@@201|) TyType)) (= (Tclass._System.___hTotalFunc6_4 (Tclass._System.___hTotalFunc6 |#$T0@@175| |#$T1@@159| |#$T2@@121| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@201|)) |#$T4@@52|)) :qid |unknown.0:0| :skolemid |1140| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@175| |#$T1@@159| |#$T2@@121| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@201|)) )))
(assert (forall ((arg0@@326 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_5 arg0@@326)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_5| :pattern ( (Tclass._System.___hTotalFunc6_5 arg0@@326)) )))
(assert (forall ((|#$T0@@176| T@U) (|#$T1@@160| T@U) (|#$T2@@122| T@U) (|#$T3@@78| T@U) (|#$T4@@53| T@U) (|#$T5@@25| T@U) (|#$R@@202| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@176|) TyType) (= (type |#$T1@@160|) TyType)) (= (type |#$T2@@122|) TyType)) (= (type |#$T3@@78|) TyType)) (= (type |#$T4@@53|) TyType)) (= (type |#$T5@@25|) TyType)) (= (type |#$R@@202|) TyType)) (= (Tclass._System.___hTotalFunc6_5 (Tclass._System.___hTotalFunc6 |#$T0@@176| |#$T1@@160| |#$T2@@122| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@202|)) |#$T5@@25|)) :qid |unknown.0:0| :skolemid |1141| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@176| |#$T1@@160| |#$T2@@122| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@202|)) )))
(assert (forall ((arg0@@327 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_6 arg0@@327)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_6| :pattern ( (Tclass._System.___hTotalFunc6_6 arg0@@327)) )))
(assert (forall ((|#$T0@@177| T@U) (|#$T1@@161| T@U) (|#$T2@@123| T@U) (|#$T3@@79| T@U) (|#$T4@@54| T@U) (|#$T5@@26| T@U) (|#$R@@203| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@177|) TyType) (= (type |#$T1@@161|) TyType)) (= (type |#$T2@@123|) TyType)) (= (type |#$T3@@79|) TyType)) (= (type |#$T4@@54|) TyType)) (= (type |#$T5@@26|) TyType)) (= (type |#$R@@203|) TyType)) (= (Tclass._System.___hTotalFunc6_6 (Tclass._System.___hTotalFunc6 |#$T0@@177| |#$T1@@161| |#$T2@@123| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@203|)) |#$R@@203|)) :qid |unknown.0:0| :skolemid |1142| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@177| |#$T1@@161| |#$T2@@123| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@203|)) )))
(assert (forall ((|#$T0@@178| T@U) (|#$T1@@162| T@U) (|#$T2@@124| T@U) (|#$T3@@80| T@U) (|#$T4@@55| T@U) (|#$T5@@27| T@U) (|#$R@@204| T@U) (bx@@96 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@178|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |#$T2@@124|) TyType)) (= (type |#$T3@@80|) TyType)) (= (type |#$T4@@55|) TyType)) (= (type |#$T5@@27|) TyType)) (= (type |#$R@@204|) TyType)) (= (type bx@@96) BoxType)) ($IsBox bx@@96 (Tclass._System.___hTotalFunc6 |#$T0@@178| |#$T1@@162| |#$T2@@124| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@204|))) (and (= ($Box ($Unbox HandleTypeType bx@@96)) bx@@96) ($Is ($Unbox HandleTypeType bx@@96) (Tclass._System.___hTotalFunc6 |#$T0@@178| |#$T1@@162| |#$T2@@124| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@204|)))) :qid |unknown.0:0| :skolemid |1143| :pattern ( ($IsBox bx@@96 (Tclass._System.___hTotalFunc6 |#$T0@@178| |#$T1@@162| |#$T2@@124| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@204|))) )))
(assert (forall ((|#$T0@@179| T@U) (|#$T1@@163| T@U) (|#$T2@@125| T@U) (|#$T3@@81| T@U) (|#$T4@@56| T@U) (|#$T5@@28| T@U) (|#$R@@205| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@179|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |#$T2@@125|) TyType)) (= (type |#$T3@@81|) TyType)) (= (type |#$T4@@56|) TyType)) (= (type |#$T5@@28|) TyType)) (= (type |#$R@@205|) TyType)) (= (type |f#0@@37|) HandleTypeType)) (= ($Is |f#0@@37| (Tclass._System.___hTotalFunc6 |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@205|))  (and ($Is |f#0@@37| (Tclass._System.___hPartialFunc6 |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@205|)) (forall ((|x0#0@@14| T@U) (|x1#0@@12| T@U) (|x2#0@@8| T@U) (|x3#0@@4| T@U) (|x4#0@@2| T@U) (|x5#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@12|) BoxType)) (= (type |x2#0@@8|) BoxType)) (= (type |x3#0@@4|) BoxType)) (= (type |x4#0@@2|) BoxType)) (= (type |x5#0@@0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@14| |#$T0@@179|) ($IsBox |x1#0@@12| |#$T1@@163|)) ($IsBox |x2#0@@8| |#$T2@@125|)) ($IsBox |x3#0@@4| |#$T3@@81|)) ($IsBox |x4#0@@2| |#$T4@@56|)) ($IsBox |x5#0@@0| |#$T5@@28|))) (Requires6 |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@205| $OneHeap |f#0@@37| |x0#0@@14| |x1#0@@12| |x2#0@@8| |x3#0@@4| |x4#0@@2| |x5#0@@0|)) :qid |unknown.0:0| :skolemid |1144| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@12|) :no-pattern (type |x2#0@@8|) :no-pattern (type |x3#0@@4|) :no-pattern (type |x4#0@@2|) :no-pattern (type |x5#0@@0|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@12|) :no-pattern (U_2_bool |x1#0@@12|) :no-pattern (U_2_int |x2#0@@8|) :no-pattern (U_2_bool |x2#0@@8|) :no-pattern (U_2_int |x3#0@@4|) :no-pattern (U_2_bool |x3#0@@4|) :no-pattern (U_2_int |x4#0@@2|) :no-pattern (U_2_bool |x4#0@@2|) :no-pattern (U_2_int |x5#0@@0|) :no-pattern (U_2_bool |x5#0@@0|) ))))) :qid |unknown.0:0| :skolemid |1145| :pattern ( ($Is |f#0@@37| (Tclass._System.___hTotalFunc6 |#$T0@@179| |#$T1@@163| |#$T2@@125| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@205|))) )))
(assert (forall ((|#$T0@@180| T@U) (|#$T1@@164| T@U) (|#$T2@@126| T@U) (|#$T3@@82| T@U) (|#$T4@@57| T@U) (|#$T5@@29| T@U) (|#$R@@206| T@U) (|f#0@@38| T@U) ($h@@27 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@180|) TyType) (= (type |#$T1@@164|) TyType)) (= (type |#$T2@@126|) TyType)) (= (type |#$T3@@82|) TyType)) (= (type |#$T4@@57|) TyType)) (= (type |#$T5@@29|) TyType)) (= (type |#$R@@206|) TyType)) (= (type |f#0@@38|) HandleTypeType)) (= (type $h@@27) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc6 |#$T0@@180| |#$T1@@164| |#$T2@@126| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@206|) $h@@27) ($IsAlloc |f#0@@38| (Tclass._System.___hPartialFunc6 |#$T0@@180| |#$T1@@164| |#$T2@@126| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@206|) $h@@27))) :qid |unknown.0:0| :skolemid |1146| :pattern ( ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc6 |#$T0@@180| |#$T1@@164| |#$T2@@126| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@206|) $h@@27)) )))
(assert (forall ((arg0@@328 T@U) ) (! (= (type (DatatypeCtorId arg0@@328)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@328)) )))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |1147| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))) :qid |unknown.0:0| :skolemid |1148| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |1149| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |1150| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :qid |unknown.0:0| :skolemid |1151| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) )))
(assert (forall ((arg0@@329 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@329)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@329)) )))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :qid |unknown.0:0| :skolemid |1152| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) )))
(assert (forall ((arg0@@330 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@330)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@330)) )))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :qid |unknown.0:0| :skolemid |1153| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) )))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@97 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@97) BoxType)) ($IsBox bx@@97 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@97)) bx@@97) ($Is ($Unbox DatatypeTypeType bx@@97) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :qid |unknown.0:0| :skolemid |1154| :pattern ( ($IsBox bx@@97 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) )))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@3|)))) :qid |unknown.0:0| :skolemid |1155| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))) )))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@28 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@28)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@28)  (and ($IsAllocBox |a#3#0#0| |_System._tuple#2$T0@@4| $h@@28) ($IsAllocBox |a#3#1#0| |_System._tuple#2$T1@@4| $h@@28)))) :qid |unknown.0:0| :skolemid |1156| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@28)) )))
(assert (forall ((d@@2 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@29 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@29) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@29) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@29)) :qid |unknown.0:0| :skolemid |1157| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@29)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@29)) :qid |unknown.0:0| :skolemid |1158| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@29)) )))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@30) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@30) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@30)) :qid |unknown.0:0| :skolemid |1159| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@30)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@30)) :qid |unknown.0:0| :skolemid |1160| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@30)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |1161| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |1162| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |1163| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |1164| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |1165| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |1166| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |1167| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) )))
(assert (forall ((a@@124 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@124) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@124 b@@61)  (and (= (_System.Tuple2._0 a@@124) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@124) (_System.Tuple2._1 b@@61))))) :qid |unknown.0:0| :skolemid |1168| :pattern ( (|_System.Tuple2#Equal| a@@124 b@@61)) )))
(assert (forall ((a@@125 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@125) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@125 b@@62) (= a@@125 b@@62))) :qid |unknown.0:0| :skolemid |1169| :pattern ( (|_System.Tuple2#Equal| a@@125 b@@62)) )))
(assert (forall ((arg0@@331 T@U) (arg1@@148 T@U) (arg2@@100 T@U) ) (! (= (type (|#_System._tuple#3._#Make3| arg0@@331 arg1@@148 arg2@@100)) DatatypeTypeType) :qid |funType:#_System._tuple#3._#Make3| :pattern ( (|#_System._tuple#3._#Make3| arg0@@331 arg1@@148 arg2@@100)) )))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) (|a#9#2#0| T@U) ) (!  (=> (and (and (= (type |a#9#0#0|) BoxType) (= (type |a#9#1#0|) BoxType)) (= (type |a#9#2#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#3._#Make3| |a#9#0#0| |a#9#1#0| |a#9#2#0|)) |##_System._tuple#3._#Make3|)) :qid |unknown.0:0| :skolemid |1170| :pattern ( (|#_System._tuple#3._#Make3| |a#9#0#0| |a#9#1#0| |a#9#2#0|)) )))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (= (_System.Tuple3.___hMake3_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#3._#Make3|))) :qid |unknown.0:0| :skolemid |1171| :pattern ( (_System.Tuple3.___hMake3_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple3.___hMake3_q d@@7)) (exists ((|a#10#0#0| T@U) (|a#10#1#0| T@U) (|a#10#2#0| T@U) ) (!  (and (and (and (= (type |a#10#0#0|) BoxType) (= (type |a#10#1#0|) BoxType)) (= (type |a#10#2#0|) BoxType)) (= d@@7 (|#_System._tuple#3._#Make3| |a#10#0#0| |a#10#1#0| |a#10#2#0|))) :qid |unknown.0:0| :skolemid |1172| :no-pattern (type |a#10#0#0|) :no-pattern (type |a#10#1#0|) :no-pattern (type |a#10#2#0|) :no-pattern (U_2_int |a#10#0#0|) :no-pattern (U_2_bool |a#10#0#0|) :no-pattern (U_2_int |a#10#1#0|) :no-pattern (U_2_bool |a#10#1#0|) :no-pattern (U_2_int |a#10#2#0|) :no-pattern (U_2_bool |a#10#2#0|) ))) :qid |unknown.0:0| :skolemid |1173| :pattern ( (_System.Tuple3.___hMake3_q d@@7)) )))
(assert (forall ((arg0@@332 T@U) (arg1@@149 T@U) (arg2@@101 T@U) ) (! (= (type (Tclass._System.Tuple3 arg0@@332 arg1@@149 arg2@@101)) TyType) :qid |funType:Tclass._System.Tuple3| :pattern ( (Tclass._System.Tuple3 arg0@@332 arg1@@149 arg2@@101)) )))
(assert (forall ((|_System._tuple#3$T0| T@U) (|_System._tuple#3$T1| T@U) (|_System._tuple#3$T2| T@U) ) (!  (=> (and (and (= (type |_System._tuple#3$T0|) TyType) (= (type |_System._tuple#3$T1|) TyType)) (= (type |_System._tuple#3$T2|) TyType)) (and (= (Tag (Tclass._System.Tuple3 |_System._tuple#3$T0| |_System._tuple#3$T1| |_System._tuple#3$T2|)) Tagclass._System.Tuple3) (= (TagFamily (Tclass._System.Tuple3 |_System._tuple#3$T0| |_System._tuple#3$T1| |_System._tuple#3$T2|)) |tytagFamily$_tuple#3|))) :qid |unknown.0:0| :skolemid |1174| :pattern ( (Tclass._System.Tuple3 |_System._tuple#3$T0| |_System._tuple#3$T1| |_System._tuple#3$T2|)) )))
(assert (forall ((arg0@@333 T@U) ) (! (= (type (Tclass._System.Tuple3_0 arg0@@333)) TyType) :qid |funType:Tclass._System.Tuple3_0| :pattern ( (Tclass._System.Tuple3_0 arg0@@333)) )))
(assert (forall ((|_System._tuple#3$T0@@0| T@U) (|_System._tuple#3$T1@@0| T@U) (|_System._tuple#3$T2@@0| T@U) ) (!  (=> (and (and (= (type |_System._tuple#3$T0@@0|) TyType) (= (type |_System._tuple#3$T1@@0|) TyType)) (= (type |_System._tuple#3$T2@@0|) TyType)) (= (Tclass._System.Tuple3_0 (Tclass._System.Tuple3 |_System._tuple#3$T0@@0| |_System._tuple#3$T1@@0| |_System._tuple#3$T2@@0|)) |_System._tuple#3$T0@@0|)) :qid |unknown.0:0| :skolemid |1175| :pattern ( (Tclass._System.Tuple3 |_System._tuple#3$T0@@0| |_System._tuple#3$T1@@0| |_System._tuple#3$T2@@0|)) )))
(assert (forall ((arg0@@334 T@U) ) (! (= (type (Tclass._System.Tuple3_1 arg0@@334)) TyType) :qid |funType:Tclass._System.Tuple3_1| :pattern ( (Tclass._System.Tuple3_1 arg0@@334)) )))
(assert (forall ((|_System._tuple#3$T0@@1| T@U) (|_System._tuple#3$T1@@1| T@U) (|_System._tuple#3$T2@@1| T@U) ) (!  (=> (and (and (= (type |_System._tuple#3$T0@@1|) TyType) (= (type |_System._tuple#3$T1@@1|) TyType)) (= (type |_System._tuple#3$T2@@1|) TyType)) (= (Tclass._System.Tuple3_1 (Tclass._System.Tuple3 |_System._tuple#3$T0@@1| |_System._tuple#3$T1@@1| |_System._tuple#3$T2@@1|)) |_System._tuple#3$T1@@1|)) :qid |unknown.0:0| :skolemid |1176| :pattern ( (Tclass._System.Tuple3 |_System._tuple#3$T0@@1| |_System._tuple#3$T1@@1| |_System._tuple#3$T2@@1|)) )))
(assert (forall ((arg0@@335 T@U) ) (! (= (type (Tclass._System.Tuple3_2 arg0@@335)) TyType) :qid |funType:Tclass._System.Tuple3_2| :pattern ( (Tclass._System.Tuple3_2 arg0@@335)) )))
(assert (forall ((|_System._tuple#3$T0@@2| T@U) (|_System._tuple#3$T1@@2| T@U) (|_System._tuple#3$T2@@2| T@U) ) (!  (=> (and (and (= (type |_System._tuple#3$T0@@2|) TyType) (= (type |_System._tuple#3$T1@@2|) TyType)) (= (type |_System._tuple#3$T2@@2|) TyType)) (= (Tclass._System.Tuple3_2 (Tclass._System.Tuple3 |_System._tuple#3$T0@@2| |_System._tuple#3$T1@@2| |_System._tuple#3$T2@@2|)) |_System._tuple#3$T2@@2|)) :qid |unknown.0:0| :skolemid |1177| :pattern ( (Tclass._System.Tuple3 |_System._tuple#3$T0@@2| |_System._tuple#3$T1@@2| |_System._tuple#3$T2@@2|)) )))
(assert (forall ((|_System._tuple#3$T0@@3| T@U) (|_System._tuple#3$T1@@3| T@U) (|_System._tuple#3$T2@@3| T@U) (bx@@98 T@U) ) (!  (=> (and (and (and (and (= (type |_System._tuple#3$T0@@3|) TyType) (= (type |_System._tuple#3$T1@@3|) TyType)) (= (type |_System._tuple#3$T2@@3|) TyType)) (= (type bx@@98) BoxType)) ($IsBox bx@@98 (Tclass._System.Tuple3 |_System._tuple#3$T0@@3| |_System._tuple#3$T1@@3| |_System._tuple#3$T2@@3|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@98)) bx@@98) ($Is ($Unbox DatatypeTypeType bx@@98) (Tclass._System.Tuple3 |_System._tuple#3$T0@@3| |_System._tuple#3$T1@@3| |_System._tuple#3$T2@@3|)))) :qid |unknown.0:0| :skolemid |1178| :pattern ( ($IsBox bx@@98 (Tclass._System.Tuple3 |_System._tuple#3$T0@@3| |_System._tuple#3$T1@@3| |_System._tuple#3$T2@@3|))) )))
(assert (forall ((|_System._tuple#3$T0@@4| T@U) (|_System._tuple#3$T1@@4| T@U) (|_System._tuple#3$T2@@4| T@U) (|a#11#0#0| T@U) (|a#11#1#0| T@U) (|a#11#2#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#3$T0@@4|) TyType) (= (type |_System._tuple#3$T1@@4|) TyType)) (= (type |_System._tuple#3$T2@@4|) TyType)) (= (type |a#11#0#0|) BoxType)) (= (type |a#11#1#0|) BoxType)) (= (type |a#11#2#0|) BoxType)) (= ($Is (|#_System._tuple#3._#Make3| |a#11#0#0| |a#11#1#0| |a#11#2#0|) (Tclass._System.Tuple3 |_System._tuple#3$T0@@4| |_System._tuple#3$T1@@4| |_System._tuple#3$T2@@4|))  (and (and ($IsBox |a#11#0#0| |_System._tuple#3$T0@@4|) ($IsBox |a#11#1#0| |_System._tuple#3$T1@@4|)) ($IsBox |a#11#2#0| |_System._tuple#3$T2@@4|)))) :qid |unknown.0:0| :skolemid |1179| :pattern ( ($Is (|#_System._tuple#3._#Make3| |a#11#0#0| |a#11#1#0| |a#11#2#0|) (Tclass._System.Tuple3 |_System._tuple#3$T0@@4| |_System._tuple#3$T1@@4| |_System._tuple#3$T2@@4|))) )))
(assert (forall ((|_System._tuple#3$T0@@5| T@U) (|_System._tuple#3$T1@@5| T@U) (|_System._tuple#3$T2@@5| T@U) (|a#12#0#0| T@U) (|a#12#1#0| T@U) (|a#12#2#0| T@U) ($h@@31 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |_System._tuple#3$T0@@5|) TyType) (= (type |_System._tuple#3$T1@@5|) TyType)) (= (type |_System._tuple#3$T2@@5|) TyType)) (= (type |a#12#0#0|) BoxType)) (= (type |a#12#1#0|) BoxType)) (= (type |a#12#2#0|) BoxType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@31)) (= ($IsAlloc (|#_System._tuple#3._#Make3| |a#12#0#0| |a#12#1#0| |a#12#2#0|) (Tclass._System.Tuple3 |_System._tuple#3$T0@@5| |_System._tuple#3$T1@@5| |_System._tuple#3$T2@@5|) $h@@31)  (and (and ($IsAllocBox |a#12#0#0| |_System._tuple#3$T0@@5| $h@@31) ($IsAllocBox |a#12#1#0| |_System._tuple#3$T1@@5| $h@@31)) ($IsAllocBox |a#12#2#0| |_System._tuple#3$T2@@5| $h@@31)))) :qid |unknown.0:0| :skolemid |1180| :pattern ( ($IsAlloc (|#_System._tuple#3._#Make3| |a#12#0#0| |a#12#1#0| |a#12#2#0|) (Tclass._System.Tuple3 |_System._tuple#3$T0@@5| |_System._tuple#3$T1@@5| |_System._tuple#3$T2@@5|) $h@@31)) )))
(assert (forall ((arg0@@336 T@U) ) (! (= (type (_System.Tuple3._0 arg0@@336)) BoxType) :qid |funType:_System.Tuple3._0| :pattern ( (_System.Tuple3._0 arg0@@336)) )))
(assert (forall ((d@@8 T@U) (|_System._tuple#3$T0@@6| T@U) ($h@@32 T@U) ) (!  (=> (and (and (and (= (type d@@8) DatatypeTypeType) (= (type |_System._tuple#3$T0@@6|) TyType)) (= (type $h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@32) (and (_System.Tuple3.___hMake3_q d@@8) (exists ((|_System._tuple#3$T1@@6| T@U) (|_System._tuple#3$T2@@6| T@U) ) (!  (and (and (= (type |_System._tuple#3$T1@@6|) TyType) (= (type |_System._tuple#3$T2@@6|) TyType)) ($IsAlloc d@@8 (Tclass._System.Tuple3 |_System._tuple#3$T0@@6| |_System._tuple#3$T1@@6| |_System._tuple#3$T2@@6|) $h@@32)) :qid |unknown.0:0| :skolemid |1181| :pattern ( ($IsAlloc d@@8 (Tclass._System.Tuple3 |_System._tuple#3$T0@@6| |_System._tuple#3$T1@@6| |_System._tuple#3$T2@@6|) $h@@32)) ))))) ($IsAllocBox (_System.Tuple3._0 d@@8) |_System._tuple#3$T0@@6| $h@@32)) :qid |unknown.0:0| :skolemid |1182| :pattern ( ($IsAllocBox (_System.Tuple3._0 d@@8) |_System._tuple#3$T0@@6| $h@@32)) )))
(assert (forall ((arg0@@337 T@U) ) (! (= (type (_System.Tuple3._1 arg0@@337)) BoxType) :qid |funType:_System.Tuple3._1| :pattern ( (_System.Tuple3._1 arg0@@337)) )))
(assert (forall ((d@@9 T@U) (|_System._tuple#3$T1@@7| T@U) ($h@@33 T@U) ) (!  (=> (and (and (and (= (type d@@9) DatatypeTypeType) (= (type |_System._tuple#3$T1@@7|) TyType)) (= (type $h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@33) (and (_System.Tuple3.___hMake3_q d@@9) (exists ((|_System._tuple#3$T0@@7| T@U) (|_System._tuple#3$T2@@7| T@U) ) (!  (and (and (= (type |_System._tuple#3$T0@@7|) TyType) (= (type |_System._tuple#3$T2@@7|) TyType)) ($IsAlloc d@@9 (Tclass._System.Tuple3 |_System._tuple#3$T0@@7| |_System._tuple#3$T1@@7| |_System._tuple#3$T2@@7|) $h@@33)) :qid |unknown.0:0| :skolemid |1183| :pattern ( ($IsAlloc d@@9 (Tclass._System.Tuple3 |_System._tuple#3$T0@@7| |_System._tuple#3$T1@@7| |_System._tuple#3$T2@@7|) $h@@33)) ))))) ($IsAllocBox (_System.Tuple3._1 d@@9) |_System._tuple#3$T1@@7| $h@@33)) :qid |unknown.0:0| :skolemid |1184| :pattern ( ($IsAllocBox (_System.Tuple3._1 d@@9) |_System._tuple#3$T1@@7| $h@@33)) )))
(assert (forall ((arg0@@338 T@U) ) (! (= (type (_System.Tuple3._2 arg0@@338)) BoxType) :qid |funType:_System.Tuple3._2| :pattern ( (_System.Tuple3._2 arg0@@338)) )))
(assert (forall ((d@@10 T@U) (|_System._tuple#3$T2@@8| T@U) ($h@@34 T@U) ) (!  (=> (and (and (and (= (type d@@10) DatatypeTypeType) (= (type |_System._tuple#3$T2@@8|) TyType)) (= (type $h@@34) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@34) (and (_System.Tuple3.___hMake3_q d@@10) (exists ((|_System._tuple#3$T0@@8| T@U) (|_System._tuple#3$T1@@8| T@U) ) (!  (and (and (= (type |_System._tuple#3$T0@@8|) TyType) (= (type |_System._tuple#3$T1@@8|) TyType)) ($IsAlloc d@@10 (Tclass._System.Tuple3 |_System._tuple#3$T0@@8| |_System._tuple#3$T1@@8| |_System._tuple#3$T2@@8|) $h@@34)) :qid |unknown.0:0| :skolemid |1185| :pattern ( ($IsAlloc d@@10 (Tclass._System.Tuple3 |_System._tuple#3$T0@@8| |_System._tuple#3$T1@@8| |_System._tuple#3$T2@@8|) $h@@34)) ))))) ($IsAllocBox (_System.Tuple3._2 d@@10) |_System._tuple#3$T2@@8| $h@@34)) :qid |unknown.0:0| :skolemid |1186| :pattern ( ($IsAllocBox (_System.Tuple3._2 d@@10) |_System._tuple#3$T2@@8| $h@@34)) )))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) (|a#13#2#0| T@U) ) (!  (=> (and (and (= (type |a#13#0#0|) BoxType) (= (type |a#13#1#0|) BoxType)) (= (type |a#13#2#0|) BoxType)) (= (|#_System._tuple#3._#Make3| (Lit |a#13#0#0|) (Lit |a#13#1#0|) (Lit |a#13#2#0|)) (Lit (|#_System._tuple#3._#Make3| |a#13#0#0| |a#13#1#0| |a#13#2#0|)))) :qid |unknown.0:0| :skolemid |1187| :pattern ( (|#_System._tuple#3._#Make3| (Lit |a#13#0#0|) (Lit |a#13#1#0|) (Lit |a#13#2#0|))) )))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) (|a#14#2#0| T@U) ) (!  (=> (and (and (= (type |a#14#0#0|) BoxType) (= (type |a#14#1#0|) BoxType)) (= (type |a#14#2#0|) BoxType)) (= (_System.Tuple3._0 (|#_System._tuple#3._#Make3| |a#14#0#0| |a#14#1#0| |a#14#2#0|)) |a#14#0#0|)) :qid |unknown.0:0| :skolemid |1188| :pattern ( (|#_System._tuple#3._#Make3| |a#14#0#0| |a#14#1#0| |a#14#2#0|)) )))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) (|a#15#2#0| T@U) ) (!  (=> (and (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= (type |a#15#2#0|) BoxType)) (< (BoxRank |a#15#0#0|) (DtRank (|#_System._tuple#3._#Make3| |a#15#0#0| |a#15#1#0| |a#15#2#0|)))) :qid |unknown.0:0| :skolemid |1189| :pattern ( (|#_System._tuple#3._#Make3| |a#15#0#0| |a#15#1#0| |a#15#2#0|)) )))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) (|a#16#2#0| T@U) ) (!  (=> (and (and (= (type |a#16#0#0|) BoxType) (= (type |a#16#1#0|) BoxType)) (= (type |a#16#2#0|) BoxType)) (= (_System.Tuple3._1 (|#_System._tuple#3._#Make3| |a#16#0#0| |a#16#1#0| |a#16#2#0|)) |a#16#1#0|)) :qid |unknown.0:0| :skolemid |1190| :pattern ( (|#_System._tuple#3._#Make3| |a#16#0#0| |a#16#1#0| |a#16#2#0|)) )))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) (|a#17#2#0| T@U) ) (!  (=> (and (and (= (type |a#17#0#0|) BoxType) (= (type |a#17#1#0|) BoxType)) (= (type |a#17#2#0|) BoxType)) (< (BoxRank |a#17#1#0|) (DtRank (|#_System._tuple#3._#Make3| |a#17#0#0| |a#17#1#0| |a#17#2#0|)))) :qid |unknown.0:0| :skolemid |1191| :pattern ( (|#_System._tuple#3._#Make3| |a#17#0#0| |a#17#1#0| |a#17#2#0|)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) (|a#18#2#0| T@U) ) (!  (=> (and (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (type |a#18#2#0|) BoxType)) (= (_System.Tuple3._2 (|#_System._tuple#3._#Make3| |a#18#0#0| |a#18#1#0| |a#18#2#0|)) |a#18#2#0|)) :qid |unknown.0:0| :skolemid |1192| :pattern ( (|#_System._tuple#3._#Make3| |a#18#0#0| |a#18#1#0| |a#18#2#0|)) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) (|a#19#2#0| T@U) ) (!  (=> (and (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (= (type |a#19#2#0|) BoxType)) (< (BoxRank |a#19#2#0|) (DtRank (|#_System._tuple#3._#Make3| |a#19#0#0| |a#19#1#0| |a#19#2#0|)))) :qid |unknown.0:0| :skolemid |1193| :pattern ( (|#_System._tuple#3._#Make3| |a#19#0#0| |a#19#1#0| |a#19#2#0|)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (|$IsA#_System.Tuple3| d@@11)) (_System.Tuple3.___hMake3_q d@@11)) :qid |unknown.0:0| :skolemid |1194| :pattern ( (|$IsA#_System.Tuple3| d@@11)) )))
(assert (forall ((|_System._tuple#3$T0@@9| T@U) (|_System._tuple#3$T1@@9| T@U) (|_System._tuple#3$T2@@9| T@U) (d@@12 T@U) ) (!  (=> (and (and (and (and (= (type |_System._tuple#3$T0@@9|) TyType) (= (type |_System._tuple#3$T1@@9|) TyType)) (= (type |_System._tuple#3$T2@@9|) TyType)) (= (type d@@12) DatatypeTypeType)) ($Is d@@12 (Tclass._System.Tuple3 |_System._tuple#3$T0@@9| |_System._tuple#3$T1@@9| |_System._tuple#3$T2@@9|))) (_System.Tuple3.___hMake3_q d@@12)) :qid |unknown.0:0| :skolemid |1195| :pattern ( (_System.Tuple3.___hMake3_q d@@12) ($Is d@@12 (Tclass._System.Tuple3 |_System._tuple#3$T0@@9| |_System._tuple#3$T1@@9| |_System._tuple#3$T2@@9|))) )))
(assert (forall ((a@@126 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@126) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (= (|_System.Tuple3#Equal| a@@126 b@@63)  (and (and (= (_System.Tuple3._0 a@@126) (_System.Tuple3._0 b@@63)) (= (_System.Tuple3._1 a@@126) (_System.Tuple3._1 b@@63))) (= (_System.Tuple3._2 a@@126) (_System.Tuple3._2 b@@63))))) :qid |unknown.0:0| :skolemid |1196| :pattern ( (|_System.Tuple3#Equal| a@@126 b@@63)) )))
(assert (forall ((a@@127 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@127) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (= (|_System.Tuple3#Equal| a@@127 b@@64) (= a@@127 b@@64))) :qid |unknown.0:0| :skolemid |1197| :pattern ( (|_System.Tuple3#Equal| a@@127 b@@64)) )))
(assert (forall ((arg0@@339 T@U) (arg1@@150 T@U) (arg2@@102 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO arg0@@339 arg1@@150 arg2@@102)) TyType) :qid |funType:Tclass._System.___hFunc2OSO| :pattern ( (Tclass._System.___hFunc2OSO arg0@@339 arg1@@150 arg2@@102)) )))
(assert (forall ((|#$T0@@181| T@U) (|#$T1@@165| T@U) (|#$R@@207| T@U) ) (!  (=> (and (and (= (type |#$T0@@181|) TyType) (= (type |#$T1@@165|) TyType)) (= (type |#$R@@207|) TyType)) (and (= (Tag (Tclass._System.___hFunc2OSO |#$T0@@181| |#$T1@@165| |#$R@@207|)) Tagclass._System.___hFunc2OSO) (= (TagFamily (Tclass._System.___hFunc2OSO |#$T0@@181| |#$T1@@165| |#$R@@207|)) |tytagFamily$_#Func2OSO|))) :qid |unknown.0:0| :skolemid |1198| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@181| |#$T1@@165| |#$R@@207|)) )))
(assert (forall ((arg0@@340 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_0 arg0@@340)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_0| :pattern ( (Tclass._System.___hFunc2OSO_0 arg0@@340)) )))
(assert (forall ((|#$T0@@182| T@U) (|#$T1@@166| T@U) (|#$R@@208| T@U) ) (!  (=> (and (and (= (type |#$T0@@182|) TyType) (= (type |#$T1@@166|) TyType)) (= (type |#$R@@208|) TyType)) (= (Tclass._System.___hFunc2OSO_0 (Tclass._System.___hFunc2OSO |#$T0@@182| |#$T1@@166| |#$R@@208|)) |#$T0@@182|)) :qid |unknown.0:0| :skolemid |1199| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@182| |#$T1@@166| |#$R@@208|)) )))
(assert (forall ((arg0@@341 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_1 arg0@@341)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_1| :pattern ( (Tclass._System.___hFunc2OSO_1 arg0@@341)) )))
(assert (forall ((|#$T0@@183| T@U) (|#$T1@@167| T@U) (|#$R@@209| T@U) ) (!  (=> (and (and (= (type |#$T0@@183|) TyType) (= (type |#$T1@@167|) TyType)) (= (type |#$R@@209|) TyType)) (= (Tclass._System.___hFunc2OSO_1 (Tclass._System.___hFunc2OSO |#$T0@@183| |#$T1@@167| |#$R@@209|)) |#$T1@@167|)) :qid |unknown.0:0| :skolemid |1200| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@183| |#$T1@@167| |#$R@@209|)) )))
(assert (forall ((arg0@@342 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_2 arg0@@342)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_2| :pattern ( (Tclass._System.___hFunc2OSO_2 arg0@@342)) )))
(assert (forall ((|#$T0@@184| T@U) (|#$T1@@168| T@U) (|#$R@@210| T@U) ) (!  (=> (and (and (= (type |#$T0@@184|) TyType) (= (type |#$T1@@168|) TyType)) (= (type |#$R@@210|) TyType)) (= (Tclass._System.___hFunc2OSO_2 (Tclass._System.___hFunc2OSO |#$T0@@184| |#$T1@@168| |#$R@@210|)) |#$R@@210|)) :qid |unknown.0:0| :skolemid |1201| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@184| |#$T1@@168| |#$R@@210|)) )))
(assert (forall ((|#$T0@@185| T@U) (|#$T1@@169| T@U) (|#$R@@211| T@U) (bx@@99 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@185|) TyType) (= (type |#$T1@@169|) TyType)) (= (type |#$R@@211|) TyType)) (= (type bx@@99) BoxType)) ($IsBox bx@@99 (Tclass._System.___hFunc2OSO |#$T0@@185| |#$T1@@169| |#$R@@211|))) (and (= ($Box ($Unbox HandleTypeType bx@@99)) bx@@99) ($Is ($Unbox HandleTypeType bx@@99) (Tclass._System.___hFunc2OSO |#$T0@@185| |#$T1@@169| |#$R@@211|)))) :qid |unknown.0:0| :skolemid |1202| :pattern ( ($IsBox bx@@99 (Tclass._System.___hFunc2OSO |#$T0@@185| |#$T1@@169| |#$R@@211|))) )))
(assert (forall ((arg0@@343 T@U) (arg1@@151 T@U) (arg2@@103 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO arg0@@343 arg1@@151 arg2@@103)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO| :pattern ( (Tclass._System.___hPartialFunc2OSO arg0@@343 arg1@@151 arg2@@103)) )))
(assert (forall ((|#$T0@@186| T@U) (|#$T1@@170| T@U) (|#$R@@212| T@U) ) (!  (=> (and (and (= (type |#$T0@@186|) TyType) (= (type |#$T1@@170|) TyType)) (= (type |#$R@@212|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2OSO |#$T0@@186| |#$T1@@170| |#$R@@212|)) Tagclass._System.___hPartialFunc2OSO) (= (TagFamily (Tclass._System.___hPartialFunc2OSO |#$T0@@186| |#$T1@@170| |#$R@@212|)) |tytagFamily$_#PartialFunc2OSO|))) :qid |unknown.0:0| :skolemid |1203| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@186| |#$T1@@170| |#$R@@212|)) )))
(assert (forall ((arg0@@344 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_0 arg0@@344)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_0| :pattern ( (Tclass._System.___hPartialFunc2OSO_0 arg0@@344)) )))
(assert (forall ((|#$T0@@187| T@U) (|#$T1@@171| T@U) (|#$R@@213| T@U) ) (!  (=> (and (and (= (type |#$T0@@187|) TyType) (= (type |#$T1@@171|) TyType)) (= (type |#$R@@213|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_0 (Tclass._System.___hPartialFunc2OSO |#$T0@@187| |#$T1@@171| |#$R@@213|)) |#$T0@@187|)) :qid |unknown.0:0| :skolemid |1204| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@187| |#$T1@@171| |#$R@@213|)) )))
(assert (forall ((arg0@@345 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_1 arg0@@345)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_1| :pattern ( (Tclass._System.___hPartialFunc2OSO_1 arg0@@345)) )))
(assert (forall ((|#$T0@@188| T@U) (|#$T1@@172| T@U) (|#$R@@214| T@U) ) (!  (=> (and (and (= (type |#$T0@@188|) TyType) (= (type |#$T1@@172|) TyType)) (= (type |#$R@@214|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_1 (Tclass._System.___hPartialFunc2OSO |#$T0@@188| |#$T1@@172| |#$R@@214|)) |#$T1@@172|)) :qid |unknown.0:0| :skolemid |1205| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@188| |#$T1@@172| |#$R@@214|)) )))
(assert (forall ((arg0@@346 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_2 arg0@@346)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_2| :pattern ( (Tclass._System.___hPartialFunc2OSO_2 arg0@@346)) )))
(assert (forall ((|#$T0@@189| T@U) (|#$T1@@173| T@U) (|#$R@@215| T@U) ) (!  (=> (and (and (= (type |#$T0@@189|) TyType) (= (type |#$T1@@173|) TyType)) (= (type |#$R@@215|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_2 (Tclass._System.___hPartialFunc2OSO |#$T0@@189| |#$T1@@173| |#$R@@215|)) |#$R@@215|)) :qid |unknown.0:0| :skolemid |1206| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@189| |#$T1@@173| |#$R@@215|)) )))
(assert (forall ((|#$T0@@190| T@U) (|#$T1@@174| T@U) (|#$R@@216| T@U) (bx@@100 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@190|) TyType) (= (type |#$T1@@174|) TyType)) (= (type |#$R@@216|) TyType)) (= (type bx@@100) BoxType)) ($IsBox bx@@100 (Tclass._System.___hPartialFunc2OSO |#$T0@@190| |#$T1@@174| |#$R@@216|))) (and (= ($Box ($Unbox HandleTypeType bx@@100)) bx@@100) ($Is ($Unbox HandleTypeType bx@@100) (Tclass._System.___hPartialFunc2OSO |#$T0@@190| |#$T1@@174| |#$R@@216|)))) :qid |unknown.0:0| :skolemid |1207| :pattern ( ($IsBox bx@@100 (Tclass._System.___hPartialFunc2OSO |#$T0@@190| |#$T1@@174| |#$R@@216|))) )))
(assert (forall ((|#$T0@@191| T@U) (|#$T1@@175| T@U) (|#$R@@217| T@U) (|f#0@@39| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@191|) TyType) (= (type |#$T1@@175|) TyType)) (= (type |#$R@@217|) TyType)) (= (type |f#0@@39|) HandleTypeType)) (= ($Is |f#0@@39| (Tclass._System.___hPartialFunc2OSO |#$T0@@191| |#$T1@@175| |#$R@@217|))  (and ($Is |f#0@@39| (Tclass._System.___hFunc2OSO |#$T0@@191| |#$T1@@175| |#$R@@217|)) (forall ((|x0#0@@15| T@U) (|x1#0@@13| T@U) ) (!  (=> (and (and (= (type |x0#0@@15|) BoxType) (= (type |x1#0@@13|) BoxType)) (and ($IsBox |x0#0@@15| |#$T0@@191|) ($IsBox |x1#0@@13| |#$T1@@175|))) (|Set#Equal| (Reads2 |#$T0@@191| |#$T1@@175| |#$R@@217| $OneHeap |f#0@@39| |x0#0@@15| |x1#0@@13|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1208| :no-pattern (type |x0#0@@15|) :no-pattern (type |x1#0@@13|) :no-pattern (U_2_int |x0#0@@15|) :no-pattern (U_2_bool |x0#0@@15|) :no-pattern (U_2_int |x1#0@@13|) :no-pattern (U_2_bool |x1#0@@13|) ))))) :qid |unknown.0:0| :skolemid |1209| :pattern ( ($Is |f#0@@39| (Tclass._System.___hPartialFunc2OSO |#$T0@@191| |#$T1@@175| |#$R@@217|))) )))
(assert (forall ((|#$T0@@192| T@U) (|#$T1@@176| T@U) (|#$R@@218| T@U) (|f#0@@40| T@U) ($h@@35 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@192|) TyType) (= (type |#$T1@@176|) TyType)) (= (type |#$R@@218|) TyType)) (= (type |f#0@@40|) HandleTypeType)) (= (type $h@@35) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc2OSO |#$T0@@192| |#$T1@@176| |#$R@@218|) $h@@35) ($IsAlloc |f#0@@40| (Tclass._System.___hFunc2OSO |#$T0@@192| |#$T1@@176| |#$R@@218|) $h@@35))) :qid |unknown.0:0| :skolemid |1210| :pattern ( ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc2OSO |#$T0@@192| |#$T1@@176| |#$R@@218|) $h@@35)) )))
(assert (forall ((arg0@@347 T@U) (arg1@@152 T@U) (arg2@@104 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO arg0@@347 arg1@@152 arg2@@104)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO| :pattern ( (Tclass._System.___hTotalFunc2OSO arg0@@347 arg1@@152 arg2@@104)) )))
(assert (forall ((|#$T0@@193| T@U) (|#$T1@@177| T@U) (|#$R@@219| T@U) ) (!  (=> (and (and (= (type |#$T0@@193|) TyType) (= (type |#$T1@@177|) TyType)) (= (type |#$R@@219|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2OSO |#$T0@@193| |#$T1@@177| |#$R@@219|)) Tagclass._System.___hTotalFunc2OSO) (= (TagFamily (Tclass._System.___hTotalFunc2OSO |#$T0@@193| |#$T1@@177| |#$R@@219|)) |tytagFamily$_#TotalFunc2OSO|))) :qid |unknown.0:0| :skolemid |1211| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@193| |#$T1@@177| |#$R@@219|)) )))
(assert (forall ((arg0@@348 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_0 arg0@@348)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_0| :pattern ( (Tclass._System.___hTotalFunc2OSO_0 arg0@@348)) )))
(assert (forall ((|#$T0@@194| T@U) (|#$T1@@178| T@U) (|#$R@@220| T@U) ) (!  (=> (and (and (= (type |#$T0@@194|) TyType) (= (type |#$T1@@178|) TyType)) (= (type |#$R@@220|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_0 (Tclass._System.___hTotalFunc2OSO |#$T0@@194| |#$T1@@178| |#$R@@220|)) |#$T0@@194|)) :qid |unknown.0:0| :skolemid |1212| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@194| |#$T1@@178| |#$R@@220|)) )))
(assert (forall ((arg0@@349 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_1 arg0@@349)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_1| :pattern ( (Tclass._System.___hTotalFunc2OSO_1 arg0@@349)) )))
(assert (forall ((|#$T0@@195| T@U) (|#$T1@@179| T@U) (|#$R@@221| T@U) ) (!  (=> (and (and (= (type |#$T0@@195|) TyType) (= (type |#$T1@@179|) TyType)) (= (type |#$R@@221|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_1 (Tclass._System.___hTotalFunc2OSO |#$T0@@195| |#$T1@@179| |#$R@@221|)) |#$T1@@179|)) :qid |unknown.0:0| :skolemid |1213| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@195| |#$T1@@179| |#$R@@221|)) )))
(assert (forall ((arg0@@350 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_2 arg0@@350)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_2| :pattern ( (Tclass._System.___hTotalFunc2OSO_2 arg0@@350)) )))
(assert (forall ((|#$T0@@196| T@U) (|#$T1@@180| T@U) (|#$R@@222| T@U) ) (!  (=> (and (and (= (type |#$T0@@196|) TyType) (= (type |#$T1@@180|) TyType)) (= (type |#$R@@222|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_2 (Tclass._System.___hTotalFunc2OSO |#$T0@@196| |#$T1@@180| |#$R@@222|)) |#$R@@222|)) :qid |unknown.0:0| :skolemid |1214| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@196| |#$T1@@180| |#$R@@222|)) )))
(assert (forall ((|#$T0@@197| T@U) (|#$T1@@181| T@U) (|#$R@@223| T@U) (bx@@101 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@197|) TyType) (= (type |#$T1@@181|) TyType)) (= (type |#$R@@223|) TyType)) (= (type bx@@101) BoxType)) ($IsBox bx@@101 (Tclass._System.___hTotalFunc2OSO |#$T0@@197| |#$T1@@181| |#$R@@223|))) (and (= ($Box ($Unbox HandleTypeType bx@@101)) bx@@101) ($Is ($Unbox HandleTypeType bx@@101) (Tclass._System.___hTotalFunc2OSO |#$T0@@197| |#$T1@@181| |#$R@@223|)))) :qid |unknown.0:0| :skolemid |1215| :pattern ( ($IsBox bx@@101 (Tclass._System.___hTotalFunc2OSO |#$T0@@197| |#$T1@@181| |#$R@@223|))) )))
(assert (forall ((|#$T0@@198| T@U) (|#$T1@@182| T@U) (|#$R@@224| T@U) (|f#0@@41| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@198|) TyType) (= (type |#$T1@@182|) TyType)) (= (type |#$R@@224|) TyType)) (= (type |f#0@@41|) HandleTypeType)) (= ($Is |f#0@@41| (Tclass._System.___hTotalFunc2OSO |#$T0@@198| |#$T1@@182| |#$R@@224|))  (and ($Is |f#0@@41| (Tclass._System.___hPartialFunc2OSO |#$T0@@198| |#$T1@@182| |#$R@@224|)) (forall ((|x0#0@@16| T@U) (|x1#0@@14| T@U) ) (!  (=> (and (and (= (type |x0#0@@16|) BoxType) (= (type |x1#0@@14|) BoxType)) (and ($IsBox |x0#0@@16| |#$T0@@198|) ($IsBox |x1#0@@14| |#$T1@@182|))) (Requires2 |#$T0@@198| |#$T1@@182| |#$R@@224| $OneHeap |f#0@@41| |x0#0@@16| |x1#0@@14|)) :qid |unknown.0:0| :skolemid |1216| :no-pattern (type |x0#0@@16|) :no-pattern (type |x1#0@@14|) :no-pattern (U_2_int |x0#0@@16|) :no-pattern (U_2_bool |x0#0@@16|) :no-pattern (U_2_int |x1#0@@14|) :no-pattern (U_2_bool |x1#0@@14|) ))))) :qid |unknown.0:0| :skolemid |1217| :pattern ( ($Is |f#0@@41| (Tclass._System.___hTotalFunc2OSO |#$T0@@198| |#$T1@@182| |#$R@@224|))) )))
(assert (forall ((|#$T0@@199| T@U) (|#$T1@@183| T@U) (|#$R@@225| T@U) (|f#0@@42| T@U) ($h@@36 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@199|) TyType) (= (type |#$T1@@183|) TyType)) (= (type |#$R@@225|) TyType)) (= (type |f#0@@42|) HandleTypeType)) (= (type $h@@36) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc2OSO |#$T0@@199| |#$T1@@183| |#$R@@225|) $h@@36) ($IsAlloc |f#0@@42| (Tclass._System.___hPartialFunc2OSO |#$T0@@199| |#$T1@@183| |#$R@@225|) $h@@36))) :qid |unknown.0:0| :skolemid |1218| :pattern ( ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc2OSO |#$T0@@199| |#$T1@@183| |#$R@@225|) $h@@36)) )))
(assert (forall ((arg0@@351 T@U) (arg1@@153 T@U) (arg2@@105 T@U) (arg3@@73 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO arg0@@351 arg1@@153 arg2@@105 arg3@@73)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO| :pattern ( (Tclass._System.___hFunc3LLOO arg0@@351 arg1@@153 arg2@@105 arg3@@73)) )))
(assert (forall ((|#$T0@@200| T@U) (|#$T1@@184| T@U) (|#$T2@@127| T@U) (|#$R@@226| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@200|) TyType) (= (type |#$T1@@184|) TyType)) (= (type |#$T2@@127|) TyType)) (= (type |#$R@@226|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOO |#$T0@@200| |#$T1@@184| |#$T2@@127| |#$R@@226|)) Tagclass._System.___hFunc3LLOO) (= (TagFamily (Tclass._System.___hFunc3LLOO |#$T0@@200| |#$T1@@184| |#$T2@@127| |#$R@@226|)) |tytagFamily$_#Func3LLOO|))) :qid |unknown.0:0| :skolemid |1219| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@200| |#$T1@@184| |#$T2@@127| |#$R@@226|)) )))
(assert (forall ((arg0@@352 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_0 arg0@@352)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_0| :pattern ( (Tclass._System.___hFunc3LLOO_0 arg0@@352)) )))
(assert (forall ((|#$T0@@201| T@U) (|#$T1@@185| T@U) (|#$T2@@128| T@U) (|#$R@@227| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@201|) TyType) (= (type |#$T1@@185|) TyType)) (= (type |#$T2@@128|) TyType)) (= (type |#$R@@227|) TyType)) (= (Tclass._System.___hFunc3LLOO_0 (Tclass._System.___hFunc3LLOO |#$T0@@201| |#$T1@@185| |#$T2@@128| |#$R@@227|)) |#$T0@@201|)) :qid |unknown.0:0| :skolemid |1220| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@201| |#$T1@@185| |#$T2@@128| |#$R@@227|)) )))
(assert (forall ((arg0@@353 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_1 arg0@@353)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_1| :pattern ( (Tclass._System.___hFunc3LLOO_1 arg0@@353)) )))
(assert (forall ((|#$T0@@202| T@U) (|#$T1@@186| T@U) (|#$T2@@129| T@U) (|#$R@@228| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@202|) TyType) (= (type |#$T1@@186|) TyType)) (= (type |#$T2@@129|) TyType)) (= (type |#$R@@228|) TyType)) (= (Tclass._System.___hFunc3LLOO_1 (Tclass._System.___hFunc3LLOO |#$T0@@202| |#$T1@@186| |#$T2@@129| |#$R@@228|)) |#$T1@@186|)) :qid |unknown.0:0| :skolemid |1221| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@202| |#$T1@@186| |#$T2@@129| |#$R@@228|)) )))
(assert (forall ((arg0@@354 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_2 arg0@@354)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_2| :pattern ( (Tclass._System.___hFunc3LLOO_2 arg0@@354)) )))
(assert (forall ((|#$T0@@203| T@U) (|#$T1@@187| T@U) (|#$T2@@130| T@U) (|#$R@@229| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@203|) TyType) (= (type |#$T1@@187|) TyType)) (= (type |#$T2@@130|) TyType)) (= (type |#$R@@229|) TyType)) (= (Tclass._System.___hFunc3LLOO_2 (Tclass._System.___hFunc3LLOO |#$T0@@203| |#$T1@@187| |#$T2@@130| |#$R@@229|)) |#$T2@@130|)) :qid |unknown.0:0| :skolemid |1222| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@203| |#$T1@@187| |#$T2@@130| |#$R@@229|)) )))
(assert (forall ((arg0@@355 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_3 arg0@@355)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_3| :pattern ( (Tclass._System.___hFunc3LLOO_3 arg0@@355)) )))
(assert (forall ((|#$T0@@204| T@U) (|#$T1@@188| T@U) (|#$T2@@131| T@U) (|#$R@@230| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@204|) TyType) (= (type |#$T1@@188|) TyType)) (= (type |#$T2@@131|) TyType)) (= (type |#$R@@230|) TyType)) (= (Tclass._System.___hFunc3LLOO_3 (Tclass._System.___hFunc3LLOO |#$T0@@204| |#$T1@@188| |#$T2@@131| |#$R@@230|)) |#$R@@230|)) :qid |unknown.0:0| :skolemid |1223| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@204| |#$T1@@188| |#$T2@@131| |#$R@@230|)) )))
(assert (forall ((|#$T0@@205| T@U) (|#$T1@@189| T@U) (|#$T2@@132| T@U) (|#$R@@231| T@U) (bx@@102 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@205|) TyType) (= (type |#$T1@@189|) TyType)) (= (type |#$T2@@132|) TyType)) (= (type |#$R@@231|) TyType)) (= (type bx@@102) BoxType)) ($IsBox bx@@102 (Tclass._System.___hFunc3LLOO |#$T0@@205| |#$T1@@189| |#$T2@@132| |#$R@@231|))) (and (= ($Box ($Unbox HandleTypeType bx@@102)) bx@@102) ($Is ($Unbox HandleTypeType bx@@102) (Tclass._System.___hFunc3LLOO |#$T0@@205| |#$T1@@189| |#$T2@@132| |#$R@@231|)))) :qid |unknown.0:0| :skolemid |1224| :pattern ( ($IsBox bx@@102 (Tclass._System.___hFunc3LLOO |#$T0@@205| |#$T1@@189| |#$T2@@132| |#$R@@231|))) )))
(assert (forall ((arg0@@356 T@U) (arg1@@154 T@U) (arg2@@106 T@U) (arg3@@74 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO arg0@@356 arg1@@154 arg2@@106 arg3@@74)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO| :pattern ( (Tclass._System.___hPartialFunc3LLOO arg0@@356 arg1@@154 arg2@@106 arg3@@74)) )))
(assert (forall ((|#$T0@@206| T@U) (|#$T1@@190| T@U) (|#$T2@@133| T@U) (|#$R@@232| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@206|) TyType) (= (type |#$T1@@190|) TyType)) (= (type |#$T2@@133|) TyType)) (= (type |#$R@@232|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOO |#$T0@@206| |#$T1@@190| |#$T2@@133| |#$R@@232|)) Tagclass._System.___hPartialFunc3LLOO) (= (TagFamily (Tclass._System.___hPartialFunc3LLOO |#$T0@@206| |#$T1@@190| |#$T2@@133| |#$R@@232|)) |tytagFamily$_#PartialFunc3LLOO|))) :qid |unknown.0:0| :skolemid |1225| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@206| |#$T1@@190| |#$T2@@133| |#$R@@232|)) )))
(assert (forall ((arg0@@357 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_0 arg0@@357)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_0| :pattern ( (Tclass._System.___hPartialFunc3LLOO_0 arg0@@357)) )))
(assert (forall ((|#$T0@@207| T@U) (|#$T1@@191| T@U) (|#$T2@@134| T@U) (|#$R@@233| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@207|) TyType) (= (type |#$T1@@191|) TyType)) (= (type |#$T2@@134|) TyType)) (= (type |#$R@@233|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_0 (Tclass._System.___hPartialFunc3LLOO |#$T0@@207| |#$T1@@191| |#$T2@@134| |#$R@@233|)) |#$T0@@207|)) :qid |unknown.0:0| :skolemid |1226| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@207| |#$T1@@191| |#$T2@@134| |#$R@@233|)) )))
(assert (forall ((arg0@@358 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_1 arg0@@358)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_1| :pattern ( (Tclass._System.___hPartialFunc3LLOO_1 arg0@@358)) )))
(assert (forall ((|#$T0@@208| T@U) (|#$T1@@192| T@U) (|#$T2@@135| T@U) (|#$R@@234| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@208|) TyType) (= (type |#$T1@@192|) TyType)) (= (type |#$T2@@135|) TyType)) (= (type |#$R@@234|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_1 (Tclass._System.___hPartialFunc3LLOO |#$T0@@208| |#$T1@@192| |#$T2@@135| |#$R@@234|)) |#$T1@@192|)) :qid |unknown.0:0| :skolemid |1227| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@208| |#$T1@@192| |#$T2@@135| |#$R@@234|)) )))
(assert (forall ((arg0@@359 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_2 arg0@@359)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_2| :pattern ( (Tclass._System.___hPartialFunc3LLOO_2 arg0@@359)) )))
(assert (forall ((|#$T0@@209| T@U) (|#$T1@@193| T@U) (|#$T2@@136| T@U) (|#$R@@235| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@209|) TyType) (= (type |#$T1@@193|) TyType)) (= (type |#$T2@@136|) TyType)) (= (type |#$R@@235|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_2 (Tclass._System.___hPartialFunc3LLOO |#$T0@@209| |#$T1@@193| |#$T2@@136| |#$R@@235|)) |#$T2@@136|)) :qid |unknown.0:0| :skolemid |1228| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@209| |#$T1@@193| |#$T2@@136| |#$R@@235|)) )))
(assert (forall ((arg0@@360 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_3 arg0@@360)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_3| :pattern ( (Tclass._System.___hPartialFunc3LLOO_3 arg0@@360)) )))
(assert (forall ((|#$T0@@210| T@U) (|#$T1@@194| T@U) (|#$T2@@137| T@U) (|#$R@@236| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@210|) TyType) (= (type |#$T1@@194|) TyType)) (= (type |#$T2@@137|) TyType)) (= (type |#$R@@236|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_3 (Tclass._System.___hPartialFunc3LLOO |#$T0@@210| |#$T1@@194| |#$T2@@137| |#$R@@236|)) |#$R@@236|)) :qid |unknown.0:0| :skolemid |1229| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@210| |#$T1@@194| |#$T2@@137| |#$R@@236|)) )))
(assert (forall ((|#$T0@@211| T@U) (|#$T1@@195| T@U) (|#$T2@@138| T@U) (|#$R@@237| T@U) (bx@@103 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@211|) TyType) (= (type |#$T1@@195|) TyType)) (= (type |#$T2@@138|) TyType)) (= (type |#$R@@237|) TyType)) (= (type bx@@103) BoxType)) ($IsBox bx@@103 (Tclass._System.___hPartialFunc3LLOO |#$T0@@211| |#$T1@@195| |#$T2@@138| |#$R@@237|))) (and (= ($Box ($Unbox HandleTypeType bx@@103)) bx@@103) ($Is ($Unbox HandleTypeType bx@@103) (Tclass._System.___hPartialFunc3LLOO |#$T0@@211| |#$T1@@195| |#$T2@@138| |#$R@@237|)))) :qid |unknown.0:0| :skolemid |1230| :pattern ( ($IsBox bx@@103 (Tclass._System.___hPartialFunc3LLOO |#$T0@@211| |#$T1@@195| |#$T2@@138| |#$R@@237|))) )))
(assert (forall ((|#$T0@@212| T@U) (|#$T1@@196| T@U) (|#$T2@@139| T@U) (|#$R@@238| T@U) (|f#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@212|) TyType) (= (type |#$T1@@196|) TyType)) (= (type |#$T2@@139|) TyType)) (= (type |#$R@@238|) TyType)) (= (type |f#0@@43|) HandleTypeType)) (= ($Is |f#0@@43| (Tclass._System.___hPartialFunc3LLOO |#$T0@@212| |#$T1@@196| |#$T2@@139| |#$R@@238|))  (and ($Is |f#0@@43| (Tclass._System.___hFunc3LLOO |#$T0@@212| |#$T1@@196| |#$T2@@139| |#$R@@238|)) (forall ((|x0#0@@17| T@U) (|x1#0@@15| T@U) (|x2#0@@9| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@17|) BoxType) (= (type |x1#0@@15|) BoxType)) (= (type |x2#0@@9|) BoxType)) (and (and ($IsBox |x0#0@@17| |#$T0@@212|) ($IsBox |x1#0@@15| |#$T1@@196|)) ($IsBox |x2#0@@9| |#$T2@@139|))) (|Set#Equal| (Reads3 |#$T0@@212| |#$T1@@196| |#$T2@@139| |#$R@@238| $OneHeap |f#0@@43| |x0#0@@17| |x1#0@@15| |x2#0@@9|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1231| :no-pattern (type |x0#0@@17|) :no-pattern (type |x1#0@@15|) :no-pattern (type |x2#0@@9|) :no-pattern (U_2_int |x0#0@@17|) :no-pattern (U_2_bool |x0#0@@17|) :no-pattern (U_2_int |x1#0@@15|) :no-pattern (U_2_bool |x1#0@@15|) :no-pattern (U_2_int |x2#0@@9|) :no-pattern (U_2_bool |x2#0@@9|) ))))) :qid |unknown.0:0| :skolemid |1232| :pattern ( ($Is |f#0@@43| (Tclass._System.___hPartialFunc3LLOO |#$T0@@212| |#$T1@@196| |#$T2@@139| |#$R@@238|))) )))
(assert (forall ((|#$T0@@213| T@U) (|#$T1@@197| T@U) (|#$T2@@140| T@U) (|#$R@@239| T@U) (|f#0@@44| T@U) ($h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@213|) TyType) (= (type |#$T1@@197|) TyType)) (= (type |#$T2@@140|) TyType)) (= (type |#$R@@239|) TyType)) (= (type |f#0@@44|) HandleTypeType)) (= (type $h@@37) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc3LLOO |#$T0@@213| |#$T1@@197| |#$T2@@140| |#$R@@239|) $h@@37) ($IsAlloc |f#0@@44| (Tclass._System.___hFunc3LLOO |#$T0@@213| |#$T1@@197| |#$T2@@140| |#$R@@239|) $h@@37))) :qid |unknown.0:0| :skolemid |1233| :pattern ( ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc3LLOO |#$T0@@213| |#$T1@@197| |#$T2@@140| |#$R@@239|) $h@@37)) )))
(assert (forall ((arg0@@361 T@U) (arg1@@155 T@U) (arg2@@107 T@U) (arg3@@75 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO arg0@@361 arg1@@155 arg2@@107 arg3@@75)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO| :pattern ( (Tclass._System.___hTotalFunc3LLOO arg0@@361 arg1@@155 arg2@@107 arg3@@75)) )))
(assert (forall ((|#$T0@@214| T@U) (|#$T1@@198| T@U) (|#$T2@@141| T@U) (|#$R@@240| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@214|) TyType) (= (type |#$T1@@198|) TyType)) (= (type |#$T2@@141|) TyType)) (= (type |#$R@@240|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOO |#$T0@@214| |#$T1@@198| |#$T2@@141| |#$R@@240|)) Tagclass._System.___hTotalFunc3LLOO) (= (TagFamily (Tclass._System.___hTotalFunc3LLOO |#$T0@@214| |#$T1@@198| |#$T2@@141| |#$R@@240|)) |tytagFamily$_#TotalFunc3LLOO|))) :qid |unknown.0:0| :skolemid |1234| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@214| |#$T1@@198| |#$T2@@141| |#$R@@240|)) )))
(assert (forall ((arg0@@362 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_0 arg0@@362)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_0| :pattern ( (Tclass._System.___hTotalFunc3LLOO_0 arg0@@362)) )))
(assert (forall ((|#$T0@@215| T@U) (|#$T1@@199| T@U) (|#$T2@@142| T@U) (|#$R@@241| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@215|) TyType) (= (type |#$T1@@199|) TyType)) (= (type |#$T2@@142|) TyType)) (= (type |#$R@@241|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_0 (Tclass._System.___hTotalFunc3LLOO |#$T0@@215| |#$T1@@199| |#$T2@@142| |#$R@@241|)) |#$T0@@215|)) :qid |unknown.0:0| :skolemid |1235| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@215| |#$T1@@199| |#$T2@@142| |#$R@@241|)) )))
(assert (forall ((arg0@@363 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_1 arg0@@363)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_1| :pattern ( (Tclass._System.___hTotalFunc3LLOO_1 arg0@@363)) )))
(assert (forall ((|#$T0@@216| T@U) (|#$T1@@200| T@U) (|#$T2@@143| T@U) (|#$R@@242| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@216|) TyType) (= (type |#$T1@@200|) TyType)) (= (type |#$T2@@143|) TyType)) (= (type |#$R@@242|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_1 (Tclass._System.___hTotalFunc3LLOO |#$T0@@216| |#$T1@@200| |#$T2@@143| |#$R@@242|)) |#$T1@@200|)) :qid |unknown.0:0| :skolemid |1236| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@216| |#$T1@@200| |#$T2@@143| |#$R@@242|)) )))
(assert (forall ((arg0@@364 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_2 arg0@@364)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_2| :pattern ( (Tclass._System.___hTotalFunc3LLOO_2 arg0@@364)) )))
(assert (forall ((|#$T0@@217| T@U) (|#$T1@@201| T@U) (|#$T2@@144| T@U) (|#$R@@243| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@217|) TyType) (= (type |#$T1@@201|) TyType)) (= (type |#$T2@@144|) TyType)) (= (type |#$R@@243|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_2 (Tclass._System.___hTotalFunc3LLOO |#$T0@@217| |#$T1@@201| |#$T2@@144| |#$R@@243|)) |#$T2@@144|)) :qid |unknown.0:0| :skolemid |1237| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@217| |#$T1@@201| |#$T2@@144| |#$R@@243|)) )))
(assert (forall ((arg0@@365 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_3 arg0@@365)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_3| :pattern ( (Tclass._System.___hTotalFunc3LLOO_3 arg0@@365)) )))
(assert (forall ((|#$T0@@218| T@U) (|#$T1@@202| T@U) (|#$T2@@145| T@U) (|#$R@@244| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@218|) TyType) (= (type |#$T1@@202|) TyType)) (= (type |#$T2@@145|) TyType)) (= (type |#$R@@244|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_3 (Tclass._System.___hTotalFunc3LLOO |#$T0@@218| |#$T1@@202| |#$T2@@145| |#$R@@244|)) |#$R@@244|)) :qid |unknown.0:0| :skolemid |1238| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@218| |#$T1@@202| |#$T2@@145| |#$R@@244|)) )))
(assert (forall ((|#$T0@@219| T@U) (|#$T1@@203| T@U) (|#$T2@@146| T@U) (|#$R@@245| T@U) (bx@@104 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@219|) TyType) (= (type |#$T1@@203|) TyType)) (= (type |#$T2@@146|) TyType)) (= (type |#$R@@245|) TyType)) (= (type bx@@104) BoxType)) ($IsBox bx@@104 (Tclass._System.___hTotalFunc3LLOO |#$T0@@219| |#$T1@@203| |#$T2@@146| |#$R@@245|))) (and (= ($Box ($Unbox HandleTypeType bx@@104)) bx@@104) ($Is ($Unbox HandleTypeType bx@@104) (Tclass._System.___hTotalFunc3LLOO |#$T0@@219| |#$T1@@203| |#$T2@@146| |#$R@@245|)))) :qid |unknown.0:0| :skolemid |1239| :pattern ( ($IsBox bx@@104 (Tclass._System.___hTotalFunc3LLOO |#$T0@@219| |#$T1@@203| |#$T2@@146| |#$R@@245|))) )))
(assert (forall ((|#$T0@@220| T@U) (|#$T1@@204| T@U) (|#$T2@@147| T@U) (|#$R@@246| T@U) (|f#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@220|) TyType) (= (type |#$T1@@204|) TyType)) (= (type |#$T2@@147|) TyType)) (= (type |#$R@@246|) TyType)) (= (type |f#0@@45|) HandleTypeType)) (= ($Is |f#0@@45| (Tclass._System.___hTotalFunc3LLOO |#$T0@@220| |#$T1@@204| |#$T2@@147| |#$R@@246|))  (and ($Is |f#0@@45| (Tclass._System.___hPartialFunc3LLOO |#$T0@@220| |#$T1@@204| |#$T2@@147| |#$R@@246|)) (forall ((|x0#0@@18| T@U) (|x1#0@@16| T@U) (|x2#0@@10| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@18|) BoxType) (= (type |x1#0@@16|) BoxType)) (= (type |x2#0@@10|) BoxType)) (and (and ($IsBox |x0#0@@18| |#$T0@@220|) ($IsBox |x1#0@@16| |#$T1@@204|)) ($IsBox |x2#0@@10| |#$T2@@147|))) (Requires3 |#$T0@@220| |#$T1@@204| |#$T2@@147| |#$R@@246| $OneHeap |f#0@@45| |x0#0@@18| |x1#0@@16| |x2#0@@10|)) :qid |unknown.0:0| :skolemid |1240| :no-pattern (type |x0#0@@18|) :no-pattern (type |x1#0@@16|) :no-pattern (type |x2#0@@10|) :no-pattern (U_2_int |x0#0@@18|) :no-pattern (U_2_bool |x0#0@@18|) :no-pattern (U_2_int |x1#0@@16|) :no-pattern (U_2_bool |x1#0@@16|) :no-pattern (U_2_int |x2#0@@10|) :no-pattern (U_2_bool |x2#0@@10|) ))))) :qid |unknown.0:0| :skolemid |1241| :pattern ( ($Is |f#0@@45| (Tclass._System.___hTotalFunc3LLOO |#$T0@@220| |#$T1@@204| |#$T2@@147| |#$R@@246|))) )))
(assert (forall ((|#$T0@@221| T@U) (|#$T1@@205| T@U) (|#$T2@@148| T@U) (|#$R@@247| T@U) (|f#0@@46| T@U) ($h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@221|) TyType) (= (type |#$T1@@205|) TyType)) (= (type |#$T2@@148|) TyType)) (= (type |#$R@@247|) TyType)) (= (type |f#0@@46|) HandleTypeType)) (= (type $h@@38) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc3LLOO |#$T0@@221| |#$T1@@205| |#$T2@@148| |#$R@@247|) $h@@38) ($IsAlloc |f#0@@46| (Tclass._System.___hPartialFunc3LLOO |#$T0@@221| |#$T1@@205| |#$T2@@148| |#$R@@247|) $h@@38))) :qid |unknown.0:0| :skolemid |1242| :pattern ( ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc3LLOO |#$T0@@221| |#$T1@@205| |#$T2@@148| |#$R@@247|) $h@@38)) )))
(assert (forall ((arg0@@366 T@U) (arg1@@156 T@U) ) (! (= (type (Tclass._System.___hFunc1OS arg0@@366 arg1@@156)) TyType) :qid |funType:Tclass._System.___hFunc1OS| :pattern ( (Tclass._System.___hFunc1OS arg0@@366 arg1@@156)) )))
(assert (forall ((|#$T0@@222| T@U) (|#$R@@248| T@U) ) (!  (=> (and (= (type |#$T0@@222|) TyType) (= (type |#$R@@248|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OS |#$T0@@222| |#$R@@248|)) Tagclass._System.___hFunc1OS) (= (TagFamily (Tclass._System.___hFunc1OS |#$T0@@222| |#$R@@248|)) |tytagFamily$_#Func1OS|))) :qid |unknown.0:0| :skolemid |1243| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@222| |#$R@@248|)) )))
(assert (forall ((arg0@@367 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_0 arg0@@367)) TyType) :qid |funType:Tclass._System.___hFunc1OS_0| :pattern ( (Tclass._System.___hFunc1OS_0 arg0@@367)) )))
(assert (forall ((|#$T0@@223| T@U) (|#$R@@249| T@U) ) (!  (=> (and (= (type |#$T0@@223|) TyType) (= (type |#$R@@249|) TyType)) (= (Tclass._System.___hFunc1OS_0 (Tclass._System.___hFunc1OS |#$T0@@223| |#$R@@249|)) |#$T0@@223|)) :qid |unknown.0:0| :skolemid |1244| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@223| |#$R@@249|)) )))
(assert (forall ((arg0@@368 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_1 arg0@@368)) TyType) :qid |funType:Tclass._System.___hFunc1OS_1| :pattern ( (Tclass._System.___hFunc1OS_1 arg0@@368)) )))
(assert (forall ((|#$T0@@224| T@U) (|#$R@@250| T@U) ) (!  (=> (and (= (type |#$T0@@224|) TyType) (= (type |#$R@@250|) TyType)) (= (Tclass._System.___hFunc1OS_1 (Tclass._System.___hFunc1OS |#$T0@@224| |#$R@@250|)) |#$R@@250|)) :qid |unknown.0:0| :skolemid |1245| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@224| |#$R@@250|)) )))
(assert (forall ((|#$T0@@225| T@U) (|#$R@@251| T@U) (bx@@105 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@225|) TyType) (= (type |#$R@@251|) TyType)) (= (type bx@@105) BoxType)) ($IsBox bx@@105 (Tclass._System.___hFunc1OS |#$T0@@225| |#$R@@251|))) (and (= ($Box ($Unbox HandleTypeType bx@@105)) bx@@105) ($Is ($Unbox HandleTypeType bx@@105) (Tclass._System.___hFunc1OS |#$T0@@225| |#$R@@251|)))) :qid |unknown.0:0| :skolemid |1246| :pattern ( ($IsBox bx@@105 (Tclass._System.___hFunc1OS |#$T0@@225| |#$R@@251|))) )))
(assert (forall ((arg0@@369 T@U) (arg1@@157 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS arg0@@369 arg1@@157)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS| :pattern ( (Tclass._System.___hPartialFunc1OS arg0@@369 arg1@@157)) )))
(assert (forall ((|#$T0@@226| T@U) (|#$R@@252| T@U) ) (!  (=> (and (= (type |#$T0@@226|) TyType) (= (type |#$R@@252|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OS |#$T0@@226| |#$R@@252|)) Tagclass._System.___hPartialFunc1OS) (= (TagFamily (Tclass._System.___hPartialFunc1OS |#$T0@@226| |#$R@@252|)) |tytagFamily$_#PartialFunc1OS|))) :qid |unknown.0:0| :skolemid |1247| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@226| |#$R@@252|)) )))
(assert (forall ((arg0@@370 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_0 arg0@@370)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_0| :pattern ( (Tclass._System.___hPartialFunc1OS_0 arg0@@370)) )))
(assert (forall ((|#$T0@@227| T@U) (|#$R@@253| T@U) ) (!  (=> (and (= (type |#$T0@@227|) TyType) (= (type |#$R@@253|) TyType)) (= (Tclass._System.___hPartialFunc1OS_0 (Tclass._System.___hPartialFunc1OS |#$T0@@227| |#$R@@253|)) |#$T0@@227|)) :qid |unknown.0:0| :skolemid |1248| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@227| |#$R@@253|)) )))
(assert (forall ((arg0@@371 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_1 arg0@@371)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_1| :pattern ( (Tclass._System.___hPartialFunc1OS_1 arg0@@371)) )))
(assert (forall ((|#$T0@@228| T@U) (|#$R@@254| T@U) ) (!  (=> (and (= (type |#$T0@@228|) TyType) (= (type |#$R@@254|) TyType)) (= (Tclass._System.___hPartialFunc1OS_1 (Tclass._System.___hPartialFunc1OS |#$T0@@228| |#$R@@254|)) |#$R@@254|)) :qid |unknown.0:0| :skolemid |1249| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@228| |#$R@@254|)) )))
(assert (forall ((|#$T0@@229| T@U) (|#$R@@255| T@U) (bx@@106 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@229|) TyType) (= (type |#$R@@255|) TyType)) (= (type bx@@106) BoxType)) ($IsBox bx@@106 (Tclass._System.___hPartialFunc1OS |#$T0@@229| |#$R@@255|))) (and (= ($Box ($Unbox HandleTypeType bx@@106)) bx@@106) ($Is ($Unbox HandleTypeType bx@@106) (Tclass._System.___hPartialFunc1OS |#$T0@@229| |#$R@@255|)))) :qid |unknown.0:0| :skolemid |1250| :pattern ( ($IsBox bx@@106 (Tclass._System.___hPartialFunc1OS |#$T0@@229| |#$R@@255|))) )))
(assert (forall ((|#$T0@@230| T@U) (|#$R@@256| T@U) (|f#0@@47| T@U) ) (!  (=> (and (and (= (type |#$T0@@230|) TyType) (= (type |#$R@@256|) TyType)) (= (type |f#0@@47|) HandleTypeType)) (= ($Is |f#0@@47| (Tclass._System.___hPartialFunc1OS |#$T0@@230| |#$R@@256|))  (and ($Is |f#0@@47| (Tclass._System.___hFunc1OS |#$T0@@230| |#$R@@256|)) (forall ((|x0#0@@19| T@U) ) (!  (=> (and (= (type |x0#0@@19|) BoxType) ($IsBox |x0#0@@19| |#$T0@@230|)) (|Set#Equal| (Reads1 |#$T0@@230| |#$R@@256| $OneHeap |f#0@@47| |x0#0@@19|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1251| :no-pattern (type |x0#0@@19|) :no-pattern (U_2_int |x0#0@@19|) :no-pattern (U_2_bool |x0#0@@19|) ))))) :qid |unknown.0:0| :skolemid |1252| :pattern ( ($Is |f#0@@47| (Tclass._System.___hPartialFunc1OS |#$T0@@230| |#$R@@256|))) )))
(assert (forall ((|#$T0@@231| T@U) (|#$R@@257| T@U) (|f#0@@48| T@U) ($h@@39 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@231|) TyType) (= (type |#$R@@257|) TyType)) (= (type |f#0@@48|) HandleTypeType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc1OS |#$T0@@231| |#$R@@257|) $h@@39) ($IsAlloc |f#0@@48| (Tclass._System.___hFunc1OS |#$T0@@231| |#$R@@257|) $h@@39))) :qid |unknown.0:0| :skolemid |1253| :pattern ( ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc1OS |#$T0@@231| |#$R@@257|) $h@@39)) )))
(assert (forall ((arg0@@372 T@U) (arg1@@158 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS arg0@@372 arg1@@158)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS| :pattern ( (Tclass._System.___hTotalFunc1OS arg0@@372 arg1@@158)) )))
(assert (forall ((|#$T0@@232| T@U) (|#$R@@258| T@U) ) (!  (=> (and (= (type |#$T0@@232|) TyType) (= (type |#$R@@258|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OS |#$T0@@232| |#$R@@258|)) Tagclass._System.___hTotalFunc1OS) (= (TagFamily (Tclass._System.___hTotalFunc1OS |#$T0@@232| |#$R@@258|)) |tytagFamily$_#TotalFunc1OS|))) :qid |unknown.0:0| :skolemid |1254| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@232| |#$R@@258|)) )))
(assert (forall ((arg0@@373 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_0 arg0@@373)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_0| :pattern ( (Tclass._System.___hTotalFunc1OS_0 arg0@@373)) )))
(assert (forall ((|#$T0@@233| T@U) (|#$R@@259| T@U) ) (!  (=> (and (= (type |#$T0@@233|) TyType) (= (type |#$R@@259|) TyType)) (= (Tclass._System.___hTotalFunc1OS_0 (Tclass._System.___hTotalFunc1OS |#$T0@@233| |#$R@@259|)) |#$T0@@233|)) :qid |unknown.0:0| :skolemid |1255| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@233| |#$R@@259|)) )))
(assert (forall ((arg0@@374 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_1 arg0@@374)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_1| :pattern ( (Tclass._System.___hTotalFunc1OS_1 arg0@@374)) )))
(assert (forall ((|#$T0@@234| T@U) (|#$R@@260| T@U) ) (!  (=> (and (= (type |#$T0@@234|) TyType) (= (type |#$R@@260|) TyType)) (= (Tclass._System.___hTotalFunc1OS_1 (Tclass._System.___hTotalFunc1OS |#$T0@@234| |#$R@@260|)) |#$R@@260|)) :qid |unknown.0:0| :skolemid |1256| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@234| |#$R@@260|)) )))
(assert (forall ((|#$T0@@235| T@U) (|#$R@@261| T@U) (bx@@107 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@235|) TyType) (= (type |#$R@@261|) TyType)) (= (type bx@@107) BoxType)) ($IsBox bx@@107 (Tclass._System.___hTotalFunc1OS |#$T0@@235| |#$R@@261|))) (and (= ($Box ($Unbox HandleTypeType bx@@107)) bx@@107) ($Is ($Unbox HandleTypeType bx@@107) (Tclass._System.___hTotalFunc1OS |#$T0@@235| |#$R@@261|)))) :qid |unknown.0:0| :skolemid |1257| :pattern ( ($IsBox bx@@107 (Tclass._System.___hTotalFunc1OS |#$T0@@235| |#$R@@261|))) )))
(assert (forall ((|#$T0@@236| T@U) (|#$R@@262| T@U) (|f#0@@49| T@U) ) (!  (=> (and (and (= (type |#$T0@@236|) TyType) (= (type |#$R@@262|) TyType)) (= (type |f#0@@49|) HandleTypeType)) (= ($Is |f#0@@49| (Tclass._System.___hTotalFunc1OS |#$T0@@236| |#$R@@262|))  (and ($Is |f#0@@49| (Tclass._System.___hPartialFunc1OS |#$T0@@236| |#$R@@262|)) (forall ((|x0#0@@20| T@U) ) (!  (=> (and (= (type |x0#0@@20|) BoxType) ($IsBox |x0#0@@20| |#$T0@@236|)) (Requires1 |#$T0@@236| |#$R@@262| $OneHeap |f#0@@49| |x0#0@@20|)) :qid |unknown.0:0| :skolemid |1258| :no-pattern (type |x0#0@@20|) :no-pattern (U_2_int |x0#0@@20|) :no-pattern (U_2_bool |x0#0@@20|) ))))) :qid |unknown.0:0| :skolemid |1259| :pattern ( ($Is |f#0@@49| (Tclass._System.___hTotalFunc1OS |#$T0@@236| |#$R@@262|))) )))
(assert (forall ((|#$T0@@237| T@U) (|#$R@@263| T@U) (|f#0@@50| T@U) ($h@@40 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@237|) TyType) (= (type |#$R@@263|) TyType)) (= (type |f#0@@50|) HandleTypeType)) (= (type $h@@40) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc1OS |#$T0@@237| |#$R@@263|) $h@@40) ($IsAlloc |f#0@@50| (Tclass._System.___hPartialFunc1OS |#$T0@@237| |#$R@@263|) $h@@40))) :qid |unknown.0:0| :skolemid |1260| :pattern ( ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc1OS |#$T0@@237| |#$R@@263|) $h@@40)) )))
(assert (forall ((arg0@@375 T@U) (arg1@@159 T@U) (arg2@@108 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO arg0@@375 arg1@@159 arg2@@108)) TyType) :qid |funType:Tclass._System.___hFunc2LOO| :pattern ( (Tclass._System.___hFunc2LOO arg0@@375 arg1@@159 arg2@@108)) )))
(assert (forall ((|#$T0@@238| T@U) (|#$T1@@206| T@U) (|#$R@@264| T@U) ) (!  (=> (and (and (= (type |#$T0@@238|) TyType) (= (type |#$T1@@206|) TyType)) (= (type |#$R@@264|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LOO |#$T0@@238| |#$T1@@206| |#$R@@264|)) Tagclass._System.___hFunc2LOO) (= (TagFamily (Tclass._System.___hFunc2LOO |#$T0@@238| |#$T1@@206| |#$R@@264|)) |tytagFamily$_#Func2LOO|))) :qid |unknown.0:0| :skolemid |1261| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@238| |#$T1@@206| |#$R@@264|)) )))
(assert (forall ((arg0@@376 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_0 arg0@@376)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_0| :pattern ( (Tclass._System.___hFunc2LOO_0 arg0@@376)) )))
(assert (forall ((|#$T0@@239| T@U) (|#$T1@@207| T@U) (|#$R@@265| T@U) ) (!  (=> (and (and (= (type |#$T0@@239|) TyType) (= (type |#$T1@@207|) TyType)) (= (type |#$R@@265|) TyType)) (= (Tclass._System.___hFunc2LOO_0 (Tclass._System.___hFunc2LOO |#$T0@@239| |#$T1@@207| |#$R@@265|)) |#$T0@@239|)) :qid |unknown.0:0| :skolemid |1262| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@239| |#$T1@@207| |#$R@@265|)) )))
(assert (forall ((arg0@@377 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_1 arg0@@377)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_1| :pattern ( (Tclass._System.___hFunc2LOO_1 arg0@@377)) )))
(assert (forall ((|#$T0@@240| T@U) (|#$T1@@208| T@U) (|#$R@@266| T@U) ) (!  (=> (and (and (= (type |#$T0@@240|) TyType) (= (type |#$T1@@208|) TyType)) (= (type |#$R@@266|) TyType)) (= (Tclass._System.___hFunc2LOO_1 (Tclass._System.___hFunc2LOO |#$T0@@240| |#$T1@@208| |#$R@@266|)) |#$T1@@208|)) :qid |unknown.0:0| :skolemid |1263| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@240| |#$T1@@208| |#$R@@266|)) )))
(assert (forall ((arg0@@378 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_2 arg0@@378)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_2| :pattern ( (Tclass._System.___hFunc2LOO_2 arg0@@378)) )))
(assert (forall ((|#$T0@@241| T@U) (|#$T1@@209| T@U) (|#$R@@267| T@U) ) (!  (=> (and (and (= (type |#$T0@@241|) TyType) (= (type |#$T1@@209|) TyType)) (= (type |#$R@@267|) TyType)) (= (Tclass._System.___hFunc2LOO_2 (Tclass._System.___hFunc2LOO |#$T0@@241| |#$T1@@209| |#$R@@267|)) |#$R@@267|)) :qid |unknown.0:0| :skolemid |1264| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@241| |#$T1@@209| |#$R@@267|)) )))
(assert (forall ((|#$T0@@242| T@U) (|#$T1@@210| T@U) (|#$R@@268| T@U) (bx@@108 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@242|) TyType) (= (type |#$T1@@210|) TyType)) (= (type |#$R@@268|) TyType)) (= (type bx@@108) BoxType)) ($IsBox bx@@108 (Tclass._System.___hFunc2LOO |#$T0@@242| |#$T1@@210| |#$R@@268|))) (and (= ($Box ($Unbox HandleTypeType bx@@108)) bx@@108) ($Is ($Unbox HandleTypeType bx@@108) (Tclass._System.___hFunc2LOO |#$T0@@242| |#$T1@@210| |#$R@@268|)))) :qid |unknown.0:0| :skolemid |1265| :pattern ( ($IsBox bx@@108 (Tclass._System.___hFunc2LOO |#$T0@@242| |#$T1@@210| |#$R@@268|))) )))
(assert (forall ((arg0@@379 T@U) (arg1@@160 T@U) (arg2@@109 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO arg0@@379 arg1@@160 arg2@@109)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO| :pattern ( (Tclass._System.___hPartialFunc2LOO arg0@@379 arg1@@160 arg2@@109)) )))
(assert (forall ((|#$T0@@243| T@U) (|#$T1@@211| T@U) (|#$R@@269| T@U) ) (!  (=> (and (and (= (type |#$T0@@243|) TyType) (= (type |#$T1@@211|) TyType)) (= (type |#$R@@269|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LOO |#$T0@@243| |#$T1@@211| |#$R@@269|)) Tagclass._System.___hPartialFunc2LOO) (= (TagFamily (Tclass._System.___hPartialFunc2LOO |#$T0@@243| |#$T1@@211| |#$R@@269|)) |tytagFamily$_#PartialFunc2LOO|))) :qid |unknown.0:0| :skolemid |1266| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@243| |#$T1@@211| |#$R@@269|)) )))
(assert (forall ((arg0@@380 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_0 arg0@@380)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_0| :pattern ( (Tclass._System.___hPartialFunc2LOO_0 arg0@@380)) )))
(assert (forall ((|#$T0@@244| T@U) (|#$T1@@212| T@U) (|#$R@@270| T@U) ) (!  (=> (and (and (= (type |#$T0@@244|) TyType) (= (type |#$T1@@212|) TyType)) (= (type |#$R@@270|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_0 (Tclass._System.___hPartialFunc2LOO |#$T0@@244| |#$T1@@212| |#$R@@270|)) |#$T0@@244|)) :qid |unknown.0:0| :skolemid |1267| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@244| |#$T1@@212| |#$R@@270|)) )))
(assert (forall ((arg0@@381 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_1 arg0@@381)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_1| :pattern ( (Tclass._System.___hPartialFunc2LOO_1 arg0@@381)) )))
(assert (forall ((|#$T0@@245| T@U) (|#$T1@@213| T@U) (|#$R@@271| T@U) ) (!  (=> (and (and (= (type |#$T0@@245|) TyType) (= (type |#$T1@@213|) TyType)) (= (type |#$R@@271|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_1 (Tclass._System.___hPartialFunc2LOO |#$T0@@245| |#$T1@@213| |#$R@@271|)) |#$T1@@213|)) :qid |unknown.0:0| :skolemid |1268| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@245| |#$T1@@213| |#$R@@271|)) )))
(assert (forall ((arg0@@382 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_2 arg0@@382)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_2| :pattern ( (Tclass._System.___hPartialFunc2LOO_2 arg0@@382)) )))
(assert (forall ((|#$T0@@246| T@U) (|#$T1@@214| T@U) (|#$R@@272| T@U) ) (!  (=> (and (and (= (type |#$T0@@246|) TyType) (= (type |#$T1@@214|) TyType)) (= (type |#$R@@272|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_2 (Tclass._System.___hPartialFunc2LOO |#$T0@@246| |#$T1@@214| |#$R@@272|)) |#$R@@272|)) :qid |unknown.0:0| :skolemid |1269| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@246| |#$T1@@214| |#$R@@272|)) )))
(assert (forall ((|#$T0@@247| T@U) (|#$T1@@215| T@U) (|#$R@@273| T@U) (bx@@109 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@247|) TyType) (= (type |#$T1@@215|) TyType)) (= (type |#$R@@273|) TyType)) (= (type bx@@109) BoxType)) ($IsBox bx@@109 (Tclass._System.___hPartialFunc2LOO |#$T0@@247| |#$T1@@215| |#$R@@273|))) (and (= ($Box ($Unbox HandleTypeType bx@@109)) bx@@109) ($Is ($Unbox HandleTypeType bx@@109) (Tclass._System.___hPartialFunc2LOO |#$T0@@247| |#$T1@@215| |#$R@@273|)))) :qid |unknown.0:0| :skolemid |1270| :pattern ( ($IsBox bx@@109 (Tclass._System.___hPartialFunc2LOO |#$T0@@247| |#$T1@@215| |#$R@@273|))) )))
(assert (forall ((|#$T0@@248| T@U) (|#$T1@@216| T@U) (|#$R@@274| T@U) (|f#0@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@248|) TyType) (= (type |#$T1@@216|) TyType)) (= (type |#$R@@274|) TyType)) (= (type |f#0@@51|) HandleTypeType)) (= ($Is |f#0@@51| (Tclass._System.___hPartialFunc2LOO |#$T0@@248| |#$T1@@216| |#$R@@274|))  (and ($Is |f#0@@51| (Tclass._System.___hFunc2LOO |#$T0@@248| |#$T1@@216| |#$R@@274|)) (forall ((|x0#0@@21| T@U) (|x1#0@@17| T@U) ) (!  (=> (and (and (= (type |x0#0@@21|) BoxType) (= (type |x1#0@@17|) BoxType)) (and ($IsBox |x0#0@@21| |#$T0@@248|) ($IsBox |x1#0@@17| |#$T1@@216|))) (|Set#Equal| (Reads2 |#$T0@@248| |#$T1@@216| |#$R@@274| $OneHeap |f#0@@51| |x0#0@@21| |x1#0@@17|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1271| :no-pattern (type |x0#0@@21|) :no-pattern (type |x1#0@@17|) :no-pattern (U_2_int |x0#0@@21|) :no-pattern (U_2_bool |x0#0@@21|) :no-pattern (U_2_int |x1#0@@17|) :no-pattern (U_2_bool |x1#0@@17|) ))))) :qid |unknown.0:0| :skolemid |1272| :pattern ( ($Is |f#0@@51| (Tclass._System.___hPartialFunc2LOO |#$T0@@248| |#$T1@@216| |#$R@@274|))) )))
(assert (forall ((|#$T0@@249| T@U) (|#$T1@@217| T@U) (|#$R@@275| T@U) (|f#0@@52| T@U) ($h@@41 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@249|) TyType) (= (type |#$T1@@217|) TyType)) (= (type |#$R@@275|) TyType)) (= (type |f#0@@52|) HandleTypeType)) (= (type $h@@41) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc2LOO |#$T0@@249| |#$T1@@217| |#$R@@275|) $h@@41) ($IsAlloc |f#0@@52| (Tclass._System.___hFunc2LOO |#$T0@@249| |#$T1@@217| |#$R@@275|) $h@@41))) :qid |unknown.0:0| :skolemid |1273| :pattern ( ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc2LOO |#$T0@@249| |#$T1@@217| |#$R@@275|) $h@@41)) )))
(assert (forall ((arg0@@383 T@U) (arg1@@161 T@U) (arg2@@110 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO arg0@@383 arg1@@161 arg2@@110)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO| :pattern ( (Tclass._System.___hTotalFunc2LOO arg0@@383 arg1@@161 arg2@@110)) )))
(assert (forall ((|#$T0@@250| T@U) (|#$T1@@218| T@U) (|#$R@@276| T@U) ) (!  (=> (and (and (= (type |#$T0@@250|) TyType) (= (type |#$T1@@218|) TyType)) (= (type |#$R@@276|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LOO |#$T0@@250| |#$T1@@218| |#$R@@276|)) Tagclass._System.___hTotalFunc2LOO) (= (TagFamily (Tclass._System.___hTotalFunc2LOO |#$T0@@250| |#$T1@@218| |#$R@@276|)) |tytagFamily$_#TotalFunc2LOO|))) :qid |unknown.0:0| :skolemid |1274| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@250| |#$T1@@218| |#$R@@276|)) )))
(assert (forall ((arg0@@384 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_0 arg0@@384)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_0| :pattern ( (Tclass._System.___hTotalFunc2LOO_0 arg0@@384)) )))
(assert (forall ((|#$T0@@251| T@U) (|#$T1@@219| T@U) (|#$R@@277| T@U) ) (!  (=> (and (and (= (type |#$T0@@251|) TyType) (= (type |#$T1@@219|) TyType)) (= (type |#$R@@277|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_0 (Tclass._System.___hTotalFunc2LOO |#$T0@@251| |#$T1@@219| |#$R@@277|)) |#$T0@@251|)) :qid |unknown.0:0| :skolemid |1275| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@251| |#$T1@@219| |#$R@@277|)) )))
(assert (forall ((arg0@@385 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_1 arg0@@385)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_1| :pattern ( (Tclass._System.___hTotalFunc2LOO_1 arg0@@385)) )))
(assert (forall ((|#$T0@@252| T@U) (|#$T1@@220| T@U) (|#$R@@278| T@U) ) (!  (=> (and (and (= (type |#$T0@@252|) TyType) (= (type |#$T1@@220|) TyType)) (= (type |#$R@@278|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_1 (Tclass._System.___hTotalFunc2LOO |#$T0@@252| |#$T1@@220| |#$R@@278|)) |#$T1@@220|)) :qid |unknown.0:0| :skolemid |1276| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@252| |#$T1@@220| |#$R@@278|)) )))
(assert (forall ((arg0@@386 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_2 arg0@@386)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_2| :pattern ( (Tclass._System.___hTotalFunc2LOO_2 arg0@@386)) )))
(assert (forall ((|#$T0@@253| T@U) (|#$T1@@221| T@U) (|#$R@@279| T@U) ) (!  (=> (and (and (= (type |#$T0@@253|) TyType) (= (type |#$T1@@221|) TyType)) (= (type |#$R@@279|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_2 (Tclass._System.___hTotalFunc2LOO |#$T0@@253| |#$T1@@221| |#$R@@279|)) |#$R@@279|)) :qid |unknown.0:0| :skolemid |1277| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@253| |#$T1@@221| |#$R@@279|)) )))
(assert (forall ((|#$T0@@254| T@U) (|#$T1@@222| T@U) (|#$R@@280| T@U) (bx@@110 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@254|) TyType) (= (type |#$T1@@222|) TyType)) (= (type |#$R@@280|) TyType)) (= (type bx@@110) BoxType)) ($IsBox bx@@110 (Tclass._System.___hTotalFunc2LOO |#$T0@@254| |#$T1@@222| |#$R@@280|))) (and (= ($Box ($Unbox HandleTypeType bx@@110)) bx@@110) ($Is ($Unbox HandleTypeType bx@@110) (Tclass._System.___hTotalFunc2LOO |#$T0@@254| |#$T1@@222| |#$R@@280|)))) :qid |unknown.0:0| :skolemid |1278| :pattern ( ($IsBox bx@@110 (Tclass._System.___hTotalFunc2LOO |#$T0@@254| |#$T1@@222| |#$R@@280|))) )))
(assert (forall ((|#$T0@@255| T@U) (|#$T1@@223| T@U) (|#$R@@281| T@U) (|f#0@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@255|) TyType) (= (type |#$T1@@223|) TyType)) (= (type |#$R@@281|) TyType)) (= (type |f#0@@53|) HandleTypeType)) (= ($Is |f#0@@53| (Tclass._System.___hTotalFunc2LOO |#$T0@@255| |#$T1@@223| |#$R@@281|))  (and ($Is |f#0@@53| (Tclass._System.___hPartialFunc2LOO |#$T0@@255| |#$T1@@223| |#$R@@281|)) (forall ((|x0#0@@22| T@U) (|x1#0@@18| T@U) ) (!  (=> (and (and (= (type |x0#0@@22|) BoxType) (= (type |x1#0@@18|) BoxType)) (and ($IsBox |x0#0@@22| |#$T0@@255|) ($IsBox |x1#0@@18| |#$T1@@223|))) (Requires2 |#$T0@@255| |#$T1@@223| |#$R@@281| $OneHeap |f#0@@53| |x0#0@@22| |x1#0@@18|)) :qid |unknown.0:0| :skolemid |1279| :no-pattern (type |x0#0@@22|) :no-pattern (type |x1#0@@18|) :no-pattern (U_2_int |x0#0@@22|) :no-pattern (U_2_bool |x0#0@@22|) :no-pattern (U_2_int |x1#0@@18|) :no-pattern (U_2_bool |x1#0@@18|) ))))) :qid |unknown.0:0| :skolemid |1280| :pattern ( ($Is |f#0@@53| (Tclass._System.___hTotalFunc2LOO |#$T0@@255| |#$T1@@223| |#$R@@281|))) )))
(assert (forall ((|#$T0@@256| T@U) (|#$T1@@224| T@U) (|#$R@@282| T@U) (|f#0@@54| T@U) ($h@@42 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@256|) TyType) (= (type |#$T1@@224|) TyType)) (= (type |#$R@@282|) TyType)) (= (type |f#0@@54|) HandleTypeType)) (= (type $h@@42) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc2LOO |#$T0@@256| |#$T1@@224| |#$R@@282|) $h@@42) ($IsAlloc |f#0@@54| (Tclass._System.___hPartialFunc2LOO |#$T0@@256| |#$T1@@224| |#$R@@282|) $h@@42))) :qid |unknown.0:0| :skolemid |1281| :pattern ( ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc2LOO |#$T0@@256| |#$T1@@224| |#$R@@282|) $h@@42)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@13 T@U) ) (!  (=> (= (type d@@13) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@13) (= (DatatypeCtorId d@@13) |##_System._tuple#0._#Make0|))) :qid |unknown.0:0| :skolemid |1282| :pattern ( (_System.Tuple0.___hMake0_q d@@13)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@14)) (= d@@14 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |1283| :pattern ( (_System.Tuple0.___hMake0_q d@@14)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@111 T@U) ) (!  (=> (and (= (type bx@@111) BoxType) ($IsBox bx@@111 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |1284| :pattern ( ($IsBox bx@@111 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@43 T@U) ) (!  (=> (and (= (type $h@@43) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@43)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@43)) :qid |DafnyPreludebpl.545:12| :skolemid |1285| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@43)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@15)) (_System.Tuple0.___hMake0_q d@@15)) :qid |unknown.0:0| :skolemid |1286| :pattern ( (|$IsA#_System.Tuple0| d@@15)) )))
(assert (forall ((d@@16 T@U) ) (!  (=> (and (= (type d@@16) DatatypeTypeType) ($Is d@@16 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@16)) :qid |unknown.0:0| :skolemid |1287| :pattern ( (_System.Tuple0.___hMake0_q d@@16) ($Is d@@16 Tclass._System.Tuple0)) )))
(assert (forall ((a@@128 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@128) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@128 b@@65) true)) :qid |unknown.0:0| :skolemid |1288| :pattern ( (|_System.Tuple0#Equal| a@@128 b@@65)) )))
(assert (forall ((a@@129 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@129) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@129 b@@66) (= a@@129 b@@66))) :qid |unknown.0:0| :skolemid |1289| :pattern ( (|_System.Tuple0#Equal| a@@129 b@@66)) )))
(assert (forall ((arg0@@387 T@U) (arg1@@162 T@U) ) (! (= (type (Tclass._System.___hFunc1OL arg0@@387 arg1@@162)) TyType) :qid |funType:Tclass._System.___hFunc1OL| :pattern ( (Tclass._System.___hFunc1OL arg0@@387 arg1@@162)) )))
(assert (forall ((|#$T0@@257| T@U) (|#$R@@283| T@U) ) (!  (=> (and (= (type |#$T0@@257|) TyType) (= (type |#$R@@283|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OL |#$T0@@257| |#$R@@283|)) Tagclass._System.___hFunc1OL) (= (TagFamily (Tclass._System.___hFunc1OL |#$T0@@257| |#$R@@283|)) |tytagFamily$_#Func1OL|))) :qid |unknown.0:0| :skolemid |1290| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@257| |#$R@@283|)) )))
(assert (forall ((arg0@@388 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_0 arg0@@388)) TyType) :qid |funType:Tclass._System.___hFunc1OL_0| :pattern ( (Tclass._System.___hFunc1OL_0 arg0@@388)) )))
(assert (forall ((|#$T0@@258| T@U) (|#$R@@284| T@U) ) (!  (=> (and (= (type |#$T0@@258|) TyType) (= (type |#$R@@284|) TyType)) (= (Tclass._System.___hFunc1OL_0 (Tclass._System.___hFunc1OL |#$T0@@258| |#$R@@284|)) |#$T0@@258|)) :qid |unknown.0:0| :skolemid |1291| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@258| |#$R@@284|)) )))
(assert (forall ((arg0@@389 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_1 arg0@@389)) TyType) :qid |funType:Tclass._System.___hFunc1OL_1| :pattern ( (Tclass._System.___hFunc1OL_1 arg0@@389)) )))
(assert (forall ((|#$T0@@259| T@U) (|#$R@@285| T@U) ) (!  (=> (and (= (type |#$T0@@259|) TyType) (= (type |#$R@@285|) TyType)) (= (Tclass._System.___hFunc1OL_1 (Tclass._System.___hFunc1OL |#$T0@@259| |#$R@@285|)) |#$R@@285|)) :qid |unknown.0:0| :skolemid |1292| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@259| |#$R@@285|)) )))
(assert (forall ((|#$T0@@260| T@U) (|#$R@@286| T@U) (bx@@112 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@260|) TyType) (= (type |#$R@@286|) TyType)) (= (type bx@@112) BoxType)) ($IsBox bx@@112 (Tclass._System.___hFunc1OL |#$T0@@260| |#$R@@286|))) (and (= ($Box ($Unbox HandleTypeType bx@@112)) bx@@112) ($Is ($Unbox HandleTypeType bx@@112) (Tclass._System.___hFunc1OL |#$T0@@260| |#$R@@286|)))) :qid |unknown.0:0| :skolemid |1293| :pattern ( ($IsBox bx@@112 (Tclass._System.___hFunc1OL |#$T0@@260| |#$R@@286|))) )))
(assert (forall ((arg0@@390 T@U) (arg1@@163 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL arg0@@390 arg1@@163)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL| :pattern ( (Tclass._System.___hPartialFunc1OL arg0@@390 arg1@@163)) )))
(assert (forall ((|#$T0@@261| T@U) (|#$R@@287| T@U) ) (!  (=> (and (= (type |#$T0@@261|) TyType) (= (type |#$R@@287|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OL |#$T0@@261| |#$R@@287|)) Tagclass._System.___hPartialFunc1OL) (= (TagFamily (Tclass._System.___hPartialFunc1OL |#$T0@@261| |#$R@@287|)) |tytagFamily$_#PartialFunc1OL|))) :qid |unknown.0:0| :skolemid |1294| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@261| |#$R@@287|)) )))
(assert (forall ((arg0@@391 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_0 arg0@@391)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_0| :pattern ( (Tclass._System.___hPartialFunc1OL_0 arg0@@391)) )))
(assert (forall ((|#$T0@@262| T@U) (|#$R@@288| T@U) ) (!  (=> (and (= (type |#$T0@@262|) TyType) (= (type |#$R@@288|) TyType)) (= (Tclass._System.___hPartialFunc1OL_0 (Tclass._System.___hPartialFunc1OL |#$T0@@262| |#$R@@288|)) |#$T0@@262|)) :qid |unknown.0:0| :skolemid |1295| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@262| |#$R@@288|)) )))
(assert (forall ((arg0@@392 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_1 arg0@@392)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_1| :pattern ( (Tclass._System.___hPartialFunc1OL_1 arg0@@392)) )))
(assert (forall ((|#$T0@@263| T@U) (|#$R@@289| T@U) ) (!  (=> (and (= (type |#$T0@@263|) TyType) (= (type |#$R@@289|) TyType)) (= (Tclass._System.___hPartialFunc1OL_1 (Tclass._System.___hPartialFunc1OL |#$T0@@263| |#$R@@289|)) |#$R@@289|)) :qid |unknown.0:0| :skolemid |1296| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@263| |#$R@@289|)) )))
(assert (forall ((|#$T0@@264| T@U) (|#$R@@290| T@U) (bx@@113 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@264|) TyType) (= (type |#$R@@290|) TyType)) (= (type bx@@113) BoxType)) ($IsBox bx@@113 (Tclass._System.___hPartialFunc1OL |#$T0@@264| |#$R@@290|))) (and (= ($Box ($Unbox HandleTypeType bx@@113)) bx@@113) ($Is ($Unbox HandleTypeType bx@@113) (Tclass._System.___hPartialFunc1OL |#$T0@@264| |#$R@@290|)))) :qid |unknown.0:0| :skolemid |1297| :pattern ( ($IsBox bx@@113 (Tclass._System.___hPartialFunc1OL |#$T0@@264| |#$R@@290|))) )))
(assert (forall ((|#$T0@@265| T@U) (|#$R@@291| T@U) (|f#0@@55| T@U) ) (!  (=> (and (and (= (type |#$T0@@265|) TyType) (= (type |#$R@@291|) TyType)) (= (type |f#0@@55|) HandleTypeType)) (= ($Is |f#0@@55| (Tclass._System.___hPartialFunc1OL |#$T0@@265| |#$R@@291|))  (and ($Is |f#0@@55| (Tclass._System.___hFunc1OL |#$T0@@265| |#$R@@291|)) (forall ((|x0#0@@23| T@U) ) (!  (=> (and (= (type |x0#0@@23|) BoxType) ($IsBox |x0#0@@23| |#$T0@@265|)) (|Set#Equal| (Reads1 |#$T0@@265| |#$R@@291| $OneHeap |f#0@@55| |x0#0@@23|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1298| :no-pattern (type |x0#0@@23|) :no-pattern (U_2_int |x0#0@@23|) :no-pattern (U_2_bool |x0#0@@23|) ))))) :qid |unknown.0:0| :skolemid |1299| :pattern ( ($Is |f#0@@55| (Tclass._System.___hPartialFunc1OL |#$T0@@265| |#$R@@291|))) )))
(assert (forall ((|#$T0@@266| T@U) (|#$R@@292| T@U) (|f#0@@56| T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@266|) TyType) (= (type |#$R@@292|) TyType)) (= (type |f#0@@56|) HandleTypeType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc1OL |#$T0@@266| |#$R@@292|) $h@@44) ($IsAlloc |f#0@@56| (Tclass._System.___hFunc1OL |#$T0@@266| |#$R@@292|) $h@@44))) :qid |unknown.0:0| :skolemid |1300| :pattern ( ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc1OL |#$T0@@266| |#$R@@292|) $h@@44)) )))
(assert (forall ((arg0@@393 T@U) (arg1@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL arg0@@393 arg1@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL| :pattern ( (Tclass._System.___hTotalFunc1OL arg0@@393 arg1@@164)) )))
(assert (forall ((|#$T0@@267| T@U) (|#$R@@293| T@U) ) (!  (=> (and (= (type |#$T0@@267|) TyType) (= (type |#$R@@293|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OL |#$T0@@267| |#$R@@293|)) Tagclass._System.___hTotalFunc1OL) (= (TagFamily (Tclass._System.___hTotalFunc1OL |#$T0@@267| |#$R@@293|)) |tytagFamily$_#TotalFunc1OL|))) :qid |unknown.0:0| :skolemid |1301| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@267| |#$R@@293|)) )))
(assert (forall ((arg0@@394 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_0 arg0@@394)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_0| :pattern ( (Tclass._System.___hTotalFunc1OL_0 arg0@@394)) )))
(assert (forall ((|#$T0@@268| T@U) (|#$R@@294| T@U) ) (!  (=> (and (= (type |#$T0@@268|) TyType) (= (type |#$R@@294|) TyType)) (= (Tclass._System.___hTotalFunc1OL_0 (Tclass._System.___hTotalFunc1OL |#$T0@@268| |#$R@@294|)) |#$T0@@268|)) :qid |unknown.0:0| :skolemid |1302| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@268| |#$R@@294|)) )))
(assert (forall ((arg0@@395 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_1 arg0@@395)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_1| :pattern ( (Tclass._System.___hTotalFunc1OL_1 arg0@@395)) )))
(assert (forall ((|#$T0@@269| T@U) (|#$R@@295| T@U) ) (!  (=> (and (= (type |#$T0@@269|) TyType) (= (type |#$R@@295|) TyType)) (= (Tclass._System.___hTotalFunc1OL_1 (Tclass._System.___hTotalFunc1OL |#$T0@@269| |#$R@@295|)) |#$R@@295|)) :qid |unknown.0:0| :skolemid |1303| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@269| |#$R@@295|)) )))
(assert (forall ((|#$T0@@270| T@U) (|#$R@@296| T@U) (bx@@114 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@270|) TyType) (= (type |#$R@@296|) TyType)) (= (type bx@@114) BoxType)) ($IsBox bx@@114 (Tclass._System.___hTotalFunc1OL |#$T0@@270| |#$R@@296|))) (and (= ($Box ($Unbox HandleTypeType bx@@114)) bx@@114) ($Is ($Unbox HandleTypeType bx@@114) (Tclass._System.___hTotalFunc1OL |#$T0@@270| |#$R@@296|)))) :qid |unknown.0:0| :skolemid |1304| :pattern ( ($IsBox bx@@114 (Tclass._System.___hTotalFunc1OL |#$T0@@270| |#$R@@296|))) )))
(assert (forall ((|#$T0@@271| T@U) (|#$R@@297| T@U) (|f#0@@57| T@U) ) (!  (=> (and (and (= (type |#$T0@@271|) TyType) (= (type |#$R@@297|) TyType)) (= (type |f#0@@57|) HandleTypeType)) (= ($Is |f#0@@57| (Tclass._System.___hTotalFunc1OL |#$T0@@271| |#$R@@297|))  (and ($Is |f#0@@57| (Tclass._System.___hPartialFunc1OL |#$T0@@271| |#$R@@297|)) (forall ((|x0#0@@24| T@U) ) (!  (=> (and (= (type |x0#0@@24|) BoxType) ($IsBox |x0#0@@24| |#$T0@@271|)) (Requires1 |#$T0@@271| |#$R@@297| $OneHeap |f#0@@57| |x0#0@@24|)) :qid |unknown.0:0| :skolemid |1305| :no-pattern (type |x0#0@@24|) :no-pattern (U_2_int |x0#0@@24|) :no-pattern (U_2_bool |x0#0@@24|) ))))) :qid |unknown.0:0| :skolemid |1306| :pattern ( ($Is |f#0@@57| (Tclass._System.___hTotalFunc1OL |#$T0@@271| |#$R@@297|))) )))
(assert (forall ((|#$T0@@272| T@U) (|#$R@@298| T@U) (|f#0@@58| T@U) ($h@@45 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@272|) TyType) (= (type |#$R@@298|) TyType)) (= (type |f#0@@58|) HandleTypeType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc1OL |#$T0@@272| |#$R@@298|) $h@@45) ($IsAlloc |f#0@@58| (Tclass._System.___hPartialFunc1OL |#$T0@@272| |#$R@@298|) $h@@45))) :qid |unknown.0:0| :skolemid |1307| :pattern ( ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc1OL |#$T0@@272| |#$R@@298|) $h@@45)) )))
(assert (forall ((arg0@@396 T@U) (arg1@@165 T@U) ) (! (= (type (Tclass._System.___hFunc1LO arg0@@396 arg1@@165)) TyType) :qid |funType:Tclass._System.___hFunc1LO| :pattern ( (Tclass._System.___hFunc1LO arg0@@396 arg1@@165)) )))
(assert (forall ((|#$T0@@273| T@U) (|#$R@@299| T@U) ) (!  (=> (and (= (type |#$T0@@273|) TyType) (= (type |#$R@@299|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LO |#$T0@@273| |#$R@@299|)) Tagclass._System.___hFunc1LO) (= (TagFamily (Tclass._System.___hFunc1LO |#$T0@@273| |#$R@@299|)) |tytagFamily$_#Func1LO|))) :qid |unknown.0:0| :skolemid |1308| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@273| |#$R@@299|)) )))
(assert (forall ((arg0@@397 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_0 arg0@@397)) TyType) :qid |funType:Tclass._System.___hFunc1LO_0| :pattern ( (Tclass._System.___hFunc1LO_0 arg0@@397)) )))
(assert (forall ((|#$T0@@274| T@U) (|#$R@@300| T@U) ) (!  (=> (and (= (type |#$T0@@274|) TyType) (= (type |#$R@@300|) TyType)) (= (Tclass._System.___hFunc1LO_0 (Tclass._System.___hFunc1LO |#$T0@@274| |#$R@@300|)) |#$T0@@274|)) :qid |unknown.0:0| :skolemid |1309| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@274| |#$R@@300|)) )))
(assert (forall ((arg0@@398 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_1 arg0@@398)) TyType) :qid |funType:Tclass._System.___hFunc1LO_1| :pattern ( (Tclass._System.___hFunc1LO_1 arg0@@398)) )))
(assert (forall ((|#$T0@@275| T@U) (|#$R@@301| T@U) ) (!  (=> (and (= (type |#$T0@@275|) TyType) (= (type |#$R@@301|) TyType)) (= (Tclass._System.___hFunc1LO_1 (Tclass._System.___hFunc1LO |#$T0@@275| |#$R@@301|)) |#$R@@301|)) :qid |unknown.0:0| :skolemid |1310| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@275| |#$R@@301|)) )))
(assert (forall ((|#$T0@@276| T@U) (|#$R@@302| T@U) (bx@@115 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@276|) TyType) (= (type |#$R@@302|) TyType)) (= (type bx@@115) BoxType)) ($IsBox bx@@115 (Tclass._System.___hFunc1LO |#$T0@@276| |#$R@@302|))) (and (= ($Box ($Unbox HandleTypeType bx@@115)) bx@@115) ($Is ($Unbox HandleTypeType bx@@115) (Tclass._System.___hFunc1LO |#$T0@@276| |#$R@@302|)))) :qid |unknown.0:0| :skolemid |1311| :pattern ( ($IsBox bx@@115 (Tclass._System.___hFunc1LO |#$T0@@276| |#$R@@302|))) )))
(assert (forall ((arg0@@399 T@U) (arg1@@166 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO arg0@@399 arg1@@166)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO| :pattern ( (Tclass._System.___hPartialFunc1LO arg0@@399 arg1@@166)) )))
(assert (forall ((|#$T0@@277| T@U) (|#$R@@303| T@U) ) (!  (=> (and (= (type |#$T0@@277|) TyType) (= (type |#$R@@303|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LO |#$T0@@277| |#$R@@303|)) Tagclass._System.___hPartialFunc1LO) (= (TagFamily (Tclass._System.___hPartialFunc1LO |#$T0@@277| |#$R@@303|)) |tytagFamily$_#PartialFunc1LO|))) :qid |unknown.0:0| :skolemid |1312| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@277| |#$R@@303|)) )))
(assert (forall ((arg0@@400 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_0 arg0@@400)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_0| :pattern ( (Tclass._System.___hPartialFunc1LO_0 arg0@@400)) )))
(assert (forall ((|#$T0@@278| T@U) (|#$R@@304| T@U) ) (!  (=> (and (= (type |#$T0@@278|) TyType) (= (type |#$R@@304|) TyType)) (= (Tclass._System.___hPartialFunc1LO_0 (Tclass._System.___hPartialFunc1LO |#$T0@@278| |#$R@@304|)) |#$T0@@278|)) :qid |unknown.0:0| :skolemid |1313| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@278| |#$R@@304|)) )))
(assert (forall ((arg0@@401 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_1 arg0@@401)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_1| :pattern ( (Tclass._System.___hPartialFunc1LO_1 arg0@@401)) )))
(assert (forall ((|#$T0@@279| T@U) (|#$R@@305| T@U) ) (!  (=> (and (= (type |#$T0@@279|) TyType) (= (type |#$R@@305|) TyType)) (= (Tclass._System.___hPartialFunc1LO_1 (Tclass._System.___hPartialFunc1LO |#$T0@@279| |#$R@@305|)) |#$R@@305|)) :qid |unknown.0:0| :skolemid |1314| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@279| |#$R@@305|)) )))
(assert (forall ((|#$T0@@280| T@U) (|#$R@@306| T@U) (bx@@116 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@280|) TyType) (= (type |#$R@@306|) TyType)) (= (type bx@@116) BoxType)) ($IsBox bx@@116 (Tclass._System.___hPartialFunc1LO |#$T0@@280| |#$R@@306|))) (and (= ($Box ($Unbox HandleTypeType bx@@116)) bx@@116) ($Is ($Unbox HandleTypeType bx@@116) (Tclass._System.___hPartialFunc1LO |#$T0@@280| |#$R@@306|)))) :qid |unknown.0:0| :skolemid |1315| :pattern ( ($IsBox bx@@116 (Tclass._System.___hPartialFunc1LO |#$T0@@280| |#$R@@306|))) )))
(assert (forall ((|#$T0@@281| T@U) (|#$R@@307| T@U) (|f#0@@59| T@U) ) (!  (=> (and (and (= (type |#$T0@@281|) TyType) (= (type |#$R@@307|) TyType)) (= (type |f#0@@59|) HandleTypeType)) (= ($Is |f#0@@59| (Tclass._System.___hPartialFunc1LO |#$T0@@281| |#$R@@307|))  (and ($Is |f#0@@59| (Tclass._System.___hFunc1LO |#$T0@@281| |#$R@@307|)) (forall ((|x0#0@@25| T@U) ) (!  (=> (and (= (type |x0#0@@25|) BoxType) ($IsBox |x0#0@@25| |#$T0@@281|)) (|Set#Equal| (Reads1 |#$T0@@281| |#$R@@307| $OneHeap |f#0@@59| |x0#0@@25|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1316| :no-pattern (type |x0#0@@25|) :no-pattern (U_2_int |x0#0@@25|) :no-pattern (U_2_bool |x0#0@@25|) ))))) :qid |unknown.0:0| :skolemid |1317| :pattern ( ($Is |f#0@@59| (Tclass._System.___hPartialFunc1LO |#$T0@@281| |#$R@@307|))) )))
(assert (forall ((|#$T0@@282| T@U) (|#$R@@308| T@U) (|f#0@@60| T@U) ($h@@46 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@282|) TyType) (= (type |#$R@@308|) TyType)) (= (type |f#0@@60|) HandleTypeType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc1LO |#$T0@@282| |#$R@@308|) $h@@46) ($IsAlloc |f#0@@60| (Tclass._System.___hFunc1LO |#$T0@@282| |#$R@@308|) $h@@46))) :qid |unknown.0:0| :skolemid |1318| :pattern ( ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc1LO |#$T0@@282| |#$R@@308|) $h@@46)) )))
(assert (forall ((arg0@@402 T@U) (arg1@@167 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO arg0@@402 arg1@@167)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO| :pattern ( (Tclass._System.___hTotalFunc1LO arg0@@402 arg1@@167)) )))
(assert (forall ((|#$T0@@283| T@U) (|#$R@@309| T@U) ) (!  (=> (and (= (type |#$T0@@283|) TyType) (= (type |#$R@@309|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LO |#$T0@@283| |#$R@@309|)) Tagclass._System.___hTotalFunc1LO) (= (TagFamily (Tclass._System.___hTotalFunc1LO |#$T0@@283| |#$R@@309|)) |tytagFamily$_#TotalFunc1LO|))) :qid |unknown.0:0| :skolemid |1319| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@283| |#$R@@309|)) )))
(assert (forall ((arg0@@403 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_0 arg0@@403)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_0| :pattern ( (Tclass._System.___hTotalFunc1LO_0 arg0@@403)) )))
(assert (forall ((|#$T0@@284| T@U) (|#$R@@310| T@U) ) (!  (=> (and (= (type |#$T0@@284|) TyType) (= (type |#$R@@310|) TyType)) (= (Tclass._System.___hTotalFunc1LO_0 (Tclass._System.___hTotalFunc1LO |#$T0@@284| |#$R@@310|)) |#$T0@@284|)) :qid |unknown.0:0| :skolemid |1320| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@284| |#$R@@310|)) )))
(assert (forall ((arg0@@404 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_1 arg0@@404)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_1| :pattern ( (Tclass._System.___hTotalFunc1LO_1 arg0@@404)) )))
(assert (forall ((|#$T0@@285| T@U) (|#$R@@311| T@U) ) (!  (=> (and (= (type |#$T0@@285|) TyType) (= (type |#$R@@311|) TyType)) (= (Tclass._System.___hTotalFunc1LO_1 (Tclass._System.___hTotalFunc1LO |#$T0@@285| |#$R@@311|)) |#$R@@311|)) :qid |unknown.0:0| :skolemid |1321| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@285| |#$R@@311|)) )))
(assert (forall ((|#$T0@@286| T@U) (|#$R@@312| T@U) (bx@@117 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@286|) TyType) (= (type |#$R@@312|) TyType)) (= (type bx@@117) BoxType)) ($IsBox bx@@117 (Tclass._System.___hTotalFunc1LO |#$T0@@286| |#$R@@312|))) (and (= ($Box ($Unbox HandleTypeType bx@@117)) bx@@117) ($Is ($Unbox HandleTypeType bx@@117) (Tclass._System.___hTotalFunc1LO |#$T0@@286| |#$R@@312|)))) :qid |unknown.0:0| :skolemid |1322| :pattern ( ($IsBox bx@@117 (Tclass._System.___hTotalFunc1LO |#$T0@@286| |#$R@@312|))) )))
(assert (forall ((|#$T0@@287| T@U) (|#$R@@313| T@U) (|f#0@@61| T@U) ) (!  (=> (and (and (= (type |#$T0@@287|) TyType) (= (type |#$R@@313|) TyType)) (= (type |f#0@@61|) HandleTypeType)) (= ($Is |f#0@@61| (Tclass._System.___hTotalFunc1LO |#$T0@@287| |#$R@@313|))  (and ($Is |f#0@@61| (Tclass._System.___hPartialFunc1LO |#$T0@@287| |#$R@@313|)) (forall ((|x0#0@@26| T@U) ) (!  (=> (and (= (type |x0#0@@26|) BoxType) ($IsBox |x0#0@@26| |#$T0@@287|)) (Requires1 |#$T0@@287| |#$R@@313| $OneHeap |f#0@@61| |x0#0@@26|)) :qid |unknown.0:0| :skolemid |1323| :no-pattern (type |x0#0@@26|) :no-pattern (U_2_int |x0#0@@26|) :no-pattern (U_2_bool |x0#0@@26|) ))))) :qid |unknown.0:0| :skolemid |1324| :pattern ( ($Is |f#0@@61| (Tclass._System.___hTotalFunc1LO |#$T0@@287| |#$R@@313|))) )))
(assert (forall ((|#$T0@@288| T@U) (|#$R@@314| T@U) (|f#0@@62| T@U) ($h@@47 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@288|) TyType) (= (type |#$R@@314|) TyType)) (= (type |f#0@@62|) HandleTypeType)) (= (type $h@@47) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc1LO |#$T0@@288| |#$R@@314|) $h@@47) ($IsAlloc |f#0@@62| (Tclass._System.___hPartialFunc1LO |#$T0@@288| |#$R@@314|) $h@@47))) :qid |unknown.0:0| :skolemid |1325| :pattern ( ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc1LO |#$T0@@288| |#$R@@314|) $h@@47)) )))
(assert (forall ((arg0@@405 T@U) (arg1@@168 T@U) ) (! (= (type (|#_System._tuple#2OLL._#Make2| arg0@@405 arg1@@168)) DatatypeTypeType) :qid |funType:#_System._tuple#2OLL._#Make2| :pattern ( (|#_System._tuple#2OLL._#Make2| arg0@@405 arg1@@168)) )))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| T@U) ) (!  (=> (and (= (type |a#25#0#0|) BoxType) (= (type |a#25#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2OLL._#Make2| |a#25#0#0| |a#25#1#0|)) |##_System._tuple#2OLL._#Make2|)) :qid |unknown.0:0| :skolemid |1326| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#25#0#0| |a#25#1#0|)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (= (type d@@17) DatatypeTypeType) (= (_System.Tuple2OLL.___hMake2_q d@@17) (= (DatatypeCtorId d@@17) |##_System._tuple#2OLL._#Make2|))) :qid |unknown.0:0| :skolemid |1327| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@17)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (and (= (type d@@18) DatatypeTypeType) (_System.Tuple2OLL.___hMake2_q d@@18)) (exists ((|a#26#0#0| T@U) (|a#26#1#0| T@U) ) (!  (and (and (= (type |a#26#0#0|) BoxType) (= (type |a#26#1#0|) BoxType)) (= d@@18 (|#_System._tuple#2OLL._#Make2| |a#26#0#0| |a#26#1#0|))) :qid |unknown.0:0| :skolemid |1328| :no-pattern (type |a#26#0#0|) :no-pattern (type |a#26#1#0|) :no-pattern (U_2_int |a#26#0#0|) :no-pattern (U_2_bool |a#26#0#0|) :no-pattern (U_2_int |a#26#1#0|) :no-pattern (U_2_bool |a#26#1#0|) ))) :qid |unknown.0:0| :skolemid |1329| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@18)) )))
(assert (forall ((arg0@@406 T@U) (arg1@@169 T@U) ) (! (= (type (Tclass._System.Tuple2OLL arg0@@406 arg1@@169)) TyType) :qid |funType:Tclass._System.Tuple2OLL| :pattern ( (Tclass._System.Tuple2OLL arg0@@406 arg1@@169)) )))
(assert (forall ((|_System._tuple#2OLL$T0| T@U) (|_System._tuple#2OLL$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0|) TyType) (= (type |_System._tuple#2OLL$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) Tagclass._System.Tuple2OLL) (= (TagFamily (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) |tytagFamily$_tuple#2OLL|))) :qid |unknown.0:0| :skolemid |1330| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) )))
(assert (forall ((arg0@@407 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_0 arg0@@407)) TyType) :qid |funType:Tclass._System.Tuple2OLL_0| :pattern ( (Tclass._System.Tuple2OLL_0 arg0@@407)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@0| T@U) (|_System._tuple#2OLL$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@0|) TyType) (= (type |_System._tuple#2OLL$T1@@0|) TyType)) (= (Tclass._System.Tuple2OLL_0 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) |_System._tuple#2OLL$T0@@0|)) :qid |unknown.0:0| :skolemid |1331| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) )))
(assert (forall ((arg0@@408 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_1 arg0@@408)) TyType) :qid |funType:Tclass._System.Tuple2OLL_1| :pattern ( (Tclass._System.Tuple2OLL_1 arg0@@408)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@1| T@U) (|_System._tuple#2OLL$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@1|) TyType) (= (type |_System._tuple#2OLL$T1@@1|) TyType)) (= (Tclass._System.Tuple2OLL_1 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) |_System._tuple#2OLL$T1@@1|)) :qid |unknown.0:0| :skolemid |1332| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@2| T@U) (|_System._tuple#2OLL$T1@@2| T@U) (bx@@118 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@2|) TyType) (= (type |_System._tuple#2OLL$T1@@2|) TyType)) (= (type bx@@118) BoxType)) ($IsBox bx@@118 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@118)) bx@@118) ($Is ($Unbox DatatypeTypeType bx@@118) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|)))) :qid |unknown.0:0| :skolemid |1333| :pattern ( ($IsBox bx@@118 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@3| T@U) (|_System._tuple#2OLL$T1@@3| T@U) (|a#27#0#0| T@U) (|a#27#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@3|) TyType) (= (type |_System._tuple#2OLL$T1@@3|) TyType)) (= (type |a#27#0#0|) BoxType)) (= (type |a#27#1#0|) BoxType)) (= ($Is (|#_System._tuple#2OLL._#Make2| |a#27#0#0| |a#27#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))  (and ($IsBox |a#27#0#0| |_System._tuple#2OLL$T0@@3|) ($IsBox |a#27#1#0| |_System._tuple#2OLL$T1@@3|)))) :qid |unknown.0:0| :skolemid |1334| :pattern ( ($Is (|#_System._tuple#2OLL._#Make2| |a#27#0#0| |a#27#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@4| T@U) (|_System._tuple#2OLL$T1@@4| T@U) (|a#28#0#0| T@U) (|a#28#1#0| T@U) ($h@@48 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2OLL$T0@@4|) TyType) (= (type |_System._tuple#2OLL$T1@@4|) TyType)) (= (type |a#28#0#0|) BoxType)) (= (type |a#28#1#0|) BoxType)) (= (type $h@@48) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@48)) (= ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#28#0#0| |a#28#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@48)  (and ($IsAllocBox |a#28#0#0| |_System._tuple#2OLL$T0@@4| $h@@48) ($IsAllocBox |a#28#1#0| |_System._tuple#2OLL$T1@@4| $h@@48)))) :qid |unknown.0:0| :skolemid |1335| :pattern ( ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#28#0#0| |a#28#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@48)) )))
(assert (forall ((arg0@@409 T@U) ) (! (= (type (_System.Tuple2OLL._0 arg0@@409)) BoxType) :qid |funType:_System.Tuple2OLL._0| :pattern ( (_System.Tuple2OLL._0 arg0@@409)) )))
(assert (forall ((d@@19 T@U) (|_System._tuple#2OLL$T0@@5| T@U) ($h@@49 T@U) ) (!  (=> (and (and (and (= (type d@@19) DatatypeTypeType) (= (type |_System._tuple#2OLL$T0@@5|) TyType)) (= (type $h@@49) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@49) (and (_System.Tuple2OLL.___hMake2_q d@@19) (exists ((|_System._tuple#2OLL$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T1@@5|) TyType) ($IsAlloc d@@19 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@49)) :qid |unknown.0:0| :skolemid |1336| :pattern ( ($IsAlloc d@@19 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@49)) ))))) ($IsAllocBox (_System.Tuple2OLL._0 d@@19) |_System._tuple#2OLL$T0@@5| $h@@49)) :qid |unknown.0:0| :skolemid |1337| :pattern ( ($IsAllocBox (_System.Tuple2OLL._0 d@@19) |_System._tuple#2OLL$T0@@5| $h@@49)) )))
(assert (forall ((arg0@@410 T@U) ) (! (= (type (_System.Tuple2OLL._1 arg0@@410)) BoxType) :qid |funType:_System.Tuple2OLL._1| :pattern ( (_System.Tuple2OLL._1 arg0@@410)) )))
(assert (forall ((d@@20 T@U) (|_System._tuple#2OLL$T1@@6| T@U) ($h@@50 T@U) ) (!  (=> (and (and (and (= (type d@@20) DatatypeTypeType) (= (type |_System._tuple#2OLL$T1@@6|) TyType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@50) (and (_System.Tuple2OLL.___hMake2_q d@@20) (exists ((|_System._tuple#2OLL$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T0@@6|) TyType) ($IsAlloc d@@20 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@50)) :qid |unknown.0:0| :skolemid |1338| :pattern ( ($IsAlloc d@@20 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@50)) ))))) ($IsAllocBox (_System.Tuple2OLL._1 d@@20) |_System._tuple#2OLL$T1@@6| $h@@50)) :qid |unknown.0:0| :skolemid |1339| :pattern ( ($IsAllocBox (_System.Tuple2OLL._1 d@@20) |_System._tuple#2OLL$T1@@6| $h@@50)) )))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) ) (!  (=> (and (= (type |a#29#0#0|) BoxType) (= (type |a#29#1#0|) BoxType)) (= (|#_System._tuple#2OLL._#Make2| (Lit |a#29#0#0|) (Lit |a#29#1#0|)) (Lit (|#_System._tuple#2OLL._#Make2| |a#29#0#0| |a#29#1#0|)))) :qid |unknown.0:0| :skolemid |1340| :pattern ( (|#_System._tuple#2OLL._#Make2| (Lit |a#29#0#0|) (Lit |a#29#1#0|))) )))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| T@U) ) (!  (=> (and (= (type |a#30#0#0|) BoxType) (= (type |a#30#1#0|) BoxType)) (= (_System.Tuple2OLL._0 (|#_System._tuple#2OLL._#Make2| |a#30#0#0| |a#30#1#0|)) |a#30#0#0|)) :qid |unknown.0:0| :skolemid |1341| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#30#0#0| |a#30#1#0|)) )))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| T@U) ) (!  (=> (and (= (type |a#31#0#0|) BoxType) (= (type |a#31#1#0|) BoxType)) (< (BoxRank |a#31#0#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#31#0#0| |a#31#1#0|)))) :qid |unknown.0:0| :skolemid |1342| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#31#0#0| |a#31#1#0|)) )))
(assert (forall ((|a#32#0#0| T@U) (|a#32#1#0| T@U) ) (!  (=> (and (= (type |a#32#0#0|) BoxType) (= (type |a#32#1#0|) BoxType)) (= (_System.Tuple2OLL._1 (|#_System._tuple#2OLL._#Make2| |a#32#0#0| |a#32#1#0|)) |a#32#1#0|)) :qid |unknown.0:0| :skolemid |1343| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#32#0#0| |a#32#1#0|)) )))
(assert (forall ((|a#33#0#0| T@U) (|a#33#1#0| T@U) ) (!  (=> (and (= (type |a#33#0#0|) BoxType) (= (type |a#33#1#0|) BoxType)) (< (BoxRank |a#33#1#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#33#0#0| |a#33#1#0|)))) :qid |unknown.0:0| :skolemid |1344| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#33#0#0| |a#33#1#0|)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) (|$IsA#_System.Tuple2OLL| d@@21)) (_System.Tuple2OLL.___hMake2_q d@@21)) :qid |unknown.0:0| :skolemid |1345| :pattern ( (|$IsA#_System.Tuple2OLL| d@@21)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@7| T@U) (|_System._tuple#2OLL$T1@@7| T@U) (d@@22 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@7|) TyType) (= (type |_System._tuple#2OLL$T1@@7|) TyType)) (= (type d@@22) DatatypeTypeType)) ($Is d@@22 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) (_System.Tuple2OLL.___hMake2_q d@@22)) :qid |unknown.0:0| :skolemid |1346| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@22) ($Is d@@22 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) )))
(assert (forall ((a@@130 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@130) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) true) (= (|_System.Tuple2OLL#Equal| a@@130 b@@67)  (and (= (_System.Tuple2OLL._0 a@@130) (_System.Tuple2OLL._0 b@@67)) (= (_System.Tuple2OLL._1 a@@130) (_System.Tuple2OLL._1 b@@67))))) :qid |unknown.0:0| :skolemid |1347| :pattern ( (|_System.Tuple2OLL#Equal| a@@130 b@@67)) )))
(assert (forall ((a@@131 T@U) (b@@68 T@U) ) (!  (=> (and (= (type a@@131) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (= (|_System.Tuple2OLL#Equal| a@@131 b@@68) (= a@@131 b@@68))) :qid |unknown.0:0| :skolemid |1348| :pattern ( (|_System.Tuple2OLL#Equal| a@@131 b@@68)) )))
(assert (forall ((arg0@@411 T@U) (arg1@@170 T@U) (arg2@@111 T@U) (arg3@@76 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL arg0@@411 arg1@@170 arg2@@111 arg3@@76)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL| :pattern ( (Tclass._System.___hFunc3LLOL arg0@@411 arg1@@170 arg2@@111 arg3@@76)) )))
(assert (forall ((|#$T0@@289| T@U) (|#$T1@@225| T@U) (|#$T2@@149| T@U) (|#$R@@315| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@289|) TyType) (= (type |#$T1@@225|) TyType)) (= (type |#$T2@@149|) TyType)) (= (type |#$R@@315|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOL |#$T0@@289| |#$T1@@225| |#$T2@@149| |#$R@@315|)) Tagclass._System.___hFunc3LLOL) (= (TagFamily (Tclass._System.___hFunc3LLOL |#$T0@@289| |#$T1@@225| |#$T2@@149| |#$R@@315|)) |tytagFamily$_#Func3LLOL|))) :qid |unknown.0:0| :skolemid |1349| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@289| |#$T1@@225| |#$T2@@149| |#$R@@315|)) )))
(assert (forall ((arg0@@412 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_0 arg0@@412)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_0| :pattern ( (Tclass._System.___hFunc3LLOL_0 arg0@@412)) )))
(assert (forall ((|#$T0@@290| T@U) (|#$T1@@226| T@U) (|#$T2@@150| T@U) (|#$R@@316| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@290|) TyType) (= (type |#$T1@@226|) TyType)) (= (type |#$T2@@150|) TyType)) (= (type |#$R@@316|) TyType)) (= (Tclass._System.___hFunc3LLOL_0 (Tclass._System.___hFunc3LLOL |#$T0@@290| |#$T1@@226| |#$T2@@150| |#$R@@316|)) |#$T0@@290|)) :qid |unknown.0:0| :skolemid |1350| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@290| |#$T1@@226| |#$T2@@150| |#$R@@316|)) )))
(assert (forall ((arg0@@413 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_1 arg0@@413)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_1| :pattern ( (Tclass._System.___hFunc3LLOL_1 arg0@@413)) )))
(assert (forall ((|#$T0@@291| T@U) (|#$T1@@227| T@U) (|#$T2@@151| T@U) (|#$R@@317| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@291|) TyType) (= (type |#$T1@@227|) TyType)) (= (type |#$T2@@151|) TyType)) (= (type |#$R@@317|) TyType)) (= (Tclass._System.___hFunc3LLOL_1 (Tclass._System.___hFunc3LLOL |#$T0@@291| |#$T1@@227| |#$T2@@151| |#$R@@317|)) |#$T1@@227|)) :qid |unknown.0:0| :skolemid |1351| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@291| |#$T1@@227| |#$T2@@151| |#$R@@317|)) )))
(assert (forall ((arg0@@414 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_2 arg0@@414)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_2| :pattern ( (Tclass._System.___hFunc3LLOL_2 arg0@@414)) )))
(assert (forall ((|#$T0@@292| T@U) (|#$T1@@228| T@U) (|#$T2@@152| T@U) (|#$R@@318| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@292|) TyType) (= (type |#$T1@@228|) TyType)) (= (type |#$T2@@152|) TyType)) (= (type |#$R@@318|) TyType)) (= (Tclass._System.___hFunc3LLOL_2 (Tclass._System.___hFunc3LLOL |#$T0@@292| |#$T1@@228| |#$T2@@152| |#$R@@318|)) |#$T2@@152|)) :qid |unknown.0:0| :skolemid |1352| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@292| |#$T1@@228| |#$T2@@152| |#$R@@318|)) )))
(assert (forall ((arg0@@415 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_3 arg0@@415)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_3| :pattern ( (Tclass._System.___hFunc3LLOL_3 arg0@@415)) )))
(assert (forall ((|#$T0@@293| T@U) (|#$T1@@229| T@U) (|#$T2@@153| T@U) (|#$R@@319| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@293|) TyType) (= (type |#$T1@@229|) TyType)) (= (type |#$T2@@153|) TyType)) (= (type |#$R@@319|) TyType)) (= (Tclass._System.___hFunc3LLOL_3 (Tclass._System.___hFunc3LLOL |#$T0@@293| |#$T1@@229| |#$T2@@153| |#$R@@319|)) |#$R@@319|)) :qid |unknown.0:0| :skolemid |1353| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@293| |#$T1@@229| |#$T2@@153| |#$R@@319|)) )))
(assert (forall ((|#$T0@@294| T@U) (|#$T1@@230| T@U) (|#$T2@@154| T@U) (|#$R@@320| T@U) (bx@@119 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@294|) TyType) (= (type |#$T1@@230|) TyType)) (= (type |#$T2@@154|) TyType)) (= (type |#$R@@320|) TyType)) (= (type bx@@119) BoxType)) ($IsBox bx@@119 (Tclass._System.___hFunc3LLOL |#$T0@@294| |#$T1@@230| |#$T2@@154| |#$R@@320|))) (and (= ($Box ($Unbox HandleTypeType bx@@119)) bx@@119) ($Is ($Unbox HandleTypeType bx@@119) (Tclass._System.___hFunc3LLOL |#$T0@@294| |#$T1@@230| |#$T2@@154| |#$R@@320|)))) :qid |unknown.0:0| :skolemid |1354| :pattern ( ($IsBox bx@@119 (Tclass._System.___hFunc3LLOL |#$T0@@294| |#$T1@@230| |#$T2@@154| |#$R@@320|))) )))
(assert (forall ((arg0@@416 T@U) (arg1@@171 T@U) (arg2@@112 T@U) (arg3@@77 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL arg0@@416 arg1@@171 arg2@@112 arg3@@77)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL| :pattern ( (Tclass._System.___hPartialFunc3LLOL arg0@@416 arg1@@171 arg2@@112 arg3@@77)) )))
(assert (forall ((|#$T0@@295| T@U) (|#$T1@@231| T@U) (|#$T2@@155| T@U) (|#$R@@321| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@295|) TyType) (= (type |#$T1@@231|) TyType)) (= (type |#$T2@@155|) TyType)) (= (type |#$R@@321|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOL |#$T0@@295| |#$T1@@231| |#$T2@@155| |#$R@@321|)) Tagclass._System.___hPartialFunc3LLOL) (= (TagFamily (Tclass._System.___hPartialFunc3LLOL |#$T0@@295| |#$T1@@231| |#$T2@@155| |#$R@@321|)) |tytagFamily$_#PartialFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1355| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@295| |#$T1@@231| |#$T2@@155| |#$R@@321|)) )))
(assert (forall ((arg0@@417 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_0 arg0@@417)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_0| :pattern ( (Tclass._System.___hPartialFunc3LLOL_0 arg0@@417)) )))
(assert (forall ((|#$T0@@296| T@U) (|#$T1@@232| T@U) (|#$T2@@156| T@U) (|#$R@@322| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@296|) TyType) (= (type |#$T1@@232|) TyType)) (= (type |#$T2@@156|) TyType)) (= (type |#$R@@322|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_0 (Tclass._System.___hPartialFunc3LLOL |#$T0@@296| |#$T1@@232| |#$T2@@156| |#$R@@322|)) |#$T0@@296|)) :qid |unknown.0:0| :skolemid |1356| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@296| |#$T1@@232| |#$T2@@156| |#$R@@322|)) )))
(assert (forall ((arg0@@418 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_1 arg0@@418)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_1| :pattern ( (Tclass._System.___hPartialFunc3LLOL_1 arg0@@418)) )))
(assert (forall ((|#$T0@@297| T@U) (|#$T1@@233| T@U) (|#$T2@@157| T@U) (|#$R@@323| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@297|) TyType) (= (type |#$T1@@233|) TyType)) (= (type |#$T2@@157|) TyType)) (= (type |#$R@@323|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_1 (Tclass._System.___hPartialFunc3LLOL |#$T0@@297| |#$T1@@233| |#$T2@@157| |#$R@@323|)) |#$T1@@233|)) :qid |unknown.0:0| :skolemid |1357| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@297| |#$T1@@233| |#$T2@@157| |#$R@@323|)) )))
(assert (forall ((arg0@@419 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_2 arg0@@419)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_2| :pattern ( (Tclass._System.___hPartialFunc3LLOL_2 arg0@@419)) )))
(assert (forall ((|#$T0@@298| T@U) (|#$T1@@234| T@U) (|#$T2@@158| T@U) (|#$R@@324| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@298|) TyType) (= (type |#$T1@@234|) TyType)) (= (type |#$T2@@158|) TyType)) (= (type |#$R@@324|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_2 (Tclass._System.___hPartialFunc3LLOL |#$T0@@298| |#$T1@@234| |#$T2@@158| |#$R@@324|)) |#$T2@@158|)) :qid |unknown.0:0| :skolemid |1358| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@298| |#$T1@@234| |#$T2@@158| |#$R@@324|)) )))
(assert (forall ((arg0@@420 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_3 arg0@@420)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_3| :pattern ( (Tclass._System.___hPartialFunc3LLOL_3 arg0@@420)) )))
(assert (forall ((|#$T0@@299| T@U) (|#$T1@@235| T@U) (|#$T2@@159| T@U) (|#$R@@325| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@299|) TyType) (= (type |#$T1@@235|) TyType)) (= (type |#$T2@@159|) TyType)) (= (type |#$R@@325|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_3 (Tclass._System.___hPartialFunc3LLOL |#$T0@@299| |#$T1@@235| |#$T2@@159| |#$R@@325|)) |#$R@@325|)) :qid |unknown.0:0| :skolemid |1359| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@299| |#$T1@@235| |#$T2@@159| |#$R@@325|)) )))
(assert (forall ((|#$T0@@300| T@U) (|#$T1@@236| T@U) (|#$T2@@160| T@U) (|#$R@@326| T@U) (bx@@120 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@300|) TyType) (= (type |#$T1@@236|) TyType)) (= (type |#$T2@@160|) TyType)) (= (type |#$R@@326|) TyType)) (= (type bx@@120) BoxType)) ($IsBox bx@@120 (Tclass._System.___hPartialFunc3LLOL |#$T0@@300| |#$T1@@236| |#$T2@@160| |#$R@@326|))) (and (= ($Box ($Unbox HandleTypeType bx@@120)) bx@@120) ($Is ($Unbox HandleTypeType bx@@120) (Tclass._System.___hPartialFunc3LLOL |#$T0@@300| |#$T1@@236| |#$T2@@160| |#$R@@326|)))) :qid |unknown.0:0| :skolemid |1360| :pattern ( ($IsBox bx@@120 (Tclass._System.___hPartialFunc3LLOL |#$T0@@300| |#$T1@@236| |#$T2@@160| |#$R@@326|))) )))
(assert (forall ((|#$T0@@301| T@U) (|#$T1@@237| T@U) (|#$T2@@161| T@U) (|#$R@@327| T@U) (|f#0@@63| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@301|) TyType) (= (type |#$T1@@237|) TyType)) (= (type |#$T2@@161|) TyType)) (= (type |#$R@@327|) TyType)) (= (type |f#0@@63|) HandleTypeType)) (= ($Is |f#0@@63| (Tclass._System.___hPartialFunc3LLOL |#$T0@@301| |#$T1@@237| |#$T2@@161| |#$R@@327|))  (and ($Is |f#0@@63| (Tclass._System.___hFunc3LLOL |#$T0@@301| |#$T1@@237| |#$T2@@161| |#$R@@327|)) (forall ((|x0#0@@27| T@U) (|x1#0@@19| T@U) (|x2#0@@11| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@27|) BoxType) (= (type |x1#0@@19|) BoxType)) (= (type |x2#0@@11|) BoxType)) (and (and ($IsBox |x0#0@@27| |#$T0@@301|) ($IsBox |x1#0@@19| |#$T1@@237|)) ($IsBox |x2#0@@11| |#$T2@@161|))) (|Set#Equal| (Reads3 |#$T0@@301| |#$T1@@237| |#$T2@@161| |#$R@@327| $OneHeap |f#0@@63| |x0#0@@27| |x1#0@@19| |x2#0@@11|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1361| :no-pattern (type |x0#0@@27|) :no-pattern (type |x1#0@@19|) :no-pattern (type |x2#0@@11|) :no-pattern (U_2_int |x0#0@@27|) :no-pattern (U_2_bool |x0#0@@27|) :no-pattern (U_2_int |x1#0@@19|) :no-pattern (U_2_bool |x1#0@@19|) :no-pattern (U_2_int |x2#0@@11|) :no-pattern (U_2_bool |x2#0@@11|) ))))) :qid |unknown.0:0| :skolemid |1362| :pattern ( ($Is |f#0@@63| (Tclass._System.___hPartialFunc3LLOL |#$T0@@301| |#$T1@@237| |#$T2@@161| |#$R@@327|))) )))
(assert (forall ((|#$T0@@302| T@U) (|#$T1@@238| T@U) (|#$T2@@162| T@U) (|#$R@@328| T@U) (|f#0@@64| T@U) ($h@@51 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@302|) TyType) (= (type |#$T1@@238|) TyType)) (= (type |#$T2@@162|) TyType)) (= (type |#$R@@328|) TyType)) (= (type |f#0@@64|) HandleTypeType)) (= (type $h@@51) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc3LLOL |#$T0@@302| |#$T1@@238| |#$T2@@162| |#$R@@328|) $h@@51) ($IsAlloc |f#0@@64| (Tclass._System.___hFunc3LLOL |#$T0@@302| |#$T1@@238| |#$T2@@162| |#$R@@328|) $h@@51))) :qid |unknown.0:0| :skolemid |1363| :pattern ( ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc3LLOL |#$T0@@302| |#$T1@@238| |#$T2@@162| |#$R@@328|) $h@@51)) )))
(assert (forall ((arg0@@421 T@U) (arg1@@172 T@U) (arg2@@113 T@U) (arg3@@78 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL arg0@@421 arg1@@172 arg2@@113 arg3@@78)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL| :pattern ( (Tclass._System.___hTotalFunc3LLOL arg0@@421 arg1@@172 arg2@@113 arg3@@78)) )))
(assert (forall ((|#$T0@@303| T@U) (|#$T1@@239| T@U) (|#$T2@@163| T@U) (|#$R@@329| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@303|) TyType) (= (type |#$T1@@239|) TyType)) (= (type |#$T2@@163|) TyType)) (= (type |#$R@@329|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOL |#$T0@@303| |#$T1@@239| |#$T2@@163| |#$R@@329|)) Tagclass._System.___hTotalFunc3LLOL) (= (TagFamily (Tclass._System.___hTotalFunc3LLOL |#$T0@@303| |#$T1@@239| |#$T2@@163| |#$R@@329|)) |tytagFamily$_#TotalFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1364| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@303| |#$T1@@239| |#$T2@@163| |#$R@@329|)) )))
(assert (forall ((arg0@@422 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_0 arg0@@422)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_0| :pattern ( (Tclass._System.___hTotalFunc3LLOL_0 arg0@@422)) )))
(assert (forall ((|#$T0@@304| T@U) (|#$T1@@240| T@U) (|#$T2@@164| T@U) (|#$R@@330| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@304|) TyType) (= (type |#$T1@@240|) TyType)) (= (type |#$T2@@164|) TyType)) (= (type |#$R@@330|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_0 (Tclass._System.___hTotalFunc3LLOL |#$T0@@304| |#$T1@@240| |#$T2@@164| |#$R@@330|)) |#$T0@@304|)) :qid |unknown.0:0| :skolemid |1365| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@304| |#$T1@@240| |#$T2@@164| |#$R@@330|)) )))
(assert (forall ((arg0@@423 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_1 arg0@@423)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_1| :pattern ( (Tclass._System.___hTotalFunc3LLOL_1 arg0@@423)) )))
(assert (forall ((|#$T0@@305| T@U) (|#$T1@@241| T@U) (|#$T2@@165| T@U) (|#$R@@331| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@305|) TyType) (= (type |#$T1@@241|) TyType)) (= (type |#$T2@@165|) TyType)) (= (type |#$R@@331|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_1 (Tclass._System.___hTotalFunc3LLOL |#$T0@@305| |#$T1@@241| |#$T2@@165| |#$R@@331|)) |#$T1@@241|)) :qid |unknown.0:0| :skolemid |1366| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@305| |#$T1@@241| |#$T2@@165| |#$R@@331|)) )))
(assert (forall ((arg0@@424 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_2 arg0@@424)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_2| :pattern ( (Tclass._System.___hTotalFunc3LLOL_2 arg0@@424)) )))
(assert (forall ((|#$T0@@306| T@U) (|#$T1@@242| T@U) (|#$T2@@166| T@U) (|#$R@@332| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@306|) TyType) (= (type |#$T1@@242|) TyType)) (= (type |#$T2@@166|) TyType)) (= (type |#$R@@332|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_2 (Tclass._System.___hTotalFunc3LLOL |#$T0@@306| |#$T1@@242| |#$T2@@166| |#$R@@332|)) |#$T2@@166|)) :qid |unknown.0:0| :skolemid |1367| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@306| |#$T1@@242| |#$T2@@166| |#$R@@332|)) )))
(assert (forall ((arg0@@425 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_3 arg0@@425)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_3| :pattern ( (Tclass._System.___hTotalFunc3LLOL_3 arg0@@425)) )))
(assert (forall ((|#$T0@@307| T@U) (|#$T1@@243| T@U) (|#$T2@@167| T@U) (|#$R@@333| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@307|) TyType) (= (type |#$T1@@243|) TyType)) (= (type |#$T2@@167|) TyType)) (= (type |#$R@@333|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_3 (Tclass._System.___hTotalFunc3LLOL |#$T0@@307| |#$T1@@243| |#$T2@@167| |#$R@@333|)) |#$R@@333|)) :qid |unknown.0:0| :skolemid |1368| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@307| |#$T1@@243| |#$T2@@167| |#$R@@333|)) )))
(assert (forall ((|#$T0@@308| T@U) (|#$T1@@244| T@U) (|#$T2@@168| T@U) (|#$R@@334| T@U) (bx@@121 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@308|) TyType) (= (type |#$T1@@244|) TyType)) (= (type |#$T2@@168|) TyType)) (= (type |#$R@@334|) TyType)) (= (type bx@@121) BoxType)) ($IsBox bx@@121 (Tclass._System.___hTotalFunc3LLOL |#$T0@@308| |#$T1@@244| |#$T2@@168| |#$R@@334|))) (and (= ($Box ($Unbox HandleTypeType bx@@121)) bx@@121) ($Is ($Unbox HandleTypeType bx@@121) (Tclass._System.___hTotalFunc3LLOL |#$T0@@308| |#$T1@@244| |#$T2@@168| |#$R@@334|)))) :qid |unknown.0:0| :skolemid |1369| :pattern ( ($IsBox bx@@121 (Tclass._System.___hTotalFunc3LLOL |#$T0@@308| |#$T1@@244| |#$T2@@168| |#$R@@334|))) )))
(assert (forall ((|#$T0@@309| T@U) (|#$T1@@245| T@U) (|#$T2@@169| T@U) (|#$R@@335| T@U) (|f#0@@65| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@309|) TyType) (= (type |#$T1@@245|) TyType)) (= (type |#$T2@@169|) TyType)) (= (type |#$R@@335|) TyType)) (= (type |f#0@@65|) HandleTypeType)) (= ($Is |f#0@@65| (Tclass._System.___hTotalFunc3LLOL |#$T0@@309| |#$T1@@245| |#$T2@@169| |#$R@@335|))  (and ($Is |f#0@@65| (Tclass._System.___hPartialFunc3LLOL |#$T0@@309| |#$T1@@245| |#$T2@@169| |#$R@@335|)) (forall ((|x0#0@@28| T@U) (|x1#0@@20| T@U) (|x2#0@@12| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@28|) BoxType) (= (type |x1#0@@20|) BoxType)) (= (type |x2#0@@12|) BoxType)) (and (and ($IsBox |x0#0@@28| |#$T0@@309|) ($IsBox |x1#0@@20| |#$T1@@245|)) ($IsBox |x2#0@@12| |#$T2@@169|))) (Requires3 |#$T0@@309| |#$T1@@245| |#$T2@@169| |#$R@@335| $OneHeap |f#0@@65| |x0#0@@28| |x1#0@@20| |x2#0@@12|)) :qid |unknown.0:0| :skolemid |1370| :no-pattern (type |x0#0@@28|) :no-pattern (type |x1#0@@20|) :no-pattern (type |x2#0@@12|) :no-pattern (U_2_int |x0#0@@28|) :no-pattern (U_2_bool |x0#0@@28|) :no-pattern (U_2_int |x1#0@@20|) :no-pattern (U_2_bool |x1#0@@20|) :no-pattern (U_2_int |x2#0@@12|) :no-pattern (U_2_bool |x2#0@@12|) ))))) :qid |unknown.0:0| :skolemid |1371| :pattern ( ($Is |f#0@@65| (Tclass._System.___hTotalFunc3LLOL |#$T0@@309| |#$T1@@245| |#$T2@@169| |#$R@@335|))) )))
(assert (forall ((|#$T0@@310| T@U) (|#$T1@@246| T@U) (|#$T2@@170| T@U) (|#$R@@336| T@U) (|f#0@@66| T@U) ($h@@52 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@310|) TyType) (= (type |#$T1@@246|) TyType)) (= (type |#$T2@@170|) TyType)) (= (type |#$R@@336|) TyType)) (= (type |f#0@@66|) HandleTypeType)) (= (type $h@@52) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc3LLOL |#$T0@@310| |#$T1@@246| |#$T2@@170| |#$R@@336|) $h@@52) ($IsAlloc |f#0@@66| (Tclass._System.___hPartialFunc3LLOL |#$T0@@310| |#$T1@@246| |#$T2@@170| |#$R@@336|) $h@@52))) :qid |unknown.0:0| :skolemid |1372| :pattern ( ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc3LLOL |#$T0@@310| |#$T1@@246| |#$T2@@170| |#$R@@336|) $h@@52)) )))
(assert (forall ((arg0@@426 T@U) (arg1@@173 T@U) (arg2@@114 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO arg0@@426 arg1@@173 arg2@@114)) TyType) :qid |funType:Tclass._System.___hFunc2SSO| :pattern ( (Tclass._System.___hFunc2SSO arg0@@426 arg1@@173 arg2@@114)) )))
(assert (forall ((|#$T0@@311| T@U) (|#$T1@@247| T@U) (|#$R@@337| T@U) ) (!  (=> (and (and (= (type |#$T0@@311|) TyType) (= (type |#$T1@@247|) TyType)) (= (type |#$R@@337|) TyType)) (and (= (Tag (Tclass._System.___hFunc2SSO |#$T0@@311| |#$T1@@247| |#$R@@337|)) Tagclass._System.___hFunc2SSO) (= (TagFamily (Tclass._System.___hFunc2SSO |#$T0@@311| |#$T1@@247| |#$R@@337|)) |tytagFamily$_#Func2SSO|))) :qid |unknown.0:0| :skolemid |1373| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@311| |#$T1@@247| |#$R@@337|)) )))
(assert (forall ((arg0@@427 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_0 arg0@@427)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_0| :pattern ( (Tclass._System.___hFunc2SSO_0 arg0@@427)) )))
(assert (forall ((|#$T0@@312| T@U) (|#$T1@@248| T@U) (|#$R@@338| T@U) ) (!  (=> (and (and (= (type |#$T0@@312|) TyType) (= (type |#$T1@@248|) TyType)) (= (type |#$R@@338|) TyType)) (= (Tclass._System.___hFunc2SSO_0 (Tclass._System.___hFunc2SSO |#$T0@@312| |#$T1@@248| |#$R@@338|)) |#$T0@@312|)) :qid |unknown.0:0| :skolemid |1374| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@312| |#$T1@@248| |#$R@@338|)) )))
(assert (forall ((arg0@@428 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_1 arg0@@428)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_1| :pattern ( (Tclass._System.___hFunc2SSO_1 arg0@@428)) )))
(assert (forall ((|#$T0@@313| T@U) (|#$T1@@249| T@U) (|#$R@@339| T@U) ) (!  (=> (and (and (= (type |#$T0@@313|) TyType) (= (type |#$T1@@249|) TyType)) (= (type |#$R@@339|) TyType)) (= (Tclass._System.___hFunc2SSO_1 (Tclass._System.___hFunc2SSO |#$T0@@313| |#$T1@@249| |#$R@@339|)) |#$T1@@249|)) :qid |unknown.0:0| :skolemid |1375| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@313| |#$T1@@249| |#$R@@339|)) )))
(assert (forall ((arg0@@429 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_2 arg0@@429)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_2| :pattern ( (Tclass._System.___hFunc2SSO_2 arg0@@429)) )))
(assert (forall ((|#$T0@@314| T@U) (|#$T1@@250| T@U) (|#$R@@340| T@U) ) (!  (=> (and (and (= (type |#$T0@@314|) TyType) (= (type |#$T1@@250|) TyType)) (= (type |#$R@@340|) TyType)) (= (Tclass._System.___hFunc2SSO_2 (Tclass._System.___hFunc2SSO |#$T0@@314| |#$T1@@250| |#$R@@340|)) |#$R@@340|)) :qid |unknown.0:0| :skolemid |1376| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@314| |#$T1@@250| |#$R@@340|)) )))
(assert (forall ((|#$T0@@315| T@U) (|#$T1@@251| T@U) (|#$R@@341| T@U) (bx@@122 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@315|) TyType) (= (type |#$T1@@251|) TyType)) (= (type |#$R@@341|) TyType)) (= (type bx@@122) BoxType)) ($IsBox bx@@122 (Tclass._System.___hFunc2SSO |#$T0@@315| |#$T1@@251| |#$R@@341|))) (and (= ($Box ($Unbox HandleTypeType bx@@122)) bx@@122) ($Is ($Unbox HandleTypeType bx@@122) (Tclass._System.___hFunc2SSO |#$T0@@315| |#$T1@@251| |#$R@@341|)))) :qid |unknown.0:0| :skolemid |1377| :pattern ( ($IsBox bx@@122 (Tclass._System.___hFunc2SSO |#$T0@@315| |#$T1@@251| |#$R@@341|))) )))
(assert (forall ((arg0@@430 T@U) (arg1@@174 T@U) (arg2@@115 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO arg0@@430 arg1@@174 arg2@@115)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO| :pattern ( (Tclass._System.___hPartialFunc2SSO arg0@@430 arg1@@174 arg2@@115)) )))
(assert (forall ((|#$T0@@316| T@U) (|#$T1@@252| T@U) (|#$R@@342| T@U) ) (!  (=> (and (and (= (type |#$T0@@316|) TyType) (= (type |#$T1@@252|) TyType)) (= (type |#$R@@342|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2SSO |#$T0@@316| |#$T1@@252| |#$R@@342|)) Tagclass._System.___hPartialFunc2SSO) (= (TagFamily (Tclass._System.___hPartialFunc2SSO |#$T0@@316| |#$T1@@252| |#$R@@342|)) |tytagFamily$_#PartialFunc2SSO|))) :qid |unknown.0:0| :skolemid |1378| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@316| |#$T1@@252| |#$R@@342|)) )))
(assert (forall ((arg0@@431 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_0 arg0@@431)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_0| :pattern ( (Tclass._System.___hPartialFunc2SSO_0 arg0@@431)) )))
(assert (forall ((|#$T0@@317| T@U) (|#$T1@@253| T@U) (|#$R@@343| T@U) ) (!  (=> (and (and (= (type |#$T0@@317|) TyType) (= (type |#$T1@@253|) TyType)) (= (type |#$R@@343|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_0 (Tclass._System.___hPartialFunc2SSO |#$T0@@317| |#$T1@@253| |#$R@@343|)) |#$T0@@317|)) :qid |unknown.0:0| :skolemid |1379| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@317| |#$T1@@253| |#$R@@343|)) )))
(assert (forall ((arg0@@432 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_1 arg0@@432)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_1| :pattern ( (Tclass._System.___hPartialFunc2SSO_1 arg0@@432)) )))
(assert (forall ((|#$T0@@318| T@U) (|#$T1@@254| T@U) (|#$R@@344| T@U) ) (!  (=> (and (and (= (type |#$T0@@318|) TyType) (= (type |#$T1@@254|) TyType)) (= (type |#$R@@344|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_1 (Tclass._System.___hPartialFunc2SSO |#$T0@@318| |#$T1@@254| |#$R@@344|)) |#$T1@@254|)) :qid |unknown.0:0| :skolemid |1380| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@318| |#$T1@@254| |#$R@@344|)) )))
(assert (forall ((arg0@@433 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_2 arg0@@433)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_2| :pattern ( (Tclass._System.___hPartialFunc2SSO_2 arg0@@433)) )))
(assert (forall ((|#$T0@@319| T@U) (|#$T1@@255| T@U) (|#$R@@345| T@U) ) (!  (=> (and (and (= (type |#$T0@@319|) TyType) (= (type |#$T1@@255|) TyType)) (= (type |#$R@@345|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_2 (Tclass._System.___hPartialFunc2SSO |#$T0@@319| |#$T1@@255| |#$R@@345|)) |#$R@@345|)) :qid |unknown.0:0| :skolemid |1381| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@319| |#$T1@@255| |#$R@@345|)) )))
(assert (forall ((|#$T0@@320| T@U) (|#$T1@@256| T@U) (|#$R@@346| T@U) (bx@@123 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@320|) TyType) (= (type |#$T1@@256|) TyType)) (= (type |#$R@@346|) TyType)) (= (type bx@@123) BoxType)) ($IsBox bx@@123 (Tclass._System.___hPartialFunc2SSO |#$T0@@320| |#$T1@@256| |#$R@@346|))) (and (= ($Box ($Unbox HandleTypeType bx@@123)) bx@@123) ($Is ($Unbox HandleTypeType bx@@123) (Tclass._System.___hPartialFunc2SSO |#$T0@@320| |#$T1@@256| |#$R@@346|)))) :qid |unknown.0:0| :skolemid |1382| :pattern ( ($IsBox bx@@123 (Tclass._System.___hPartialFunc2SSO |#$T0@@320| |#$T1@@256| |#$R@@346|))) )))
(assert (forall ((|#$T0@@321| T@U) (|#$T1@@257| T@U) (|#$R@@347| T@U) (|f#0@@67| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@321|) TyType) (= (type |#$T1@@257|) TyType)) (= (type |#$R@@347|) TyType)) (= (type |f#0@@67|) HandleTypeType)) (= ($Is |f#0@@67| (Tclass._System.___hPartialFunc2SSO |#$T0@@321| |#$T1@@257| |#$R@@347|))  (and ($Is |f#0@@67| (Tclass._System.___hFunc2SSO |#$T0@@321| |#$T1@@257| |#$R@@347|)) (forall ((|x0#0@@29| T@U) (|x1#0@@21| T@U) ) (!  (=> (and (and (= (type |x0#0@@29|) BoxType) (= (type |x1#0@@21|) BoxType)) (and ($IsBox |x0#0@@29| |#$T0@@321|) ($IsBox |x1#0@@21| |#$T1@@257|))) (|Set#Equal| (Reads2 |#$T0@@321| |#$T1@@257| |#$R@@347| $OneHeap |f#0@@67| |x0#0@@29| |x1#0@@21|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1383| :no-pattern (type |x0#0@@29|) :no-pattern (type |x1#0@@21|) :no-pattern (U_2_int |x0#0@@29|) :no-pattern (U_2_bool |x0#0@@29|) :no-pattern (U_2_int |x1#0@@21|) :no-pattern (U_2_bool |x1#0@@21|) ))))) :qid |unknown.0:0| :skolemid |1384| :pattern ( ($Is |f#0@@67| (Tclass._System.___hPartialFunc2SSO |#$T0@@321| |#$T1@@257| |#$R@@347|))) )))
(assert (forall ((|#$T0@@322| T@U) (|#$T1@@258| T@U) (|#$R@@348| T@U) (|f#0@@68| T@U) ($h@@53 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@322|) TyType) (= (type |#$T1@@258|) TyType)) (= (type |#$R@@348|) TyType)) (= (type |f#0@@68|) HandleTypeType)) (= (type $h@@53) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@68| (Tclass._System.___hPartialFunc2SSO |#$T0@@322| |#$T1@@258| |#$R@@348|) $h@@53) ($IsAlloc |f#0@@68| (Tclass._System.___hFunc2SSO |#$T0@@322| |#$T1@@258| |#$R@@348|) $h@@53))) :qid |unknown.0:0| :skolemid |1385| :pattern ( ($IsAlloc |f#0@@68| (Tclass._System.___hPartialFunc2SSO |#$T0@@322| |#$T1@@258| |#$R@@348|) $h@@53)) )))
(assert (forall ((arg0@@434 T@U) (arg1@@175 T@U) (arg2@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO arg0@@434 arg1@@175 arg2@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO| :pattern ( (Tclass._System.___hTotalFunc2SSO arg0@@434 arg1@@175 arg2@@116)) )))
(assert (forall ((|#$T0@@323| T@U) (|#$T1@@259| T@U) (|#$R@@349| T@U) ) (!  (=> (and (and (= (type |#$T0@@323|) TyType) (= (type |#$T1@@259|) TyType)) (= (type |#$R@@349|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2SSO |#$T0@@323| |#$T1@@259| |#$R@@349|)) Tagclass._System.___hTotalFunc2SSO) (= (TagFamily (Tclass._System.___hTotalFunc2SSO |#$T0@@323| |#$T1@@259| |#$R@@349|)) |tytagFamily$_#TotalFunc2SSO|))) :qid |unknown.0:0| :skolemid |1386| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@323| |#$T1@@259| |#$R@@349|)) )))
(assert (forall ((arg0@@435 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_0 arg0@@435)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_0| :pattern ( (Tclass._System.___hTotalFunc2SSO_0 arg0@@435)) )))
(assert (forall ((|#$T0@@324| T@U) (|#$T1@@260| T@U) (|#$R@@350| T@U) ) (!  (=> (and (and (= (type |#$T0@@324|) TyType) (= (type |#$T1@@260|) TyType)) (= (type |#$R@@350|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_0 (Tclass._System.___hTotalFunc2SSO |#$T0@@324| |#$T1@@260| |#$R@@350|)) |#$T0@@324|)) :qid |unknown.0:0| :skolemid |1387| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@324| |#$T1@@260| |#$R@@350|)) )))
(assert (forall ((arg0@@436 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_1 arg0@@436)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_1| :pattern ( (Tclass._System.___hTotalFunc2SSO_1 arg0@@436)) )))
(assert (forall ((|#$T0@@325| T@U) (|#$T1@@261| T@U) (|#$R@@351| T@U) ) (!  (=> (and (and (= (type |#$T0@@325|) TyType) (= (type |#$T1@@261|) TyType)) (= (type |#$R@@351|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_1 (Tclass._System.___hTotalFunc2SSO |#$T0@@325| |#$T1@@261| |#$R@@351|)) |#$T1@@261|)) :qid |unknown.0:0| :skolemid |1388| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@325| |#$T1@@261| |#$R@@351|)) )))
(assert (forall ((arg0@@437 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_2 arg0@@437)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_2| :pattern ( (Tclass._System.___hTotalFunc2SSO_2 arg0@@437)) )))
(assert (forall ((|#$T0@@326| T@U) (|#$T1@@262| T@U) (|#$R@@352| T@U) ) (!  (=> (and (and (= (type |#$T0@@326|) TyType) (= (type |#$T1@@262|) TyType)) (= (type |#$R@@352|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_2 (Tclass._System.___hTotalFunc2SSO |#$T0@@326| |#$T1@@262| |#$R@@352|)) |#$R@@352|)) :qid |unknown.0:0| :skolemid |1389| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@326| |#$T1@@262| |#$R@@352|)) )))
(assert (forall ((|#$T0@@327| T@U) (|#$T1@@263| T@U) (|#$R@@353| T@U) (bx@@124 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@327|) TyType) (= (type |#$T1@@263|) TyType)) (= (type |#$R@@353|) TyType)) (= (type bx@@124) BoxType)) ($IsBox bx@@124 (Tclass._System.___hTotalFunc2SSO |#$T0@@327| |#$T1@@263| |#$R@@353|))) (and (= ($Box ($Unbox HandleTypeType bx@@124)) bx@@124) ($Is ($Unbox HandleTypeType bx@@124) (Tclass._System.___hTotalFunc2SSO |#$T0@@327| |#$T1@@263| |#$R@@353|)))) :qid |unknown.0:0| :skolemid |1390| :pattern ( ($IsBox bx@@124 (Tclass._System.___hTotalFunc2SSO |#$T0@@327| |#$T1@@263| |#$R@@353|))) )))
(assert (forall ((|#$T0@@328| T@U) (|#$T1@@264| T@U) (|#$R@@354| T@U) (|f#0@@69| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@328|) TyType) (= (type |#$T1@@264|) TyType)) (= (type |#$R@@354|) TyType)) (= (type |f#0@@69|) HandleTypeType)) (= ($Is |f#0@@69| (Tclass._System.___hTotalFunc2SSO |#$T0@@328| |#$T1@@264| |#$R@@354|))  (and ($Is |f#0@@69| (Tclass._System.___hPartialFunc2SSO |#$T0@@328| |#$T1@@264| |#$R@@354|)) (forall ((|x0#0@@30| T@U) (|x1#0@@22| T@U) ) (!  (=> (and (and (= (type |x0#0@@30|) BoxType) (= (type |x1#0@@22|) BoxType)) (and ($IsBox |x0#0@@30| |#$T0@@328|) ($IsBox |x1#0@@22| |#$T1@@264|))) (Requires2 |#$T0@@328| |#$T1@@264| |#$R@@354| $OneHeap |f#0@@69| |x0#0@@30| |x1#0@@22|)) :qid |unknown.0:0| :skolemid |1391| :no-pattern (type |x0#0@@30|) :no-pattern (type |x1#0@@22|) :no-pattern (U_2_int |x0#0@@30|) :no-pattern (U_2_bool |x0#0@@30|) :no-pattern (U_2_int |x1#0@@22|) :no-pattern (U_2_bool |x1#0@@22|) ))))) :qid |unknown.0:0| :skolemid |1392| :pattern ( ($Is |f#0@@69| (Tclass._System.___hTotalFunc2SSO |#$T0@@328| |#$T1@@264| |#$R@@354|))) )))
(assert (forall ((|#$T0@@329| T@U) (|#$T1@@265| T@U) (|#$R@@355| T@U) (|f#0@@70| T@U) ($h@@54 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@329|) TyType) (= (type |#$T1@@265|) TyType)) (= (type |#$R@@355|) TyType)) (= (type |f#0@@70|) HandleTypeType)) (= (type $h@@54) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@70| (Tclass._System.___hTotalFunc2SSO |#$T0@@329| |#$T1@@265| |#$R@@355|) $h@@54) ($IsAlloc |f#0@@70| (Tclass._System.___hPartialFunc2SSO |#$T0@@329| |#$T1@@265| |#$R@@355|) $h@@54))) :qid |unknown.0:0| :skolemid |1393| :pattern ( ($IsAlloc |f#0@@70| (Tclass._System.___hTotalFunc2SSO |#$T0@@329| |#$T1@@265| |#$R@@355|) $h@@54)) )))
(assert (forall ((arg0@@438 T@U) (arg1@@176 T@U) ) (! (= (type (Tclass._System.___hFunc1SS arg0@@438 arg1@@176)) TyType) :qid |funType:Tclass._System.___hFunc1SS| :pattern ( (Tclass._System.___hFunc1SS arg0@@438 arg1@@176)) )))
(assert (forall ((|#$T0@@330| T@U) (|#$R@@356| T@U) ) (!  (=> (and (= (type |#$T0@@330|) TyType) (= (type |#$R@@356|) TyType)) (and (= (Tag (Tclass._System.___hFunc1SS |#$T0@@330| |#$R@@356|)) Tagclass._System.___hFunc1SS) (= (TagFamily (Tclass._System.___hFunc1SS |#$T0@@330| |#$R@@356|)) |tytagFamily$_#Func1SS|))) :qid |unknown.0:0| :skolemid |1394| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@330| |#$R@@356|)) )))
(assert (forall ((arg0@@439 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_0 arg0@@439)) TyType) :qid |funType:Tclass._System.___hFunc1SS_0| :pattern ( (Tclass._System.___hFunc1SS_0 arg0@@439)) )))
(assert (forall ((|#$T0@@331| T@U) (|#$R@@357| T@U) ) (!  (=> (and (= (type |#$T0@@331|) TyType) (= (type |#$R@@357|) TyType)) (= (Tclass._System.___hFunc1SS_0 (Tclass._System.___hFunc1SS |#$T0@@331| |#$R@@357|)) |#$T0@@331|)) :qid |unknown.0:0| :skolemid |1395| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@331| |#$R@@357|)) )))
(assert (forall ((arg0@@440 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_1 arg0@@440)) TyType) :qid |funType:Tclass._System.___hFunc1SS_1| :pattern ( (Tclass._System.___hFunc1SS_1 arg0@@440)) )))
(assert (forall ((|#$T0@@332| T@U) (|#$R@@358| T@U) ) (!  (=> (and (= (type |#$T0@@332|) TyType) (= (type |#$R@@358|) TyType)) (= (Tclass._System.___hFunc1SS_1 (Tclass._System.___hFunc1SS |#$T0@@332| |#$R@@358|)) |#$R@@358|)) :qid |unknown.0:0| :skolemid |1396| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@332| |#$R@@358|)) )))
(assert (forall ((|#$T0@@333| T@U) (|#$R@@359| T@U) (bx@@125 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@333|) TyType) (= (type |#$R@@359|) TyType)) (= (type bx@@125) BoxType)) ($IsBox bx@@125 (Tclass._System.___hFunc1SS |#$T0@@333| |#$R@@359|))) (and (= ($Box ($Unbox HandleTypeType bx@@125)) bx@@125) ($Is ($Unbox HandleTypeType bx@@125) (Tclass._System.___hFunc1SS |#$T0@@333| |#$R@@359|)))) :qid |unknown.0:0| :skolemid |1397| :pattern ( ($IsBox bx@@125 (Tclass._System.___hFunc1SS |#$T0@@333| |#$R@@359|))) )))
(assert (forall ((arg0@@441 T@U) (arg1@@177 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS arg0@@441 arg1@@177)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS| :pattern ( (Tclass._System.___hPartialFunc1SS arg0@@441 arg1@@177)) )))
(assert (forall ((|#$T0@@334| T@U) (|#$R@@360| T@U) ) (!  (=> (and (= (type |#$T0@@334|) TyType) (= (type |#$R@@360|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1SS |#$T0@@334| |#$R@@360|)) Tagclass._System.___hPartialFunc1SS) (= (TagFamily (Tclass._System.___hPartialFunc1SS |#$T0@@334| |#$R@@360|)) |tytagFamily$_#PartialFunc1SS|))) :qid |unknown.0:0| :skolemid |1398| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@334| |#$R@@360|)) )))
(assert (forall ((arg0@@442 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_0 arg0@@442)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_0| :pattern ( (Tclass._System.___hPartialFunc1SS_0 arg0@@442)) )))
(assert (forall ((|#$T0@@335| T@U) (|#$R@@361| T@U) ) (!  (=> (and (= (type |#$T0@@335|) TyType) (= (type |#$R@@361|) TyType)) (= (Tclass._System.___hPartialFunc1SS_0 (Tclass._System.___hPartialFunc1SS |#$T0@@335| |#$R@@361|)) |#$T0@@335|)) :qid |unknown.0:0| :skolemid |1399| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@335| |#$R@@361|)) )))
(assert (forall ((arg0@@443 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_1 arg0@@443)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_1| :pattern ( (Tclass._System.___hPartialFunc1SS_1 arg0@@443)) )))
(assert (forall ((|#$T0@@336| T@U) (|#$R@@362| T@U) ) (!  (=> (and (= (type |#$T0@@336|) TyType) (= (type |#$R@@362|) TyType)) (= (Tclass._System.___hPartialFunc1SS_1 (Tclass._System.___hPartialFunc1SS |#$T0@@336| |#$R@@362|)) |#$R@@362|)) :qid |unknown.0:0| :skolemid |1400| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@336| |#$R@@362|)) )))
(assert (forall ((|#$T0@@337| T@U) (|#$R@@363| T@U) (bx@@126 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@337|) TyType) (= (type |#$R@@363|) TyType)) (= (type bx@@126) BoxType)) ($IsBox bx@@126 (Tclass._System.___hPartialFunc1SS |#$T0@@337| |#$R@@363|))) (and (= ($Box ($Unbox HandleTypeType bx@@126)) bx@@126) ($Is ($Unbox HandleTypeType bx@@126) (Tclass._System.___hPartialFunc1SS |#$T0@@337| |#$R@@363|)))) :qid |unknown.0:0| :skolemid |1401| :pattern ( ($IsBox bx@@126 (Tclass._System.___hPartialFunc1SS |#$T0@@337| |#$R@@363|))) )))
(assert (forall ((|#$T0@@338| T@U) (|#$R@@364| T@U) (|f#0@@71| T@U) ) (!  (=> (and (and (= (type |#$T0@@338|) TyType) (= (type |#$R@@364|) TyType)) (= (type |f#0@@71|) HandleTypeType)) (= ($Is |f#0@@71| (Tclass._System.___hPartialFunc1SS |#$T0@@338| |#$R@@364|))  (and ($Is |f#0@@71| (Tclass._System.___hFunc1SS |#$T0@@338| |#$R@@364|)) (forall ((|x0#0@@31| T@U) ) (!  (=> (and (= (type |x0#0@@31|) BoxType) ($IsBox |x0#0@@31| |#$T0@@338|)) (|Set#Equal| (Reads1 |#$T0@@338| |#$R@@364| $OneHeap |f#0@@71| |x0#0@@31|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1402| :no-pattern (type |x0#0@@31|) :no-pattern (U_2_int |x0#0@@31|) :no-pattern (U_2_bool |x0#0@@31|) ))))) :qid |unknown.0:0| :skolemid |1403| :pattern ( ($Is |f#0@@71| (Tclass._System.___hPartialFunc1SS |#$T0@@338| |#$R@@364|))) )))
(assert (forall ((|#$T0@@339| T@U) (|#$R@@365| T@U) (|f#0@@72| T@U) ($h@@55 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@339|) TyType) (= (type |#$R@@365|) TyType)) (= (type |f#0@@72|) HandleTypeType)) (= (type $h@@55) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@72| (Tclass._System.___hPartialFunc1SS |#$T0@@339| |#$R@@365|) $h@@55) ($IsAlloc |f#0@@72| (Tclass._System.___hFunc1SS |#$T0@@339| |#$R@@365|) $h@@55))) :qid |unknown.0:0| :skolemid |1404| :pattern ( ($IsAlloc |f#0@@72| (Tclass._System.___hPartialFunc1SS |#$T0@@339| |#$R@@365|) $h@@55)) )))
(assert (forall ((arg0@@444 T@U) (arg1@@178 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS arg0@@444 arg1@@178)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS| :pattern ( (Tclass._System.___hTotalFunc1SS arg0@@444 arg1@@178)) )))
(assert (forall ((|#$T0@@340| T@U) (|#$R@@366| T@U) ) (!  (=> (and (= (type |#$T0@@340|) TyType) (= (type |#$R@@366|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1SS |#$T0@@340| |#$R@@366|)) Tagclass._System.___hTotalFunc1SS) (= (TagFamily (Tclass._System.___hTotalFunc1SS |#$T0@@340| |#$R@@366|)) |tytagFamily$_#TotalFunc1SS|))) :qid |unknown.0:0| :skolemid |1405| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@340| |#$R@@366|)) )))
(assert (forall ((arg0@@445 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_0 arg0@@445)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_0| :pattern ( (Tclass._System.___hTotalFunc1SS_0 arg0@@445)) )))
(assert (forall ((|#$T0@@341| T@U) (|#$R@@367| T@U) ) (!  (=> (and (= (type |#$T0@@341|) TyType) (= (type |#$R@@367|) TyType)) (= (Tclass._System.___hTotalFunc1SS_0 (Tclass._System.___hTotalFunc1SS |#$T0@@341| |#$R@@367|)) |#$T0@@341|)) :qid |unknown.0:0| :skolemid |1406| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@341| |#$R@@367|)) )))
(assert (forall ((arg0@@446 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_1 arg0@@446)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_1| :pattern ( (Tclass._System.___hTotalFunc1SS_1 arg0@@446)) )))
(assert (forall ((|#$T0@@342| T@U) (|#$R@@368| T@U) ) (!  (=> (and (= (type |#$T0@@342|) TyType) (= (type |#$R@@368|) TyType)) (= (Tclass._System.___hTotalFunc1SS_1 (Tclass._System.___hTotalFunc1SS |#$T0@@342| |#$R@@368|)) |#$R@@368|)) :qid |unknown.0:0| :skolemid |1407| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@342| |#$R@@368|)) )))
(assert (forall ((|#$T0@@343| T@U) (|#$R@@369| T@U) (bx@@127 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@343|) TyType) (= (type |#$R@@369|) TyType)) (= (type bx@@127) BoxType)) ($IsBox bx@@127 (Tclass._System.___hTotalFunc1SS |#$T0@@343| |#$R@@369|))) (and (= ($Box ($Unbox HandleTypeType bx@@127)) bx@@127) ($Is ($Unbox HandleTypeType bx@@127) (Tclass._System.___hTotalFunc1SS |#$T0@@343| |#$R@@369|)))) :qid |unknown.0:0| :skolemid |1408| :pattern ( ($IsBox bx@@127 (Tclass._System.___hTotalFunc1SS |#$T0@@343| |#$R@@369|))) )))
(assert (forall ((|#$T0@@344| T@U) (|#$R@@370| T@U) (|f#0@@73| T@U) ) (!  (=> (and (and (= (type |#$T0@@344|) TyType) (= (type |#$R@@370|) TyType)) (= (type |f#0@@73|) HandleTypeType)) (= ($Is |f#0@@73| (Tclass._System.___hTotalFunc1SS |#$T0@@344| |#$R@@370|))  (and ($Is |f#0@@73| (Tclass._System.___hPartialFunc1SS |#$T0@@344| |#$R@@370|)) (forall ((|x0#0@@32| T@U) ) (!  (=> (and (= (type |x0#0@@32|) BoxType) ($IsBox |x0#0@@32| |#$T0@@344|)) (Requires1 |#$T0@@344| |#$R@@370| $OneHeap |f#0@@73| |x0#0@@32|)) :qid |unknown.0:0| :skolemid |1409| :no-pattern (type |x0#0@@32|) :no-pattern (U_2_int |x0#0@@32|) :no-pattern (U_2_bool |x0#0@@32|) ))))) :qid |unknown.0:0| :skolemid |1410| :pattern ( ($Is |f#0@@73| (Tclass._System.___hTotalFunc1SS |#$T0@@344| |#$R@@370|))) )))
(assert (forall ((|#$T0@@345| T@U) (|#$R@@371| T@U) (|f#0@@74| T@U) ($h@@56 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@345|) TyType) (= (type |#$R@@371|) TyType)) (= (type |f#0@@74|) HandleTypeType)) (= (type $h@@56) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@74| (Tclass._System.___hTotalFunc1SS |#$T0@@345| |#$R@@371|) $h@@56) ($IsAlloc |f#0@@74| (Tclass._System.___hPartialFunc1SS |#$T0@@345| |#$R@@371|) $h@@56))) :qid |unknown.0:0| :skolemid |1411| :pattern ( ($IsAlloc |f#0@@74| (Tclass._System.___hTotalFunc1SS |#$T0@@345| |#$R@@371|) $h@@56)) )))
(assert (forall ((arg0@@447 T@U) (arg1@@179 T@U) ) (! (= (type (Tclass._System.___hFunc1LL arg0@@447 arg1@@179)) TyType) :qid |funType:Tclass._System.___hFunc1LL| :pattern ( (Tclass._System.___hFunc1LL arg0@@447 arg1@@179)) )))
(assert (forall ((|#$T0@@346| T@U) (|#$R@@372| T@U) ) (!  (=> (and (= (type |#$T0@@346|) TyType) (= (type |#$R@@372|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LL |#$T0@@346| |#$R@@372|)) Tagclass._System.___hFunc1LL) (= (TagFamily (Tclass._System.___hFunc1LL |#$T0@@346| |#$R@@372|)) |tytagFamily$_#Func1LL|))) :qid |unknown.0:0| :skolemid |1412| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@346| |#$R@@372|)) )))
(assert (forall ((arg0@@448 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_0 arg0@@448)) TyType) :qid |funType:Tclass._System.___hFunc1LL_0| :pattern ( (Tclass._System.___hFunc1LL_0 arg0@@448)) )))
(assert (forall ((|#$T0@@347| T@U) (|#$R@@373| T@U) ) (!  (=> (and (= (type |#$T0@@347|) TyType) (= (type |#$R@@373|) TyType)) (= (Tclass._System.___hFunc1LL_0 (Tclass._System.___hFunc1LL |#$T0@@347| |#$R@@373|)) |#$T0@@347|)) :qid |unknown.0:0| :skolemid |1413| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@347| |#$R@@373|)) )))
(assert (forall ((arg0@@449 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_1 arg0@@449)) TyType) :qid |funType:Tclass._System.___hFunc1LL_1| :pattern ( (Tclass._System.___hFunc1LL_1 arg0@@449)) )))
(assert (forall ((|#$T0@@348| T@U) (|#$R@@374| T@U) ) (!  (=> (and (= (type |#$T0@@348|) TyType) (= (type |#$R@@374|) TyType)) (= (Tclass._System.___hFunc1LL_1 (Tclass._System.___hFunc1LL |#$T0@@348| |#$R@@374|)) |#$R@@374|)) :qid |unknown.0:0| :skolemid |1414| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@348| |#$R@@374|)) )))
(assert (forall ((|#$T0@@349| T@U) (|#$R@@375| T@U) (bx@@128 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@349|) TyType) (= (type |#$R@@375|) TyType)) (= (type bx@@128) BoxType)) ($IsBox bx@@128 (Tclass._System.___hFunc1LL |#$T0@@349| |#$R@@375|))) (and (= ($Box ($Unbox HandleTypeType bx@@128)) bx@@128) ($Is ($Unbox HandleTypeType bx@@128) (Tclass._System.___hFunc1LL |#$T0@@349| |#$R@@375|)))) :qid |unknown.0:0| :skolemid |1415| :pattern ( ($IsBox bx@@128 (Tclass._System.___hFunc1LL |#$T0@@349| |#$R@@375|))) )))
(assert (forall ((arg0@@450 T@U) (arg1@@180 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL arg0@@450 arg1@@180)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL| :pattern ( (Tclass._System.___hPartialFunc1LL arg0@@450 arg1@@180)) )))
(assert (forall ((|#$T0@@350| T@U) (|#$R@@376| T@U) ) (!  (=> (and (= (type |#$T0@@350|) TyType) (= (type |#$R@@376|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LL |#$T0@@350| |#$R@@376|)) Tagclass._System.___hPartialFunc1LL) (= (TagFamily (Tclass._System.___hPartialFunc1LL |#$T0@@350| |#$R@@376|)) |tytagFamily$_#PartialFunc1LL|))) :qid |unknown.0:0| :skolemid |1416| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@350| |#$R@@376|)) )))
(assert (forall ((arg0@@451 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_0 arg0@@451)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_0| :pattern ( (Tclass._System.___hPartialFunc1LL_0 arg0@@451)) )))
(assert (forall ((|#$T0@@351| T@U) (|#$R@@377| T@U) ) (!  (=> (and (= (type |#$T0@@351|) TyType) (= (type |#$R@@377|) TyType)) (= (Tclass._System.___hPartialFunc1LL_0 (Tclass._System.___hPartialFunc1LL |#$T0@@351| |#$R@@377|)) |#$T0@@351|)) :qid |unknown.0:0| :skolemid |1417| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@351| |#$R@@377|)) )))
(assert (forall ((arg0@@452 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_1 arg0@@452)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_1| :pattern ( (Tclass._System.___hPartialFunc1LL_1 arg0@@452)) )))
(assert (forall ((|#$T0@@352| T@U) (|#$R@@378| T@U) ) (!  (=> (and (= (type |#$T0@@352|) TyType) (= (type |#$R@@378|) TyType)) (= (Tclass._System.___hPartialFunc1LL_1 (Tclass._System.___hPartialFunc1LL |#$T0@@352| |#$R@@378|)) |#$R@@378|)) :qid |unknown.0:0| :skolemid |1418| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@352| |#$R@@378|)) )))
(assert (forall ((|#$T0@@353| T@U) (|#$R@@379| T@U) (bx@@129 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@353|) TyType) (= (type |#$R@@379|) TyType)) (= (type bx@@129) BoxType)) ($IsBox bx@@129 (Tclass._System.___hPartialFunc1LL |#$T0@@353| |#$R@@379|))) (and (= ($Box ($Unbox HandleTypeType bx@@129)) bx@@129) ($Is ($Unbox HandleTypeType bx@@129) (Tclass._System.___hPartialFunc1LL |#$T0@@353| |#$R@@379|)))) :qid |unknown.0:0| :skolemid |1419| :pattern ( ($IsBox bx@@129 (Tclass._System.___hPartialFunc1LL |#$T0@@353| |#$R@@379|))) )))
(assert (forall ((|#$T0@@354| T@U) (|#$R@@380| T@U) (|f#0@@75| T@U) ) (!  (=> (and (and (= (type |#$T0@@354|) TyType) (= (type |#$R@@380|) TyType)) (= (type |f#0@@75|) HandleTypeType)) (= ($Is |f#0@@75| (Tclass._System.___hPartialFunc1LL |#$T0@@354| |#$R@@380|))  (and ($Is |f#0@@75| (Tclass._System.___hFunc1LL |#$T0@@354| |#$R@@380|)) (forall ((|x0#0@@33| T@U) ) (!  (=> (and (= (type |x0#0@@33|) BoxType) ($IsBox |x0#0@@33| |#$T0@@354|)) (|Set#Equal| (Reads1 |#$T0@@354| |#$R@@380| $OneHeap |f#0@@75| |x0#0@@33|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1420| :no-pattern (type |x0#0@@33|) :no-pattern (U_2_int |x0#0@@33|) :no-pattern (U_2_bool |x0#0@@33|) ))))) :qid |unknown.0:0| :skolemid |1421| :pattern ( ($Is |f#0@@75| (Tclass._System.___hPartialFunc1LL |#$T0@@354| |#$R@@380|))) )))
(assert (forall ((|#$T0@@355| T@U) (|#$R@@381| T@U) (|f#0@@76| T@U) ($h@@57 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@355|) TyType) (= (type |#$R@@381|) TyType)) (= (type |f#0@@76|) HandleTypeType)) (= (type $h@@57) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@76| (Tclass._System.___hPartialFunc1LL |#$T0@@355| |#$R@@381|) $h@@57) ($IsAlloc |f#0@@76| (Tclass._System.___hFunc1LL |#$T0@@355| |#$R@@381|) $h@@57))) :qid |unknown.0:0| :skolemid |1422| :pattern ( ($IsAlloc |f#0@@76| (Tclass._System.___hPartialFunc1LL |#$T0@@355| |#$R@@381|) $h@@57)) )))
(assert (forall ((arg0@@453 T@U) (arg1@@181 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL arg0@@453 arg1@@181)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL| :pattern ( (Tclass._System.___hTotalFunc1LL arg0@@453 arg1@@181)) )))
(assert (forall ((|#$T0@@356| T@U) (|#$R@@382| T@U) ) (!  (=> (and (= (type |#$T0@@356|) TyType) (= (type |#$R@@382|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LL |#$T0@@356| |#$R@@382|)) Tagclass._System.___hTotalFunc1LL) (= (TagFamily (Tclass._System.___hTotalFunc1LL |#$T0@@356| |#$R@@382|)) |tytagFamily$_#TotalFunc1LL|))) :qid |unknown.0:0| :skolemid |1423| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@356| |#$R@@382|)) )))
(assert (forall ((arg0@@454 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_0 arg0@@454)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_0| :pattern ( (Tclass._System.___hTotalFunc1LL_0 arg0@@454)) )))
(assert (forall ((|#$T0@@357| T@U) (|#$R@@383| T@U) ) (!  (=> (and (= (type |#$T0@@357|) TyType) (= (type |#$R@@383|) TyType)) (= (Tclass._System.___hTotalFunc1LL_0 (Tclass._System.___hTotalFunc1LL |#$T0@@357| |#$R@@383|)) |#$T0@@357|)) :qid |unknown.0:0| :skolemid |1424| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@357| |#$R@@383|)) )))
(assert (forall ((arg0@@455 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_1 arg0@@455)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_1| :pattern ( (Tclass._System.___hTotalFunc1LL_1 arg0@@455)) )))
(assert (forall ((|#$T0@@358| T@U) (|#$R@@384| T@U) ) (!  (=> (and (= (type |#$T0@@358|) TyType) (= (type |#$R@@384|) TyType)) (= (Tclass._System.___hTotalFunc1LL_1 (Tclass._System.___hTotalFunc1LL |#$T0@@358| |#$R@@384|)) |#$R@@384|)) :qid |unknown.0:0| :skolemid |1425| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@358| |#$R@@384|)) )))
(assert (forall ((|#$T0@@359| T@U) (|#$R@@385| T@U) (bx@@130 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@359|) TyType) (= (type |#$R@@385|) TyType)) (= (type bx@@130) BoxType)) ($IsBox bx@@130 (Tclass._System.___hTotalFunc1LL |#$T0@@359| |#$R@@385|))) (and (= ($Box ($Unbox HandleTypeType bx@@130)) bx@@130) ($Is ($Unbox HandleTypeType bx@@130) (Tclass._System.___hTotalFunc1LL |#$T0@@359| |#$R@@385|)))) :qid |unknown.0:0| :skolemid |1426| :pattern ( ($IsBox bx@@130 (Tclass._System.___hTotalFunc1LL |#$T0@@359| |#$R@@385|))) )))
(assert (forall ((|#$T0@@360| T@U) (|#$R@@386| T@U) (|f#0@@77| T@U) ) (!  (=> (and (and (= (type |#$T0@@360|) TyType) (= (type |#$R@@386|) TyType)) (= (type |f#0@@77|) HandleTypeType)) (= ($Is |f#0@@77| (Tclass._System.___hTotalFunc1LL |#$T0@@360| |#$R@@386|))  (and ($Is |f#0@@77| (Tclass._System.___hPartialFunc1LL |#$T0@@360| |#$R@@386|)) (forall ((|x0#0@@34| T@U) ) (!  (=> (and (= (type |x0#0@@34|) BoxType) ($IsBox |x0#0@@34| |#$T0@@360|)) (Requires1 |#$T0@@360| |#$R@@386| $OneHeap |f#0@@77| |x0#0@@34|)) :qid |unknown.0:0| :skolemid |1427| :no-pattern (type |x0#0@@34|) :no-pattern (U_2_int |x0#0@@34|) :no-pattern (U_2_bool |x0#0@@34|) ))))) :qid |unknown.0:0| :skolemid |1428| :pattern ( ($Is |f#0@@77| (Tclass._System.___hTotalFunc1LL |#$T0@@360| |#$R@@386|))) )))
(assert (forall ((|#$T0@@361| T@U) (|#$R@@387| T@U) (|f#0@@78| T@U) ($h@@58 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@361|) TyType) (= (type |#$R@@387|) TyType)) (= (type |f#0@@78|) HandleTypeType)) (= (type $h@@58) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@78| (Tclass._System.___hTotalFunc1LL |#$T0@@361| |#$R@@387|) $h@@58) ($IsAlloc |f#0@@78| (Tclass._System.___hPartialFunc1LL |#$T0@@361| |#$R@@387|) $h@@58))) :qid |unknown.0:0| :skolemid |1429| :pattern ( ($IsAlloc |f#0@@78| (Tclass._System.___hTotalFunc1LL |#$T0@@361| |#$R@@387|) $h@@58)) )))
(assert (= (type Tclass.JournalistParsingImpl.__default) TyType))
(assert (= (Tag Tclass.JournalistParsingImpl.__default) Tagclass.JournalistParsingImpl.__default))
(assert (= (TagFamily Tclass.JournalistParsingImpl.__default) tytagFamily$_default))
(assert (forall ((bx@@131 T@U) ) (!  (=> (and (= (type bx@@131) BoxType) ($IsBox bx@@131 Tclass.JournalistParsingImpl.__default)) (and (= ($Box ($Unbox refType bx@@131)) bx@@131) ($Is ($Unbox refType bx@@131) Tclass.JournalistParsingImpl.__default))) :qid |unknown.0:0| :skolemid |1430| :pattern ( ($IsBox bx@@131 Tclass.JournalistParsingImpl.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.JournalistParsingImpl.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.JournalistParsingImpl.__default)))) :qid |unknown.0:0| :skolemid |1431| :pattern ( ($Is $o@@9 Tclass.JournalistParsingImpl.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@59 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@59) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.JournalistParsingImpl.__default $h@@59)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@59 $o@@10) alloc))))) :qid |unknown.0:0| :skolemid |1432| :pattern ( ($IsAlloc $o@@10 Tclass.JournalistParsingImpl.__default $h@@59)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@132 T@U) ) (!  (=> (and (= (type bx@@132) BoxType) ($IsBox bx@@132 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@132)) bx@@132) ($Is ($Unbox intType bx@@132) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1433| :pattern ( ($IsBox bx@@132 Tclass.NativeTypes.byte)) )))
(assert (forall ((arg0@@456 T@U) ) (! (= (type (Tclass.Options.Option arg0@@456)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@456)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (and (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option) (= (TagFamily (Tclass.Options.Option Options.Option$V)) tytagFamily$Option))) :qid |unknown.0:0| :skolemid |1434| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@457 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@457)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@457)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1435| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@133 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@133) BoxType)) ($IsBox bx@@133 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@133)) bx@@133) ($Is ($Unbox DatatypeTypeType bx@@133) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1436| :pattern ( ($IsBox bx@@133 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (= (type Tclass.Journal.JournalEntry) TyType))
(assert (= (Tag Tclass.Journal.JournalEntry) Tagclass.Journal.JournalEntry))
(assert (= (TagFamily Tclass.Journal.JournalEntry) tytagFamily$JournalEntry))
(assert (forall ((bx@@134 T@U) ) (!  (=> (and (= (type bx@@134) BoxType) ($IsBox bx@@134 Tclass.Journal.JournalEntry)) (and (= ($Box ($Unbox DatatypeTypeType bx@@134)) bx@@134) ($Is ($Unbox DatatypeTypeType bx@@134) Tclass.Journal.JournalEntry))) :qid |unknown.0:0| :skolemid |1480| :pattern ( ($IsBox bx@@134 Tclass.Journal.JournalEntry)) )))
(assert (= (type Tclass.KeyType.Key) TyType))
(assert (= (Tag Tclass.KeyType.Key) Tagclass.KeyType.Key))
(assert (= (TagFamily Tclass.KeyType.Key) tytagFamily$Key))
(assert (forall ((bx@@135 T@U) ) (!  (=> (and (= (type bx@@135) BoxType) ($IsBox bx@@135 Tclass.KeyType.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@135)) bx@@135) ($Is ($Unbox (SeqType BoxType) bx@@135) Tclass.KeyType.Key))) :qid |unknown.0:0| :skolemid |1487| :pattern ( ($IsBox bx@@135 Tclass.KeyType.Key)) )))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (= (TagFamily Tclass.ValueType.Value) tytagFamily$Value))
(assert (forall ((bx@@136 T@U) ) (!  (=> (and (= (type bx@@136) BoxType) ($IsBox bx@@136 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@136)) bx@@136) ($Is ($Unbox (SeqType BoxType) bx@@136) Tclass.ValueType.Value))) :qid |unknown.0:0| :skolemid |1489| :pattern ( ($IsBox bx@@136 Tclass.ValueType.Value)) )))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@137 T@U) ) (!  (=> (and (= (type bx@@137) BoxType) ($IsBox bx@@137 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@137)) bx@@137) ($Is ($Unbox intType bx@@137) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1502| :pattern ( ($IsBox bx@@137 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0| T@U) ) (!  (=> (= (type |i#0|) intType) (= ($Is |i#0| Tclass.NativeTypes.sbyte)  (and (<= (LitInt (- 0 128)) (U_2_int |i#0|)) (< (U_2_int |i#0|) 128)))) :qid |unknown.0:0| :skolemid |1503| :pattern ( ($Is |i#0| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@0| T@U) ($h@@60 T@U) ) (!  (=> (and (= (type |i#0@@0|) intType) (= (type $h@@60) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@60)) :qid |unknown.0:0| :skolemid |1504| :pattern ( ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@60)) )))
(assert (forall ((|i#0@@1| T@U) ) (!  (=> (= (type |i#0@@1|) intType) (= ($Is |i#0@@1| Tclass.NativeTypes.byte)  (and (<= (LitInt 0) (U_2_int |i#0@@1|)) (< (U_2_int |i#0@@1|) 256)))) :qid |unknown.0:0| :skolemid |1505| :pattern ( ($Is |i#0@@1| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@2| T@U) ($h@@61 T@U) ) (!  (=> (and (= (type |i#0@@2|) intType) (= (type $h@@61) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@61)) :qid |unknown.0:0| :skolemid |1506| :pattern ( ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@61)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@138 T@U) ) (!  (=> (and (= (type bx@@138) BoxType) ($IsBox bx@@138 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@138)) bx@@138) ($Is ($Unbox intType bx@@138) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1507| :pattern ( ($IsBox bx@@138 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@3| T@U) ) (!  (=> (= (type |i#0@@3|) intType) (= ($Is |i#0@@3| Tclass.NativeTypes.int16)  (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@3|)) (< (U_2_int |i#0@@3|) 32768)))) :qid |unknown.0:0| :skolemid |1508| :pattern ( ($Is |i#0@@3| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@4| T@U) ($h@@62 T@U) ) (!  (=> (and (= (type |i#0@@4|) intType) (= (type $h@@62) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@62)) :qid |unknown.0:0| :skolemid |1509| :pattern ( ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@62)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@139 T@U) ) (!  (=> (and (= (type bx@@139) BoxType) ($IsBox bx@@139 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@139)) bx@@139) ($Is ($Unbox intType bx@@139) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1510| :pattern ( ($IsBox bx@@139 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@5| T@U) ) (!  (=> (= (type |i#0@@5|) intType) (= ($Is |i#0@@5| Tclass.NativeTypes.uint16)  (and (<= (LitInt 0) (U_2_int |i#0@@5|)) (< (U_2_int |i#0@@5|) 65536)))) :qid |unknown.0:0| :skolemid |1511| :pattern ( ($Is |i#0@@5| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@6| T@U) ($h@@63 T@U) ) (!  (=> (and (= (type |i#0@@6|) intType) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@63)) :qid |unknown.0:0| :skolemid |1512| :pattern ( ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@63)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@140 T@U) ) (!  (=> (and (= (type bx@@140) BoxType) ($IsBox bx@@140 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@140)) bx@@140) ($Is ($Unbox intType bx@@140) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1513| :pattern ( ($IsBox bx@@140 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@7| T@U) ) (!  (=> (= (type |i#0@@7|) intType) (= ($Is |i#0@@7| Tclass.NativeTypes.int32)  (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@7|)) (< (U_2_int |i#0@@7|) 2147483648)))) :qid |unknown.0:0| :skolemid |1514| :pattern ( ($Is |i#0@@7| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@8| T@U) ($h@@64 T@U) ) (!  (=> (and (= (type |i#0@@8|) intType) (= (type $h@@64) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@64)) :qid |unknown.0:0| :skolemid |1515| :pattern ( ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@64)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@141 T@U) ) (!  (=> (and (= (type bx@@141) BoxType) ($IsBox bx@@141 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@141)) bx@@141) ($Is ($Unbox intType bx@@141) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1516| :pattern ( ($IsBox bx@@141 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@9| T@U) ) (!  (=> (= (type |i#0@@9|) intType) (= ($Is |i#0@@9| Tclass.NativeTypes.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@9|)) (< (U_2_int |i#0@@9|) 4294967296)))) :qid |unknown.0:0| :skolemid |1517| :pattern ( ($Is |i#0@@9| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@10| T@U) ($h@@65 T@U) ) (!  (=> (and (= (type |i#0@@10|) intType) (= (type $h@@65) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@65)) :qid |unknown.0:0| :skolemid |1518| :pattern ( ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@65)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@142 T@U) ) (!  (=> (and (= (type bx@@142) BoxType) ($IsBox bx@@142 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@142)) bx@@142) ($Is ($Unbox intType bx@@142) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1519| :pattern ( ($IsBox bx@@142 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@11| T@U) ) (!  (=> (= (type |i#0@@11|) intType) (= ($Is |i#0@@11| Tclass.NativeTypes.int64)  (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@11|)) (< (U_2_int |i#0@@11|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1520| :pattern ( ($Is |i#0@@11| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@12| T@U) ($h@@66 T@U) ) (!  (=> (and (= (type |i#0@@12|) intType) (= (type $h@@66) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@66)) :qid |unknown.0:0| :skolemid |1521| :pattern ( ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@66)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@143 T@U) ) (!  (=> (and (= (type bx@@143) BoxType) ($IsBox bx@@143 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@143)) bx@@143) ($Is ($Unbox intType bx@@143) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1522| :pattern ( ($IsBox bx@@143 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (= ($Is |i#0@@13| Tclass.NativeTypes.uint64)  (and (<= (LitInt 0) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1523| :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@14| T@U) ($h@@67 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@67) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@67)) :qid |unknown.0:0| :skolemid |1524| :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@67)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@144 T@U) ) (!  (=> (and (= (type bx@@144) BoxType) ($IsBox bx@@144 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@144)) bx@@144) ($Is ($Unbox intType bx@@144) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1525| :pattern ( ($IsBox bx@@144 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (= ($Is |i#0@@15| Tclass.NativeTypes.nat8)  (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 128)))) :qid |unknown.0:0| :skolemid |1526| :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@16| T@U) ($h@@68 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@68) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@68)) :qid |unknown.0:0| :skolemid |1527| :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@68)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@145 T@U) ) (!  (=> (and (= (type bx@@145) BoxType) ($IsBox bx@@145 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@145)) bx@@145) ($Is ($Unbox intType bx@@145) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1528| :pattern ( ($IsBox bx@@145 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (= ($Is |i#0@@17| Tclass.NativeTypes.nat16)  (and (<= (LitInt 0) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768)))) :qid |unknown.0:0| :skolemid |1529| :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@18| T@U) ($h@@69 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@69) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@69)) :qid |unknown.0:0| :skolemid |1530| :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@69)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@146 T@U) ) (!  (=> (and (= (type bx@@146) BoxType) ($IsBox bx@@146 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@146)) bx@@146) ($Is ($Unbox intType bx@@146) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1531| :pattern ( ($IsBox bx@@146 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (= ($Is |i#0@@19| Tclass.NativeTypes.nat32)  (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 2147483648)))) :qid |unknown.0:0| :skolemid |1532| :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@20| T@U) ($h@@70 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@70) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@70)) :qid |unknown.0:0| :skolemid |1533| :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@70)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@147 T@U) ) (!  (=> (and (= (type bx@@147) BoxType) ($IsBox bx@@147 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@147)) bx@@147) ($Is ($Unbox intType bx@@147) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1534| :pattern ( ($IsBox bx@@147 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (= ($Is |i#0@@21| Tclass.NativeTypes.nat64)  (and (<= (LitInt 0) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |1535| :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@22| T@U) ($h@@71 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@71) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@71)) :qid |unknown.0:0| :skolemid |1536| :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@71)) )))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@148 T@U) ) (!  (=> (and (= (type bx@@148) BoxType) ($IsBox bx@@148 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@148)) bx@@148) ($Is ($Unbox intType bx@@148) Tclass.NativeTypes.uint128))) :qid |unknown.0:0| :skolemid |1537| :pattern ( ($IsBox bx@@148 Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@23| T@U) ) (!  (=> (= (type |i#0@@23|) intType) (= ($Is |i#0@@23| Tclass.NativeTypes.uint128)  (and (<= (LitInt 0) (U_2_int |i#0@@23|)) (< (U_2_int |i#0@@23|) 340282366920938463463374607431768211456)))) :qid |unknown.0:0| :skolemid |1538| :pattern ( ($Is |i#0@@23| Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@24| T@U) ($h@@72 T@U) ) (!  (=> (and (= (type |i#0@@24|) intType) (= (type $h@@72) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint128 $h@@72)) :qid |unknown.0:0| :skolemid |1539| :pattern ( ($IsAlloc |i#0@@24| Tclass.NativeTypes.uint128 $h@@72)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@149 T@U) ) (!  (=> (and (= (type bx@@149) BoxType) ($IsBox bx@@149 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@149)) bx@@149) ($Is ($Unbox refType bx@@149) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1540| :pattern ( ($IsBox bx@@149 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.NativeTypes.__default)  (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1541| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@73 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@73) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@73)  (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@73 $o@@12) alloc))))) :qid |unknown.0:0| :skolemid |1542| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@73)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (forall ((|s#0| T@U) ) (!  (=> (= (type |s#0|) (SeqType BoxType)) (= ($Is |s#0| Tclass.KeyType.Key)  (and ($Is |s#0| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0|) (LitInt 1024))))) :qid |unknown.0:0| :skolemid |1543| :pattern ( ($Is |s#0| Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@0| T@U) ($h@@74 T@U) ) (!  (=> (and (= (type |s#0@@0|) (SeqType BoxType)) (= (type $h@@74) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@0| Tclass.KeyType.Key $h@@74) ($IsAlloc |s#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@74))) :qid |unknown.0:0| :skolemid |1544| :pattern ( ($IsAlloc |s#0@@0| Tclass.KeyType.Key $h@@74)) )))
(assert (= (type Tclass.KeyType.__default) TyType))
(assert (= (Tag Tclass.KeyType.__default) Tagclass.KeyType.__default))
(assert (= (TagFamily Tclass.KeyType.__default) tytagFamily$_default))
(assert (forall ((bx@@150 T@U) ) (!  (=> (and (= (type bx@@150) BoxType) ($IsBox bx@@150 Tclass.KeyType.__default)) (and (= ($Box ($Unbox refType bx@@150)) bx@@150) ($Is ($Unbox refType bx@@150) Tclass.KeyType.__default))) :qid |unknown.0:0| :skolemid |1545| :pattern ( ($IsBox bx@@150 Tclass.KeyType.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (= ($Is $o@@13 Tclass.KeyType.__default)  (or (= $o@@13 null) (= (dtype $o@@13) Tclass.KeyType.__default)))) :qid |unknown.0:0| :skolemid |1546| :pattern ( ($Is $o@@13 Tclass.KeyType.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@75 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@75) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@14 Tclass.KeyType.__default $h@@75)  (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@75 $o@@14) alloc))))) :qid |unknown.0:0| :skolemid |1547| :pattern ( ($IsAlloc $o@@14 Tclass.KeyType.__default $h@@75)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) KeyType.__default.MaxLen) (< KeyType.__default.MaxLen 18446744073709551616)))))
(assert (= |KeyType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert (forall ((|s#0@@1| T@U) ) (!  (=> (= (type |s#0@@1|) (SeqType BoxType)) (= ($Is |s#0@@1| Tclass.ValueType.Value)  (and ($Is |s#0@@1| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@1|) (LitInt 1024))))) :qid |unknown.0:0| :skolemid |1548| :pattern ( ($Is |s#0@@1| Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@2| T@U) ($h@@76 T@U) ) (!  (=> (and (= (type |s#0@@2|) (SeqType BoxType)) (= (type $h@@76) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@2| Tclass.ValueType.Value $h@@76) ($IsAlloc |s#0@@2| (TSeq Tclass.NativeTypes.byte) $h@@76))) :qid |unknown.0:0| :skolemid |1549| :pattern ( ($IsAlloc |s#0@@2| Tclass.ValueType.Value $h@@76)) )))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (= (TagFamily Tclass.ValueType.__default) tytagFamily$_default))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (= ($Is $o@@15 Tclass.ValueType.__default)  (or (= $o@@15 null) (= (dtype $o@@15) Tclass.ValueType.__default)))) :qid |unknown.0:0| :skolemid |1550| :pattern ( ($Is $o@@15 Tclass.ValueType.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@77 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@16 Tclass.ValueType.__default $h@@77)  (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@77 $o@@16) alloc))))) :qid |unknown.0:0| :skolemid |1551| :pattern ( ($IsAlloc $o@@16 Tclass.ValueType.__default $h@@77)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) ValueType.__default.MaxLen) (< ValueType.__default.MaxLen 18446744073709551616)))))
(assert (= |ValueType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0| T@U) ) (!  (=> (and (= (type |v#0|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0|) ($Is |v#0| Tclass.ValueType.Value))) (<= (LitInt 0) (ValueType.__default.Len |v#0|))) :qid |KeyTypesdfy.20:15| :skolemid |1552| :pattern ( (ValueType.__default.Len |v#0|)) ))))
(assert (forall ((|v#0@@0| T@U) ) (!  (=> (and (= (type |v#0@@0|) (SeqType BoxType)) ($Is |v#0@@0| Tclass.ValueType.Value)) (= (|ValueType.__default.Len#requires| |v#0@@0|) true)) :qid |KeyTypesdfy.20:15| :skolemid |1553| :pattern ( (|ValueType.__default.Len#requires| |v#0@@0|)) )))
(assert  (=> true (forall ((|v#0@@1| T@U) ) (!  (=> (and (= (type |v#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@1|) ($Is |v#0@@1| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@1|) (|Seq#Length| |v#0@@1|))) :qid |KeyTypesdfy.20:15| :skolemid |1554| :pattern ( (ValueType.__default.Len |v#0@@1|)) ))))
(assert  (=> true (forall ((|v#0@@2| T@U) ) (!  (=> (and (= (type |v#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@2|)) ($Is |v#0@@2| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@2|)) (|Seq#Length| (Lit |v#0@@2|)))) :qid |KeyTypesdfy.20:15| :weight 3 :skolemid |1555| :pattern ( (ValueType.__default.Len (Lit |v#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@3| T@U) ) (!  (=> (and (= (type |s#0@@3|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@3|) ($Is |s#0@@3| (TSeq Tclass.NativeTypes.byte)))) true) :qid |KeyTypesdfy.22:36| :skolemid |1556| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@3|)) ))))
(assert (forall ((|s#0@@4| T@U) ) (!  (=> (and (= (type |s#0@@4|) (SeqType BoxType)) ($Is |s#0@@4| (TSeq Tclass.NativeTypes.byte))) (= (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@4|) true)) :qid |KeyTypesdfy.22:36| :skolemid |1557| :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@4|)) )))
(assert  (=> true (forall ((|s#0@@5| T@U) ) (!  (=> (and (= (type |s#0@@5|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@5|) ($Is |s#0@@5| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring |s#0@@5|) (<= (|Seq#Length| |s#0@@5|) (LitInt ValueType.__default.MaxLen))))) :qid |KeyTypesdfy.22:36| :skolemid |1558| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@6| T@U) ) (!  (=> (and (= (type |s#0@@6|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@6|)) ($Is |s#0@@6| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring (Lit |s#0@@6|)) (<= (|Seq#Length| (Lit |s#0@@6|)) (LitInt ValueType.__default.MaxLen))))) :qid |KeyTypesdfy.22:36| :weight 3 :skolemid |1559| :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@6|))) ))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |KeyTypesdfy.27:37| :skolemid |1560| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|)) ))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true)) :qid |KeyTypesdfy.27:37| :skolemid |1561| :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)) )))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@25| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@25|) (< |i#0@@25| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@25|)))) :qid |KeyTypesdfy.29:12| :skolemid |1563| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@25|))) )) (= (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#0@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@26|) (< |i#0@@26| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@26|)))) :qid |KeyTypesdfy.29:12| :skolemid |1562| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@26|))) ))))) :qid |KeyTypesdfy.27:37| :skolemid |1564| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|)) ))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1|)))) :qid |KeyTypesdfy.29:12| :skolemid |1566| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1|))) )) (= (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@0|)))) :qid |KeyTypesdfy.29:12| :skolemid |1565| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@0|))) ))))) :qid |KeyTypesdfy.27:37| :weight 3 :skolemid |1567| :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|))) ))))
(assert (= (type Tclass.LinearMaybe.__default) TyType))
(assert (= (Tag Tclass.LinearMaybe.__default) Tagclass.LinearMaybe.__default))
(assert (= (TagFamily Tclass.LinearMaybe.__default) tytagFamily$_default))
(assert (forall ((bx@@151 T@U) ) (!  (=> (and (= (type bx@@151) BoxType) ($IsBox bx@@151 Tclass.LinearMaybe.__default)) (and (= ($Box ($Unbox refType bx@@151)) bx@@151) ($Is ($Unbox refType bx@@151) Tclass.LinearMaybe.__default))) :qid |unknown.0:0| :skolemid |1568| :pattern ( ($IsBox bx@@151 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (= ($Is $o@@17 Tclass.LinearMaybe.__default)  (or (= $o@@17 null) (= (dtype $o@@17) Tclass.LinearMaybe.__default)))) :qid |unknown.0:0| :skolemid |1569| :pattern ( ($Is $o@@17 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@78 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@18 Tclass.LinearMaybe.__default $h@@78)  (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@18) alloc))))) :qid |unknown.0:0| :skolemid |1570| :pattern ( ($IsAlloc $o@@18 Tclass.LinearMaybe.__default $h@@78)) )))
(assert (forall ((arg0@@458 T@U) ) (! (= (type (|#$maybe| arg0@@458)) TyType) :qid |funType:#$maybe| :pattern ( (|#$maybe| arg0@@458)) )))
(assert  (=> true (forall ((LinearMaybe._default.has$A T@U) (|m#0| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A) TyType) (= (type |m#0|) BoxType)) (or (|LinearMaybe.__default.has#canCall| LinearMaybe._default.has$A |m#0|) ($IsBox |m#0| (|#$maybe| LinearMaybe._default.has$A)))) true) :qid |unknown.0:0| :skolemid |1571| :pattern ( (LinearMaybe.__default.has LinearMaybe._default.has$A |m#0|)) ))))
(assert (forall ((LinearMaybe._default.has$A@@0 T@U) (|m#0@@0| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A@@0) TyType) (= (type |m#0@@0|) BoxType)) ($IsBox |m#0@@0| (|#$maybe| LinearMaybe._default.has$A@@0))) (= (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@0|) true)) :qid |unknown.0:0| :skolemid |1572| :pattern ( (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@0|)) )))
(assert (forall ((arg0@@459 T@U) (arg1@@182 T@U) ) (! (= (type (LinearMaybe.__default.read arg0@@459 arg1@@182)) BoxType) :qid |funType:LinearMaybe.__default.read| :pattern ( (LinearMaybe.__default.read arg0@@459 arg1@@182)) )))
(assert  (=> true (forall ((LinearMaybe._default.read$A T@U) (|m#0@@1| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A) TyType) (= (type |m#0@@1|) BoxType)) (or (|LinearMaybe.__default.read#canCall| LinearMaybe._default.read$A |m#0@@1|) ($IsBox |m#0@@1| (|#$maybe| LinearMaybe._default.read$A)))) ($IsBox (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@1|) LinearMaybe._default.read$A)) :qid |unknown.0:0| :skolemid |1573| :pattern ( (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@1|)) ))))
(assert (forall ((LinearMaybe._default.read$A@@0 T@U) (|m#0@@2| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A@@0) TyType) (= (type |m#0@@2|) BoxType)) ($IsBox |m#0@@2| (|#$maybe| LinearMaybe._default.read$A@@0))) (= (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@2|) true)) :qid |unknown.0:0| :skolemid |1574| :pattern ( (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@2|)) )))
(assert (forall ((arg0@@460 T@U) (arg1@@183 T@U) ) (! (= (type (LinearMaybe.__default.peek arg0@@460 arg1@@183)) BoxType) :qid |funType:LinearMaybe.__default.peek| :pattern ( (LinearMaybe.__default.peek arg0@@460 arg1@@183)) )))
(assert  (=> true (forall ((LinearMaybe._default.peek$A T@U) (|m#0@@3| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A) TyType) (= (type |m#0@@3|) BoxType)) (or (|LinearMaybe.__default.peek#canCall| LinearMaybe._default.peek$A |m#0@@3|) (and ($IsBox |m#0@@3| (|#$maybe| LinearMaybe._default.peek$A)) (LinearMaybe.__default.has LinearMaybe._default.peek$A |m#0@@3|)))) (and (= (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@3|) (LinearMaybe.__default.read LinearMaybe._default.peek$A |m#0@@3|)) ($IsBox (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@3|) LinearMaybe._default.peek$A))) :qid |unknown.0:0| :skolemid |1575| :pattern ( (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@3|)) ))))
(assert (forall ((LinearMaybe._default.peek$A@@0 T@U) (|m#0@@4| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A@@0) TyType) (= (type |m#0@@4|) BoxType)) ($IsBox |m#0@@4| (|#$maybe| LinearMaybe._default.peek$A@@0))) (= (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@4|) (LinearMaybe.__default.has LinearMaybe._default.peek$A@@0 |m#0@@4|))) :qid |unknown.0:0| :skolemid |1576| :pattern ( (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@4|)) )))
(assert (forall ((arg0@@461 T@U) (arg1@@184 T@U) ) (! (= (type (LinearMaybe.__default.unwrap arg0@@461 arg1@@184)) BoxType) :qid |funType:LinearMaybe.__default.unwrap| :pattern ( (LinearMaybe.__default.unwrap arg0@@461 arg1@@184)) )))
(assert  (=> true (forall ((LinearMaybe._default.unwrap$A T@U) (|m#0@@5| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A) TyType) (= (type |m#0@@5|) BoxType)) (or (|LinearMaybe.__default.unwrap#canCall| LinearMaybe._default.unwrap$A |m#0@@5|) (and ($IsBox |m#0@@5| (|#$maybe| LinearMaybe._default.unwrap$A)) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A |m#0@@5|)))) (and (= (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@5|) (LinearMaybe.__default.read LinearMaybe._default.unwrap$A |m#0@@5|)) ($IsBox (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@5|) LinearMaybe._default.unwrap$A))) :qid |unknown.0:0| :skolemid |1577| :pattern ( (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@5|)) ))))
(assert (forall ((LinearMaybe._default.unwrap$A@@0 T@U) (|m#0@@6| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A@@0) TyType) (= (type |m#0@@6|) BoxType)) ($IsBox |m#0@@6| (|#$maybe| LinearMaybe._default.unwrap$A@@0))) (= (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@6|) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A@@0 |m#0@@6|))) :qid |unknown.0:0| :skolemid |1578| :pattern ( (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@6|)) )))
(assert (forall ((arg0@@462 T@U) (arg1@@185 T@U) (arg2@@117 T@U) ) (! (= (type (LinearMaybe.__default.give arg0@@462 arg1@@185 arg2@@117)) BoxType) :qid |funType:LinearMaybe.__default.give| :pattern ( (LinearMaybe.__default.give arg0@@462 arg1@@185 arg2@@117)) )))
(assert (forall ((LinearMaybe._default.give$A T@U) ($ly T@U) (|a#0@@1| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A) TyType) (= (type $ly) LayerTypeType)) (= (type |a#0@@1|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly) |a#0@@1|) (LinearMaybe.__default.give LinearMaybe._default.give$A $ly |a#0@@1|))) :qid |unknown.0:0| :skolemid |1579| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly) |a#0@@1|)) )))
(assert  (and (forall ((arg0@@463 T@U) ) (! (= (type (AsFuelBottom arg0@@463)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@463)) )) (= (type $LZ) LayerTypeType)))
(assert (forall ((LinearMaybe._default.give$A@@0 T@U) ($ly@@0 T@U) (|a#0@@2| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A@@0) TyType) (= (type $ly@@0) LayerTypeType)) (= (type |a#0@@2|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $ly@@0 |a#0@@2|) (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $LZ |a#0@@2|))) :qid |unknown.0:0| :skolemid |1580| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 (AsFuelBottom $ly@@0) |a#0@@2|)) )))
(assert  (=> true (forall ((LinearMaybe._default.give$A@@1 T@U) ($ly@@1 T@U) (|a#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@1) TyType) (= (type $ly@@1) LayerTypeType)) (= (type |a#0@@3|) BoxType)) (or (|LinearMaybe.__default.give#canCall| LinearMaybe._default.give$A@@1 |a#0@@3|) ($IsBox |a#0@@3| LinearMaybe._default.give$A@@1))) (and (and (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|)) (= (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|)) |a#0@@3|)) (forall ((|x#0@@1| T@U) ) (!  (=> (= (type |x#0@@1|) BoxType) (=> (and ($IsBox |x#0@@1| (|#$maybe| LinearMaybe._default.give$A@@1)) (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 |x#0@@1|) (= |a#0@@3| (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|)))) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|) |x#0@@1|))) :qid |LinearMaybesdfy.25:20| :skolemid |1581| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|))) ))) ($IsBox (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|) (|#$maybe| LinearMaybe._default.give$A@@1)))) :qid |unknown.0:0| :skolemid |1582| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@1 |a#0@@3|)) ))))
(assert (forall ((LinearMaybe._default.give$A@@2 T@U) ($ly@@2 T@U) (|a#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@2) TyType) (= (type $ly@@2) LayerTypeType)) (= (type |a#0@@4|) BoxType)) ($IsBox |a#0@@4| LinearMaybe._default.give$A@@2)) (= (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@2 |a#0@@4|) true)) :qid |unknown.0:0| :skolemid |1583| :pattern ( (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@2 |a#0@@4|)) )))
(assert (forall ((arg0@@464 T@U) ) (! (= (type (LinearMaybe.__default.empty arg0@@464)) BoxType) :qid |funType:LinearMaybe.__default.empty| :pattern ( (LinearMaybe.__default.empty arg0@@464)) )))
(assert  (=> true (forall ((LinearMaybe._default.empty$A T@U) ) (!  (=> (and (= (type LinearMaybe._default.empty$A) TyType) true) (and (not (LinearMaybe.__default.has LinearMaybe._default.empty$A (LinearMaybe.__default.empty LinearMaybe._default.empty$A))) ($IsBox (LinearMaybe.__default.empty LinearMaybe._default.empty$A) (|#$maybe| LinearMaybe._default.empty$A)))) :qid |unknown.0:0| :skolemid |1584| :pattern ( (LinearMaybe.__default.empty LinearMaybe._default.empty$A)) ))))
(assert (forall ((LinearMaybe._default.empty$A@@0 T@U) ) (!  (=> (= (type LinearMaybe._default.empty$A@@0) TyType) (= (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0) true)) :qid |unknown.0:0| :skolemid |1585| :pattern ( (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0)) )))
(assert (forall ((arg0@@465 T@U) (arg1@@186 T@U) ) (! (= (type (LinearMaybe.__default.discard arg0@@465 arg1@@186)) DatatypeTypeType) :qid |funType:LinearMaybe.__default.discard| :pattern ( (LinearMaybe.__default.discard arg0@@465 arg1@@186)) )))
(assert  (=> true (forall ((LinearMaybe._default.discard$A T@U) (|m#0@@7| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A) TyType) (= (type |m#0@@7|) BoxType)) (or (|LinearMaybe.__default.discard#canCall| LinearMaybe._default.discard$A |m#0@@7|) (and ($IsBox |m#0@@7| (|#$maybe| LinearMaybe._default.discard$A)) (not (LinearMaybe.__default.has LinearMaybe._default.discard$A |m#0@@7|))))) ($Is (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@7|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1586| :pattern ( (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@7|)) ))))
(assert (forall ((LinearMaybe._default.discard$A@@0 T@U) (|m#0@@8| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A@@0) TyType) (= (type |m#0@@8|) BoxType)) ($IsBox |m#0@@8| (|#$maybe| LinearMaybe._default.discard$A@@0))) (= (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@8|)  (not (LinearMaybe.__default.has LinearMaybe._default.discard$A@@0 |m#0@@8|)))) :qid |unknown.0:0| :skolemid |1587| :pattern ( (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@8|)) )))
(assert (forall ((arg0@@466 T@U) (arg1@@187 Bool) (arg2@@118 T@U) ) (! (= (type (LinearMaybe.__default.imagine arg0@@466 arg1@@187 arg2@@118)) BoxType) :qid |funType:LinearMaybe.__default.imagine| :pattern ( (LinearMaybe.__default.imagine arg0@@466 arg1@@187 arg2@@118)) )))
(assert  (=> true (forall ((LinearMaybe._default.imagine$A T@U) (|h#0| Bool) (|a#0@@5| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A) TyType) (= (type |a#0@@5|) BoxType)) (or (|LinearMaybe.__default.imagine#canCall| LinearMaybe._default.imagine$A |h#0| |a#0@@5|) ($IsBox |a#0@@5| LinearMaybe._default.imagine$A))) (and (and (= (LinearMaybe.__default.has LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|)) |h#0|) (= (LinearMaybe.__default.read LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|)) |a#0@@5|)) ($IsBox (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|) (|#$maybe| LinearMaybe._default.imagine$A)))) :qid |unknown.0:0| :skolemid |1588| :pattern ( (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@5|)) ))))
(assert (forall ((LinearMaybe._default.imagine$A@@0 T@U) (|h#0@@0| Bool) (|a#0@@6| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A@@0) TyType) (= (type |a#0@@6|) BoxType)) ($IsBox |a#0@@6| LinearMaybe._default.imagine$A@@0)) (= (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@6|) true)) :qid |unknown.0:0| :skolemid |1589| :pattern ( (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@6|)) )))
(assert (= (type Tclass.LinearExtern.__default) TyType))
(assert (= (Tag Tclass.LinearExtern.__default) Tagclass.LinearExtern.__default))
(assert (= (TagFamily Tclass.LinearExtern.__default) tytagFamily$_default))
(assert (forall ((bx@@152 T@U) ) (!  (=> (and (= (type bx@@152) BoxType) ($IsBox bx@@152 Tclass.LinearExtern.__default)) (and (= ($Box ($Unbox refType bx@@152)) bx@@152) ($Is ($Unbox refType bx@@152) Tclass.LinearExtern.__default))) :qid |unknown.0:0| :skolemid |1590| :pattern ( ($IsBox bx@@152 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (= ($Is $o@@19 Tclass.LinearExtern.__default)  (or (= $o@@19 null) (= (dtype $o@@19) Tclass.LinearExtern.__default)))) :qid |unknown.0:0| :skolemid |1591| :pattern ( ($Is $o@@19 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@79 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@79) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@20 Tclass.LinearExtern.__default $h@@79)  (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@79 $o@@20) alloc))))) :qid |unknown.0:0| :skolemid |1592| :pattern ( ($IsAlloc $o@@20 Tclass.LinearExtern.__default $h@@79)) )))
(assert (forall ((arg0@@467 T@U) (arg1@@188 T@U) (arg2@@119 Int) ) (! (= (type (LinearExtern.__default.seq_get arg0@@467 arg1@@188 arg2@@119)) BoxType) :qid |funType:LinearExtern.__default.seq_get| :pattern ( (LinearExtern.__default.seq_get arg0@@467 arg1@@188 arg2@@119)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_get$A T@U) (|s#0@@7| T@U) (|i#0@@27| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A) TyType) (= (type |s#0@@7|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_get#canCall| LinearSequence_s._default.seq_get$A |s#0@@7| |i#0@@27|) (and (and ($Is |s#0@@7| (TSeq LinearSequence_s._default.seq_get$A)) (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| 18446744073709551616))) (< |i#0@@27| (|Seq#Length| |s#0@@7|))))) (and (= (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@7| |i#0@@27|) (|Seq#Index| |s#0@@7| |i#0@@27|)) ($IsBox (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@7| |i#0@@27|) LinearSequence_s._default.seq_get$A))) :qid |unknown.0:0| :skolemid |1593| :pattern ( (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@7| |i#0@@27|)) ))))
(assert (forall ((LinearSequence_s._default.seq_get$A@@0 T@U) (|s#0@@8| T@U) (|i#0@@28| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A@@0) TyType) (= (type |s#0@@8|) (SeqType BoxType))) (and ($Is |s#0@@8| (TSeq LinearSequence_s._default.seq_get$A@@0)) (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| 18446744073709551616)))) (= (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@8| |i#0@@28|) (< |i#0@@28| (|Seq#Length| |s#0@@8|)))) :qid |unknown.0:0| :skolemid |1594| :pattern ( (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@8| |i#0@@28|)) )))
(assert (forall ((arg0@@468 T@U) (arg1@@189 T@U) (arg2@@120 Int) (arg3@@79 T@U) ) (! (= (type (LinearExtern.__default.seq_set arg0@@468 arg1@@189 arg2@@120 arg3@@79)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_set| :pattern ( (LinearExtern.__default.seq_set arg0@@468 arg1@@189 arg2@@120 arg3@@79)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_set$A T@U) (|s1#0| T@U) (|i#0@@29| Int) (|a#0@@7| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A) TyType) (= (type |s1#0|) (SeqType BoxType))) (= (type |a#0@@7|) BoxType)) (or (|LinearExtern.__default.seq_set#canCall| LinearSequence_s._default.seq_set$A |s1#0| |i#0@@29| |a#0@@7|) (and (and (and ($Is |s1#0| (TSeq LinearSequence_s._default.seq_set$A)) (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| 18446744073709551616))) ($IsBox |a#0@@7| LinearSequence_s._default.seq_set$A)) (< |i#0@@29| (|Seq#Length| |s1#0|))))) (and (|Seq#Equal| (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@29| |a#0@@7|) (|Seq#Update| |s1#0| |i#0@@29| |a#0@@7|)) ($Is (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@29| |a#0@@7|) (TSeq LinearSequence_s._default.seq_set$A)))) :qid |unknown.0:0| :skolemid |1595| :pattern ( (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@29| |a#0@@7|)) ))))
(assert (forall ((LinearSequence_s._default.seq_set$A@@0 T@U) (|s1#0@@0| T@U) (|i#0@@30| Int) (|a#0@@8| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A@@0) TyType) (= (type |s1#0@@0|) (SeqType BoxType))) (= (type |a#0@@8|) BoxType)) (and (and ($Is |s1#0@@0| (TSeq LinearSequence_s._default.seq_set$A@@0)) (and (<= (LitInt 0) |i#0@@30|) (< |i#0@@30| 18446744073709551616))) ($IsBox |a#0@@8| LinearSequence_s._default.seq_set$A@@0))) (= (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@30| |a#0@@8|) (< |i#0@@30| (|Seq#Length| |s1#0@@0|)))) :qid |unknown.0:0| :skolemid |1596| :pattern ( (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@30| |a#0@@8|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_length$A T@U) (|s#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A) TyType) (= (type |s#0@@9|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_length#canCall| LinearSequence_s._default.seq_length$A |s#0@@9|) (and ($Is |s#0@@9| (TSeq LinearSequence_s._default.seq_length$A)) (<= (|Seq#Length| |s#0@@9|) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@9|) (|Seq#Length| |s#0@@9|)) (and (<= (LitInt 0) (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@9|)) (< (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@9|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1597| :pattern ( (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@9|)) ))))
(assert (forall ((LinearSequence_s._default.seq_length$A@@0 T@U) (|s#0@@10| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A@@0) TyType) (= (type |s#0@@10|) (SeqType BoxType))) ($Is |s#0@@10| (TSeq LinearSequence_s._default.seq_length$A@@0))) (= (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@10|) (<= (|Seq#Length| |s#0@@10|) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |1598| :pattern ( (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@10|)) )))
(assert (forall ((arg0@@469 T@U) ) (! (= (type (LinearExtern.__default.seq_empty arg0@@469)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_empty| :pattern ( (LinearExtern.__default.seq_empty arg0@@469)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_empty$A T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_empty$A) TyType) true) (and (= (|Seq#Length| (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) (LitInt 0)) ($Is (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A) (TSeq LinearSequence_s._default.seq_empty$A)))) :qid |unknown.0:0| :skolemid |1599| :pattern ( (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) ))))
(assert (forall ((LinearSequence_s._default.seq_empty$A@@0 T@U) ) (!  (=> (= (type LinearSequence_s._default.seq_empty$A@@0) TyType) (= (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0) true)) :qid |unknown.0:0| :skolemid |1600| :pattern ( (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0)) )))
(assert (forall ((arg0@@470 T@U) (arg1@@190 Int) (arg2@@121 T@U) ) (! (= (type (LinearExtern.__default.seq_alloc arg0@@470 arg1@@190 arg2@@121)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_alloc| :pattern ( (LinearExtern.__default.seq_alloc arg0@@470 arg1@@190 arg2@@121)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_alloc$A T@U) (|length#0| Int) (|a#0@@9| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_alloc$A) TyType) (= (type |a#0@@9|) BoxType)) (or (|LinearExtern.__default.seq_alloc#canCall| LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|) (and (and (<= (LitInt 0) |length#0|) (< |length#0| 18446744073709551616)) ($IsBox |a#0@@9| LinearSequence_s._default.seq_alloc$A)))) (and (and (= (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|)) |length#0|) (forall ((|i#0@@31| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@31|) (< |i#0@@31| (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|)))) (= (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|) |i#0@@31|) |a#0@@9|))) :qid |LinearSequencesdfy.32:20| :skolemid |1601| :pattern ( (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|) |i#0@@31|)) ))) ($Is (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|) (TSeq LinearSequence_s._default.seq_alloc$A)))) :qid |unknown.0:0| :skolemid |1602| :pattern ( (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0| |a#0@@9|)) ))))
(assert (forall ((LinearSequence_s._default.seq_alloc$A@@0 T@U) (|length#0@@0| Int) (|a#0@@10| T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_alloc$A@@0) TyType) (= (type |a#0@@10|) BoxType)) (=> (and (and (<= (LitInt 0) |length#0@@0|) (< |length#0@@0| 18446744073709551616)) ($IsBox |a#0@@10| LinearSequence_s._default.seq_alloc$A@@0)) (= (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@0| |a#0@@10|) true))) :qid |unknown.0:0| :skolemid |1603| :pattern ( (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@0| |a#0@@10|)) )))
(assert (forall ((arg0@@471 T@U) (arg1@@191 T@U) ) (! (= (type (LinearExtern.__default.seq_free arg0@@471 arg1@@191)) DatatypeTypeType) :qid |funType:LinearExtern.__default.seq_free| :pattern ( (LinearExtern.__default.seq_free arg0@@471 arg1@@191)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_free$A T@U) (|s#0@@11| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A) TyType) (= (type |s#0@@11|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_free#canCall| LinearSequence_s._default.seq_free$A |s#0@@11|) ($Is |s#0@@11| (TSeq LinearSequence_s._default.seq_free$A)))) ($Is (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@11|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1604| :pattern ( (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@11|)) ))))
(assert (forall ((LinearSequence_s._default.seq_free$A@@0 T@U) (|s#0@@12| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A@@0) TyType) (= (type |s#0@@12|) (SeqType BoxType))) ($Is |s#0@@12| (TSeq LinearSequence_s._default.seq_free$A@@0))) (= (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@12|) true)) :qid |unknown.0:0| :skolemid |1605| :pattern ( (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@12|)) )))
(assert (forall ((arg0@@472 T@U) (arg1@@192 T@U) ) (! (= (type (LinearExtern.__default.seq_unleash arg0@@472 arg1@@192)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_unleash| :pattern ( (LinearExtern.__default.seq_unleash arg0@@472 arg1@@192)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_unleash$A T@U) (|s1#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A) TyType) (= (type |s1#0@@1|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_unleash#canCall| LinearSequence_s._default.seq_unleash$A |s1#0@@1|) ($Is |s1#0@@1| (TSeq LinearSequence_s._default.seq_unleash$A)))) (and (|Seq#Equal| |s1#0@@1| (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ($Is (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|) (TSeq LinearSequence_s._default.seq_unleash$A)))) :qid |unknown.0:0| :skolemid |1606| :pattern ( (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.seq_unleash$A@@0 T@U) (|s1#0@@2| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A@@0) TyType) (= (type |s1#0@@2|) (SeqType BoxType))) ($Is |s1#0@@2| (TSeq LinearSequence_s._default.seq_unleash$A@@0))) (= (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|) true)) :qid |unknown.0:0| :skolemid |1607| :pattern ( (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|)) )))
(assert  (and (forall ((arg0@@473 T@U) (arg1@@193 T@U) ) (! (= (type (LinearExtern.__default.lseqs__raw arg0@@473 arg1@@193)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseqs__raw| :pattern ( (LinearExtern.__default.lseqs__raw arg0@@473 arg1@@193)) )) (forall ((arg0@@474 T@U) ) (! (= (type (|#$lseq| arg0@@474)) TyType) :qid |funType:#$lseq| :pattern ( (|#$lseq| arg0@@474)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseqs_raw$A T@U) (|l#0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A) TyType) (= (type |l#0|) BoxType)) (or (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseqs_raw$A |l#0|) ($IsBox |l#0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A)))) ($Is (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|) (TSeq (|#$maybe| LinearSequence_s._default.lseqs_raw$A)))) :qid |unknown.0:0| :skolemid |1608| :pattern ( (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseqs_raw$A@@0 T@U) (|l#0@@0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A@@0) TyType) (= (type |l#0@@0|) BoxType)) ($IsBox |l#0@@0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A@@0))) (= (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|) true)) :qid |unknown.0:0| :skolemid |1609| :pattern ( (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|)) )))
(assert (forall ((arg0@@475 T@U) (arg1@@194 T@U) ) (! (= (type (LinearExtern.__default.lseq__has arg0@@475 arg1@@194)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseq__has| :pattern ( (LinearExtern.__default.lseq__has arg0@@475 arg1@@194)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A T@U) (|l#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_has$A) TyType) (= (type |l#0@@1|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A |l#0@@1|) ($IsBox |l#0@@1| (|#$lseq| LinearSequence_s._default.lseq_has$A)))) (and (= (|Seq#Length| (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A |l#0@@1|))) ($Is (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|) (TSeq TBool)))) :qid |unknown.0:0| :skolemid |1610| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_has$A@@0 T@U) ($Heap T@U) (|l#0@@2| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@0) TyType) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |l#0@@2|) BoxType)) (and ($IsGoodHeap $Heap) ($IsBox |l#0@@2| (|#$lseq| LinearSequence_s._default.lseq_has$A@@0)))) (= (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) true)) :qid |unknown.0:0| :skolemid |1611| :pattern ( (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) ($IsGoodHeap $Heap)) )))
(assert  (and (and (and (and (forall ((arg0@@476 T@U) ) (! (= (type (|lambda#16| arg0@@476)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@476)) )) (forall ((arg0@@477 T@U) (arg1@@195 T@U) ) (! (= (type (|lambda#12| arg0@@477 arg1@@195)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@477 arg1@@195)) ))) (forall ((arg0@@478 T@U) (arg1@@196 Int) (arg2@@122 Int) ) (! (= (type (|lambda#13| arg0@@478 arg1@@196 arg2@@122)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@478 arg1@@196 arg2@@122)) ))) (forall ((arg0@@479 T@U) ) (! (= (type (|lambda#15| arg0@@479)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@479)) ))) (forall ((arg0@@480 Bool) ) (! (= (type (|lambda#14| arg0@@480)) (MapType0Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@480)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@1 T@U) ($Heap@@0 T@U) (|l#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@1) TyType) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |l#0@@3|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (and ($IsGoodHeap $Heap@@0) ($IsBox |l#0@@3| (|#$lseq| LinearSequence_s._default.lseq_has$A@@1))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (forall ((|$l#1#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#1#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (=> (and (<= (LitInt 0) |$l#1#i#0|) (< |$l#1#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@1 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) |$l#1#i#0|))))) :qid |unknown.0:0| :skolemid |1612| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|Seq#Create| TBool $Heap@@0 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (Lit (AtLayer (|lambda#16| (Handle1 (|lambda#12| LinearSequence_s._default.lseq_has$A@@1 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (|lambda#13| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|))) (|lambda#15| (SetRef_to_SetBox (|lambda#14| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :skolemid |1613| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) ($IsGoodHeap $Heap@@0)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@2 T@U) ($Heap@@1 T@U) (|l#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@2) TyType) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |l#0@@4|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (and ($IsGoodHeap $Heap@@1) ($IsBox |l#0@@4| (|#$lseq| LinearSequence_s._default.lseq_has$A@@2))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (forall ((|$l#3#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#3#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (=> (and (<= (LitInt 0) |$l#3#i#0|) (< |$l#3#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@2 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) |$l#3#i#0|))))) :qid |unknown.0:0| :skolemid |1614| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|Seq#Create| TBool $Heap@@1 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (Lit (AtLayer (|lambda#16| (Handle1 (|lambda#12| LinearSequence_s._default.lseq_has$A@@2 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (|lambda#13| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)))) (|lambda#15| (SetRef_to_SetBox (|lambda#14| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :weight 3 :skolemid |1615| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) ($IsGoodHeap $Heap@@1)) ))))
(assert (forall ((arg0@@481 T@U) (arg1@@197 T@U) ) (! (= (type (LinearExtern.__default.imagine__lseq__raw arg0@@481 arg1@@197)) BoxType) :qid |funType:LinearExtern.__default.imagine__lseq__raw| :pattern ( (LinearExtern.__default.imagine__lseq__raw arg0@@481 arg1@@197)) )))
(assert  (=> true (forall ((LinearSequence_s._default.imagine_lseq_raw$A T@U) (|s#0@@13| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A) TyType) (= (type |s#0@@13|) (SeqType BoxType))) (or (|LinearExtern.__default.imagine__lseq__raw#canCall| LinearSequence_s._default.imagine_lseq_raw$A |s#0@@13|) ($Is |s#0@@13| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A))))) (and (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.imagine_lseq_raw$A (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@13|)) |s#0@@13|) ($IsBox (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@13|) (|#$lseq| LinearSequence_s._default.imagine_lseq_raw$A)))) :qid |unknown.0:0| :skolemid |1616| :pattern ( (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@13|)) ))))
(assert (forall ((LinearSequence_s._default.imagine_lseq_raw$A@@0 T@U) (|s#0@@14| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A@@0) TyType) (= (type |s#0@@14|) (SeqType BoxType))) ($Is |s#0@@14| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A@@0)))) (= (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@14|) true)) :qid |unknown.0:0| :skolemid |1617| :pattern ( (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@14|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_length_raw$A T@U) (|s#0@@15| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A) TyType) (= (type |s#0@@15|) BoxType)) (or (|LinearExtern.__default.lseq_length_raw#canCall| LinearSequence_s._default.lseq_length_raw$A |s#0@@15|) (and ($IsBox |s#0@@15| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A)) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|)) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|))) (and (<= (LitInt 0) (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|)) (< (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1618| :pattern ( (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@15|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_length_raw$A@@0 T@U) (|s#0@@16| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A@@0) TyType) (= (type |s#0@@16|) BoxType)) ($IsBox |s#0@@16| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A@@0))) (= (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@16|) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@16|)) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |1619| :pattern ( (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@16|)) )))
(assert (forall ((arg0@@482 T@U) (arg1@@198 Int) ) (! (= (type (LinearExtern.__default.lseq_alloc_raw arg0@@482 arg1@@198)) BoxType) :qid |funType:LinearExtern.__default.lseq_alloc_raw| :pattern ( (LinearExtern.__default.lseq_alloc_raw arg0@@482 arg1@@198)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_alloc_raw$A T@U) (|length#0@@1| Int) ) (!  (=> (and (= (type LinearSequence_s._default.lseq_alloc_raw$A) TyType) (or (|LinearExtern.__default.lseq_alloc_raw#canCall| LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|) (and (<= (LitInt 0) |length#0@@1|) (< |length#0@@1| 18446744073709551616)))) (and (and (= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|))) |length#0@@1|) (forall ((|i#0@@32| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@32|) (< |i#0@@32| |length#0@@1|)) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_alloc_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|)) |i#0@@32|)))) :qid |LinearSequencesdfy.90:22| :skolemid |1620| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|)) |i#0@@32|)) ))) ($IsBox (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|) (|#$lseq| LinearSequence_s._default.lseq_alloc_raw$A)))) :qid |unknown.0:0| :skolemid |1621| :pattern ( (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_alloc_raw$A@@0 T@U) (|length#0@@2| Int) ) (!  (=> (= (type LinearSequence_s._default.lseq_alloc_raw$A@@0) TyType) (=> (and (<= (LitInt 0) |length#0@@2|) (< |length#0@@2| 18446744073709551616)) (= (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@2|) true))) :qid |unknown.0:0| :skolemid |1622| :pattern ( (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@2|)) )))
(assert (forall ((arg0@@483 T@U) (arg1@@199 T@U) ) (! (= (type (LinearExtern.__default.lseq_free_raw arg0@@483 arg1@@199)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_free_raw| :pattern ( (LinearExtern.__default.lseq_free_raw arg0@@483 arg1@@199)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_free_raw$A T@U) (|s#0@@17| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A) TyType) (= (type |s#0@@17|) BoxType)) (or (|LinearExtern.__default.lseq_free_raw#canCall| LinearSequence_s._default.lseq_free_raw$A |s#0@@17|) (and ($IsBox |s#0@@17| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A)) (forall ((|i#0@@33| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@33|) (< |i#0@@33| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|) |i#0@@33|)))) :qid |LinearSequencesdfy.93:23| :skolemid |1623| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|) |i#0@@33|)) ))))) ($Is (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |1624| :pattern ( (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@17|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_free_raw$A@@0 T@U) (|s#0@@18| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A@@0) TyType) (= (type |s#0@@18|) BoxType)) ($IsBox |s#0@@18| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A@@0))) (= (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|) (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A@@0 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|) |i#1@@1|)))) :qid |LinearSequencesdfy.93:23| :skolemid |1625| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|) |i#1@@1|)) )))) :qid |unknown.0:0| :skolemid |1626| :pattern ( (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@18|)) )))
(assert (forall ((arg0@@484 T@U) (arg1@@200 T@U) (arg2@@123 Int) (arg3@@80 T@U) ) (! (= (type (LinearExtern.__default.lseq_swap_raw_fun arg0@@484 arg1@@200 arg2@@123 arg3@@80)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_swap_raw_fun| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun arg0@@484 arg1@@200 arg2@@123 arg3@@80)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A T@U) (|s1#0@@3| T@U) (|i#0@@34| Int) (|a1#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A) TyType) (= (type |s1#0@@3|) BoxType)) (= (type |a1#0|) BoxType)) (or (|LinearExtern.__default.lseq_swap_raw_fun#canCall| LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|) (and (and (and ($IsBox |s1#0@@3| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A)) (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| 18446744073709551616))) ($IsBox |a1#0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))) (< |i#0@@34| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|)))))) (and (and (= (_System.Tuple2OLL._1 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|)) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@34|)) (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A (_System.Tuple2OLL._0 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|))) (|Seq#Update| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@34| |a1#0|))) ($Is (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A) (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))))) :qid |unknown.0:0| :skolemid |1627| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@34| |a1#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A@@0 T@U) (|s1#0@@4| T@U) (|i#0@@35| Int) (|a1#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A@@0) TyType) (= (type |s1#0@@4|) BoxType)) (= (type |a1#0@@0|) BoxType)) (and (and ($IsBox |s1#0@@4| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)) (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| 18446744073709551616))) ($IsBox |a1#0@@0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)))) (= (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@35| |a1#0@@0|) (< |i#0@@35| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4|))))) :qid |unknown.0:0| :skolemid |1628| :pattern ( (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@35| |a1#0@@0|)) )))
(assert (forall ((arg0@@485 T@U) (arg1@@201 T@U) (arg2@@124 Int) ) (! (= (type (LinearExtern.__default.lseq_share_raw arg0@@485 arg1@@201 arg2@@124)) BoxType) :qid |funType:LinearExtern.__default.lseq_share_raw| :pattern ( (LinearExtern.__default.lseq_share_raw arg0@@485 arg1@@201 arg2@@124)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_share_raw$A T@U) (|s#0@@19| T@U) (|i#0@@36| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A) TyType) (= (type |s#0@@19|) BoxType)) (or (|LinearExtern.__default.lseq_share_raw#canCall| LinearSequence_s._default.lseq_share_raw$A |s#0@@19| |i#0@@36|) (and (and ($IsBox |s#0@@19| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A)) (and (<= (LitInt 0) |i#0@@36|) (< |i#0@@36| 18446744073709551616))) (< |i#0@@36| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19|)))))) (and (= (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19| |i#0@@36|) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19|) |i#0@@36|)) ($IsBox (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19| |i#0@@36|) (|#$maybe| LinearSequence_s._default.lseq_share_raw$A)))) :qid |unknown.0:0| :skolemid |1629| :pattern ( (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@19| |i#0@@36|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_share_raw$A@@0 T@U) (|s#0@@20| T@U) (|i#0@@37| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A@@0) TyType) (= (type |s#0@@20|) BoxType)) (and ($IsBox |s#0@@20| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A@@0)) (and (<= (LitInt 0) |i#0@@37|) (< |i#0@@37| 18446744073709551616)))) (= (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@20| |i#0@@37|) (< |i#0@@37| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@20|))))) :qid |unknown.0:0| :skolemid |1630| :pattern ( (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@20| |i#0@@37|)) )))
(assert (= (type Tclass.SequencesLite.__default) TyType))
(assert (= (Tag Tclass.SequencesLite.__default) Tagclass.SequencesLite.__default))
(assert (= (TagFamily Tclass.SequencesLite.__default) tytagFamily$_default))
(assert (forall ((bx@@153 T@U) ) (!  (=> (and (= (type bx@@153) BoxType) ($IsBox bx@@153 Tclass.SequencesLite.__default)) (and (= ($Box ($Unbox refType bx@@153)) bx@@153) ($Is ($Unbox refType bx@@153) Tclass.SequencesLite.__default))) :qid |unknown.0:0| :skolemid |1631| :pattern ( ($IsBox bx@@153 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (= ($Is $o@@21 Tclass.SequencesLite.__default)  (or (= $o@@21 null) (= (dtype $o@@21) Tclass.SequencesLite.__default)))) :qid |unknown.0:0| :skolemid |1632| :pattern ( ($Is $o@@21 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@80 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@80) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@22 Tclass.SequencesLite.__default $h@@80)  (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@80 $o@@22) alloc))))) :qid |unknown.0:0| :skolemid |1633| :pattern ( ($IsAlloc $o@@22 Tclass.SequencesLite.__default $h@@80)) )))
(assert (forall ((arg0@@486 T@U) (arg1@@202 T@U) ) (! (= (type (SequencesLite.__default.Last arg0@@486 arg1@@202)) BoxType) :qid |funType:SequencesLite.__default.Last| :pattern ( (SequencesLite.__default.Last arg0@@486 arg1@@202)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E |run#0|) (and ($Is |run#0| (TSeq SequencesLite._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|) SequencesLite._default.Last$E)) :qid |unknown.0:0| :skolemid |1634| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|)) ))))
(assert (forall ((SequencesLite._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq SequencesLite._default.Last$E@@0))) (= (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0))) :qid |unknown.0:0| :skolemid |1635| :pattern ( (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq SequencesLite._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |1636| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq SequencesLite._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1637| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@487 T@U) (arg1@@203 T@U) ) (! (= (type (SequencesLite.__default.DropLast arg0@@487 arg1@@203)) (SeqType BoxType)) :qid |funType:SequencesLite.__default.DropLast| :pattern ( (SequencesLite.__default.DropLast arg0@@487 arg1@@203)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq SequencesLite._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|) (TSeq SequencesLite._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1638| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((SequencesLite._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq SequencesLite._default.DropLast$E@@0))) (= (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0))) :qid |unknown.0:0| :skolemid |1639| :pattern ( (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq SequencesLite._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |1640| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq SequencesLite._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1641| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@23 T@U) ) (!  (=> (= (type d@@23) DatatypeTypeType) (= (Options.Option.None_q d@@23) (= (DatatypeCtorId d@@23) |##Options.Option.None|))) :qid |unknown.0:0| :skolemid |1642| :pattern ( (Options.Option.None_q d@@23)) )))
(assert (forall ((d@@24 T@U) ) (!  (=> (and (= (type d@@24) DatatypeTypeType) (Options.Option.None_q d@@24)) (= d@@24 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1643| :pattern ( (Options.Option.None_q d@@24)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1644| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@81 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@81) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@81)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@81)) :qid |unknown.0:0| :skolemid |1645| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@81)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@488 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@488)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@488)) )))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsdfy.5:36| :skolemid |1646| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@25 T@U) ) (!  (=> (= (type d@@25) DatatypeTypeType) (= (Options.Option.Some_q d@@25) (= (DatatypeCtorId d@@25) |##Options.Option.Some|))) :qid |unknown.0:0| :skolemid |1647| :pattern ( (Options.Option.Some_q d@@25)) )))
(assert (forall ((d@@26 T@U) ) (!  (=> (and (= (type d@@26) DatatypeTypeType) (Options.Option.Some_q d@@26)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@26 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsdfy.5:36| :skolemid |1648| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1649| :pattern ( (Options.Option.Some_q d@@26)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (= ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4))) :qid |unknown.0:0| :skolemid |1650| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@82 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@82) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@82)) (= ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@82) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@82))) :qid |unknown.0:0| :skolemid |1651| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@82)) )))
(assert (forall ((arg0@@489 T@U) ) (! (= (type (Options.Option.value arg0@@489)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@489)) )))
(assert (forall ((d@@27 T@U) (Options.Option$V@@6 T@U) ($h@@83 T@U) ) (!  (=> (and (and (and (= (type d@@27) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@83) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@83) (and (Options.Option.Some_q d@@27) ($IsAlloc d@@27 (Tclass.Options.Option Options.Option$V@@6) $h@@83)))) ($IsAllocBox (Options.Option.value d@@27) Options.Option$V@@6 $h@@83)) :qid |unknown.0:0| :skolemid |1652| :pattern ( ($IsAllocBox (Options.Option.value d@@27) Options.Option$V@@6 $h@@83)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ) (!  (=> (= (type |a#9#0#0@@0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0@@0|)) (Lit (|#Options.Option.Some| |a#9#0#0@@0|)))) :qid |Optionsdfy.5:36| :skolemid |1653| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0@@0|))) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0@@0|)) |a#10#0#0@@0|)) :qid |Optionsdfy.5:36| :skolemid |1654| :pattern ( (|#Options.Option.Some| |a#10#0#0@@0|)) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) BoxType) (< (BoxRank |a#11#0#0@@0|) (DtRank (|#Options.Option.Some| |a#11#0#0@@0|)))) :qid |Optionsdfy.5:36| :skolemid |1655| :pattern ( (|#Options.Option.Some| |a#11#0#0@@0|)) )))
(assert (forall ((d@@28 T@U) ) (!  (=> (and (= (type d@@28) DatatypeTypeType) (|$IsA#Options.Option| d@@28)) (or (Options.Option.None_q d@@28) (Options.Option.Some_q d@@28))) :qid |unknown.0:0| :skolemid |1656| :pattern ( (|$IsA#Options.Option| d@@28)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@29 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@29) DatatypeTypeType)) ($Is d@@29 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@29) (Options.Option.Some_q d@@29))) :qid |unknown.0:0| :skolemid |1657| :pattern ( (Options.Option.Some_q d@@29) ($Is d@@29 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@29) ($Is d@@29 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@132 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (Options.Option.None_q a@@132) (Options.Option.None_q b@@69))) (= (|Options.Option#Equal| a@@132 b@@69) true)) :qid |unknown.0:0| :skolemid |1658| :pattern ( (|Options.Option#Equal| a@@132 b@@69) (Options.Option.None_q a@@132)) :pattern ( (|Options.Option#Equal| a@@132 b@@69) (Options.Option.None_q b@@69)) )))
(assert (forall ((a@@133 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@133) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (Options.Option.Some_q a@@133) (Options.Option.Some_q b@@70))) (= (|Options.Option#Equal| a@@133 b@@70) (= (Options.Option.value a@@133) (Options.Option.value b@@70)))) :qid |unknown.0:0| :skolemid |1659| :pattern ( (|Options.Option#Equal| a@@133 b@@70) (Options.Option.Some_q a@@133)) :pattern ( (|Options.Option#Equal| a@@133 b@@70) (Options.Option.Some_q b@@70)) )))
(assert (forall ((a@@134 T@U) (b@@71 T@U) ) (!  (=> (and (= (type a@@134) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (= (|Options.Option#Equal| a@@134 b@@71) (= a@@134 b@@71))) :qid |unknown.0:0| :skolemid |1660| :pattern ( (|Options.Option#Equal| a@@134 b@@71)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (= (TagFamily Tclass.Options.__default) tytagFamily$_default))
(assert (forall ((bx@@154 T@U) ) (!  (=> (and (= (type bx@@154) BoxType) ($IsBox bx@@154 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@154)) bx@@154) ($Is ($Unbox refType bx@@154) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1661| :pattern ( ($IsBox bx@@154 Tclass.Options.__default)) )))
(assert (forall (($o@@23 T@U) ) (!  (=> (= (type $o@@23) refType) (= ($Is $o@@23 Tclass.Options.__default)  (or (= $o@@23 null) (= (dtype $o@@23) Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1662| :pattern ( ($Is $o@@23 Tclass.Options.__default)) )))
(assert (forall (($o@@24 T@U) ($h@@84 T@U) ) (!  (=> (and (= (type $o@@24) refType) (= (type $h@@84) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@24 Tclass.Options.__default $h@@84)  (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@84 $o@@24) alloc))))) :qid |unknown.0:0| :skolemid |1663| :pattern ( ($IsAlloc $o@@24 Tclass.Options.__default $h@@84)) )))
(assert (forall ((arg0@@490 T@U) (arg1@@204 T@U) (arg2@@125 T@U) (arg3@@81 T@U) (arg4@@59 T@U) ) (! (= (type (Options.__default.MapOption arg0@@490 arg1@@204 arg2@@125 arg3@@81 arg4@@59)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@490 arg1@@204 arg2@@125 arg3@@81 arg4@@59)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@79| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@79|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@79|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@79| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@25 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@25) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@25 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@79| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@25))))) (= (MapType1Select (MapType0Select $h0 $o@@25) $f) (MapType1Select (MapType0Select $h1 $o@@25) $f)))) :qid |unknown.0:0| :skolemid |1664| :no-pattern (type $o@@25) :no-pattern (type $f) :no-pattern (U_2_int $o@@25) :no-pattern (U_2_bool $o@@25) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@79|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@79|))) :qid |unknown.0:0| :skolemid |1665| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@79|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@0| T@U) (|f#0@@80| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@80|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@80|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@80| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |f#0@@80| (Options.Option.value |opt#0@@0|)))))) (and (and (= (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@80|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@80|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@80|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |f#0@@80| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@80|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1666| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@80|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@1| T@U) (|f#0@@81| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@81|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@81| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (= (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@81|)  (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |f#0@@81| (Options.Option.value |opt#0@@1|))))) :qid |unknown.0:0| :skolemid |1667| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@81|) ($IsGoodHeap $Heap@@3)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@2| T@U) (|f#0@@82| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@82|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@82|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@82| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |f#0@@82| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@82|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#0@@3| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |f#0@@82| |v#0@@3|)))))) :qid |unknown.0:0| :skolemid |1668| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@82|) ($IsGoodHeap $Heap@@4)) ))))
(assert (forall ((arg0@@491 T@U) (arg1@@205 T@U) (arg2@@126 T@U) (arg3@@82 T@U) (arg4@@60 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@491 arg1@@205 arg2@@126 arg3@@82 arg4@@60)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@491 arg1@@205 arg2@@126 arg3@@82 arg4@@60)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@83| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@83|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@83|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@83| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@26 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@26) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@26 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@83| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@26))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@26) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@26) $f@@0)))) :qid |unknown.0:0| :skolemid |1669| :no-pattern (type $o@@26) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@26) :no-pattern (U_2_bool $o@@26) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@83|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@83|))) :qid |unknown.0:0| :skolemid |1670| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@83|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@5 T@U) (|opt#0@@4| T@U) (|f#0@@84| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@84|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@84|) (and (and (and ($IsGoodHeap $Heap@@5) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@84| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@84| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@84| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@84|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@84| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@84|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@84| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@84|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1671| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@84|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@6 T@U) (|opt#0@@5| T@U) (|f#0@@85| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@85|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@6) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@85| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (= (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@85|)  (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@6 |f#0@@85| (Options.Option.value |opt#0@@5|))))) :qid |unknown.0:0| :skolemid |1672| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@85|) ($IsGoodHeap $Heap@@6)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@7 T@U) (|opt#0@@6| T@U) (|f#0@@86| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@86|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@86|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@86| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@7 |f#0@@86| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@86|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#0@@4| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@7 |f#0@@86| |v#0@@4|)))))) :qid |unknown.0:0| :skolemid |1673| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@86|) ($IsGoodHeap $Heap@@7)) ))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (= (TagFamily Tclass.Mathematics.__default) tytagFamily$_default))
(assert (forall ((bx@@155 T@U) ) (!  (=> (and (= (type bx@@155) BoxType) ($IsBox bx@@155 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@155)) bx@@155) ($Is ($Unbox refType bx@@155) Tclass.Mathematics.__default))) :qid |unknown.0:0| :skolemid |1674| :pattern ( ($IsBox bx@@155 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@27 T@U) ) (!  (=> (= (type $o@@27) refType) (= ($Is $o@@27 Tclass.Mathematics.__default)  (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Mathematics.__default)))) :qid |unknown.0:0| :skolemid |1675| :pattern ( ($Is $o@@27 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@28 T@U) ($h@@85 T@U) ) (!  (=> (and (= (type $o@@28) refType) (= (type $h@@85) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@28 Tclass.Mathematics.__default $h@@85)  (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@85 $o@@28) alloc))))) :qid |unknown.0:0| :skolemid |1676| :pattern ( ($IsAlloc $o@@28 Tclass.Mathematics.__default $h@@85)) )))
(assert  (=> true (forall ((|a#0@@11| Int) (|b#0@@1| Int) ) (!  (=> true true) :qid |mathematicsidfy.6:15| :skolemid |1677| :pattern ( (Mathematics.__default.min |a#0@@11| |b#0@@1|)) ))))
(assert (forall ((|a#0@@12| Int) (|b#0@@2| Int) ) (! (= (|Mathematics.__default.min#requires| |a#0@@12| |b#0@@2|) true) :qid |mathematicsidfy.6:15| :skolemid |1678| :pattern ( (|Mathematics.__default.min#requires| |a#0@@12| |b#0@@2|)) )))
(assert  (=> true (forall ((|a#0@@13| Int) (|b#0@@3| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@13| |b#0@@3|) (ite (< |a#0@@13| |b#0@@3|) |a#0@@13| |b#0@@3|))) :qid |mathematicsidfy.6:15| :skolemid |1679| :pattern ( (Mathematics.__default.min |a#0@@13| |b#0@@3|)) ))))
(assert  (=> true (forall ((|a#0@@14| Int) (|b#0@@4| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@14|) (LitInt |b#0@@4|)) (ite (< |a#0@@14| |b#0@@4|) |a#0@@14| |b#0@@4|))) :qid |mathematicsidfy.6:15| :weight 3 :skolemid |1680| :pattern ( (Mathematics.__default.min (LitInt |a#0@@14|) (LitInt |b#0@@4|))) ))))
(assert  (=> true (forall ((|a#0@@15| Int) (|b#0@@5| Int) ) (!  (=> true true) :qid |mathematicsidfy.14:15| :skolemid |1681| :pattern ( (Mathematics.__default.max |a#0@@15| |b#0@@5|)) ))))
(assert (forall ((|a#0@@16| Int) (|b#0@@6| Int) ) (! (= (|Mathematics.__default.max#requires| |a#0@@16| |b#0@@6|) true) :qid |mathematicsidfy.14:15| :skolemid |1682| :pattern ( (|Mathematics.__default.max#requires| |a#0@@16| |b#0@@6|)) )))
(assert  (=> true (forall ((|a#0@@17| Int) (|b#0@@7| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@17| |b#0@@7|) (ite (< |a#0@@17| |b#0@@7|) |b#0@@7| |a#0@@17|))) :qid |mathematicsidfy.14:15| :skolemid |1683| :pattern ( (Mathematics.__default.max |a#0@@17| |b#0@@7|)) ))))
(assert  (=> true (forall ((|a#0@@18| Int) (|b#0@@8| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@18|) (LitInt |b#0@@8|)) (ite (< |a#0@@18| |b#0@@8|) |b#0@@8| |a#0@@18|))) :qid |mathematicsidfy.14:15| :weight 3 :skolemid |1684| :pattern ( (Mathematics.__default.max (LitInt |a#0@@18|) (LitInt |b#0@@8|))) ))))
(assert (forall ((arg0@@492 T@U) (arg1@@206 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@492 arg1@@206)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.Set| :pattern ( (Mathematics.__default.Set arg0@@492 arg1@@206)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T))) :qid |unknown.0:0| :skolemid |1685| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|)) ))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (= (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true)) :qid |unknown.0:0| :skolemid |1686| :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)) )))
(assert (forall ((arg0@@493 T@U) (arg1@@207 T@U) (arg2@@127 Int) ) (! (= (type (|lambda#22| arg0@@493 arg1@@207 arg2@@127)) (MapType0Type BoxType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@493 arg1@@207 arg2@@127)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#22| Mathematics._default.Set$T@@1 |ms#0@@1| 0))) :qid |unknown.0:0| :skolemid |1687| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|)) ))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#22| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1688| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|))) ))))
(assert (forall ((arg0@@494 T@U) (arg1@@208 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@494 arg1@@208)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.ISet| :pattern ( (Mathematics.__default.ISet arg0@@494 arg1@@208)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T))) :qid |unknown.0:0| :skolemid |1689| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|)) ))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (= (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true)) :qid |unknown.0:0| :skolemid |1690| :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)) )))
(assert (forall ((arg0@@495 T@U) (arg1@@209 T@U) ) (! (= (type (|lambda#24| arg0@@495 arg1@@209)) (MapType0Type BoxType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@495 arg1@@209)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#24| Mathematics._default.ISet$T@@1 |ms#0@@5|))) :qid |unknown.0:0| :skolemid |1691| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|)) ))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#24| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |1692| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (= (TagFamily Tclass.Sequences.__default) tytagFamily$_default))
(assert (forall ((bx@@156 T@U) ) (!  (=> (and (= (type bx@@156) BoxType) ($IsBox bx@@156 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@156)) bx@@156) ($Is ($Unbox refType bx@@156) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |1693| :pattern ( ($IsBox bx@@156 Tclass.Sequences.__default)) )))
(assert (forall (($o@@29 T@U) ) (!  (=> (= (type $o@@29) refType) (= ($Is $o@@29 Tclass.Sequences.__default)  (or (= $o@@29 null) (= (dtype $o@@29) Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |1694| :pattern ( ($Is $o@@29 Tclass.Sequences.__default)) )))
(assert (forall (($o@@30 T@U) ($h@@86 T@U) ) (!  (=> (and (= (type $o@@30) refType) (= (type $h@@86) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@30 Tclass.Sequences.__default $h@@86)  (or (= $o@@30 null) (U_2_bool (MapType1Select (MapType0Select $h@@86 $o@@30) alloc))))) :qid |unknown.0:0| :skolemid |1695| :pattern ( ($IsAlloc $o@@30 Tclass.Sequences.__default $h@@86)) )))
(assert (forall ((arg0@@496 T@U) (arg1@@210 T@U) ) (! (= (type (Sequences.__default.Last arg0@@496 arg1@@210)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@496 arg1@@210)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0@@7|) (and ($Is |run#0@@7| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0@@7|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |1696| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Last$E@@0))) (= (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|) (> (|Seq#Length| |run#0@@8|) 0))) :qid |unknown.0:0| :skolemid |1697| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@9|) (and ($Is |run#0@@9| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@9|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|) (|Seq#Index| |run#0@@9| (- (|Seq#Length| |run#0@@9|) 1)))) :qid |unknown.0:0| :skolemid |1698| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (and ($Is |run#0@@10| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@10|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (|Seq#Index| (Lit |run#0@@10|) (- (|Seq#Length| (Lit |run#0@@10|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1699| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@497 T@U) (arg1@@211 T@U) ) (! (= (type (Sequences.__default.FirstOpt arg0@@497 arg1@@211)) DatatypeTypeType) :qid |funType:Sequences.__default.FirstOpt| :pattern ( (Sequences.__default.FirstOpt arg0@@497 arg1@@211)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.FirstOpt$E)))) ($Is (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|) (Tclass.Options.Option Sequences._default.FirstOpt$E))) :qid |unknown.0:0| :skolemid |1700| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|)) ))))
(assert (forall ((Sequences._default.FirstOpt$E@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.FirstOpt$E@@0))) (= (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|) true)) :qid |unknown.0:0| :skolemid |1701| :pattern ( (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.FirstOpt$E@@1)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|) (ite (= (|Seq#Length| |run#0@@13|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| |run#0@@13| (LitInt 0)))))) :qid |unknown.0:0| :skolemid |1702| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.FirstOpt$E@@2)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) (ite (= (|Seq#Length| (Lit |run#0@@14|)) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| (Lit |run#0@@14|) (LitInt 0)))))) :qid |unknown.0:0| :weight 3 :skolemid |1703| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((arg0@@498 T@U) (arg1@@212 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@498 arg1@@212)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@498 arg1@@212)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@15|) (and ($Is |run#0@@15| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@15|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1704| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@16|) (SeqType BoxType))) ($Is |run#0@@16| (TSeq Sequences._default.DropLast$E@@0))) (= (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|) (> (|Seq#Length| |run#0@@16|) 0))) :qid |unknown.0:0| :skolemid |1705| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@17|) (and ($Is |run#0@@17| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@17|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|) (|Seq#Take| |run#0@@17| (- (|Seq#Length| |run#0@@17|) 1)))) :qid |unknown.0:0| :skolemid |1706| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (and ($Is |run#0@@18| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@18|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (|Seq#Take| (Lit |run#0@@18|) (- (|Seq#Length| (Lit |run#0@@18|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1707| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|))) ))))
(assert (forall ((arg0@@499 T@U) (arg1@@213 T@U) ) (! (= (type (Sequences.__default.Set arg0@@499 arg1@@213)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@499 arg1@@213)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@19|) ($Is |run#0@@19| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |1708| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@20|) (SeqType BoxType))) ($Is |run#0@@20| (TSeq Sequences._default.Set$T@@0))) (= (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|) true)) :qid |unknown.0:0| :skolemid |1709| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@21|) ($Is |run#0@@21| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|) (|lambda#22| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@21|) 0))) :qid |unknown.0:0| :skolemid |1710| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@22|)) ($Is |run#0@@22| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|)) (|lambda#22| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@22|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1711| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|))) ))))
(assert (forall ((arg0@@500 T@U) (arg1@@214 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@500 arg1@@214)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@500 arg1@@214)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@23|) ($Is |run#0@@23| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |1712| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@24|) (SeqType BoxType))) ($Is |run#0@@24| (TSeq Sequences._default.ISet$T@@0))) (= (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|) true)) :qid |unknown.0:0| :skolemid |1713| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@25|) ($Is |run#0@@25| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|) (|lambda#22| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@25|) 0))) :qid |unknown.0:0| :skolemid |1714| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) ($Is |run#0@@26| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) (|lambda#22| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@26|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1715| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@3 T@U) (|a#0@@19| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@3) LayerTypeType)) (= (type |a#0@@19|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@3) |a#0@@19|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@3 |a#0@@19|))) :qid |unknown.0:0| :skolemid |1716| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@3) |a#0@@19|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@4 T@U) (|a#0@@20| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@4) LayerTypeType)) (= (type |a#0@@20|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@4 |a#0@@20|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@20|))) :qid |unknown.0:0| :skolemid |1717| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@4) |a#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@5 T@U) (|a#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@5) LayerTypeType)) (= (type |a#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@21|) ($Is |a#0@@21| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |1718| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@5 |a#0@@21|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@6 T@U) (|a#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@6) LayerTypeType)) (= (type |a#0@@22|) (SeqType BoxType))) ($Is |a#0@@22| (TSeq Sequences._default.NoDupes$T@@2))) (= (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@6 |a#0@@22|) true)) :qid |unknown.0:0| :skolemid |1719| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@6 |a#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@7 T@U) (|a#0@@23| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@7) LayerTypeType)) (= (type |a#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@23|) ($Is |a#0@@23| (TSeq Sequences._default.NoDupes$T@@3)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@7) |a#0@@23|) (forall ((|i#0@@38| Int) (|j#0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| (|Seq#Length| |a#0@@23|))) (and (<= (LitInt 0) |j#0|) (< |j#0| (|Seq#Length| |a#0@@23|)))) (not (= |i#0@@38| |j#0|))) (not (= (|Seq#Index| |a#0@@23| |i#0@@38|) (|Seq#Index| |a#0@@23| |j#0|))))) :qid |Sequencesidfy.66:13| :skolemid |1720| :pattern ( (|Seq#Index| |a#0@@23| |j#0|) (|Seq#Index| |a#0@@23| |i#0@@38|)) )))) :qid |unknown.0:0| :skolemid |1721| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@7) |a#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@8 T@U) (|a#0@@24| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@8) LayerTypeType)) (= (type |a#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@24|)) ($Is |a#0@@24| (TSeq Sequences._default.NoDupes$T@@4)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@8) (Lit |a#0@@24|)) (forall ((|i#1@@2| Int) (|j#1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| (Lit |a#0@@24|)))) (and (<= (LitInt 0) |j#1|) (< |j#1| (|Seq#Length| (Lit |a#0@@24|))))) (not (= |i#1@@2| |j#1|))) (not (= (|Seq#Index| (Lit |a#0@@24|) |i#1@@2|) (|Seq#Index| (Lit |a#0@@24|) |j#1|))))) :qid |Sequencesidfy.66:13| :skolemid |1722| :pattern ( (|Seq#Index| |a#0@@24| |j#1|) (|Seq#Index| |a#0@@24| |i#1@@2|)) )))) :qid |unknown.0:0| :weight 3 :skolemid |1723| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@8) (Lit |a#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@21| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@21| |e#0|) (and (and ($Is |s#0@@21| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@21| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@21| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@21| |e#0|) (|Seq#Length| |s#0@@21|))) (= (|Seq#Index| |s#0@@21| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@21| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |1724| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@21| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@8 T@U) (|s#0@@22| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@22| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (= (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@22| |e#0@@0|) (|Seq#Contains| |s#0@@22| |e#0@@0|))) :qid |unknown.0:0| :skolemid |1725| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@22| |e#0@@0|) ($IsGoodHeap $Heap@@8)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@49 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@49) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@49 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e) (|Seq#Length| s@@49))) (= (|Seq#Index| s@@49 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) e))) :qid |Sequencesidfy.117:5| :skolemid |1726| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@9 T@U) (|s#0@@23| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@9) ($Is |s#0@@23| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@23| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|) (let ((|i#0@@39| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|))) |i#0@@39|)))) :qid |unknown.0:0| :skolemid |1727| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@23| |e#0@@1|) ($IsGoodHeap $Heap@@9)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@10 T@U) (|s#0@@24| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@10) ($Is |s#0@@24| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@24| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|) (let ((|i#1@@3| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|))) |i#1@@3|)))) :qid |unknown.0:0| :weight 3 :skolemid |1728| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@24|) |e#0@@2|) ($IsGoodHeap $Heap@@10)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@11 T@U) (|s#0@@25| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |s#0@@25| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@25| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)) (let ((|i#2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)))) |i#2|)))) :qid |unknown.0:0| :weight 3 :skolemid |1729| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@25|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@11)) ))))
(assert (forall ((arg0@@501 T@U) (arg1@@215 Int) ) (! (= (type (Sequences.__default.Range arg0@@501 arg1@@215)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@501 arg1@@215)) )))
(assert (forall (($ly@@9 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@9) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@9) |n#0|) (Sequences.__default.Range $ly@@9 |n#0|))) :qid |Sequencesidfy.121:22| :skolemid |1730| :pattern ( (Sequences.__default.Range ($LS $ly@@9) |n#0|)) )))
(assert (forall (($ly@@10 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@10) LayerTypeType) (= (Sequences.__default.Range $ly@@10 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |Sequencesidfy.121:22| :skolemid |1731| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@10) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@11 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@11) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@11 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@40| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@11 |n#0@@1|) |i#0@@40|))) |i#0@@40|)) :qid |Sequencesidfy.124:20| :skolemid |1732| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@11 |n#0@@1|) |i#0@@40|))) ))) ($Is (Sequences.__default.Range $ly@@11 |n#0@@1|) (TSeq TInt)))) :qid |Sequencesidfy.121:22| :skolemid |1733| :pattern ( (Sequences.__default.Range $ly@@11 |n#0@@1|)) ))))
(assert (forall (($ly@@12 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@12) LayerTypeType) (= (|Sequences.__default.Range#requires| $ly@@12 |n#0@@2|) (>= |n#0@@2| (LitInt 0)))) :qid |Sequencesidfy.121:22| :skolemid |1734| :pattern ( (|Sequences.__default.Range#requires| $ly@@12 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@13 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@13) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@13) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@13 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |Sequencesidfy.121:22| :skolemid |1735| :pattern ( (Sequences.__default.Range ($LS $ly@@13) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@14 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@14) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@14) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@14) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |Sequencesidfy.121:22| :weight 3 :skolemid |1736| :pattern ( (Sequences.__default.Range ($LS $ly@@14) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@502 T@U) (arg1@@216 T@U) (arg2@@128 T@U) (arg3@@83 T@U) (arg4@@61 T@U) (arg5@@46 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@502 arg1@@216 arg2@@128 arg3@@83 arg4@@61 arg5@@46)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@502 arg1@@216 arg2@@128 arg3@@83 arg4@@61 arg5@@46)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@15 T@U) ($Heap@@12 T@U) (|f#0@@87| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@15) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@87|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@15) $Heap@@12 |f#0@@87| |run#0@@27|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@15 $Heap@@12 |f#0@@87| |run#0@@27|))) :qid |unknown.0:0| :skolemid |1737| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@15) $Heap@@12 |f#0@@87| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@16 T@U) ($Heap@@13 T@U) (|f#0@@88| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@16) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@88|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@16 $Heap@@13 |f#0@@88| |run#0@@28|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@13 |f#0@@88| |run#0@@28|))) :qid |unknown.0:0| :skolemid |1738| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@16) $Heap@@13 |f#0@@88| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@17 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@89| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@17) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@89|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@89| |run#0@@29|) (and ($Is |f#0@@89| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@29| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@31 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@31) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@31 null)) (exists ((|i#0@@41| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| (|Seq#Length| |run#0@@29|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@89| (|Seq#Index| |run#0@@29| |i#0@@41|)) ($Box |o#0|))))) (= ($Box $o@@31) ($Box |o#0|)))) :qid |Sequencesidfy.133:15| :skolemid |1739| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@89| (|Seq#Index| |run#0@@29| |i#0@@41|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@31) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@31) $f@@1)))) :qid |unknown.0:0| :skolemid |1740| :no-pattern (type $o@@31) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@31) :no-pattern (U_2_bool $o@@31) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@17 $h0@@1 |f#0@@89| |run#0@@29|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@17 $h1@@1 |f#0@@89| |run#0@@29|))) :qid |unknown.0:0| :skolemid |1741| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@17 $h1@@1 |f#0@@89| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@18 T@U) ($Heap@@14 T@U) (|f#0@@90| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@18) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@90|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@14 |f#0@@90| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@14) ($Is |f#0@@90| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@30| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@14 |f#0@@90| (|Seq#Index| |run#0@@30| |i#1@@4|)))) :qid |Sequencesidfy.130:21| :skolemid |1742| :pattern ( (|Seq#Index| |run#0@@30| |i#1@@4|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@18 $Heap@@14 |f#0@@90| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#2@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| |run#0@@30|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@18 $Heap@@14 |f#0@@90| |run#0@@30|) |i#2@@0|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@14 |f#0@@90| (|Seq#Index| |run#0@@30| |i#2@@0|))))) :qid |Sequencesidfy.132:20| :skolemid |1743| :pattern ( (|Seq#Index| |run#0@@30| |i#2@@0|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@18 $Heap@@14 |f#0@@90| |run#0@@30|) |i#2@@0|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@18 $Heap@@14 |f#0@@90| |run#0@@30|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |1744| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@18 $Heap@@14 |f#0@@90| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@19 T@U) ($Heap@@15 T@U) (|f#0@@91| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@19) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@91|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@15) ($Is |f#0@@91| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@31| (TSeq Sequences._default.Apply$E@@3)))) (= (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@19 $Heap@@15 |f#0@@91| |run#0@@31|) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@15 |f#0@@91| (|Seq#Index| |run#0@@31| |i#3|)))) :qid |Sequencesidfy.130:21| :skolemid |1745| :pattern ( (|Seq#Index| |run#0@@31| |i#3|)) )))) :qid |unknown.0:0| :skolemid |1746| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@19 $Heap@@15 |f#0@@91| |run#0@@31|) ($IsGoodHeap $Heap@@15)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@20 T@U) ($Heap@@16 T@U) (|f#0@@92| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@20) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@92|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@92| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@92| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@32| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@92| (|Seq#Index| |run#0@@32| |i#3@@0|)))) :qid |Sequencesidfy.130:21| :skolemid |1745| :pattern ( (|Seq#Index| |run#0@@32| |i#3@@0|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@92| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@20) $Heap@@16 |f#0@@92| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@92| (|Seq#Index| |run#0@@32| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@20 $Heap@@16 |f#0@@92| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1747| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@20) $Heap@@16 |f#0@@92| |run#0@@32|) ($IsGoodHeap $Heap@@16)) ))))
(assert (forall ((arg0@@503 T@U) (arg1@@217 T@U) (arg2@@129 T@U) (arg3@@84 T@U) (arg4@@62 T@U) (arg5@@47 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@503 arg1@@217 arg2@@129 arg3@@84 arg4@@62 arg5@@47)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@503 arg1@@217 arg2@@129 arg3@@84 arg4@@62 arg5@@47)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@21 T@U) ($Heap@@17 T@U) (|f#0@@93| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@21) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@93|) HandleTypeType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@21) $Heap@@17 |f#0@@93| |run#0@@33|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@21 $Heap@@17 |f#0@@93| |run#0@@33|))) :qid |unknown.0:0| :skolemid |1748| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@21) $Heap@@17 |f#0@@93| |run#0@@33|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@22 T@U) ($Heap@@18 T@U) (|f#0@@94| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@22) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@94|) HandleTypeType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@22 $Heap@@18 |f#0@@94| |run#0@@34|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@18 |f#0@@94| |run#0@@34|))) :qid |unknown.0:0| :skolemid |1749| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@22) $Heap@@18 |f#0@@94| |run#0@@34|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@23 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@95| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@23) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@95|) HandleTypeType)) (= (type |run#0@@35|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@95| |run#0@@35|) (and ($Is |f#0@@95| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@35| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@32 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@32) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@32 null)) (exists ((|i#0@@42| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@42|) (< |i#0@@42| (|Seq#Length| |run#0@@35|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@95| (|Seq#Index| |run#0@@35| |i#0@@42|)) ($Box |o#0@@0|))))) (= ($Box $o@@32) ($Box |o#0@@0|)))) :qid |Sequencesidfy.144:15| :skolemid |1750| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@95| (|Seq#Index| |run#0@@35| |i#0@@42|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@32) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@32) $f@@2)))) :qid |unknown.0:0| :skolemid |1751| :no-pattern (type $o@@32) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@32) :no-pattern (U_2_bool $o@@32) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@23 $h0@@2 |f#0@@95| |run#0@@35|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@23 $h1@@2 |f#0@@95| |run#0@@35|))) :qid |unknown.0:0| :skolemid |1752| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@23 $h1@@2 |f#0@@95| |run#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@24 T@U) ($Heap@@19 T@U) (|f#0@@96| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@24) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@96|) HandleTypeType)) (= (type |run#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@19 |f#0@@96| |run#0@@36|) (and (and (and ($IsGoodHeap $Heap@@19) ($Is |f#0@@96| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@36| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| |run#0@@36|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@19 |f#0@@96| (|Seq#Index| |run#0@@36| |i#1@@5|)))) :qid |Sequencesidfy.141:21| :skolemid |1753| :pattern ( (|Seq#Index| |run#0@@36| |i#1@@5|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@24 $Heap@@19 |f#0@@96| |run#0@@36|)) (|Seq#Length| |run#0@@36|)) (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |run#0@@36|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@24 $Heap@@19 |f#0@@96| |run#0@@36|) |i#2@@1|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@19 |f#0@@96| (|Seq#Index| |run#0@@36| |i#2@@1|))))) :qid |Sequencesidfy.143:20| :skolemid |1754| :pattern ( (|Seq#Index| |run#0@@36| |i#2@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@24 $Heap@@19 |f#0@@96| |run#0@@36|) |i#2@@1|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@24 $Heap@@19 |f#0@@96| |run#0@@36|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |1755| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@24 $Heap@@19 |f#0@@96| |run#0@@36|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@25 T@U) ($Heap@@20 T@U) (|f#0@@97| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@25) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@97|) HandleTypeType)) (= (type |run#0@@37|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@20) ($Is |f#0@@97| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@37| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (= (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@25 $Heap@@20 |f#0@@97| |run#0@@37|) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@37|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@20 |f#0@@97| (|Seq#Index| |run#0@@37| |i#3@@1|)))) :qid |Sequencesidfy.141:21| :skolemid |1756| :pattern ( (|Seq#Index| |run#0@@37| |i#3@@1|)) )))) :qid |unknown.0:0| :skolemid |1757| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@25 $Heap@@20 |f#0@@97| |run#0@@37|) ($IsGoodHeap $Heap@@20)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@26 T@U) ($Heap@@21 T@U) (|f#0@@98| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@26) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@98|) HandleTypeType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@21 |f#0@@98| |run#0@@38|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@98| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@38| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@38|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@21 |f#0@@98| (|Seq#Index| |run#0@@38| |i#3@@2|)))) :qid |Sequencesidfy.141:21| :skolemid |1756| :pattern ( (|Seq#Index| |run#0@@38| |i#3@@2|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@21 |f#0@@98| |run#0@@38|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@26) $Heap@@21 |f#0@@98| |run#0@@38|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@21 |f#0@@98| |run#0@@38|)))) :qid |unknown.0:0| :skolemid |1758| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@26) $Heap@@21 |f#0@@98| |run#0@@38|) ($IsGoodHeap $Heap@@21)) ))))
(assert (forall ((arg0@@504 T@U) (arg1@@218 T@U) (arg2@@130 T@U) (arg3@@85 T@U) (arg4@@63 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@504 arg1@@218 arg2@@130 arg3@@85 arg4@@63)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@504 arg1@@218 arg2@@130 arg3@@85 arg4@@63)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@27 T@U) ($Heap@@22 T@U) (|f#0@@99| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@27) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@99|) HandleTypeType)) (= (type |run#0@@39|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@27) $Heap@@22 |f#0@@99| |run#0@@39|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@27 $Heap@@22 |f#0@@99| |run#0@@39|))) :qid |unknown.0:0| :skolemid |1759| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@27) $Heap@@22 |f#0@@99| |run#0@@39|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@28 T@U) ($Heap@@23 T@U) (|f#0@@100| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@28) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@100|) HandleTypeType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@28 $Heap@@23 |f#0@@100| |run#0@@40|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@23 |f#0@@100| |run#0@@40|))) :qid |unknown.0:0| :skolemid |1760| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@28) $Heap@@23 |f#0@@100| |run#0@@40|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@29 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@101| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@29) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@101|) HandleTypeType)) (= (type |run#0@@41|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@101| |run#0@@41|) (and ($Is |f#0@@101| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@41| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@33 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@33) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@33 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@101| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@33) ($Box |_o0#0|)))) :qid |Sequencesidfy.153:13| :skolemid |1761| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@33) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@33) $f@@3)))) :qid |unknown.0:0| :skolemid |1762| :no-pattern (type $o@@33) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@33) :no-pattern (U_2_bool $o@@33) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@29 $h0@@3 |f#0@@101| |run#0@@41|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@29 $h1@@3 |f#0@@101| |run#0@@41|))) :qid |unknown.0:0| :skolemid |1763| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@29 $h1@@3 |f#0@@101| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@30 T@U) ($Heap@@24 T@U) (|f#0@@102| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@30) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@102|) HandleTypeType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@24 |f#0@@102| |run#0@@42|) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@102| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@42| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@43| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@43|) (< |i#0@@43| (|Seq#Length| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@24 |f#0@@102| (|Seq#Index| |run#0@@42| |i#0@@43|)))) :qid |Sequencesidfy.150:21| :skolemid |1764| :pattern ( (|Seq#Index| |run#0@@42| |i#0@@43|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@30 $Heap@@24 |f#0@@102| |run#0@@42|)) (|Seq#Length| |run#0@@42|)) (forall ((|i#1@@6| Int) ) (!  (=> (<= (LitInt 0) |i#1@@6|) (=> (and (< |i#1@@6| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@30 $Heap@@24 |f#0@@102| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@24 |f#0@@102| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@30 $Heap@@24 |f#0@@102| |run#0@@42|) |i#1@@6|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@24 |f#0@@102| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@30 $Heap@@24 |f#0@@102| |run#0@@42|) |i#1@@6|)))))) :qid |Sequencesidfy.152:20| :skolemid |1765| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@30 $Heap@@24 |f#0@@102| |run#0@@42|) |i#1@@6|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@30 $Heap@@24 |f#0@@102| |run#0@@42|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |1766| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@30 $Heap@@24 |f#0@@102| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@31 T@U) ($Heap@@25 T@U) (|f#0@@103| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@31) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@103|) HandleTypeType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@103| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@43| (TSeq Sequences._default.Filter$E@@3)))) (= (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@31 $Heap@@25 |f#0@@103| |run#0@@43|) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |run#0@@43|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@25 |f#0@@103| (|Seq#Index| |run#0@@43| |i#2@@2|)))) :qid |Sequencesidfy.150:21| :skolemid |1767| :pattern ( (|Seq#Index| |run#0@@43| |i#2@@2|)) )))) :qid |unknown.0:0| :skolemid |1768| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@31 $Heap@@25 |f#0@@103| |run#0@@43|) ($IsGoodHeap $Heap@@25)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@32 T@U) ($Heap@@26 T@U) (|f#0@@104| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@32) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@104|) HandleTypeType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@26 |f#0@@104| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@104| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@44| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@44|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@26 |f#0@@104| (|Seq#Index| |run#0@@44| |i#2@@3|)))) :qid |Sequencesidfy.150:21| :skolemid |1767| :pattern ( (|Seq#Index| |run#0@@44| |i#2@@3|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@26 |f#0@@104| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@32) $Heap@@26 |f#0@@104| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@26 |f#0@@104| (|Seq#Index| |run#0@@44| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@44| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@32 $Heap@@26 |f#0@@104| (|Seq#Drop| |run#0@@44| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1769| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@32) $Heap@@26 |f#0@@104| |run#0@@44|) ($IsGoodHeap $Heap@@26)) ))))
(assert (forall ((arg0@@505 T@U) (arg1@@219 T@U) (arg2@@131 T@U) (arg3@@86 T@U) (arg4@@64 T@U) (arg5@@48 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@505 arg1@@219 arg2@@131 arg3@@86 arg4@@64 arg5@@48)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@505 arg1@@219 arg2@@131 arg3@@86 arg4@@64 arg5@@48)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@33 T@U) (|f#0@@105| T@U) (|init#0| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@33) LayerTypeType)) (= (type |f#0@@105|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@33) |f#0@@105| |init#0| |run#0@@45|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@33 |f#0@@105| |init#0| |run#0@@45|))) :qid |unknown.0:0| :skolemid |1770| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@33) |f#0@@105| |init#0| |run#0@@45|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@34 T@U) (|f#0@@106| T@U) (|init#0@@0| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@34) LayerTypeType)) (= (type |f#0@@106|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@34 |f#0@@106| |init#0@@0| |run#0@@46|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@106| |init#0@@0| |run#0@@46|))) :qid |unknown.0:0| :skolemid |1771| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@34) |f#0@@106| |init#0@@0| |run#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@35 T@U) (|f#0@@107| T@U) (|init#0@@1| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@35) LayerTypeType)) (= (type |f#0@@107|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@107| |init#0@@1| |run#0@@47|) (and (and ($Is |f#0@@107| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@47| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@35 |f#0@@107| |init#0@@1| |run#0@@47|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |1772| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@35 |f#0@@107| |init#0@@1| |run#0@@47|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@36 T@U) ($Heap@@27 T@U) (|f#0@@108| T@U) (|init#0@@2| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@36) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@108|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@108| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@48| (TSeq Sequences._default.FoldLeft$E@@2)))) (= (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@36 |f#0@@108| |init#0@@2| |run#0@@48|) true)) :qid |unknown.0:0| :skolemid |1773| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@36 |f#0@@108| |init#0@@2| |run#0@@48|) ($IsGoodHeap $Heap@@27)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@37 T@U) ($Heap@@28 T@U) (|f#0@@109| T@U) (|init#0@@3| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@37) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@109|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@109| |init#0@@3| |run#0@@49|) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@109| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@49| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@49|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@109| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@28 |f#0@@109| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@37) |f#0@@109| |init#0@@3| |run#0@@49|) (ite (= (|Seq#Length| |run#0@@49|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@37 |f#0@@109| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@28 |f#0@@109| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |1774| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@37) |f#0@@109| |init#0@@3| |run#0@@49|) ($IsGoodHeap $Heap@@28)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@38 T@U) ($Heap@@29 T@U) (|f#0@@110| T@U) (|init#0@@4| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@38) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@110|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@110| |init#0@@4| (Lit |run#0@@50|)) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@110| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@50| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@110| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@29 |f#0@@110| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@38) |f#0@@110| |init#0@@4| (Lit |run#0@@50|)) (ite (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@38) |f#0@@110| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@29 |f#0@@110| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1775| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@38) |f#0@@110| |init#0@@4| (Lit |run#0@@50|)) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@39 T@U) ($Heap@@30 T@U) (|f#0@@111| T@U) (|init#0@@5| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@39) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@111|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@111|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@111| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@51| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@111|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@30 (Lit |f#0@@111|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@39) (Lit |f#0@@111|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (ite (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@39) (Lit |f#0@@111|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@30 (Lit |f#0@@111|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1776| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@39) (Lit |f#0@@111|) (Lit |init#0@@5|) (Lit |run#0@@51|)) ($IsGoodHeap $Heap@@30)) ))))
(assert (forall ((arg0@@506 T@U) (arg1@@220 T@U) (arg2@@132 T@U) (arg3@@87 T@U) (arg4@@65 T@U) (arg5@@49 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@506 arg1@@220 arg2@@132 arg3@@87 arg4@@65 arg5@@49)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@506 arg1@@220 arg2@@132 arg3@@87 arg4@@65 arg5@@49)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@40 T@U) (|f#0@@112| T@U) (|init#0@@6| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@40) LayerTypeType)) (= (type |f#0@@112|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@40) |f#0@@112| |init#0@@6| |run#0@@52|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@40 |f#0@@112| |init#0@@6| |run#0@@52|))) :qid |unknown.0:0| :skolemid |1777| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@40) |f#0@@112| |init#0@@6| |run#0@@52|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@41 T@U) (|f#0@@113| T@U) (|init#0@@7| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@41) LayerTypeType)) (= (type |f#0@@113|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@41 |f#0@@113| |init#0@@7| |run#0@@53|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@113| |init#0@@7| |run#0@@53|))) :qid |unknown.0:0| :skolemid |1778| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@41) |f#0@@113| |init#0@@7| |run#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@42 T@U) (|f#0@@114| T@U) (|init#0@@8| T@U) (|run#0@@54| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@42) LayerTypeType)) (= (type |f#0@@114|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@114| |init#0@@8| |run#0@@54|) (and (and ($Is |f#0@@114| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@54| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@42 |f#0@@114| |init#0@@8| |run#0@@54|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |1779| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@42 |f#0@@114| |init#0@@8| |run#0@@54|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@43 T@U) ($Heap@@31 T@U) (|f#0@@115| T@U) (|init#0@@9| T@U) (|run#0@@55| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@43) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@115|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@55|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@115| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@55| (TSeq Sequences._default.FoldRight$E@@2)))) (= (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@43 |f#0@@115| |init#0@@9| |run#0@@55|) true)) :qid |unknown.0:0| :skolemid |1780| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@43 |f#0@@115| |init#0@@9| |run#0@@55|) ($IsGoodHeap $Heap@@31)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@44 T@U) ($Heap@@32 T@U) (|f#0@@116| T@U) (|init#0@@10| T@U) (|run#0@@56| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@116|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@116| |init#0@@10| |run#0@@56|) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@116| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@56| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@56|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@116| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@44) |f#0@@116| |init#0@@10| |run#0@@56|) (ite (= (|Seq#Length| |run#0@@56|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@32 |f#0@@116| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@44 |f#0@@116| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1))) (|Seq#Index| |run#0@@56| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |1781| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@44) |f#0@@116| |init#0@@10| |run#0@@56|) ($IsGoodHeap $Heap@@32)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@45 T@U) ($Heap@@33 T@U) (|f#0@@117| T@U) (|init#0@@11| T@U) (|run#0@@57| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@117|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@117| |init#0@@11| (Lit |run#0@@57|)) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@117| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@57| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@117| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@45) |f#0@@117| |init#0@@11| (Lit |run#0@@57|)) (ite (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@33 |f#0@@117| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@45) |f#0@@117| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@57|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1782| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@45) |f#0@@117| |init#0@@11| (Lit |run#0@@57|)) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@46 T@U) ($Heap@@34 T@U) (|f#0@@118| T@U) (|init#0@@12| T@U) (|run#0@@58| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@118|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@118|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@118| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@58| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@118|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@46) (Lit |f#0@@118|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (ite (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@34 (Lit |f#0@@118|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@46) (Lit |f#0@@118|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@58|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1783| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@46) (Lit |f#0@@118|) (Lit |init#0@@12|) (Lit |run#0@@58|)) ($IsGoodHeap $Heap@@34)) ))))
(assert (forall ((arg0@@507 T@U) (arg1@@221 T@U) (arg2@@133 T@U) (arg3@@88 T@U) (arg4@@66 T@U) (arg5@@50 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@507 arg1@@221 arg2@@133 arg3@@88 arg4@@66 arg5@@50)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@507 arg1@@221 arg2@@133 arg3@@88 arg4@@66 arg5@@50)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@47 T@U) (|f#0@@119| T@U) (|init#0@@13| T@U) (|run#0@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type |f#0@@119|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@47) |f#0@@119| |init#0@@13| |run#0@@59|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@47 |f#0@@119| |init#0@@13| |run#0@@59|))) :qid |unknown.0:0| :skolemid |1784| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@47) |f#0@@119| |init#0@@13| |run#0@@59|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@48 T@U) (|f#0@@120| T@U) (|init#0@@14| T@U) (|run#0@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type |f#0@@120|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@48 |f#0@@120| |init#0@@14| |run#0@@60|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@120| |init#0@@14| |run#0@@60|))) :qid |unknown.0:0| :skolemid |1785| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@48) |f#0@@120| |init#0@@14| |run#0@@60|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@49 T@U) (|f#0@@121| T@U) (|init#0@@15| T@U) (|run#0@@61| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type |f#0@@121|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@121| |init#0@@15| |run#0@@61|) (and (and ($Is |f#0@@121| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@61| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@49 |f#0@@121| |init#0@@15| |run#0@@61|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |1786| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@49 |f#0@@121| |init#0@@15| |run#0@@61|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@50 T@U) ($Heap@@35 T@U) (|f#0@@122| T@U) (|init#0@@16| T@U) (|run#0@@62| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@50) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@122|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@62|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@122| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@62| (TSeq Sequences._default.FoldFromRight$E@@2)))) (= (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@50 |f#0@@122| |init#0@@16| |run#0@@62|) true)) :qid |unknown.0:0| :skolemid |1787| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@50 |f#0@@122| |init#0@@16| |run#0@@62|) ($IsGoodHeap $Heap@@35)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@51 T@U) ($Heap@@36 T@U) (|f#0@@123| T@U) (|init#0@@17| T@U) (|run#0@@63| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@51) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |f#0@@123|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@123| |init#0@@17| |run#0@@63|) (and (and (and ($IsGoodHeap $Heap@@36) ($Is |f#0@@123| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@63| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@63|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@123| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@51) |f#0@@123| |init#0@@17| |run#0@@63|) (ite (= (|Seq#Length| |run#0@@63|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@36 |f#0@@123| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@51 |f#0@@123| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@63|)))))) :qid |unknown.0:0| :skolemid |1788| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@51) |f#0@@123| |init#0@@17| |run#0@@63|) ($IsGoodHeap $Heap@@36)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@52 T@U) ($Heap@@37 T@U) (|f#0@@124| T@U) (|init#0@@18| T@U) (|run#0@@64| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@52) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |f#0@@124|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@124| |init#0@@18| (Lit |run#0@@64|)) (and (and (and ($IsGoodHeap $Heap@@37) ($Is |f#0@@124| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@64| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@124| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@52) |f#0@@124| |init#0@@18| (Lit |run#0@@64|)) (ite (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@37 |f#0@@124| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@52) |f#0@@124| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1789| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@52) |f#0@@124| |init#0@@18| (Lit |run#0@@64|)) ($IsGoodHeap $Heap@@37)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@53 T@U) ($Heap@@38 T@U) (|f#0@@125| T@U) (|init#0@@19| T@U) (|run#0@@65| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |f#0@@125|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@125|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (and (and (and ($IsGoodHeap $Heap@@38) ($Is |f#0@@125| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@65| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@125|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@53) (Lit |f#0@@125|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (ite (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@38 (Lit |f#0@@125|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@53) (Lit |f#0@@125|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1790| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@53) (Lit |f#0@@125|) (Lit |init#0@@19|) (Lit |run#0@@65|)) ($IsGoodHeap $Heap@@38)) ))))
(assert (forall ((arg0@@508 T@U) (arg1@@222 T@U) (arg2@@134 T@U) (arg3@@89 Int) ) (! (= (type (Sequences.__default.remove arg0@@508 arg1@@222 arg2@@134 arg3@@89)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@508 arg1@@222 arg2@@134 arg3@@89)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@54 T@U) (|s#0@@26| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@54) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@54) |s#0@@26| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@54 |s#0@@26| |pos#0|))) :qid |unknown.0:0| :skolemid |1791| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@54) |s#0@@26| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@55 T@U) (|s#0@@27| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@55) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@55 |s#0@@27| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@27| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |1792| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@55) |s#0@@27| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@56 T@U) (|s#0@@28| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@56) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@28| |pos#0@@1|) (and ($Is |s#0@@28| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@28|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@56 |s#0@@28| |pos#0@@1|)) (- (|Seq#Length| |s#0@@28|) 1)) (forall ((|i#0@@44| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@44|) (< |i#0@@44| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@56 |s#0@@28| |pos#0@@1|) |i#0@@44|) (|Seq#Index| |s#0@@28| |i#0@@44|))) :qid |Sequencesidfy.180:18| :skolemid |1793| :pattern ( (|Seq#Index| |s#0@@28| |i#0@@44|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@56 |s#0@@28| |pos#0@@1|) |i#0@@44|)) ))) (forall ((|i#1@@7| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@7|) (< |i#1@@7| (- (|Seq#Length| |s#0@@28|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@56 |s#0@@28| |pos#0@@1|) |i#1@@7|) (|Seq#Index| |s#0@@28| (+ |i#1@@7| 1)))) :qid |Sequencesidfy.181:18| :skolemid |1794| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@56 |s#0@@28| |pos#0@@1|) |i#1@@7|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@56 |s#0@@28| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |1795| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@56 |s#0@@28| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@57 T@U) (|s#0@@29| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@57) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) ($Is |s#0@@29| (TSeq Sequences._default.remove$A@@2))) (= (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@57 |s#0@@29| |pos#0@@2|)  (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@29|))))) :qid |unknown.0:0| :skolemid |1796| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@57 |s#0@@29| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@58 T@U) (|s#0@@30| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@58) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@30| |pos#0@@3|) (and ($Is |s#0@@30| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@30|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@58) |s#0@@30| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@30| |pos#0@@3|) (|Seq#Drop| |s#0@@30| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |1797| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@58) |s#0@@30| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@59 T@U) (|s#0@@31| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@59) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@31|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@31| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@31|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@59) (Lit |s#0@@31|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@31|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@31|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1798| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@59) (Lit |s#0@@31|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@509 T@U) (arg1@@223 T@U) (arg2@@135 T@U) (arg3@@90 T@U) ) (! (= (type (Sequences.__default.RemoveOneValue arg0@@509 arg1@@223 arg2@@135 arg3@@90)) (SeqType BoxType)) :qid |funType:Sequences.__default.RemoveOneValue| :pattern ( (Sequences.__default.RemoveOneValue arg0@@509 arg1@@223 arg2@@135 arg3@@90)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V T@U) ($ly@@60 T@U) (|s#0@@32| T@U) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V) TyType) (= (type $ly@@60) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |v#0@@5|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@60) |s#0@@32| |v#0@@5|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V $ly@@60 |s#0@@32| |v#0@@5|))) :qid |unknown.0:0| :skolemid |1799| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@60) |s#0@@32| |v#0@@5|)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@0 T@U) ($ly@@61 T@U) (|s#0@@33| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@0) TyType) (= (type $ly@@61) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |v#0@@6|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $ly@@61 |s#0@@33| |v#0@@6|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $LZ |s#0@@33| |v#0@@6|))) :qid |unknown.0:0| :skolemid |1800| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 (AsFuelBottom $ly@@61) |s#0@@33| |v#0@@6|)) )))
(assert (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@1 T@U) ($ly@@62 T@U) (|s#0@@34| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@1) TyType) (= (type $ly@@62) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |v#0@@7|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@1 |s#0@@34| |v#0@@7|) (and ($Is |s#0@@34| (TSeq Sequences._default.RemoveOneValue$V@@1)) ($IsBox |v#0@@7| Sequences._default.RemoveOneValue$V@@1)))) (and (=> (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes |s#0@@34|) (and (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@62 |s#0@@34| |v#0@@7|)) (|Set#Equal| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@62 |s#0@@34| |v#0@@7|)) (|Set#Difference| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 |s#0@@34|) (|Set#UnionOne| (|Set#Empty| BoxType) |v#0@@7|))))) ($Is (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@62 |s#0@@34| |v#0@@7|) (TSeq Sequences._default.RemoveOneValue$V@@1)))) :qid |unknown.0:0| :skolemid |1801| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@62 |s#0@@34| |v#0@@7|)) ))))
(assert (forall ((Sequences._default.RemoveOneValue$V@@2 T@U) ($ly@@63 T@U) ($Heap@@39 T@U) (|s#0@@35| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@2) TyType) (= (type $ly@@63) LayerTypeType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |v#0@@8|) BoxType)) (and (and ($IsGoodHeap $Heap@@39) ($Is |s#0@@35| (TSeq Sequences._default.RemoveOneValue$V@@2))) ($IsBox |v#0@@8| Sequences._default.RemoveOneValue$V@@2))) (= (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@63 |s#0@@35| |v#0@@8|) true)) :qid |unknown.0:0| :skolemid |1802| :pattern ( (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@63 |s#0@@35| |v#0@@8|) ($IsGoodHeap $Heap@@39)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@3 T@U) (s@@50 T@U) (v@@52 T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@3) TyType) (= (type s@@50) (SeqType BoxType))) (= (type v@@52) BoxType)) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (and (and (<= (LitInt 0) (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (< (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52) (|Seq#Length| s@@50))) (= (|Seq#Index| s@@50 (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) v@@52))) :qid |Sequencesidfy.191:5| :skolemid |1803| :pattern ( (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) )))
(assert  (and (= (type MoreFuel_Sequences._default.NoDupes0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@4 T@U) ($ly@@64 T@U) ($Heap@@40 T@U) (|s#0@@36| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@4) TyType) (= (type $ly@@64) LayerTypeType)) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |v#0@@9|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@36| |v#0@@9|) (and (and ($IsGoodHeap $Heap@@40) ($Is |s#0@@36| (TSeq Sequences._default.RemoveOneValue$V@@4))) ($IsBox |v#0@@9| Sequences._default.RemoveOneValue$V@@4)))) (and (=> (|Seq#Contains| |s#0@@36| |v#0@@9|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@36| |v#0@@9|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes0)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes0)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes0) MoreFuel_Sequences._default.NoDupes0)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@64) |s#0@@36| |v#0@@9|) (ite  (not (|Seq#Contains| |s#0@@36| |v#0@@9|)) |s#0@@36| (let ((|i#0@@45| (|$let#4_i| Sequences._default.RemoveOneValue$V@@4 |s#0@@36| |v#0@@9|))) (|Seq#Append| (|Seq#Take| |s#0@@36| |i#0@@45|) (|Seq#Drop| |s#0@@36| (+ |i#0@@45| 1))))))))) :qid |unknown.0:0| :skolemid |1804| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@64) |s#0@@36| |v#0@@9|) ($IsGoodHeap $Heap@@40)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@5 T@U) ($ly@@65 T@U) ($Heap@@41 T@U) (|s#0@@37| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@5) TyType) (= (type $ly@@65) LayerTypeType)) (= (type $Heap@@41) (MapType0Type refType MapType1Type))) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |v#0@@10|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@37|) |v#0@@10|) (and (and ($IsGoodHeap $Heap@@41) ($Is |s#0@@37| (TSeq Sequences._default.RemoveOneValue$V@@5))) ($IsBox |v#0@@10| Sequences._default.RemoveOneValue$V@@5)))) (and (=> (|Seq#Contains| |s#0@@37| |v#0@@10|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@37|) |v#0@@10|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes1)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes1)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes1) MoreFuel_Sequences._default.NoDupes1)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@65) (Lit |s#0@@37|) |v#0@@10|) (ite  (not (|Seq#Contains| |s#0@@37| |v#0@@10|)) |s#0@@37| (let ((|i#1@@8| (|$let#4_i| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@37|) |v#0@@10|))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@37|) |i#1@@8|) (|Seq#Drop| (Lit |s#0@@37|) (+ |i#1@@8| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1805| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@65) (Lit |s#0@@37|) |v#0@@10|) ($IsGoodHeap $Heap@@41)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes2) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@6 T@U) ($ly@@66 T@U) ($Heap@@42 T@U) (|s#0@@38| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@6) TyType) (= (type $ly@@66) LayerTypeType)) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |s#0@@38|) (SeqType BoxType))) (= (type |v#0@@11|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@38|) (Lit |v#0@@11|)) (and (and ($IsGoodHeap $Heap@@42) ($Is |s#0@@38| (TSeq Sequences._default.RemoveOneValue$V@@6))) ($IsBox |v#0@@11| Sequences._default.RemoveOneValue$V@@6)))) (and (=> (|Seq#Contains| |s#0@@38| |v#0@@11|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@38|) (Lit |v#0@@11|))) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes2)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes2)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes2) MoreFuel_Sequences._default.NoDupes2)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@66) (Lit |s#0@@38|) (Lit |v#0@@11|)) (ite  (not (|Seq#Contains| |s#0@@38| |v#0@@11|)) |s#0@@38| (let ((|i#2@@4| (|$let#4_i| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@38|) (Lit |v#0@@11|)))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@38|) |i#2@@4|) (|Seq#Drop| (Lit |s#0@@38|) (+ |i#2@@4| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1806| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@66) (Lit |s#0@@38|) (Lit |v#0@@11|)) ($IsGoodHeap $Heap@@42)) ))))
(assert (forall ((arg0@@510 T@U) (arg1@@224 T@U) (arg2@@136 T@U) (arg3@@91 T@U) (arg4@@67 Int) ) (! (= (type (Sequences.__default.insert arg0@@510 arg1@@224 arg2@@136 arg3@@91 arg4@@67)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@510 arg1@@224 arg2@@136 arg3@@91 arg4@@67)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@67 T@U) (|s#0@@39| T@U) (|a#0@@25| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@67) LayerTypeType)) (= (type |s#0@@39|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@67) |s#0@@39| |a#0@@25| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@67 |s#0@@39| |a#0@@25| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |1807| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@67) |s#0@@39| |a#0@@25| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@68 T@U) (|s#0@@40| T@U) (|a#0@@26| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@68) LayerTypeType)) (= (type |s#0@@40|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@68 |s#0@@40| |a#0@@26| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@40| |a#0@@26| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |1808| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@68) |s#0@@40| |a#0@@26| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@69 T@U) (|s#0@@41| T@U) (|a#0@@27| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@69) LayerTypeType)) (= (type |s#0@@41|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@41| |a#0@@27| |pos#0@@7|) (and (and ($Is |s#0@@41| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@27| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@41|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@69 |s#0@@41| |a#0@@27| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@41|) 1)) (forall ((|i#0@@46| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@46|) (< |i#0@@46| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@69 |s#0@@41| |a#0@@27| |pos#0@@7|) |i#0@@46|) (|Seq#Index| |s#0@@41| |i#0@@46|)))) :qid |Sequencesidfy.198:18| :skolemid |1809| :pattern ( (|Seq#Index| |s#0@@41| |i#0@@46|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@69 |s#0@@41| |a#0@@27| |pos#0@@7|) |i#0@@46|)) ))) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@9|) (< |i#1@@9| (|Seq#Length| |s#0@@41|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@69 |s#0@@41| |a#0@@27| |pos#0@@7|) (+ |i#1@@9| 1)) (|Seq#Index| |s#0@@41| |i#1@@9|)))) :qid |Sequencesidfy.199:18| :skolemid |1810| :pattern ( (|Seq#Index| |s#0@@41| |i#1@@9|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@69 |s#0@@41| |a#0@@27| |pos#0@@7|) |pos#0@@7|) |a#0@@27|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@69 |s#0@@41| |a#0@@27| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |1811| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@69 |s#0@@41| |a#0@@27| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@70 T@U) (|s#0@@42| T@U) (|a#0@@28| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@70) LayerTypeType)) (= (type |s#0@@42|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (and ($Is |s#0@@42| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@28| Sequences._default.insert$A@@2))) (= (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@70 |s#0@@42| |a#0@@28| |pos#0@@8|)  (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@42|))))) :qid |unknown.0:0| :skolemid |1812| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@70 |s#0@@42| |a#0@@28| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@71 T@U) (|s#0@@43| T@U) (|a#0@@29| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@71) LayerTypeType)) (= (type |s#0@@43|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@43| |a#0@@29| |pos#0@@9|) (and (and ($Is |s#0@@43| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@29| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@43|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@71) |s#0@@43| |a#0@@29| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@43| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@29|)) (|Seq#Drop| |s#0@@43| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |1813| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@71) |s#0@@43| |a#0@@29| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@72 T@U) (|s#0@@44| T@U) (|a#0@@30| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@72) LayerTypeType)) (= (type |s#0@@44|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@44|) |a#0@@30| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@44| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@30| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@44|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@72) (Lit |s#0@@44|) |a#0@@30| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@44|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@30|)) (|Seq#Drop| (Lit |s#0@@44|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |1814| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@72) (Lit |s#0@@44|) |a#0@@30| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@73 T@U) (|s#0@@45| T@U) (|a#0@@31| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@73) LayerTypeType)) (= (type |s#0@@45|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@45|) (Lit |a#0@@31|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@45| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@31| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@45|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@73) (Lit |s#0@@45|) (Lit |a#0@@31|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@45|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@31|))) (|Seq#Drop| (Lit |s#0@@45|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |1815| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@73) (Lit |s#0@@45|) (Lit |a#0@@31|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@511 T@U) (arg1@@225 T@U) (arg2@@137 T@U) (arg3@@92 T@U) (arg4@@68 T@U) (arg5@@51 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@511 arg1@@225 arg2@@137 arg3@@92 arg4@@68 arg5@@51)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@511 arg1@@225 arg2@@137 arg3@@92 arg4@@68 arg5@@51)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@74 T@U) (|s#0@@46| T@U) (|a#0@@32| T@U) (|b#0@@9| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@74) LayerTypeType)) (= (type |s#0@@46|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (= (type |b#0@@9|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@74) |s#0@@46| |a#0@@32| |b#0@@9| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@74 |s#0@@46| |a#0@@32| |b#0@@9| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |1816| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@74) |s#0@@46| |a#0@@32| |b#0@@9| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@75 T@U) (|s#0@@47| T@U) (|a#0@@33| T@U) (|b#0@@10| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@75) LayerTypeType)) (= (type |s#0@@47|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (= (type |b#0@@10|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@75 |s#0@@47| |a#0@@33| |b#0@@10| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@47| |a#0@@33| |b#0@@10| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |1817| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@75) |s#0@@47| |a#0@@33| |b#0@@10| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@76 T@U) (|s#0@@48| T@U) (|a#0@@34| T@U) (|b#0@@11| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@76) LayerTypeType)) (= (type |s#0@@48|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (= (type |b#0@@11|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@48| |a#0@@34| |b#0@@11| |pos#0@@14|) (and (and (and ($Is |s#0@@48| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@34| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@11| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@48|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@76 |s#0@@48| |a#0@@34| |b#0@@11| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@48|) 1)) (forall ((|i#0@@47| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@47|) (< |i#0@@47| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@76 |s#0@@48| |a#0@@34| |b#0@@11| |pos#0@@14|) |i#0@@47|) (|Seq#Index| |s#0@@48| |i#0@@47|)))) :qid |Sequencesidfy.223:18| :skolemid |1818| :pattern ( (|Seq#Index| |s#0@@48| |i#0@@47|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@76 |s#0@@48| |a#0@@34| |b#0@@11| |pos#0@@14|) |i#0@@47|)) ))) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@10|) (< |i#1@@10| (|Seq#Length| |s#0@@48|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@76 |s#0@@48| |a#0@@34| |b#0@@11| |pos#0@@14|) (+ |i#1@@10| 1)) (|Seq#Index| |s#0@@48| |i#1@@10|)))) :qid |Sequencesidfy.224:18| :skolemid |1819| :pattern ( (|Seq#Index| |s#0@@48| |i#1@@10|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@76 |s#0@@48| |a#0@@34| |b#0@@11| |pos#0@@14|) |pos#0@@14|) |a#0@@34|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@76 |s#0@@48| |a#0@@34| |b#0@@11| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@11|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@76 |s#0@@48| |a#0@@34| |b#0@@11| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |1820| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@76 |s#0@@48| |a#0@@34| |b#0@@11| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@77 T@U) (|s#0@@49| T@U) (|a#0@@35| T@U) (|b#0@@12| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@77) LayerTypeType)) (= (type |s#0@@49|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (= (type |b#0@@12|) BoxType)) (and (and ($Is |s#0@@49| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@35| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@12| Sequences._default.replace1with2$A@@2))) (= (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@77 |s#0@@49| |a#0@@35| |b#0@@12| |pos#0@@15|)  (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@49|))))) :qid |unknown.0:0| :skolemid |1821| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@77 |s#0@@49| |a#0@@35| |b#0@@12| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@78 T@U) (|s#0@@50| T@U) (|a#0@@36| T@U) (|b#0@@13| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@78) LayerTypeType)) (= (type |s#0@@50|) (SeqType BoxType))) (= (type |a#0@@36|) BoxType)) (= (type |b#0@@13|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@50| |a#0@@36| |b#0@@13| |pos#0@@16|) (and (and (and ($Is |s#0@@50| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@36| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@13| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@50|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@78) |s#0@@50| |a#0@@36| |b#0@@13| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@50| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@36|) |b#0@@13|)) (|Seq#Drop| |s#0@@50| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |1822| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@78) |s#0@@50| |a#0@@36| |b#0@@13| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@79 T@U) (|s#0@@51| T@U) (|a#0@@37| T@U) (|b#0@@14| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@79) LayerTypeType)) (= (type |s#0@@51|) (SeqType BoxType))) (= (type |a#0@@37|) BoxType)) (= (type |b#0@@14|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@51|) |a#0@@37| |b#0@@14| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@51| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@37| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@14| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@51|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@79) (Lit |s#0@@51|) |a#0@@37| |b#0@@14| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@51|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@37|) |b#0@@14|)) (|Seq#Drop| (Lit |s#0@@51|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1823| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@79) (Lit |s#0@@51|) |a#0@@37| |b#0@@14| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@80 T@U) (|s#0@@52| T@U) (|a#0@@38| T@U) (|b#0@@15| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@80) LayerTypeType)) (= (type |s#0@@52|) (SeqType BoxType))) (= (type |a#0@@38|) BoxType)) (= (type |b#0@@15|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@52|) (Lit |a#0@@38|) (Lit |b#0@@15|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@52| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@38| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@15| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@52|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@80) (Lit |s#0@@52|) (Lit |a#0@@38|) (Lit |b#0@@15|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@52|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@38|)) (Lit |b#0@@15|))) (|Seq#Drop| (Lit |s#0@@52|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1824| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@80) (Lit |s#0@@52|) (Lit |a#0@@38|) (Lit |b#0@@15|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@512 T@U) (arg1@@226 T@U) (arg2@@138 T@U) (arg3@@93 T@U) (arg4@@69 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@512 arg1@@226 arg2@@138 arg3@@93 arg4@@69)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@512 arg1@@226 arg2@@138 arg3@@93 arg4@@69)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@81 T@U) (|s#0@@53| T@U) (|a#0@@39| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@81) LayerTypeType)) (= (type |s#0@@53|) (SeqType BoxType))) (= (type |a#0@@39|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@81) |s#0@@53| |a#0@@39| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@81 |s#0@@53| |a#0@@39| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |1825| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@81) |s#0@@53| |a#0@@39| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@82 T@U) (|s#0@@54| T@U) (|a#0@@40| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@82) LayerTypeType)) (= (type |s#0@@54|) (SeqType BoxType))) (= (type |a#0@@40|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@82 |s#0@@54| |a#0@@40| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@54| |a#0@@40| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |1826| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@82) |s#0@@54| |a#0@@40| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@83 T@U) (|s#0@@55| T@U) (|a#0@@41| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |s#0@@55|) (SeqType BoxType))) (= (type |a#0@@41|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@55| |a#0@@41| |pos#0@@21|) (and (and ($Is |s#0@@55| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@41| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@55|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@83 |s#0@@55| |a#0@@41| |pos#0@@21|)) (- (|Seq#Length| |s#0@@55|) 1)) (forall ((|i#0@@48| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@48|) (< |i#0@@48| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@83 |s#0@@55| |a#0@@41| |pos#0@@21|) |i#0@@48|) (|Seq#Index| |s#0@@55| |i#0@@48|)))) :qid |Sequencesidfy.242:18| :skolemid |1827| :pattern ( (|Seq#Index| |s#0@@55| |i#0@@48|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@83 |s#0@@55| |a#0@@41| |pos#0@@21|) |i#0@@48|)) ))) (forall ((|i#1@@11| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@11|) (< |i#1@@11| (- (|Seq#Length| |s#0@@55|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@83 |s#0@@55| |a#0@@41| |pos#0@@21|) |i#1@@11|) (|Seq#Index| |s#0@@55| (+ |i#1@@11| 1))))) :qid |Sequencesidfy.243:18| :skolemid |1828| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@83 |s#0@@55| |a#0@@41| |pos#0@@21|) |i#1@@11|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@83 |s#0@@55| |a#0@@41| |pos#0@@21|) |pos#0@@21|) |a#0@@41|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@83 |s#0@@55| |a#0@@41| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |1829| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@83 |s#0@@55| |a#0@@41| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@84 T@U) (|s#0@@56| T@U) (|a#0@@42| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |s#0@@56|) (SeqType BoxType))) (= (type |a#0@@42|) BoxType)) (and ($Is |s#0@@56| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@42| Sequences._default.replace2with1$A@@2))) (= (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@84 |s#0@@56| |a#0@@42| |pos#0@@22|)  (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@56|) 1))))) :qid |unknown.0:0| :skolemid |1830| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@84 |s#0@@56| |a#0@@42| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@85 T@U) (|s#0@@57| T@U) (|a#0@@43| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |s#0@@57|) (SeqType BoxType))) (= (type |a#0@@43|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@57| |a#0@@43| |pos#0@@23|) (and (and ($Is |s#0@@57| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@43| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@57|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@85) |s#0@@57| |a#0@@43| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@57| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@43|)) (|Seq#Drop| |s#0@@57| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |1831| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@85) |s#0@@57| |a#0@@43| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@86 T@U) (|s#0@@58| T@U) (|a#0@@44| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |s#0@@58|) (SeqType BoxType))) (= (type |a#0@@44|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@58|) |a#0@@44| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@58| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@44| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@58|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@86) (Lit |s#0@@58|) |a#0@@44| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@58|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@44|)) (|Seq#Drop| (Lit |s#0@@58|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1832| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@86) (Lit |s#0@@58|) |a#0@@44| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@87 T@U) (|s#0@@59| T@U) (|a#0@@45| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |s#0@@59|) (SeqType BoxType))) (= (type |a#0@@45|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@59|) (Lit |a#0@@45|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@59| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@45| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@59|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@87) (Lit |s#0@@59|) (Lit |a#0@@45|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@59|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@45|))) (|Seq#Drop| (Lit |s#0@@59|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1833| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@87) (Lit |s#0@@59|) (Lit |a#0@@45|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@513 T@U) (arg1@@227 T@U) (arg2@@139 T@U) (arg3@@94 T@U) ) (! (= (type (Sequences.__default.concat arg0@@513 arg1@@227 arg2@@139 arg3@@94)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@513 arg1@@227 arg2@@139 arg3@@94)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@88 T@U) (|a#0@@46| T@U) (|b#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (= (type |b#0@@16|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@88) |a#0@@46| |b#0@@16|) (Sequences.__default.concat Sequences._default.concat$A $ly@@88 |a#0@@46| |b#0@@16|))) :qid |unknown.0:0| :skolemid |1834| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@88) |a#0@@46| |b#0@@16|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@89 T@U) (|a#0@@47| T@U) (|b#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@17|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@89 |a#0@@47| |b#0@@17|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@47| |b#0@@17|))) :qid |unknown.0:0| :skolemid |1835| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@89) |a#0@@47| |b#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@90 T@U) (|a#0@@48| T@U) (|b#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@90) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@48| |b#0@@18|) (and ($Is |a#0@@48| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@18| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@90 |a#0@@48| |b#0@@18|)) (+ (|Seq#Length| |a#0@@48|) (|Seq#Length| |b#0@@18|))) (forall ((|i#0@@49| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| (|Seq#Length| |a#0@@48|))) (= (|Seq#Index| |a#0@@48| |i#0@@49|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@90 |a#0@@48| |b#0@@18|) |i#0@@49|)))) :qid |Sequencesidfy.251:18| :skolemid |1836| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@90 |a#0@@48| |b#0@@18|) |i#0@@49|)) :pattern ( (|Seq#Index| |a#0@@48| |i#0@@49|)) ))) (forall ((|i#1@@12| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@12|) (< |i#1@@12| (|Seq#Length| |b#0@@18|))) (= (|Seq#Index| |b#0@@18| |i#1@@12|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@90 |a#0@@48| |b#0@@18|) (+ (|Seq#Length| |a#0@@48|) |i#1@@12|))))) :qid |Sequencesidfy.252:18| :skolemid |1837| :pattern ( (|Seq#Index| |b#0@@18| |i#1@@12|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@90 |a#0@@48| |b#0@@18|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |1838| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@90 |a#0@@48| |b#0@@18|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@91 T@U) (|a#0@@49| T@U) (|b#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@19|) (SeqType BoxType))) (and ($Is |a#0@@49| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@19| (TSeq Sequences._default.concat$A@@2)))) (= (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@91 |a#0@@49| |b#0@@19|) true)) :qid |unknown.0:0| :skolemid |1839| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@91 |a#0@@49| |b#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@92 T@U) (|a#0@@50| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@50| |b#0@@20|) (and ($Is |a#0@@50| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@20| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@92) |a#0@@50| |b#0@@20|) (|Seq#Append| |a#0@@50| |b#0@@20|))) :qid |unknown.0:0| :skolemid |1840| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@92) |a#0@@50| |b#0@@20|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@93 T@U) (|a#0@@51| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@51|) (Lit |b#0@@21|)) (and ($Is |a#0@@51| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@21| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@93) (Lit |a#0@@51|) (Lit |b#0@@21|)) (|Seq#Append| |a#0@@51| |b#0@@21|))) :qid |unknown.0:0| :weight 3 :skolemid |1841| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@93) (Lit |a#0@@51|) (Lit |b#0@@21|))) ))))
(assert (forall ((arg0@@514 T@U) (arg1@@228 T@U) (arg2@@140 T@U) (arg3@@95 T@U) (arg4@@70 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@514 arg1@@228 arg2@@140 arg3@@95 arg4@@70)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@514 arg1@@228 arg2@@140 arg3@@95 arg4@@70)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@94 T@U) (|a#0@@52| T@U) (|b#0@@22| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@22|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@94) |a#0@@52| |b#0@@22| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@94 |a#0@@52| |b#0@@22| |c#0@@3|))) :qid |unknown.0:0| :skolemid |1842| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@94) |a#0@@52| |b#0@@22| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@95 T@U) (|a#0@@53| T@U) (|b#0@@23| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (type |b#0@@23|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@95 |a#0@@53| |b#0@@23| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@53| |b#0@@23| |c#0@@4|))) :qid |unknown.0:0| :skolemid |1843| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@95) |a#0@@53| |b#0@@23| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@96 T@U) (|a#0@@54| T@U) (|b#0@@24| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@24|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@54| |b#0@@24| |c#0@@5|) (and (and ($Is |a#0@@54| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@24| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@96 |a#0@@54| |b#0@@24| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@54|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@50| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| (|Seq#Length| |a#0@@54|))) (= (|Seq#Index| |a#0@@54| |i#0@@50|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@96 |a#0@@54| |b#0@@24| |c#0@@5|) |i#0@@50|)))) :qid |Sequencesidfy.259:18| :skolemid |1844| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@96 |a#0@@54| |b#0@@24| |c#0@@5|) |i#0@@50|)) :pattern ( (|Seq#Index| |a#0@@54| |i#0@@50|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@96 |a#0@@54| |b#0@@24| |c#0@@5|) (|Seq#Length| |a#0@@54|)) |b#0@@24|)) (forall ((|i#1@@13| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@13|) (< |i#1@@13| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@13|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@96 |a#0@@54| |b#0@@24| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@54|) 1) |i#1@@13|))))) :qid |Sequencesidfy.261:18| :skolemid |1845| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@13|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@96 |a#0@@54| |b#0@@24| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |1846| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@96 |a#0@@54| |b#0@@24| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@97 T@U) (|a#0@@55| T@U) (|b#0@@25| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@25|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@55| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@25| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (= (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@97 |a#0@@55| |b#0@@25| |c#0@@6|) true)) :qid |unknown.0:0| :skolemid |1847| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@97 |a#0@@55| |b#0@@25| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@98 T@U) (|a#0@@56| T@U) (|b#0@@26| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@26|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@56| |b#0@@26| |c#0@@7|) (and (and ($Is |a#0@@56| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@26| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@98) |a#0@@56| |b#0@@26| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@56| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@26|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |1848| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@98) |a#0@@56| |b#0@@26| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@99 T@U) (|a#0@@57| T@U) (|b#0@@27| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@27|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@57|) |b#0@@27| (Lit |c#0@@8|)) (and (and ($Is |a#0@@57| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@27| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@99) (Lit |a#0@@57|) |b#0@@27| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@57| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@27|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |1849| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@99) (Lit |a#0@@57|) |b#0@@27| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@100 T@U) (|a#0@@58| T@U) (|b#0@@28| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@28|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@58|) (Lit |b#0@@28|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@58| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@28| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@100) (Lit |a#0@@58|) (Lit |b#0@@28|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@58| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@28|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |1850| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@100) (Lit |a#0@@58|) (Lit |b#0@@28|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@515 T@U) (arg1@@229 T@U) (arg2@@141 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@515 arg1@@229 arg2@@141)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@515 arg1@@229 arg2@@141)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@101 T@U) (|a#0@@59| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@101) |a#0@@59|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@101 |a#0@@59|))) :qid |unknown.0:0| :skolemid |1851| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@101) |a#0@@59|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@102 T@U) (|a#0@@60| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@102 |a#0@@60|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@60|))) :qid |unknown.0:0| :skolemid |1852| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@102) |a#0@@60|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@103 T@U) (|a#0@@61| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@61|) ($Is |a#0@@61| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@103 |a#0@@61|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |1853| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@103 |a#0@@61|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@104 T@U) (|a#0@@62| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) ($Is |a#0@@62| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (= (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@104 |a#0@@62|) true)) :qid |unknown.0:0| :skolemid |1854| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@104 |a#0@@62|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@105 T@U) (|a#0@@63| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@63|) ($Is |a#0@@63| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@63|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@63|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@63|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@63|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@105) |a#0@@63|) (ite (= (|Seq#Length| |a#0@@63|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@105 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@63|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@63|))))))) :qid |unknown.0:0| :skolemid |1855| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@105) |a#0@@63|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@106 T@U) (|a#0@@64| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@64|)) ($Is |a#0@@64| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@64|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@64|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@64|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@106) (Lit |a#0@@64|)) (ite (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@106) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@64|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@64|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1856| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@106) (Lit |a#0@@64|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@107 T@U) (|a#0@@65| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@107) |a#0@@65| |b#0@@29|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@107 |a#0@@65| |b#0@@29|))) :qid |unknown.0:0| :skolemid |1858| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@107) |a#0@@65| |b#0@@29|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@108 T@U) (|a#0@@66| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@30|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@108 |a#0@@66| |b#0@@30|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@66| |b#0@@30|))) :qid |unknown.0:0| :skolemid |1859| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@108) |a#0@@66| |b#0@@30|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@109 T@U) (|a#0@@67| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@67| |b#0@@31|) (and ($Is |a#0@@67| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@31| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@109 |a#0@@67| |b#0@@31|)) (<= (|Seq#Length| |a#0@@67|) (|Seq#Length| |b#0@@31|))) :qid |unknown.0:0| :skolemid |1860| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@109 |a#0@@67| |b#0@@31|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@110 T@U) (|a#0@@68| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (and ($Is |a#0@@68| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@32| (TSeq Sequences._default.IsPrefix$A@@2)))) (= (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@110 |a#0@@68| |b#0@@32|) true)) :qid |unknown.0:0| :skolemid |1861| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@110 |a#0@@68| |b#0@@32|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@111 T@U) (|a#0@@69| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@69| |b#0@@33|) (and ($Is |a#0@@69| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@33| (TSeq Sequences._default.IsPrefix$A@@3))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@111) |a#0@@69| |b#0@@33|)  (and (<= (|Seq#Length| |a#0@@69|) (|Seq#Length| |b#0@@33|)) (|Seq#Equal| |a#0@@69| (|Seq#Take| |b#0@@33| (|Seq#Length| |a#0@@69|)))))) :qid |unknown.0:0| :skolemid |1862| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@111) |a#0@@69| |b#0@@33|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@112 T@U) (|a#0@@70| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@70|) (Lit |b#0@@34|)) (and ($Is |a#0@@70| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@34| (TSeq Sequences._default.IsPrefix$A@@4))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@112) (Lit |a#0@@70|) (Lit |b#0@@34|))  (and (<= (|Seq#Length| (Lit |a#0@@70|)) (|Seq#Length| (Lit |b#0@@34|))) (|Seq#Equal| |a#0@@70| (|Seq#Take| (Lit |b#0@@34|) (|Seq#Length| (Lit |a#0@@70|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1863| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@112) (Lit |a#0@@70|) (Lit |b#0@@34|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@113 T@U) (|a#0@@71| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@113) |a#0@@71| |b#0@@35|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@113 |a#0@@71| |b#0@@35|))) :qid |unknown.0:0| :skolemid |1864| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@113) |a#0@@71| |b#0@@35|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@114 T@U) (|a#0@@72| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@114 |a#0@@72| |b#0@@36|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@72| |b#0@@36|))) :qid |unknown.0:0| :skolemid |1865| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@114) |a#0@@72| |b#0@@36|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@115 T@U) (|a#0@@73| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@73| |b#0@@37|) (and ($Is |a#0@@73| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@37| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |1866| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@115 |a#0@@73| |b#0@@37|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@116 T@U) (|a#0@@74| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (and ($Is |a#0@@74| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@38| (TSeq Sequences._default.IsSuffix$A@@2)))) (= (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@116 |a#0@@74| |b#0@@38|) true)) :qid |unknown.0:0| :skolemid |1867| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@116 |a#0@@74| |b#0@@38|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@117 T@U) (|a#0@@75| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@75| |b#0@@39|) (and ($Is |a#0@@75| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@39| (TSeq Sequences._default.IsSuffix$A@@3))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@117) |a#0@@75| |b#0@@39|)  (and (<= (|Seq#Length| |a#0@@75|) (|Seq#Length| |b#0@@39|)) (|Seq#Equal| |a#0@@75| (|Seq#Drop| |b#0@@39| (- (|Seq#Length| |b#0@@39|) (|Seq#Length| |a#0@@75|))))))) :qid |unknown.0:0| :skolemid |1868| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@117) |a#0@@75| |b#0@@39|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@118 T@U) (|a#0@@76| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@76|) (Lit |b#0@@40|)) (and ($Is |a#0@@76| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@40| (TSeq Sequences._default.IsSuffix$A@@4))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@118) (Lit |a#0@@76|) (Lit |b#0@@40|))  (and (<= (|Seq#Length| (Lit |a#0@@76|)) (|Seq#Length| (Lit |b#0@@40|))) (|Seq#Equal| |a#0@@76| (|Seq#Drop| (Lit |b#0@@40|) (- (|Seq#Length| (Lit |b#0@@40|)) (|Seq#Length| (Lit |a#0@@76|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1869| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@118) (Lit |a#0@@76|) (Lit |b#0@@40|))) ))))
(assert (forall ((arg0@@516 T@U) (arg1@@230 T@U) (arg2@@142 T@U) (arg3@@96 T@U) (arg4@@71 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@516 arg1@@230 arg2@@142 arg3@@96 arg4@@71)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@516 arg1@@230 arg2@@142 arg3@@96 arg4@@71)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@119 T@U) (|run#0@@66| T@U) (|needle#0| T@U) (|i#0@@51| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@119) |run#0@@66| |needle#0| |i#0@@51|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@119 |run#0@@66| |needle#0| |i#0@@51|))) :qid |unknown.0:0| :skolemid |1870| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@119) |run#0@@66| |needle#0| |i#0@@51|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@120 T@U) (|run#0@@67| T@U) (|needle#0@@0| T@U) (|i#0@@52| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@120 |run#0@@67| |needle#0@@0| |i#0@@52|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@67| |needle#0@@0| |i#0@@52|))) :qid |unknown.0:0| :skolemid |1871| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@120) |run#0@@67| |needle#0@@0| |i#0@@52|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@121 T@U) (|run#0@@68| T@U) (|needle#0@@1| T@U) (|i#0@@53| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |run#0@@68|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@68| |needle#0@@1| |i#0@@53|) (and (and ($Is |run#0@@68| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@53|) (<= |i#0@@53| (|Seq#Length| |run#0@@68|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@121 |run#0@@68| |needle#0@@1| |i#0@@53|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@121 |run#0@@68| |needle#0@@1| |i#0@@53|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@121 |run#0@@68| |needle#0@@1| |i#0@@53|)))) (|Seq#Length| |run#0@@68|))) (= (|Seq#Index| |run#0@@68| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@121 |run#0@@68| |needle#0@@1| |i#0@@53|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@121 |run#0@@68| |needle#0@@1| |i#0@@53|)) (forall ((|j#0@@0| Int) ) (!  (=> (and (<= |i#0@@53| |j#0@@0|) (< |j#0@@0| (|Seq#Length| |run#0@@68|))) (not (= (|Seq#Index| |run#0@@68| |j#0@@0|) |needle#0@@1|))) :qid |Sequencesidfy.341:32| :skolemid |1872| :pattern ( (|Seq#Index| |run#0@@68| |j#0@@0|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@121 |run#0@@68| |needle#0@@1| |i#0@@53|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1873| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@121 |run#0@@68| |needle#0@@1| |i#0@@53|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@122 T@U) (|run#0@@69| T@U) (|needle#0@@2| T@U) (|i#0@@54| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |run#0@@69|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@69| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (= (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@122 |run#0@@69| |needle#0@@2| |i#0@@54|)  (and (<= (LitInt 0) |i#0@@54|) (<= |i#0@@54| (|Seq#Length| |run#0@@69|))))) :qid |unknown.0:0| :skolemid |1874| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@122 |run#0@@69| |needle#0@@2| |i#0@@54|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@123 T@U) (|run#0@@70| T@U) (|needle#0@@3| T@U) (|i#0@@55| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |run#0@@70|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| |i#0@@55|) (and (and ($Is |run#0@@70| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@55|) (<= |i#0@@55| (|Seq#Length| |run#0@@70|)))))) (and (=> (not (= |i#0@@55| (|Seq#Length| |run#0@@70|))) (=> (not (= (|Seq#Index| |run#0@@70| |i#0@@55|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| (+ |i#0@@55| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@123) |run#0@@70| |needle#0@@3| |i#0@@55|) (ite (= |i#0@@55| (|Seq#Length| |run#0@@70|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@70| |i#0@@55|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@55|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@123 |run#0@@70| |needle#0@@3| (+ |i#0@@55| 1))))))) :qid |unknown.0:0| :skolemid |1875| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@123) |run#0@@70| |needle#0@@3| |i#0@@55|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@124 T@U) (|run#0@@71| T@U) (|needle#0@@4| T@U) (|i#0@@56| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |run#0@@71|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@56|)) (and (and ($Is |run#0@@71| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@56|)) (<= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@71|))))))) (and (=> (not (= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@71|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@56|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@56| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@124) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@56|)) (ite (= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@71|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@56|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@56|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@124) (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@56| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1876| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@124) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@56|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@125 T@U) (|run#0@@72| T@U) (|needle#0@@5| T@U) (|i#0@@57| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |run#0@@72|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@57|)) (and (and ($Is |run#0@@72| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@57|)) (<= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@72|))))))) (and (=> (not (= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@72|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@57|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@57| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@125) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@57|)) (ite (= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@72|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@57|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@57|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@125) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@57| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1877| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@125) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@57|))) ))))
(assert (forall ((arg0@@517 T@U) (arg1@@231 T@U) (arg2@@143 T@U) (arg3@@97 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@517 arg1@@231 arg2@@143 arg3@@97)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@517 arg1@@231 arg2@@143 arg3@@97)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@126 T@U) (|run#0@@73| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |run#0@@73|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@126) |run#0@@73| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@126 |run#0@@73| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |1878| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@126) |run#0@@73| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@127 T@U) (|run#0@@74| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |run#0@@74|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@127 |run#0@@74| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@74| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |1879| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@127) |run#0@@74| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@128 T@U) (|run#0@@75| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |run#0@@75|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@75| |needle#0@@8|) (and ($Is |run#0@@75| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@128 |run#0@@75| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@128 |run#0@@75| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@128 |run#0@@75| |needle#0@@8|)))) (|Seq#Length| |run#0@@75|))) (= (|Seq#Index| |run#0@@75| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@128 |run#0@@75| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@128 |run#0@@75| |needle#0@@8|)) (forall ((|i#0@@58| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| (|Seq#Length| |run#0@@75|))) (not (= (|Seq#Index| |run#0@@75| |i#0@@58|) |needle#0@@8|))) :qid |Sequencesidfy.351:32| :skolemid |1880| :pattern ( (|Seq#Index| |run#0@@75| |i#0@@58|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@128 |run#0@@75| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1881| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@128 |run#0@@75| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@129 T@U) (|run#0@@76| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |run#0@@76|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@76| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (= (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@129 |run#0@@76| |needle#0@@9|) true)) :qid |unknown.0:0| :skolemid |1882| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@129 |run#0@@76| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@130 T@U) (|run#0@@77| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |run#0@@77|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10|) (and ($Is |run#0@@77| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@130) |run#0@@77| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@77| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |1883| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@130) |run#0@@77| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@131 T@U) (|run#0@@78| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |run#0@@78|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11|) (and ($Is |run#0@@78| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@131) (Lit |run#0@@78|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@78|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1884| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@131) (Lit |run#0@@78|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@132 T@U) (|run#0@@79| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |run#0@@79|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|)) (and ($Is |run#0@@79| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@132) (Lit |run#0@@79|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1885| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@132) (Lit |run#0@@79|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@518 T@U) (arg1@@232 T@U) (arg2@@144 Int) (arg3@@98 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@518 arg1@@232 arg2@@144 arg3@@98)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@518 arg1@@232 arg2@@144 arg3@@98)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@133 T@U) (|length#0@@3| Int) (|v#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |v#0@@12|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@133) |length#0@@3| |v#0@@12|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@133 |length#0@@3| |v#0@@12|))) :qid |unknown.0:0| :skolemid |1886| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@133) |length#0@@3| |v#0@@12|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@134 T@U) (|length#0@@4| Int) (|v#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |v#0@@13|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@134 |length#0@@4| |v#0@@13|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@4| |v#0@@13|))) :qid |unknown.0:0| :skolemid |1887| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@134) |length#0@@4| |v#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@135 T@U) (|length#0@@5| Int) (|v#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |v#0@@14|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@5| |v#0@@14|) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@14| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@135 |length#0@@5| |v#0@@14|)) |length#0@@5|) (forall ((|i#0@@59| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@135 |length#0@@5| |v#0@@14|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@135 |length#0@@5| |v#0@@14|) |i#0@@59|) |v#0@@14|)) :qid |Sequencesidfy.358:18| :skolemid |1888| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@135 |length#0@@5| |v#0@@14|) |i#0@@59|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@135 |length#0@@5| |v#0@@14|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |1889| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@135 |length#0@@5| |v#0@@14|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@136 T@U) (|length#0@@6| Int) (|v#0@@15| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |v#0@@15|) BoxType)) (and (<= (LitInt 0) |length#0@@6|) ($IsBox |v#0@@15| Sequences._default.SeqOfLength$V@@2))) (= (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@136 |length#0@@6| |v#0@@15|) true)) :qid |unknown.0:0| :skolemid |1890| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@136 |length#0@@6| |v#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@137 T@U) (|length#0@@7| Int) (|v#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |v#0@@16|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@7| |v#0@@16|) (and (<= (LitInt 0) |length#0@@7|) ($IsBox |v#0@@16| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@7| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@7| 1) |v#0@@16|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@137) |length#0@@7| |v#0@@16|) (ite (= |length#0@@7| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@16|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@137 (- |length#0@@7| 1) |v#0@@16|)))))) :qid |unknown.0:0| :skolemid |1891| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@137) |length#0@@7| |v#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@138 T@U) (|length#0@@8| Int) (|v#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |v#0@@17|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@8|) |v#0@@17|) (and (<= (LitInt 0) |length#0@@8|) ($IsBox |v#0@@17| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@8|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@8| 1)) |v#0@@17|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@138) (LitInt |length#0@@8|) |v#0@@17|) (ite (= (LitInt |length#0@@8|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@17|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@138) (LitInt (- |length#0@@8| 1)) |v#0@@17|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1892| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@138) (LitInt |length#0@@8|) |v#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@139 T@U) (|length#0@@9| Int) (|v#0@@18| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |v#0@@18|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@9|) (Lit |v#0@@18|)) (and (<= (LitInt 0) |length#0@@9|) ($IsBox |v#0@@18| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@9|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@9| 1)) (Lit |v#0@@18|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@139) (LitInt |length#0@@9|) (Lit |v#0@@18|)) (ite (= (LitInt |length#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@18|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@139) (LitInt (- |length#0@@9| 1)) (Lit |v#0@@18|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1893| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@139) (LitInt |length#0@@9|) (Lit |v#0@@18|))) ))))
(assert (forall ((arg0@@519 T@U) (arg1@@233 T@U) (arg2@@145 T@U) (arg3@@99 Int) (arg4@@72 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@519 arg1@@233 arg2@@145 arg3@@99 arg4@@72)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@519 arg1@@233 arg2@@145 arg3@@99 arg4@@72)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@140 T@U) (|s#0@@60| T@U) (|i#0@@60| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |s#0@@60|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@140) |s#0@@60| |i#0@@60| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@140 |s#0@@60| |i#0@@60| |t#0|))) :qid |unknown.0:0| :skolemid |1894| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@140) |s#0@@60| |i#0@@60| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@141 T@U) (|s#0@@61| T@U) (|i#0@@61| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |s#0@@61|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@141 |s#0@@61| |i#0@@61| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@61| |i#0@@61| |t#0@@0|))) :qid |unknown.0:0| :skolemid |1895| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@141) |s#0@@61| |i#0@@61| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@142 T@U) (|s#0@@62| T@U) (|i#0@@62| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |s#0@@62|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@62| |i#0@@62| |t#0@@1|) (and (and (and ($Is |s#0@@62| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@62| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| (|Seq#Length| |s#0@@62|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@142 |s#0@@62| |i#0@@62| |t#0@@1|) (|Seq#Update| |s#0@@62| |i#0@@62| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@142 |s#0@@62| |i#0@@62| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |1896| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@142 |s#0@@62| |i#0@@62| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@143 T@U) (|s#0@@63| T@U) (|i#0@@63| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |s#0@@63|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@63| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (= (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@143 |s#0@@63| |i#0@@63| |t#0@@2|)  (and (< (+ |i#0@@63| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| (|Seq#Length| |s#0@@63|)))))) :qid |unknown.0:0| :skolemid |1897| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@143 |s#0@@63| |i#0@@63| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@144 T@U) (|s#0@@64| T@U) (|i#0@@64| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |s#0@@64|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@64| |i#0@@64| |t#0@@3|) (and (and (and ($Is |s#0@@64| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@64| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| (|Seq#Length| |s#0@@64|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@144) |s#0@@64| |i#0@@64| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@64| |i#0@@64|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@64| (+ |i#0@@64| 1))))) :qid |unknown.0:0| :skolemid |1898| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@144) |s#0@@64| |i#0@@64| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@145 T@U) (|s#0@@65| T@U) (|i#0@@65| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |s#0@@65|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@65|) (LitInt |i#0@@65|) |t#0@@4|) (and (and (and ($Is |s#0@@65| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@65|) (< |i#0@@65| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@65| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@65|)) (< |i#0@@65| (|Seq#Length| (Lit |s#0@@65|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@145) (Lit |s#0@@65|) (LitInt |i#0@@65|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@65|) (LitInt |i#0@@65|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@65|) (LitInt (+ |i#0@@65| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1899| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@145) (Lit |s#0@@65|) (LitInt |i#0@@65|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@146 T@U) (|s#0@@66| T@U) (|i#0@@66| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@66|) (LitInt |i#0@@66|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@66| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@66|) (< |i#0@@66| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@66| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@66|)) (< |i#0@@66| (|Seq#Length| (Lit |s#0@@66|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@146) (Lit |s#0@@66|) (LitInt |i#0@@66|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@66|) (LitInt |i#0@@66|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@66|) (LitInt (+ |i#0@@66| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1900| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@146) (Lit |s#0@@66|) (LitInt |i#0@@66|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@520 T@U) (arg1@@234 T@U) (arg2@@146 T@U) (arg3@@100 T@U) (arg4@@73 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@520 arg1@@234 arg2@@146 arg3@@100 arg4@@73)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@520 arg1@@234 arg2@@146 arg3@@100 arg4@@73)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@147 T@U) (|a#0@@77| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@147) LayerTypeType)) (= (type |a#0@@77|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@147) |a#0@@77| |b#0@@41|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@147 |a#0@@77| |b#0@@41|))) :qid |unknown.0:0| :skolemid |1901| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@147) |a#0@@77| |b#0@@41|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@148 T@U) (|a#0@@78| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@148) LayerTypeType)) (= (type |a#0@@78|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@148 |a#0@@78| |b#0@@42|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@78| |b#0@@42|))) :qid |unknown.0:0| :skolemid |1902| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@148) |a#0@@78| |b#0@@42|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@149 T@U) (|a#0@@79| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@149) LayerTypeType)) (= (type |a#0@@79|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@79| |b#0@@43|) (and (and ($Is |a#0@@79| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@43| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@79|) (|Seq#Length| |b#0@@43|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@149 |a#0@@79| |b#0@@43|)) (|Seq#Length| |a#0@@79|)) (forall ((|i#0@@67| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@67|) (< |i#0@@67| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@149 |a#0@@79| |b#0@@43|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@149 |a#0@@79| |b#0@@43|) |i#0@@67|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@79| |i#0@@67|) (|Seq#Index| |b#0@@43| |i#0@@67|))))) :qid |Sequencesidfy.379:20| :skolemid |1903| :pattern ( (|Seq#Index| |b#0@@43| |i#0@@67|)) :pattern ( (|Seq#Index| |a#0@@79| |i#0@@67|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@149 |a#0@@79| |b#0@@43|) |i#0@@67|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@149 |a#0@@79| |b#0@@43|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |1904| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@149 |a#0@@79| |b#0@@43|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@150 T@U) (|a#0@@80| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@150) LayerTypeType)) (= (type |a#0@@80|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (and ($Is |a#0@@80| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@44| (TSeq Sequences._default.Zip$B@@2)))) (= (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@150 |a#0@@80| |b#0@@44|) (= (|Seq#Length| |a#0@@80|) (|Seq#Length| |b#0@@44|)))) :qid |unknown.0:0| :skolemid |1905| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@150 |a#0@@80| |b#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@151 T@U) (|a#0@@81| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@151) LayerTypeType)) (= (type |a#0@@81|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@81| |b#0@@45|) (and (and ($Is |a#0@@81| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@45| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@81|) (|Seq#Length| |b#0@@45|))))) (and (=> (not (= (|Seq#Length| |a#0@@81|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@81|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@45|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@81|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@45|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@81|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@45|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@151) |a#0@@81| |b#0@@45|) (ite (= (|Seq#Length| |a#0@@81|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@151 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@81|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@45|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@81|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@45|))))))))) :qid |unknown.0:0| :skolemid |1906| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@151) |a#0@@81| |b#0@@45|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@152 T@U) (|a#0@@82| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@152) LayerTypeType)) (= (type |a#0@@82|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@82|) (Lit |b#0@@46|)) (and (and ($Is |a#0@@82| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@46| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@82|)) (|Seq#Length| (Lit |b#0@@46|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@82|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@82|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@46|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@82|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@46|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@82|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@46|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@152) (Lit |a#0@@82|) (Lit |b#0@@46|)) (ite (= (|Seq#Length| (Lit |a#0@@82|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@152) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@82|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@46|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@82|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@46|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1907| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@152) (Lit |a#0@@82|) (Lit |b#0@@46|))) ))))
(assert (forall ((arg0@@521 T@U) (arg1@@235 T@U) (arg2@@147 T@U) (arg3@@101 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@521 arg1@@235 arg2@@147 arg3@@101)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@521 arg1@@235 arg2@@147 arg3@@101)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@153 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@153) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@153) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@153 |z#0|))) :qid |unknown.0:0| :skolemid |1908| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@153) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@154 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@154) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@154 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |1909| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@154) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@155 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@155) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@155 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@155 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@155 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@68| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@68|) (< |i#0@@68| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@155 |z#0@@1|))) |i#0@@68|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@155 |z#0@@1|))) |i#0@@68|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@68|))))) :qid |Sequencesidfy.387:20| :skolemid |1910| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@68|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@155 |z#0@@1|))) |i#0@@68|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@155 |z#0@@1|))) |i#0@@68|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@155 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |1911| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@155 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@156 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@156) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (= (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@156 |z#0@@2|) true)) :qid |unknown.0:0| :skolemid |1912| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@156 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@157 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@157) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@157) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@47| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@157 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@83| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@157 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@83| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@47| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |1913| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@157) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@158 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@158) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@158) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@158) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@158) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1914| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@158) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@522 T@U) (arg1@@236 T@U) (arg2@@148 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@522 arg1@@236 arg2@@148)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@522 arg1@@236 arg2@@148)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@159 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@159) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@159 |seqs#0|))) :qid |unknown.0:0| :skolemid |1915| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@159) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@160 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@160 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |1916| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@160) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@161 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@161 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@69| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@69|) (< |i#0@@69| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@161 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@161 |seqs#0@@1|) |i#0@@69|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@69|)))))) :qid |Sequencesidfy.409:20| :skolemid |1917| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@69|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@161 |seqs#0@@1|) |i#0@@69|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@161 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |1918| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@161 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@162 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (= (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@162 |seqs#0@@2|) true)) :qid |unknown.0:0| :skolemid |1919| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@162 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@163 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@163) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@163 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |1920| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@163) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@164 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@164) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@164) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1921| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@164) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@165 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@165) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@165) |shape#0|) (Sequences.__default.FlattenLength $ly@@165 |shape#0|))) :qid |Sequencesidfy.420:22| :skolemid |1922| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@165) |shape#0|)) )))
(assert (forall (($ly@@166 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@166) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@166 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |Sequencesidfy.420:22| :skolemid |1923| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@166) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@167 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@167) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@167 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@167 |shape#0@@1|)))) :qid |Sequencesidfy.420:22| :skolemid |1924| :pattern ( (Sequences.__default.FlattenLength $ly@@167 |shape#0@@1|)) ))))
(assert (forall (($ly@@168 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@168) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (= (|Sequences.__default.FlattenLength#requires| $ly@@168 |shape#0@@2|) true)) :qid |Sequencesidfy.420:22| :skolemid |1925| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@168 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@169 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@169) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@169) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@169 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |Sequencesidfy.420:22| :skolemid |1926| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@169) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@170 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@170) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@170) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@170) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |Sequencesidfy.420:22| :weight 3 :skolemid |1927| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@170) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@523 T@U) (arg1@@237 T@U) (arg2@@149 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@523 arg1@@237 arg2@@149)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@523 arg1@@237 arg2@@149)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@171 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@171) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@171 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |1928| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@171) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@172 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@172 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |1929| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@172) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@173 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@173 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@173 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@173 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |1930| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@173 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@174 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@174) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (= (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@174 |seqs#0@@8|) true)) :qid |unknown.0:0| :skolemid |1931| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@174 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@175 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@175) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@175) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@175 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |1932| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@175) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@176 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@176) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@176) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@176) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1933| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@176) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@70| Int) (|j#0@@1| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@70| |j#0@@1|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@70|)) (<= (LitInt 0) |j#0@@1|)) (and (< |i#0@@70| (|Seq#Length| |shape#0@@5|)) (< |j#0@@1| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@70|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@70| |j#0@@1|))) :qid |Sequencesidfy.489:25| :skolemid |1934| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@70| |j#0@@1|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@71| Int) (|j#0@@2| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@71|)) (<= (LitInt 0) |j#0@@2|)) (= (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@71| |j#0@@2|)  (and (< |i#0@@71| (|Seq#Length| |shape#0@@6|)) (< |j#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@71|)))))))) :qid |Sequencesidfy.489:25| :skolemid |1935| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@71| |j#0@@2|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@72| Int) (|j#0@@3| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@72| |j#0@@3|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@72|)) (<= (LitInt 0) |j#0@@3|)) (and (< |i#0@@72| (|Seq#Length| |shape#0@@7|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@72|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@72|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@72| |j#0@@3|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@72|)) |j#0@@3|)))) :qid |Sequencesidfy.489:25| :skolemid |1936| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@72| |j#0@@3|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@73| Int) (|j#0@@4| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@73|) (LitInt |j#0@@4|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@73|)) (<= (LitInt 0) |j#0@@4|)) (and (< |i#0@@73| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@73|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@73|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@73|) (LitInt |j#0@@4|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@73|)))) |j#0@@4|)))) :qid |Sequencesidfy.489:25| :weight 3 :skolemid |1937| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@73|) (LitInt |j#0@@4|))) ))))
(assert (forall ((arg0@@524 T@U) (arg1@@238 T@U) (arg2@@150 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@524 arg1@@238 arg2@@150)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@524 arg1@@238 arg2@@150)) )))
(assert (forall (($ly@@177 T@U) (|shape#0@@9| T@U) (|i#0@@74| Int) ) (!  (=> (and (= (type $ly@@177) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@177) |shape#0@@9| |i#0@@74|) (Sequences.__default.UnflattenIndex $ly@@177 |shape#0@@9| |i#0@@74|))) :qid |Sequencesidfy.496:12| :skolemid |1938| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@177) |shape#0@@9| |i#0@@74|)) )))
(assert (forall (($ly@@178 T@U) (|shape#0@@10| T@U) (|i#0@@75| Int) ) (!  (=> (and (= (type $ly@@178) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@178 |shape#0@@10| |i#0@@75|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@75|))) :qid |Sequencesidfy.496:12| :skolemid |1939| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@178) |shape#0@@10| |i#0@@75|)) )))
(assert  (=> true (forall (($ly@@179 T@U) (|shape#0@@11| T@U) (|i#0@@76| Int) ) (!  (=> (and (and (= (type $ly@@179) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@76|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@76|)) (< |i#0@@76| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@179 |shape#0@@11| |i#0@@76|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |Sequencesidfy.496:12| :skolemid |1940| :pattern ( (Sequences.__default.UnflattenIndex $ly@@179 |shape#0@@11| |i#0@@76|)) ))))
(assert (forall (($ly@@180 T@U) (|shape#0@@12| T@U) (|i#0@@77| Int) ) (!  (=> (and (and (= (type $ly@@180) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@77|))) (= (|Sequences.__default.UnflattenIndex#requires| $ly@@180 |shape#0@@12| |i#0@@77|) (< |i#0@@77| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)))) :qid |Sequencesidfy.496:12| :skolemid |1941| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@180 |shape#0@@12| |i#0@@77|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@181 T@U) (|shape#0@@13| T@U) (|i#0@@78| Int) ) (!  (=> (and (and (= (type $ly@@181) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@78|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@78|)) (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@78|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@78|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@181) |shape#0@@13| |i#0@@78|) (ite (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@181 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@78|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |Sequencesidfy.496:12| :skolemid |1942| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@181) |shape#0@@13| |i#0@@78|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@182 T@U) (|shape#0@@14| T@U) (|i#0@@79| Int) ) (!  (=> (and (and (= (type $ly@@182) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@79|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@79|)) (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@79|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@79|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@182) (Lit |shape#0@@14|) (LitInt |i#0@@79|)) (ite (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@182) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@79|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |Sequencesidfy.496:12| :weight 3 :skolemid |1943| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@182) (Lit |shape#0@@14|) (LitInt |i#0@@79|))) ))))
(assert (forall (($ly@@183 T@U) (|s#0@@67| T@U) ) (!  (=> (and (= (type $ly@@183) LayerTypeType) (= (type |s#0@@67|) (SeqType BoxType))) (= (Sequences.__default.seqMax ($LS $ly@@183) |s#0@@67|) (Sequences.__default.seqMax $ly@@183 |s#0@@67|))) :qid |Sequencesidfy.606:22| :skolemid |1944| :pattern ( (Sequences.__default.seqMax ($LS $ly@@183) |s#0@@67|)) )))
(assert (forall (($ly@@184 T@U) (|s#0@@68| T@U) ) (!  (=> (and (= (type $ly@@184) LayerTypeType) (= (type |s#0@@68|) (SeqType BoxType))) (= (Sequences.__default.seqMax $ly@@184 |s#0@@68|) (Sequences.__default.seqMax $LZ |s#0@@68|))) :qid |Sequencesidfy.606:22| :skolemid |1945| :pattern ( (Sequences.__default.seqMax (AsFuelBottom $ly@@184) |s#0@@68|)) )))
(assert  (=> true (forall (($ly@@185 T@U) (|s#0@@69| T@U) ) (!  (=> (and (and (= (type $ly@@185) LayerTypeType) (= (type |s#0@@69|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@69|) (and ($Is |s#0@@69| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@69|))))) (and (forall ((|k#0| T@U) ) (!  (=> (and (and (= (type |k#0|) intType) true) (|Seq#Contains| |s#0@@69| ($Box |k#0|))) (>= (Sequences.__default.seqMax $ly@@185 |s#0@@69|) (U_2_int |k#0|))) :qid |Sequencesidfy.608:20| :skolemid |1946| :pattern ( (|Seq#Contains| |s#0@@69| ($Box |k#0|))) )) (|Seq#Contains| |s#0@@69| ($Box (int_2_U (Sequences.__default.seqMax $ly@@185 |s#0@@69|)))))) :qid |Sequencesidfy.606:22| :skolemid |1947| :pattern ( (Sequences.__default.seqMax $ly@@185 |s#0@@69|)) ))))
(assert (forall (($ly@@186 T@U) (|s#0@@70| T@U) ) (!  (=> (and (and (= (type $ly@@186) LayerTypeType) (= (type |s#0@@70|) (SeqType BoxType))) ($Is |s#0@@70| (TSeq TInt))) (= (|Sequences.__default.seqMax#requires| $ly@@186 |s#0@@70|) (< 0 (|Seq#Length| |s#0@@70|)))) :qid |Sequencesidfy.606:22| :skolemid |1948| :pattern ( (|Sequences.__default.seqMax#requires| $ly@@186 |s#0@@70|)) )))
(assert  (=> true (forall (($ly@@187 T@U) (|s#0@@71| T@U) ) (!  (=> (and (and (= (type $ly@@187) LayerTypeType) (= (type |s#0@@71|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@71|) (and ($Is |s#0@@71| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@71|))))) (and (=> (not (= (|Seq#Length| |s#0@@71|) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt |s#0@@71|) (|Sequences.__default.seqMax#canCall| (Sequences.__default.DropLast TInt |s#0@@71|))) (|Sequences.__default.Last#canCall| TInt |s#0@@71|)) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax $ly@@187 (Sequences.__default.DropLast TInt |s#0@@71|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@71|)))))) (= (Sequences.__default.seqMax ($LS $ly@@187) |s#0@@71|) (ite (= (|Seq#Length| |s#0@@71|) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@71| (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax $ly@@187 (Sequences.__default.DropLast TInt |s#0@@71|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@71|)))))))) :qid |Sequencesidfy.606:22| :skolemid |1949| :pattern ( (Sequences.__default.seqMax ($LS $ly@@187) |s#0@@71|)) ))))
(assert  (=> true (forall (($ly@@188 T@U) (|s#0@@72| T@U) ) (!  (=> (and (and (= (type $ly@@188) LayerTypeType) (= (type |s#0@@72|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| (Lit |s#0@@72|)) (and ($Is |s#0@@72| (TSeq TInt)) (< 0 (|Seq#Length| (Lit |s#0@@72|)))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@72|)) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt (Lit |s#0@@72|)) (|Sequences.__default.seqMax#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@72|))))) (|Sequences.__default.Last#canCall| TInt (Lit |s#0@@72|))) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax ($LS $ly@@188) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@72|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@72|)))))))) (= (Sequences.__default.seqMax ($LS $ly@@188) (Lit |s#0@@72|)) (ite (= (|Seq#Length| (Lit |s#0@@72|)) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@72|) (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax ($LS $ly@@188) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@72|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@72|)))))))))) :qid |Sequencesidfy.606:22| :weight 3 :skolemid |1950| :pattern ( (Sequences.__default.seqMax ($LS $ly@@188) (Lit |s#0@@72|))) ))))
(assert (forall ((arg0@@525 T@U) (arg1@@239 T@U) (arg2@@151 Int) (arg3@@102 T@U) ) (! (= (type (Sequences.__default.fill arg0@@525 arg1@@239 arg2@@151 arg3@@102)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@525 arg1@@239 arg2@@151 arg3@@102)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@189 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@189) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@189 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |1951| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@189) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@190 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@190 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |1952| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@190) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@191 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@191 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@80| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@191 |n#0@@7| |t#0@@8|) |i#0@@80|) |t#0@@8|)) :qid |Sequencesidfy.695:18| :skolemid |1953| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@191 |n#0@@7| |t#0@@8|) |i#0@@80|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@191 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |1954| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@191 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@192 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (= (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@192 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0)))) :qid |unknown.0:0| :skolemid |1955| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@192 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@193 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@193) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@193 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |1956| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@193) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@194 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@194) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@194) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@194) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1957| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@194) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@195 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@195) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@195) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@195) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1958| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@195) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (= (TagFamily Tclass.ValueMessage.__default) tytagFamily$_default))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (= ($Is $o@@34 Tclass.ValueMessage.__default)  (or (= $o@@34 null) (= (dtype $o@@34) Tclass.ValueMessage.__default)))) :qid |unknown.0:0| :skolemid |1959| :pattern ( ($Is $o@@34 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@35 T@U) ($h@@87 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@87) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@35 Tclass.ValueMessage.__default $h@@87)  (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@87 $o@@35) alloc))))) :qid |unknown.0:0| :skolemid |1960| :pattern ( ($IsAlloc $o@@35 Tclass.ValueMessage.__default $h@@87)) )))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert (= (TagFamily Tclass.ValueMessage.Delta) tytagFamily$Delta))
(assert (= (type ValueMessage.__default.NopDelta) BoxType))
(assert  (=> true (=> true ($IsBox ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert (= |ValueMessage.__default.NopDelta#requires| true))
(assert (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueMessage.__default.DefaultValue#requires| true))
(assert (forall ((arg0@@526 T@U) (arg1@@240 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@526 arg1@@240)) BoxType) :qid |funType:ValueMessage.__default.CombineDeltas| :pattern ( (ValueMessage.__default.CombineDeltas arg0@@526 arg1@@240)) )))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) BoxType) (= (type |olddelta#0|) BoxType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($IsBox |newdelta#0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (= |newdelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (= |olddelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($IsBox (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta))) :qid |MessageidfyValueMessage.29:33| :skolemid |1961| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|)) ))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) BoxType) (= (type |olddelta#0@@0|) BoxType)) (and ($IsBox |newdelta#0@@0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0@@0| Tclass.ValueMessage.Delta))) (= (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true)) :qid |MessageidfyValueMessage.29:33| :skolemid |1962| :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)) )))
(assert (forall ((arg0@@527 T@U) (arg1@@241 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@527 arg1@@241)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.ApplyDelta| :pattern ( (ValueMessage.__default.ApplyDelta arg0@@527 arg1@@241)) )))
(assert  (=> true (forall ((|delta#0| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0|) BoxType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0| |value#0|) (and ($IsBox |delta#0| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (= |delta#0| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) Tclass.ValueType.Value))) :qid |MessageidfyValueMessage.33:30| :skolemid |1963| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0| |value#0|)) ))))
(assert (forall ((|delta#0@@0| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@0|) BoxType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($IsBox |delta#0@@0| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (= (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|) true)) :qid |MessageidfyValueMessage.33:30| :skolemid |1964| :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)) )))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (= (TagFamily Tclass.ValueMessage.Message) tytagFamily$Message))
(assert (forall ((bx@@157 T@U) ) (!  (=> (and (= (type bx@@157) BoxType) ($IsBox bx@@157 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@157)) bx@@157) ($Is ($Unbox DatatypeTypeType bx@@157) Tclass.ValueMessage.Message))) :qid |unknown.0:0| :skolemid |1965| :pattern ( ($IsBox bx@@157 Tclass.ValueMessage.Message)) )))
(assert (forall ((arg0@@528 T@U) ) (! (= (type (ValueMessage.__default.bytestring__to__Message arg0@@528)) DatatypeTypeType) :qid |funType:ValueMessage.__default.bytestring__to__Message| :pattern ( (ValueMessage.__default.bytestring__to__Message arg0@@528)) )))
(assert  (=> true (forall ((|s#0@@73| T@U) ) (!  (=> (and (= (type |s#0@@73|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@73|) (and ($Is |s#0@@73| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@73|) 4294967296)))) ($Is (ValueMessage.__default.bytestring__to__Message |s#0@@73|) Tclass.ValueMessage.Message)) :qid |Messageidfy.105:41| :skolemid |1966| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@73|)) ))))
(assert (forall ((|s#0@@74| T@U) ) (!  (=> (and (= (type |s#0@@74|) (SeqType BoxType)) ($Is |s#0@@74| (TSeq Tclass.NativeTypes.byte))) (= (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@74|) (< (|Seq#Length| |s#0@@74|) 4294967296))) :qid |Messageidfy.105:41| :skolemid |1967| :pattern ( (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@74|)) )))
(assert  (=> true (forall ((|msg#0| T@U) ) (!  (=> (and (= (type |msg#0|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0|) ($Is |msg#0| Tclass.ValueMessage.Message))) true) :qid |Messageidfy.118:30| :skolemid |1968| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0|)) ))))
(assert (forall ((|msg#0@@0| T@U) ) (!  (=> (and (= (type |msg#0@@0|) DatatypeTypeType) ($Is |msg#0@@0| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|) true)) :qid |Messageidfy.118:30| :skolemid |1969| :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)) )))
(assert  (=> true (forall ((|msgs#0| T@U) ) (!  (=> (and (= (type |msgs#0|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0|) ($Is |msgs#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |Messageidfy.123:33| :skolemid |1970| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0|)) ))))
(assert (forall ((|msgs#0@@0| T@U) ) (!  (=> (and (= (type |msgs#0@@0|) (SeqType BoxType)) ($Is |msgs#0@@0| (TSeq Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|) true)) :qid |Messageidfy.123:33| :skolemid |1971| :pattern ( (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)) )))
(assert (forall ((arg0@@529 T@U) ) (! (= (type (ValueMessage.__default.Message__to__bytestring arg0@@529)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.Message__to__bytestring| :pattern ( (ValueMessage.__default.Message__to__bytestring arg0@@529)) )))
(assert  (=> true (forall ((|msg#0@@1| T@U) ) (!  (=> (and (= (type |msg#0@@1|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@1|) (and ($Is |msg#0@@1| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@1|)))) ($Is (ValueMessage.__default.Message__to__bytestring |msg#0@@1|) (TSeq Tclass.NativeTypes.byte))) :qid |Messageidfy.128:41| :skolemid |1972| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@1|)) ))))
(assert (forall ((|msg#0@@2| T@U) ) (!  (=> (and (= (type |msg#0@@2|) DatatypeTypeType) ($Is |msg#0@@2| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|) (ValueMessage.Message.Define_q |msg#0@@2|))) :qid |Messageidfy.128:41| :skolemid |1973| :pattern ( (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|)) )))
(assert (forall ((arg0@@530 T@U) (arg1@@242 T@U) ) (! (= (type (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@530 arg1@@242)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.messageSeq__to__bytestringSeq| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@530 arg1@@242)) )))
(assert (forall (($ly@@196 T@U) (|msgs#0@@1| T@U) ) (!  (=> (and (= (type $ly@@196) LayerTypeType) (= (type |msgs#0@@1|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@196) |msgs#0@@1|) (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@196 |msgs#0@@1|))) :qid |Messageidfy.134:12| :skolemid |1974| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@196) |msgs#0@@1|)) )))
(assert (forall (($ly@@197 T@U) (|msgs#0@@2| T@U) ) (!  (=> (and (= (type $ly@@197) LayerTypeType) (= (type |msgs#0@@2|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@197 |msgs#0@@2|) (ValueMessage.__default.messageSeq__to__bytestringSeq $LZ |msgs#0@@2|))) :qid |Messageidfy.134:12| :skolemid |1975| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq (AsFuelBottom $ly@@197) |msgs#0@@2|)) )))
(assert  (=> true (forall (($ly@@198 T@U) (|msgs#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@198) LayerTypeType) (= (type |msgs#0@@3|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@3|) (and ($Is |msgs#0@@3| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@3|)))) (and (and (= (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@198 |msgs#0@@3|)) (|Seq#Length| |msgs#0@@3|)) (forall ((|i#0@@81| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@198 |msgs#0@@3|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@198 |msgs#0@@3|) |i#0@@81|)) (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@3| |i#0@@81|))))) :qid |Messageidfy.137:20| :skolemid |1976| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@3| |i#0@@81|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@198 |msgs#0@@3|) |i#0@@81|))) ))) ($Is (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@198 |msgs#0@@3|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |Messageidfy.134:12| :skolemid |1977| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@198 |msgs#0@@3|)) ))))
(assert (forall (($ly@@199 T@U) (|msgs#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@199) LayerTypeType) (= (type |msgs#0@@4|) (SeqType BoxType))) ($Is |msgs#0@@4| (TSeq Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@199 |msgs#0@@4|) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@4|))) :qid |Messageidfy.134:12| :skolemid |1978| :pattern ( (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@199 |msgs#0@@4|)) )))
(assert (forall ((arg0@@531 T@U) (arg1@@243 T@U) ) (! (= (type (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@531 arg1@@243)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.bytestringSeq__to__MessageSeq| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@531 arg1@@243)) )))
(assert (forall (($ly@@200 T@U) (|strings#0| T@U) ) (!  (=> (and (= (type $ly@@200) LayerTypeType) (= (type |strings#0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@200) |strings#0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@200 |strings#0|))) :qid |Messageidfy.145:12| :skolemid |1979| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@200) |strings#0|)) )))
(assert (forall (($ly@@201 T@U) (|strings#0@@0| T@U) ) (!  (=> (and (= (type $ly@@201) LayerTypeType) (= (type |strings#0@@0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@201 |strings#0@@0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $LZ |strings#0@@0|))) :qid |Messageidfy.145:12| :skolemid |1980| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq (AsFuelBottom $ly@@201) |strings#0@@0|)) )))
(assert  (=> true (forall (($ly@@202 T@U) (|strings#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@202) LayerTypeType) (= (type |strings#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@1|) (and ($Is |strings#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#0@@82| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| (|Seq#Length| |strings#0@@1|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@82|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |1981| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@82|))) ))))) (and (and (= (|Seq#Length| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@202 |strings#0@@1|)) (|Seq#Length| |strings#0@@1|)) (forall ((|i#1@@14| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@14|) (< |i#1@@14| (|Seq#Length| |strings#0@@1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@202 |strings#0@@1|) |i#1@@14|)) (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@14|))))) :qid |Messageidfy.148:20| :skolemid |1982| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@14|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@202 |strings#0@@1|) |i#1@@14|))) ))) ($Is (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@202 |strings#0@@1|) (TSeq Tclass.ValueMessage.Message)))) :qid |Messageidfy.145:12| :skolemid |1983| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@202 |strings#0@@1|)) ))))
(assert (forall (($ly@@203 T@U) (|strings#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@203) LayerTypeType) (= (type |strings#0@@2|) (SeqType BoxType))) ($Is |strings#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@203 |strings#0@@2|) (forall ((|i#2@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@5|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |1984| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@5|))) )))) :qid |Messageidfy.145:12| :skolemid |1985| :pattern ( (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@203 |strings#0@@2|)) )))
(assert (forall ((arg0@@532 T@U) (arg1@@244 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@532 arg1@@244)) DatatypeTypeType) :qid |funType:ValueMessage.__default.Merge| :pattern ( (ValueMessage.__default.Merge arg0@@532 arg1@@244)) )))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message)) :qid |MessageidfyValueMessage.36:25| :skolemid |1990| :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|)) ))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true)) :qid |MessageidfyValueMessage.36:25| :skolemid |1991| :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)) )))
(assert  (and (and (and (forall ((arg0@@533 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@533)) (SeqType BoxType)) :qid |funType:ValueMessage.Message.value| :pattern ( (ValueMessage.Message.value arg0@@533)) )) (forall ((arg0@@534 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@534)) BoxType) :qid |funType:ValueMessage.Message.delta| :pattern ( (ValueMessage.Message.delta arg0@@534)) ))) (forall ((arg0@@535 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@535)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Define| :pattern ( (|#ValueMessage.Message.Define| arg0@@535)) ))) (forall ((arg0@@536 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@536)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Update| :pattern ( (|#ValueMessage.Message.Update| arg0@@536)) ))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#1| |value#1|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#1| |olddelta#1|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#0| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| |newvalue#0|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#0@@1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|delta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0@@1|)))) (let ((|olddelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|newdelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|))))))))) :qid |MessageidfyValueMessage.36:25| :skolemid |1992| :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|)) ))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#3| |value#3|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#3| |olddelta#3|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| |newvalue#2|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|delta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#2| |value#2|)))) (let ((|olddelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|newdelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#2| |olddelta#2|))))))))) :qid |MessageidfyValueMessage.36:25| :weight 3 :skolemid |1993| :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|))) ))))
(assert (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert (= (type ValueMessage.__default.DefineDefault) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefineDefault Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.DefineDefault#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert (forall ((|a#0#0#0@@0| T@U) ) (!  (=> (= (type |a#0#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@0|)) |##ValueMessage.Message.Define|)) :qid |MessageidfyValueMessage.26:14| :skolemid |1994| :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@0|)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (= (type d@@30) DatatypeTypeType) (= (ValueMessage.Message.Define_q d@@30) (= (DatatypeCtorId d@@30) |##ValueMessage.Message.Define|))) :qid |unknown.0:0| :skolemid |1995| :pattern ( (ValueMessage.Message.Define_q d@@30)) )))
(assert (forall ((d@@31 T@U) ) (!  (=> (and (= (type d@@31) DatatypeTypeType) (ValueMessage.Message.Define_q d@@31)) (exists ((|a#1#0#0@@0| T@U) ) (!  (and (= (type |a#1#0#0@@0|) (SeqType BoxType)) (= d@@31 (|#ValueMessage.Message.Define| |a#1#0#0@@0|))) :qid |MessageidfyValueMessage.26:14| :skolemid |1996| :no-pattern (type |a#1#0#0@@0|) :no-pattern (U_2_int |a#1#0#0@@0|) :no-pattern (U_2_bool |a#1#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1997| :pattern ( (ValueMessage.Message.Define_q d@@31)) )))
(assert (forall ((|a#2#0#0@@0| T@U) ) (!  (=> (= (type |a#2#0#0@@0|) (SeqType BoxType)) (= ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@0|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@0| Tclass.ValueType.Value))) :qid |MessageidfyValueMessage.26:14| :skolemid |1998| :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@0|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#3#0#0@@0| T@U) ($h@@88 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@0|) (SeqType BoxType)) (= (type $h@@88) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@88)) (= ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@0|) Tclass.ValueMessage.Message $h@@88) ($IsAlloc |a#3#0#0@@0| Tclass.ValueType.Value $h@@88))) :qid |MessageidfyValueMessage.26:14| :skolemid |1999| :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@0|) Tclass.ValueMessage.Message $h@@88)) )))
(assert (forall ((d@@32 T@U) ($h@@89 T@U) ) (!  (=> (and (and (= (type d@@32) DatatypeTypeType) (= (type $h@@89) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@89) (and (ValueMessage.Message.Define_q d@@32) ($IsAlloc d@@32 Tclass.ValueMessage.Message $h@@89)))) ($IsAlloc (ValueMessage.Message.value d@@32) Tclass.ValueType.Value $h@@89)) :qid |unknown.0:0| :skolemid |2000| :pattern ( ($IsAlloc (ValueMessage.Message.value d@@32) Tclass.ValueType.Value $h@@89)) )))
(assert (forall ((|a#4#0#0@@0| T@U) ) (!  (=> (= (type |a#4#0#0@@0|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@0|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@0|)))) :qid |MessageidfyValueMessage.26:14| :skolemid |2001| :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@0|))) )))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) |a#5#0#0@@1|)) :qid |MessageidfyValueMessage.26:14| :skolemid |2002| :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) )))
(assert (forall ((|a#6#0#0@@1| T@U) ) (!  (=> (= (type |a#6#0#0@@1|) BoxType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) |##ValueMessage.Message.Update|)) :qid |MessageidfyValueMessage.27:14| :skolemid |2003| :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (= (type d@@33) DatatypeTypeType) (= (ValueMessage.Message.Update_q d@@33) (= (DatatypeCtorId d@@33) |##ValueMessage.Message.Update|))) :qid |unknown.0:0| :skolemid |2004| :pattern ( (ValueMessage.Message.Update_q d@@33)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (and (= (type d@@34) DatatypeTypeType) (ValueMessage.Message.Update_q d@@34)) (exists ((|a#7#0#0@@1| T@U) ) (!  (and (= (type |a#7#0#0@@1|) BoxType) (= d@@34 (|#ValueMessage.Message.Update| |a#7#0#0@@1|))) :qid |MessageidfyValueMessage.27:14| :skolemid |2005| :no-pattern (type |a#7#0#0@@1|) :no-pattern (U_2_int |a#7#0#0@@1|) :no-pattern (U_2_bool |a#7#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |2006| :pattern ( (ValueMessage.Message.Update_q d@@34)) )))
(assert (forall ((|a#8#0#0@@1| T@U) ) (!  (=> (= (type |a#8#0#0@@1|) BoxType) (= ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message) ($IsBox |a#8#0#0@@1| Tclass.ValueMessage.Delta))) :qid |MessageidfyValueMessage.27:14| :skolemid |2007| :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#9#0#0@@1| T@U) ($h@@90 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@1|) BoxType) (= (type $h@@90) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@90)) (= ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@1|) Tclass.ValueMessage.Message $h@@90) ($IsAllocBox |a#9#0#0@@1| Tclass.ValueMessage.Delta $h@@90))) :qid |MessageidfyValueMessage.27:14| :skolemid |2008| :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@1|) Tclass.ValueMessage.Message $h@@90)) )))
(assert (forall ((d@@35 T@U) ($h@@91 T@U) ) (!  (=> (and (and (= (type d@@35) DatatypeTypeType) (= (type $h@@91) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@91) (and (ValueMessage.Message.Update_q d@@35) ($IsAlloc d@@35 Tclass.ValueMessage.Message $h@@91)))) ($IsAllocBox (ValueMessage.Message.delta d@@35) Tclass.ValueMessage.Delta $h@@91)) :qid |unknown.0:0| :skolemid |2009| :pattern ( ($IsAllocBox (ValueMessage.Message.delta d@@35) Tclass.ValueMessage.Delta $h@@91)) )))
(assert (forall ((|a#10#0#0@@1| T@U) ) (!  (=> (= (type |a#10#0#0@@1|) BoxType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@1|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@1|)))) :qid |MessageidfyValueMessage.27:14| :skolemid |2010| :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@1|))) )))
(assert (forall ((|a#11#0#0@@1| T@U) ) (!  (=> (= (type |a#11#0#0@@1|) BoxType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@1|)) |a#11#0#0@@1|)) :qid |MessageidfyValueMessage.27:14| :skolemid |2011| :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@1|)) )))
(assert (forall ((d@@36 T@U) ) (!  (=> (and (= (type d@@36) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@36)) (or (ValueMessage.Message.Define_q d@@36) (ValueMessage.Message.Update_q d@@36))) :qid |unknown.0:0| :skolemid |2012| :pattern ( (|$IsA#ValueMessage.Message| d@@36)) )))
(assert (forall ((d@@37 T@U) ) (!  (=> (and (= (type d@@37) DatatypeTypeType) ($Is d@@37 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@37) (ValueMessage.Message.Update_q d@@37))) :qid |unknown.0:0| :skolemid |2013| :pattern ( (ValueMessage.Message.Update_q d@@37) ($Is d@@37 Tclass.ValueMessage.Message)) :pattern ( (ValueMessage.Message.Define_q d@@37) ($Is d@@37 Tclass.ValueMessage.Message)) )))
(assert (forall ((a@@135 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@135) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@135) (ValueMessage.Message.Define_q b@@72))) (= (|ValueMessage.Message#Equal| a@@135 b@@72) (|Seq#Equal| (ValueMessage.Message.value a@@135) (ValueMessage.Message.value b@@72)))) :qid |unknown.0:0| :skolemid |2014| :pattern ( (|ValueMessage.Message#Equal| a@@135 b@@72) (ValueMessage.Message.Define_q a@@135)) :pattern ( (|ValueMessage.Message#Equal| a@@135 b@@72) (ValueMessage.Message.Define_q b@@72)) )))
(assert (forall ((a@@136 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@136) (ValueMessage.Message.Update_q b@@73))) (= (|ValueMessage.Message#Equal| a@@136 b@@73) (= (ValueMessage.Message.delta a@@136) (ValueMessage.Message.delta b@@73)))) :qid |unknown.0:0| :skolemid |2015| :pattern ( (|ValueMessage.Message#Equal| a@@136 b@@73) (ValueMessage.Message.Update_q a@@136)) :pattern ( (|ValueMessage.Message#Equal| a@@136 b@@73) (ValueMessage.Message.Update_q b@@73)) )))
(assert (forall ((a@@137 T@U) (b@@74 T@U) ) (!  (=> (and (= (type a@@137) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (= (|ValueMessage.Message#Equal| a@@137 b@@74) (= a@@137 b@@74))) :qid |unknown.0:0| :skolemid |2016| :pattern ( (|ValueMessage.Message#Equal| a@@137 b@@74)) )))
(assert (forall ((arg0@@537 T@U) ) (! (= (type (|#UI.RangeStart.SInclusive| arg0@@537)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SInclusive| :pattern ( (|#UI.RangeStart.SInclusive| arg0@@537)) )))
(assert (forall ((|a#12#0#0@@0| T@U) ) (!  (=> (= (type |a#12#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SInclusive| |a#12#0#0@@0|)) |##UI.RangeStart.SInclusive|)) :qid |UIsdfy.20:36| :skolemid |2017| :pattern ( (|#UI.RangeStart.SInclusive| |a#12#0#0@@0|)) )))
(assert (forall ((d@@38 T@U) ) (!  (=> (= (type d@@38) DatatypeTypeType) (= (UI.RangeStart.SInclusive_q d@@38) (= (DatatypeCtorId d@@38) |##UI.RangeStart.SInclusive|))) :qid |unknown.0:0| :skolemid |2018| :pattern ( (UI.RangeStart.SInclusive_q d@@38)) )))
(assert (forall ((d@@39 T@U) ) (!  (=> (and (= (type d@@39) DatatypeTypeType) (UI.RangeStart.SInclusive_q d@@39)) (exists ((|a#13#0#0@@0| T@U) ) (!  (and (= (type |a#13#0#0@@0|) (SeqType BoxType)) (= d@@39 (|#UI.RangeStart.SInclusive| |a#13#0#0@@0|))) :qid |UIsdfy.20:36| :skolemid |2019| :no-pattern (type |a#13#0#0@@0|) :no-pattern (U_2_int |a#13#0#0@@0|) :no-pattern (U_2_bool |a#13#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |2020| :pattern ( (UI.RangeStart.SInclusive_q d@@39)) )))
(assert (= (type Tclass.UI.RangeStart) TyType))
(assert (= (Tag Tclass.UI.RangeStart) Tagclass.UI.RangeStart))
(assert (= (TagFamily Tclass.UI.RangeStart) tytagFamily$RangeStart))
(assert (forall ((bx@@158 T@U) ) (!  (=> (and (= (type bx@@158) BoxType) ($IsBox bx@@158 Tclass.UI.RangeStart)) (and (= ($Box ($Unbox DatatypeTypeType bx@@158)) bx@@158) ($Is ($Unbox DatatypeTypeType bx@@158) Tclass.UI.RangeStart))) :qid |unknown.0:0| :skolemid |2021| :pattern ( ($IsBox bx@@158 Tclass.UI.RangeStart)) )))
(assert (forall ((|a#14#0#0@@0| T@U) ) (!  (=> (= (type |a#14#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#14#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.20:36| :skolemid |2022| :pattern ( ($Is (|#UI.RangeStart.SInclusive| |a#14#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#15#0#0@@0| T@U) ($h@@92 T@U) ) (!  (=> (and (and (= (type |a#15#0#0@@0|) (SeqType BoxType)) (= (type $h@@92) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@92)) (= ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@92) ($IsAlloc |a#15#0#0@@0| Tclass.KeyType.Key $h@@92))) :qid |UIsdfy.20:36| :skolemid |2023| :pattern ( ($IsAlloc (|#UI.RangeStart.SInclusive| |a#15#0#0@@0|) Tclass.UI.RangeStart $h@@92)) )))
(assert (forall ((arg0@@538 T@U) ) (! (= (type (UI.RangeStart.key arg0@@538)) (SeqType BoxType)) :qid |funType:UI.RangeStart.key| :pattern ( (UI.RangeStart.key arg0@@538)) )))
(assert (forall ((d@@40 T@U) ($h@@93 T@U) ) (!  (=> (and (and (= (type d@@40) DatatypeTypeType) (= (type $h@@93) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@93) (and (UI.RangeStart.SInclusive_q d@@40) ($IsAlloc d@@40 Tclass.UI.RangeStart $h@@93)))) ($IsAlloc (UI.RangeStart.key d@@40) Tclass.KeyType.Key $h@@93)) :qid |unknown.0:0| :skolemid |2024| :pattern ( ($IsAlloc (UI.RangeStart.key d@@40) Tclass.KeyType.Key $h@@93)) )))
(assert (forall ((|a#16#0#0@@0| T@U) ) (!  (=> (= (type |a#16#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SInclusive| (Lit |a#16#0#0@@0|)) (Lit (|#UI.RangeStart.SInclusive| |a#16#0#0@@0|)))) :qid |UIsdfy.20:36| :skolemid |2025| :pattern ( (|#UI.RangeStart.SInclusive| (Lit |a#16#0#0@@0|))) )))
(assert (forall ((|a#17#0#0@@0| T@U) ) (!  (=> (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SInclusive| |a#17#0#0@@0|)) |a#17#0#0@@0|)) :qid |UIsdfy.20:36| :skolemid |2026| :pattern ( (|#UI.RangeStart.SInclusive| |a#17#0#0@@0|)) )))
(assert (forall ((arg0@@539 T@U) ) (! (= (type (|#UI.RangeStart.SExclusive| arg0@@539)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SExclusive| :pattern ( (|#UI.RangeStart.SExclusive| arg0@@539)) )))
(assert (forall ((|a#18#0#0@@0| T@U) ) (!  (=> (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SExclusive| |a#18#0#0@@0|)) |##UI.RangeStart.SExclusive|)) :qid |UIsdfy.20:59| :skolemid |2027| :pattern ( (|#UI.RangeStart.SExclusive| |a#18#0#0@@0|)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (= (type d@@41) DatatypeTypeType) (= (UI.RangeStart.SExclusive_q d@@41) (= (DatatypeCtorId d@@41) |##UI.RangeStart.SExclusive|))) :qid |unknown.0:0| :skolemid |2028| :pattern ( (UI.RangeStart.SExclusive_q d@@41)) )))
(assert (forall ((d@@42 T@U) ) (!  (=> (and (= (type d@@42) DatatypeTypeType) (UI.RangeStart.SExclusive_q d@@42)) (exists ((|a#19#0#0@@0| T@U) ) (!  (and (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= d@@42 (|#UI.RangeStart.SExclusive| |a#19#0#0@@0|))) :qid |UIsdfy.20:59| :skolemid |2029| :no-pattern (type |a#19#0#0@@0|) :no-pattern (U_2_int |a#19#0#0@@0|) :no-pattern (U_2_bool |a#19#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |2030| :pattern ( (UI.RangeStart.SExclusive_q d@@42)) )))
(assert (forall ((|a#20#0#0| T@U) ) (!  (=> (= (type |a#20#0#0|) (SeqType BoxType)) (= ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0|) Tclass.UI.RangeStart) ($Is |a#20#0#0| Tclass.KeyType.Key))) :qid |UIsdfy.20:59| :skolemid |2031| :pattern ( ($Is (|#UI.RangeStart.SExclusive| |a#20#0#0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#21#0#0| T@U) ($h@@94 T@U) ) (!  (=> (and (and (= (type |a#21#0#0|) (SeqType BoxType)) (= (type $h@@94) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@94)) (= ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0|) Tclass.UI.RangeStart $h@@94) ($IsAlloc |a#21#0#0| Tclass.KeyType.Key $h@@94))) :qid |UIsdfy.20:59| :skolemid |2032| :pattern ( ($IsAlloc (|#UI.RangeStart.SExclusive| |a#21#0#0|) Tclass.UI.RangeStart $h@@94)) )))
(assert (forall ((d@@43 T@U) ($h@@95 T@U) ) (!  (=> (and (and (= (type d@@43) DatatypeTypeType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@95) (and (UI.RangeStart.SExclusive_q d@@43) ($IsAlloc d@@43 Tclass.UI.RangeStart $h@@95)))) ($IsAlloc (UI.RangeStart.key d@@43) Tclass.KeyType.Key $h@@95)) :qid |unknown.0:0| :skolemid |2033| :pattern ( ($IsAlloc (UI.RangeStart.key d@@43) Tclass.KeyType.Key $h@@95)) )))
(assert (forall ((|a#22#0#0| T@U) ) (!  (=> (= (type |a#22#0#0|) (SeqType BoxType)) (= (|#UI.RangeStart.SExclusive| (Lit |a#22#0#0|)) (Lit (|#UI.RangeStart.SExclusive| |a#22#0#0|)))) :qid |UIsdfy.20:59| :skolemid |2034| :pattern ( (|#UI.RangeStart.SExclusive| (Lit |a#22#0#0|))) )))
(assert (forall ((|a#23#0#0| T@U) ) (!  (=> (= (type |a#23#0#0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SExclusive| |a#23#0#0|)) |a#23#0#0|)) :qid |UIsdfy.20:59| :skolemid |2035| :pattern ( (|#UI.RangeStart.SExclusive| |a#23#0#0|)) )))
(assert (= (type |#UI.RangeStart.NegativeInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeStart.NegativeInf|) |##UI.RangeStart.NegativeInf|))
(assert (forall ((d@@44 T@U) ) (!  (=> (= (type d@@44) DatatypeTypeType) (= (UI.RangeStart.NegativeInf_q d@@44) (= (DatatypeCtorId d@@44) |##UI.RangeStart.NegativeInf|))) :qid |unknown.0:0| :skolemid |2036| :pattern ( (UI.RangeStart.NegativeInf_q d@@44)) )))
(assert (forall ((d@@45 T@U) ) (!  (=> (and (= (type d@@45) DatatypeTypeType) (UI.RangeStart.NegativeInf_q d@@45)) (= d@@45 |#UI.RangeStart.NegativeInf|)) :qid |unknown.0:0| :skolemid |2037| :pattern ( (UI.RangeStart.NegativeInf_q d@@45)) )))
(assert ($Is |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart))
(assert (forall (($h@@96 T@U) ) (!  (=> (and (= (type $h@@96) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@96)) ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@96)) :qid |DafnyPreludebpl.545:12| :skolemid |2038| :pattern ( ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@96)) )))
(assert (= |#UI.RangeStart.NegativeInf| (Lit |#UI.RangeStart.NegativeInf|)))
(assert (forall ((d@@46 T@U) ) (!  (=> (and (= (type d@@46) DatatypeTypeType) (|$IsA#UI.RangeStart| d@@46)) (or (or (UI.RangeStart.SInclusive_q d@@46) (UI.RangeStart.SExclusive_q d@@46)) (UI.RangeStart.NegativeInf_q d@@46))) :qid |unknown.0:0| :skolemid |2039| :pattern ( (|$IsA#UI.RangeStart| d@@46)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (and (= (type d@@47) DatatypeTypeType) ($Is d@@47 Tclass.UI.RangeStart)) (or (or (UI.RangeStart.SInclusive_q d@@47) (UI.RangeStart.SExclusive_q d@@47)) (UI.RangeStart.NegativeInf_q d@@47))) :qid |unknown.0:0| :skolemid |2040| :pattern ( (UI.RangeStart.NegativeInf_q d@@47) ($Is d@@47 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SExclusive_q d@@47) ($Is d@@47 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SInclusive_q d@@47) ($Is d@@47 Tclass.UI.RangeStart)) )))
(assert (forall ((a@@138 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@138) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (UI.RangeStart.SInclusive_q a@@138) (UI.RangeStart.SInclusive_q b@@75))) (= (|UI.RangeStart#Equal| a@@138 b@@75) (|Seq#Equal| (UI.RangeStart.key a@@138) (UI.RangeStart.key b@@75)))) :qid |unknown.0:0| :skolemid |2041| :pattern ( (|UI.RangeStart#Equal| a@@138 b@@75) (UI.RangeStart.SInclusive_q a@@138)) :pattern ( (|UI.RangeStart#Equal| a@@138 b@@75) (UI.RangeStart.SInclusive_q b@@75)) )))
(assert (forall ((a@@139 T@U) (b@@76 T@U) ) (!  (=> (and (and (= (type a@@139) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (and (UI.RangeStart.SExclusive_q a@@139) (UI.RangeStart.SExclusive_q b@@76))) (= (|UI.RangeStart#Equal| a@@139 b@@76) (|Seq#Equal| (UI.RangeStart.key a@@139) (UI.RangeStart.key b@@76)))) :qid |unknown.0:0| :skolemid |2042| :pattern ( (|UI.RangeStart#Equal| a@@139 b@@76) (UI.RangeStart.SExclusive_q a@@139)) :pattern ( (|UI.RangeStart#Equal| a@@139 b@@76) (UI.RangeStart.SExclusive_q b@@76)) )))
(assert (forall ((a@@140 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@140) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (UI.RangeStart.NegativeInf_q a@@140) (UI.RangeStart.NegativeInf_q b@@77))) (= (|UI.RangeStart#Equal| a@@140 b@@77) true)) :qid |unknown.0:0| :skolemid |2043| :pattern ( (|UI.RangeStart#Equal| a@@140 b@@77) (UI.RangeStart.NegativeInf_q a@@140)) :pattern ( (|UI.RangeStart#Equal| a@@140 b@@77) (UI.RangeStart.NegativeInf_q b@@77)) )))
(assert (forall ((a@@141 T@U) (b@@78 T@U) ) (!  (=> (and (= (type a@@141) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (= (|UI.RangeStart#Equal| a@@141 b@@78) (= a@@141 b@@78))) :qid |unknown.0:0| :skolemid |2044| :pattern ( (|UI.RangeStart#Equal| a@@141 b@@78)) )))
(assert (forall ((arg0@@540 T@U) ) (! (= (type (|#UI.RangeEnd.EInclusive| arg0@@540)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EInclusive| :pattern ( (|#UI.RangeEnd.EInclusive| arg0@@540)) )))
(assert (forall ((|a#29#0#0@@0| T@U) ) (!  (=> (= (type |a#29#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EInclusive| |a#29#0#0@@0|)) |##UI.RangeEnd.EInclusive|)) :qid |UIsdfy.21:34| :skolemid |2045| :pattern ( (|#UI.RangeEnd.EInclusive| |a#29#0#0@@0|)) )))
(assert (forall ((d@@48 T@U) ) (!  (=> (= (type d@@48) DatatypeTypeType) (= (UI.RangeEnd.EInclusive_q d@@48) (= (DatatypeCtorId d@@48) |##UI.RangeEnd.EInclusive|))) :qid |unknown.0:0| :skolemid |2046| :pattern ( (UI.RangeEnd.EInclusive_q d@@48)) )))
(assert (forall ((d@@49 T@U) ) (!  (=> (and (= (type d@@49) DatatypeTypeType) (UI.RangeEnd.EInclusive_q d@@49)) (exists ((|a#30#0#0@@0| T@U) ) (!  (and (= (type |a#30#0#0@@0|) (SeqType BoxType)) (= d@@49 (|#UI.RangeEnd.EInclusive| |a#30#0#0@@0|))) :qid |UIsdfy.21:34| :skolemid |2047| :no-pattern (type |a#30#0#0@@0|) :no-pattern (U_2_int |a#30#0#0@@0|) :no-pattern (U_2_bool |a#30#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |2048| :pattern ( (UI.RangeEnd.EInclusive_q d@@49)) )))
(assert (= (type Tclass.UI.RangeEnd) TyType))
(assert (= (Tag Tclass.UI.RangeEnd) Tagclass.UI.RangeEnd))
(assert (= (TagFamily Tclass.UI.RangeEnd) tytagFamily$RangeEnd))
(assert (forall ((bx@@159 T@U) ) (!  (=> (and (= (type bx@@159) BoxType) ($IsBox bx@@159 Tclass.UI.RangeEnd)) (and (= ($Box ($Unbox DatatypeTypeType bx@@159)) bx@@159) ($Is ($Unbox DatatypeTypeType bx@@159) Tclass.UI.RangeEnd))) :qid |unknown.0:0| :skolemid |2049| :pattern ( ($IsBox bx@@159 Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#31#0#0@@0| T@U) ) (!  (=> (= (type |a#31#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0@@0|) Tclass.UI.RangeEnd) ($Is |a#31#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.21:34| :skolemid |2050| :pattern ( ($Is (|#UI.RangeEnd.EInclusive| |a#31#0#0@@0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#32#0#0@@0| T@U) ($h@@97 T@U) ) (!  (=> (and (and (= (type |a#32#0#0@@0|) (SeqType BoxType)) (= (type $h@@97) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@97)) (= ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0@@0|) Tclass.UI.RangeEnd $h@@97) ($IsAlloc |a#32#0#0@@0| Tclass.KeyType.Key $h@@97))) :qid |UIsdfy.21:34| :skolemid |2051| :pattern ( ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#32#0#0@@0|) Tclass.UI.RangeEnd $h@@97)) )))
(assert (forall ((arg0@@541 T@U) ) (! (= (type (UI.RangeEnd.key arg0@@541)) (SeqType BoxType)) :qid |funType:UI.RangeEnd.key| :pattern ( (UI.RangeEnd.key arg0@@541)) )))
(assert (forall ((d@@50 T@U) ($h@@98 T@U) ) (!  (=> (and (and (= (type d@@50) DatatypeTypeType) (= (type $h@@98) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@98) (and (UI.RangeEnd.EInclusive_q d@@50) ($IsAlloc d@@50 Tclass.UI.RangeEnd $h@@98)))) ($IsAlloc (UI.RangeEnd.key d@@50) Tclass.KeyType.Key $h@@98)) :qid |unknown.0:0| :skolemid |2052| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@50) Tclass.KeyType.Key $h@@98)) )))
(assert (forall ((|a#33#0#0@@0| T@U) ) (!  (=> (= (type |a#33#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EInclusive| (Lit |a#33#0#0@@0|)) (Lit (|#UI.RangeEnd.EInclusive| |a#33#0#0@@0|)))) :qid |UIsdfy.21:34| :skolemid |2053| :pattern ( (|#UI.RangeEnd.EInclusive| (Lit |a#33#0#0@@0|))) )))
(assert (forall ((|a#34#0#0| T@U) ) (!  (=> (= (type |a#34#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EInclusive| |a#34#0#0|)) |a#34#0#0|)) :qid |UIsdfy.21:34| :skolemid |2054| :pattern ( (|#UI.RangeEnd.EInclusive| |a#34#0#0|)) )))
(assert (forall ((arg0@@542 T@U) ) (! (= (type (|#UI.RangeEnd.EExclusive| arg0@@542)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EExclusive| :pattern ( (|#UI.RangeEnd.EExclusive| arg0@@542)) )))
(assert (forall ((|a#35#0#0| T@U) ) (!  (=> (= (type |a#35#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EExclusive| |a#35#0#0|)) |##UI.RangeEnd.EExclusive|)) :qid |UIsdfy.21:57| :skolemid |2055| :pattern ( (|#UI.RangeEnd.EExclusive| |a#35#0#0|)) )))
(assert (forall ((d@@51 T@U) ) (!  (=> (= (type d@@51) DatatypeTypeType) (= (UI.RangeEnd.EExclusive_q d@@51) (= (DatatypeCtorId d@@51) |##UI.RangeEnd.EExclusive|))) :qid |unknown.0:0| :skolemid |2056| :pattern ( (UI.RangeEnd.EExclusive_q d@@51)) )))
(assert (forall ((d@@52 T@U) ) (!  (=> (and (= (type d@@52) DatatypeTypeType) (UI.RangeEnd.EExclusive_q d@@52)) (exists ((|a#36#0#0| T@U) ) (!  (and (= (type |a#36#0#0|) (SeqType BoxType)) (= d@@52 (|#UI.RangeEnd.EExclusive| |a#36#0#0|))) :qid |UIsdfy.21:57| :skolemid |2057| :no-pattern (type |a#36#0#0|) :no-pattern (U_2_int |a#36#0#0|) :no-pattern (U_2_bool |a#36#0#0|) ))) :qid |unknown.0:0| :skolemid |2058| :pattern ( (UI.RangeEnd.EExclusive_q d@@52)) )))
(assert (forall ((|a#37#0#0| T@U) ) (!  (=> (= (type |a#37#0#0|) (SeqType BoxType)) (= ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd) ($Is |a#37#0#0| Tclass.KeyType.Key))) :qid |UIsdfy.21:57| :skolemid |2059| :pattern ( ($Is (|#UI.RangeEnd.EExclusive| |a#37#0#0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#38#0#0| T@U) ($h@@99 T@U) ) (!  (=> (and (and (= (type |a#38#0#0|) (SeqType BoxType)) (= (type $h@@99) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@99)) (= ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@99) ($IsAlloc |a#38#0#0| Tclass.KeyType.Key $h@@99))) :qid |UIsdfy.21:57| :skolemid |2060| :pattern ( ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#38#0#0|) Tclass.UI.RangeEnd $h@@99)) )))
(assert (forall ((d@@53 T@U) ($h@@100 T@U) ) (!  (=> (and (and (= (type d@@53) DatatypeTypeType) (= (type $h@@100) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@100) (and (UI.RangeEnd.EExclusive_q d@@53) ($IsAlloc d@@53 Tclass.UI.RangeEnd $h@@100)))) ($IsAlloc (UI.RangeEnd.key d@@53) Tclass.KeyType.Key $h@@100)) :qid |unknown.0:0| :skolemid |2061| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@53) Tclass.KeyType.Key $h@@100)) )))
(assert (forall ((|a#39#0#0| T@U) ) (!  (=> (= (type |a#39#0#0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EExclusive| (Lit |a#39#0#0|)) (Lit (|#UI.RangeEnd.EExclusive| |a#39#0#0|)))) :qid |UIsdfy.21:57| :skolemid |2062| :pattern ( (|#UI.RangeEnd.EExclusive| (Lit |a#39#0#0|))) )))
(assert (forall ((|a#40#0#0| T@U) ) (!  (=> (= (type |a#40#0#0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EExclusive| |a#40#0#0|)) |a#40#0#0|)) :qid |UIsdfy.21:57| :skolemid |2063| :pattern ( (|#UI.RangeEnd.EExclusive| |a#40#0#0|)) )))
(assert (= (type |#UI.RangeEnd.PositiveInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeEnd.PositiveInf|) |##UI.RangeEnd.PositiveInf|))
(assert (forall ((d@@54 T@U) ) (!  (=> (= (type d@@54) DatatypeTypeType) (= (UI.RangeEnd.PositiveInf_q d@@54) (= (DatatypeCtorId d@@54) |##UI.RangeEnd.PositiveInf|))) :qid |unknown.0:0| :skolemid |2064| :pattern ( (UI.RangeEnd.PositiveInf_q d@@54)) )))
(assert (forall ((d@@55 T@U) ) (!  (=> (and (= (type d@@55) DatatypeTypeType) (UI.RangeEnd.PositiveInf_q d@@55)) (= d@@55 |#UI.RangeEnd.PositiveInf|)) :qid |unknown.0:0| :skolemid |2065| :pattern ( (UI.RangeEnd.PositiveInf_q d@@55)) )))
(assert ($Is |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd))
(assert (forall (($h@@101 T@U) ) (!  (=> (and (= (type $h@@101) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@101)) ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@101)) :qid |DafnyPreludebpl.545:12| :skolemid |2066| :pattern ( ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@101)) )))
(assert (= |#UI.RangeEnd.PositiveInf| (Lit |#UI.RangeEnd.PositiveInf|)))
(assert (forall ((d@@56 T@U) ) (!  (=> (and (= (type d@@56) DatatypeTypeType) (|$IsA#UI.RangeEnd| d@@56)) (or (or (UI.RangeEnd.EInclusive_q d@@56) (UI.RangeEnd.EExclusive_q d@@56)) (UI.RangeEnd.PositiveInf_q d@@56))) :qid |unknown.0:0| :skolemid |2067| :pattern ( (|$IsA#UI.RangeEnd| d@@56)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (and (= (type d@@57) DatatypeTypeType) ($Is d@@57 Tclass.UI.RangeEnd)) (or (or (UI.RangeEnd.EInclusive_q d@@57) (UI.RangeEnd.EExclusive_q d@@57)) (UI.RangeEnd.PositiveInf_q d@@57))) :qid |unknown.0:0| :skolemid |2068| :pattern ( (UI.RangeEnd.PositiveInf_q d@@57) ($Is d@@57 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EExclusive_q d@@57) ($Is d@@57 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EInclusive_q d@@57) ($Is d@@57 Tclass.UI.RangeEnd)) )))
(assert (forall ((a@@142 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@142) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (UI.RangeEnd.EInclusive_q a@@142) (UI.RangeEnd.EInclusive_q b@@79))) (= (|UI.RangeEnd#Equal| a@@142 b@@79) (|Seq#Equal| (UI.RangeEnd.key a@@142) (UI.RangeEnd.key b@@79)))) :qid |unknown.0:0| :skolemid |2069| :pattern ( (|UI.RangeEnd#Equal| a@@142 b@@79) (UI.RangeEnd.EInclusive_q a@@142)) :pattern ( (|UI.RangeEnd#Equal| a@@142 b@@79) (UI.RangeEnd.EInclusive_q b@@79)) )))
(assert (forall ((a@@143 T@U) (b@@80 T@U) ) (!  (=> (and (and (= (type a@@143) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (and (UI.RangeEnd.EExclusive_q a@@143) (UI.RangeEnd.EExclusive_q b@@80))) (= (|UI.RangeEnd#Equal| a@@143 b@@80) (|Seq#Equal| (UI.RangeEnd.key a@@143) (UI.RangeEnd.key b@@80)))) :qid |unknown.0:0| :skolemid |2070| :pattern ( (|UI.RangeEnd#Equal| a@@143 b@@80) (UI.RangeEnd.EExclusive_q a@@143)) :pattern ( (|UI.RangeEnd#Equal| a@@143 b@@80) (UI.RangeEnd.EExclusive_q b@@80)) )))
(assert (forall ((a@@144 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@144) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (and (UI.RangeEnd.PositiveInf_q a@@144) (UI.RangeEnd.PositiveInf_q b@@81))) (= (|UI.RangeEnd#Equal| a@@144 b@@81) true)) :qid |unknown.0:0| :skolemid |2071| :pattern ( (|UI.RangeEnd#Equal| a@@144 b@@81) (UI.RangeEnd.PositiveInf_q a@@144)) :pattern ( (|UI.RangeEnd#Equal| a@@144 b@@81) (UI.RangeEnd.PositiveInf_q b@@81)) )))
(assert (forall ((a@@145 T@U) (b@@82 T@U) ) (!  (=> (and (= (type a@@145) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (= (|UI.RangeEnd#Equal| a@@145 b@@82) (= a@@145 b@@82))) :qid |unknown.0:0| :skolemid |2072| :pattern ( (|UI.RangeEnd#Equal| a@@145 b@@82)) )))
(assert (forall ((arg0@@543 T@U) (arg1@@245 T@U) ) (! (= (type (|#UI.SuccResult.SuccResult| arg0@@543 arg1@@245)) DatatypeTypeType) :qid |funType:#UI.SuccResult.SuccResult| :pattern ( (|#UI.SuccResult.SuccResult| arg0@@543 arg1@@245)) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) ) (!  (=> (and (= (type |a#46#0#0|) (SeqType BoxType)) (= (type |a#46#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.SuccResult.SuccResult| |a#46#0#0| |a#46#1#0|)) |##UI.SuccResult.SuccResult|)) :qid |UIsdfy.23:36| :skolemid |2073| :pattern ( (|#UI.SuccResult.SuccResult| |a#46#0#0| |a#46#1#0|)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (= (type d@@58) DatatypeTypeType) (= (UI.SuccResult.SuccResult_q d@@58) (= (DatatypeCtorId d@@58) |##UI.SuccResult.SuccResult|))) :qid |unknown.0:0| :skolemid |2074| :pattern ( (UI.SuccResult.SuccResult_q d@@58)) )))
(assert (forall ((d@@59 T@U) ) (!  (=> (and (= (type d@@59) DatatypeTypeType) (UI.SuccResult.SuccResult_q d@@59)) (exists ((|a#47#0#0| T@U) (|a#47#1#0| T@U) ) (!  (and (and (= (type |a#47#0#0|) (SeqType BoxType)) (= (type |a#47#1#0|) (SeqType BoxType))) (= d@@59 (|#UI.SuccResult.SuccResult| |a#47#0#0| |a#47#1#0|))) :qid |UIsdfy.23:36| :skolemid |2075| :no-pattern (type |a#47#0#0|) :no-pattern (type |a#47#1#0|) :no-pattern (U_2_int |a#47#0#0|) :no-pattern (U_2_bool |a#47#0#0|) :no-pattern (U_2_int |a#47#1#0|) :no-pattern (U_2_bool |a#47#1#0|) ))) :qid |unknown.0:0| :skolemid |2076| :pattern ( (UI.SuccResult.SuccResult_q d@@59)) )))
(assert (= (type Tclass.UI.SuccResult) TyType))
(assert (= (Tag Tclass.UI.SuccResult) Tagclass.UI.SuccResult))
(assert (= (TagFamily Tclass.UI.SuccResult) tytagFamily$SuccResult))
(assert (forall ((bx@@160 T@U) ) (!  (=> (and (= (type bx@@160) BoxType) ($IsBox bx@@160 Tclass.UI.SuccResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@160)) bx@@160) ($Is ($Unbox DatatypeTypeType bx@@160) Tclass.UI.SuccResult))) :qid |unknown.0:0| :skolemid |2077| :pattern ( ($IsBox bx@@160 Tclass.UI.SuccResult)) )))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (!  (=> (and (= (type |a#48#0#0|) (SeqType BoxType)) (= (type |a#48#1#0|) (SeqType BoxType))) (= ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult)  (and ($Is |a#48#0#0| Tclass.KeyType.Key) ($Is |a#48#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.23:36| :skolemid |2078| :pattern ( ($Is (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|) Tclass.UI.SuccResult)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ($h@@102 T@U) ) (!  (=> (and (and (and (= (type |a#49#0#0|) (SeqType BoxType)) (= (type |a#49#1#0|) (SeqType BoxType))) (= (type $h@@102) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@102)) (= ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@102)  (and ($IsAlloc |a#49#0#0| Tclass.KeyType.Key $h@@102) ($IsAlloc |a#49#1#0| Tclass.ValueType.Value $h@@102)))) :qid |UIsdfy.23:36| :skolemid |2079| :pattern ( ($IsAlloc (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult $h@@102)) )))
(assert (forall ((arg0@@544 T@U) ) (! (= (type (UI.SuccResult.key arg0@@544)) (SeqType BoxType)) :qid |funType:UI.SuccResult.key| :pattern ( (UI.SuccResult.key arg0@@544)) )))
(assert (forall ((d@@60 T@U) ($h@@103 T@U) ) (!  (=> (and (and (= (type d@@60) DatatypeTypeType) (= (type $h@@103) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@103) (and (UI.SuccResult.SuccResult_q d@@60) ($IsAlloc d@@60 Tclass.UI.SuccResult $h@@103)))) ($IsAlloc (UI.SuccResult.key d@@60) Tclass.KeyType.Key $h@@103)) :qid |unknown.0:0| :skolemid |2080| :pattern ( ($IsAlloc (UI.SuccResult.key d@@60) Tclass.KeyType.Key $h@@103)) )))
(assert (forall ((arg0@@545 T@U) ) (! (= (type (UI.SuccResult.value arg0@@545)) (SeqType BoxType)) :qid |funType:UI.SuccResult.value| :pattern ( (UI.SuccResult.value arg0@@545)) )))
(assert (forall ((d@@61 T@U) ($h@@104 T@U) ) (!  (=> (and (and (= (type d@@61) DatatypeTypeType) (= (type $h@@104) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@104) (and (UI.SuccResult.SuccResult_q d@@61) ($IsAlloc d@@61 Tclass.UI.SuccResult $h@@104)))) ($IsAlloc (UI.SuccResult.value d@@61) Tclass.ValueType.Value $h@@104)) :qid |unknown.0:0| :skolemid |2081| :pattern ( ($IsAlloc (UI.SuccResult.value d@@61) Tclass.ValueType.Value $h@@104)) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (!  (=> (and (= (type |a#50#0#0|) (SeqType BoxType)) (= (type |a#50#1#0|) (SeqType BoxType))) (= (|#UI.SuccResult.SuccResult| (Lit |a#50#0#0|) (Lit |a#50#1#0|)) (Lit (|#UI.SuccResult.SuccResult| |a#50#0#0| |a#50#1#0|)))) :qid |UIsdfy.23:36| :skolemid |2082| :pattern ( (|#UI.SuccResult.SuccResult| (Lit |a#50#0#0|) (Lit |a#50#1#0|))) )))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) ) (!  (=> (and (= (type |a#51#0#0|) (SeqType BoxType)) (= (type |a#51#1#0|) (SeqType BoxType))) (= (UI.SuccResult.key (|#UI.SuccResult.SuccResult| |a#51#0#0| |a#51#1#0|)) |a#51#0#0|)) :qid |UIsdfy.23:36| :skolemid |2083| :pattern ( (|#UI.SuccResult.SuccResult| |a#51#0#0| |a#51#1#0|)) )))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) ) (!  (=> (and (= (type |a#52#0#0|) (SeqType BoxType)) (= (type |a#52#1#0|) (SeqType BoxType))) (= (UI.SuccResult.value (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) |a#52#1#0|)) :qid |UIsdfy.23:36| :skolemid |2084| :pattern ( (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) )))
(assert (forall ((d@@62 T@U) ) (!  (=> (and (= (type d@@62) DatatypeTypeType) (|$IsA#UI.SuccResult| d@@62)) (UI.SuccResult.SuccResult_q d@@62)) :qid |unknown.0:0| :skolemid |2085| :pattern ( (|$IsA#UI.SuccResult| d@@62)) )))
(assert (forall ((d@@63 T@U) ) (!  (=> (and (= (type d@@63) DatatypeTypeType) ($Is d@@63 Tclass.UI.SuccResult)) (UI.SuccResult.SuccResult_q d@@63)) :qid |unknown.0:0| :skolemid |2086| :pattern ( (UI.SuccResult.SuccResult_q d@@63) ($Is d@@63 Tclass.UI.SuccResult)) )))
(assert (forall ((a@@146 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@146) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) true) (= (|UI.SuccResult#Equal| a@@146 b@@83)  (and (|Seq#Equal| (UI.SuccResult.key a@@146) (UI.SuccResult.key b@@83)) (|Seq#Equal| (UI.SuccResult.value a@@146) (UI.SuccResult.value b@@83))))) :qid |unknown.0:0| :skolemid |2087| :pattern ( (|UI.SuccResult#Equal| a@@146 b@@83)) )))
(assert (forall ((a@@147 T@U) (b@@84 T@U) ) (!  (=> (and (= (type a@@147) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (= (|UI.SuccResult#Equal| a@@147 b@@84) (= a@@147 b@@84))) :qid |unknown.0:0| :skolemid |2088| :pattern ( (|UI.SuccResult#Equal| a@@147 b@@84)) )))
(assert (forall ((arg0@@546 T@U) (arg1@@246 T@U) ) (! (= (type (|#UI.SuccResultList.SuccResultList| arg0@@546 arg1@@246)) DatatypeTypeType) :qid |funType:#UI.SuccResultList.SuccResultList| :pattern ( (|#UI.SuccResultList.SuccResultList| arg0@@546 arg1@@246)) )))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) ) (!  (=> (and (= (type |a#53#0#0|) (SeqType BoxType)) (= (type |a#53#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.SuccResultList.SuccResultList| |a#53#0#0| |a#53#1#0|)) |##UI.SuccResultList.SuccResultList|)) :qid |UIsdfy.24:44| :skolemid |2089| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#53#0#0| |a#53#1#0|)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (= (type d@@64) DatatypeTypeType) (= (UI.SuccResultList.SuccResultList_q d@@64) (= (DatatypeCtorId d@@64) |##UI.SuccResultList.SuccResultList|))) :qid |unknown.0:0| :skolemid |2090| :pattern ( (UI.SuccResultList.SuccResultList_q d@@64)) )))
(assert (forall ((d@@65 T@U) ) (!  (=> (and (= (type d@@65) DatatypeTypeType) (UI.SuccResultList.SuccResultList_q d@@65)) (exists ((|a#54#0#0| T@U) (|a#54#1#0| T@U) ) (!  (and (and (= (type |a#54#0#0|) (SeqType BoxType)) (= (type |a#54#1#0|) DatatypeTypeType)) (= d@@65 (|#UI.SuccResultList.SuccResultList| |a#54#0#0| |a#54#1#0|))) :qid |UIsdfy.24:44| :skolemid |2091| :no-pattern (type |a#54#0#0|) :no-pattern (type |a#54#1#0|) :no-pattern (U_2_int |a#54#0#0|) :no-pattern (U_2_bool |a#54#0#0|) :no-pattern (U_2_int |a#54#1#0|) :no-pattern (U_2_bool |a#54#1#0|) ))) :qid |unknown.0:0| :skolemid |2092| :pattern ( (UI.SuccResultList.SuccResultList_q d@@65)) )))
(assert (= (type Tclass.UI.SuccResultList) TyType))
(assert (= (Tag Tclass.UI.SuccResultList) Tagclass.UI.SuccResultList))
(assert (= (TagFamily Tclass.UI.SuccResultList) tytagFamily$SuccResultList))
(assert (forall ((bx@@161 T@U) ) (!  (=> (and (= (type bx@@161) BoxType) ($IsBox bx@@161 Tclass.UI.SuccResultList)) (and (= ($Box ($Unbox DatatypeTypeType bx@@161)) bx@@161) ($Is ($Unbox DatatypeTypeType bx@@161) Tclass.UI.SuccResultList))) :qid |unknown.0:0| :skolemid |2093| :pattern ( ($IsBox bx@@161 Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#55#0#0| T@U) (|a#55#1#0| T@U) ) (!  (=> (and (= (type |a#55#0#0|) (SeqType BoxType)) (= (type |a#55#1#0|) DatatypeTypeType)) (= ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList)  (and ($Is |a#55#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#55#1#0| Tclass.UI.RangeEnd)))) :qid |UIsdfy.24:44| :skolemid |2094| :pattern ( ($Is (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|) Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#56#0#0| T@U) (|a#56#1#0| T@U) ($h@@105 T@U) ) (!  (=> (and (and (and (= (type |a#56#0#0|) (SeqType BoxType)) (= (type |a#56#1#0|) DatatypeTypeType)) (= (type $h@@105) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@105)) (= ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@105)  (and ($IsAlloc |a#56#0#0| (TSeq Tclass.UI.SuccResult) $h@@105) ($IsAlloc |a#56#1#0| Tclass.UI.RangeEnd $h@@105)))) :qid |UIsdfy.24:44| :skolemid |2095| :pattern ( ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList $h@@105)) )))
(assert (forall ((arg0@@547 T@U) ) (! (= (type (UI.SuccResultList.results arg0@@547)) (SeqType BoxType)) :qid |funType:UI.SuccResultList.results| :pattern ( (UI.SuccResultList.results arg0@@547)) )))
(assert (forall ((d@@66 T@U) ($h@@106 T@U) ) (!  (=> (and (and (= (type d@@66) DatatypeTypeType) (= (type $h@@106) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@106) (and (UI.SuccResultList.SuccResultList_q d@@66) ($IsAlloc d@@66 Tclass.UI.SuccResultList $h@@106)))) ($IsAlloc (UI.SuccResultList.results d@@66) (TSeq Tclass.UI.SuccResult) $h@@106)) :qid |unknown.0:0| :skolemid |2096| :pattern ( ($IsAlloc (UI.SuccResultList.results d@@66) (TSeq Tclass.UI.SuccResult) $h@@106)) )))
(assert (forall ((arg0@@548 T@U) ) (! (= (type (UI.SuccResultList.end arg0@@548)) DatatypeTypeType) :qid |funType:UI.SuccResultList.end| :pattern ( (UI.SuccResultList.end arg0@@548)) )))
(assert (forall ((d@@67 T@U) ($h@@107 T@U) ) (!  (=> (and (and (= (type d@@67) DatatypeTypeType) (= (type $h@@107) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@107) (and (UI.SuccResultList.SuccResultList_q d@@67) ($IsAlloc d@@67 Tclass.UI.SuccResultList $h@@107)))) ($IsAlloc (UI.SuccResultList.end d@@67) Tclass.UI.RangeEnd $h@@107)) :qid |unknown.0:0| :skolemid |2097| :pattern ( ($IsAlloc (UI.SuccResultList.end d@@67) Tclass.UI.RangeEnd $h@@107)) )))
(assert (forall ((|a#57#0#0| T@U) (|a#57#1#0| T@U) ) (!  (=> (and (= (type |a#57#0#0|) (SeqType BoxType)) (= (type |a#57#1#0|) DatatypeTypeType)) (= (|#UI.SuccResultList.SuccResultList| (Lit |a#57#0#0|) (Lit |a#57#1#0|)) (Lit (|#UI.SuccResultList.SuccResultList| |a#57#0#0| |a#57#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2098| :pattern ( (|#UI.SuccResultList.SuccResultList| (Lit |a#57#0#0|) (Lit |a#57#1#0|))) )))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) ) (!  (=> (and (= (type |a#58#0#0|) (SeqType BoxType)) (= (type |a#58#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.results (|#UI.SuccResultList.SuccResultList| |a#58#0#0| |a#58#1#0|)) |a#58#0#0|)) :qid |UIsdfy.24:44| :skolemid |2099| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#58#0#0| |a#58#1#0|)) )))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) (i@@25 Int) ) (!  (=> (and (and (= (type |a#59#0#0|) (SeqType BoxType)) (= (type |a#59#1#0|) DatatypeTypeType)) (and (<= 0 i@@25) (< i@@25 (|Seq#Length| |a#59#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#59#0#0| i@@25))) (DtRank (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2100| :pattern ( (|Seq#Index| |a#59#0#0| i@@25) (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)) )))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) ) (!  (=> (and (= (type |a#60#0#0|) (SeqType BoxType)) (= (type |a#60#1#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#60#0#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2101| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)) )))
(assert (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) ) (!  (=> (and (= (type |a#61#0#0|) (SeqType BoxType)) (= (type |a#61#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.end (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)) |a#61#1#0|)) :qid |UIsdfy.24:44| :skolemid |2102| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)) )))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) ) (!  (=> (and (= (type |a#62#0#0|) (SeqType BoxType)) (= (type |a#62#1#0|) DatatypeTypeType)) (< (DtRank |a#62#1#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)))) :qid |UIsdfy.24:44| :skolemid |2103| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)) )))
(assert (forall ((d@@68 T@U) ) (!  (=> (and (= (type d@@68) DatatypeTypeType) (|$IsA#UI.SuccResultList| d@@68)) (UI.SuccResultList.SuccResultList_q d@@68)) :qid |unknown.0:0| :skolemid |2104| :pattern ( (|$IsA#UI.SuccResultList| d@@68)) )))
(assert (forall ((d@@69 T@U) ) (!  (=> (and (= (type d@@69) DatatypeTypeType) ($Is d@@69 Tclass.UI.SuccResultList)) (UI.SuccResultList.SuccResultList_q d@@69)) :qid |unknown.0:0| :skolemid |2105| :pattern ( (UI.SuccResultList.SuccResultList_q d@@69) ($Is d@@69 Tclass.UI.SuccResultList)) )))
(assert (forall ((a@@148 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@148) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) true) (= (|UI.SuccResultList#Equal| a@@148 b@@85)  (and (|Seq#Equal| (UI.SuccResultList.results a@@148) (UI.SuccResultList.results b@@85)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@148) (UI.SuccResultList.end b@@85))))) :qid |unknown.0:0| :skolemid |2106| :pattern ( (|UI.SuccResultList#Equal| a@@148 b@@85)) )))
(assert (forall ((a@@149 T@U) (b@@86 T@U) ) (!  (=> (and (= (type a@@149) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (= (|UI.SuccResultList#Equal| a@@149 b@@86) (= a@@149 b@@86))) :qid |unknown.0:0| :skolemid |2107| :pattern ( (|UI.SuccResultList#Equal| a@@149 b@@86)) )))
(assert (= (type |#UI.Op.NoOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.NoOp|) |##UI.Op.NoOp|))
(assert (forall ((d@@70 T@U) ) (!  (=> (= (type d@@70) DatatypeTypeType) (= (UI.Op.NoOp_q d@@70) (= (DatatypeCtorId d@@70) |##UI.Op.NoOp|))) :qid |unknown.0:0| :skolemid |2108| :pattern ( (UI.Op.NoOp_q d@@70)) )))
(assert (forall ((d@@71 T@U) ) (!  (=> (and (= (type d@@71) DatatypeTypeType) (UI.Op.NoOp_q d@@71)) (= d@@71 |#UI.Op.NoOp|)) :qid |unknown.0:0| :skolemid |2109| :pattern ( (UI.Op.NoOp_q d@@71)) )))
(assert (= (type Tclass.UI.Op) TyType))
(assert (= (Tag Tclass.UI.Op) Tagclass.UI.Op))
(assert (= (TagFamily Tclass.UI.Op) tytagFamily$Op))
(assert (forall ((bx@@162 T@U) ) (!  (=> (and (= (type bx@@162) BoxType) ($IsBox bx@@162 Tclass.UI.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@162)) bx@@162) ($Is ($Unbox DatatypeTypeType bx@@162) Tclass.UI.Op))) :qid |unknown.0:0| :skolemid |2110| :pattern ( ($IsBox bx@@162 Tclass.UI.Op)) )))
(assert ($Is |#UI.Op.NoOp| Tclass.UI.Op))
(assert (forall (($h@@108 T@U) ) (!  (=> (and (= (type $h@@108) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@108)) ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@108)) :qid |DafnyPreludebpl.545:12| :skolemid |2111| :pattern ( ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@108)) )))
(assert (= |#UI.Op.NoOp| (Lit |#UI.Op.NoOp|)))
(assert (= (type |#UI.Op.SyncOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.SyncOp|) |##UI.Op.SyncOp|))
(assert (forall ((d@@72 T@U) ) (!  (=> (= (type d@@72) DatatypeTypeType) (= (UI.Op.SyncOp_q d@@72) (= (DatatypeCtorId d@@72) |##UI.Op.SyncOp|))) :qid |unknown.0:0| :skolemid |2112| :pattern ( (UI.Op.SyncOp_q d@@72)) )))
(assert (forall ((d@@73 T@U) ) (!  (=> (and (= (type d@@73) DatatypeTypeType) (UI.Op.SyncOp_q d@@73)) (= d@@73 |#UI.Op.SyncOp|)) :qid |unknown.0:0| :skolemid |2113| :pattern ( (UI.Op.SyncOp_q d@@73)) )))
(assert ($Is |#UI.Op.SyncOp| Tclass.UI.Op))
(assert (forall (($h@@109 T@U) ) (!  (=> (and (= (type $h@@109) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@109)) ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@109)) :qid |DafnyPreludebpl.545:12| :skolemid |2114| :pattern ( ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@109)) )))
(assert (= |#UI.Op.SyncOp| (Lit |#UI.Op.SyncOp|)))
(assert (= (type |#UI.Op.CrashOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.CrashOp|) |##UI.Op.CrashOp|))
(assert (forall ((d@@74 T@U) ) (!  (=> (= (type d@@74) DatatypeTypeType) (= (UI.Op.CrashOp_q d@@74) (= (DatatypeCtorId d@@74) |##UI.Op.CrashOp|))) :qid |unknown.0:0| :skolemid |2115| :pattern ( (UI.Op.CrashOp_q d@@74)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (and (= (type d@@75) DatatypeTypeType) (UI.Op.CrashOp_q d@@75)) (= d@@75 |#UI.Op.CrashOp|)) :qid |unknown.0:0| :skolemid |2116| :pattern ( (UI.Op.CrashOp_q d@@75)) )))
(assert ($Is |#UI.Op.CrashOp| Tclass.UI.Op))
(assert (forall (($h@@110 T@U) ) (!  (=> (and (= (type $h@@110) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@110)) ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@110)) :qid |DafnyPreludebpl.545:12| :skolemid |2117| :pattern ( ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@110)) )))
(assert (= |#UI.Op.CrashOp| (Lit |#UI.Op.CrashOp|)))
(assert (forall ((arg0@@549 Int) ) (! (= (type (|#UI.Op.PushSyncOp| arg0@@549)) DatatypeTypeType) :qid |funType:#UI.Op.PushSyncOp| :pattern ( (|#UI.Op.PushSyncOp| arg0@@549)) )))
(assert (forall ((|a#78#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PushSyncOp| |a#78#0#0|)) |##UI.Op.PushSyncOp|) :qid |UIsdfy.30:24| :skolemid |2118| :pattern ( (|#UI.Op.PushSyncOp| |a#78#0#0|)) )))
(assert (forall ((d@@76 T@U) ) (!  (=> (= (type d@@76) DatatypeTypeType) (= (UI.Op.PushSyncOp_q d@@76) (= (DatatypeCtorId d@@76) |##UI.Op.PushSyncOp|))) :qid |unknown.0:0| :skolemid |2119| :pattern ( (UI.Op.PushSyncOp_q d@@76)) )))
(assert (forall ((d@@77 T@U) ) (!  (=> (and (= (type d@@77) DatatypeTypeType) (UI.Op.PushSyncOp_q d@@77)) (exists ((|a#79#0#0| Int) ) (! (= d@@77 (|#UI.Op.PushSyncOp| |a#79#0#0|)) :qid |UIsdfy.30:24| :skolemid |2120| ))) :qid |unknown.0:0| :skolemid |2121| :pattern ( (UI.Op.PushSyncOp_q d@@77)) )))
(assert (forall ((|a#80#0#0| Int) ) (! (= ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#80#0#0|) TInt)) :qid |UIsdfy.30:24| :skolemid |2122| :pattern ( ($Is (|#UI.Op.PushSyncOp| |a#80#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#81#0#0| Int) ($h@@111 T@U) ) (!  (=> (and (= (type $h@@111) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@111)) (= ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@111) ($IsAlloc (int_2_U |a#81#0#0|) TInt $h@@111))) :qid |UIsdfy.30:24| :skolemid |2123| :pattern ( ($IsAlloc (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op $h@@111)) )))
(assert (forall ((d@@78 T@U) ($h@@112 T@U) ) (!  (=> (and (and (= (type d@@78) DatatypeTypeType) (= (type $h@@112) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@112) (and (UI.Op.PushSyncOp_q d@@78) ($IsAlloc d@@78 Tclass.UI.Op $h@@112)))) ($IsAlloc (int_2_U (UI.Op.id d@@78)) TInt $h@@112)) :qid |unknown.0:0| :skolemid |2124| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@78)) TInt $h@@112)) )))
(assert (forall ((|a#82#0#0| Int) ) (! (= (|#UI.Op.PushSyncOp| (LitInt |a#82#0#0|)) (Lit (|#UI.Op.PushSyncOp| |a#82#0#0|))) :qid |UIsdfy.30:24| :skolemid |2125| :pattern ( (|#UI.Op.PushSyncOp| (LitInt |a#82#0#0|))) )))
(assert (forall ((|a#83#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PushSyncOp| |a#83#0#0|)) |a#83#0#0|) :qid |UIsdfy.30:24| :skolemid |2126| :pattern ( (|#UI.Op.PushSyncOp| |a#83#0#0|)) )))
(assert (forall ((arg0@@550 Int) ) (! (= (type (|#UI.Op.PopSyncOp| arg0@@550)) DatatypeTypeType) :qid |funType:#UI.Op.PopSyncOp| :pattern ( (|#UI.Op.PopSyncOp| arg0@@550)) )))
(assert (forall ((|a#84#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PopSyncOp| |a#84#0#0|)) |##UI.Op.PopSyncOp|) :qid |UIsdfy.31:23| :skolemid |2127| :pattern ( (|#UI.Op.PopSyncOp| |a#84#0#0|)) )))
(assert (forall ((d@@79 T@U) ) (!  (=> (= (type d@@79) DatatypeTypeType) (= (UI.Op.PopSyncOp_q d@@79) (= (DatatypeCtorId d@@79) |##UI.Op.PopSyncOp|))) :qid |unknown.0:0| :skolemid |2128| :pattern ( (UI.Op.PopSyncOp_q d@@79)) )))
(assert (forall ((d@@80 T@U) ) (!  (=> (and (= (type d@@80) DatatypeTypeType) (UI.Op.PopSyncOp_q d@@80)) (exists ((|a#85#0#0| Int) ) (! (= d@@80 (|#UI.Op.PopSyncOp| |a#85#0#0|)) :qid |UIsdfy.31:23| :skolemid |2129| ))) :qid |unknown.0:0| :skolemid |2130| :pattern ( (UI.Op.PopSyncOp_q d@@80)) )))
(assert (forall ((|a#86#0#0| Int) ) (! (= ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#86#0#0|) TInt)) :qid |UIsdfy.31:23| :skolemid |2131| :pattern ( ($Is (|#UI.Op.PopSyncOp| |a#86#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#87#0#0| Int) ($h@@113 T@U) ) (!  (=> (and (= (type $h@@113) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@113)) (= ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@113) ($IsAlloc (int_2_U |a#87#0#0|) TInt $h@@113))) :qid |UIsdfy.31:23| :skolemid |2132| :pattern ( ($IsAlloc (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op $h@@113)) )))
(assert (forall ((d@@81 T@U) ($h@@114 T@U) ) (!  (=> (and (and (= (type d@@81) DatatypeTypeType) (= (type $h@@114) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@114) (and (UI.Op.PopSyncOp_q d@@81) ($IsAlloc d@@81 Tclass.UI.Op $h@@114)))) ($IsAlloc (int_2_U (UI.Op.id d@@81)) TInt $h@@114)) :qid |unknown.0:0| :skolemid |2133| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@81)) TInt $h@@114)) )))
(assert (forall ((|a#88#0#0| Int) ) (! (= (|#UI.Op.PopSyncOp| (LitInt |a#88#0#0|)) (Lit (|#UI.Op.PopSyncOp| |a#88#0#0|))) :qid |UIsdfy.31:23| :skolemid |2134| :pattern ( (|#UI.Op.PopSyncOp| (LitInt |a#88#0#0|))) )))
(assert (forall ((|a#89#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PopSyncOp| |a#89#0#0|)) |a#89#0#0|) :qid |UIsdfy.31:23| :skolemid |2135| :pattern ( (|#UI.Op.PopSyncOp| |a#89#0#0|)) )))
(assert (forall ((arg0@@551 T@U) (arg1@@247 T@U) ) (! (= (type (|#UI.Op.GetOp| arg0@@551 arg1@@247)) DatatypeTypeType) :qid |funType:#UI.Op.GetOp| :pattern ( (|#UI.Op.GetOp| arg0@@551 arg1@@247)) )))
(assert (forall ((|a#90#0#0| T@U) (|a#90#1#0| T@U) ) (!  (=> (and (= (type |a#90#0#0|) (SeqType BoxType)) (= (type |a#90#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.GetOp| |a#90#0#0| |a#90#1#0|)) |##UI.Op.GetOp|)) :qid |UIsdfy.33:13| :skolemid |2136| :pattern ( (|#UI.Op.GetOp| |a#90#0#0| |a#90#1#0|)) )))
(assert (forall ((d@@82 T@U) ) (!  (=> (= (type d@@82) DatatypeTypeType) (= (UI.Op.GetOp_q d@@82) (= (DatatypeCtorId d@@82) |##UI.Op.GetOp|))) :qid |unknown.0:0| :skolemid |2137| :pattern ( (UI.Op.GetOp_q d@@82)) )))
(assert (forall ((d@@83 T@U) ) (!  (=> (and (= (type d@@83) DatatypeTypeType) (UI.Op.GetOp_q d@@83)) (exists ((|a#91#0#0| T@U) (|a#91#1#0| T@U) ) (!  (and (and (= (type |a#91#0#0|) (SeqType BoxType)) (= (type |a#91#1#0|) (SeqType BoxType))) (= d@@83 (|#UI.Op.GetOp| |a#91#0#0| |a#91#1#0|))) :qid |UIsdfy.33:13| :skolemid |2138| :no-pattern (type |a#91#0#0|) :no-pattern (type |a#91#1#0|) :no-pattern (U_2_int |a#91#0#0|) :no-pattern (U_2_bool |a#91#0#0|) :no-pattern (U_2_int |a#91#1#0|) :no-pattern (U_2_bool |a#91#1#0|) ))) :qid |unknown.0:0| :skolemid |2139| :pattern ( (UI.Op.GetOp_q d@@83)) )))
(assert (forall ((|a#92#0#0| T@U) (|a#92#1#0| T@U) ) (!  (=> (and (= (type |a#92#0#0|) (SeqType BoxType)) (= (type |a#92#1#0|) (SeqType BoxType))) (= ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op)  (and ($Is |a#92#0#0| Tclass.KeyType.Key) ($Is |a#92#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.33:13| :skolemid |2140| :pattern ( ($Is (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#93#0#0| T@U) (|a#93#1#0| T@U) ($h@@115 T@U) ) (!  (=> (and (and (and (= (type |a#93#0#0|) (SeqType BoxType)) (= (type |a#93#1#0|) (SeqType BoxType))) (= (type $h@@115) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@115)) (= ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@115)  (and ($IsAlloc |a#93#0#0| Tclass.KeyType.Key $h@@115) ($IsAlloc |a#93#1#0| Tclass.ValueType.Value $h@@115)))) :qid |UIsdfy.33:13| :skolemid |2141| :pattern ( ($IsAlloc (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op $h@@115)) )))
(assert (forall ((arg0@@552 T@U) ) (! (= (type (UI.Op.key arg0@@552)) (SeqType BoxType)) :qid |funType:UI.Op.key| :pattern ( (UI.Op.key arg0@@552)) )))
(assert (forall ((d@@84 T@U) ($h@@116 T@U) ) (!  (=> (and (and (= (type d@@84) DatatypeTypeType) (= (type $h@@116) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@116) (and (UI.Op.GetOp_q d@@84) ($IsAlloc d@@84 Tclass.UI.Op $h@@116)))) ($IsAlloc (UI.Op.key d@@84) Tclass.KeyType.Key $h@@116)) :qid |unknown.0:0| :skolemid |2142| :pattern ( ($IsAlloc (UI.Op.key d@@84) Tclass.KeyType.Key $h@@116)) )))
(assert (forall ((arg0@@553 T@U) ) (! (= (type (UI.Op.value arg0@@553)) (SeqType BoxType)) :qid |funType:UI.Op.value| :pattern ( (UI.Op.value arg0@@553)) )))
(assert (forall ((d@@85 T@U) ($h@@117 T@U) ) (!  (=> (and (and (= (type d@@85) DatatypeTypeType) (= (type $h@@117) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@117) (and (UI.Op.GetOp_q d@@85) ($IsAlloc d@@85 Tclass.UI.Op $h@@117)))) ($IsAlloc (UI.Op.value d@@85) Tclass.ValueType.Value $h@@117)) :qid |unknown.0:0| :skolemid |2143| :pattern ( ($IsAlloc (UI.Op.value d@@85) Tclass.ValueType.Value $h@@117)) )))
(assert (forall ((|a#94#0#0| T@U) (|a#94#1#0| T@U) ) (!  (=> (and (= (type |a#94#0#0|) (SeqType BoxType)) (= (type |a#94#1#0|) (SeqType BoxType))) (= (|#UI.Op.GetOp| (Lit |a#94#0#0|) (Lit |a#94#1#0|)) (Lit (|#UI.Op.GetOp| |a#94#0#0| |a#94#1#0|)))) :qid |UIsdfy.33:13| :skolemid |2144| :pattern ( (|#UI.Op.GetOp| (Lit |a#94#0#0|) (Lit |a#94#1#0|))) )))
(assert (forall ((|a#95#0#0| T@U) (|a#95#1#0| T@U) ) (!  (=> (and (= (type |a#95#0#0|) (SeqType BoxType)) (= (type |a#95#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.GetOp| |a#95#0#0| |a#95#1#0|)) |a#95#0#0|)) :qid |UIsdfy.33:13| :skolemid |2145| :pattern ( (|#UI.Op.GetOp| |a#95#0#0| |a#95#1#0|)) )))
(assert (forall ((|a#96#0#0| T@U) (|a#96#1#0| T@U) ) (!  (=> (and (= (type |a#96#0#0|) (SeqType BoxType)) (= (type |a#96#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) |a#96#1#0|)) :qid |UIsdfy.33:13| :skolemid |2146| :pattern ( (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) )))
(assert (forall ((arg0@@554 T@U) (arg1@@248 Int) ) (! (= (type (|#UI.Op.GetBeginOp| arg0@@554 arg1@@248)) DatatypeTypeType) :qid |funType:#UI.Op.GetBeginOp| :pattern ( (|#UI.Op.GetBeginOp| arg0@@554 arg1@@248)) )))
(assert (forall ((|a#97#0#0| T@U) (|a#97#1#0| Int) ) (!  (=> (= (type |a#97#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.Op.GetBeginOp| |a#97#0#0| |a#97#1#0|)) |##UI.Op.GetBeginOp|)) :qid |UIsdfy.35:18| :skolemid |2147| :pattern ( (|#UI.Op.GetBeginOp| |a#97#0#0| |a#97#1#0|)) )))
(assert (forall ((d@@86 T@U) ) (!  (=> (= (type d@@86) DatatypeTypeType) (= (UI.Op.GetBeginOp_q d@@86) (= (DatatypeCtorId d@@86) |##UI.Op.GetBeginOp|))) :qid |unknown.0:0| :skolemid |2148| :pattern ( (UI.Op.GetBeginOp_q d@@86)) )))
(assert (forall ((d@@87 T@U) ) (!  (=> (and (= (type d@@87) DatatypeTypeType) (UI.Op.GetBeginOp_q d@@87)) (exists ((|a#98#0#0| T@U) (|a#98#1#0| Int) ) (!  (and (= (type |a#98#0#0|) (SeqType BoxType)) (= d@@87 (|#UI.Op.GetBeginOp| |a#98#0#0| |a#98#1#0|))) :qid |UIsdfy.35:18| :skolemid |2149| :no-pattern (type |a#98#0#0|) :no-pattern (U_2_int |a#98#0#0|) :no-pattern (U_2_bool |a#98#0#0|) ))) :qid |unknown.0:0| :skolemid |2150| :pattern ( (UI.Op.GetBeginOp_q d@@87)) )))
(assert (forall ((|a#99#0#0| T@U) (|a#99#1#0| Int) ) (!  (=> (= (type |a#99#0#0|) (SeqType BoxType)) (= ($Is (|#UI.Op.GetBeginOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op)  (and ($Is |a#99#0#0| Tclass.KeyType.Key) ($Is (int_2_U |a#99#1#0|) TInt)))) :qid |UIsdfy.35:18| :skolemid |2151| :pattern ( ($Is (|#UI.Op.GetBeginOp| |a#99#0#0| |a#99#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#100#0#0| T@U) (|a#100#1#0| Int) ($h@@118 T@U) ) (!  (=> (and (and (= (type |a#100#0#0|) (SeqType BoxType)) (= (type $h@@118) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@118)) (= ($IsAlloc (|#UI.Op.GetBeginOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@118)  (and ($IsAlloc |a#100#0#0| Tclass.KeyType.Key $h@@118) ($IsAlloc (int_2_U |a#100#1#0|) TInt $h@@118)))) :qid |UIsdfy.35:18| :skolemid |2152| :pattern ( ($IsAlloc (|#UI.Op.GetBeginOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op $h@@118)) )))
(assert (forall ((d@@88 T@U) ($h@@119 T@U) ) (!  (=> (and (and (= (type d@@88) DatatypeTypeType) (= (type $h@@119) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@119) (and (UI.Op.GetBeginOp_q d@@88) ($IsAlloc d@@88 Tclass.UI.Op $h@@119)))) ($IsAlloc (UI.Op.key d@@88) Tclass.KeyType.Key $h@@119)) :qid |unknown.0:0| :skolemid |2153| :pattern ( ($IsAlloc (UI.Op.key d@@88) Tclass.KeyType.Key $h@@119)) )))
(assert (forall ((d@@89 T@U) ($h@@120 T@U) ) (!  (=> (and (and (= (type d@@89) DatatypeTypeType) (= (type $h@@120) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@120) (and (UI.Op.GetBeginOp_q d@@89) ($IsAlloc d@@89 Tclass.UI.Op $h@@120)))) ($IsAlloc (int_2_U (UI.Op.id d@@89)) TInt $h@@120)) :qid |unknown.0:0| :skolemid |2154| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@89)) TInt $h@@120)) )))
(assert (forall ((|a#101#0#0| T@U) (|a#101#1#0| Int) ) (!  (=> (= (type |a#101#0#0|) (SeqType BoxType)) (= (|#UI.Op.GetBeginOp| (Lit |a#101#0#0|) (LitInt |a#101#1#0|)) (Lit (|#UI.Op.GetBeginOp| |a#101#0#0| |a#101#1#0|)))) :qid |UIsdfy.35:18| :skolemid |2155| :pattern ( (|#UI.Op.GetBeginOp| (Lit |a#101#0#0|) (LitInt |a#101#1#0|))) )))
(assert (forall ((|a#102#0#0| T@U) (|a#102#1#0| Int) ) (!  (=> (= (type |a#102#0#0|) (SeqType BoxType)) (= (UI.Op.key (|#UI.Op.GetBeginOp| |a#102#0#0| |a#102#1#0|)) |a#102#0#0|)) :qid |UIsdfy.35:18| :skolemid |2156| :pattern ( (|#UI.Op.GetBeginOp| |a#102#0#0| |a#102#1#0|)) )))
(assert (forall ((|a#103#0#0| T@U) (|a#103#1#0| Int) ) (!  (=> (= (type |a#103#0#0|) (SeqType BoxType)) (= (UI.Op.id (|#UI.Op.GetBeginOp| |a#103#0#0| |a#103#1#0|)) |a#103#1#0|)) :qid |UIsdfy.35:18| :skolemid |2157| :pattern ( (|#UI.Op.GetBeginOp| |a#103#0#0| |a#103#1#0|)) )))
(assert (forall ((arg0@@555 T@U) (arg1@@249 Int) ) (! (= (type (|#UI.Op.GetEndOp| arg0@@555 arg1@@249)) DatatypeTypeType) :qid |funType:#UI.Op.GetEndOp| :pattern ( (|#UI.Op.GetEndOp| arg0@@555 arg1@@249)) )))
(assert (forall ((|a#104#0#0| T@U) (|a#104#1#0| Int) ) (!  (=> (= (type |a#104#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.Op.GetEndOp| |a#104#0#0| |a#104#1#0|)) |##UI.Op.GetEndOp|)) :qid |UIsdfy.36:16| :skolemid |2158| :pattern ( (|#UI.Op.GetEndOp| |a#104#0#0| |a#104#1#0|)) )))
(assert (forall ((d@@90 T@U) ) (!  (=> (= (type d@@90) DatatypeTypeType) (= (UI.Op.GetEndOp_q d@@90) (= (DatatypeCtorId d@@90) |##UI.Op.GetEndOp|))) :qid |unknown.0:0| :skolemid |2159| :pattern ( (UI.Op.GetEndOp_q d@@90)) )))
(assert (forall ((d@@91 T@U) ) (!  (=> (and (= (type d@@91) DatatypeTypeType) (UI.Op.GetEndOp_q d@@91)) (exists ((|a#105#0#0| T@U) (|a#105#1#0| Int) ) (!  (and (= (type |a#105#0#0|) (SeqType BoxType)) (= d@@91 (|#UI.Op.GetEndOp| |a#105#0#0| |a#105#1#0|))) :qid |UIsdfy.36:16| :skolemid |2160| :no-pattern (type |a#105#0#0|) :no-pattern (U_2_int |a#105#0#0|) :no-pattern (U_2_bool |a#105#0#0|) ))) :qid |unknown.0:0| :skolemid |2161| :pattern ( (UI.Op.GetEndOp_q d@@91)) )))
(assert (forall ((|a#106#0#0| T@U) (|a#106#1#0| Int) ) (!  (=> (= (type |a#106#0#0|) (SeqType BoxType)) (= ($Is (|#UI.Op.GetEndOp| |a#106#0#0| |a#106#1#0|) Tclass.UI.Op)  (and ($Is |a#106#0#0| Tclass.ValueType.Value) ($Is (int_2_U |a#106#1#0|) TInt)))) :qid |UIsdfy.36:16| :skolemid |2162| :pattern ( ($Is (|#UI.Op.GetEndOp| |a#106#0#0| |a#106#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#107#0#0| T@U) (|a#107#1#0| Int) ($h@@121 T@U) ) (!  (=> (and (and (= (type |a#107#0#0|) (SeqType BoxType)) (= (type $h@@121) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@121)) (= ($IsAlloc (|#UI.Op.GetEndOp| |a#107#0#0| |a#107#1#0|) Tclass.UI.Op $h@@121)  (and ($IsAlloc |a#107#0#0| Tclass.ValueType.Value $h@@121) ($IsAlloc (int_2_U |a#107#1#0|) TInt $h@@121)))) :qid |UIsdfy.36:16| :skolemid |2163| :pattern ( ($IsAlloc (|#UI.Op.GetEndOp| |a#107#0#0| |a#107#1#0|) Tclass.UI.Op $h@@121)) )))
(assert (forall ((d@@92 T@U) ($h@@122 T@U) ) (!  (=> (and (and (= (type d@@92) DatatypeTypeType) (= (type $h@@122) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@122) (and (UI.Op.GetEndOp_q d@@92) ($IsAlloc d@@92 Tclass.UI.Op $h@@122)))) ($IsAlloc (UI.Op.value d@@92) Tclass.ValueType.Value $h@@122)) :qid |unknown.0:0| :skolemid |2164| :pattern ( ($IsAlloc (UI.Op.value d@@92) Tclass.ValueType.Value $h@@122)) )))
(assert (forall ((d@@93 T@U) ($h@@123 T@U) ) (!  (=> (and (and (= (type d@@93) DatatypeTypeType) (= (type $h@@123) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@123) (and (UI.Op.GetEndOp_q d@@93) ($IsAlloc d@@93 Tclass.UI.Op $h@@123)))) ($IsAlloc (int_2_U (UI.Op.id d@@93)) TInt $h@@123)) :qid |unknown.0:0| :skolemid |2165| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@93)) TInt $h@@123)) )))
(assert (forall ((|a#108#0#0| T@U) (|a#108#1#0| Int) ) (!  (=> (= (type |a#108#0#0|) (SeqType BoxType)) (= (|#UI.Op.GetEndOp| (Lit |a#108#0#0|) (LitInt |a#108#1#0|)) (Lit (|#UI.Op.GetEndOp| |a#108#0#0| |a#108#1#0|)))) :qid |UIsdfy.36:16| :skolemid |2166| :pattern ( (|#UI.Op.GetEndOp| (Lit |a#108#0#0|) (LitInt |a#108#1#0|))) )))
(assert (forall ((|a#109#0#0| T@U) (|a#109#1#0| Int) ) (!  (=> (= (type |a#109#0#0|) (SeqType BoxType)) (= (UI.Op.value (|#UI.Op.GetEndOp| |a#109#0#0| |a#109#1#0|)) |a#109#0#0|)) :qid |UIsdfy.36:16| :skolemid |2167| :pattern ( (|#UI.Op.GetEndOp| |a#109#0#0| |a#109#1#0|)) )))
(assert (forall ((|a#110#0#0| T@U) (|a#110#1#0| Int) ) (!  (=> (= (type |a#110#0#0|) (SeqType BoxType)) (= (UI.Op.id (|#UI.Op.GetEndOp| |a#110#0#0| |a#110#1#0|)) |a#110#1#0|)) :qid |UIsdfy.36:16| :skolemid |2168| :pattern ( (|#UI.Op.GetEndOp| |a#110#0#0| |a#110#1#0|)) )))
(assert (forall ((arg0@@556 T@U) (arg1@@250 T@U) ) (! (= (type (|#UI.Op.PutOp| arg0@@556 arg1@@250)) DatatypeTypeType) :qid |funType:#UI.Op.PutOp| :pattern ( (|#UI.Op.PutOp| arg0@@556 arg1@@250)) )))
(assert (forall ((|a#111#0#0| T@U) (|a#111#1#0| T@U) ) (!  (=> (and (= (type |a#111#0#0|) (SeqType BoxType)) (= (type |a#111#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.PutOp| |a#111#0#0| |a#111#1#0|)) |##UI.Op.PutOp|)) :qid |UIsdfy.39:13| :skolemid |2169| :pattern ( (|#UI.Op.PutOp| |a#111#0#0| |a#111#1#0|)) )))
(assert (forall ((d@@94 T@U) ) (!  (=> (= (type d@@94) DatatypeTypeType) (= (UI.Op.PutOp_q d@@94) (= (DatatypeCtorId d@@94) |##UI.Op.PutOp|))) :qid |unknown.0:0| :skolemid |2170| :pattern ( (UI.Op.PutOp_q d@@94)) )))
(assert (forall ((d@@95 T@U) ) (!  (=> (and (= (type d@@95) DatatypeTypeType) (UI.Op.PutOp_q d@@95)) (exists ((|a#112#0#0| T@U) (|a#112#1#0| T@U) ) (!  (and (and (= (type |a#112#0#0|) (SeqType BoxType)) (= (type |a#112#1#0|) (SeqType BoxType))) (= d@@95 (|#UI.Op.PutOp| |a#112#0#0| |a#112#1#0|))) :qid |UIsdfy.39:13| :skolemid |2171| :no-pattern (type |a#112#0#0|) :no-pattern (type |a#112#1#0|) :no-pattern (U_2_int |a#112#0#0|) :no-pattern (U_2_bool |a#112#0#0|) :no-pattern (U_2_int |a#112#1#0|) :no-pattern (U_2_bool |a#112#1#0|) ))) :qid |unknown.0:0| :skolemid |2172| :pattern ( (UI.Op.PutOp_q d@@95)) )))
(assert (forall ((|a#113#0#0| T@U) (|a#113#1#0| T@U) ) (!  (=> (and (= (type |a#113#0#0|) (SeqType BoxType)) (= (type |a#113#1#0|) (SeqType BoxType))) (= ($Is (|#UI.Op.PutOp| |a#113#0#0| |a#113#1#0|) Tclass.UI.Op)  (and ($Is |a#113#0#0| Tclass.KeyType.Key) ($Is |a#113#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.39:13| :skolemid |2173| :pattern ( ($Is (|#UI.Op.PutOp| |a#113#0#0| |a#113#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#114#0#0| T@U) (|a#114#1#0| T@U) ($h@@124 T@U) ) (!  (=> (and (and (and (= (type |a#114#0#0|) (SeqType BoxType)) (= (type |a#114#1#0|) (SeqType BoxType))) (= (type $h@@124) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@124)) (= ($IsAlloc (|#UI.Op.PutOp| |a#114#0#0| |a#114#1#0|) Tclass.UI.Op $h@@124)  (and ($IsAlloc |a#114#0#0| Tclass.KeyType.Key $h@@124) ($IsAlloc |a#114#1#0| Tclass.ValueType.Value $h@@124)))) :qid |UIsdfy.39:13| :skolemid |2174| :pattern ( ($IsAlloc (|#UI.Op.PutOp| |a#114#0#0| |a#114#1#0|) Tclass.UI.Op $h@@124)) )))
(assert (forall ((d@@96 T@U) ($h@@125 T@U) ) (!  (=> (and (and (= (type d@@96) DatatypeTypeType) (= (type $h@@125) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@125) (and (UI.Op.PutOp_q d@@96) ($IsAlloc d@@96 Tclass.UI.Op $h@@125)))) ($IsAlloc (UI.Op.key d@@96) Tclass.KeyType.Key $h@@125)) :qid |unknown.0:0| :skolemid |2175| :pattern ( ($IsAlloc (UI.Op.key d@@96) Tclass.KeyType.Key $h@@125)) )))
(assert (forall ((d@@97 T@U) ($h@@126 T@U) ) (!  (=> (and (and (= (type d@@97) DatatypeTypeType) (= (type $h@@126) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@126) (and (UI.Op.PutOp_q d@@97) ($IsAlloc d@@97 Tclass.UI.Op $h@@126)))) ($IsAlloc (UI.Op.value d@@97) Tclass.ValueType.Value $h@@126)) :qid |unknown.0:0| :skolemid |2176| :pattern ( ($IsAlloc (UI.Op.value d@@97) Tclass.ValueType.Value $h@@126)) )))
(assert (forall ((|a#115#0#0| T@U) (|a#115#1#0| T@U) ) (!  (=> (and (= (type |a#115#0#0|) (SeqType BoxType)) (= (type |a#115#1#0|) (SeqType BoxType))) (= (|#UI.Op.PutOp| (Lit |a#115#0#0|) (Lit |a#115#1#0|)) (Lit (|#UI.Op.PutOp| |a#115#0#0| |a#115#1#0|)))) :qid |UIsdfy.39:13| :skolemid |2177| :pattern ( (|#UI.Op.PutOp| (Lit |a#115#0#0|) (Lit |a#115#1#0|))) )))
(assert (forall ((|a#116#0#0| T@U) (|a#116#1#0| T@U) ) (!  (=> (and (= (type |a#116#0#0|) (SeqType BoxType)) (= (type |a#116#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.PutOp| |a#116#0#0| |a#116#1#0|)) |a#116#0#0|)) :qid |UIsdfy.39:13| :skolemid |2178| :pattern ( (|#UI.Op.PutOp| |a#116#0#0| |a#116#1#0|)) )))
(assert (forall ((|a#117#0#0| T@U) (|a#117#1#0| T@U) ) (!  (=> (and (= (type |a#117#0#0|) (SeqType BoxType)) (= (type |a#117#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.PutOp| |a#117#0#0| |a#117#1#0|)) |a#117#1#0|)) :qid |UIsdfy.39:13| :skolemid |2179| :pattern ( (|#UI.Op.PutOp| |a#117#0#0| |a#117#1#0|)) )))
(assert (forall ((arg0@@557 T@U) (arg1@@251 T@U) (arg2@@152 T@U) ) (! (= (type (|#UI.Op.SuccOp| arg0@@557 arg1@@251 arg2@@152)) DatatypeTypeType) :qid |funType:#UI.Op.SuccOp| :pattern ( (|#UI.Op.SuccOp| arg0@@557 arg1@@251 arg2@@152)) )))
(assert (forall ((|a#118#0#0| T@U) (|a#118#1#0| T@U) (|a#118#2#0| T@U) ) (!  (=> (and (and (= (type |a#118#0#0|) DatatypeTypeType) (= (type |a#118#1#0|) (SeqType BoxType))) (= (type |a#118#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.Op.SuccOp| |a#118#0#0| |a#118#1#0| |a#118#2#0|)) |##UI.Op.SuccOp|)) :qid |UIsdfy.41:14| :skolemid |2180| :pattern ( (|#UI.Op.SuccOp| |a#118#0#0| |a#118#1#0| |a#118#2#0|)) )))
(assert (forall ((d@@98 T@U) ) (!  (=> (= (type d@@98) DatatypeTypeType) (= (UI.Op.SuccOp_q d@@98) (= (DatatypeCtorId d@@98) |##UI.Op.SuccOp|))) :qid |unknown.0:0| :skolemid |2181| :pattern ( (UI.Op.SuccOp_q d@@98)) )))
(assert (forall ((d@@99 T@U) ) (!  (=> (and (= (type d@@99) DatatypeTypeType) (UI.Op.SuccOp_q d@@99)) (exists ((|a#119#0#0| T@U) (|a#119#1#0| T@U) (|a#119#2#0| T@U) ) (!  (and (and (and (= (type |a#119#0#0|) DatatypeTypeType) (= (type |a#119#1#0|) (SeqType BoxType))) (= (type |a#119#2#0|) DatatypeTypeType)) (= d@@99 (|#UI.Op.SuccOp| |a#119#0#0| |a#119#1#0| |a#119#2#0|))) :qid |UIsdfy.41:14| :skolemid |2182| :no-pattern (type |a#119#0#0|) :no-pattern (type |a#119#1#0|) :no-pattern (type |a#119#2#0|) :no-pattern (U_2_int |a#119#0#0|) :no-pattern (U_2_bool |a#119#0#0|) :no-pattern (U_2_int |a#119#1#0|) :no-pattern (U_2_bool |a#119#1#0|) :no-pattern (U_2_int |a#119#2#0|) :no-pattern (U_2_bool |a#119#2#0|) ))) :qid |unknown.0:0| :skolemid |2183| :pattern ( (UI.Op.SuccOp_q d@@99)) )))
(assert (forall ((|a#120#0#0| T@U) (|a#120#1#0| T@U) (|a#120#2#0| T@U) ) (!  (=> (and (and (= (type |a#120#0#0|) DatatypeTypeType) (= (type |a#120#1#0|) (SeqType BoxType))) (= (type |a#120#2#0|) DatatypeTypeType)) (= ($Is (|#UI.Op.SuccOp| |a#120#0#0| |a#120#1#0| |a#120#2#0|) Tclass.UI.Op)  (and (and ($Is |a#120#0#0| Tclass.UI.RangeStart) ($Is |a#120#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#120#2#0| Tclass.UI.RangeEnd)))) :qid |UIsdfy.41:14| :skolemid |2184| :pattern ( ($Is (|#UI.Op.SuccOp| |a#120#0#0| |a#120#1#0| |a#120#2#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#121#0#0| T@U) (|a#121#1#0| T@U) (|a#121#2#0| T@U) ($h@@127 T@U) ) (!  (=> (and (and (and (and (= (type |a#121#0#0|) DatatypeTypeType) (= (type |a#121#1#0|) (SeqType BoxType))) (= (type |a#121#2#0|) DatatypeTypeType)) (= (type $h@@127) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@127)) (= ($IsAlloc (|#UI.Op.SuccOp| |a#121#0#0| |a#121#1#0| |a#121#2#0|) Tclass.UI.Op $h@@127)  (and (and ($IsAlloc |a#121#0#0| Tclass.UI.RangeStart $h@@127) ($IsAlloc |a#121#1#0| (TSeq Tclass.UI.SuccResult) $h@@127)) ($IsAlloc |a#121#2#0| Tclass.UI.RangeEnd $h@@127)))) :qid |UIsdfy.41:14| :skolemid |2185| :pattern ( ($IsAlloc (|#UI.Op.SuccOp| |a#121#0#0| |a#121#1#0| |a#121#2#0|) Tclass.UI.Op $h@@127)) )))
(assert (forall ((arg0@@558 T@U) ) (! (= (type (UI.Op.start arg0@@558)) DatatypeTypeType) :qid |funType:UI.Op.start| :pattern ( (UI.Op.start arg0@@558)) )))
(assert (forall ((d@@100 T@U) ($h@@128 T@U) ) (!  (=> (and (and (= (type d@@100) DatatypeTypeType) (= (type $h@@128) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@128) (and (UI.Op.SuccOp_q d@@100) ($IsAlloc d@@100 Tclass.UI.Op $h@@128)))) ($IsAlloc (UI.Op.start d@@100) Tclass.UI.RangeStart $h@@128)) :qid |unknown.0:0| :skolemid |2186| :pattern ( ($IsAlloc (UI.Op.start d@@100) Tclass.UI.RangeStart $h@@128)) )))
(assert (forall ((arg0@@559 T@U) ) (! (= (type (UI.Op.results arg0@@559)) (SeqType BoxType)) :qid |funType:UI.Op.results| :pattern ( (UI.Op.results arg0@@559)) )))
(assert (forall ((d@@101 T@U) ($h@@129 T@U) ) (!  (=> (and (and (= (type d@@101) DatatypeTypeType) (= (type $h@@129) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@129) (and (UI.Op.SuccOp_q d@@101) ($IsAlloc d@@101 Tclass.UI.Op $h@@129)))) ($IsAlloc (UI.Op.results d@@101) (TSeq Tclass.UI.SuccResult) $h@@129)) :qid |unknown.0:0| :skolemid |2187| :pattern ( ($IsAlloc (UI.Op.results d@@101) (TSeq Tclass.UI.SuccResult) $h@@129)) )))
(assert (forall ((arg0@@560 T@U) ) (! (= (type (UI.Op.end arg0@@560)) DatatypeTypeType) :qid |funType:UI.Op.end| :pattern ( (UI.Op.end arg0@@560)) )))
(assert (forall ((d@@102 T@U) ($h@@130 T@U) ) (!  (=> (and (and (= (type d@@102) DatatypeTypeType) (= (type $h@@130) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@130) (and (UI.Op.SuccOp_q d@@102) ($IsAlloc d@@102 Tclass.UI.Op $h@@130)))) ($IsAlloc (UI.Op.end d@@102) Tclass.UI.RangeEnd $h@@130)) :qid |unknown.0:0| :skolemid |2188| :pattern ( ($IsAlloc (UI.Op.end d@@102) Tclass.UI.RangeEnd $h@@130)) )))
(assert (forall ((|a#122#0#0| T@U) (|a#122#1#0| T@U) (|a#122#2#0| T@U) ) (!  (=> (and (and (= (type |a#122#0#0|) DatatypeTypeType) (= (type |a#122#1#0|) (SeqType BoxType))) (= (type |a#122#2#0|) DatatypeTypeType)) (= (|#UI.Op.SuccOp| (Lit |a#122#0#0|) (Lit |a#122#1#0|) (Lit |a#122#2#0|)) (Lit (|#UI.Op.SuccOp| |a#122#0#0| |a#122#1#0| |a#122#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2189| :pattern ( (|#UI.Op.SuccOp| (Lit |a#122#0#0|) (Lit |a#122#1#0|) (Lit |a#122#2#0|))) )))
(assert (forall ((|a#123#0#0| T@U) (|a#123#1#0| T@U) (|a#123#2#0| T@U) ) (!  (=> (and (and (= (type |a#123#0#0|) DatatypeTypeType) (= (type |a#123#1#0|) (SeqType BoxType))) (= (type |a#123#2#0|) DatatypeTypeType)) (= (UI.Op.start (|#UI.Op.SuccOp| |a#123#0#0| |a#123#1#0| |a#123#2#0|)) |a#123#0#0|)) :qid |UIsdfy.41:14| :skolemid |2190| :pattern ( (|#UI.Op.SuccOp| |a#123#0#0| |a#123#1#0| |a#123#2#0|)) )))
(assert (forall ((|a#124#0#0| T@U) (|a#124#1#0| T@U) (|a#124#2#0| T@U) ) (!  (=> (and (and (= (type |a#124#0#0|) DatatypeTypeType) (= (type |a#124#1#0|) (SeqType BoxType))) (= (type |a#124#2#0|) DatatypeTypeType)) (< (DtRank |a#124#0#0|) (DtRank (|#UI.Op.SuccOp| |a#124#0#0| |a#124#1#0| |a#124#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2191| :pattern ( (|#UI.Op.SuccOp| |a#124#0#0| |a#124#1#0| |a#124#2#0|)) )))
(assert (forall ((|a#125#0#0| T@U) (|a#125#1#0| T@U) (|a#125#2#0| T@U) ) (!  (=> (and (and (= (type |a#125#0#0|) DatatypeTypeType) (= (type |a#125#1#0|) (SeqType BoxType))) (= (type |a#125#2#0|) DatatypeTypeType)) (= (UI.Op.results (|#UI.Op.SuccOp| |a#125#0#0| |a#125#1#0| |a#125#2#0|)) |a#125#1#0|)) :qid |UIsdfy.41:14| :skolemid |2192| :pattern ( (|#UI.Op.SuccOp| |a#125#0#0| |a#125#1#0| |a#125#2#0|)) )))
(assert (forall ((|a#126#0#0| T@U) (|a#126#1#0| T@U) (|a#126#2#0| T@U) (i@@26 Int) ) (!  (=> (and (and (and (= (type |a#126#0#0|) DatatypeTypeType) (= (type |a#126#1#0|) (SeqType BoxType))) (= (type |a#126#2#0|) DatatypeTypeType)) (and (<= 0 i@@26) (< i@@26 (|Seq#Length| |a#126#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#126#1#0| i@@26))) (DtRank (|#UI.Op.SuccOp| |a#126#0#0| |a#126#1#0| |a#126#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2193| :pattern ( (|Seq#Index| |a#126#1#0| i@@26) (|#UI.Op.SuccOp| |a#126#0#0| |a#126#1#0| |a#126#2#0|)) )))
(assert (forall ((|a#127#0#0| T@U) (|a#127#1#0| T@U) (|a#127#2#0| T@U) ) (!  (=> (and (and (= (type |a#127#0#0|) DatatypeTypeType) (= (type |a#127#1#0|) (SeqType BoxType))) (= (type |a#127#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#127#1#0|) (DtRank (|#UI.Op.SuccOp| |a#127#0#0| |a#127#1#0| |a#127#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2194| :pattern ( (|#UI.Op.SuccOp| |a#127#0#0| |a#127#1#0| |a#127#2#0|)) )))
(assert (forall ((|a#128#0#0| T@U) (|a#128#1#0| T@U) (|a#128#2#0| T@U) ) (!  (=> (and (and (= (type |a#128#0#0|) DatatypeTypeType) (= (type |a#128#1#0|) (SeqType BoxType))) (= (type |a#128#2#0|) DatatypeTypeType)) (= (UI.Op.end (|#UI.Op.SuccOp| |a#128#0#0| |a#128#1#0| |a#128#2#0|)) |a#128#2#0|)) :qid |UIsdfy.41:14| :skolemid |2195| :pattern ( (|#UI.Op.SuccOp| |a#128#0#0| |a#128#1#0| |a#128#2#0|)) )))
(assert (forall ((|a#129#0#0| T@U) (|a#129#1#0| T@U) (|a#129#2#0| T@U) ) (!  (=> (and (and (= (type |a#129#0#0|) DatatypeTypeType) (= (type |a#129#1#0|) (SeqType BoxType))) (= (type |a#129#2#0|) DatatypeTypeType)) (< (DtRank |a#129#2#0|) (DtRank (|#UI.Op.SuccOp| |a#129#0#0| |a#129#1#0| |a#129#2#0|)))) :qid |UIsdfy.41:14| :skolemid |2196| :pattern ( (|#UI.Op.SuccOp| |a#129#0#0| |a#129#1#0| |a#129#2#0|)) )))
(assert (forall ((d@@103 T@U) ) (!  (=> (and (= (type d@@103) DatatypeTypeType) (|$IsA#UI.Op| d@@103)) (or (or (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@103) (UI.Op.SyncOp_q d@@103)) (UI.Op.CrashOp_q d@@103)) (UI.Op.PushSyncOp_q d@@103)) (UI.Op.PopSyncOp_q d@@103)) (UI.Op.GetOp_q d@@103)) (UI.Op.GetBeginOp_q d@@103)) (UI.Op.GetEndOp_q d@@103)) (UI.Op.PutOp_q d@@103)) (UI.Op.SuccOp_q d@@103))) :qid |unknown.0:0| :skolemid |2197| :pattern ( (|$IsA#UI.Op| d@@103)) )))
(assert (forall ((d@@104 T@U) ) (!  (=> (and (= (type d@@104) DatatypeTypeType) ($Is d@@104 Tclass.UI.Op)) (or (or (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@104) (UI.Op.SyncOp_q d@@104)) (UI.Op.CrashOp_q d@@104)) (UI.Op.PushSyncOp_q d@@104)) (UI.Op.PopSyncOp_q d@@104)) (UI.Op.GetOp_q d@@104)) (UI.Op.GetBeginOp_q d@@104)) (UI.Op.GetEndOp_q d@@104)) (UI.Op.PutOp_q d@@104)) (UI.Op.SuccOp_q d@@104))) :qid |unknown.0:0| :skolemid |2198| :pattern ( (UI.Op.SuccOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) :pattern ( (UI.Op.PutOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) :pattern ( (UI.Op.GetEndOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) :pattern ( (UI.Op.GetBeginOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) :pattern ( (UI.Op.GetOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) :pattern ( (UI.Op.PopSyncOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) :pattern ( (UI.Op.PushSyncOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) :pattern ( (UI.Op.CrashOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) :pattern ( (UI.Op.SyncOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) :pattern ( (UI.Op.NoOp_q d@@104) ($Is d@@104 Tclass.UI.Op)) )))
(assert (forall ((a@@150 T@U) (b@@87 T@U) ) (!  (=> (and (and (= (type a@@150) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (UI.Op.NoOp_q a@@150) (UI.Op.NoOp_q b@@87))) (= (|UI.Op#Equal| a@@150 b@@87) true)) :qid |unknown.0:0| :skolemid |2199| :pattern ( (|UI.Op#Equal| a@@150 b@@87) (UI.Op.NoOp_q a@@150)) :pattern ( (|UI.Op#Equal| a@@150 b@@87) (UI.Op.NoOp_q b@@87)) )))
(assert (forall ((a@@151 T@U) (b@@88 T@U) ) (!  (=> (and (and (= (type a@@151) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) (and (UI.Op.SyncOp_q a@@151) (UI.Op.SyncOp_q b@@88))) (= (|UI.Op#Equal| a@@151 b@@88) true)) :qid |unknown.0:0| :skolemid |2200| :pattern ( (|UI.Op#Equal| a@@151 b@@88) (UI.Op.SyncOp_q a@@151)) :pattern ( (|UI.Op#Equal| a@@151 b@@88) (UI.Op.SyncOp_q b@@88)) )))
(assert (forall ((a@@152 T@U) (b@@89 T@U) ) (!  (=> (and (and (= (type a@@152) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) (and (UI.Op.CrashOp_q a@@152) (UI.Op.CrashOp_q b@@89))) (= (|UI.Op#Equal| a@@152 b@@89) true)) :qid |unknown.0:0| :skolemid |2201| :pattern ( (|UI.Op#Equal| a@@152 b@@89) (UI.Op.CrashOp_q a@@152)) :pattern ( (|UI.Op#Equal| a@@152 b@@89) (UI.Op.CrashOp_q b@@89)) )))
(assert (forall ((a@@153 T@U) (b@@90 T@U) ) (!  (=> (and (and (= (type a@@153) DatatypeTypeType) (= (type b@@90) DatatypeTypeType)) (and (UI.Op.PushSyncOp_q a@@153) (UI.Op.PushSyncOp_q b@@90))) (= (|UI.Op#Equal| a@@153 b@@90) (= (UI.Op.id a@@153) (UI.Op.id b@@90)))) :qid |unknown.0:0| :skolemid |2202| :pattern ( (|UI.Op#Equal| a@@153 b@@90) (UI.Op.PushSyncOp_q a@@153)) :pattern ( (|UI.Op#Equal| a@@153 b@@90) (UI.Op.PushSyncOp_q b@@90)) )))
(assert (forall ((a@@154 T@U) (b@@91 T@U) ) (!  (=> (and (and (= (type a@@154) DatatypeTypeType) (= (type b@@91) DatatypeTypeType)) (and (UI.Op.PopSyncOp_q a@@154) (UI.Op.PopSyncOp_q b@@91))) (= (|UI.Op#Equal| a@@154 b@@91) (= (UI.Op.id a@@154) (UI.Op.id b@@91)))) :qid |unknown.0:0| :skolemid |2203| :pattern ( (|UI.Op#Equal| a@@154 b@@91) (UI.Op.PopSyncOp_q a@@154)) :pattern ( (|UI.Op#Equal| a@@154 b@@91) (UI.Op.PopSyncOp_q b@@91)) )))
(assert (forall ((a@@155 T@U) (b@@92 T@U) ) (!  (=> (and (and (= (type a@@155) DatatypeTypeType) (= (type b@@92) DatatypeTypeType)) (and (UI.Op.GetOp_q a@@155) (UI.Op.GetOp_q b@@92))) (= (|UI.Op#Equal| a@@155 b@@92)  (and (|Seq#Equal| (UI.Op.key a@@155) (UI.Op.key b@@92)) (|Seq#Equal| (UI.Op.value a@@155) (UI.Op.value b@@92))))) :qid |unknown.0:0| :skolemid |2204| :pattern ( (|UI.Op#Equal| a@@155 b@@92) (UI.Op.GetOp_q a@@155)) :pattern ( (|UI.Op#Equal| a@@155 b@@92) (UI.Op.GetOp_q b@@92)) )))
(assert (forall ((a@@156 T@U) (b@@93 T@U) ) (!  (=> (and (and (= (type a@@156) DatatypeTypeType) (= (type b@@93) DatatypeTypeType)) (and (UI.Op.GetBeginOp_q a@@156) (UI.Op.GetBeginOp_q b@@93))) (= (|UI.Op#Equal| a@@156 b@@93)  (and (|Seq#Equal| (UI.Op.key a@@156) (UI.Op.key b@@93)) (= (UI.Op.id a@@156) (UI.Op.id b@@93))))) :qid |unknown.0:0| :skolemid |2205| :pattern ( (|UI.Op#Equal| a@@156 b@@93) (UI.Op.GetBeginOp_q a@@156)) :pattern ( (|UI.Op#Equal| a@@156 b@@93) (UI.Op.GetBeginOp_q b@@93)) )))
(assert (forall ((a@@157 T@U) (b@@94 T@U) ) (!  (=> (and (and (= (type a@@157) DatatypeTypeType) (= (type b@@94) DatatypeTypeType)) (and (UI.Op.GetEndOp_q a@@157) (UI.Op.GetEndOp_q b@@94))) (= (|UI.Op#Equal| a@@157 b@@94)  (and (|Seq#Equal| (UI.Op.value a@@157) (UI.Op.value b@@94)) (= (UI.Op.id a@@157) (UI.Op.id b@@94))))) :qid |unknown.0:0| :skolemid |2206| :pattern ( (|UI.Op#Equal| a@@157 b@@94) (UI.Op.GetEndOp_q a@@157)) :pattern ( (|UI.Op#Equal| a@@157 b@@94) (UI.Op.GetEndOp_q b@@94)) )))
(assert (forall ((a@@158 T@U) (b@@95 T@U) ) (!  (=> (and (and (= (type a@@158) DatatypeTypeType) (= (type b@@95) DatatypeTypeType)) (and (UI.Op.PutOp_q a@@158) (UI.Op.PutOp_q b@@95))) (= (|UI.Op#Equal| a@@158 b@@95)  (and (|Seq#Equal| (UI.Op.key a@@158) (UI.Op.key b@@95)) (|Seq#Equal| (UI.Op.value a@@158) (UI.Op.value b@@95))))) :qid |unknown.0:0| :skolemid |2207| :pattern ( (|UI.Op#Equal| a@@158 b@@95) (UI.Op.PutOp_q a@@158)) :pattern ( (|UI.Op#Equal| a@@158 b@@95) (UI.Op.PutOp_q b@@95)) )))
(assert (forall ((a@@159 T@U) (b@@96 T@U) ) (!  (=> (and (and (= (type a@@159) DatatypeTypeType) (= (type b@@96) DatatypeTypeType)) (and (UI.Op.SuccOp_q a@@159) (UI.Op.SuccOp_q b@@96))) (= (|UI.Op#Equal| a@@159 b@@96)  (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@159) (UI.Op.start b@@96)) (|Seq#Equal| (UI.Op.results a@@159) (UI.Op.results b@@96))) (|UI.RangeEnd#Equal| (UI.Op.end a@@159) (UI.Op.end b@@96))))) :qid |unknown.0:0| :skolemid |2208| :pattern ( (|UI.Op#Equal| a@@159 b@@96) (UI.Op.SuccOp_q a@@159)) :pattern ( (|UI.Op#Equal| a@@159 b@@96) (UI.Op.SuccOp_q b@@96)) )))
(assert (forall ((a@@160 T@U) (b@@97 T@U) ) (!  (=> (and (= (type a@@160) DatatypeTypeType) (= (type b@@97) DatatypeTypeType)) (= (|UI.Op#Equal| a@@160 b@@97) (= a@@160 b@@97))) :qid |unknown.0:0| :skolemid |2209| :pattern ( (|UI.Op#Equal| a@@160 b@@97)) )))
(assert (= (type Tclass.UI.__default) TyType))
(assert (= (Tag Tclass.UI.__default) Tagclass.UI.__default))
(assert (= (TagFamily Tclass.UI.__default) tytagFamily$_default))
(assert (forall ((bx@@163 T@U) ) (!  (=> (and (= (type bx@@163) BoxType) ($IsBox bx@@163 Tclass.UI.__default)) (and (= ($Box ($Unbox refType bx@@163)) bx@@163) ($Is ($Unbox refType bx@@163) Tclass.UI.__default))) :qid |unknown.0:0| :skolemid |2210| :pattern ( ($IsBox bx@@163 Tclass.UI.__default)) )))
(assert (forall (($o@@36 T@U) ) (!  (=> (= (type $o@@36) refType) (= ($Is $o@@36 Tclass.UI.__default)  (or (= $o@@36 null) (= (dtype $o@@36) Tclass.UI.__default)))) :qid |unknown.0:0| :skolemid |2211| :pattern ( ($Is $o@@36 Tclass.UI.__default)) )))
(assert (forall (($o@@37 T@U) ($h@@131 T@U) ) (!  (=> (and (= (type $o@@37) refType) (= (type $h@@131) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@37 Tclass.UI.__default $h@@131)  (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@131 $o@@37) alloc))))) :qid |unknown.0:0| :skolemid |2212| :pattern ( ($IsAlloc $o@@37 Tclass.UI.__default $h@@131)) )))
(assert (forall ((arg0@@561 T@U) (arg1@@252 T@U) ) (! (= (type (|#Journal.JournalEntry.JournalInsert| arg0@@561 arg1@@252)) DatatypeTypeType) :qid |funType:#Journal.JournalEntry.JournalInsert| :pattern ( (|#Journal.JournalEntry.JournalInsert| arg0@@561 arg1@@252)) )))
(assert (forall ((|a#130#0#0| T@U) (|a#130#1#0| T@U) ) (!  (=> (and (= (type |a#130#0#0|) (SeqType BoxType)) (= (type |a#130#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#Journal.JournalEntry.JournalInsert| |a#130#0#0| |a#130#1#0|)) |##Journal.JournalEntry.JournalInsert|)) :qid |Journalidfy.15:41| :skolemid |2213| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#130#0#0| |a#130#1#0|)) )))
(assert (forall ((d@@105 T@U) ) (!  (=> (= (type d@@105) DatatypeTypeType) (= (Journal.JournalEntry.JournalInsert_q d@@105) (= (DatatypeCtorId d@@105) |##Journal.JournalEntry.JournalInsert|))) :qid |unknown.0:0| :skolemid |2214| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@105)) )))
(assert (forall ((d@@106 T@U) ) (!  (=> (and (= (type d@@106) DatatypeTypeType) (Journal.JournalEntry.JournalInsert_q d@@106)) (exists ((|a#131#0#0| T@U) (|a#131#1#0| T@U) ) (!  (and (and (= (type |a#131#0#0|) (SeqType BoxType)) (= (type |a#131#1#0|) (SeqType BoxType))) (= d@@106 (|#Journal.JournalEntry.JournalInsert| |a#131#0#0| |a#131#1#0|))) :qid |Journalidfy.15:41| :skolemid |2215| :no-pattern (type |a#131#0#0|) :no-pattern (type |a#131#1#0|) :no-pattern (U_2_int |a#131#0#0|) :no-pattern (U_2_bool |a#131#0#0|) :no-pattern (U_2_int |a#131#1#0|) :no-pattern (U_2_bool |a#131#1#0|) ))) :qid |unknown.0:0| :skolemid |2216| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@106)) )))
(assert (forall ((|a#132#0#0| T@U) (|a#132#1#0| T@U) ) (!  (=> (and (= (type |a#132#0#0|) (SeqType BoxType)) (= (type |a#132#1#0|) (SeqType BoxType))) (= ($Is (|#Journal.JournalEntry.JournalInsert| |a#132#0#0| |a#132#1#0|) Tclass.Journal.JournalEntry)  (and ($Is |a#132#0#0| Tclass.KeyType.Key) ($Is |a#132#1#0| Tclass.ValueType.Value)))) :qid |Journalidfy.15:41| :skolemid |2217| :pattern ( ($Is (|#Journal.JournalEntry.JournalInsert| |a#132#0#0| |a#132#1#0|) Tclass.Journal.JournalEntry)) )))
(assert (forall ((|a#133#0#0| T@U) (|a#133#1#0| T@U) ($h@@132 T@U) ) (!  (=> (and (and (and (= (type |a#133#0#0|) (SeqType BoxType)) (= (type |a#133#1#0|) (SeqType BoxType))) (= (type $h@@132) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@132)) (= ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#133#0#0| |a#133#1#0|) Tclass.Journal.JournalEntry $h@@132)  (and ($IsAlloc |a#133#0#0| Tclass.KeyType.Key $h@@132) ($IsAlloc |a#133#1#0| Tclass.ValueType.Value $h@@132)))) :qid |Journalidfy.15:41| :skolemid |2218| :pattern ( ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#133#0#0| |a#133#1#0|) Tclass.Journal.JournalEntry $h@@132)) )))
(assert (forall ((arg0@@562 T@U) ) (! (= (type (Journal.JournalEntry.key arg0@@562)) (SeqType BoxType)) :qid |funType:Journal.JournalEntry.key| :pattern ( (Journal.JournalEntry.key arg0@@562)) )))
(assert (forall ((d@@107 T@U) ($h@@133 T@U) ) (!  (=> (and (and (= (type d@@107) DatatypeTypeType) (= (type $h@@133) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@133) (and (Journal.JournalEntry.JournalInsert_q d@@107) ($IsAlloc d@@107 Tclass.Journal.JournalEntry $h@@133)))) ($IsAlloc (Journal.JournalEntry.key d@@107) Tclass.KeyType.Key $h@@133)) :qid |unknown.0:0| :skolemid |2219| :pattern ( ($IsAlloc (Journal.JournalEntry.key d@@107) Tclass.KeyType.Key $h@@133)) )))
(assert (forall ((arg0@@563 T@U) ) (! (= (type (Journal.JournalEntry.value arg0@@563)) (SeqType BoxType)) :qid |funType:Journal.JournalEntry.value| :pattern ( (Journal.JournalEntry.value arg0@@563)) )))
(assert (forall ((d@@108 T@U) ($h@@134 T@U) ) (!  (=> (and (and (= (type d@@108) DatatypeTypeType) (= (type $h@@134) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@134) (and (Journal.JournalEntry.JournalInsert_q d@@108) ($IsAlloc d@@108 Tclass.Journal.JournalEntry $h@@134)))) ($IsAlloc (Journal.JournalEntry.value d@@108) Tclass.ValueType.Value $h@@134)) :qid |unknown.0:0| :skolemid |2220| :pattern ( ($IsAlloc (Journal.JournalEntry.value d@@108) Tclass.ValueType.Value $h@@134)) )))
(assert (forall ((|a#134#0#0| T@U) (|a#134#1#0| T@U) ) (!  (=> (and (= (type |a#134#0#0|) (SeqType BoxType)) (= (type |a#134#1#0|) (SeqType BoxType))) (= (|#Journal.JournalEntry.JournalInsert| (Lit |a#134#0#0|) (Lit |a#134#1#0|)) (Lit (|#Journal.JournalEntry.JournalInsert| |a#134#0#0| |a#134#1#0|)))) :qid |Journalidfy.15:41| :skolemid |2221| :pattern ( (|#Journal.JournalEntry.JournalInsert| (Lit |a#134#0#0|) (Lit |a#134#1#0|))) )))
(assert (forall ((|a#135#0#0| T@U) (|a#135#1#0| T@U) ) (!  (=> (and (= (type |a#135#0#0|) (SeqType BoxType)) (= (type |a#135#1#0|) (SeqType BoxType))) (= (Journal.JournalEntry.key (|#Journal.JournalEntry.JournalInsert| |a#135#0#0| |a#135#1#0|)) |a#135#0#0|)) :qid |Journalidfy.15:41| :skolemid |2222| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#135#0#0| |a#135#1#0|)) )))
(assert (forall ((|a#136#0#0| T@U) (|a#136#1#0| T@U) ) (!  (=> (and (= (type |a#136#0#0|) (SeqType BoxType)) (= (type |a#136#1#0|) (SeqType BoxType))) (= (Journal.JournalEntry.value (|#Journal.JournalEntry.JournalInsert| |a#136#0#0| |a#136#1#0|)) |a#136#1#0|)) :qid |Journalidfy.15:41| :skolemid |2223| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#136#0#0| |a#136#1#0|)) )))
(assert (forall ((d@@109 T@U) ) (!  (=> (and (= (type d@@109) DatatypeTypeType) (|$IsA#Journal.JournalEntry| d@@109)) (Journal.JournalEntry.JournalInsert_q d@@109)) :qid |unknown.0:0| :skolemid |2224| :pattern ( (|$IsA#Journal.JournalEntry| d@@109)) )))
(assert (forall ((d@@110 T@U) ) (!  (=> (and (= (type d@@110) DatatypeTypeType) ($Is d@@110 Tclass.Journal.JournalEntry)) (Journal.JournalEntry.JournalInsert_q d@@110)) :qid |unknown.0:0| :skolemid |2225| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@110) ($Is d@@110 Tclass.Journal.JournalEntry)) )))
(assert (forall ((a@@161 T@U) (b@@98 T@U) ) (!  (=> (and (and (= (type a@@161) DatatypeTypeType) (= (type b@@98) DatatypeTypeType)) true) (= (|Journal.JournalEntry#Equal| a@@161 b@@98)  (and (|Seq#Equal| (Journal.JournalEntry.key a@@161) (Journal.JournalEntry.key b@@98)) (|Seq#Equal| (Journal.JournalEntry.value a@@161) (Journal.JournalEntry.value b@@98))))) :qid |unknown.0:0| :skolemid |2226| :pattern ( (|Journal.JournalEntry#Equal| a@@161 b@@98)) )))
(assert (forall ((a@@162 T@U) (b@@99 T@U) ) (!  (=> (and (= (type a@@162) DatatypeTypeType) (= (type b@@99) DatatypeTypeType)) (= (|Journal.JournalEntry#Equal| a@@162 b@@99) (= a@@162 b@@99))) :qid |unknown.0:0| :skolemid |2227| :pattern ( (|Journal.JournalEntry#Equal| a@@162 b@@99)) )))
(assert (= (type Tclass.Journal.__default) TyType))
(assert (= (Tag Tclass.Journal.__default) Tagclass.Journal.__default))
(assert (= (TagFamily Tclass.Journal.__default) tytagFamily$_default))
(assert (forall ((bx@@164 T@U) ) (!  (=> (and (= (type bx@@164) BoxType) ($IsBox bx@@164 Tclass.Journal.__default)) (and (= ($Box ($Unbox refType bx@@164)) bx@@164) ($Is ($Unbox refType bx@@164) Tclass.Journal.__default))) :qid |unknown.0:0| :skolemid |2228| :pattern ( ($IsBox bx@@164 Tclass.Journal.__default)) )))
(assert (forall (($o@@38 T@U) ) (!  (=> (= (type $o@@38) refType) (= ($Is $o@@38 Tclass.Journal.__default)  (or (= $o@@38 null) (= (dtype $o@@38) Tclass.Journal.__default)))) :qid |unknown.0:0| :skolemid |2229| :pattern ( ($Is $o@@38 Tclass.Journal.__default)) )))
(assert (forall (($o@@39 T@U) ($h@@135 T@U) ) (!  (=> (and (= (type $o@@39) refType) (= (type $h@@135) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@39 Tclass.Journal.__default $h@@135)  (or (= $o@@39 null) (U_2_bool (MapType1Select (MapType0Select $h@@135 $o@@39) alloc))))) :qid |unknown.0:0| :skolemid |2230| :pattern ( ($IsAlloc $o@@39 Tclass.Journal.__default $h@@135)) )))
(assert (forall ((arg0@@564 T@U) ) (! (= (type (Journal.__default.JournalEntriesForUIOp arg0@@564)) (SeqType BoxType)) :qid |funType:Journal.__default.JournalEntriesForUIOp| :pattern ( (Journal.__default.JournalEntriesForUIOp arg0@@564)) )))
(assert  (=> true (forall ((|uiop#0| T@U) ) (!  (=> (and (= (type |uiop#0|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| |uiop#0|) ($Is |uiop#0| Tclass.UI.Op))) ($Is (Journal.__default.JournalEntriesForUIOp |uiop#0|) (TSeq Tclass.Journal.JournalEntry))) :qid |Journalidfy.17:34| :skolemid |2231| :pattern ( (Journal.__default.JournalEntriesForUIOp |uiop#0|)) ))))
(assert (forall ((|uiop#0@@0| T@U) ) (!  (=> (and (= (type |uiop#0@@0|) DatatypeTypeType) ($Is |uiop#0@@0| Tclass.UI.Op)) (= (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@0|) true)) :qid |Journalidfy.17:34| :skolemid |2232| :pattern ( (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@0|)) )))
(assert  (=> true (forall ((|uiop#0@@1| T@U) ) (!  (=> (and (= (type |uiop#0@@1|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| |uiop#0@@1|) ($Is |uiop#0@@1| Tclass.UI.Op))) (= (Journal.__default.JournalEntriesForUIOp |uiop#0@@1|) (ite (UI.Op.PutOp_q |uiop#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#Journal.JournalEntry.JournalInsert| (UI.Op.key |uiop#0@@1|) (UI.Op.value |uiop#0@@1|)))) (|Seq#Empty| BoxType)))) :qid |Journalidfy.17:34| :skolemid |2233| :pattern ( (Journal.__default.JournalEntriesForUIOp |uiop#0@@1|)) ))))
(assert  (=> true (forall ((|uiop#0@@2| T@U) ) (!  (=> (and (= (type |uiop#0@@2|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit |uiop#0@@2|)) ($Is |uiop#0@@2| Tclass.UI.Op))) (= (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@2|)) (ite (UI.Op.PutOp_q (Lit |uiop#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#Journal.JournalEntry.JournalInsert| (Lit (UI.Op.key (Lit |uiop#0@@2|))) (Lit (UI.Op.value (Lit |uiop#0@@2|))))))) (|Seq#Empty| BoxType)))) :qid |Journalidfy.17:34| :weight 3 :skolemid |2234| :pattern ( (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@2|))) ))))
(assert (forall ((arg0@@565 T@U) (arg1@@253 T@U) ) (! (= (type (Journal.__default.JournalEntriesForUIOps arg0@@565 arg1@@253)) (SeqType BoxType)) :qid |funType:Journal.__default.JournalEntriesForUIOps| :pattern ( (Journal.__default.JournalEntriesForUIOps arg0@@565 arg1@@253)) )))
(assert (forall (($ly@@204 T@U) (|uiops#0| T@U) ) (!  (=> (and (= (type $ly@@204) LayerTypeType) (= (type |uiops#0|) (SeqType BoxType))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@204) |uiops#0|) (Journal.__default.JournalEntriesForUIOps $ly@@204 |uiops#0|))) :qid |Journalidfy.25:12| :skolemid |2235| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@204) |uiops#0|)) )))
(assert (forall (($ly@@205 T@U) (|uiops#0@@0| T@U) ) (!  (=> (and (= (type $ly@@205) LayerTypeType) (= (type |uiops#0@@0|) (SeqType BoxType))) (= (Journal.__default.JournalEntriesForUIOps $ly@@205 |uiops#0@@0|) (Journal.__default.JournalEntriesForUIOps $LZ |uiops#0@@0|))) :qid |Journalidfy.25:12| :skolemid |2236| :pattern ( (Journal.__default.JournalEntriesForUIOps (AsFuelBottom $ly@@205) |uiops#0@@0|)) )))
(assert  (=> true (forall (($ly@@206 T@U) (|uiops#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@206) LayerTypeType) (= (type |uiops#0@@1|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#0@@1|) ($Is |uiops#0@@1| (TSeq Tclass.UI.Op)))) ($Is (Journal.__default.JournalEntriesForUIOps $ly@@206 |uiops#0@@1|) (TSeq Tclass.Journal.JournalEntry))) :qid |Journalidfy.25:12| :skolemid |2237| :pattern ( (Journal.__default.JournalEntriesForUIOps $ly@@206 |uiops#0@@1|)) ))))
(assert (forall (($ly@@207 T@U) (|uiops#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@207) LayerTypeType) (= (type |uiops#0@@2|) (SeqType BoxType))) ($Is |uiops#0@@2| (TSeq Tclass.UI.Op))) (= (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@207 |uiops#0@@2|) true)) :qid |Journalidfy.25:12| :skolemid |2238| :pattern ( (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@207 |uiops#0@@2|)) )))
(assert  (=> true (forall (($ly@@208 T@U) (|uiops#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@208) LayerTypeType) (= (type |uiops#0@@3|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#0@@3|) ($Is |uiops#0@@3| (TSeq Tclass.UI.Op)))) (and (=> (not (|Seq#Equal| |uiops#0@@3| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.UI.Op |uiops#0@@3|) (|Journal.__default.JournalEntriesForUIOps#canCall| (Sequences.__default.DropLast Tclass.UI.Op |uiops#0@@3|))) (and (|Sequences.__default.Last#canCall| Tclass.UI.Op |uiops#0@@3|) (|Journal.__default.JournalEntriesForUIOp#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op |uiops#0@@3|)))))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@208) |uiops#0@@3|) (ite (|Seq#Equal| |uiops#0@@3| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (Journal.__default.JournalEntriesForUIOps $ly@@208 (Sequences.__default.DropLast Tclass.UI.Op |uiops#0@@3|)) (Journal.__default.JournalEntriesForUIOp ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op |uiops#0@@3|)))))))) :qid |Journalidfy.25:12| :skolemid |2239| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@208) |uiops#0@@3|)) ))))
(assert  (=> true (forall (($ly@@209 T@U) (|uiops#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@209) LayerTypeType) (= (type |uiops#0@@4|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| (Lit |uiops#0@@4|)) ($Is |uiops#0@@4| (TSeq Tclass.UI.Op)))) (and (=> (not (|Seq#Equal| |uiops#0@@4| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.UI.Op (Lit |uiops#0@@4|)) (|Journal.__default.JournalEntriesForUIOps#canCall| (Lit (Sequences.__default.DropLast Tclass.UI.Op (Lit |uiops#0@@4|))))) (and (|Sequences.__default.Last#canCall| Tclass.UI.Op (Lit |uiops#0@@4|)) (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op (Lit |uiops#0@@4|)))))))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@209) (Lit |uiops#0@@4|)) (ite (|Seq#Equal| |uiops#0@@4| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (Journal.__default.JournalEntriesForUIOps ($LS $ly@@209) (Lit (Sequences.__default.DropLast Tclass.UI.Op (Lit |uiops#0@@4|)))) (Journal.__default.JournalEntriesForUIOp (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op (Lit |uiops#0@@4|)))))))))) :qid |Journalidfy.25:12| :weight 3 :skolemid |2240| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@209) (Lit |uiops#0@@4|))) ))))
(assert (= (type Tclass.NativePackedInts.__default) TyType))
(assert (= (Tag Tclass.NativePackedInts.__default) Tagclass.NativePackedInts.__default))
(assert (= (TagFamily Tclass.NativePackedInts.__default) tytagFamily$_default))
(assert (forall ((bx@@165 T@U) ) (!  (=> (and (= (type bx@@165) BoxType) ($IsBox bx@@165 Tclass.NativePackedInts.__default)) (and (= ($Box ($Unbox refType bx@@165)) bx@@165) ($Is ($Unbox refType bx@@165) Tclass.NativePackedInts.__default))) :qid |unknown.0:0| :skolemid |2241| :pattern ( ($IsBox bx@@165 Tclass.NativePackedInts.__default)) )))
(assert (forall (($o@@40 T@U) ) (!  (=> (= (type $o@@40) refType) (= ($Is $o@@40 Tclass.NativePackedInts.__default)  (or (= $o@@40 null) (= (dtype $o@@40) Tclass.NativePackedInts.__default)))) :qid |unknown.0:0| :skolemid |2242| :pattern ( ($Is $o@@40 Tclass.NativePackedInts.__default)) )))
(assert (forall (($o@@41 T@U) ($h@@136 T@U) ) (!  (=> (and (= (type $o@@41) refType) (= (type $h@@136) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@41 Tclass.NativePackedInts.__default $h@@136)  (or (= $o@@41 null) (U_2_bool (MapType1Select (MapType0Select $h@@136 $o@@41) alloc))))) :qid |unknown.0:0| :skolemid |2243| :pattern ( ($IsAlloc $o@@41 Tclass.NativePackedInts.__default $h@@136)) )))
(assert (forall (($ly@@210 T@U) (|s#0@@75| T@U) ) (!  (=> (and (= (type $ly@@210) LayerTypeType) (= (type |s#0@@75|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@210) |s#0@@75|) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@210 |s#0@@75|))) :qid |PackedIntssdfy.11:22| :skolemid |2244| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@210) |s#0@@75|)) )))
(assert (forall (($ly@@211 T@U) (|s#0@@76| T@U) ) (!  (=> (and (= (type $ly@@211) LayerTypeType) (= (type |s#0@@76|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@211 |s#0@@76|) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $LZ |s#0@@76|))) :qid |PackedIntssdfy.11:22| :skolemid |2245| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 (AsFuelBottom $ly@@211) |s#0@@76|)) )))
(assert  (=> true (forall (($ly@@212 T@U) (|s#0@@77| T@U) ) (!  (=> (and (and (= (type $ly@@212) LayerTypeType) (= (type |s#0@@77|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| |s#0@@77|) (and ($Is |s#0@@77| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@77|) (LitInt 4))))) (and (<= (LitInt 0) (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@212 |s#0@@77|)) (< (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@212 |s#0@@77|) 4294967296))) :qid |PackedIntssdfy.11:22| :skolemid |2246| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 $ly@@212 |s#0@@77|)) ))))
(assert (forall (($ly@@213 T@U) (|s#0@@78| T@U) ) (!  (=> (and (and (= (type $ly@@213) LayerTypeType) (= (type |s#0@@78|) (SeqType BoxType))) ($Is |s#0@@78| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| $ly@@213 |s#0@@78|) (= (|Seq#Length| |s#0@@78|) (LitInt 4)))) :qid |PackedIntssdfy.11:22| :skolemid |2247| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint32#requires| $ly@@213 |s#0@@78|)) )))
(assert  (=> true (forall (($ly@@214 T@U) (|s#0@@79| T@U) ) (!  (=> (and (and (= (type $ly@@214) LayerTypeType) (= (type |s#0@@79|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| |s#0@@79|) (and ($Is |s#0@@79| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@79|) (LitInt 4))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@214) |s#0@@79|) (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| |s#0@@79| (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@79| (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@79| (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@79| (LitInt 3)))) (LitInt 16777216))))) :qid |PackedIntssdfy.11:22| :skolemid |2248| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@214) |s#0@@79|)) ))))
(assert  (=> true (forall (($ly@@215 T@U) (|s#0@@80| T@U) ) (!  (=> (and (and (= (type $ly@@215) LayerTypeType) (= (type |s#0@@80|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit |s#0@@80|)) (and ($Is |s#0@@80| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |s#0@@80|)) (LitInt 4))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@215) (Lit |s#0@@80|)) (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@80|) (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@80|) (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@80|) (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@80|) (LitInt 3)))) (LitInt 16777216))))) :qid |PackedIntssdfy.11:22| :weight 3 :skolemid |2249| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32 ($LS $ly@@215) (Lit |s#0@@80|))) ))))
(assert (forall (($ly@@216 T@U) (|s#0@@81| T@U) ) (!  (=> (and (= (type $ly@@216) LayerTypeType) (= (type |s#0@@81|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@216) |s#0@@81|) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@216 |s#0@@81|))) :qid |PackedIntssdfy.20:22| :skolemid |2250| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@216) |s#0@@81|)) )))
(assert (forall (($ly@@217 T@U) (|s#0@@82| T@U) ) (!  (=> (and (= (type $ly@@217) LayerTypeType) (= (type |s#0@@82|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@217 |s#0@@82|) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $LZ |s#0@@82|))) :qid |PackedIntssdfy.20:22| :skolemid |2251| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 (AsFuelBottom $ly@@217) |s#0@@82|)) )))
(assert  (=> true (forall (($ly@@218 T@U) (|s#0@@83| T@U) ) (!  (=> (and (and (= (type $ly@@218) LayerTypeType) (= (type |s#0@@83|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| |s#0@@83|) (and ($Is |s#0@@83| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@83|) (LitInt 8))))) (and (<= (LitInt 0) (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@218 |s#0@@83|)) (< (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@218 |s#0@@83|) 18446744073709551616))) :qid |PackedIntssdfy.20:22| :skolemid |2252| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 $ly@@218 |s#0@@83|)) ))))
(assert (forall (($ly@@219 T@U) (|s#0@@84| T@U) ) (!  (=> (and (and (= (type $ly@@219) LayerTypeType) (= (type |s#0@@84|) (SeqType BoxType))) ($Is |s#0@@84| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| $ly@@219 |s#0@@84|) (= (|Seq#Length| |s#0@@84|) (LitInt 8)))) :qid |PackedIntssdfy.20:22| :skolemid |2253| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint64#requires| $ly@@219 |s#0@@84|)) )))
(assert  (=> true (forall (($ly@@220 T@U) (|s#0@@85| T@U) ) (!  (=> (and (and (= (type $ly@@220) LayerTypeType) (= (type |s#0@@85|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| |s#0@@85|) (and ($Is |s#0@@85| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |s#0@@85|) (LitInt 8))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@220) |s#0@@85|) (+ (+ (+ (+ (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 3)))) (LitInt 16777216))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 4)))) (LitInt 4294967296))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 5)))) (LitInt 1099511627776))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 6)))) (LitInt 281474976710656))) (Mul (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt 7)))) (LitInt 72057594037927936))))) :qid |PackedIntssdfy.20:22| :skolemid |2254| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@220) |s#0@@85|)) ))))
(assert  (=> true (forall (($ly@@221 T@U) (|s#0@@86| T@U) ) (!  (=> (and (and (= (type $ly@@221) LayerTypeType) (= (type |s#0@@86|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit |s#0@@86|)) (and ($Is |s#0@@86| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |s#0@@86|)) (LitInt 8))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@221) (Lit |s#0@@86|)) (+ (+ (+ (+ (+ (+ (+ (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 0)))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 1)))) (LitInt 256))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 2)))) (LitInt 65536))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 3)))) (LitInt 16777216))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 4)))) (LitInt 4294967296))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 5)))) (LitInt 1099511627776))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 6)))) (LitInt 281474976710656))) (Mul (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt 7)))) (LitInt 72057594037927936))))) :qid |PackedIntssdfy.20:22| :weight 3 :skolemid |2255| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64 ($LS $ly@@221) (Lit |s#0@@86|))) ))))
(assert (forall ((arg0@@566 T@U) (arg1@@254 T@U) (arg2@@153 Int) ) (! (= (type (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq arg0@@566 arg1@@254 arg2@@153)) (SeqType BoxType)) :qid |funType:NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq arg0@@566 arg1@@254 arg2@@153)) )))
(assert (forall (($ly@@222 T@U) (|packed#0| T@U) (|len#0| Int) ) (!  (=> (and (= (type $ly@@222) LayerTypeType) (= (type |packed#0|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@222) |packed#0| |len#0|) (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@222 |packed#0| |len#0|))) :qid |PackedIntssdfy.33:22| :skolemid |2256| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@222) |packed#0| |len#0|)) )))
(assert (forall (($ly@@223 T@U) (|packed#0@@0| T@U) (|len#0@@0| Int) ) (!  (=> (and (= (type $ly@@223) LayerTypeType) (= (type |packed#0@@0|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@223 |packed#0@@0| |len#0@@0|) (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $LZ |packed#0@@0| |len#0@@0|))) :qid |PackedIntssdfy.33:22| :skolemid |2257| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq (AsFuelBottom $ly@@223) |packed#0@@0| |len#0@@0|)) )))
(assert (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32) LayerTypeType))
(assert  (=> true (forall (($ly@@224 T@U) (|packed#0@@1| T@U) (|len#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@224) LayerTypeType) (= (type |packed#0@@1|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| |packed#0@@1| |len#0@@1|) (and ($Is |packed#0@@1| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@1|) (Mul |len#0@@1| (LitInt 4)))))) (and (and (= (|Seq#Length| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@224 |packed#0@@1| |len#0@@1|)) |len#0@@1|) (forall ((|i#0@@83| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| |len#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@224 |packed#0@@1| |len#0@@1|) |i#0@@83|))) (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |packed#0@@1| (+ (Mul (LitInt 4) |i#0@@83|) 4)) (Mul (LitInt 4) |i#0@@83|))))) :qid |PackedIntssdfy.38:18| :skolemid |2258| :pattern ( ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@224 |packed#0@@1| |len#0@@1|) |i#0@@83|))) ))) ($Is (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@224 |packed#0@@1| |len#0@@1|) (TSeq Tclass.NativeTypes.uint32)))) :qid |PackedIntssdfy.33:22| :skolemid |2259| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@224 |packed#0@@1| |len#0@@1|)) ))))
(assert (forall (($ly@@225 T@U) (|packed#0@@2| T@U) (|len#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@225) LayerTypeType) (= (type |packed#0@@2|) (SeqType BoxType))) ($Is |packed#0@@2| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| $ly@@225 |packed#0@@2| |len#0@@2|) (= (|Seq#Length| |packed#0@@2|) (Mul |len#0@@2| (LitInt 4))))) :qid |PackedIntssdfy.33:22| :skolemid |2260| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#requires| $ly@@225 |packed#0@@2| |len#0@@2|)) )))
(assert  (=> true (forall (($ly@@226 T@U) (|packed#0@@3| T@U) (|len#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@226) LayerTypeType) (= (type |packed#0@@3|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| |packed#0@@3| |len#0@@3|) (and ($Is |packed#0@@3| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@3|) (Mul |len#0@@3| (LitInt 4)))))) (and (=> (not (= |len#0@@3| (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) (- |len#0@@3| 1))) (- |len#0@@3| 1)) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) |len#0@@3|)) (Mul (LitInt 4) (- |len#0@@3| 1)))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@226) |packed#0@@3| |len#0@@3|) (ite (= |len#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq $ly@@226 (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) (- |len#0@@3| 1))) (- |len#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |packed#0@@3| (Mul (LitInt 4) |len#0@@3|)) (Mul (LitInt 4) (- |len#0@@3| 1)))))))))))) :qid |PackedIntssdfy.33:22| :skolemid |2261| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@226) |packed#0@@3| |len#0@@3|)) ))))
(assert  (=> true (forall (($ly@@227 T@U) (|packed#0@@4| T@U) (|len#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@227) LayerTypeType) (= (type |packed#0@@4|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (Lit |packed#0@@4|) (LitInt |len#0@@4|)) (and ($Is |packed#0@@4| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |packed#0@@4|)) (LitInt (Mul (LitInt |len#0@@4|) (LitInt 4))))))) (and (=> (not (= (LitInt |len#0@@4|) (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq#canCall| (Lit (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@4| 1)))))) (LitInt (- |len#0@@4| 1))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt |len#0@@4|)))) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@4| 1))))))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@227) (Lit |packed#0@@4|) (LitInt |len#0@@4|)) (ite (= (LitInt |len#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@227) (Lit (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@4| 1)))))) (LitInt (- |len#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@4|) (LitInt (Mul (LitInt 4) (LitInt |len#0@@4|)))) (LitInt (Mul (LitInt 4) (LitInt (- |len#0@@4| 1))))))))))))))) :qid |PackedIntssdfy.33:22| :weight 3 :skolemid |2262| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint32__Seq ($LS $ly@@227) (Lit |packed#0@@4|) (LitInt |len#0@@4|))) ))))
(assert (forall ((arg0@@567 T@U) (arg1@@255 T@U) (arg2@@154 Int) ) (! (= (type (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq arg0@@567 arg1@@255 arg2@@154)) (SeqType BoxType)) :qid |funType:NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq arg0@@567 arg1@@255 arg2@@154)) )))
(assert (forall (($ly@@228 T@U) (|packed#0@@5| T@U) (|len#0@@5| Int) ) (!  (=> (and (= (type $ly@@228) LayerTypeType) (= (type |packed#0@@5|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@228) |packed#0@@5| |len#0@@5|) (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@228 |packed#0@@5| |len#0@@5|))) :qid |PackedIntssdfy.50:22| :skolemid |2263| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@228) |packed#0@@5| |len#0@@5|)) )))
(assert (forall (($ly@@229 T@U) (|packed#0@@6| T@U) (|len#0@@6| Int) ) (!  (=> (and (= (type $ly@@229) LayerTypeType) (= (type |packed#0@@6|) (SeqType BoxType))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@229 |packed#0@@6| |len#0@@6|) (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $LZ |packed#0@@6| |len#0@@6|))) :qid |PackedIntssdfy.50:22| :skolemid |2264| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq (AsFuelBottom $ly@@229) |packed#0@@6| |len#0@@6|)) )))
(assert (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64) LayerTypeType))
(assert  (=> true (forall (($ly@@230 T@U) (|packed#0@@7| T@U) (|len#0@@7| Int) ) (!  (=> (and (and (= (type $ly@@230) LayerTypeType) (= (type |packed#0@@7|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| |packed#0@@7| |len#0@@7|) (and ($Is |packed#0@@7| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@7|) (Mul |len#0@@7| (LitInt 8)))))) (and (and (= (|Seq#Length| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@230 |packed#0@@7| |len#0@@7|)) |len#0@@7|) (forall ((|i#0@@84| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| |len#0@@7|)) (= (U_2_int ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@230 |packed#0@@7| |len#0@@7|) |i#0@@84|))) (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Drop| (|Seq#Take| |packed#0@@7| (+ (Mul (LitInt 8) |i#0@@84|) 8)) (Mul (LitInt 8) |i#0@@84|))))) :qid |PackedIntssdfy.55:18| :skolemid |2265| :pattern ( ($Unbox intType (|Seq#Index| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@230 |packed#0@@7| |len#0@@7|) |i#0@@84|))) ))) ($Is (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@230 |packed#0@@7| |len#0@@7|) (TSeq Tclass.NativeTypes.uint64)))) :qid |PackedIntssdfy.50:22| :skolemid |2266| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@230 |packed#0@@7| |len#0@@7|)) ))))
(assert (forall (($ly@@231 T@U) (|packed#0@@8| T@U) (|len#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@231) LayerTypeType) (= (type |packed#0@@8|) (SeqType BoxType))) ($Is |packed#0@@8| (TSeq Tclass.NativeTypes.byte))) (= (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| $ly@@231 |packed#0@@8| |len#0@@8|) (= (|Seq#Length| |packed#0@@8|) (Mul |len#0@@8| (LitInt 8))))) :qid |PackedIntssdfy.50:22| :skolemid |2267| :pattern ( (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#requires| $ly@@231 |packed#0@@8| |len#0@@8|)) )))
(assert  (=> true (forall (($ly@@232 T@U) (|packed#0@@9| T@U) (|len#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@232) LayerTypeType) (= (type |packed#0@@9|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| |packed#0@@9| |len#0@@9|) (and ($Is |packed#0@@9| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| |packed#0@@9|) (Mul |len#0@@9| (LitInt 8)))))) (and (=> (not (= |len#0@@9| (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) (- |len#0@@9| 1))) (- |len#0@@9| 1)) (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (|Seq#Drop| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) |len#0@@9|)) (Mul (LitInt 8) (- |len#0@@9| 1)))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@232) |packed#0@@9| |len#0@@9|) (ite (= |len#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq $ly@@232 (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) (- |len#0@@9| 1))) (- |len#0@@9| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (|Seq#Drop| (|Seq#Take| |packed#0@@9| (Mul (LitInt 8) |len#0@@9|)) (Mul (LitInt 8) (- |len#0@@9| 1)))))))))))) :qid |PackedIntssdfy.50:22| :skolemid |2268| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@232) |packed#0@@9| |len#0@@9|)) ))))
(assert  (=> true (forall (($ly@@233 T@U) (|packed#0@@10| T@U) (|len#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@233) LayerTypeType) (= (type |packed#0@@10|) (SeqType BoxType))) (or (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (Lit |packed#0@@10|) (LitInt |len#0@@10|)) (and ($Is |packed#0@@10| (TSeq Tclass.NativeTypes.byte)) (= (|Seq#Length| (Lit |packed#0@@10|)) (LitInt (Mul (LitInt |len#0@@10|) (LitInt 8))))))) (and (=> (not (= (LitInt |len#0@@10|) (LitInt 0))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq#canCall| (Lit (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@10| 1)))))) (LitInt (- |len#0@@10| 1))) (|NativePackedInts.__default.unpack__LittleEndian__Uint64#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt |len#0@@10|)))) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@10| 1))))))))) (= (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@233) (Lit |packed#0@@10|) (LitInt |len#0@@10|)) (ite (= (LitInt |len#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@233) (Lit (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@10| 1)))))) (LitInt (- |len#0@@10| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (NativePackedInts.__default.unpack__LittleEndian__Uint64 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64 (Lit (|Seq#Drop| (|Seq#Take| (Lit |packed#0@@10|) (LitInt (Mul (LitInt 8) (LitInt |len#0@@10|)))) (LitInt (Mul (LitInt 8) (LitInt (- |len#0@@10| 1))))))))))))))) :qid |PackedIntssdfy.50:22| :weight 3 :skolemid |2269| :pattern ( (NativePackedInts.__default.unpack__LittleEndian__Uint64__Seq ($LS $ly@@233) (Lit |packed#0@@10|) (LitInt |len#0@@10|))) ))))
(assert (forall ((arg0@@568 Int) (arg1@@256 Int) ) (! (= (type (|#JournalRanges.Header.Header| arg0@@568 arg1@@256)) DatatypeTypeType) :qid |funType:#JournalRanges.Header.Header| :pattern ( (|#JournalRanges.Header.Header| arg0@@568 arg1@@256)) )))
(assert (forall ((|a#0#0#0@@1| Int) (|a#0#1#0@@0| Int) ) (! (= (DatatypeCtorId (|#JournalRanges.Header.Header| |a#0#0#0@@1| |a#0#1#0@@0|)) |##JournalRanges.Header.Header|) :qid |JournalRangeidfy.86:34| :skolemid |2271| :pattern ( (|#JournalRanges.Header.Header| |a#0#0#0@@1| |a#0#1#0@@0|)) )))
(assert (forall ((d@@111 T@U) ) (!  (=> (= (type d@@111) DatatypeTypeType) (= (JournalRanges.Header.Header_q d@@111) (= (DatatypeCtorId d@@111) |##JournalRanges.Header.Header|))) :qid |unknown.0:0| :skolemid |2272| :pattern ( (JournalRanges.Header.Header_q d@@111)) )))
(assert (forall ((d@@112 T@U) ) (!  (=> (and (= (type d@@112) DatatypeTypeType) (JournalRanges.Header.Header_q d@@112)) (exists ((|a#1#0#0@@1| Int) (|a#1#1#0@@0| Int) ) (! (= d@@112 (|#JournalRanges.Header.Header| |a#1#0#0@@1| |a#1#1#0@@0|)) :qid |JournalRangeidfy.86:34| :skolemid |2273| ))) :qid |unknown.0:0| :skolemid |2274| :pattern ( (JournalRanges.Header.Header_q d@@112)) )))
(assert (= (type Tclass.JournalRanges.Header) TyType))
(assert (= (Tag Tclass.JournalRanges.Header) Tagclass.JournalRanges.Header))
(assert (= (TagFamily Tclass.JournalRanges.Header) tytagFamily$Header))
(assert (forall ((bx@@166 T@U) ) (!  (=> (and (= (type bx@@166) BoxType) ($IsBox bx@@166 Tclass.JournalRanges.Header)) (and (= ($Box ($Unbox DatatypeTypeType bx@@166)) bx@@166) ($Is ($Unbox DatatypeTypeType bx@@166) Tclass.JournalRanges.Header))) :qid |unknown.0:0| :skolemid |2275| :pattern ( ($IsBox bx@@166 Tclass.JournalRanges.Header)) )))
(assert (forall ((|a#2#0#0@@1| Int) (|a#2#1#0@@0| Int) ) (! (= ($Is (|#JournalRanges.Header.Header| |a#2#0#0@@1| |a#2#1#0@@0|) Tclass.JournalRanges.Header)  (and ($Is (int_2_U |a#2#0#0@@1|) TInt) ($Is (int_2_U |a#2#1#0@@0|) TInt))) :qid |JournalRangeidfy.86:34| :skolemid |2276| :pattern ( ($Is (|#JournalRanges.Header.Header| |a#2#0#0@@1| |a#2#1#0@@0|) Tclass.JournalRanges.Header)) )))
(assert (forall ((|a#3#0#0@@1| Int) (|a#3#1#0@@0| Int) ($h@@137 T@U) ) (!  (=> (and (= (type $h@@137) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@137)) (= ($IsAlloc (|#JournalRanges.Header.Header| |a#3#0#0@@1| |a#3#1#0@@0|) Tclass.JournalRanges.Header $h@@137)  (and ($IsAlloc (int_2_U |a#3#0#0@@1|) TInt $h@@137) ($IsAlloc (int_2_U |a#3#1#0@@0|) TInt $h@@137)))) :qid |JournalRangeidfy.86:34| :skolemid |2277| :pattern ( ($IsAlloc (|#JournalRanges.Header.Header| |a#3#0#0@@1| |a#3#1#0@@0|) Tclass.JournalRanges.Header $h@@137)) )))
(assert (forall ((d@@113 T@U) ($h@@138 T@U) ) (!  (=> (and (and (= (type d@@113) DatatypeTypeType) (= (type $h@@138) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@138) (and (JournalRanges.Header.Header_q d@@113) ($IsAlloc d@@113 Tclass.JournalRanges.Header $h@@138)))) ($IsAlloc (int_2_U (JournalRanges.Header.nentries d@@113)) TInt $h@@138)) :qid |unknown.0:0| :skolemid |2278| :pattern ( ($IsAlloc (int_2_U (JournalRanges.Header.nentries d@@113)) TInt $h@@138)) )))
(assert (forall ((d@@114 T@U) ($h@@139 T@U) ) (!  (=> (and (and (= (type d@@114) DatatypeTypeType) (= (type $h@@139) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@139) (and (JournalRanges.Header.Header_q d@@114) ($IsAlloc d@@114 Tclass.JournalRanges.Header $h@@139)))) ($IsAlloc (int_2_U (JournalRanges.Header.nblocks d@@114)) TInt $h@@139)) :qid |unknown.0:0| :skolemid |2279| :pattern ( ($IsAlloc (int_2_U (JournalRanges.Header.nblocks d@@114)) TInt $h@@139)) )))
(assert (forall ((|a#4#0#0@@1| Int) (|a#4#1#0@@0| Int) ) (! (= (|#JournalRanges.Header.Header| (LitInt |a#4#0#0@@1|) (LitInt |a#4#1#0@@0|)) (Lit (|#JournalRanges.Header.Header| |a#4#0#0@@1| |a#4#1#0@@0|))) :qid |JournalRangeidfy.86:34| :skolemid |2280| :pattern ( (|#JournalRanges.Header.Header| (LitInt |a#4#0#0@@1|) (LitInt |a#4#1#0@@0|))) )))
(assert (forall ((|a#5#0#0@@2| Int) (|a#5#1#0@@0| Int) ) (! (= (JournalRanges.Header.nentries (|#JournalRanges.Header.Header| |a#5#0#0@@2| |a#5#1#0@@0|)) |a#5#0#0@@2|) :qid |JournalRangeidfy.86:34| :skolemid |2281| :pattern ( (|#JournalRanges.Header.Header| |a#5#0#0@@2| |a#5#1#0@@0|)) )))
(assert (forall ((|a#6#0#0@@2| Int) (|a#6#1#0@@0| Int) ) (! (= (JournalRanges.Header.nblocks (|#JournalRanges.Header.Header| |a#6#0#0@@2| |a#6#1#0@@0|)) |a#6#1#0@@0|) :qid |JournalRangeidfy.86:34| :skolemid |2282| :pattern ( (|#JournalRanges.Header.Header| |a#6#0#0@@2| |a#6#1#0@@0|)) )))
(assert (forall ((d@@115 T@U) ) (!  (=> (and (= (type d@@115) DatatypeTypeType) (|$IsA#JournalRanges.Header| d@@115)) (JournalRanges.Header.Header_q d@@115)) :qid |unknown.0:0| :skolemid |2283| :pattern ( (|$IsA#JournalRanges.Header| d@@115)) )))
(assert (forall ((d@@116 T@U) ) (!  (=> (and (= (type d@@116) DatatypeTypeType) ($Is d@@116 Tclass.JournalRanges.Header)) (JournalRanges.Header.Header_q d@@116)) :qid |unknown.0:0| :skolemid |2284| :pattern ( (JournalRanges.Header.Header_q d@@116) ($Is d@@116 Tclass.JournalRanges.Header)) )))
(assert (forall ((a@@163 T@U) (b@@100 T@U) ) (!  (=> (and (and (= (type a@@163) DatatypeTypeType) (= (type b@@100) DatatypeTypeType)) true) (= (|JournalRanges.Header#Equal| a@@163 b@@100)  (and (= (JournalRanges.Header.nentries a@@163) (JournalRanges.Header.nentries b@@100)) (= (JournalRanges.Header.nblocks a@@163) (JournalRanges.Header.nblocks b@@100))))) :qid |unknown.0:0| :skolemid |2285| :pattern ( (|JournalRanges.Header#Equal| a@@163 b@@100)) )))
(assert (forall ((a@@164 T@U) (b@@101 T@U) ) (!  (=> (and (= (type a@@164) DatatypeTypeType) (= (type b@@101) DatatypeTypeType)) (= (|JournalRanges.Header#Equal| a@@164 b@@101) (= a@@164 b@@101))) :qid |unknown.0:0| :skolemid |2286| :pattern ( (|JournalRanges.Header#Equal| a@@164 b@@101)) )))
(assert (= (type Tclass.JournalRanges.__default) TyType))
(assert (= (Tag Tclass.JournalRanges.__default) Tagclass.JournalRanges.__default))
(assert (= (TagFamily Tclass.JournalRanges.__default) tytagFamily$_default))
(assert (forall (($o@@42 T@U) ) (!  (=> (= (type $o@@42) refType) (= ($Is $o@@42 Tclass.JournalRanges.__default)  (or (= $o@@42 null) (= (dtype $o@@42) Tclass.JournalRanges.__default)))) :qid |unknown.0:0| :skolemid |2287| :pattern ( ($Is $o@@42 Tclass.JournalRanges.__default)) )))
(assert (forall (($o@@43 T@U) ($h@@140 T@U) ) (!  (=> (and (= (type $o@@43) refType) (= (type $h@@140) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@43 Tclass.JournalRanges.__default $h@@140)  (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@140 $o@@43) alloc))))) :qid |unknown.0:0| :skolemid |2288| :pattern ( ($IsAlloc $o@@43 Tclass.JournalRanges.__default $h@@140)) )))
(assert  (=> true (forall ((|jr#0| T@U) ) (!  (=> (and (= (type |jr#0|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeLen#canCall| |jr#0|) ($Is |jr#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) (>= (JournalRanges.__default.JournalRangeLen |jr#0|) (LitInt 0))) :qid |JournalRangeidfy.31:28| :skolemid |2289| :pattern ( (JournalRanges.__default.JournalRangeLen |jr#0|)) ))))
(assert (forall ((|jr#0@@0| T@U) ) (!  (=> (and (= (type |jr#0@@0|) (SeqType BoxType)) ($Is |jr#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalRangeLen#requires| |jr#0@@0|) true)) :qid |JournalRangeidfy.31:28| :skolemid |2290| :pattern ( (|JournalRanges.__default.JournalRangeLen#requires| |jr#0@@0|)) )))
(assert  (=> true (forall ((|jr#0@@1| T@U) ) (!  (=> (and (= (type |jr#0@@1|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeLen#canCall| |jr#0@@1|) ($Is |jr#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (= (JournalRanges.__default.JournalRangeLen |jr#0@@1|) (|Seq#Length| |jr#0@@1|))) :qid |JournalRangeidfy.31:28| :skolemid |2291| :pattern ( (JournalRanges.__default.JournalRangeLen |jr#0@@1|)) ))))
(assert  (=> true (forall ((|jr#0@@2| T@U) ) (!  (=> (and (= (type |jr#0@@2|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeLen#canCall| (Lit |jr#0@@2|)) ($Is |jr#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (= (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@2|)) (|Seq#Length| (Lit |jr#0@@2|)))) :qid |JournalRangeidfy.31:28| :weight 3 :skolemid |2292| :pattern ( (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@2|))) ))))
(assert (forall ((arg0@@569 T@U) (arg1@@257 Int) ) (! (= (type (JournalRanges.__default.JournalRangePrefix arg0@@569 arg1@@257)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalRangePrefix| :pattern ( (JournalRanges.__default.JournalRangePrefix arg0@@569 arg1@@257)) )))
(assert  (=> true (forall ((|jr#0@@3| T@U) (|i#0@@85| Int) ) (!  (=> (and (= (type |jr#0@@3|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangePrefix#canCall| |jr#0@@3| |i#0@@85|) (and ($Is |jr#0@@3| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@85|) (<= |i#0@@85| (JournalRanges.__default.JournalRangeLen |jr#0@@3|)))))) (and (= (JournalRanges.__default.JournalRangeLen (JournalRanges.__default.JournalRangePrefix |jr#0@@3| |i#0@@85|)) |i#0@@85|) ($Is (JournalRanges.__default.JournalRangePrefix |jr#0@@3| |i#0@@85|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |JournalRangeidfy.37:31| :skolemid |2293| :pattern ( (JournalRanges.__default.JournalRangePrefix |jr#0@@3| |i#0@@85|)) ))))
(assert (forall ((|jr#0@@4| T@U) (|i#0@@86| Int) ) (!  (=> (and (= (type |jr#0@@4|) (SeqType BoxType)) ($Is |jr#0@@4| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalRangePrefix#requires| |jr#0@@4| |i#0@@86|)  (and (<= (LitInt 0) |i#0@@86|) (<= |i#0@@86| (JournalRanges.__default.JournalRangeLen |jr#0@@4|))))) :qid |JournalRangeidfy.37:31| :skolemid |2294| :pattern ( (|JournalRanges.__default.JournalRangePrefix#requires| |jr#0@@4| |i#0@@86|)) )))
(assert  (=> true (forall ((|jr#0@@5| T@U) (|i#0@@87| Int) ) (!  (=> (and (= (type |jr#0@@5|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangePrefix#canCall| |jr#0@@5| |i#0@@87|) (and ($Is |jr#0@@5| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@87|) (<= |i#0@@87| (JournalRanges.__default.JournalRangeLen |jr#0@@5|)))))) (= (JournalRanges.__default.JournalRangePrefix |jr#0@@5| |i#0@@87|) (|Seq#Take| |jr#0@@5| |i#0@@87|))) :qid |JournalRangeidfy.37:31| :skolemid |2295| :pattern ( (JournalRanges.__default.JournalRangePrefix |jr#0@@5| |i#0@@87|)) ))))
(assert  (=> true (forall ((|jr#0@@6| T@U) (|i#0@@88| Int) ) (!  (=> (and (= (type |jr#0@@6|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangePrefix#canCall| (Lit |jr#0@@6|) (LitInt |i#0@@88|)) (and ($Is |jr#0@@6| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |i#0@@88|)) (<= (LitInt |i#0@@88|) (LitInt (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@6|)))))))) (= (JournalRanges.__default.JournalRangePrefix (Lit |jr#0@@6|) (LitInt |i#0@@88|)) (Lit (|Seq#Take| (Lit |jr#0@@6|) (LitInt |i#0@@88|))))) :qid |JournalRangeidfy.37:31| :weight 3 :skolemid |2296| :pattern ( (JournalRanges.__default.JournalRangePrefix (Lit |jr#0@@6|) (LitInt |i#0@@88|))) ))))
(assert (forall ((arg0@@570 T@U) (arg1@@258 Int) ) (! (= (type (JournalRanges.__default.JournalRangeSuffix arg0@@570 arg1@@258)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalRangeSuffix| :pattern ( (JournalRanges.__default.JournalRangeSuffix arg0@@570 arg1@@258)) )))
(assert  (=> true (forall ((|jr#0@@7| T@U) (|i#0@@89| Int) ) (!  (=> (and (= (type |jr#0@@7|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeSuffix#canCall| |jr#0@@7| |i#0@@89|) (and ($Is |jr#0@@7| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@89|) (<= |i#0@@89| (JournalRanges.__default.JournalRangeLen |jr#0@@7|)))))) (and (= (JournalRanges.__default.JournalRangeLen (JournalRanges.__default.JournalRangeSuffix |jr#0@@7| |i#0@@89|)) (- (JournalRanges.__default.JournalRangeLen |jr#0@@7|) |i#0@@89|)) ($Is (JournalRanges.__default.JournalRangeSuffix |jr#0@@7| |i#0@@89|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |JournalRangeidfy.44:31| :skolemid |2297| :pattern ( (JournalRanges.__default.JournalRangeSuffix |jr#0@@7| |i#0@@89|)) ))))
(assert (forall ((|jr#0@@8| T@U) (|i#0@@90| Int) ) (!  (=> (and (= (type |jr#0@@8|) (SeqType BoxType)) ($Is |jr#0@@8| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalRangeSuffix#requires| |jr#0@@8| |i#0@@90|)  (and (<= (LitInt 0) |i#0@@90|) (<= |i#0@@90| (JournalRanges.__default.JournalRangeLen |jr#0@@8|))))) :qid |JournalRangeidfy.44:31| :skolemid |2298| :pattern ( (|JournalRanges.__default.JournalRangeSuffix#requires| |jr#0@@8| |i#0@@90|)) )))
(assert  (=> true (forall ((|jr#0@@9| T@U) (|i#0@@91| Int) ) (!  (=> (and (= (type |jr#0@@9|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeSuffix#canCall| |jr#0@@9| |i#0@@91|) (and ($Is |jr#0@@9| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@91|) (<= |i#0@@91| (JournalRanges.__default.JournalRangeLen |jr#0@@9|)))))) (= (JournalRanges.__default.JournalRangeSuffix |jr#0@@9| |i#0@@91|) (|Seq#Drop| |jr#0@@9| |i#0@@91|))) :qid |JournalRangeidfy.44:31| :skolemid |2299| :pattern ( (JournalRanges.__default.JournalRangeSuffix |jr#0@@9| |i#0@@91|)) ))))
(assert  (=> true (forall ((|jr#0@@10| T@U) (|i#0@@92| Int) ) (!  (=> (and (= (type |jr#0@@10|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalRangeSuffix#canCall| (Lit |jr#0@@10|) (LitInt |i#0@@92|)) (and ($Is |jr#0@@10| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |i#0@@92|)) (<= (LitInt |i#0@@92|) (LitInt (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@10|)))))))) (= (JournalRanges.__default.JournalRangeSuffix (Lit |jr#0@@10|) (LitInt |i#0@@92|)) (Lit (|Seq#Drop| (Lit |jr#0@@10|) (LitInt |i#0@@92|))))) :qid |JournalRangeidfy.44:31| :weight 3 :skolemid |2300| :pattern ( (JournalRanges.__default.JournalRangeSuffix (Lit |jr#0@@10|) (LitInt |i#0@@92|))) ))))
(assert (forall ((arg0@@571 T@U) (arg1@@259 T@U) ) (! (= (type (JournalRanges.__default.JournalRangeConcat arg0@@571 arg1@@259)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalRangeConcat| :pattern ( (JournalRanges.__default.JournalRangeConcat arg0@@571 arg1@@259)) )))
(assert  (=> true (forall ((|jr1#0| T@U) (|jr2#0| T@U) ) (!  (=> (and (and (= (type |jr1#0|) (SeqType BoxType)) (= (type |jr2#0|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeConcat#canCall| |jr1#0| |jr2#0|) (and ($Is |jr1#0| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jr2#0| (TSeq (TSeq Tclass.NativeTypes.byte)))))) ($Is (JournalRanges.__default.JournalRangeConcat |jr1#0| |jr2#0|) (TSeq (TSeq Tclass.NativeTypes.byte)))) :qid |JournalRangeidfy.52:31| :skolemid |2301| :pattern ( (JournalRanges.__default.JournalRangeConcat |jr1#0| |jr2#0|)) ))))
(assert (forall ((|jr1#0@@0| T@U) (|jr2#0@@0| T@U) ) (!  (=> (and (and (= (type |jr1#0@@0|) (SeqType BoxType)) (= (type |jr2#0@@0|) (SeqType BoxType))) (and ($Is |jr1#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jr2#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte))))) (= (|JournalRanges.__default.JournalRangeConcat#requires| |jr1#0@@0| |jr2#0@@0|) true)) :qid |JournalRangeidfy.52:31| :skolemid |2302| :pattern ( (|JournalRanges.__default.JournalRangeConcat#requires| |jr1#0@@0| |jr2#0@@0|)) )))
(assert  (=> true (forall ((|jr1#0@@1| T@U) (|jr2#0@@1| T@U) ) (!  (=> (and (and (= (type |jr1#0@@1|) (SeqType BoxType)) (= (type |jr2#0@@1|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeConcat#canCall| |jr1#0@@1| |jr2#0@@1|) (and ($Is |jr1#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jr2#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte)))))) (= (JournalRanges.__default.JournalRangeConcat |jr1#0@@1| |jr2#0@@1|) (|Seq#Append| |jr1#0@@1| |jr2#0@@1|))) :qid |JournalRangeidfy.52:31| :skolemid |2303| :pattern ( (JournalRanges.__default.JournalRangeConcat |jr1#0@@1| |jr2#0@@1|)) ))))
(assert  (=> true (forall ((|jr1#0@@2| T@U) (|jr2#0@@2| T@U) ) (!  (=> (and (and (= (type |jr1#0@@2|) (SeqType BoxType)) (= (type |jr2#0@@2|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeConcat#canCall| (Lit |jr1#0@@2|) (Lit |jr2#0@@2|)) (and ($Is |jr1#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jr2#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))))) (= (JournalRanges.__default.JournalRangeConcat (Lit |jr1#0@@2|) (Lit |jr2#0@@2|)) (|Seq#Append| |jr1#0@@2| |jr2#0@@2|))) :qid |JournalRangeidfy.52:31| :weight 3 :skolemid |2304| :pattern ( (JournalRanges.__default.JournalRangeConcat (Lit |jr1#0@@2|) (Lit |jr2#0@@2|))) ))))
(assert (= (type JournalRanges.__default.JournalRangeEmpty) (SeqType BoxType)))
(assert  (=> true (=> true ($Is JournalRanges.__default.JournalRangeEmpty (TSeq (TSeq Tclass.NativeTypes.byte))))))
(assert (= |JournalRanges.__default.JournalRangeEmpty#requires| true))
(assert  (=> true (=> true (= JournalRanges.__default.JournalRangeEmpty (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= JournalRanges.__default.JournalRangeEmpty (Lit (|Seq#Empty| BoxType))))))
(assert (forall ((arg0@@572 T@U) (arg1@@260 T@U) (arg2@@155 Int) ) (! (= (type (JournalRanges.__default.JournalBlocksI arg0@@572 arg1@@260 arg2@@155)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalBlocksI| :pattern ( (JournalRanges.__default.JournalBlocksI arg0@@572 arg1@@260 arg2@@155)) )))
(assert (forall (($ly@@234 T@U) (|jr#0@@11| T@U) (|i#0@@93| Int) ) (!  (=> (and (= (type $ly@@234) LayerTypeType) (= (type |jr#0@@11|) (SeqType BoxType))) (= (JournalRanges.__default.JournalBlocksI ($LS $ly@@234) |jr#0@@11| |i#0@@93|) (JournalRanges.__default.JournalBlocksI $ly@@234 |jr#0@@11| |i#0@@93|))) :qid |JournalRangeidfy.62:12| :skolemid |2305| :pattern ( (JournalRanges.__default.JournalBlocksI ($LS $ly@@234) |jr#0@@11| |i#0@@93|)) )))
(assert (forall (($ly@@235 T@U) (|jr#0@@12| T@U) (|i#0@@94| Int) ) (!  (=> (and (= (type $ly@@235) LayerTypeType) (= (type |jr#0@@12|) (SeqType BoxType))) (= (JournalRanges.__default.JournalBlocksI $ly@@235 |jr#0@@12| |i#0@@94|) (JournalRanges.__default.JournalBlocksI $LZ |jr#0@@12| |i#0@@94|))) :qid |JournalRangeidfy.62:12| :skolemid |2306| :pattern ( (JournalRanges.__default.JournalBlocksI (AsFuelBottom $ly@@235) |jr#0@@12| |i#0@@94|)) )))
(assert  (=> true (forall (($ly@@236 T@U) (|jr#0@@13| T@U) (|i#0@@95| Int) ) (!  (=> (and (and (= (type $ly@@236) LayerTypeType) (= (type |jr#0@@13|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalBlocksI#canCall| |jr#0@@13| |i#0@@95|) (and ($Is |jr#0@@13| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@95|) (<= |i#0@@95| (|Seq#Length| |jr#0@@13|)))))) (and (and (= (|Seq#Length| (JournalRanges.__default.JournalBlocksI $ly@@236 |jr#0@@13| |i#0@@95|)) |i#0@@95|) (forall ((|j#0@@5| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@5|) (< |j#0@@5| |i#0@@95|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (JournalRanges.__default.JournalBlocksI $ly@@236 |jr#0@@13| |i#0@@95|) |j#0@@5|)) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@@13| |j#0@@5|)))) :qid |JournalRangeidfy.66:18| :skolemid |2307| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@13| |j#0@@5|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (JournalRanges.__default.JournalBlocksI $ly@@236 |jr#0@@13| |i#0@@95|) |j#0@@5|))) ))) ($Is (JournalRanges.__default.JournalBlocksI $ly@@236 |jr#0@@13| |i#0@@95|) (TSeq (TSeq (TSeq Tclass.NativeTypes.byte)))))) :qid |JournalRangeidfy.62:12| :skolemid |2308| :pattern ( (JournalRanges.__default.JournalBlocksI $ly@@236 |jr#0@@13| |i#0@@95|)) ))))
(assert (forall (($ly@@237 T@U) (|jr#0@@14| T@U) (|i#0@@96| Int) ) (!  (=> (and (and (= (type $ly@@237) LayerTypeType) (= (type |jr#0@@14|) (SeqType BoxType))) ($Is |jr#0@@14| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalBlocksI#requires| $ly@@237 |jr#0@@14| |i#0@@96|)  (and (<= (LitInt 0) |i#0@@96|) (<= |i#0@@96| (|Seq#Length| |jr#0@@14|))))) :qid |JournalRangeidfy.62:12| :skolemid |2309| :pattern ( (|JournalRanges.__default.JournalBlocksI#requires| $ly@@237 |jr#0@@14| |i#0@@96|)) )))
(assert  (=> true (forall (($ly@@238 T@U) (|jr#0@@15| T@U) (|i#0@@97| Int) ) (!  (=> (and (and (= (type $ly@@238) LayerTypeType) (= (type |jr#0@@15|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalBlocksI#canCall| |jr#0@@15| |i#0@@97|) (and ($Is |jr#0@@15| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@97|) (<= |i#0@@97| (|Seq#Length| |jr#0@@15|)))))) (and (=> (not (= |i#0@@97| (LitInt 0))) (|JournalRanges.__default.JournalBlocksI#canCall| |jr#0@@15| (- |i#0@@97| 1))) (= (JournalRanges.__default.JournalBlocksI ($LS $ly@@238) |jr#0@@15| |i#0@@97|) (ite (= |i#0@@97| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (JournalRanges.__default.JournalBlocksI $ly@@238 |jr#0@@15| (- |i#0@@97| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |jr#0@@15| (- |i#0@@97| 1)))))))))) :qid |JournalRangeidfy.62:12| :skolemid |2310| :pattern ( (JournalRanges.__default.JournalBlocksI ($LS $ly@@238) |jr#0@@15| |i#0@@97|)) ))))
(assert  (=> true (forall (($ly@@239 T@U) (|jr#0@@16| T@U) (|i#0@@98| Int) ) (!  (=> (and (and (= (type $ly@@239) LayerTypeType) (= (type |jr#0@@16|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalBlocksI#canCall| (Lit |jr#0@@16|) (LitInt |i#0@@98|)) (and ($Is |jr#0@@16| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |i#0@@98|)) (<= (LitInt |i#0@@98|) (|Seq#Length| (Lit |jr#0@@16|))))))) (and (=> (not (= (LitInt |i#0@@98|) (LitInt 0))) (|JournalRanges.__default.JournalBlocksI#canCall| (Lit |jr#0@@16|) (LitInt (- |i#0@@98| 1)))) (= (JournalRanges.__default.JournalBlocksI ($LS $ly@@239) (Lit |jr#0@@16|) (LitInt |i#0@@98|)) (ite (= (LitInt |i#0@@98|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (JournalRanges.__default.JournalBlocksI ($LS $ly@@239) (Lit |jr#0@@16|) (LitInt (- |i#0@@98| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (Lit |jr#0@@16|) (LitInt (- |i#0@@98| 1))))))))))) :qid |JournalRangeidfy.62:12| :weight 3 :skolemid |2311| :pattern ( (JournalRanges.__default.JournalBlocksI ($LS $ly@@239) (Lit |jr#0@@16|) (LitInt |i#0@@98|))) ))))
(assert (forall ((arg0@@573 T@U) ) (! (= (type (JournalRanges.__default.JournalBlocks arg0@@573)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalBlocks| :pattern ( (JournalRanges.__default.JournalBlocks arg0@@573)) )))
(assert  (=> true (forall ((|jr#0@@17| T@U) ) (!  (=> (and (= (type |jr#0@@17|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlocks#canCall| |jr#0@@17|) ($Is |jr#0@@17| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (= (|Seq#Length| (JournalRanges.__default.JournalBlocks |jr#0@@17|)) (JournalRanges.__default.JournalRangeLen |jr#0@@17|)) ($Is (JournalRanges.__default.JournalBlocks |jr#0@@17|) (TSeq (TSeq (TSeq Tclass.NativeTypes.byte)))))) :qid |JournalRangeidfy.72:26| :skolemid |2312| :pattern ( (JournalRanges.__default.JournalBlocks |jr#0@@17|)) ))))
(assert (forall ((|jr#0@@18| T@U) ) (!  (=> (and (= (type |jr#0@@18|) (SeqType BoxType)) ($Is |jr#0@@18| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalBlocks#requires| |jr#0@@18|) true)) :qid |JournalRangeidfy.72:26| :skolemid |2313| :pattern ( (|JournalRanges.__default.JournalBlocks#requires| |jr#0@@18|)) )))
(assert  (=> true (forall ((|jr#0@@19| T@U) ) (!  (=> (and (= (type |jr#0@@19|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlocks#canCall| |jr#0@@19|) ($Is |jr#0@@19| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|JournalRanges.__default.JournalBlocksI#canCall| |jr#0@@19| (|Seq#Length| |jr#0@@19|)) (= (JournalRanges.__default.JournalBlocks |jr#0@@19|) (JournalRanges.__default.JournalBlocksI ($LS $LZ) |jr#0@@19| (|Seq#Length| |jr#0@@19|))))) :qid |JournalRangeidfy.72:26| :skolemid |2314| :pattern ( (JournalRanges.__default.JournalBlocks |jr#0@@19|)) ))))
(assert  (=> true (forall ((|jr#0@@20| T@U) ) (!  (=> (and (= (type |jr#0@@20|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlocks#canCall| (Lit |jr#0@@20|)) ($Is |jr#0@@20| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|JournalRanges.__default.JournalBlocksI#canCall| (Lit |jr#0@@20|) (|Seq#Length| (Lit |jr#0@@20|))) (= (JournalRanges.__default.JournalBlocks (Lit |jr#0@@20|)) (JournalRanges.__default.JournalBlocksI ($LS $LZ) (Lit |jr#0@@20|) (|Seq#Length| (Lit |jr#0@@20|)))))) :qid |JournalRangeidfy.72:26| :weight 3 :skolemid |2315| :pattern ( (JournalRanges.__default.JournalBlocks (Lit |jr#0@@20|))) ))))
(assert (forall ((arg0@@574 T@U) (arg1@@261 Int) ) (! (= (type (JournalRanges.__default.JournalBlockGet arg0@@574 arg1@@261)) (SeqType BoxType)) :qid |funType:JournalRanges.__default.JournalBlockGet| :pattern ( (JournalRanges.__default.JournalBlockGet arg0@@574 arg1@@261)) )))
(assert  (=> true (forall ((|jr#0@@21| T@U) (|i#0@@99| Int) ) (!  (=> (and (= (type |jr#0@@21|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlockGet#canCall| |jr#0@@21| |i#0@@99|) (and ($Is |jr#0@@21| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@99|) (< |i#0@@99| (JournalRanges.__default.JournalRangeLen |jr#0@@21|)))))) ($Is (JournalRanges.__default.JournalBlockGet |jr#0@@21| |i#0@@99|) (TSeq (TSeq Tclass.NativeTypes.byte)))) :qid |JournalRangeidfy.78:28| :skolemid |2316| :pattern ( (JournalRanges.__default.JournalBlockGet |jr#0@@21| |i#0@@99|)) ))))
(assert (forall ((|jr#0@@22| T@U) (|i#0@@100| Int) ) (!  (=> (and (= (type |jr#0@@22|) (SeqType BoxType)) ($Is |jr#0@@22| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.JournalBlockGet#requires| |jr#0@@22| |i#0@@100|)  (and (<= (LitInt 0) |i#0@@100|) (< |i#0@@100| (JournalRanges.__default.JournalRangeLen |jr#0@@22|))))) :qid |JournalRangeidfy.78:28| :skolemid |2317| :pattern ( (|JournalRanges.__default.JournalBlockGet#requires| |jr#0@@22| |i#0@@100|)) )))
(assert  (=> true (forall ((|jr#0@@23| T@U) (|i#0@@101| Int) ) (!  (=> (and (= (type |jr#0@@23|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlockGet#canCall| |jr#0@@23| |i#0@@101|) (and ($Is |jr#0@@23| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |i#0@@101|) (< |i#0@@101| (JournalRanges.__default.JournalRangeLen |jr#0@@23|)))))) (and (|JournalRanges.__default.JournalBlocks#canCall| |jr#0@@23|) (= (JournalRanges.__default.JournalBlockGet |jr#0@@23| |i#0@@101|) ($Unbox (SeqType BoxType) (|Seq#Index| (JournalRanges.__default.JournalBlocks |jr#0@@23|) |i#0@@101|))))) :qid |JournalRangeidfy.78:28| :skolemid |2318| :pattern ( (JournalRanges.__default.JournalBlockGet |jr#0@@23| |i#0@@101|)) ))))
(assert  (=> true (forall ((|jr#0@@24| T@U) (|i#0@@102| Int) ) (!  (=> (and (= (type |jr#0@@24|) (SeqType BoxType)) (or (|JournalRanges.__default.JournalBlockGet#canCall| (Lit |jr#0@@24|) (LitInt |i#0@@102|)) (and ($Is |jr#0@@24| (TSeq (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |i#0@@102|)) (< |i#0@@102| (JournalRanges.__default.JournalRangeLen (Lit |jr#0@@24|))))))) (and (|JournalRanges.__default.JournalBlocks#canCall| (Lit |jr#0@@24|)) (= (JournalRanges.__default.JournalBlockGet (Lit |jr#0@@24|) (LitInt |i#0@@102|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (JournalRanges.__default.JournalBlocks (Lit |jr#0@@24|))) (LitInt |i#0@@102|)))))) :qid |JournalRangeidfy.78:28| :weight 3 :skolemid |2319| :pattern ( (JournalRanges.__default.JournalBlockGet (Lit |jr#0@@24|) (LitInt |i#0@@102|))) ))))
(assert (forall ((arg0@@575 T@U) (arg1@@262 T@U) ) (! (= (type (JournalRanges.__default.parseHeader arg0@@575 arg1@@262)) DatatypeTypeType) :qid |funType:JournalRanges.__default.parseHeader| :pattern ( (JournalRanges.__default.parseHeader arg0@@575 arg1@@262)) )))
(assert (forall (($ly@@240 T@U) (|s#0@@87| T@U) ) (!  (=> (and (= (type $ly@@240) LayerTypeType) (= (type |s#0@@87|) (SeqType BoxType))) (= (JournalRanges.__default.parseHeader ($LS $ly@@240) |s#0@@87|) (JournalRanges.__default.parseHeader $ly@@240 |s#0@@87|))) :qid |JournalRangeidfy.88:22| :skolemid |2320| :pattern ( (JournalRanges.__default.parseHeader ($LS $ly@@240) |s#0@@87|)) )))
(assert (forall (($ly@@241 T@U) (|s#0@@88| T@U) ) (!  (=> (and (= (type $ly@@241) LayerTypeType) (= (type |s#0@@88|) (SeqType BoxType))) (= (JournalRanges.__default.parseHeader $ly@@241 |s#0@@88|) (JournalRanges.__default.parseHeader $LZ |s#0@@88|))) :qid |JournalRangeidfy.88:22| :skolemid |2321| :pattern ( (JournalRanges.__default.parseHeader (AsFuelBottom $ly@@241) |s#0@@88|)) )))
(assert  (=> true (forall (($ly@@242 T@U) (|s#0@@89| T@U) ) (!  (=> (and (and (= (type $ly@@242) LayerTypeType) (= (type |s#0@@89|) (SeqType BoxType))) (or (|JournalRanges.__default.parseHeader#canCall| |s#0@@89|) (and ($Is |s#0@@89| (TSeq Tclass.NativeTypes.byte)) (>= (|Seq#Length| |s#0@@89|) (LitInt 8))))) ($Is (JournalRanges.__default.parseHeader $ly@@242 |s#0@@89|) Tclass.JournalRanges.Header)) :qid |JournalRangeidfy.88:22| :skolemid |2322| :pattern ( (JournalRanges.__default.parseHeader $ly@@242 |s#0@@89|)) ))))
(assert (forall (($ly@@243 T@U) (|s#0@@90| T@U) ) (!  (=> (and (and (= (type $ly@@243) LayerTypeType) (= (type |s#0@@90|) (SeqType BoxType))) ($Is |s#0@@90| (TSeq Tclass.NativeTypes.byte))) (= (|JournalRanges.__default.parseHeader#requires| $ly@@243 |s#0@@90|) (>= (|Seq#Length| |s#0@@90|) (LitInt 8)))) :qid |JournalRangeidfy.88:22| :skolemid |2323| :pattern ( (|JournalRanges.__default.parseHeader#requires| $ly@@243 |s#0@@90|)) )))
(assert  (=> true (forall (($ly@@244 T@U) (|s#0@@91| T@U) ) (!  (=> (and (and (= (type $ly@@244) LayerTypeType) (= (type |s#0@@91|) (SeqType BoxType))) (or (|JournalRanges.__default.parseHeader#canCall| |s#0@@91|) (and ($Is |s#0@@91| (TSeq Tclass.NativeTypes.byte)) (>= (|Seq#Length| |s#0@@91|) (LitInt 8))))) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@91| (LitInt 4)) (LitInt 0))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@91| (LitInt 8)) (LitInt 4)))) (= (JournalRanges.__default.parseHeader ($LS $ly@@244) |s#0@@91|) (|#JournalRanges.Header.Header| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@91| (LitInt 4)) (LitInt 0))) (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@91| (LitInt 8)) (LitInt 4))))))) :qid |JournalRangeidfy.88:22| :skolemid |2324| :pattern ( (JournalRanges.__default.parseHeader ($LS $ly@@244) |s#0@@91|)) ))))
(assert  (=> true (forall (($ly@@245 T@U) (|s#0@@92| T@U) ) (!  (=> (and (and (= (type $ly@@245) LayerTypeType) (= (type |s#0@@92|) (SeqType BoxType))) (or (|JournalRanges.__default.parseHeader#canCall| (Lit |s#0@@92|)) (and ($Is |s#0@@92| (TSeq Tclass.NativeTypes.byte)) (>= (|Seq#Length| (Lit |s#0@@92|)) (LitInt 8))))) (and (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@92|) (LitInt 4)) (LitInt 0)))) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@92|) (LitInt 8)) (LitInt 4))))) (= (JournalRanges.__default.parseHeader ($LS $ly@@245) (Lit |s#0@@92|)) (|#JournalRanges.Header.Header| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@92|) (LitInt 4)) (LitInt 0)))) (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@92|) (LitInt 8)) (LitInt 4)))))))) :qid |JournalRangeidfy.88:22| :weight 3 :skolemid |2325| :pattern ( (JournalRanges.__default.parseHeader ($LS $ly@@245) (Lit |s#0@@92|))) ))))
(assert (forall ((arg0@@576 T@U) (arg1@@263 T@U) (arg2@@156 Int) (arg3@@103 Int) ) (! (= (type (JournalRanges.__default.parseEntries arg0@@576 arg1@@263 arg2@@156 arg3@@103)) DatatypeTypeType) :qid |funType:JournalRanges.__default.parseEntries| :pattern ( (JournalRanges.__default.parseEntries arg0@@576 arg1@@263 arg2@@156 arg3@@103)) )))
(assert (forall (($ly@@246 T@U) (|s#0@@93| T@U) (|len#0@@11| Int) (|idx#0| Int) ) (!  (=> (and (= (type $ly@@246) LayerTypeType) (= (type |s#0@@93|) (SeqType BoxType))) (= (JournalRanges.__default.parseEntries ($LS $ly@@246) |s#0@@93| |len#0@@11| |idx#0|) (JournalRanges.__default.parseEntries $ly@@246 |s#0@@93| |len#0@@11| |idx#0|))) :qid |JournalRangeidfy.97:12| :skolemid |2326| :pattern ( (JournalRanges.__default.parseEntries ($LS $ly@@246) |s#0@@93| |len#0@@11| |idx#0|)) )))
(assert (forall (($ly@@247 T@U) (|s#0@@94| T@U) (|len#0@@12| Int) (|idx#0@@0| Int) ) (!  (=> (and (= (type $ly@@247) LayerTypeType) (= (type |s#0@@94|) (SeqType BoxType))) (= (JournalRanges.__default.parseEntries $ly@@247 |s#0@@94| |len#0@@12| |idx#0@@0|) (JournalRanges.__default.parseEntries $LZ |s#0@@94| |len#0@@12| |idx#0@@0|))) :qid |JournalRangeidfy.97:12| :skolemid |2327| :pattern ( (JournalRanges.__default.parseEntries (AsFuelBottom $ly@@247) |s#0@@94| |len#0@@12| |idx#0@@0|)) )))
(assert  (=> true (forall (($ly@@248 T@U) (|s#0@@95| T@U) (|len#0@@13| Int) (|idx#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@248) LayerTypeType) (= (type |s#0@@95|) (SeqType BoxType))) (or (|JournalRanges.__default.parseEntries#canCall| |s#0@@95| |len#0@@13| |idx#0@@1|) (and ($Is |s#0@@95| (TSeq Tclass.NativeTypes.byte)) (and (and (<= (LitInt 0) |idx#0@@1|) (<= |idx#0@@1| (|Seq#Length| |s#0@@95|))) (<= (LitInt 0) |len#0@@13|))))) ($Is (JournalRanges.__default.parseEntries $ly@@248 |s#0@@95| |len#0@@13| |idx#0@@1|) (Tclass.Options.Option (TSeq Tclass.Journal.JournalEntry)))) :qid |JournalRangeidfy.97:12| :skolemid |2328| :pattern ( (JournalRanges.__default.parseEntries $ly@@248 |s#0@@95| |len#0@@13| |idx#0@@1|)) ))))
(assert (forall (($ly@@249 T@U) (|s#0@@96| T@U) (|len#0@@14| Int) (|idx#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@249) LayerTypeType) (= (type |s#0@@96|) (SeqType BoxType))) ($Is |s#0@@96| (TSeq Tclass.NativeTypes.byte))) (= (|JournalRanges.__default.parseEntries#requires| $ly@@249 |s#0@@96| |len#0@@14| |idx#0@@2|)  (and (and (<= (LitInt 0) |idx#0@@2|) (<= |idx#0@@2| (|Seq#Length| |s#0@@96|))) (<= (LitInt 0) |len#0@@14|)))) :qid |JournalRangeidfy.97:12| :skolemid |2329| :pattern ( (|JournalRanges.__default.parseEntries#requires| $ly@@249 |s#0@@96| |len#0@@14| |idx#0@@2|)) )))
(assert  (=> true (forall (($ly@@250 T@U) (|s#0@@97| T@U) (|len#0@@15| Int) (|idx#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@250) LayerTypeType) (= (type |s#0@@97|) (SeqType BoxType))) (or (|JournalRanges.__default.parseEntries#canCall| |s#0@@97| |len#0@@15| |idx#0@@3|) (and ($Is |s#0@@97| (TSeq Tclass.NativeTypes.byte)) (and (and (<= (LitInt 0) |idx#0@@3|) (<= |idx#0@@3| (|Seq#Length| |s#0@@97|))) (<= (LitInt 0) |len#0@@15|))))) (and (=> (not (= |len#0@@15| (LitInt 0))) (=> (<= (+ |idx#0@@3| 4) (|Seq#Length| |s#0@@97|)) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ |idx#0@@3| 4)) |idx#0@@3|)) (let ((|keyLen#0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ |idx#0@@3| 4)) |idx#0@@3|)))) (and (=> (<= (+ (+ (+ |idx#0@@3| 4) |keyLen#0|) 4) (|Seq#Length| |s#0@@97|)) |KeyType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ |idx#0@@3| 4) |keyLen#0|) 4) (|Seq#Length| |s#0@@97|)) (<= |keyLen#0| (LitInt KeyType.__default.MaxLen))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ (+ |idx#0@@3| 4) |keyLen#0|) 4)) (+ (+ |idx#0@@3| 4) |keyLen#0|))) (let ((|valueLen#0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ (+ |idx#0@@3| 4) |keyLen#0|) 4)) (+ (+ |idx#0@@3| 4) |keyLen#0|))))) (and (=> (<= (+ (+ (+ (+ |idx#0@@3| 4) |keyLen#0|) 4) |valueLen#0|) (|Seq#Length| |s#0@@97|)) |ValueType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ (+ |idx#0@@3| 4) |keyLen#0|) 4) |valueLen#0|) (|Seq#Length| |s#0@@97|)) (<= |valueLen#0| (LitInt ValueType.__default.MaxLen))) (|JournalRanges.__default.parseEntries#canCall| |s#0@@97| (- |len#0@@15| 1) (+ (+ (+ (+ |idx#0@@3| 4) |keyLen#0|) 4) |valueLen#0|)))))))))))) (= (JournalRanges.__default.parseEntries ($LS $ly@@250) |s#0@@97| |len#0@@15| |idx#0@@3|) (ite (= |len#0@@15| (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (<= (+ |idx#0@@3| 4) (|Seq#Length| |s#0@@97|)) (let ((|keyLen#0@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ |idx#0@@3| 4)) |idx#0@@3|)))) (ite  (and (<= (+ (+ (+ |idx#0@@3| 4) |keyLen#0@@0|) 4) (|Seq#Length| |s#0@@97|)) (<= |keyLen#0@@0| (LitInt KeyType.__default.MaxLen))) (let ((|key#0| (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ |idx#0@@3| 4) |keyLen#0@@0|)) (+ |idx#0@@3| 4)))) (let ((|valueLen#0@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ (+ |idx#0@@3| 4) |keyLen#0@@0|) 4)) (+ (+ |idx#0@@3| 4) |keyLen#0@@0|))))) (ite  (and (<= (+ (+ (+ (+ |idx#0@@3| 4) |keyLen#0@@0|) 4) |valueLen#0@@0|) (|Seq#Length| |s#0@@97|)) (<= |valueLen#0@@0| (LitInt ValueType.__default.MaxLen))) (let ((|value#0@@2| (|Seq#Drop| (|Seq#Take| |s#0@@97| (+ (+ (+ (+ |idx#0@@3| 4) |keyLen#0@@0|) 4) |valueLen#0@@0|)) (+ (+ (+ |idx#0@@3| 4) |keyLen#0@@0|) 4)))) (let ((|je#0| (|#Journal.JournalEntry.JournalInsert| |key#0| |value#0@@2|))) (let ((|rest#0| (JournalRanges.__default.parseEntries $ly@@250 |s#0@@97| (- |len#0@@15| 1) (+ (+ (+ (+ |idx#0@@3| 4) |keyLen#0@@0|) 4) |valueLen#0@@0|)))) (ite (Options.Option.Some_q |rest#0|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |je#0|)) ($Unbox (SeqType BoxType) (Options.Option.value |rest#0|))))) |#Options.Option.None|)))) |#Options.Option.None|))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.97:12| :skolemid |2330| :pattern ( (JournalRanges.__default.parseEntries ($LS $ly@@250) |s#0@@97| |len#0@@15| |idx#0@@3|)) ))))
(assert  (=> true (forall (($ly@@251 T@U) (|s#0@@98| T@U) (|len#0@@16| Int) (|idx#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@251) LayerTypeType) (= (type |s#0@@98|) (SeqType BoxType))) (or (|JournalRanges.__default.parseEntries#canCall| |s#0@@98| (LitInt |len#0@@16|) |idx#0@@4|) (and ($Is |s#0@@98| (TSeq Tclass.NativeTypes.byte)) (and (and (<= (LitInt 0) |idx#0@@4|) (<= |idx#0@@4| (|Seq#Length| |s#0@@98|))) (<= (LitInt 0) (LitInt |len#0@@16|)))))) (and (=> (not (= (LitInt |len#0@@16|) (LitInt 0))) (=> (<= (+ |idx#0@@4| 4) (|Seq#Length| |s#0@@98|)) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ |idx#0@@4| 4)) |idx#0@@4|)) (let ((|keyLen#1| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ |idx#0@@4| 4)) |idx#0@@4|)))) (and (=> (<= (+ (+ (+ |idx#0@@4| 4) |keyLen#1|) 4) (|Seq#Length| |s#0@@98|)) |KeyType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ |idx#0@@4| 4) |keyLen#1|) 4) (|Seq#Length| |s#0@@98|)) (<= |keyLen#1| (LitInt KeyType.__default.MaxLen))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ (+ |idx#0@@4| 4) |keyLen#1|) 4)) (+ (+ |idx#0@@4| 4) |keyLen#1|))) (let ((|valueLen#1| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ (+ |idx#0@@4| 4) |keyLen#1|) 4)) (+ (+ |idx#0@@4| 4) |keyLen#1|))))) (and (=> (<= (+ (+ (+ (+ |idx#0@@4| 4) |keyLen#1|) 4) |valueLen#1|) (|Seq#Length| |s#0@@98|)) |ValueType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ (+ |idx#0@@4| 4) |keyLen#1|) 4) |valueLen#1|) (|Seq#Length| |s#0@@98|)) (<= |valueLen#1| (LitInt ValueType.__default.MaxLen))) (|JournalRanges.__default.parseEntries#canCall| |s#0@@98| (LitInt (- |len#0@@16| 1)) (+ (+ (+ (+ |idx#0@@4| 4) |keyLen#1|) 4) |valueLen#1|)))))))))))) (= (JournalRanges.__default.parseEntries ($LS $ly@@251) |s#0@@98| (LitInt |len#0@@16|) |idx#0@@4|) (ite (= (LitInt |len#0@@16|) (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (<= (+ |idx#0@@4| 4) (|Seq#Length| |s#0@@98|)) (let ((|keyLen#1@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ |idx#0@@4| 4)) |idx#0@@4|)))) (ite  (and (<= (+ (+ (+ |idx#0@@4| 4) |keyLen#1@@0|) 4) (|Seq#Length| |s#0@@98|)) (<= |keyLen#1@@0| (LitInt KeyType.__default.MaxLen))) (let ((|key#1| (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ |idx#0@@4| 4) |keyLen#1@@0|)) (+ |idx#0@@4| 4)))) (let ((|valueLen#1@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ (+ |idx#0@@4| 4) |keyLen#1@@0|) 4)) (+ (+ |idx#0@@4| 4) |keyLen#1@@0|))))) (ite  (and (<= (+ (+ (+ (+ |idx#0@@4| 4) |keyLen#1@@0|) 4) |valueLen#1@@0|) (|Seq#Length| |s#0@@98|)) (<= |valueLen#1@@0| (LitInt ValueType.__default.MaxLen))) (let ((|value#1@@0| (|Seq#Drop| (|Seq#Take| |s#0@@98| (+ (+ (+ (+ |idx#0@@4| 4) |keyLen#1@@0|) 4) |valueLen#1@@0|)) (+ (+ (+ |idx#0@@4| 4) |keyLen#1@@0|) 4)))) (let ((|je#1| (|#Journal.JournalEntry.JournalInsert| |key#1| |value#1@@0|))) (let ((|rest#1| (JournalRanges.__default.parseEntries ($LS $ly@@251) |s#0@@98| (LitInt (- |len#0@@16| 1)) (+ (+ (+ (+ |idx#0@@4| 4) |keyLen#1@@0|) 4) |valueLen#1@@0|)))) (ite (Options.Option.Some_q |rest#1|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |je#1|)) ($Unbox (SeqType BoxType) (Options.Option.value |rest#1|))))) |#Options.Option.None|)))) |#Options.Option.None|))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.97:12| :weight 3 :skolemid |2331| :pattern ( (JournalRanges.__default.parseEntries ($LS $ly@@251) |s#0@@98| (LitInt |len#0@@16|) |idx#0@@4|)) ))))
(assert  (=> true (forall (($ly@@252 T@U) (|s#0@@99| T@U) (|len#0@@17| Int) (|idx#0@@5| Int) ) (!  (=> (and (and (= (type $ly@@252) LayerTypeType) (= (type |s#0@@99|) (SeqType BoxType))) (or (|JournalRanges.__default.parseEntries#canCall| (Lit |s#0@@99|) (LitInt |len#0@@17|) (LitInt |idx#0@@5|)) (and ($Is |s#0@@99| (TSeq Tclass.NativeTypes.byte)) (and (and (<= (LitInt 0) (LitInt |idx#0@@5|)) (<= (LitInt |idx#0@@5|) (|Seq#Length| (Lit |s#0@@99|)))) (<= (LitInt 0) (LitInt |len#0@@17|)))))) (and (=> (not (= (LitInt |len#0@@17|) (LitInt 0))) (=> (<= (LitInt (+ |idx#0@@5| 4)) (|Seq#Length| (Lit |s#0@@99|))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (LitInt (+ |idx#0@@5| 4))) (LitInt |idx#0@@5|)))) (let ((|keyLen#2| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (LitInt (+ |idx#0@@5| 4))) (LitInt |idx#0@@5|)))))) (and (=> (<= (+ (+ (+ |idx#0@@5| 4) |keyLen#2|) 4) (|Seq#Length| (Lit |s#0@@99|))) |KeyType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ |idx#0@@5| 4) |keyLen#2|) 4) (|Seq#Length| (Lit |s#0@@99|))) (<= |keyLen#2| (LitInt KeyType.__default.MaxLen))) (and (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ (+ |idx#0@@5| 4) |keyLen#2|) 4)) (+ (+ |idx#0@@5| 4) |keyLen#2|))) (let ((|valueLen#2| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ (+ |idx#0@@5| 4) |keyLen#2|) 4)) (+ (+ |idx#0@@5| 4) |keyLen#2|))))) (and (=> (<= (+ (+ (+ (+ |idx#0@@5| 4) |keyLen#2|) 4) |valueLen#2|) (|Seq#Length| (Lit |s#0@@99|))) |ValueType.__default.MaxLen#canCall|) (=> (and (<= (+ (+ (+ (+ |idx#0@@5| 4) |keyLen#2|) 4) |valueLen#2|) (|Seq#Length| (Lit |s#0@@99|))) (<= |valueLen#2| (LitInt ValueType.__default.MaxLen))) (|JournalRanges.__default.parseEntries#canCall| (Lit |s#0@@99|) (LitInt (- |len#0@@17| 1)) (+ (+ (+ (+ |idx#0@@5| 4) |keyLen#2|) 4) |valueLen#2|)))))))))))) (= (JournalRanges.__default.parseEntries ($LS $ly@@252) (Lit |s#0@@99|) (LitInt |len#0@@17|) (LitInt |idx#0@@5|)) (ite (= (LitInt |len#0@@17|) (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (<= (LitInt (+ |idx#0@@5| 4)) (|Seq#Length| (Lit |s#0@@99|))) (let ((|keyLen#2@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (LitInt (+ |idx#0@@5| 4))) (LitInt |idx#0@@5|)))))) (ite  (and (<= (+ (+ (+ |idx#0@@5| 4) |keyLen#2@@0|) 4) (|Seq#Length| (Lit |s#0@@99|))) (<= |keyLen#2@@0| (LitInt KeyType.__default.MaxLen))) (let ((|key#2| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ |idx#0@@5| 4) |keyLen#2@@0|)) (LitInt (+ |idx#0@@5| 4))))) (let ((|valueLen#2@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ (+ |idx#0@@5| 4) |keyLen#2@@0|) 4)) (+ (+ |idx#0@@5| 4) |keyLen#2@@0|))))) (ite  (and (<= (+ (+ (+ (+ |idx#0@@5| 4) |keyLen#2@@0|) 4) |valueLen#2@@0|) (|Seq#Length| (Lit |s#0@@99|))) (<= |valueLen#2@@0| (LitInt ValueType.__default.MaxLen))) (let ((|value#2@@0| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@99|) (+ (+ (+ (+ |idx#0@@5| 4) |keyLen#2@@0|) 4) |valueLen#2@@0|)) (+ (+ (+ |idx#0@@5| 4) |keyLen#2@@0|) 4)))) (let ((|je#2| (|#Journal.JournalEntry.JournalInsert| |key#2| |value#2@@0|))) (let ((|rest#2| (JournalRanges.__default.parseEntries ($LS $ly@@252) (Lit |s#0@@99|) (LitInt (- |len#0@@17| 1)) (+ (+ (+ (+ |idx#0@@5| 4) |keyLen#2@@0|) 4) |valueLen#2@@0|)))) (ite (Options.Option.Some_q |rest#2|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |je#2|)) ($Unbox (SeqType BoxType) (Options.Option.value |rest#2|))))) |#Options.Option.None|)))) |#Options.Option.None|))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.97:12| :weight 3 :skolemid |2332| :pattern ( (JournalRanges.__default.parseEntries ($LS $ly@@252) (Lit |s#0@@99|) (LitInt |len#0@@17|) (LitInt |idx#0@@5|))) ))))
(assert (forall ((arg0@@577 T@U) (arg1@@264 Int) ) (! (= (type (JournalRanges.__default.parseJournalRangeOfBytes arg0@@577 arg1@@264)) DatatypeTypeType) :qid |funType:JournalRanges.__default.parseJournalRangeOfBytes| :pattern ( (JournalRanges.__default.parseJournalRangeOfBytes arg0@@577 arg1@@264)) )))
(assert  (=> true (forall ((|s#0@@100| T@U) (|len#0@@18| Int) ) (!  (=> (and (= (type |s#0@@100|) (SeqType BoxType)) (or (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| |s#0@@100| |len#0@@18|) (and ($Is |s#0@@100| (TSeq Tclass.NativeTypes.byte)) (and (>= (|Seq#Length| |s#0@@100|) (LitInt 8)) (<= (LitInt 0) |len#0@@18|))))) ($Is (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@100| |len#0@@18|) (Tclass.Options.Option (TSeq Tclass.Journal.JournalEntry)))) :qid |JournalRangeidfy.133:37| :skolemid |2333| :pattern ( (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@100| |len#0@@18|)) ))))
(assert (forall ((|s#0@@101| T@U) (|len#0@@19| Int) ) (!  (=> (and (= (type |s#0@@101|) (SeqType BoxType)) ($Is |s#0@@101| (TSeq Tclass.NativeTypes.byte))) (= (|JournalRanges.__default.parseJournalRangeOfBytes#requires| |s#0@@101| |len#0@@19|)  (and (>= (|Seq#Length| |s#0@@101|) (LitInt 8)) (<= (LitInt 0) |len#0@@19|)))) :qid |JournalRangeidfy.133:37| :skolemid |2334| :pattern ( (|JournalRanges.__default.parseJournalRangeOfBytes#requires| |s#0@@101| |len#0@@19|)) )))
(assert  (=> true (forall ((|s#0@@102| T@U) (|len#0@@20| Int) ) (!  (=> (and (= (type |s#0@@102|) (SeqType BoxType)) (or (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| |s#0@@102| |len#0@@20|) (and ($Is |s#0@@102| (TSeq Tclass.NativeTypes.byte)) (and (>= (|Seq#Length| |s#0@@102|) (LitInt 8)) (<= (LitInt 0) |len#0@@20|))))) (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@102| |len#0@@20| (LitInt 8)) (= (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@102| |len#0@@20|) (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@102| |len#0@@20| (LitInt 8))))) :qid |JournalRangeidfy.133:37| :skolemid |2335| :pattern ( (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@102| |len#0@@20|)) ))))
(assert  (=> true (forall ((|s#0@@103| T@U) (|len#0@@21| Int) ) (!  (=> (and (= (type |s#0@@103|) (SeqType BoxType)) (or (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| (Lit |s#0@@103|) (LitInt |len#0@@21|)) (and ($Is |s#0@@103| (TSeq Tclass.NativeTypes.byte)) (and (>= (|Seq#Length| (Lit |s#0@@103|)) (LitInt 8)) (<= (LitInt 0) (LitInt |len#0@@21|)))))) (and (|JournalRanges.__default.parseEntries#canCall| (Lit |s#0@@103|) (LitInt |len#0@@21|) (LitInt 8)) (= (JournalRanges.__default.parseJournalRangeOfBytes (Lit |s#0@@103|) (LitInt |len#0@@21|)) (Lit (JournalRanges.__default.parseEntries ($LS $LZ) (Lit |s#0@@103|) (LitInt |len#0@@21|) (LitInt 8)))))) :qid |JournalRangeidfy.133:37| :weight 3 :skolemid |2336| :pattern ( (JournalRanges.__default.parseJournalRangeOfBytes (Lit |s#0@@103|) (LitInt |len#0@@21|))) ))))
(assert (forall ((arg0@@578 T@U) (arg1@@265 T@U) ) (! (= (type (JournalRanges.__default.parseJournalRange arg0@@578 arg1@@265)) DatatypeTypeType) :qid |funType:JournalRanges.__default.parseJournalRange| :pattern ( (JournalRanges.__default.parseJournalRange arg0@@578 arg1@@265)) )))
(assert (forall (($ly@@253 T@U) (|jr#0@@25| T@U) ) (!  (=> (and (= (type $ly@@253) LayerTypeType) (= (type |jr#0@@25|) (SeqType BoxType))) (= (JournalRanges.__default.parseJournalRange ($LS $ly@@253) |jr#0@@25|) (JournalRanges.__default.parseJournalRange $ly@@253 |jr#0@@25|))) :qid |JournalRangeidfy.141:12| :skolemid |2337| :pattern ( (JournalRanges.__default.parseJournalRange ($LS $ly@@253) |jr#0@@25|)) )))
(assert (forall (($ly@@254 T@U) (|jr#0@@26| T@U) ) (!  (=> (and (= (type $ly@@254) LayerTypeType) (= (type |jr#0@@26|) (SeqType BoxType))) (= (JournalRanges.__default.parseJournalRange $ly@@254 |jr#0@@26|) (JournalRanges.__default.parseJournalRange $LZ |jr#0@@26|))) :qid |JournalRangeidfy.141:12| :skolemid |2338| :pattern ( (JournalRanges.__default.parseJournalRange (AsFuelBottom $ly@@254) |jr#0@@26|)) )))
(assert  (=> true (forall (($ly@@255 T@U) (|jr#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@255) LayerTypeType) (= (type |jr#0@@27|) (SeqType BoxType))) (or (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@@27|) ($Is |jr#0@@27| (TSeq (TSeq Tclass.NativeTypes.byte))))) ($Is (JournalRanges.__default.parseJournalRange $ly@@255 |jr#0@@27|) (Tclass.Options.Option (TSeq Tclass.Journal.JournalEntry)))) :qid |JournalRangeidfy.141:12| :skolemid |2339| :pattern ( (JournalRanges.__default.parseJournalRange $ly@@255 |jr#0@@27|)) ))))
(assert (forall (($ly@@256 T@U) (|jr#0@@28| T@U) ) (!  (=> (and (and (= (type $ly@@256) LayerTypeType) (= (type |jr#0@@28|) (SeqType BoxType))) ($Is |jr#0@@28| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|JournalRanges.__default.parseJournalRange#requires| $ly@@256 |jr#0@@28|) true)) :qid |JournalRangeidfy.141:12| :skolemid |2340| :pattern ( (|JournalRanges.__default.parseJournalRange#requires| $ly@@256 |jr#0@@28|)) )))
(assert  (and (= (type StartFuel_JournalRanges._default.parseHeader) LayerTypeType) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)))
(assert  (=> true (forall (($ly@@257 T@U) (|jr#0@@29| T@U) ) (!  (=> (and (and (= (type $ly@@257) LayerTypeType) (= (type |jr#0@@29|) (SeqType BoxType))) (or (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@@29|) ($Is |jr#0@@29| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |jr#0@@29|) (LitInt 0))) (=> (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))) (LitInt 8)) (and (|JournalRanges.__default.parseHeader#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))) (let ((|header#0| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))))) (and (and (JournalRanges.Header.Header_q |header#0|) (=> (<= (LitInt 0) (JournalRanges.Header.nentries |header#0|)) (and (JournalRanges.Header.Header_q |header#0|) (=> (<= (LitInt 1) (JournalRanges.Header.nblocks |header#0|)) (JournalRanges.Header.Header_q |header#0|))))) (=> (and (<= (LitInt 0) (JournalRanges.Header.nentries |header#0|)) (and (<= (LitInt 1) (JournalRanges.Header.nblocks |header#0|)) (<= (JournalRanges.Header.nblocks |header#0|) (|Seq#Length| |jr#0@@29|)))) (and (and (and (and (JournalRanges.Header.Header_q |header#0|) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Take| |jr#0@@29| (JournalRanges.Header.nblocks |header#0|)))) (JournalRanges.Header.Header_q |header#0|)) (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| |jr#0@@29| (JournalRanges.Header.nblocks |header#0|))) (JournalRanges.Header.nentries |header#0|))) (let ((|p1#0| (JournalRanges.__default.parseJournalRangeOfBytes (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| |jr#0@@29| (JournalRanges.Header.nblocks |header#0|))) (JournalRanges.Header.nentries |header#0|)))) (=> (Options.Option.Some_q |p1#0|) (and (JournalRanges.Header.Header_q |header#0|) (|JournalRanges.__default.parseJournalRange#canCall| (|Seq#Drop| |jr#0@@29| (JournalRanges.Header.nblocks |header#0|))))))))))))) (= (JournalRanges.__default.parseJournalRange ($LS $ly@@257) |jr#0@@29|) (ite (= (|Seq#Length| |jr#0@@29|) (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))) (LitInt 8)) (let ((|header#0@@0| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| |jr#0@@29| (LitInt 0)))))) (ite  (and (<= (LitInt 0) (JournalRanges.Header.nentries |header#0@@0|)) (and (<= (LitInt 1) (JournalRanges.Header.nblocks |header#0@@0|)) (<= (JournalRanges.Header.nblocks |header#0@@0|) (|Seq#Length| |jr#0@@29|)))) (let ((|p1#0@@0| (JournalRanges.__default.parseJournalRangeOfBytes (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| |jr#0@@29| (JournalRanges.Header.nblocks |header#0@@0|))) (JournalRanges.Header.nentries |header#0@@0|)))) (ite (Options.Option.Some_q |p1#0@@0|) (let ((|p2#0| (JournalRanges.__default.parseJournalRange $ly@@257 (|Seq#Drop| |jr#0@@29| (JournalRanges.Header.nblocks |header#0@@0|))))) (ite (Options.Option.Some_q |p2#0|) (|#Options.Option.Some| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (Options.Option.value |p1#0@@0|)) ($Unbox (SeqType BoxType) (Options.Option.value |p2#0|))))) |#Options.Option.None|)) |#Options.Option.None|)) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.141:12| :skolemid |2341| :pattern ( (JournalRanges.__default.parseJournalRange ($LS $ly@@257) |jr#0@@29|)) ))))
(assert  (=> true (forall (($ly@@258 T@U) (|jr#0@@30| T@U) ) (!  (=> (and (and (= (type $ly@@258) LayerTypeType) (= (type |jr#0@@30|) (SeqType BoxType))) (or (|JournalRanges.__default.parseJournalRange#canCall| (Lit |jr#0@@30|)) ($Is |jr#0@@30| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |jr#0@@30|)) (LitInt 0))) (=> (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))) (LitInt 8)) (and (|JournalRanges.__default.parseHeader#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))) (let ((|header#1| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))))) (and (and (JournalRanges.Header.Header_q |header#1|) (=> (<= (LitInt 0) (JournalRanges.Header.nentries |header#1|)) (and (JournalRanges.Header.Header_q |header#1|) (=> (<= (LitInt 1) (JournalRanges.Header.nblocks |header#1|)) (JournalRanges.Header.Header_q |header#1|))))) (=> (and (<= (LitInt 0) (JournalRanges.Header.nentries |header#1|)) (and (<= (LitInt 1) (JournalRanges.Header.nblocks |header#1|)) (<= (JournalRanges.Header.nblocks |header#1|) (|Seq#Length| (Lit |jr#0@@30|))))) (and (and (and (and (JournalRanges.Header.Header_q |header#1|) (|Sequences.__default.concatSeq#canCall| Tclass.NativeTypes.byte (|Seq#Take| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1|)))) (JournalRanges.Header.Header_q |header#1|)) (|JournalRanges.__default.parseJournalRangeOfBytes#canCall| (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1|))) (JournalRanges.Header.nentries |header#1|))) (let ((|p1#1| (JournalRanges.__default.parseJournalRangeOfBytes (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1|))) (JournalRanges.Header.nentries |header#1|)))) (=> (Options.Option.Some_q |p1#1|) (and (JournalRanges.Header.Header_q |header#1|) (|JournalRanges.__default.parseJournalRange#canCall| (|Seq#Drop| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1|))))))))))))) (= (JournalRanges.__default.parseJournalRange ($LS $ly@@258) (Lit |jr#0@@30|)) (ite (= (|Seq#Length| (Lit |jr#0@@30|)) (LitInt 0)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite (>= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))) (LitInt 8)) (let ((|header#1@@0| (JournalRanges.__default.parseHeader StartFuel_JournalRanges._default.parseHeader ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |jr#0@@30|) (LitInt 0)))))) (ite  (and (<= (LitInt 0) (JournalRanges.Header.nentries |header#1@@0|)) (and (<= (LitInt 1) (JournalRanges.Header.nblocks |header#1@@0|)) (<= (JournalRanges.Header.nblocks |header#1@@0|) (|Seq#Length| (Lit |jr#0@@30|))))) (let ((|p1#1@@0| (JournalRanges.__default.parseJournalRangeOfBytes (Sequences.__default.concatSeq Tclass.NativeTypes.byte StartFuel_Sequences._default.concatSeq (|Seq#Take| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1@@0|))) (JournalRanges.Header.nentries |header#1@@0|)))) (ite (Options.Option.Some_q |p1#1@@0|) (let ((|p2#1| (JournalRanges.__default.parseJournalRange ($LS $ly@@258) (|Seq#Drop| (Lit |jr#0@@30|) (JournalRanges.Header.nblocks |header#1@@0|))))) (ite (Options.Option.Some_q |p2#1|) (|#Options.Option.Some| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (Options.Option.value |p1#1@@0|)) ($Unbox (SeqType BoxType) (Options.Option.value |p2#1|))))) |#Options.Option.None|)) |#Options.Option.None|)) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalRangeidfy.141:12| :weight 3 :skolemid |2342| :pattern ( (JournalRanges.__default.parseJournalRange ($LS $ly@@258) (Lit |jr#0@@30|))) ))))
(assert  (=> true (forall ((|jr#0@@31| T@U) (|jes#0| T@U) ) (!  (=> (and (and (= (type |jr#0@@31|) (SeqType BoxType)) (= (type |jes#0|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeParses#canCall| |jr#0@@31| |jes#0|) (and ($Is |jr#0@@31| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jes#0| (TSeq Tclass.Journal.JournalEntry))))) true) :qid |JournalRangeidfy.172:32| :skolemid |2343| :pattern ( (JournalRanges.__default.JournalRangeParses |jr#0@@31| |jes#0|)) ))))
(assert (forall ((|jr#0@@32| T@U) (|jes#0@@0| T@U) ) (!  (=> (and (and (= (type |jr#0@@32|) (SeqType BoxType)) (= (type |jes#0@@0|) (SeqType BoxType))) (and ($Is |jr#0@@32| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jes#0@@0| (TSeq Tclass.Journal.JournalEntry)))) (= (|JournalRanges.__default.JournalRangeParses#requires| |jr#0@@32| |jes#0@@0|) true)) :qid |JournalRangeidfy.172:32| :skolemid |2344| :pattern ( (|JournalRanges.__default.JournalRangeParses#requires| |jr#0@@32| |jes#0@@0|)) )))
(assert  (=> true (forall ((|jr#0@@33| T@U) (|jes#0@@1| T@U) ) (!  (=> (and (and (= (type |jr#0@@33|) (SeqType BoxType)) (= (type |jes#0@@1|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeParses#canCall| |jr#0@@33| |jes#0@@1|) (and ($Is |jr#0@@33| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jes#0@@1| (TSeq Tclass.Journal.JournalEntry))))) (and (and (|$IsA#Options.Option| (JournalRanges.__default.parseJournalRange ($LS $LZ) |jr#0@@33|)) (|JournalRanges.__default.parseJournalRange#canCall| |jr#0@@33|)) (= (JournalRanges.__default.JournalRangeParses |jr#0@@33| |jes#0@@1|) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) |jr#0@@33|) (|#Options.Option.Some| ($Box |jes#0@@1|)))))) :qid |JournalRangeidfy.172:32| :skolemid |2345| :pattern ( (JournalRanges.__default.JournalRangeParses |jr#0@@33| |jes#0@@1|)) ))))
(assert  (=> true (forall ((|jr#0@@34| T@U) (|jes#0@@2| T@U) ) (!  (=> (and (and (= (type |jr#0@@34|) (SeqType BoxType)) (= (type |jes#0@@2|) (SeqType BoxType))) (or (|JournalRanges.__default.JournalRangeParses#canCall| (Lit |jr#0@@34|) (Lit |jes#0@@2|)) (and ($Is |jr#0@@34| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |jes#0@@2| (TSeq Tclass.Journal.JournalEntry))))) (and (and (|$IsA#Options.Option| (Lit (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit |jr#0@@34|)))) (|JournalRanges.__default.parseJournalRange#canCall| (Lit |jr#0@@34|))) (= (JournalRanges.__default.JournalRangeParses (Lit |jr#0@@34|) (Lit |jes#0@@2|)) (|Options.Option#Equal| (JournalRanges.__default.parseJournalRange ($LS $LZ) (Lit |jr#0@@34|)) (|#Options.Option.Some| ($Box (Lit |jes#0@@2|))))))) :qid |JournalRangeidfy.172:32| :weight 3 :skolemid |2346| :pattern ( (JournalRanges.__default.JournalRangeParses (Lit |jr#0@@34|) (Lit |jes#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@104| T@U) ) (!  (=> (and (= (type |s#0@@104|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntryUint64#canCall| |s#0@@104|) ($Is |s#0@@104| Tclass.Journal.JournalEntry))) (and (<= (LitInt 0) (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@104|)) (< (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@104|) 18446744073709551616))) :qid |JournalRangeidfy.279:44| :skolemid |2347| :pattern ( (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@104|)) ))))
(assert (forall ((|s#0@@105| T@U) ) (!  (=> (and (= (type |s#0@@105|) DatatypeTypeType) ($Is |s#0@@105| Tclass.Journal.JournalEntry)) (= (|JournalRanges.__default.WeightJournalEntryUint64#requires| |s#0@@105|) true)) :qid |JournalRangeidfy.279:44| :skolemid |2348| :pattern ( (|JournalRanges.__default.WeightJournalEntryUint64#requires| |s#0@@105|)) )))
(assert  (=> true (forall ((|s#0@@106| T@U) ) (!  (=> (and (= (type |s#0@@106|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntryUint64#canCall| |s#0@@106|) ($Is |s#0@@106| Tclass.Journal.JournalEntry))) (and (and (Journal.JournalEntry.JournalInsert_q |s#0@@106|) (Journal.JournalEntry.JournalInsert_q |s#0@@106|)) (= (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@106|) (+ (+ 8 (|Seq#Length| (Journal.JournalEntry.key |s#0@@106|))) (|Seq#Length| (Journal.JournalEntry.value |s#0@@106|)))))) :qid |JournalRangeidfy.279:44| :skolemid |2349| :pattern ( (JournalRanges.__default.WeightJournalEntryUint64 |s#0@@106|)) ))))
(assert  (=> true (forall ((|s#0@@107| T@U) ) (!  (=> (and (= (type |s#0@@107|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntryUint64#canCall| (Lit |s#0@@107|)) ($Is |s#0@@107| Tclass.Journal.JournalEntry))) (and (and (Journal.JournalEntry.JournalInsert_q (Lit |s#0@@107|)) (Journal.JournalEntry.JournalInsert_q (Lit |s#0@@107|))) (= (JournalRanges.__default.WeightJournalEntryUint64 (Lit |s#0@@107|)) (+ (+ 8 (|Seq#Length| (Lit (Journal.JournalEntry.key (Lit |s#0@@107|))))) (|Seq#Length| (Lit (Journal.JournalEntry.value (Lit |s#0@@107|)))))))) :qid |JournalRangeidfy.279:44| :weight 3 :skolemid |2350| :pattern ( (JournalRanges.__default.WeightJournalEntryUint64 (Lit |s#0@@107|))) ))))
(assert  (=> true (forall ((|s#0@@108| T@U) ) (!  (=> (and (= (type |s#0@@108|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntry#canCall| |s#0@@108|) ($Is |s#0@@108| Tclass.Journal.JournalEntry))) true) :qid |JournalRangeidfy.284:31| :skolemid |2351| :pattern ( (JournalRanges.__default.WeightJournalEntry |s#0@@108|)) ))))
(assert (forall ((|s#0@@109| T@U) ) (!  (=> (and (= (type |s#0@@109|) DatatypeTypeType) ($Is |s#0@@109| Tclass.Journal.JournalEntry)) (= (|JournalRanges.__default.WeightJournalEntry#requires| |s#0@@109|) true)) :qid |JournalRangeidfy.284:31| :skolemid |2352| :pattern ( (|JournalRanges.__default.WeightJournalEntry#requires| |s#0@@109|)) )))
(assert  (=> true (forall ((|s#0@@110| T@U) ) (!  (=> (and (= (type |s#0@@110|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntry#canCall| |s#0@@110|) ($Is |s#0@@110| Tclass.Journal.JournalEntry))) (and (and (Journal.JournalEntry.JournalInsert_q |s#0@@110|) (Journal.JournalEntry.JournalInsert_q |s#0@@110|)) (= (JournalRanges.__default.WeightJournalEntry |s#0@@110|) (+ (+ 8 (|Seq#Length| (Journal.JournalEntry.key |s#0@@110|))) (|Seq#Length| (Journal.JournalEntry.value |s#0@@110|)))))) :qid |JournalRangeidfy.284:31| :skolemid |2353| :pattern ( (JournalRanges.__default.WeightJournalEntry |s#0@@110|)) ))))
(assert  (=> true (forall ((|s#0@@111| T@U) ) (!  (=> (and (= (type |s#0@@111|) DatatypeTypeType) (or (|JournalRanges.__default.WeightJournalEntry#canCall| (Lit |s#0@@111|)) ($Is |s#0@@111| Tclass.Journal.JournalEntry))) (and (and (Journal.JournalEntry.JournalInsert_q (Lit |s#0@@111|)) (Journal.JournalEntry.JournalInsert_q (Lit |s#0@@111|))) (= (JournalRanges.__default.WeightJournalEntry (Lit |s#0@@111|)) (+ (+ 8 (|Seq#Length| (Lit (Journal.JournalEntry.key (Lit |s#0@@111|))))) (|Seq#Length| (Lit (Journal.JournalEntry.value (Lit |s#0@@111|)))))))) :qid |JournalRangeidfy.284:31| :weight 3 :skolemid |2354| :pattern ( (JournalRanges.__default.WeightJournalEntry (Lit |s#0@@111|))) ))))
(assert (forall (($ly@@259 T@U) (|s#0@@112| T@U) ) (!  (=> (and (= (type $ly@@259) LayerTypeType) (= (type |s#0@@112|) (SeqType BoxType))) (= (JournalRanges.__default.SumJournalEntries ($LS $ly@@259) |s#0@@112|) (JournalRanges.__default.SumJournalEntries $ly@@259 |s#0@@112|))) :qid |JournalRangeidfy.289:12| :skolemid |2355| :pattern ( (JournalRanges.__default.SumJournalEntries ($LS $ly@@259) |s#0@@112|)) )))
(assert (forall (($ly@@260 T@U) (|s#0@@113| T@U) ) (!  (=> (and (= (type $ly@@260) LayerTypeType) (= (type |s#0@@113|) (SeqType BoxType))) (= (JournalRanges.__default.SumJournalEntries $ly@@260 |s#0@@113|) (JournalRanges.__default.SumJournalEntries $LZ |s#0@@113|))) :qid |JournalRangeidfy.289:12| :skolemid |2356| :pattern ( (JournalRanges.__default.SumJournalEntries (AsFuelBottom $ly@@260) |s#0@@113|)) )))
(assert  (=> true (forall (($ly@@261 T@U) (|s#0@@114| T@U) ) (!  (=> (and (and (= (type $ly@@261) LayerTypeType) (= (type |s#0@@114|) (SeqType BoxType))) (or (|JournalRanges.__default.SumJournalEntries#canCall| |s#0@@114|) ($Is |s#0@@114| (TSeq Tclass.Journal.JournalEntry)))) (>= (JournalRanges.__default.SumJournalEntries $ly@@261 |s#0@@114|) (LitInt 0))) :qid |JournalRangeidfy.289:12| :skolemid |2357| :pattern ( (JournalRanges.__default.SumJournalEntries $ly@@261 |s#0@@114|)) ))))
(assert (forall (($ly@@262 T@U) (|s#0@@115| T@U) ) (!  (=> (and (and (= (type $ly@@262) LayerTypeType) (= (type |s#0@@115|) (SeqType BoxType))) ($Is |s#0@@115| (TSeq Tclass.Journal.JournalEntry))) (= (|JournalRanges.__default.SumJournalEntries#requires| $ly@@262 |s#0@@115|) true)) :qid |JournalRangeidfy.289:12| :skolemid |2358| :pattern ( (|JournalRanges.__default.SumJournalEntries#requires| $ly@@262 |s#0@@115|)) )))
(assert  (=> true (forall (($ly@@263 T@U) (|s#0@@116| T@U) ) (!  (=> (and (and (= (type $ly@@263) LayerTypeType) (= (type |s#0@@116|) (SeqType BoxType))) (or (|JournalRanges.__default.SumJournalEntries#canCall| |s#0@@116|) ($Is |s#0@@116| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (not (= (|Seq#Length| |s#0@@116|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.Journal.JournalEntry |s#0@@116|) (|JournalRanges.__default.SumJournalEntries#canCall| (Sequences.__default.DropLast Tclass.Journal.JournalEntry |s#0@@116|))) (and (|Sequences.__default.Last#canCall| Tclass.Journal.JournalEntry |s#0@@116|) (|JournalRanges.__default.WeightJournalEntry#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Journal.JournalEntry |s#0@@116|)))))) (= (JournalRanges.__default.SumJournalEntries ($LS $ly@@263) |s#0@@116|) (ite (= (|Seq#Length| |s#0@@116|) (LitInt 0)) 0 (+ (JournalRanges.__default.SumJournalEntries $ly@@263 (Sequences.__default.DropLast Tclass.Journal.JournalEntry |s#0@@116|)) (JournalRanges.__default.WeightJournalEntry ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Journal.JournalEntry |s#0@@116|)))))))) :qid |JournalRangeidfy.289:12| :skolemid |2359| :pattern ( (JournalRanges.__default.SumJournalEntries ($LS $ly@@263) |s#0@@116|)) ))))
(assert  (=> true (forall (($ly@@264 T@U) (|s#0@@117| T@U) ) (!  (=> (and (and (= (type $ly@@264) LayerTypeType) (= (type |s#0@@117|) (SeqType BoxType))) (or (|JournalRanges.__default.SumJournalEntries#canCall| (Lit |s#0@@117|)) ($Is |s#0@@117| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@117|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.Journal.JournalEntry (Lit |s#0@@117|)) (|JournalRanges.__default.SumJournalEntries#canCall| (Lit (Sequences.__default.DropLast Tclass.Journal.JournalEntry (Lit |s#0@@117|))))) (and (|Sequences.__default.Last#canCall| Tclass.Journal.JournalEntry (Lit |s#0@@117|)) (|JournalRanges.__default.WeightJournalEntry#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Journal.JournalEntry (Lit |s#0@@117|)))))))) (= (JournalRanges.__default.SumJournalEntries ($LS $ly@@264) (Lit |s#0@@117|)) (ite (= (|Seq#Length| (Lit |s#0@@117|)) (LitInt 0)) 0 (+ (JournalRanges.__default.SumJournalEntries ($LS $ly@@264) (Lit (Sequences.__default.DropLast Tclass.Journal.JournalEntry (Lit |s#0@@117|)))) (JournalRanges.__default.WeightJournalEntry (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Journal.JournalEntry (Lit |s#0@@117|)))))))))) :qid |JournalRangeidfy.289:12| :weight 3 :skolemid |2360| :pattern ( (JournalRanges.__default.SumJournalEntries ($LS $ly@@264) (Lit |s#0@@117|))) ))))
(assert (forall (($ly@@265 T@U) (|s#0@@118| T@U) ) (!  (=> (and (= (type $ly@@265) LayerTypeType) (= (type |s#0@@118|) (SeqType BoxType))) (= (JournalRanges.__default.WeightJournalEntries ($LS $ly@@265) |s#0@@118|) (JournalRanges.__default.WeightJournalEntries $ly@@265 |s#0@@118|))) :qid |JournalRangeidfy.298:22| :skolemid |2361| :pattern ( (JournalRanges.__default.WeightJournalEntries ($LS $ly@@265) |s#0@@118|)) )))
(assert (forall (($ly@@266 T@U) (|s#0@@119| T@U) ) (!  (=> (and (= (type $ly@@266) LayerTypeType) (= (type |s#0@@119|) (SeqType BoxType))) (= (JournalRanges.__default.WeightJournalEntries $ly@@266 |s#0@@119|) (JournalRanges.__default.WeightJournalEntries $LZ |s#0@@119|))) :qid |JournalRangeidfy.298:22| :skolemid |2362| :pattern ( (JournalRanges.__default.WeightJournalEntries (AsFuelBottom $ly@@266) |s#0@@119|)) )))
(assert  (=> true (forall (($ly@@267 T@U) (|s#0@@120| T@U) ) (!  (=> (and (and (= (type $ly@@267) LayerTypeType) (= (type |s#0@@120|) (SeqType BoxType))) (or (|JournalRanges.__default.WeightJournalEntries#canCall| |s#0@@120|) ($Is |s#0@@120| (TSeq Tclass.Journal.JournalEntry)))) (>= (JournalRanges.__default.WeightJournalEntries $ly@@267 |s#0@@120|) (LitInt 0))) :qid |JournalRangeidfy.298:22| :skolemid |2363| :pattern ( (JournalRanges.__default.WeightJournalEntries $ly@@267 |s#0@@120|)) ))))
(assert (forall (($ly@@268 T@U) (|s#0@@121| T@U) ) (!  (=> (and (and (= (type $ly@@268) LayerTypeType) (= (type |s#0@@121|) (SeqType BoxType))) ($Is |s#0@@121| (TSeq Tclass.Journal.JournalEntry))) (= (|JournalRanges.__default.WeightJournalEntries#requires| $ly@@268 |s#0@@121|) true)) :qid |JournalRangeidfy.298:22| :skolemid |2364| :pattern ( (|JournalRanges.__default.WeightJournalEntries#requires| $ly@@268 |s#0@@121|)) )))
(assert  (=> true (forall (($ly@@269 T@U) (|s#0@@122| T@U) ) (!  (=> (and (and (= (type $ly@@269) LayerTypeType) (= (type |s#0@@122|) (SeqType BoxType))) (or (|JournalRanges.__default.WeightJournalEntries#canCall| |s#0@@122|) ($Is |s#0@@122| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (not (= (|Seq#Length| |s#0@@122|) (LitInt 0))) (|JournalRanges.__default.SumJournalEntries#canCall| |s#0@@122|)) (= (JournalRanges.__default.WeightJournalEntries ($LS $ly@@269) |s#0@@122|) (ite (= (|Seq#Length| |s#0@@122|) (LitInt 0)) 0 (+ (JournalRanges.__default.SumJournalEntries ($LS $LZ) |s#0@@122|) 8))))) :qid |JournalRangeidfy.298:22| :skolemid |2365| :pattern ( (JournalRanges.__default.WeightJournalEntries ($LS $ly@@269) |s#0@@122|)) ))))
(assert  (=> true (forall (($ly@@270 T@U) (|s#0@@123| T@U) ) (!  (=> (and (and (= (type $ly@@270) LayerTypeType) (= (type |s#0@@123|) (SeqType BoxType))) (or (|JournalRanges.__default.WeightJournalEntries#canCall| (Lit |s#0@@123|)) ($Is |s#0@@123| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@123|)) (LitInt 0))) (|JournalRanges.__default.SumJournalEntries#canCall| (Lit |s#0@@123|))) (= (JournalRanges.__default.WeightJournalEntries ($LS $ly@@270) (Lit |s#0@@123|)) (ite (= (|Seq#Length| (Lit |s#0@@123|)) (LitInt 0)) 0 (+ (JournalRanges.__default.SumJournalEntries ($LS $LZ) (Lit |s#0@@123|)) 8))))) :qid |JournalRangeidfy.298:22| :weight 3 :skolemid |2366| :pattern ( (JournalRanges.__default.WeightJournalEntries ($LS $ly@@270) (Lit |s#0@@123|))) ))))
(assert (= (type Tclass.MapRemove_s.__default) TyType))
(assert (= (Tag Tclass.MapRemove_s.__default) Tagclass.MapRemove_s.__default))
(assert (= (TagFamily Tclass.MapRemove_s.__default) tytagFamily$_default))
(assert (forall ((bx@@167 T@U) ) (!  (=> (and (= (type bx@@167) BoxType) ($IsBox bx@@167 Tclass.MapRemove_s.__default)) (and (= ($Box ($Unbox refType bx@@167)) bx@@167) ($Is ($Unbox refType bx@@167) Tclass.MapRemove_s.__default))) :qid |unknown.0:0| :skolemid |2367| :pattern ( ($IsBox bx@@167 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@44 T@U) ) (!  (=> (= (type $o@@44) refType) (= ($Is $o@@44 Tclass.MapRemove_s.__default)  (or (= $o@@44 null) (= (dtype $o@@44) Tclass.MapRemove_s.__default)))) :qid |unknown.0:0| :skolemid |2368| :pattern ( ($Is $o@@44 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@45 T@U) ($h@@141 T@U) ) (!  (=> (and (= (type $o@@45) refType) (= (type $h@@141) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@45 Tclass.MapRemove_s.__default $h@@141)  (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@141 $o@@45) alloc))))) :qid |unknown.0:0| :skolemid |2369| :pattern ( ($IsAlloc $o@@45 Tclass.MapRemove_s.__default $h@@141)) )))
(assert (forall ((arg0@@579 T@U) (arg1@@266 T@U) (arg2@@157 T@U) (arg3@@104 T@U) (arg4@@74 T@U) ) (! (= (type (MapRemove_s.__default.MapRemove1 arg0@@579 arg1@@266 arg2@@157 arg3@@104 arg4@@74)) (MapType BoxType BoxType)) :qid |funType:MapRemove_s.__default.MapRemove1| :pattern ( (MapRemove_s.__default.MapRemove1 arg0@@579 arg1@@266 arg2@@157 arg3@@104 arg4@@74)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K T@U) (MapRemove_s._default.MapRemove1$V T@U) ($ly@@271 T@U) (|m#0@@9| T@U) (|k#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K) TyType) (= (type MapRemove_s._default.MapRemove1$V) TyType)) (= (type $ly@@271) LayerTypeType)) (= (type |m#0@@9|) (MapType BoxType BoxType))) (= (type |k#0@@0|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@271) |m#0@@9| |k#0@@0|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V $ly@@271 |m#0@@9| |k#0@@0|))) :qid |unknown.0:0| :skolemid |2370| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@271) |m#0@@9| |k#0@@0|)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@0 T@U) (MapRemove_s._default.MapRemove1$V@@0 T@U) ($ly@@272 T@U) (|m#0@@10| T@U) (|k#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@0) TyType) (= (type MapRemove_s._default.MapRemove1$V@@0) TyType)) (= (type $ly@@272) LayerTypeType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $ly@@272 |m#0@@10| |k#0@@1|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $LZ |m#0@@10| |k#0@@1|))) :qid |unknown.0:0| :skolemid |2371| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 (AsFuelBottom $ly@@272) |m#0@@10| |k#0@@1|)) )))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@1 T@U) (MapRemove_s._default.MapRemove1$V@@1 T@U) ($ly@@273 T@U) (|m#0@@11| T@U) (|k#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@1) TyType) (= (type MapRemove_s._default.MapRemove1$V@@1) TyType)) (= (type $ly@@273) LayerTypeType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 |m#0@@11| |k#0@@2|) (and ($Is |m#0@@11| (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)) ($IsBox |k#0@@2| MapRemove_s._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@6| T@U) ) (!  (=> (and (and (= (type |j#0@@6|) BoxType) ($IsBox |j#0@@6| MapRemove_s._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |j#0@@6|)) (not (= |j#0@@6| |k#0@@2|)))) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) |j#0@@6|))) :qid |MapRemovesdfy.15:20| :skolemid |2372| :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) |j#0@@6|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@11|) |j#0@@6|)) )) (forall ((|j#1@@0| T@U) ) (!  (=> (and (= (type |j#1@@0|) BoxType) ($IsBox |j#1@@0| MapRemove_s._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) |j#1@@0|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |j#1@@0|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) |j#1@@0|)) (not (= |j#1@@0| |k#0@@2|))))) :qid |MapRemovesdfy.16:20| :skolemid |2373| :pattern ( (MapType0Select (|Map#Domain| |m#0@@11|) |j#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) |j#1@@0|)) ))) (forall ((|j#2| T@U) ) (!  (=> (and (and (= (type |j#2|) BoxType) ($IsBox |j#2| MapRemove_s._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) |j#2|))) (= (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) |j#2|) (MapType0Select (|Map#Elements| |m#0@@11|) |j#2|))) :qid |MapRemovesdfy.17:20| :skolemid |2374| :pattern ( (MapType0Select (|Map#Elements| |m#0@@11|) |j#2|)) :pattern ( (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) |j#2|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) |j#2|)) ))) (<= (|Set#Card| (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|))) (|Set#Card| (|Map#Domain| |m#0@@11|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@2|)) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) (- (|Map#Card| |m#0@@11|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@2|))) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) (|Map#Card| |m#0@@11|)))) ($Is (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|) (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2375| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@273 |m#0@@11| |k#0@@2|)) ))))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@2 T@U) (MapRemove_s._default.MapRemove1$V@@2 T@U) ($ly@@274 T@U) (|m#0@@12| T@U) (|k#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@2) TyType) (= (type MapRemove_s._default.MapRemove1$V@@2) TyType)) (= (type $ly@@274) LayerTypeType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (and ($Is |m#0@@12| (TMap MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2)) ($IsBox |k#0@@3| MapRemove_s._default.MapRemove1$K@@2))) (= (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@274 |m#0@@12| |k#0@@3|) true)) :qid |unknown.0:0| :skolemid |2376| :pattern ( (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@274 |m#0@@12| |k#0@@3|)) )))
(assert  (and (forall ((arg0@@580 T@U) (arg1@@267 T@U) (arg2@@158 T@U) ) (! (= (type (|lambda#30| arg0@@580 arg1@@267 arg2@@158)) (MapType0Type BoxType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@580 arg1@@267 arg2@@158)) )) (forall ((arg0@@581 T@U) ) (! (= (type (|lambda#31| arg0@@581)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@581)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@3 T@U) (MapRemove_s._default.MapRemove1$V@@3 T@U) ($ly@@275 T@U) (|m#0@@13| T@U) (|k#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@3) TyType) (= (type MapRemove_s._default.MapRemove1$V@@3) TyType)) (= (type $ly@@275) LayerTypeType)) (= (type |m#0@@13|) (MapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 |m#0@@13| |k#0@@4|) (and ($Is |m#0@@13| (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)) ($IsBox |k#0@@4| MapRemove_s._default.MapRemove1$K@@3)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@275) |m#0@@13| |k#0@@4|) (let ((|m'#0| (|Map#Glue| (|lambda#30| MapRemove_s._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@13|) |k#0@@4|) (|lambda#31| (|Map#Elements| |m#0@@13|)) (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)))) |m'#0|))) :qid |unknown.0:0| :skolemid |2377| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@275) |m#0@@13| |k#0@@4|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@4 T@U) (MapRemove_s._default.MapRemove1$V@@4 T@U) ($ly@@276 T@U) (|m#0@@14| T@U) (|k#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@4) TyType) (= (type MapRemove_s._default.MapRemove1$V@@4) TyType)) (= (type $ly@@276) LayerTypeType)) (= (type |m#0@@14|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 (Lit |m#0@@14|) |k#0@@5|) (and ($Is |m#0@@14| (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)) ($IsBox |k#0@@5| MapRemove_s._default.MapRemove1$K@@4)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@276) (Lit |m#0@@14|) |k#0@@5|) (let ((|m'#1| (|Map#Glue| (|lambda#30| MapRemove_s._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@14|) |k#0@@5|) (|lambda#31| (|Map#Elements| (Lit |m#0@@14|))) (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |2378| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@276) (Lit |m#0@@14|) |k#0@@5|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@5 T@U) (MapRemove_s._default.MapRemove1$V@@5 T@U) ($ly@@277 T@U) (|m#0@@15| T@U) (|k#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@5) TyType) (= (type MapRemove_s._default.MapRemove1$V@@5) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |m#0@@15|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 (Lit |m#0@@15|) (Lit |k#0@@6|)) (and ($Is |m#0@@15| (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)) ($IsBox |k#0@@6| MapRemove_s._default.MapRemove1$K@@5)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@277) (Lit |m#0@@15|) (Lit |k#0@@6|)) (let ((|m'#2| (|Map#Glue| (|lambda#30| MapRemove_s._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@15|) |k#0@@6|) (|lambda#31| (|Map#Elements| (Lit |m#0@@15|))) (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |2379| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@277) (Lit |m#0@@15|) (Lit |k#0@@6|))) ))))
(assert (= (type Tclass.Bits__s.__default) TyType))
(assert (= (Tag Tclass.Bits__s.__default) Tagclass.Bits__s.__default))
(assert (= (TagFamily Tclass.Bits__s.__default) tytagFamily$_default))
(assert (forall ((bx@@168 T@U) ) (!  (=> (and (= (type bx@@168) BoxType) ($IsBox bx@@168 Tclass.Bits__s.__default)) (and (= ($Box ($Unbox refType bx@@168)) bx@@168) ($Is ($Unbox refType bx@@168) Tclass.Bits__s.__default))) :qid |unknown.0:0| :skolemid |2380| :pattern ( ($IsBox bx@@168 Tclass.Bits__s.__default)) )))
(assert (forall (($o@@46 T@U) ) (!  (=> (= (type $o@@46) refType) (= ($Is $o@@46 Tclass.Bits__s.__default)  (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Bits__s.__default)))) :qid |unknown.0:0| :skolemid |2381| :pattern ( ($Is $o@@46 Tclass.Bits__s.__default)) )))
(assert (forall (($o@@47 T@U) ($h@@142 T@U) ) (!  (=> (and (= (type $o@@47) refType) (= (type $h@@142) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@47 Tclass.Bits__s.__default $h@@142)  (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@142 $o@@47) alloc))))) :qid |unknown.0:0| :skolemid |2382| :pattern ( ($IsAlloc $o@@47 Tclass.Bits__s.__default $h@@142)) )))
(assert (forall ((arg0@@582 T@U) (arg1@@268 Int) (arg2@@159 Int) ) (! (= (type (Bits__s.__default.bits__of__int arg0@@582 arg1@@268 arg2@@159)) (SeqType BoxType)) :qid |funType:Bits__s.__default.bits__of__int| :pattern ( (Bits__s.__default.bits__of__int arg0@@582 arg1@@268 arg2@@159)) )))
(assert (forall (($ly@@278 T@U) (|n#0@@12| Int) (|len#0@@22| Int) ) (!  (=> (= (type $ly@@278) LayerTypeType) (= (Bits__s.__default.bits__of__int ($LS $ly@@278) |n#0@@12| |len#0@@22|) (Bits__s.__default.bits__of__int $ly@@278 |n#0@@12| |len#0@@22|))) :qid |Bitssdfy.14:12| :skolemid |2383| :pattern ( (Bits__s.__default.bits__of__int ($LS $ly@@278) |n#0@@12| |len#0@@22|)) )))
(assert (forall (($ly@@279 T@U) (|n#0@@13| Int) (|len#0@@23| Int) ) (!  (=> (= (type $ly@@279) LayerTypeType) (= (Bits__s.__default.bits__of__int $ly@@279 |n#0@@13| |len#0@@23|) (Bits__s.__default.bits__of__int $LZ |n#0@@13| |len#0@@23|))) :qid |Bitssdfy.14:12| :skolemid |2384| :pattern ( (Bits__s.__default.bits__of__int (AsFuelBottom $ly@@279) |n#0@@13| |len#0@@23|)) )))
(assert  (=> true (forall (($ly@@280 T@U) (|n#0@@14| Int) (|len#0@@24| Int) ) (!  (=> (and (= (type $ly@@280) LayerTypeType) (or (|Bits__s.__default.bits__of__int#canCall| |n#0@@14| |len#0@@24|) (and (<= (LitInt 0) |n#0@@14|) (<= (LitInt 0) |len#0@@24|)))) (and (= (|Seq#Length| (Bits__s.__default.bits__of__int $ly@@280 |n#0@@14| |len#0@@24|)) |len#0@@24|) ($Is (Bits__s.__default.bits__of__int $ly@@280 |n#0@@14| |len#0@@24|) (TSeq TBool)))) :qid |Bitssdfy.14:12| :skolemid |2385| :pattern ( (Bits__s.__default.bits__of__int $ly@@280 |n#0@@14| |len#0@@24|)) ))))
(assert (forall (($ly@@281 T@U) (|n#0@@15| Int) (|len#0@@25| Int) ) (!  (=> (= (type $ly@@281) LayerTypeType) (=> (and (<= (LitInt 0) |n#0@@15|) (<= (LitInt 0) |len#0@@25|)) (= (|Bits__s.__default.bits__of__int#requires| $ly@@281 |n#0@@15| |len#0@@25|) true))) :qid |Bitssdfy.14:12| :skolemid |2386| :pattern ( (|Bits__s.__default.bits__of__int#requires| $ly@@281 |n#0@@15| |len#0@@25|)) )))
(assert  (=> true (forall (($ly@@282 T@U) (|n#0@@16| Int) (|len#0@@26| Int) ) (!  (=> (and (= (type $ly@@282) LayerTypeType) (or (|Bits__s.__default.bits__of__int#canCall| |n#0@@16| |len#0@@26|) (and (<= (LitInt 0) |n#0@@16|) (<= (LitInt 0) |len#0@@26|)))) (and (=> (not (= |len#0@@26| (LitInt 0))) (|Bits__s.__default.bits__of__int#canCall| (Div |n#0@@16| (LitInt 2)) (- |len#0@@26| 1))) (= (Bits__s.__default.bits__of__int ($LS $ly@@282) |n#0@@16| |len#0@@26|) (ite (= |len#0@@26| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U (= (Mod |n#0@@16| (LitInt 2)) (LitInt 1))))) (Bits__s.__default.bits__of__int $ly@@282 (Div |n#0@@16| (LitInt 2)) (- |len#0@@26| 1))))))) :qid |Bitssdfy.14:12| :skolemid |2387| :pattern ( (Bits__s.__default.bits__of__int ($LS $ly@@282) |n#0@@16| |len#0@@26|)) ))))
(assert  (=> true (forall (($ly@@283 T@U) (|n#0@@17| Int) (|len#0@@27| Int) ) (!  (=> (and (= (type $ly@@283) LayerTypeType) (or (|Bits__s.__default.bits__of__int#canCall| (LitInt |n#0@@17|) (LitInt |len#0@@27|)) (and (<= (LitInt 0) |n#0@@17|) (<= (LitInt 0) |len#0@@27|)))) (and (=> (not (= (LitInt |len#0@@27|) (LitInt 0))) (|Bits__s.__default.bits__of__int#canCall| (LitInt (Div |n#0@@17| (LitInt 2))) (LitInt (- |len#0@@27| 1)))) (= (Bits__s.__default.bits__of__int ($LS $ly@@283) (LitInt |n#0@@17|) (LitInt |len#0@@27|)) (ite (= (LitInt |len#0@@27|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U (= (LitInt (Mod |n#0@@17| (LitInt 2))) (LitInt 1))))) (Bits__s.__default.bits__of__int ($LS $ly@@283) (LitInt (Div |n#0@@17| (LitInt 2))) (LitInt (- |len#0@@27| 1)))))))) :qid |Bitssdfy.14:12| :weight 3 :skolemid |2388| :pattern ( (Bits__s.__default.bits__of__int ($LS $ly@@283) (LitInt |n#0@@17|) (LitInt |len#0@@27|))) ))))
(assert (forall ((arg0@@583 T@U) (arg1@@269 Int) ) (! (= (type (Bits__s.__default.zeroes arg0@@583 arg1@@269)) (SeqType BoxType)) :qid |funType:Bits__s.__default.zeroes| :pattern ( (Bits__s.__default.zeroes arg0@@583 arg1@@269)) )))
(assert (forall (($ly@@284 T@U) (|l#0@@5| Int) ) (!  (=> (= (type $ly@@284) LayerTypeType) (= (Bits__s.__default.zeroes ($LS $ly@@284) |l#0@@5|) (Bits__s.__default.zeroes $ly@@284 |l#0@@5|))) :qid |Bitssdfy.23:22| :skolemid |2389| :pattern ( (Bits__s.__default.zeroes ($LS $ly@@284) |l#0@@5|)) )))
(assert (forall (($ly@@285 T@U) (|l#0@@6| Int) ) (!  (=> (= (type $ly@@285) LayerTypeType) (= (Bits__s.__default.zeroes $ly@@285 |l#0@@6|) (Bits__s.__default.zeroes $LZ |l#0@@6|))) :qid |Bitssdfy.23:22| :skolemid |2390| :pattern ( (Bits__s.__default.zeroes (AsFuelBottom $ly@@285) |l#0@@6|)) )))
(assert  (=> true (forall (($ly@@286 T@U) (|l#0@@7| Int) ) (!  (=> (and (= (type $ly@@286) LayerTypeType) (or (|Bits__s.__default.zeroes#canCall| |l#0@@7|) (<= (LitInt 0) |l#0@@7|))) (and (and (= (|Seq#Length| (Bits__s.__default.zeroes $ly@@286 |l#0@@7|)) |l#0@@7|) (forall ((|i#0@@103| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@103|) (< |i#0@@103| (|Seq#Length| (Bits__s.__default.zeroes $ly@@286 |l#0@@7|)))) (not (U_2_bool ($Unbox boolType (|Seq#Index| (Bits__s.__default.zeroes $ly@@286 |l#0@@7|) |i#0@@103|))))) :qid |Bitssdfy.25:18| :skolemid |2391| :pattern ( ($Unbox boolType (|Seq#Index| (Bits__s.__default.zeroes $ly@@286 |l#0@@7|) |i#0@@103|))) ))) ($Is (Bits__s.__default.zeroes $ly@@286 |l#0@@7|) (TSeq TBool)))) :qid |Bitssdfy.23:22| :skolemid |2392| :pattern ( (Bits__s.__default.zeroes $ly@@286 |l#0@@7|)) ))))
(assert (forall (($ly@@287 T@U) (|l#0@@8| Int) ) (!  (=> (and (= (type $ly@@287) LayerTypeType) (<= (LitInt 0) |l#0@@8|)) (= (|Bits__s.__default.zeroes#requires| $ly@@287 |l#0@@8|) true)) :qid |Bitssdfy.23:22| :skolemid |2393| :pattern ( (|Bits__s.__default.zeroes#requires| $ly@@287 |l#0@@8|)) )))
(assert  (=> true (forall (($ly@@288 T@U) (|l#0@@9| Int) ) (!  (=> (and (= (type $ly@@288) LayerTypeType) (or (|Bits__s.__default.zeroes#canCall| |l#0@@9|) (<= (LitInt 0) |l#0@@9|))) (and (=> (not (= |l#0@@9| (LitInt 0))) (|Bits__s.__default.zeroes#canCall| (- |l#0@@9| 1))) (= (Bits__s.__default.zeroes ($LS $ly@@288) |l#0@@9|) (ite (= |l#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Bits__s.__default.zeroes $ly@@288 (- |l#0@@9| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U false))))))))) :qid |Bitssdfy.23:22| :skolemid |2394| :pattern ( (Bits__s.__default.zeroes ($LS $ly@@288) |l#0@@9|)) ))))
(assert  (=> true (forall (($ly@@289 T@U) (|l#0@@10| Int) ) (!  (=> (and (= (type $ly@@289) LayerTypeType) (or (|Bits__s.__default.zeroes#canCall| (LitInt |l#0@@10|)) (<= (LitInt 0) |l#0@@10|))) (and (=> (not (= (LitInt |l#0@@10|) (LitInt 0))) (|Bits__s.__default.zeroes#canCall| (LitInt (- |l#0@@10| 1)))) (= (Bits__s.__default.zeroes ($LS $ly@@289) (LitInt |l#0@@10|)) (ite (= (LitInt |l#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Bits__s.__default.zeroes ($LS $ly@@289) (LitInt (- |l#0@@10| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U false))))))))) :qid |Bitssdfy.23:22| :weight 3 :skolemid |2395| :pattern ( (Bits__s.__default.zeroes ($LS $ly@@289) (LitInt |l#0@@10|))) ))))
(assert (forall ((arg0@@584 T@U) (arg1@@270 Int) ) (! (= (type (Bits__s.__default.ones arg0@@584 arg1@@270)) (SeqType BoxType)) :qid |funType:Bits__s.__default.ones| :pattern ( (Bits__s.__default.ones arg0@@584 arg1@@270)) )))
(assert (forall (($ly@@290 T@U) (|l#0@@11| Int) ) (!  (=> (= (type $ly@@290) LayerTypeType) (= (Bits__s.__default.ones ($LS $ly@@290) |l#0@@11|) (Bits__s.__default.ones $ly@@290 |l#0@@11|))) :qid |Bitssdfy.30:22| :skolemid |2396| :pattern ( (Bits__s.__default.ones ($LS $ly@@290) |l#0@@11|)) )))
(assert (forall (($ly@@291 T@U) (|l#0@@12| Int) ) (!  (=> (= (type $ly@@291) LayerTypeType) (= (Bits__s.__default.ones $ly@@291 |l#0@@12|) (Bits__s.__default.ones $LZ |l#0@@12|))) :qid |Bitssdfy.30:22| :skolemid |2397| :pattern ( (Bits__s.__default.ones (AsFuelBottom $ly@@291) |l#0@@12|)) )))
(assert  (=> true (forall (($ly@@292 T@U) (|l#0@@13| Int) ) (!  (=> (and (= (type $ly@@292) LayerTypeType) (or (|Bits__s.__default.ones#canCall| |l#0@@13|) (<= (LitInt 0) |l#0@@13|))) (and (and (= (|Seq#Length| (Bits__s.__default.ones $ly@@292 |l#0@@13|)) |l#0@@13|) (forall ((|i#0@@104| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@104|) (< |i#0@@104| (|Seq#Length| (Bits__s.__default.ones $ly@@292 |l#0@@13|)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Bits__s.__default.ones $ly@@292 |l#0@@13|) |i#0@@104|)))) :qid |Bitssdfy.32:18| :skolemid |2398| :pattern ( ($Unbox boolType (|Seq#Index| (Bits__s.__default.ones $ly@@292 |l#0@@13|) |i#0@@104|))) ))) ($Is (Bits__s.__default.ones $ly@@292 |l#0@@13|) (TSeq TBool)))) :qid |Bitssdfy.30:22| :skolemid |2399| :pattern ( (Bits__s.__default.ones $ly@@292 |l#0@@13|)) ))))
(assert (forall (($ly@@293 T@U) (|l#0@@14| Int) ) (!  (=> (and (= (type $ly@@293) LayerTypeType) (<= (LitInt 0) |l#0@@14|)) (= (|Bits__s.__default.ones#requires| $ly@@293 |l#0@@14|) true)) :qid |Bitssdfy.30:22| :skolemid |2400| :pattern ( (|Bits__s.__default.ones#requires| $ly@@293 |l#0@@14|)) )))
(assert  (=> true (forall (($ly@@294 T@U) (|l#0@@15| Int) ) (!  (=> (and (= (type $ly@@294) LayerTypeType) (or (|Bits__s.__default.ones#canCall| |l#0@@15|) (<= (LitInt 0) |l#0@@15|))) (and (=> (not (= |l#0@@15| (LitInt 0))) (|Bits__s.__default.ones#canCall| (- |l#0@@15| 1))) (= (Bits__s.__default.ones ($LS $ly@@294) |l#0@@15|) (ite (= |l#0@@15| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Bits__s.__default.ones $ly@@294 (- |l#0@@15| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U true))))))))) :qid |Bitssdfy.30:22| :skolemid |2401| :pattern ( (Bits__s.__default.ones ($LS $ly@@294) |l#0@@15|)) ))))
(assert  (=> true (forall (($ly@@295 T@U) (|l#0@@16| Int) ) (!  (=> (and (= (type $ly@@295) LayerTypeType) (or (|Bits__s.__default.ones#canCall| (LitInt |l#0@@16|)) (<= (LitInt 0) |l#0@@16|))) (and (=> (not (= (LitInt |l#0@@16|) (LitInt 0))) (|Bits__s.__default.ones#canCall| (LitInt (- |l#0@@16| 1)))) (= (Bits__s.__default.ones ($LS $ly@@295) (LitInt |l#0@@16|)) (ite (= (LitInt |l#0@@16|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Bits__s.__default.ones ($LS $ly@@295) (LitInt (- |l#0@@16| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (bool_2_U true))))))))) :qid |Bitssdfy.30:22| :weight 3 :skolemid |2402| :pattern ( (Bits__s.__default.ones ($LS $ly@@295) (LitInt |l#0@@16|))) ))))
(assert (forall ((arg0@@585 T@U) ) (! (= (type (Bits__s.__default.mm__cvtepu32__epi64 arg0@@585)) (SeqType BoxType)) :qid |funType:Bits__s.__default.mm__cvtepu32__epi64| :pattern ( (Bits__s.__default.mm__cvtepu32__epi64 arg0@@585)) )))
(assert  (=> true (forall ((|a#0@@84| T@U) ) (!  (=> (and (= (type |a#0@@84|) (SeqType BoxType)) (or (|Bits__s.__default.mm__cvtepu32__epi64#canCall| |a#0@@84|) (and ($Is |a#0@@84| (TSeq TBool)) (= (|Seq#Length| |a#0@@84|) (LitInt 128))))) ($Is (Bits__s.__default.mm__cvtepu32__epi64 |a#0@@84|) (TSeq TBool))) :qid |Bitssdfy.39:30| :skolemid |2403| :pattern ( (Bits__s.__default.mm__cvtepu32__epi64 |a#0@@84|)) ))))
(assert (forall ((|a#0@@85| T@U) ) (!  (=> (and (= (type |a#0@@85|) (SeqType BoxType)) ($Is |a#0@@85| (TSeq TBool))) (= (|Bits__s.__default.mm__cvtepu32__epi64#requires| |a#0@@85|) (= (|Seq#Length| |a#0@@85|) (LitInt 128)))) :qid |Bitssdfy.39:30| :skolemid |2404| :pattern ( (|Bits__s.__default.mm__cvtepu32__epi64#requires| |a#0@@85|)) )))
(assert (= (type StartFuel_Bits_s._default.zeroes) LayerTypeType))
(assert  (=> true (forall ((|a#0@@86| T@U) ) (!  (=> (and (= (type |a#0@@86|) (SeqType BoxType)) (or (|Bits__s.__default.mm__cvtepu32__epi64#canCall| |a#0@@86|) (and ($Is |a#0@@86| (TSeq TBool)) (= (|Seq#Length| |a#0@@86|) (LitInt 128))))) (and (and (|Bits__s.__default.zeroes#canCall| (LitInt 32)) (|Bits__s.__default.zeroes#canCall| (LitInt 32))) (= (Bits__s.__default.mm__cvtepu32__epi64 |a#0@@86|) (|Seq#Append| (|Seq#Append| (|Seq#Append| (|Seq#Drop| (|Seq#Take| |a#0@@86| (LitInt 32)) (LitInt 0)) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32))) (|Seq#Drop| (|Seq#Take| |a#0@@86| (LitInt 64)) (LitInt 32))) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)))))) :qid |Bitssdfy.39:30| :skolemid |2405| :pattern ( (Bits__s.__default.mm__cvtepu32__epi64 |a#0@@86|)) ))))
(assert  (=> true (forall ((|a#0@@87| T@U) ) (!  (=> (and (= (type |a#0@@87|) (SeqType BoxType)) (or (|Bits__s.__default.mm__cvtepu32__epi64#canCall| (Lit |a#0@@87|)) (and ($Is |a#0@@87| (TSeq TBool)) (= (|Seq#Length| (Lit |a#0@@87|)) (LitInt 128))))) (and (and (|Bits__s.__default.zeroes#canCall| (LitInt 32)) (|Bits__s.__default.zeroes#canCall| (LitInt 32))) (= (Bits__s.__default.mm__cvtepu32__epi64 (Lit |a#0@@87|)) (|Seq#Append| (|Seq#Append| (|Seq#Append| (|Seq#Drop| (|Seq#Take| (Lit |a#0@@87|) (LitInt 32)) (LitInt 0)) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32))) (|Seq#Drop| (|Seq#Take| (Lit |a#0@@87|) (LitInt 64)) (LitInt 32))) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)))))) :qid |Bitssdfy.39:30| :weight 3 :skolemid |2406| :pattern ( (Bits__s.__default.mm__cvtepu32__epi64 (Lit |a#0@@87|))) ))))
(assert (= (type StartFuel_Bits_s._default.bits_of_int) LayerTypeType))
(assert  (=> true (forall ((|a#0@@88| Int) ) (!  (=> (or (|Bits__s.__default.intrinsic_mm_cvtepu32_epi64#canCall| |a#0@@88|) (and (<= (LitInt 0) |a#0@@88|) (< |a#0@@88| 340282366920938463463374607431768211456))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (Bits__s.__default.intrinsic_mm_cvtepu32_epi64 |a#0@@88|) (LitInt 128)) (Bits__s.__default.mm__cvtepu32__epi64 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@88| (LitInt 128)))) (and (<= (LitInt 0) (Bits__s.__default.intrinsic_mm_cvtepu32_epi64 |a#0@@88|)) (< (Bits__s.__default.intrinsic_mm_cvtepu32_epi64 |a#0@@88|) 340282366920938463463374607431768211456)))) :qid |Bitssdfy.46:106| :skolemid |2407| :pattern ( (Bits__s.__default.intrinsic_mm_cvtepu32_epi64 |a#0@@88|)) ))))
(assert (forall ((|a#0@@89| Int) ) (!  (=> (and (<= (LitInt 0) |a#0@@89|) (< |a#0@@89| 340282366920938463463374607431768211456)) (= (|Bits__s.__default.intrinsic_mm_cvtepu32_epi64#requires| |a#0@@89|) true)) :qid |Bitssdfy.46:106| :skolemid |2408| :pattern ( (|Bits__s.__default.intrinsic_mm_cvtepu32_epi64#requires| |a#0@@89|)) )))
(assert  (=> true (forall ((|a#0@@90| T@U) (|idx#0@@6| Int) ) (!  (=> (and (= (type |a#0@@90|) (SeqType BoxType)) (or (|Bits__s.__default.intrinsic_mm_loadu_si128#canCall| |a#0@@90| |idx#0@@6|) (and (and ($Is |a#0@@90| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |idx#0@@6|) (< |idx#0@@6| 4294967296))) (and (<= (LitInt 0) |idx#0@@6|) (< |idx#0@@6| (- (|Seq#Length| |a#0@@90|) 1)))))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (Bits__s.__default.intrinsic_mm_loadu_si128 |a#0@@90| |idx#0@@6|) (LitInt 128)) (|Seq#Append| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (U_2_int ($Unbox intType (|Seq#Index| |a#0@@90| |idx#0@@6|))) (LitInt 64)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (U_2_int ($Unbox intType (|Seq#Index| |a#0@@90| (+ |idx#0@@6| 1)))) (LitInt 64)))) (and (<= (LitInt 0) (Bits__s.__default.intrinsic_mm_loadu_si128 |a#0@@90| |idx#0@@6|)) (< (Bits__s.__default.intrinsic_mm_loadu_si128 |a#0@@90| |idx#0@@6|) 340282366920938463463374607431768211456)))) :qid |Bitssdfy.52:100| :skolemid |2409| :pattern ( (Bits__s.__default.intrinsic_mm_loadu_si128 |a#0@@90| |idx#0@@6|)) ))))
(assert (forall ((|a#0@@91| T@U) (|idx#0@@7| Int) ) (!  (=> (= (type |a#0@@91|) (SeqType BoxType)) (=> (and ($Is |a#0@@91| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |idx#0@@7|) (< |idx#0@@7| 4294967296))) (= (|Bits__s.__default.intrinsic_mm_loadu_si128#requires| |a#0@@91| |idx#0@@7|)  (and (<= (LitInt 0) |idx#0@@7|) (< |idx#0@@7| (- (|Seq#Length| |a#0@@91|) 1)))))) :qid |Bitssdfy.52:100| :skolemid |2410| :pattern ( (|Bits__s.__default.intrinsic_mm_loadu_si128#requires| |a#0@@91| |idx#0@@7|)) )))
(assert  (=> true (forall ((|a#0@@92| Int) ) (!  (=> (or (|Bits__s.__default.intrinsic_mm_cvtsi64_si128#canCall| |a#0@@92|) (and (<= (LitInt 0) |a#0@@92|) (< |a#0@@92| 18446744073709551616))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (Bits__s.__default.intrinsic_mm_cvtsi64_si128 |a#0@@92|) (LitInt 128)) (|Seq#Append| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@92| (LitInt 64)) (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 64)))) (and (<= (LitInt 0) (Bits__s.__default.intrinsic_mm_cvtsi64_si128 |a#0@@92|)) (< (Bits__s.__default.intrinsic_mm_cvtsi64_si128 |a#0@@92|) 340282366920938463463374607431768211456)))) :qid |Bitssdfy.59:104| :skolemid |2411| :pattern ( (Bits__s.__default.intrinsic_mm_cvtsi64_si128 |a#0@@92|)) ))))
(assert (forall ((|a#0@@93| Int) ) (!  (=> (and (<= (LitInt 0) |a#0@@93|) (< |a#0@@93| 18446744073709551616)) (= (|Bits__s.__default.intrinsic_mm_cvtsi64_si128#requires| |a#0@@93|) true)) :qid |Bitssdfy.59:104| :skolemid |2412| :pattern ( (|Bits__s.__default.intrinsic_mm_cvtsi64_si128#requires| |a#0@@93|)) )))
(assert  (=> true (forall ((|a#0@@94| Int) ) (!  (=> (or (|Bits__s.__default.intrinsic_mm_cvtsi128_si64#canCall| |a#0@@94|) (and (<= (LitInt 0) |a#0@@94|) (< |a#0@@94| 340282366920938463463374607431768211456))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (Bits__s.__default.intrinsic_mm_cvtsi128_si64 |a#0@@94|) (LitInt 64)) (|Seq#Drop| (|Seq#Take| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@94| (LitInt 128)) (LitInt 64)) (LitInt 0))) (and (<= (LitInt 0) (Bits__s.__default.intrinsic_mm_cvtsi128_si64 |a#0@@94|)) (< (Bits__s.__default.intrinsic_mm_cvtsi128_si64 |a#0@@94|) 18446744073709551616)))) :qid |Bitssdfy.64:104| :skolemid |2413| :pattern ( (Bits__s.__default.intrinsic_mm_cvtsi128_si64 |a#0@@94|)) ))))
(assert (forall ((|a#0@@95| Int) ) (!  (=> (and (<= (LitInt 0) |a#0@@95|) (< |a#0@@95| 340282366920938463463374607431768211456)) (= (|Bits__s.__default.intrinsic_mm_cvtsi128_si64#requires| |a#0@@95|) true)) :qid |Bitssdfy.64:104| :skolemid |2414| :pattern ( (|Bits__s.__default.intrinsic_mm_cvtsi128_si64#requires| |a#0@@95|)) )))
(assert (= (type Tclass.F2__X__s.__default) TyType))
(assert (= (Tag Tclass.F2__X__s.__default) Tagclass.F2__X__s.__default))
(assert (= (TagFamily Tclass.F2__X__s.__default) tytagFamily$_default))
(assert (forall ((bx@@169 T@U) ) (!  (=> (and (= (type bx@@169) BoxType) ($IsBox bx@@169 Tclass.F2__X__s.__default)) (and (= ($Box ($Unbox refType bx@@169)) bx@@169) ($Is ($Unbox refType bx@@169) Tclass.F2__X__s.__default))) :qid |unknown.0:0| :skolemid |2415| :pattern ( ($IsBox bx@@169 Tclass.F2__X__s.__default)) )))
(assert (forall (($o@@48 T@U) ) (!  (=> (= (type $o@@48) refType) (= ($Is $o@@48 Tclass.F2__X__s.__default)  (or (= $o@@48 null) (= (dtype $o@@48) Tclass.F2__X__s.__default)))) :qid |unknown.0:0| :skolemid |2416| :pattern ( ($Is $o@@48 Tclass.F2__X__s.__default)) )))
(assert (forall (($o@@49 T@U) ($h@@143 T@U) ) (!  (=> (and (= (type $o@@49) refType) (= (type $h@@143) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@49 Tclass.F2__X__s.__default $h@@143)  (or (= $o@@49 null) (U_2_bool (MapType1Select (MapType0Select $h@@143 $o@@49) alloc))))) :qid |unknown.0:0| :skolemid |2417| :pattern ( ($IsAlloc $o@@49 Tclass.F2__X__s.__default $h@@143)) )))
(assert (forall ((arg0@@586 T@U) (arg1@@271 T@U) ) (! (= (type (F2__X__s.__default.reverse arg0@@586 arg1@@271)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.reverse| :pattern ( (F2__X__s.__default.reverse arg0@@586 arg1@@271)) )))
(assert (forall (($ly@@296 T@U) (|s#0@@124| T@U) ) (!  (=> (and (= (type $ly@@296) LayerTypeType) (= (type |s#0@@124|) (SeqType BoxType))) (= (F2__X__s.__default.reverse ($LS $ly@@296) |s#0@@124|) (F2__X__s.__default.reverse $ly@@296 |s#0@@124|))) :qid |F2Xsdfy.14:22| :skolemid |2418| :pattern ( (F2__X__s.__default.reverse ($LS $ly@@296) |s#0@@124|)) )))
(assert (forall (($ly@@297 T@U) (|s#0@@125| T@U) ) (!  (=> (and (= (type $ly@@297) LayerTypeType) (= (type |s#0@@125|) (SeqType BoxType))) (= (F2__X__s.__default.reverse $ly@@297 |s#0@@125|) (F2__X__s.__default.reverse $LZ |s#0@@125|))) :qid |F2Xsdfy.14:22| :skolemid |2419| :pattern ( (F2__X__s.__default.reverse (AsFuelBottom $ly@@297) |s#0@@125|)) )))
(assert  (=> true (forall (($ly@@298 T@U) (|s#0@@126| T@U) ) (!  (=> (and (and (= (type $ly@@298) LayerTypeType) (= (type |s#0@@126|) (SeqType BoxType))) (or (|F2__X__s.__default.reverse#canCall| |s#0@@126|) ($Is |s#0@@126| (TSeq TBool)))) (and (and (= (|Seq#Length| (F2__X__s.__default.reverse $ly@@298 |s#0@@126|)) (|Seq#Length| |s#0@@126|)) (forall ((|i#0@@105| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@105|) (< |i#0@@105| (|Seq#Length| (F2__X__s.__default.reverse $ly@@298 |s#0@@126|)))) (= (U_2_bool ($Unbox boolType (|Seq#Index| (F2__X__s.__default.reverse $ly@@298 |s#0@@126|) |i#0@@105|))) (U_2_bool ($Unbox boolType (|Seq#Index| |s#0@@126| (- (- (|Seq#Length| |s#0@@126|) 1) |i#0@@105|)))))) :qid |F2Xsdfy.16:18| :skolemid |2420| :pattern ( ($Unbox boolType (|Seq#Index| (F2__X__s.__default.reverse $ly@@298 |s#0@@126|) |i#0@@105|))) ))) ($Is (F2__X__s.__default.reverse $ly@@298 |s#0@@126|) (TSeq TBool)))) :qid |F2Xsdfy.14:22| :skolemid |2421| :pattern ( (F2__X__s.__default.reverse $ly@@298 |s#0@@126|)) ))))
(assert (forall (($ly@@299 T@U) (|s#0@@127| T@U) ) (!  (=> (and (and (= (type $ly@@299) LayerTypeType) (= (type |s#0@@127|) (SeqType BoxType))) ($Is |s#0@@127| (TSeq TBool))) (= (|F2__X__s.__default.reverse#requires| $ly@@299 |s#0@@127|) true)) :qid |F2Xsdfy.14:22| :skolemid |2422| :pattern ( (|F2__X__s.__default.reverse#requires| $ly@@299 |s#0@@127|)) )))
(assert  (=> true (forall (($ly@@300 T@U) (|s#0@@128| T@U) ) (!  (=> (and (and (= (type $ly@@300) LayerTypeType) (= (type |s#0@@128|) (SeqType BoxType))) (or (|F2__X__s.__default.reverse#canCall| |s#0@@128|) ($Is |s#0@@128| (TSeq TBool)))) (and (=> (not (= (|Seq#Length| |s#0@@128|) (LitInt 0))) (|F2__X__s.__default.reverse#canCall| (|Seq#Drop| |s#0@@128| (LitInt 1)))) (= (F2__X__s.__default.reverse ($LS $ly@@300) |s#0@@128|) (ite (= (|Seq#Length| |s#0@@128|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (F2__X__s.__default.reverse $ly@@300 (|Seq#Drop| |s#0@@128| (LitInt 1))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |s#0@@128| (LitInt 0)))))))) :qid |F2Xsdfy.14:22| :skolemid |2423| :pattern ( (F2__X__s.__default.reverse ($LS $ly@@300) |s#0@@128|)) ))))
(assert  (=> true (forall (($ly@@301 T@U) (|s#0@@129| T@U) ) (!  (=> (and (and (= (type $ly@@301) LayerTypeType) (= (type |s#0@@129|) (SeqType BoxType))) (or (|F2__X__s.__default.reverse#canCall| (Lit |s#0@@129|)) ($Is |s#0@@129| (TSeq TBool)))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@129|)) (LitInt 0))) (|F2__X__s.__default.reverse#canCall| (Lit (|Seq#Drop| (Lit |s#0@@129|) (LitInt 1))))) (= (F2__X__s.__default.reverse ($LS $ly@@301) (Lit |s#0@@129|)) (ite (= (|Seq#Length| (Lit |s#0@@129|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (F2__X__s.__default.reverse ($LS $ly@@301) (Lit (|Seq#Drop| (Lit |s#0@@129|) (LitInt 1)))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (Lit |s#0@@129|) (LitInt 0)))))))) :qid |F2Xsdfy.14:22| :weight 3 :skolemid |2424| :pattern ( (F2__X__s.__default.reverse ($LS $ly@@301) (Lit |s#0@@129|))) ))))
(assert  (=> true (forall ((|a#0@@96| Bool) (|b#0@@48| Bool) ) (!  (=> true true) :qid |F2Xsdfy.22:21| :skolemid |2425| :pattern ( (F2__X__s.__default.bool__xor |a#0@@96| |b#0@@48|)) ))))
(assert (forall ((|a#0@@97| Bool) (|b#0@@49| Bool) ) (! (= (|F2__X__s.__default.bool__xor#requires| |a#0@@97| |b#0@@49|) true) :qid |F2Xsdfy.22:21| :skolemid |2426| :pattern ( (|F2__X__s.__default.bool__xor#requires| |a#0@@97| |b#0@@49|)) )))
(assert  (=> true (forall ((|a#0@@98| Bool) (|b#0@@50| Bool) ) (!  (=> true (= (F2__X__s.__default.bool__xor |a#0@@98| |b#0@@50|)  (or (and |a#0@@98| (not |b#0@@50|)) (and (not |a#0@@98|) |b#0@@50|)))) :qid |F2Xsdfy.22:21| :skolemid |2427| :pattern ( (F2__X__s.__default.bool__xor |a#0@@98| |b#0@@50|)) ))))
(assert  (=> true (forall ((|a#0@@99| T@U) (|b#0@@51| T@U) ) (!  (=> (and (and (= (type |a#0@@99|) boolType) (= (type |b#0@@51|) boolType)) true) (= (F2__X__s.__default.bool__xor (U_2_bool (Lit |a#0@@99|)) (U_2_bool (Lit |b#0@@51|)))  (or (and (U_2_bool |a#0@@99|) (not (U_2_bool (Lit |b#0@@51|)))) (and (not (U_2_bool (Lit |a#0@@99|))) (U_2_bool |b#0@@51|))))) :qid |F2Xsdfy.22:21| :weight 3 :skolemid |2428| :pattern ( (F2__X__s.__default.bool__xor (U_2_bool (Lit |a#0@@99|)) (U_2_bool (Lit |b#0@@51|)))) ))))
(assert (forall ((arg0@@587 T@U) (arg1@@272 T@U) (arg2@@160 T@U) ) (! (= (type (F2__X__s.__default.xor arg0@@587 arg1@@272 arg2@@160)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.xor| :pattern ( (F2__X__s.__default.xor arg0@@587 arg1@@272 arg2@@160)) )))
(assert (forall (($ly@@302 T@U) (|p#0| T@U) (|q#0| T@U) ) (!  (=> (and (and (= (type $ly@@302) LayerTypeType) (= (type |p#0|) (SeqType BoxType))) (= (type |q#0|) (SeqType BoxType))) (= (F2__X__s.__default.xor ($LS $ly@@302) |p#0| |q#0|) (F2__X__s.__default.xor $ly@@302 |p#0| |q#0|))) :qid |F2Xsdfy.27:22| :skolemid |2429| :pattern ( (F2__X__s.__default.xor ($LS $ly@@302) |p#0| |q#0|)) )))
(assert (forall (($ly@@303 T@U) (|p#0@@0| T@U) (|q#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@303) LayerTypeType) (= (type |p#0@@0|) (SeqType BoxType))) (= (type |q#0@@0|) (SeqType BoxType))) (= (F2__X__s.__default.xor $ly@@303 |p#0@@0| |q#0@@0|) (F2__X__s.__default.xor $LZ |p#0@@0| |q#0@@0|))) :qid |F2Xsdfy.27:22| :skolemid |2430| :pattern ( (F2__X__s.__default.xor (AsFuelBottom $ly@@303) |p#0@@0| |q#0@@0|)) )))
(assert  (=> true (forall (($ly@@304 T@U) (|p#0@@1| T@U) (|q#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@304) LayerTypeType) (= (type |p#0@@1|) (SeqType BoxType))) (= (type |q#0@@1|) (SeqType BoxType))) (or (|F2__X__s.__default.xor#canCall| |p#0@@1| |q#0@@1|) (and (and ($Is |p#0@@1| (TSeq TBool)) ($Is |q#0@@1| (TSeq TBool))) (= (|Seq#Length| |p#0@@1|) (|Seq#Length| |q#0@@1|))))) (and (and (= (|Seq#Length| (F2__X__s.__default.xor $ly@@304 |p#0@@1| |q#0@@1|)) (|Seq#Length| |p#0@@1|)) (forall ((|i#0@@106| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@106|) (< |i#0@@106| (|Seq#Length| (F2__X__s.__default.xor $ly@@304 |p#0@@1| |q#0@@1|)))) (= (U_2_bool ($Unbox boolType (|Seq#Index| (F2__X__s.__default.xor $ly@@304 |p#0@@1| |q#0@@1|) |i#0@@106|))) (F2__X__s.__default.bool__xor (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@1| |i#0@@106|))) (U_2_bool ($Unbox boolType (|Seq#Index| |q#0@@1| |i#0@@106|)))))) :qid |F2Xsdfy.30:18| :skolemid |2431| :pattern ( ($Unbox boolType (|Seq#Index| |q#0@@1| |i#0@@106|))) :pattern ( ($Unbox boolType (|Seq#Index| |p#0@@1| |i#0@@106|))) :pattern ( ($Unbox boolType (|Seq#Index| (F2__X__s.__default.xor $ly@@304 |p#0@@1| |q#0@@1|) |i#0@@106|))) ))) ($Is (F2__X__s.__default.xor $ly@@304 |p#0@@1| |q#0@@1|) (TSeq TBool)))) :qid |F2Xsdfy.27:22| :skolemid |2432| :pattern ( (F2__X__s.__default.xor $ly@@304 |p#0@@1| |q#0@@1|)) ))))
(assert (forall (($ly@@305 T@U) (|p#0@@2| T@U) (|q#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@305) LayerTypeType) (= (type |p#0@@2|) (SeqType BoxType))) (= (type |q#0@@2|) (SeqType BoxType))) (and ($Is |p#0@@2| (TSeq TBool)) ($Is |q#0@@2| (TSeq TBool)))) (= (|F2__X__s.__default.xor#requires| $ly@@305 |p#0@@2| |q#0@@2|) (= (|Seq#Length| |p#0@@2|) (|Seq#Length| |q#0@@2|)))) :qid |F2Xsdfy.27:22| :skolemid |2433| :pattern ( (|F2__X__s.__default.xor#requires| $ly@@305 |p#0@@2| |q#0@@2|)) )))
(assert  (=> true (forall (($ly@@306 T@U) (|p#0@@3| T@U) (|q#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@306) LayerTypeType) (= (type |p#0@@3|) (SeqType BoxType))) (= (type |q#0@@3|) (SeqType BoxType))) (or (|F2__X__s.__default.xor#canCall| |p#0@@3| |q#0@@3|) (and (and ($Is |p#0@@3| (TSeq TBool)) ($Is |q#0@@3| (TSeq TBool))) (= (|Seq#Length| |p#0@@3|) (|Seq#Length| |q#0@@3|))))) (and (=> (not (= (|Seq#Length| |p#0@@3|) (LitInt 0))) (and (|F2__X__s.__default.xor#canCall| (|Seq#Take| |p#0@@3| (- (|Seq#Length| |p#0@@3|) 1)) (|Seq#Take| |q#0@@3| (- (|Seq#Length| |q#0@@3|) 1))) (|F2__X__s.__default.bool__xor#canCall| (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@3| (- (|Seq#Length| |p#0@@3|) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| |q#0@@3| (- (|Seq#Length| |q#0@@3|) 1))))))) (= (F2__X__s.__default.xor ($LS $ly@@306) |p#0@@3| |q#0@@3|) (ite (= (|Seq#Length| |p#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (F2__X__s.__default.xor $ly@@306 (|Seq#Take| |p#0@@3| (- (|Seq#Length| |p#0@@3|) 1)) (|Seq#Take| |q#0@@3| (- (|Seq#Length| |q#0@@3|) 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U (F2__X__s.__default.bool__xor (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@3| (- (|Seq#Length| |p#0@@3|) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| |q#0@@3| (- (|Seq#Length| |q#0@@3|) 1))))))))))))) :qid |F2Xsdfy.27:22| :skolemid |2434| :pattern ( (F2__X__s.__default.xor ($LS $ly@@306) |p#0@@3| |q#0@@3|)) ))))
(assert  (=> true (forall (($ly@@307 T@U) (|p#0@@4| T@U) (|q#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@307) LayerTypeType) (= (type |p#0@@4|) (SeqType BoxType))) (= (type |q#0@@4|) (SeqType BoxType))) (or (|F2__X__s.__default.xor#canCall| (Lit |p#0@@4|) (Lit |q#0@@4|)) (and (and ($Is |p#0@@4| (TSeq TBool)) ($Is |q#0@@4| (TSeq TBool))) (= (|Seq#Length| (Lit |p#0@@4|)) (|Seq#Length| (Lit |q#0@@4|)))))) (and (=> (not (= (|Seq#Length| (Lit |p#0@@4|)) (LitInt 0))) (and (|F2__X__s.__default.xor#canCall| (|Seq#Take| (Lit |p#0@@4|) (- (|Seq#Length| (Lit |p#0@@4|)) 1)) (|Seq#Take| (Lit |q#0@@4|) (- (|Seq#Length| (Lit |q#0@@4|)) 1))) (|F2__X__s.__default.bool__xor#canCall| (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@4|) (- (|Seq#Length| (Lit |p#0@@4|)) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |q#0@@4|) (- (|Seq#Length| (Lit |q#0@@4|)) 1))))))) (= (F2__X__s.__default.xor ($LS $ly@@307) (Lit |p#0@@4|) (Lit |q#0@@4|)) (ite (= (|Seq#Length| (Lit |p#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (F2__X__s.__default.xor ($LS $ly@@307) (|Seq#Take| (Lit |p#0@@4|) (- (|Seq#Length| (Lit |p#0@@4|)) 1)) (|Seq#Take| (Lit |q#0@@4|) (- (|Seq#Length| (Lit |q#0@@4|)) 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (bool_2_U (F2__X__s.__default.bool__xor (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@4|) (- (|Seq#Length| (Lit |p#0@@4|)) 1)))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |q#0@@4|) (- (|Seq#Length| (Lit |q#0@@4|)) 1))))))))))))) :qid |F2Xsdfy.27:22| :weight 3 :skolemid |2435| :pattern ( (F2__X__s.__default.xor ($LS $ly@@307) (Lit |p#0@@4|) (Lit |q#0@@4|))) ))))
(assert (forall ((arg0@@588 T@U) (arg1@@273 Int) ) (! (= (type (F2__X__s.__default.extend arg0@@588 arg1@@273)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.extend| :pattern ( (F2__X__s.__default.extend arg0@@588 arg1@@273)) )))
(assert  (=> true (forall ((|p#0@@5| T@U) (|l#0@@17| Int) ) (!  (=> (and (= (type |p#0@@5|) (SeqType BoxType)) (or (|F2__X__s.__default.extend#canCall| |p#0@@5| |l#0@@17|) (and (and ($Is |p#0@@5| (TSeq TBool)) (<= (LitInt 0) |l#0@@17|)) (>= |l#0@@17| (|Seq#Length| |p#0@@5|))))) ($Is (F2__X__s.__default.extend |p#0@@5| |l#0@@17|) (TSeq TBool))) :qid |F2Xsdfy.38:19| :skolemid |2436| :pattern ( (F2__X__s.__default.extend |p#0@@5| |l#0@@17|)) ))))
(assert (forall ((|p#0@@6| T@U) (|l#0@@18| Int) ) (!  (=> (= (type |p#0@@6|) (SeqType BoxType)) (=> (and ($Is |p#0@@6| (TSeq TBool)) (<= (LitInt 0) |l#0@@18|)) (= (|F2__X__s.__default.extend#requires| |p#0@@6| |l#0@@18|) (>= |l#0@@18| (|Seq#Length| |p#0@@6|))))) :qid |F2Xsdfy.38:19| :skolemid |2437| :pattern ( (|F2__X__s.__default.extend#requires| |p#0@@6| |l#0@@18|)) )))
(assert  (=> true (forall ((|p#0@@7| T@U) (|l#0@@19| Int) ) (!  (=> (and (= (type |p#0@@7|) (SeqType BoxType)) (or (|F2__X__s.__default.extend#canCall| |p#0@@7| |l#0@@19|) (and (and ($Is |p#0@@7| (TSeq TBool)) (<= (LitInt 0) |l#0@@19|)) (>= |l#0@@19| (|Seq#Length| |p#0@@7|))))) (and (|Bits__s.__default.zeroes#canCall| (- |l#0@@19| (|Seq#Length| |p#0@@7|))) (= (F2__X__s.__default.extend |p#0@@7| |l#0@@19|) (|Seq#Append| |p#0@@7| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- |l#0@@19| (|Seq#Length| |p#0@@7|))))))) :qid |F2Xsdfy.38:19| :skolemid |2438| :pattern ( (F2__X__s.__default.extend |p#0@@7| |l#0@@19|)) ))))
(assert  (=> true (forall ((|p#0@@8| T@U) (|l#0@@20| Int) ) (!  (=> (and (= (type |p#0@@8|) (SeqType BoxType)) (or (|F2__X__s.__default.extend#canCall| (Lit |p#0@@8|) (LitInt |l#0@@20|)) (and (and ($Is |p#0@@8| (TSeq TBool)) (<= (LitInt 0) |l#0@@20|)) (>= (LitInt |l#0@@20|) (|Seq#Length| (Lit |p#0@@8|)))))) (and (|Bits__s.__default.zeroes#canCall| (- |l#0@@20| (|Seq#Length| (Lit |p#0@@8|)))) (= (F2__X__s.__default.extend (Lit |p#0@@8|) (LitInt |l#0@@20|)) (|Seq#Append| |p#0@@8| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- |l#0@@20| (|Seq#Length| (Lit |p#0@@8|)))))))) :qid |F2Xsdfy.38:19| :weight 3 :skolemid |2439| :pattern ( (F2__X__s.__default.extend (Lit |p#0@@8|) (LitInt |l#0@@20|))) ))))
(assert  (=> true (forall ((|p#0@@9| T@U) (|i#0@@107| Int) ) (!  (=> (and (= (type |p#0@@9|) (SeqType BoxType)) (or (|F2__X__s.__default.bits__get#canCall| |p#0@@9| |i#0@@107|) (and ($Is |p#0@@9| (TSeq TBool)) (<= (LitInt 0) |i#0@@107|)))) true) :qid |F2Xsdfy.44:21| :skolemid |2440| :pattern ( (F2__X__s.__default.bits__get |p#0@@9| |i#0@@107|)) ))))
(assert (forall ((|p#0@@10| T@U) (|i#0@@108| Int) ) (!  (=> (= (type |p#0@@10|) (SeqType BoxType)) (=> (and ($Is |p#0@@10| (TSeq TBool)) (<= (LitInt 0) |i#0@@108|)) (= (|F2__X__s.__default.bits__get#requires| |p#0@@10| |i#0@@108|) true))) :qid |F2Xsdfy.44:21| :skolemid |2441| :pattern ( (|F2__X__s.__default.bits__get#requires| |p#0@@10| |i#0@@108|)) )))
(assert  (=> true (forall ((|p#0@@11| T@U) (|i#0@@109| Int) ) (!  (=> (and (= (type |p#0@@11|) (SeqType BoxType)) (or (|F2__X__s.__default.bits__get#canCall| |p#0@@11| |i#0@@109|) (and ($Is |p#0@@11| (TSeq TBool)) (<= (LitInt 0) |i#0@@109|)))) (= (F2__X__s.__default.bits__get |p#0@@11| |i#0@@109|)  (and (< |i#0@@109| (|Seq#Length| |p#0@@11|)) (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@11| |i#0@@109|)))))) :qid |F2Xsdfy.44:21| :skolemid |2442| :pattern ( (F2__X__s.__default.bits__get |p#0@@11| |i#0@@109|)) ))))
(assert  (=> true (forall ((|p#0@@12| T@U) (|i#0@@110| Int) ) (!  (=> (and (= (type |p#0@@12|) (SeqType BoxType)) (or (|F2__X__s.__default.bits__get#canCall| (Lit |p#0@@12|) (LitInt |i#0@@110|)) (and ($Is |p#0@@12| (TSeq TBool)) (<= (LitInt 0) |i#0@@110|)))) (= (F2__X__s.__default.bits__get (Lit |p#0@@12|) (LitInt |i#0@@110|))  (and (< |i#0@@110| (|Seq#Length| (Lit |p#0@@12|))) (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@12|) (LitInt |i#0@@110|))))))) :qid |F2Xsdfy.44:21| :weight 3 :skolemid |2443| :pattern ( (F2__X__s.__default.bits__get (Lit |p#0@@12|) (LitInt |i#0@@110|))) ))))
(assert (forall (($ly@@308 T@U) (|p#0@@13| T@U) (|q#0@@5| T@U) (|i#0@@111| Int) (|j#0@@7| Int) ) (!  (=> (and (and (= (type $ly@@308) LayerTypeType) (= (type |p#0@@13|) (SeqType BoxType))) (= (type |q#0@@5|) (SeqType BoxType))) (= (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@308) |p#0@@13| |q#0@@5| |i#0@@111| |j#0@@7|) (F2__X__s.__default.mul__F2__X__digit__partial $ly@@308 |p#0@@13| |q#0@@5| |i#0@@111| |j#0@@7|))) :qid |F2Xsdfy.49:12| :skolemid |2444| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@308) |p#0@@13| |q#0@@5| |i#0@@111| |j#0@@7|)) )))
(assert (forall (($ly@@309 T@U) (|p#0@@14| T@U) (|q#0@@6| T@U) (|i#0@@112| Int) (|j#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@309) LayerTypeType) (= (type |p#0@@14|) (SeqType BoxType))) (= (type |q#0@@6|) (SeqType BoxType))) (= (F2__X__s.__default.mul__F2__X__digit__partial $ly@@309 |p#0@@14| |q#0@@6| |i#0@@112| |j#0@@8|) (F2__X__s.__default.mul__F2__X__digit__partial $LZ |p#0@@14| |q#0@@6| |i#0@@112| |j#0@@8|))) :qid |F2Xsdfy.49:12| :skolemid |2445| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial (AsFuelBottom $ly@@309) |p#0@@14| |q#0@@6| |i#0@@112| |j#0@@8|)) )))
(assert  (=> true (forall (($ly@@310 T@U) (|p#0@@15| T@U) (|q#0@@7| T@U) (|i#0@@113| Int) (|j#0@@9| Int) ) (!  (=> (and (and (and (= (type $ly@@310) LayerTypeType) (= (type |p#0@@15|) (SeqType BoxType))) (= (type |q#0@@7|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@15| |q#0@@7| |i#0@@113| |j#0@@9|) (and (and (and (and ($Is |p#0@@15| (TSeq TBool)) ($Is |q#0@@7| (TSeq TBool))) (<= (LitInt 0) |i#0@@113|)) (<= (LitInt 0) |j#0@@9|)) (<= |j#0@@9| (+ |i#0@@113| 1))))) true) :qid |F2Xsdfy.49:12| :skolemid |2446| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial $ly@@310 |p#0@@15| |q#0@@7| |i#0@@113| |j#0@@9|)) ))))
(assert (forall (($ly@@311 T@U) (|p#0@@16| T@U) (|q#0@@8| T@U) (|i#0@@114| Int) (|j#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@311) LayerTypeType) (= (type |p#0@@16|) (SeqType BoxType))) (= (type |q#0@@8|) (SeqType BoxType))) (=> (and (and (and ($Is |p#0@@16| (TSeq TBool)) ($Is |q#0@@8| (TSeq TBool))) (<= (LitInt 0) |i#0@@114|)) (<= (LitInt 0) |j#0@@10|)) (= (|F2__X__s.__default.mul__F2__X__digit__partial#requires| $ly@@311 |p#0@@16| |q#0@@8| |i#0@@114| |j#0@@10|) (<= |j#0@@10| (+ |i#0@@114| 1))))) :qid |F2Xsdfy.49:12| :skolemid |2447| :pattern ( (|F2__X__s.__default.mul__F2__X__digit__partial#requires| $ly@@311 |p#0@@16| |q#0@@8| |i#0@@114| |j#0@@10|)) )))
(assert  (=> true (forall (($ly@@312 T@U) (|p#0@@17| T@U) (|q#0@@9| T@U) (|i#0@@115| Int) (|j#0@@11| Int) ) (!  (=> (and (and (and (= (type $ly@@312) LayerTypeType) (= (type |p#0@@17|) (SeqType BoxType))) (= (type |q#0@@9|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@17| |q#0@@9| |i#0@@115| |j#0@@11|) (and (and (and (and ($Is |p#0@@17| (TSeq TBool)) ($Is |q#0@@9| (TSeq TBool))) (<= (LitInt 0) |i#0@@115|)) (<= (LitInt 0) |j#0@@11|)) (<= |j#0@@11| (+ |i#0@@115| 1))))) (and (=> (not (= |j#0@@11| (+ |i#0@@115| 1))) (and (and (and (|F2__X__s.__default.bits__get#canCall| |p#0@@17| |j#0@@11|) (=> (F2__X__s.__default.bits__get |p#0@@17| |j#0@@11|) (|F2__X__s.__default.bits__get#canCall| |q#0@@9| (- |i#0@@115| |j#0@@11|)))) (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@17| |q#0@@9| |i#0@@115| (+ |j#0@@11| 1))) (|F2__X__s.__default.bool__xor#canCall|  (and (F2__X__s.__default.bits__get |p#0@@17| |j#0@@11|) (F2__X__s.__default.bits__get |q#0@@9| (- |i#0@@115| |j#0@@11|))) (F2__X__s.__default.mul__F2__X__digit__partial $ly@@312 |p#0@@17| |q#0@@9| |i#0@@115| (+ |j#0@@11| 1))))) (= (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@312) |p#0@@17| |q#0@@9| |i#0@@115| |j#0@@11|) (ite (= |j#0@@11| (+ |i#0@@115| 1)) false (F2__X__s.__default.bool__xor  (and (F2__X__s.__default.bits__get |p#0@@17| |j#0@@11|) (F2__X__s.__default.bits__get |q#0@@9| (- |i#0@@115| |j#0@@11|))) (F2__X__s.__default.mul__F2__X__digit__partial $ly@@312 |p#0@@17| |q#0@@9| |i#0@@115| (+ |j#0@@11| 1))))))) :qid |F2Xsdfy.49:12| :skolemid |2448| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@312) |p#0@@17| |q#0@@9| |i#0@@115| |j#0@@11|)) ))))
(assert  (=> true (forall (($ly@@313 T@U) (|p#0@@18| T@U) (|q#0@@10| T@U) (|i#0@@116| Int) (|j#0@@12| Int) ) (!  (=> (and (and (and (= (type $ly@@313) LayerTypeType) (= (type |p#0@@18|) (SeqType BoxType))) (= (type |q#0@@10|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@18| |q#0@@10| (LitInt |i#0@@116|) (LitInt |j#0@@12|)) (and (and (and (and ($Is |p#0@@18| (TSeq TBool)) ($Is |q#0@@10| (TSeq TBool))) (<= (LitInt 0) |i#0@@116|)) (<= (LitInt 0) |j#0@@12|)) (<= (LitInt |j#0@@12|) (LitInt (+ |i#0@@116| 1)))))) (and (=> (not (= (LitInt |j#0@@12|) (LitInt (+ |i#0@@116| 1)))) (and (and (and (|F2__X__s.__default.bits__get#canCall| |p#0@@18| (LitInt |j#0@@12|)) (=> (F2__X__s.__default.bits__get |p#0@@18| (LitInt |j#0@@12|)) (|F2__X__s.__default.bits__get#canCall| |q#0@@10| (LitInt (- |i#0@@116| |j#0@@12|))))) (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@18| |q#0@@10| (LitInt |i#0@@116|) (LitInt (+ |j#0@@12| 1)))) (|F2__X__s.__default.bool__xor#canCall|  (and (F2__X__s.__default.bits__get |p#0@@18| (LitInt |j#0@@12|)) (F2__X__s.__default.bits__get |q#0@@10| (LitInt (- |i#0@@116| |j#0@@12|)))) (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@313) |p#0@@18| |q#0@@10| (LitInt |i#0@@116|) (LitInt (+ |j#0@@12| 1)))))) (= (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@313) |p#0@@18| |q#0@@10| (LitInt |i#0@@116|) (LitInt |j#0@@12|)) (ite (= (LitInt |j#0@@12|) (LitInt (+ |i#0@@116| 1))) false (F2__X__s.__default.bool__xor  (and (F2__X__s.__default.bits__get |p#0@@18| (LitInt |j#0@@12|)) (F2__X__s.__default.bits__get |q#0@@10| (LitInt (- |i#0@@116| |j#0@@12|)))) (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@313) |p#0@@18| |q#0@@10| (LitInt |i#0@@116|) (LitInt (+ |j#0@@12| 1)))))))) :qid |F2Xsdfy.49:12| :weight 3 :skolemid |2449| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@313) |p#0@@18| |q#0@@10| (LitInt |i#0@@116|) (LitInt |j#0@@12|))) ))))
(assert  (=> true (forall (($ly@@314 T@U) (|p#0@@19| T@U) (|q#0@@11| T@U) (|i#0@@117| Int) (|j#0@@13| Int) ) (!  (=> (and (and (and (= (type $ly@@314) LayerTypeType) (= (type |p#0@@19|) (SeqType BoxType))) (= (type |q#0@@11|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@117|) (LitInt |j#0@@13|)) (and (and (and (and ($Is |p#0@@19| (TSeq TBool)) ($Is |q#0@@11| (TSeq TBool))) (<= (LitInt 0) |i#0@@117|)) (<= (LitInt 0) |j#0@@13|)) (<= (LitInt |j#0@@13|) (LitInt (+ |i#0@@117| 1)))))) (and (=> (not (= (LitInt |j#0@@13|) (LitInt (+ |i#0@@117| 1)))) (and (and (and (|F2__X__s.__default.bits__get#canCall| (Lit |p#0@@19|) (LitInt |j#0@@13|)) (=> (U_2_bool (Lit (bool_2_U (F2__X__s.__default.bits__get (Lit |p#0@@19|) (LitInt |j#0@@13|))))) (|F2__X__s.__default.bits__get#canCall| (Lit |q#0@@11|) (LitInt (- |i#0@@117| |j#0@@13|))))) (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@117|) (LitInt (+ |j#0@@13| 1)))) (|F2__X__s.__default.bool__xor#canCall| (U_2_bool (Lit (bool_2_U  (and (F2__X__s.__default.bits__get (Lit |p#0@@19|) (LitInt |j#0@@13|)) (F2__X__s.__default.bits__get (Lit |q#0@@11|) (LitInt (- |i#0@@117| |j#0@@13|))))))) (U_2_bool (Lit (bool_2_U (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@314) (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@117|) (LitInt (+ |j#0@@13| 1))))))))) (= (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@314) (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@117|) (LitInt |j#0@@13|)) (ite (= (LitInt |j#0@@13|) (LitInt (+ |i#0@@117| 1))) false (F2__X__s.__default.bool__xor (U_2_bool (Lit (bool_2_U  (and (F2__X__s.__default.bits__get (Lit |p#0@@19|) (LitInt |j#0@@13|)) (F2__X__s.__default.bits__get (Lit |q#0@@11|) (LitInt (- |i#0@@117| |j#0@@13|))))))) (U_2_bool (Lit (bool_2_U (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@314) (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@117|) (LitInt (+ |j#0@@13| 1))))))))))) :qid |F2Xsdfy.49:12| :weight 3 :skolemid |2450| :pattern ( (F2__X__s.__default.mul__F2__X__digit__partial ($LS $ly@@314) (Lit |p#0@@19|) (Lit |q#0@@11|) (LitInt |i#0@@117|) (LitInt |j#0@@13|))) ))))
(assert  (=> true (forall ((|p#0@@20| T@U) (|q#0@@12| T@U) (|i#0@@118| Int) ) (!  (=> (and (and (= (type |p#0@@20|) (SeqType BoxType)) (= (type |q#0@@12|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit#canCall| |p#0@@20| |q#0@@12| |i#0@@118|) (and (and ($Is |p#0@@20| (TSeq TBool)) ($Is |q#0@@12| (TSeq TBool))) (<= (LitInt 0) |i#0@@118|)))) true) :qid |F2Xsdfy.62:27| :skolemid |2451| :pattern ( (F2__X__s.__default.mul__F2__X__digit |p#0@@20| |q#0@@12| |i#0@@118|)) ))))
(assert (forall ((|p#0@@21| T@U) (|q#0@@13| T@U) (|i#0@@119| Int) ) (!  (=> (and (= (type |p#0@@21|) (SeqType BoxType)) (= (type |q#0@@13|) (SeqType BoxType))) (=> (and (and ($Is |p#0@@21| (TSeq TBool)) ($Is |q#0@@13| (TSeq TBool))) (<= (LitInt 0) |i#0@@119|)) (= (|F2__X__s.__default.mul__F2__X__digit#requires| |p#0@@21| |q#0@@13| |i#0@@119|) true))) :qid |F2Xsdfy.62:27| :skolemid |2452| :pattern ( (|F2__X__s.__default.mul__F2__X__digit#requires| |p#0@@21| |q#0@@13| |i#0@@119|)) )))
(assert  (=> true (forall ((|p#0@@22| T@U) (|q#0@@14| T@U) (|i#0@@120| Int) ) (!  (=> (and (and (= (type |p#0@@22|) (SeqType BoxType)) (= (type |q#0@@14|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit#canCall| |p#0@@22| |q#0@@14| |i#0@@120|) (and (and ($Is |p#0@@22| (TSeq TBool)) ($Is |q#0@@14| (TSeq TBool))) (<= (LitInt 0) |i#0@@120|)))) (and (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| |p#0@@22| |q#0@@14| |i#0@@120| (LitInt 0)) (= (F2__X__s.__default.mul__F2__X__digit |p#0@@22| |q#0@@14| |i#0@@120|) (F2__X__s.__default.mul__F2__X__digit__partial ($LS $LZ) |p#0@@22| |q#0@@14| |i#0@@120| (LitInt 0))))) :qid |F2Xsdfy.62:27| :skolemid |2453| :pattern ( (F2__X__s.__default.mul__F2__X__digit |p#0@@22| |q#0@@14| |i#0@@120|)) ))))
(assert  (=> true (forall ((|p#0@@23| T@U) (|q#0@@15| T@U) (|i#0@@121| Int) ) (!  (=> (and (and (= (type |p#0@@23|) (SeqType BoxType)) (= (type |q#0@@15|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X__digit#canCall| (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@121|)) (and (and ($Is |p#0@@23| (TSeq TBool)) ($Is |q#0@@15| (TSeq TBool))) (<= (LitInt 0) |i#0@@121|)))) (and (|F2__X__s.__default.mul__F2__X__digit__partial#canCall| (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@121|) (LitInt 0)) (= (F2__X__s.__default.mul__F2__X__digit (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@121|)) (U_2_bool (Lit (bool_2_U (F2__X__s.__default.mul__F2__X__digit__partial ($LS $LZ) (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@121|) (LitInt 0)))))))) :qid |F2Xsdfy.62:27| :weight 3 :skolemid |2454| :pattern ( (F2__X__s.__default.mul__F2__X__digit (Lit |p#0@@23|) (Lit |q#0@@15|) (LitInt |i#0@@121|))) ))))
(assert (forall ((arg0@@589 T@U) (arg1@@274 T@U) (arg2@@161 T@U) ) (! (= (type (F2__X__s.__default.mul__F2__X arg0@@589 arg1@@274 arg2@@161)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mul__F2__X| :pattern ( (F2__X__s.__default.mul__F2__X arg0@@589 arg1@@274 arg2@@161)) )))
(assert (forall (($ly@@315 T@U) (|p#0@@24| T@U) (|q#0@@16| T@U) ) (!  (=> (and (and (= (type $ly@@315) LayerTypeType) (= (type |p#0@@24|) (SeqType BoxType))) (= (type |q#0@@16|) (SeqType BoxType))) (= (F2__X__s.__default.mul__F2__X ($LS $ly@@315) |p#0@@24| |q#0@@16|) (F2__X__s.__default.mul__F2__X $ly@@315 |p#0@@24| |q#0@@16|))) :qid |F2Xsdfy.67:22| :skolemid |2455| :pattern ( (F2__X__s.__default.mul__F2__X ($LS $ly@@315) |p#0@@24| |q#0@@16|)) )))
(assert (forall (($ly@@316 T@U) (|p#0@@25| T@U) (|q#0@@17| T@U) ) (!  (=> (and (and (= (type $ly@@316) LayerTypeType) (= (type |p#0@@25|) (SeqType BoxType))) (= (type |q#0@@17|) (SeqType BoxType))) (= (F2__X__s.__default.mul__F2__X $ly@@316 |p#0@@25| |q#0@@17|) (F2__X__s.__default.mul__F2__X $LZ |p#0@@25| |q#0@@17|))) :qid |F2Xsdfy.67:22| :skolemid |2456| :pattern ( (F2__X__s.__default.mul__F2__X (AsFuelBottom $ly@@316) |p#0@@25| |q#0@@17|)) )))
(assert  (=> true (forall (($ly@@317 T@U) (|p#0@@26| T@U) (|q#0@@18| T@U) ) (!  (=> (and (and (and (= (type $ly@@317) LayerTypeType) (= (type |p#0@@26|) (SeqType BoxType))) (= (type |q#0@@18|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X#canCall| |p#0@@26| |q#0@@18|) (and ($Is |p#0@@26| (TSeq TBool)) ($Is |q#0@@18| (TSeq TBool))))) (and (and (= (|Seq#Length| (F2__X__s.__default.mul__F2__X $ly@@317 |p#0@@26| |q#0@@18|)) (+ (|Seq#Length| |p#0@@26|) (|Seq#Length| |q#0@@18|))) (forall ((|i#0@@122| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@122|) (< |i#0@@122| (|Seq#Length| (F2__X__s.__default.mul__F2__X $ly@@317 |p#0@@26| |q#0@@18|)))) (= (U_2_bool ($Unbox boolType (|Seq#Index| (F2__X__s.__default.mul__F2__X $ly@@317 |p#0@@26| |q#0@@18|) |i#0@@122|))) (F2__X__s.__default.mul__F2__X__digit |p#0@@26| |q#0@@18| |i#0@@122|))) :qid |F2Xsdfy.69:18| :skolemid |2457| :pattern ( (F2__X__s.__default.mul__F2__X__digit |p#0@@26| |q#0@@18| |i#0@@122|)) :pattern ( ($Unbox boolType (|Seq#Index| (F2__X__s.__default.mul__F2__X $ly@@317 |p#0@@26| |q#0@@18|) |i#0@@122|))) ))) ($Is (F2__X__s.__default.mul__F2__X $ly@@317 |p#0@@26| |q#0@@18|) (TSeq TBool)))) :qid |F2Xsdfy.67:22| :skolemid |2458| :pattern ( (F2__X__s.__default.mul__F2__X $ly@@317 |p#0@@26| |q#0@@18|)) ))))
(assert (forall (($ly@@318 T@U) ($Heap@@43 T@U) (|p#0@@27| T@U) (|q#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@318) LayerTypeType) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |p#0@@27|) (SeqType BoxType))) (= (type |q#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@43) ($Is |p#0@@27| (TSeq TBool))) ($Is |q#0@@19| (TSeq TBool)))) (= (|F2__X__s.__default.mul__F2__X#requires| $ly@@318 |p#0@@27| |q#0@@19|) true)) :qid |F2Xsdfy.67:22| :skolemid |2459| :pattern ( (|F2__X__s.__default.mul__F2__X#requires| $ly@@318 |p#0@@27| |q#0@@19|) ($IsGoodHeap $Heap@@43)) )))
(assert  (and (forall ((arg0@@590 T@U) (arg1@@275 T@U) ) (! (= (type (|lambda#36| arg0@@590 arg1@@275)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@590 arg1@@275)) )) (forall ((arg0@@591 T@U) (arg1@@276 Int) ) (! (= (type (|lambda#37| arg0@@591 arg1@@276)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@591 arg1@@276)) ))))
(assert  (=> true (forall (($ly@@319 T@U) ($Heap@@44 T@U) (|p#0@@28| T@U) (|q#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@319) LayerTypeType) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |p#0@@28|) (SeqType BoxType))) (= (type |q#0@@20|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X#canCall| |p#0@@28| |q#0@@20|) (and (and ($IsGoodHeap $Heap@@44) ($Is |p#0@@28| (TSeq TBool))) ($Is |q#0@@20| (TSeq TBool))))) (and (forall ((|$l#1#i#0@@0| Int) ) (!  (=> (<= (LitInt 0) |$l#1#i#0@@0|) (|F2__X__s.__default.mul__F2__X__digit#canCall| |p#0@@28| |q#0@@20| |$l#1#i#0@@0|)) :qid |unknown.0:0| :skolemid |2460| )) (= (F2__X__s.__default.mul__F2__X ($LS $ly@@319) |p#0@@28| |q#0@@20|) (|Seq#Create| TBool $Heap@@44 (+ (|Seq#Length| |p#0@@28|) (|Seq#Length| |q#0@@20|)) (Lit (AtLayer (|lambda#16| (Handle1 (|lambda#36| |p#0@@28| |q#0@@20|) (|lambda#37| TInt (LitInt 0)) (|lambda#15| (SetRef_to_SetBox (|lambda#14| false))))) $ly@@319)))))) :qid |F2Xsdfy.67:22| :skolemid |2461| :pattern ( (F2__X__s.__default.mul__F2__X ($LS $ly@@319) |p#0@@28| |q#0@@20|) ($IsGoodHeap $Heap@@44)) ))))
(assert  (=> true (forall (($ly@@320 T@U) ($Heap@@45 T@U) (|p#0@@29| T@U) (|q#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@320) LayerTypeType) (= (type $Heap@@45) (MapType0Type refType MapType1Type))) (= (type |p#0@@29|) (SeqType BoxType))) (= (type |q#0@@21|) (SeqType BoxType))) (or (|F2__X__s.__default.mul__F2__X#canCall| (Lit |p#0@@29|) (Lit |q#0@@21|)) (and (and ($IsGoodHeap $Heap@@45) ($Is |p#0@@29| (TSeq TBool))) ($Is |q#0@@21| (TSeq TBool))))) (and (forall ((|$l#3#i#0@@0| Int) ) (!  (=> (<= (LitInt 0) |$l#3#i#0@@0|) (|F2__X__s.__default.mul__F2__X__digit#canCall| (Lit |p#0@@29|) (Lit |q#0@@21|) |$l#3#i#0@@0|)) :qid |unknown.0:0| :skolemid |2462| )) (= (F2__X__s.__default.mul__F2__X ($LS $ly@@320) (Lit |p#0@@29|) (Lit |q#0@@21|)) (|Seq#Create| TBool $Heap@@45 (+ (|Seq#Length| (Lit |p#0@@29|)) (|Seq#Length| (Lit |q#0@@21|))) (Lit (AtLayer (|lambda#16| (Handle1 (|lambda#36| (Lit |p#0@@29|) (Lit |q#0@@21|)) (|lambda#37| TInt (LitInt 0)) (|lambda#15| (SetRef_to_SetBox (|lambda#14| false))))) ($LS $ly@@320))))))) :qid |F2Xsdfy.67:22| :weight 3 :skolemid |2463| :pattern ( (F2__X__s.__default.mul__F2__X ($LS $ly@@320) (Lit |p#0@@29|) (Lit |q#0@@21|)) ($IsGoodHeap $Heap@@45)) ))))
(assert (forall ((arg0@@592 T@U) (arg1@@277 Int) ) (! (= (type (F2__X__s.__default.shift arg0@@592 arg1@@277)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.shift| :pattern ( (F2__X__s.__default.shift arg0@@592 arg1@@277)) )))
(assert  (=> true (forall ((|p#0@@30| T@U) (|t#0@@13| Int) ) (!  (=> (and (= (type |p#0@@30|) (SeqType BoxType)) (or (|F2__X__s.__default.shift#canCall| |p#0@@30| |t#0@@13|) (and ($Is |p#0@@30| (TSeq TBool)) (<= (LitInt 0) |t#0@@13|)))) ($Is (F2__X__s.__default.shift |p#0@@30| |t#0@@13|) (TSeq TBool))) :qid |F2Xsdfy.74:18| :skolemid |2464| :pattern ( (F2__X__s.__default.shift |p#0@@30| |t#0@@13|)) ))))
(assert (forall ((|p#0@@31| T@U) (|t#0@@14| Int) ) (!  (=> (= (type |p#0@@31|) (SeqType BoxType)) (=> (and ($Is |p#0@@31| (TSeq TBool)) (<= (LitInt 0) |t#0@@14|)) (= (|F2__X__s.__default.shift#requires| |p#0@@31| |t#0@@14|) true))) :qid |F2Xsdfy.74:18| :skolemid |2465| :pattern ( (|F2__X__s.__default.shift#requires| |p#0@@31| |t#0@@14|)) )))
(assert  (=> true (forall ((|p#0@@32| T@U) (|t#0@@15| Int) ) (!  (=> (and (= (type |p#0@@32|) (SeqType BoxType)) (or (|F2__X__s.__default.shift#canCall| |p#0@@32| |t#0@@15|) (and ($Is |p#0@@32| (TSeq TBool)) (<= (LitInt 0) |t#0@@15|)))) (and (|Bits__s.__default.zeroes#canCall| |t#0@@15|) (= (F2__X__s.__default.shift |p#0@@32| |t#0@@15|) (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes |t#0@@15|) |p#0@@32|)))) :qid |F2Xsdfy.74:18| :skolemid |2466| :pattern ( (F2__X__s.__default.shift |p#0@@32| |t#0@@15|)) ))))
(assert  (=> true (forall ((|p#0@@33| T@U) (|t#0@@16| Int) ) (!  (=> (and (= (type |p#0@@33|) (SeqType BoxType)) (or (|F2__X__s.__default.shift#canCall| (Lit |p#0@@33|) (LitInt |t#0@@16|)) (and ($Is |p#0@@33| (TSeq TBool)) (<= (LitInt 0) |t#0@@16|)))) (and (|Bits__s.__default.zeroes#canCall| (LitInt |t#0@@16|)) (= (F2__X__s.__default.shift (Lit |p#0@@33|) (LitInt |t#0@@16|)) (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt |t#0@@16|)) |p#0@@33|)))) :qid |F2Xsdfy.74:18| :weight 3 :skolemid |2467| :pattern ( (F2__X__s.__default.shift (Lit |p#0@@33|) (LitInt |t#0@@16|))) ))))
(assert (forall ((arg0@@593 T@U) (arg1@@278 T@U) (arg2@@162 T@U) ) (! (= (type (F2__X__s.__default.mod__F2__X arg0@@593 arg1@@278 arg2@@162)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mod__F2__X| :pattern ( (F2__X__s.__default.mod__F2__X arg0@@593 arg1@@278 arg2@@162)) )))
(assert (forall (($ly@@321 T@U) (|p#0@@34| T@U) (|q#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@321) LayerTypeType) (= (type |p#0@@34|) (SeqType BoxType))) (= (type |q#0@@22|) (SeqType BoxType))) (= (F2__X__s.__default.mod__F2__X ($LS $ly@@321) |p#0@@34| |q#0@@22|) (F2__X__s.__default.mod__F2__X $ly@@321 |p#0@@34| |q#0@@22|))) :qid |F2Xsdfy.79:12| :skolemid |2468| :pattern ( (F2__X__s.__default.mod__F2__X ($LS $ly@@321) |p#0@@34| |q#0@@22|)) )))
(assert (forall (($ly@@322 T@U) (|p#0@@35| T@U) (|q#0@@23| T@U) ) (!  (=> (and (and (= (type $ly@@322) LayerTypeType) (= (type |p#0@@35|) (SeqType BoxType))) (= (type |q#0@@23|) (SeqType BoxType))) (= (F2__X__s.__default.mod__F2__X $ly@@322 |p#0@@35| |q#0@@23|) (F2__X__s.__default.mod__F2__X $LZ |p#0@@35| |q#0@@23|))) :qid |F2Xsdfy.79:12| :skolemid |2469| :pattern ( (F2__X__s.__default.mod__F2__X (AsFuelBottom $ly@@322) |p#0@@35| |q#0@@23|)) )))
(assert  (=> true (forall (($ly@@323 T@U) (|p#0@@36| T@U) (|q#0@@24| T@U) ) (!  (=> (and (and (and (= (type $ly@@323) LayerTypeType) (= (type |p#0@@36|) (SeqType BoxType))) (= (type |q#0@@24|) (SeqType BoxType))) (or (|F2__X__s.__default.mod__F2__X#canCall| |p#0@@36| |q#0@@24|) (and (and ($Is |p#0@@36| (TSeq TBool)) ($Is |q#0@@24| (TSeq TBool))) (> (|Seq#Length| |q#0@@24|) 0)))) (and (= (|Seq#Length| (F2__X__s.__default.mod__F2__X $ly@@323 |p#0@@36| |q#0@@24|)) (- (|Seq#Length| |q#0@@24|) 1)) ($Is (F2__X__s.__default.mod__F2__X $ly@@323 |p#0@@36| |q#0@@24|) (TSeq TBool)))) :qid |F2Xsdfy.79:12| :skolemid |2470| :pattern ( (F2__X__s.__default.mod__F2__X $ly@@323 |p#0@@36| |q#0@@24|)) ))))
(assert (forall (($ly@@324 T@U) (|p#0@@37| T@U) (|q#0@@25| T@U) ) (!  (=> (and (and (and (= (type $ly@@324) LayerTypeType) (= (type |p#0@@37|) (SeqType BoxType))) (= (type |q#0@@25|) (SeqType BoxType))) (and ($Is |p#0@@37| (TSeq TBool)) ($Is |q#0@@25| (TSeq TBool)))) (= (|F2__X__s.__default.mod__F2__X#requires| $ly@@324 |p#0@@37| |q#0@@25|) (> (|Seq#Length| |q#0@@25|) 0))) :qid |F2Xsdfy.79:12| :skolemid |2471| :pattern ( (|F2__X__s.__default.mod__F2__X#requires| $ly@@324 |p#0@@37| |q#0@@25|)) )))
(assert (= (type StartFuel_F2_X_s._default.xor) LayerTypeType))
(assert  (=> true (forall (($ly@@325 T@U) (|p#0@@38| T@U) (|q#0@@26| T@U) ) (!  (=> (and (and (and (= (type $ly@@325) LayerTypeType) (= (type |p#0@@38|) (SeqType BoxType))) (= (type |q#0@@26|) (SeqType BoxType))) (or (|F2__X__s.__default.mod__F2__X#canCall| |p#0@@38| |q#0@@26|) (and (and ($Is |p#0@@38| (TSeq TBool)) ($Is |q#0@@26| (TSeq TBool))) (> (|Seq#Length| |q#0@@26|) 0)))) (and (and (=> (<= (|Seq#Length| |p#0@@38|) (- (|Seq#Length| |q#0@@26|) 1)) (|Bits__s.__default.zeroes#canCall| (- (- (|Seq#Length| |q#0@@26|) 1) (|Seq#Length| |p#0@@38|)))) (=> (< (- (|Seq#Length| |q#0@@26|) 1) (|Seq#Length| |p#0@@38|)) (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1)))) (and (and (|F2__X__s.__default.shift#canCall| |q#0@@26| (- (|Seq#Length| |p#0@@38|) (|Seq#Length| |q#0@@26|))) (|F2__X__s.__default.xor#canCall| |p#0@@38| (F2__X__s.__default.shift |q#0@@26| (- (|Seq#Length| |p#0@@38|) (|Seq#Length| |q#0@@26|))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |p#0@@38| (F2__X__s.__default.shift |q#0@@26| (- (|Seq#Length| |p#0@@38|) (|Seq#Length| |q#0@@26|)))) (- (|Seq#Length| |p#0@@38|) 1)) |q#0@@26|))) (=> (not (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1)) |q#0@@26|))))) (= (F2__X__s.__default.mod__F2__X ($LS $ly@@325) |p#0@@38| |q#0@@26|) (ite (<= (|Seq#Length| |p#0@@38|) (- (|Seq#Length| |q#0@@26|) 1)) (|Seq#Append| |p#0@@38| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (- (|Seq#Length| |q#0@@26|) 1) (|Seq#Length| |p#0@@38|)))) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1)))) (F2__X__s.__default.mod__F2__X $ly@@325 (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |p#0@@38| (F2__X__s.__default.shift |q#0@@26| (- (|Seq#Length| |p#0@@38|) (|Seq#Length| |q#0@@26|)))) (- (|Seq#Length| |p#0@@38|) 1)) |q#0@@26|) (F2__X__s.__default.mod__F2__X $ly@@325 (|Seq#Take| |p#0@@38| (- (|Seq#Length| |p#0@@38|) 1)) |q#0@@26|)))))) :qid |F2Xsdfy.79:12| :skolemid |2472| :pattern ( (F2__X__s.__default.mod__F2__X ($LS $ly@@325) |p#0@@38| |q#0@@26|)) ))))
(assert  (=> true (forall (($ly@@326 T@U) (|p#0@@39| T@U) (|q#0@@27| T@U) ) (!  (=> (and (and (and (= (type $ly@@326) LayerTypeType) (= (type |p#0@@39|) (SeqType BoxType))) (= (type |q#0@@27|) (SeqType BoxType))) (or (|F2__X__s.__default.mod__F2__X#canCall| (Lit |p#0@@39|) |q#0@@27|) (and (and ($Is |p#0@@39| (TSeq TBool)) ($Is |q#0@@27| (TSeq TBool))) (> (|Seq#Length| |q#0@@27|) 0)))) (and (and (=> (<= (|Seq#Length| (Lit |p#0@@39|)) (- (|Seq#Length| |q#0@@27|) 1)) (|Bits__s.__default.zeroes#canCall| (- (- (|Seq#Length| |q#0@@27|) 1) (|Seq#Length| (Lit |p#0@@39|))))) (=> (< (- (|Seq#Length| |q#0@@27|) 1) (|Seq#Length| (Lit |p#0@@39|))) (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1)))) (and (and (|F2__X__s.__default.shift#canCall| |q#0@@27| (- (|Seq#Length| (Lit |p#0@@39|)) (|Seq#Length| |q#0@@27|))) (|F2__X__s.__default.xor#canCall| (Lit |p#0@@39|) (F2__X__s.__default.shift |q#0@@27| (- (|Seq#Length| (Lit |p#0@@39|)) (|Seq#Length| |q#0@@27|))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Lit |p#0@@39|) (F2__X__s.__default.shift |q#0@@27| (- (|Seq#Length| (Lit |p#0@@39|)) (|Seq#Length| |q#0@@27|)))) (- (|Seq#Length| (Lit |p#0@@39|)) 1)) |q#0@@27|))) (=> (not (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1)) |q#0@@27|))))) (= (F2__X__s.__default.mod__F2__X ($LS $ly@@326) (Lit |p#0@@39|) |q#0@@27|) (ite (<= (|Seq#Length| (Lit |p#0@@39|)) (- (|Seq#Length| |q#0@@27|) 1)) (|Seq#Append| |p#0@@39| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (- (|Seq#Length| |q#0@@27|) 1) (|Seq#Length| (Lit |p#0@@39|))))) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1)))) (F2__X__s.__default.mod__F2__X ($LS $ly@@326) (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Lit |p#0@@39|) (F2__X__s.__default.shift |q#0@@27| (- (|Seq#Length| (Lit |p#0@@39|)) (|Seq#Length| |q#0@@27|)))) (- (|Seq#Length| (Lit |p#0@@39|)) 1)) |q#0@@27|) (F2__X__s.__default.mod__F2__X ($LS $ly@@326) (|Seq#Take| (Lit |p#0@@39|) (- (|Seq#Length| (Lit |p#0@@39|)) 1)) |q#0@@27|)))))) :qid |F2Xsdfy.79:12| :weight 3 :skolemid |2473| :pattern ( (F2__X__s.__default.mod__F2__X ($LS $ly@@326) (Lit |p#0@@39|) |q#0@@27|)) ))))
(assert  (=> true (forall (($ly@@327 T@U) (|p#0@@40| T@U) (|q#0@@28| T@U) ) (!  (=> (and (and (and (= (type $ly@@327) LayerTypeType) (= (type |p#0@@40|) (SeqType BoxType))) (= (type |q#0@@28|) (SeqType BoxType))) (or (|F2__X__s.__default.mod__F2__X#canCall| (Lit |p#0@@40|) (Lit |q#0@@28|)) (and (and ($Is |p#0@@40| (TSeq TBool)) ($Is |q#0@@28| (TSeq TBool))) (> (|Seq#Length| (Lit |q#0@@28|)) 0)))) (and (and (=> (<= (|Seq#Length| (Lit |p#0@@40|)) (- (|Seq#Length| (Lit |q#0@@28|)) 1)) (|Bits__s.__default.zeroes#canCall| (- (- (|Seq#Length| (Lit |q#0@@28|)) 1) (|Seq#Length| (Lit |p#0@@40|))))) (=> (< (- (|Seq#Length| (Lit |q#0@@28|)) 1) (|Seq#Length| (Lit |p#0@@40|))) (and (=> (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1)))) (and (and (|F2__X__s.__default.shift#canCall| (Lit |q#0@@28|) (- (|Seq#Length| (Lit |p#0@@40|)) (|Seq#Length| (Lit |q#0@@28|)))) (|F2__X__s.__default.xor#canCall| (Lit |p#0@@40|) (F2__X__s.__default.shift (Lit |q#0@@28|) (- (|Seq#Length| (Lit |p#0@@40|)) (|Seq#Length| (Lit |q#0@@28|)))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Lit |p#0@@40|) (F2__X__s.__default.shift (Lit |q#0@@28|) (- (|Seq#Length| (Lit |p#0@@40|)) (|Seq#Length| (Lit |q#0@@28|))))) (- (|Seq#Length| (Lit |p#0@@40|)) 1)) (Lit |q#0@@28|)))) (=> (not (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1))))) (|F2__X__s.__default.mod__F2__X#canCall| (|Seq#Take| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1)) (Lit |q#0@@28|)))))) (= (F2__X__s.__default.mod__F2__X ($LS $ly@@327) (Lit |p#0@@40|) (Lit |q#0@@28|)) (ite (<= (|Seq#Length| (Lit |p#0@@40|)) (- (|Seq#Length| (Lit |q#0@@28|)) 1)) (|Seq#Append| |p#0@@40| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (- (|Seq#Length| (Lit |q#0@@28|)) 1) (|Seq#Length| (Lit |p#0@@40|))))) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1)))) (F2__X__s.__default.mod__F2__X ($LS $ly@@327) (|Seq#Take| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Lit |p#0@@40|) (F2__X__s.__default.shift (Lit |q#0@@28|) (- (|Seq#Length| (Lit |p#0@@40|)) (|Seq#Length| (Lit |q#0@@28|))))) (- (|Seq#Length| (Lit |p#0@@40|)) 1)) (Lit |q#0@@28|)) (F2__X__s.__default.mod__F2__X ($LS $ly@@327) (|Seq#Take| (Lit |p#0@@40|) (- (|Seq#Length| (Lit |p#0@@40|)) 1)) (Lit |q#0@@28|))))))) :qid |F2Xsdfy.79:12| :weight 3 :skolemid |2474| :pattern ( (F2__X__s.__default.mod__F2__X ($LS $ly@@327) (Lit |p#0@@40|) (Lit |q#0@@28|))) ))))
(assert (forall ((arg0@@594 T@U) (arg1@@279 T@U) ) (! (= (type (F2__X__s.__default.mm__crc32__u8 arg0@@594 arg1@@279)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__crc32__u8| :pattern ( (F2__X__s.__default.mm__crc32__u8 arg0@@594 arg1@@279)) )))
(assert  (=> true (forall ((|acc#0| T@U) (|b#0@@52| T@U) ) (!  (=> (and (and (= (type |acc#0|) (SeqType BoxType)) (= (type |b#0@@52|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u8#canCall| |acc#0| |b#0@@52|) (and (and ($Is |acc#0| (TSeq TBool)) ($Is |b#0@@52| (TSeq TBool))) (and (= (|Seq#Length| |acc#0|) (LitInt 32)) (= (|Seq#Length| |b#0@@52|) (LitInt 8)))))) ($Is (F2__X__s.__default.mm__crc32__u8 |acc#0| |b#0@@52|) (TSeq TBool))) :qid |F2Xsdfy.94:24| :skolemid |2475| :pattern ( (F2__X__s.__default.mm__crc32__u8 |acc#0| |b#0@@52|)) ))))
(assert (forall ((|acc#0@@0| T@U) (|b#0@@53| T@U) ) (!  (=> (and (and (= (type |acc#0@@0|) (SeqType BoxType)) (= (type |b#0@@53|) (SeqType BoxType))) (and ($Is |acc#0@@0| (TSeq TBool)) ($Is |b#0@@53| (TSeq TBool)))) (= (|F2__X__s.__default.mm__crc32__u8#requires| |acc#0@@0| |b#0@@53|)  (and (= (|Seq#Length| |acc#0@@0|) (LitInt 32)) (= (|Seq#Length| |b#0@@53|) (LitInt 8))))) :qid |F2Xsdfy.94:24| :skolemid |2476| :pattern ( (|F2__X__s.__default.mm__crc32__u8#requires| |acc#0@@0| |b#0@@53|)) )))
(assert (= (type StartFuel_F2_X_s._default.reverse) LayerTypeType))
(assert  (=> true (forall ((|acc#0@@1| T@U) (|b#0@@54| T@U) ) (!  (=> (and (and (= (type |acc#0@@1|) (SeqType BoxType)) (= (type |b#0@@54|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u8#canCall| |acc#0@@1| |b#0@@54|) (and (and ($Is |acc#0@@1| (TSeq TBool)) ($Is |b#0@@54| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@1|) (LitInt 32)) (= (|Seq#Length| |b#0@@54|) (LitInt 8)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| |b#0@@54|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@54|) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| |acc#0@@1|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@54|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@54|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@54|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u8 |acc#0@@1| |b#0@@54|) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@54|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@1|) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.94:24| :skolemid |2477| :pattern ( (F2__X__s.__default.mm__crc32__u8 |acc#0@@1| |b#0@@54|)) ))))
(assert  (=> true (forall ((|acc#0@@2| T@U) (|b#0@@55| T@U) ) (!  (=> (and (and (= (type |acc#0@@2|) (SeqType BoxType)) (= (type |b#0@@55|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u8#canCall| (Lit |acc#0@@2|) (Lit |b#0@@55|)) (and (and ($Is |acc#0@@2| (TSeq TBool)) ($Is |b#0@@55| (TSeq TBool))) (and (= (|Seq#Length| (Lit |acc#0@@2|)) (LitInt 32)) (= (|Seq#Length| (Lit |b#0@@55|)) (LitInt 8)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| (Lit |b#0@@55|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@55|)) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| (Lit |acc#0@@2|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@55|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@55|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@55|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u8 (Lit |acc#0@@2|) (Lit |b#0@@55|)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@55|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@2|)) (LitInt 8))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.94:24| :weight 3 :skolemid |2478| :pattern ( (F2__X__s.__default.mm__crc32__u8 (Lit |acc#0@@2|) (Lit |b#0@@55|))) ))))
(assert  (=> true (forall ((|acc#0@@3| Int) (|b#0@@56| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_crc32_u8#canCall| |acc#0@@3| |b#0@@56|) (and (and (<= (LitInt 0) |acc#0@@3|) (< |acc#0@@3| 4294967296)) (and (<= (LitInt 0) |b#0@@56|) (< |b#0@@56| 256)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_crc32_u8 |acc#0@@3| |b#0@@56|) (LitInt 32)) (F2__X__s.__default.mm__crc32__u8 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |acc#0@@3| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@56| (LitInt 8)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u8 |acc#0@@3| |b#0@@56|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u8 |acc#0@@3| |b#0@@56|) 4294967296)))) :qid |F2Xsdfy.105:95| :skolemid |2479| :pattern ( (F2__X__s.__default.intrinsic_mm_crc32_u8 |acc#0@@3| |b#0@@56|)) ))))
(assert (forall ((|acc#0@@4| Int) (|b#0@@57| Int) ) (!  (=> (and (and (<= (LitInt 0) |acc#0@@4|) (< |acc#0@@4| 4294967296)) (and (<= (LitInt 0) |b#0@@57|) (< |b#0@@57| 256))) (= (|F2__X__s.__default.intrinsic_mm_crc32_u8#requires| |acc#0@@4| |b#0@@57|) true)) :qid |F2Xsdfy.105:95| :skolemid |2480| :pattern ( (|F2__X__s.__default.intrinsic_mm_crc32_u8#requires| |acc#0@@4| |b#0@@57|)) )))
(assert (forall ((arg0@@595 T@U) (arg1@@280 T@U) ) (! (= (type (F2__X__s.__default.mm__crc32__u16 arg0@@595 arg1@@280)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__crc32__u16| :pattern ( (F2__X__s.__default.mm__crc32__u16 arg0@@595 arg1@@280)) )))
(assert  (=> true (forall ((|acc#0@@5| T@U) (|b#0@@58| T@U) ) (!  (=> (and (and (= (type |acc#0@@5|) (SeqType BoxType)) (= (type |b#0@@58|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u16#canCall| |acc#0@@5| |b#0@@58|) (and (and ($Is |acc#0@@5| (TSeq TBool)) ($Is |b#0@@58| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@5|) (LitInt 32)) (= (|Seq#Length| |b#0@@58|) (LitInt 16)))))) ($Is (F2__X__s.__default.mm__crc32__u16 |acc#0@@5| |b#0@@58|) (TSeq TBool))) :qid |F2Xsdfy.113:25| :skolemid |2481| :pattern ( (F2__X__s.__default.mm__crc32__u16 |acc#0@@5| |b#0@@58|)) ))))
(assert (forall ((|acc#0@@6| T@U) (|b#0@@59| T@U) ) (!  (=> (and (and (= (type |acc#0@@6|) (SeqType BoxType)) (= (type |b#0@@59|) (SeqType BoxType))) (and ($Is |acc#0@@6| (TSeq TBool)) ($Is |b#0@@59| (TSeq TBool)))) (= (|F2__X__s.__default.mm__crc32__u16#requires| |acc#0@@6| |b#0@@59|)  (and (= (|Seq#Length| |acc#0@@6|) (LitInt 32)) (= (|Seq#Length| |b#0@@59|) (LitInt 16))))) :qid |F2Xsdfy.113:25| :skolemid |2482| :pattern ( (|F2__X__s.__default.mm__crc32__u16#requires| |acc#0@@6| |b#0@@59|)) )))
(assert  (=> true (forall ((|acc#0@@7| T@U) (|b#0@@60| T@U) ) (!  (=> (and (and (= (type |acc#0@@7|) (SeqType BoxType)) (= (type |b#0@@60|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u16#canCall| |acc#0@@7| |b#0@@60|) (and (and ($Is |acc#0@@7| (TSeq TBool)) ($Is |b#0@@60| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@7|) (LitInt 32)) (= (|Seq#Length| |b#0@@60|) (LitInt 16)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| |b#0@@60|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@60|) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| |acc#0@@7|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@60|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@60|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@60|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u16 |acc#0@@7| |b#0@@60|) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@60|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@7|) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.113:25| :skolemid |2483| :pattern ( (F2__X__s.__default.mm__crc32__u16 |acc#0@@7| |b#0@@60|)) ))))
(assert  (=> true (forall ((|acc#0@@8| T@U) (|b#0@@61| T@U) ) (!  (=> (and (and (= (type |acc#0@@8|) (SeqType BoxType)) (= (type |b#0@@61|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u16#canCall| (Lit |acc#0@@8|) (Lit |b#0@@61|)) (and (and ($Is |acc#0@@8| (TSeq TBool)) ($Is |b#0@@61| (TSeq TBool))) (and (= (|Seq#Length| (Lit |acc#0@@8|)) (LitInt 32)) (= (|Seq#Length| (Lit |b#0@@61|)) (LitInt 16)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| (Lit |b#0@@61|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@61|)) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| (Lit |acc#0@@8|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@61|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@61|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@61|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u16 (Lit |acc#0@@8|) (Lit |b#0@@61|)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@61|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@8|)) (LitInt 16))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.113:25| :weight 3 :skolemid |2484| :pattern ( (F2__X__s.__default.mm__crc32__u16 (Lit |acc#0@@8|) (Lit |b#0@@61|))) ))))
(assert  (=> true (forall ((|acc#0@@9| Int) (|b#0@@62| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_crc32_u16#canCall| |acc#0@@9| |b#0@@62|) (and (and (<= (LitInt 0) |acc#0@@9|) (< |acc#0@@9| 4294967296)) (and (<= (LitInt 0) |b#0@@62|) (< |b#0@@62| 65536)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_crc32_u16 |acc#0@@9| |b#0@@62|) (LitInt 32)) (F2__X__s.__default.mm__crc32__u16 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |acc#0@@9| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@62| (LitInt 16)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u16 |acc#0@@9| |b#0@@62|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u16 |acc#0@@9| |b#0@@62|) 4294967296)))) :qid |F2Xsdfy.124:97| :skolemid |2485| :pattern ( (F2__X__s.__default.intrinsic_mm_crc32_u16 |acc#0@@9| |b#0@@62|)) ))))
(assert (forall ((|acc#0@@10| Int) (|b#0@@63| Int) ) (!  (=> (and (and (<= (LitInt 0) |acc#0@@10|) (< |acc#0@@10| 4294967296)) (and (<= (LitInt 0) |b#0@@63|) (< |b#0@@63| 65536))) (= (|F2__X__s.__default.intrinsic_mm_crc32_u16#requires| |acc#0@@10| |b#0@@63|) true)) :qid |F2Xsdfy.124:97| :skolemid |2486| :pattern ( (|F2__X__s.__default.intrinsic_mm_crc32_u16#requires| |acc#0@@10| |b#0@@63|)) )))
(assert (forall ((arg0@@596 T@U) (arg1@@281 T@U) ) (! (= (type (F2__X__s.__default.mm__crc32__u32 arg0@@596 arg1@@281)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__crc32__u32| :pattern ( (F2__X__s.__default.mm__crc32__u32 arg0@@596 arg1@@281)) )))
(assert  (=> true (forall ((|acc#0@@11| T@U) (|b#0@@64| T@U) ) (!  (=> (and (and (= (type |acc#0@@11|) (SeqType BoxType)) (= (type |b#0@@64|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u32#canCall| |acc#0@@11| |b#0@@64|) (and (and ($Is |acc#0@@11| (TSeq TBool)) ($Is |b#0@@64| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@11|) (LitInt 32)) (= (|Seq#Length| |b#0@@64|) (LitInt 32)))))) ($Is (F2__X__s.__default.mm__crc32__u32 |acc#0@@11| |b#0@@64|) (TSeq TBool))) :qid |F2Xsdfy.132:25| :skolemid |2487| :pattern ( (F2__X__s.__default.mm__crc32__u32 |acc#0@@11| |b#0@@64|)) ))))
(assert (forall ((|acc#0@@12| T@U) (|b#0@@65| T@U) ) (!  (=> (and (and (= (type |acc#0@@12|) (SeqType BoxType)) (= (type |b#0@@65|) (SeqType BoxType))) (and ($Is |acc#0@@12| (TSeq TBool)) ($Is |b#0@@65| (TSeq TBool)))) (= (|F2__X__s.__default.mm__crc32__u32#requires| |acc#0@@12| |b#0@@65|)  (and (= (|Seq#Length| |acc#0@@12|) (LitInt 32)) (= (|Seq#Length| |b#0@@65|) (LitInt 32))))) :qid |F2Xsdfy.132:25| :skolemid |2488| :pattern ( (|F2__X__s.__default.mm__crc32__u32#requires| |acc#0@@12| |b#0@@65|)) )))
(assert  (=> true (forall ((|acc#0@@13| T@U) (|b#0@@66| T@U) ) (!  (=> (and (and (= (type |acc#0@@13|) (SeqType BoxType)) (= (type |b#0@@66|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u32#canCall| |acc#0@@13| |b#0@@66|) (and (and ($Is |acc#0@@13| (TSeq TBool)) ($Is |b#0@@66| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@13|) (LitInt 32)) (= (|Seq#Length| |b#0@@66|) (LitInt 32)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| |b#0@@66|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@66|) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| |acc#0@@13|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@66|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@66|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@66|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u32 |acc#0@@13| |b#0@@66|) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@66|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@13|) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.132:25| :skolemid |2489| :pattern ( (F2__X__s.__default.mm__crc32__u32 |acc#0@@13| |b#0@@66|)) ))))
(assert  (=> true (forall ((|acc#0@@14| T@U) (|b#0@@67| T@U) ) (!  (=> (and (and (= (type |acc#0@@14|) (SeqType BoxType)) (= (type |b#0@@67|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u32#canCall| (Lit |acc#0@@14|) (Lit |b#0@@67|)) (and (and ($Is |acc#0@@14| (TSeq TBool)) ($Is |b#0@@67| (TSeq TBool))) (and (= (|Seq#Length| (Lit |acc#0@@14|)) (LitInt 32)) (= (|Seq#Length| (Lit |b#0@@67|)) (LitInt 32)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| (Lit |b#0@@67|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@67|)) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| (Lit |acc#0@@14|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@67|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@67|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@67|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u32 (Lit |acc#0@@14|) (Lit |b#0@@67|)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@67|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@14|)) (LitInt 32))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.132:25| :weight 3 :skolemid |2490| :pattern ( (F2__X__s.__default.mm__crc32__u32 (Lit |acc#0@@14|) (Lit |b#0@@67|))) ))))
(assert  (=> true (forall ((|acc#0@@15| Int) (|b#0@@68| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_crc32_u32#canCall| |acc#0@@15| |b#0@@68|) (and (and (<= (LitInt 0) |acc#0@@15|) (< |acc#0@@15| 4294967296)) (and (<= (LitInt 0) |b#0@@68|) (< |b#0@@68| 4294967296)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_crc32_u32 |acc#0@@15| |b#0@@68|) (LitInt 32)) (F2__X__s.__default.mm__crc32__u32 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |acc#0@@15| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@68| (LitInt 32)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u32 |acc#0@@15| |b#0@@68|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u32 |acc#0@@15| |b#0@@68|) 4294967296)))) :qid |F2Xsdfy.143:97| :skolemid |2491| :pattern ( (F2__X__s.__default.intrinsic_mm_crc32_u32 |acc#0@@15| |b#0@@68|)) ))))
(assert (forall ((|acc#0@@16| Int) (|b#0@@69| Int) ) (!  (=> (and (and (<= (LitInt 0) |acc#0@@16|) (< |acc#0@@16| 4294967296)) (and (<= (LitInt 0) |b#0@@69|) (< |b#0@@69| 4294967296))) (= (|F2__X__s.__default.intrinsic_mm_crc32_u32#requires| |acc#0@@16| |b#0@@69|) true)) :qid |F2Xsdfy.143:97| :skolemid |2492| :pattern ( (|F2__X__s.__default.intrinsic_mm_crc32_u32#requires| |acc#0@@16| |b#0@@69|)) )))
(assert (forall ((arg0@@597 T@U) (arg1@@282 T@U) (arg2@@163 T@U) ) (! (= (type (F2__X__s.__default.mm__crc32__u64 arg0@@597 arg1@@282 arg2@@163)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__crc32__u64| :pattern ( (F2__X__s.__default.mm__crc32__u64 arg0@@597 arg1@@282 arg2@@163)) )))
(assert (forall (($ly@@328 T@U) (|acc#0@@17| T@U) (|b#0@@70| T@U) ) (!  (=> (and (and (= (type $ly@@328) LayerTypeType) (= (type |acc#0@@17|) (SeqType BoxType))) (= (type |b#0@@70|) (SeqType BoxType))) (= (F2__X__s.__default.mm__crc32__u64 ($LS $ly@@328) |acc#0@@17| |b#0@@70|) (F2__X__s.__default.mm__crc32__u64 $ly@@328 |acc#0@@17| |b#0@@70|))) :qid |F2Xsdfy.151:12| :skolemid |2493| :pattern ( (F2__X__s.__default.mm__crc32__u64 ($LS $ly@@328) |acc#0@@17| |b#0@@70|)) )))
(assert (forall (($ly@@329 T@U) (|acc#0@@18| T@U) (|b#0@@71| T@U) ) (!  (=> (and (and (= (type $ly@@329) LayerTypeType) (= (type |acc#0@@18|) (SeqType BoxType))) (= (type |b#0@@71|) (SeqType BoxType))) (= (F2__X__s.__default.mm__crc32__u64 $ly@@329 |acc#0@@18| |b#0@@71|) (F2__X__s.__default.mm__crc32__u64 $LZ |acc#0@@18| |b#0@@71|))) :qid |F2Xsdfy.151:12| :skolemid |2494| :pattern ( (F2__X__s.__default.mm__crc32__u64 (AsFuelBottom $ly@@329) |acc#0@@18| |b#0@@71|)) )))
(assert  (=> true (forall (($ly@@330 T@U) (|acc#0@@19| T@U) (|b#0@@72| T@U) ) (!  (=> (and (and (and (= (type $ly@@330) LayerTypeType) (= (type |acc#0@@19|) (SeqType BoxType))) (= (type |b#0@@72|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u64#canCall| |acc#0@@19| |b#0@@72|) (and (and ($Is |acc#0@@19| (TSeq TBool)) ($Is |b#0@@72| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@19|) (LitInt 32)) (= (|Seq#Length| |b#0@@72|) (LitInt 64)))))) ($Is (F2__X__s.__default.mm__crc32__u64 $ly@@330 |acc#0@@19| |b#0@@72|) (TSeq TBool))) :qid |F2Xsdfy.151:12| :skolemid |2495| :pattern ( (F2__X__s.__default.mm__crc32__u64 $ly@@330 |acc#0@@19| |b#0@@72|)) ))))
(assert (forall (($ly@@331 T@U) (|acc#0@@20| T@U) (|b#0@@73| T@U) ) (!  (=> (and (and (and (= (type $ly@@331) LayerTypeType) (= (type |acc#0@@20|) (SeqType BoxType))) (= (type |b#0@@73|) (SeqType BoxType))) (and ($Is |acc#0@@20| (TSeq TBool)) ($Is |b#0@@73| (TSeq TBool)))) (= (|F2__X__s.__default.mm__crc32__u64#requires| $ly@@331 |acc#0@@20| |b#0@@73|)  (and (= (|Seq#Length| |acc#0@@20|) (LitInt 32)) (= (|Seq#Length| |b#0@@73|) (LitInt 64))))) :qid |F2Xsdfy.151:12| :skolemid |2496| :pattern ( (|F2__X__s.__default.mm__crc32__u64#requires| $ly@@331 |acc#0@@20| |b#0@@73|)) )))
(assert  (=> true (forall (($ly@@332 T@U) (|acc#0@@21| T@U) (|b#0@@74| T@U) ) (!  (=> (and (and (and (= (type $ly@@332) LayerTypeType) (= (type |acc#0@@21|) (SeqType BoxType))) (= (type |b#0@@74|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u64#canCall| |acc#0@@21| |b#0@@74|) (and (and ($Is |acc#0@@21| (TSeq TBool)) ($Is |b#0@@74| (TSeq TBool))) (and (= (|Seq#Length| |acc#0@@21|) (LitInt 32)) (= (|Seq#Length| |b#0@@74|) (LitInt 64)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| |b#0@@74|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@74|) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| |acc#0@@21|) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@21|) (LitInt 64)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@74|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@21|) (LitInt 64)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@74|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@21|) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@74|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@21|) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u64 ($LS $ly@@332) |acc#0@@21| |b#0@@74|) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |b#0@@74|) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |acc#0@@21|) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.151:12| :skolemid |2497| :pattern ( (F2__X__s.__default.mm__crc32__u64 ($LS $ly@@332) |acc#0@@21| |b#0@@74|)) ))))
(assert  (=> true (forall (($ly@@333 T@U) (|acc#0@@22| T@U) (|b#0@@75| T@U) ) (!  (=> (and (and (and (= (type $ly@@333) LayerTypeType) (= (type |acc#0@@22|) (SeqType BoxType))) (= (type |b#0@@75|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__crc32__u64#canCall| (Lit |acc#0@@22|) (Lit |b#0@@75|)) (and (and ($Is |acc#0@@22| (TSeq TBool)) ($Is |b#0@@75| (TSeq TBool))) (and (= (|Seq#Length| (Lit |acc#0@@22|)) (LitInt 32)) (= (|Seq#Length| (Lit |b#0@@75|)) (LitInt 64)))))) (and (and (and (and (and (and (and (|F2__X__s.__default.reverse#canCall| (Lit |b#0@@75|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@75|)) (LitInt 32))) (and (|F2__X__s.__default.reverse#canCall| (Lit |acc#0@@22|)) (|F2__X__s.__default.shift#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@22|)) (LitInt 64)))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@75|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@22|)) (LitInt 64)))) (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33))) (|F2__X__s.__default.mod__F2__X#canCall| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@75|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@22|)) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (|F2__X__s.__default.reverse#canCall| (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@75|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@22|)) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (= (F2__X__s.__default.mm__crc32__u64 ($LS $ly@@333) (Lit |acc#0@@22|) (Lit |b#0@@75|)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (F2__X__s.__default.mod__F2__X ($LS $LZ) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |b#0@@75|)) (LitInt 32)) (F2__X__s.__default.shift (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit |acc#0@@22|)) (LitInt 64))) (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))))) :qid |F2Xsdfy.151:12| :weight 3 :skolemid |2498| :pattern ( (F2__X__s.__default.mm__crc32__u64 ($LS $ly@@333) (Lit |acc#0@@22|) (Lit |b#0@@75|))) ))))
(assert (= (type StartFuel_F2_X_s._default.mm_crc32_u64) LayerTypeType))
(assert  (=> true (forall ((|acc#0@@23| Int) (|b#0@@76| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_crc32_u64#canCall| |acc#0@@23| |b#0@@76|) (and (and (<= (LitInt 0) |acc#0@@23|) (< |acc#0@@23| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@76|) (< |b#0@@76| 18446744073709551616)))) (and (and (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@23| |b#0@@76|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@23| |b#0@@76|) 4294967296)) (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@23| |b#0@@76|) (LitInt 32)) (F2__X__s.__default.mm__crc32__u64 StartFuel_F2_X_s._default.mm_crc32_u64 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |acc#0@@23| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@76| (LitInt 64))))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@23| |b#0@@76|)) (< (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@23| |b#0@@76|) 18446744073709551616)))) :qid |F2Xsdfy.163:97| :skolemid |2499| :pattern ( (F2__X__s.__default.intrinsic_mm_crc32_u64 |acc#0@@23| |b#0@@76|)) ))))
(assert (forall ((|acc#0@@24| Int) (|b#0@@77| Int) ) (!  (=> (and (and (<= (LitInt 0) |acc#0@@24|) (< |acc#0@@24| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@77|) (< |b#0@@77| 18446744073709551616))) (= (|F2__X__s.__default.intrinsic_mm_crc32_u64#requires| |acc#0@@24| |b#0@@77|) true)) :qid |F2Xsdfy.163:97| :skolemid |2500| :pattern ( (|F2__X__s.__default.intrinsic_mm_crc32_u64#requires| |acc#0@@24| |b#0@@77|)) )))
(assert (forall ((arg0@@598 T@U) (arg1@@283 T@U) ) (! (= (type (F2__X__s.__default.mm__clmulepi64__si128__0 arg0@@598 arg1@@283)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__clmulepi64__si128__0| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__0 arg0@@598 arg1@@283)) )))
(assert  (=> true (forall ((|a#0@@100| T@U) (|b#0@@78| T@U) ) (!  (=> (and (and (= (type |a#0@@100|) (SeqType BoxType)) (= (type |b#0@@78|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__0#canCall| |a#0@@100| |b#0@@78|) (and (and ($Is |a#0@@100| (TSeq TBool)) ($Is |b#0@@78| (TSeq TBool))) (and (= (|Seq#Length| |a#0@@100|) (LitInt 128)) (= (|Seq#Length| |b#0@@78|) (LitInt 128)))))) ($Is (F2__X__s.__default.mm__clmulepi64__si128__0 |a#0@@100| |b#0@@78|) (TSeq TBool))) :qid |F2Xsdfy.174:34| :skolemid |2501| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__0 |a#0@@100| |b#0@@78|)) ))))
(assert (forall ((|a#0@@101| T@U) (|b#0@@79| T@U) ) (!  (=> (and (and (= (type |a#0@@101|) (SeqType BoxType)) (= (type |b#0@@79|) (SeqType BoxType))) (and ($Is |a#0@@101| (TSeq TBool)) ($Is |b#0@@79| (TSeq TBool)))) (= (|F2__X__s.__default.mm__clmulepi64__si128__0#requires| |a#0@@101| |b#0@@79|)  (and (= (|Seq#Length| |a#0@@101|) (LitInt 128)) (= (|Seq#Length| |b#0@@79|) (LitInt 128))))) :qid |F2Xsdfy.174:34| :skolemid |2502| :pattern ( (|F2__X__s.__default.mm__clmulepi64__si128__0#requires| |a#0@@101| |b#0@@79|)) )))
(assert (= (type StartFuel_F2_X_s._default.mul_F2_X) LayerTypeType))
(assert  (=> true (forall ((|a#0@@102| T@U) (|b#0@@80| T@U) ) (!  (=> (and (and (= (type |a#0@@102|) (SeqType BoxType)) (= (type |b#0@@80|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__0#canCall| |a#0@@102| |b#0@@80|) (and (and ($Is |a#0@@102| (TSeq TBool)) ($Is |b#0@@80| (TSeq TBool))) (and (= (|Seq#Length| |a#0@@102|) (LitInt 128)) (= (|Seq#Length| |b#0@@80|) (LitInt 128)))))) (and (let ((|tmp1#0| (|Seq#Drop| (|Seq#Take| |a#0@@102| (LitInt 64)) (LitInt 0)))) (let ((|tmp2#0| (|Seq#Drop| (|Seq#Take| |b#0@@80| (LitInt 64)) (LitInt 0)))) (|F2__X__s.__default.mul__F2__X#canCall| |tmp1#0| |tmp2#0|))) (= (F2__X__s.__default.mm__clmulepi64__si128__0 |a#0@@102| |b#0@@80|) (let ((|tmp1#0@@0| (|Seq#Drop| (|Seq#Take| |a#0@@102| (LitInt 64)) (LitInt 0)))) (let ((|tmp2#0@@0| (|Seq#Drop| (|Seq#Take| |b#0@@80| (LitInt 64)) (LitInt 0)))) (F2__X__s.__default.mul__F2__X StartFuel_F2_X_s._default.mul_F2_X |tmp1#0@@0| |tmp2#0@@0|)))))) :qid |F2Xsdfy.174:34| :skolemid |2503| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__0 |a#0@@102| |b#0@@80|)) ))))
(assert  (=> true (forall ((|a#0@@103| T@U) (|b#0@@81| T@U) ) (!  (=> (and (and (= (type |a#0@@103|) (SeqType BoxType)) (= (type |b#0@@81|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__0#canCall| (Lit |a#0@@103|) (Lit |b#0@@81|)) (and (and ($Is |a#0@@103| (TSeq TBool)) ($Is |b#0@@81| (TSeq TBool))) (and (= (|Seq#Length| (Lit |a#0@@103|)) (LitInt 128)) (= (|Seq#Length| (Lit |b#0@@81|)) (LitInt 128)))))) (and (let ((|tmp1#1| (Lit (|Seq#Drop| (|Seq#Take| (Lit |a#0@@103|) (LitInt 64)) (LitInt 0))))) (let ((|tmp2#1| (Lit (|Seq#Drop| (|Seq#Take| (Lit |b#0@@81|) (LitInt 64)) (LitInt 0))))) (|F2__X__s.__default.mul__F2__X#canCall| |tmp1#1| |tmp2#1|))) (= (F2__X__s.__default.mm__clmulepi64__si128__0 (Lit |a#0@@103|) (Lit |b#0@@81|)) (let ((|tmp1#1@@0| (Lit (|Seq#Drop| (|Seq#Take| (Lit |a#0@@103|) (LitInt 64)) (LitInt 0))))) (let ((|tmp2#1@@0| (Lit (|Seq#Drop| (|Seq#Take| (Lit |b#0@@81|) (LitInt 64)) (LitInt 0))))) (F2__X__s.__default.mul__F2__X StartFuel_F2_X_s._default.mul_F2_X |tmp1#1@@0| |tmp2#1@@0|)))))) :qid |F2Xsdfy.174:34| :weight 3 :skolemid |2504| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__0 (Lit |a#0@@103|) (Lit |b#0@@81|))) ))))
(assert  (=> true (forall ((|a#0@@104| Int) (|b#0@@82| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#canCall| |a#0@@104| |b#0@@82|) (and (and (<= (LitInt 0) |a#0@@104|) (< |a#0@@104| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@82|) (< |b#0@@82| 340282366920938463463374607431768211456)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 |a#0@@104| |b#0@@82|) (LitInt 128)) (F2__X__s.__default.mm__clmulepi64__si128__0 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@104| (LitInt 128)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@82| (LitInt 128)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 |a#0@@104| |b#0@@82|)) (< (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 |a#0@@104| |b#0@@82|) 340282366920938463463374607431768211456)))) :qid |F2Xsdfy.183:115| :skolemid |2505| :pattern ( (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0 |a#0@@104| |b#0@@82|)) ))))
(assert (forall ((|a#0@@105| Int) (|b#0@@83| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@105|) (< |a#0@@105| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@83|) (< |b#0@@83| 340282366920938463463374607431768211456))) (= (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#requires| |a#0@@105| |b#0@@83|) true)) :qid |F2Xsdfy.183:115| :skolemid |2506| :pattern ( (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_0#requires| |a#0@@105| |b#0@@83|)) )))
(assert (forall ((arg0@@599 T@U) (arg1@@284 T@U) ) (! (= (type (F2__X__s.__default.mm__clmulepi64__si128__16 arg0@@599 arg1@@284)) (SeqType BoxType)) :qid |funType:F2__X__s.__default.mm__clmulepi64__si128__16| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__16 arg0@@599 arg1@@284)) )))
(assert  (=> true (forall ((|a#0@@106| T@U) (|b#0@@84| T@U) ) (!  (=> (and (and (= (type |a#0@@106|) (SeqType BoxType)) (= (type |b#0@@84|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__16#canCall| |a#0@@106| |b#0@@84|) (and (and ($Is |a#0@@106| (TSeq TBool)) ($Is |b#0@@84| (TSeq TBool))) (and (= (|Seq#Length| |a#0@@106|) (LitInt 128)) (= (|Seq#Length| |b#0@@84|) (LitInt 128)))))) ($Is (F2__X__s.__default.mm__clmulepi64__si128__16 |a#0@@106| |b#0@@84|) (TSeq TBool))) :qid |F2Xsdfy.190:35| :skolemid |2507| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__16 |a#0@@106| |b#0@@84|)) ))))
(assert (forall ((|a#0@@107| T@U) (|b#0@@85| T@U) ) (!  (=> (and (and (= (type |a#0@@107|) (SeqType BoxType)) (= (type |b#0@@85|) (SeqType BoxType))) (and ($Is |a#0@@107| (TSeq TBool)) ($Is |b#0@@85| (TSeq TBool)))) (= (|F2__X__s.__default.mm__clmulepi64__si128__16#requires| |a#0@@107| |b#0@@85|)  (and (= (|Seq#Length| |a#0@@107|) (LitInt 128)) (= (|Seq#Length| |b#0@@85|) (LitInt 128))))) :qid |F2Xsdfy.190:35| :skolemid |2508| :pattern ( (|F2__X__s.__default.mm__clmulepi64__si128__16#requires| |a#0@@107| |b#0@@85|)) )))
(assert  (=> true (forall ((|a#0@@108| T@U) (|b#0@@86| T@U) ) (!  (=> (and (and (= (type |a#0@@108|) (SeqType BoxType)) (= (type |b#0@@86|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__16#canCall| |a#0@@108| |b#0@@86|) (and (and ($Is |a#0@@108| (TSeq TBool)) ($Is |b#0@@86| (TSeq TBool))) (and (= (|Seq#Length| |a#0@@108|) (LitInt 128)) (= (|Seq#Length| |b#0@@86|) (LitInt 128)))))) (and (let ((|tmp1#0@@1| (|Seq#Drop| (|Seq#Take| |a#0@@108| (LitInt 64)) (LitInt 0)))) (let ((|tmp2#0@@1| (|Seq#Drop| (|Seq#Take| |b#0@@86| (LitInt 128)) (LitInt 64)))) (|F2__X__s.__default.mul__F2__X#canCall| |tmp1#0@@1| |tmp2#0@@1|))) (= (F2__X__s.__default.mm__clmulepi64__si128__16 |a#0@@108| |b#0@@86|) (let ((|tmp1#0@@2| (|Seq#Drop| (|Seq#Take| |a#0@@108| (LitInt 64)) (LitInt 0)))) (let ((|tmp2#0@@2| (|Seq#Drop| (|Seq#Take| |b#0@@86| (LitInt 128)) (LitInt 64)))) (F2__X__s.__default.mul__F2__X StartFuel_F2_X_s._default.mul_F2_X |tmp1#0@@2| |tmp2#0@@2|)))))) :qid |F2Xsdfy.190:35| :skolemid |2509| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__16 |a#0@@108| |b#0@@86|)) ))))
(assert  (=> true (forall ((|a#0@@109| T@U) (|b#0@@87| T@U) ) (!  (=> (and (and (= (type |a#0@@109|) (SeqType BoxType)) (= (type |b#0@@87|) (SeqType BoxType))) (or (|F2__X__s.__default.mm__clmulepi64__si128__16#canCall| (Lit |a#0@@109|) (Lit |b#0@@87|)) (and (and ($Is |a#0@@109| (TSeq TBool)) ($Is |b#0@@87| (TSeq TBool))) (and (= (|Seq#Length| (Lit |a#0@@109|)) (LitInt 128)) (= (|Seq#Length| (Lit |b#0@@87|)) (LitInt 128)))))) (and (let ((|tmp1#1@@1| (Lit (|Seq#Drop| (|Seq#Take| (Lit |a#0@@109|) (LitInt 64)) (LitInt 0))))) (let ((|tmp2#1@@1| (Lit (|Seq#Drop| (|Seq#Take| (Lit |b#0@@87|) (LitInt 128)) (LitInt 64))))) (|F2__X__s.__default.mul__F2__X#canCall| |tmp1#1@@1| |tmp2#1@@1|))) (= (F2__X__s.__default.mm__clmulepi64__si128__16 (Lit |a#0@@109|) (Lit |b#0@@87|)) (let ((|tmp1#1@@2| (Lit (|Seq#Drop| (|Seq#Take| (Lit |a#0@@109|) (LitInt 64)) (LitInt 0))))) (let ((|tmp2#1@@2| (Lit (|Seq#Drop| (|Seq#Take| (Lit |b#0@@87|) (LitInt 128)) (LitInt 64))))) (F2__X__s.__default.mul__F2__X StartFuel_F2_X_s._default.mul_F2_X |tmp1#1@@2| |tmp2#1@@2|)))))) :qid |F2Xsdfy.190:35| :weight 3 :skolemid |2510| :pattern ( (F2__X__s.__default.mm__clmulepi64__si128__16 (Lit |a#0@@109|) (Lit |b#0@@87|))) ))))
(assert  (=> true (forall ((|a#0@@110| Int) (|b#0@@88| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#canCall| |a#0@@110| |b#0@@88|) (and (and (<= (LitInt 0) |a#0@@110|) (< |a#0@@110| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@88|) (< |b#0@@88| 340282366920938463463374607431768211456)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 |a#0@@110| |b#0@@88|) (LitInt 128)) (F2__X__s.__default.mm__clmulepi64__si128__16 (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@110| (LitInt 128)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@88| (LitInt 128)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 |a#0@@110| |b#0@@88|)) (< (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 |a#0@@110| |b#0@@88|) 340282366920938463463374607431768211456)))) :qid |F2Xsdfy.199:117| :skolemid |2511| :pattern ( (F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16 |a#0@@110| |b#0@@88|)) ))))
(assert (forall ((|a#0@@111| Int) (|b#0@@89| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@111|) (< |a#0@@111| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@89|) (< |b#0@@89| 340282366920938463463374607431768211456))) (= (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#requires| |a#0@@111| |b#0@@89|) true)) :qid |F2Xsdfy.199:117| :skolemid |2512| :pattern ( (|F2__X__s.__default.intrinsic_mm_clmulepi64_si128_16#requires| |a#0@@111| |b#0@@89|)) )))
(assert  (=> true (forall ((|a#0@@112| Int) (|b#0@@90| Int) ) (!  (=> (or (|F2__X__s.__default.intrinsic_mm_xor_si128#canCall| |a#0@@112| |b#0@@90|) (and (and (<= (LitInt 0) |a#0@@112|) (< |a#0@@112| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@90|) (< |b#0@@90| 340282366920938463463374607431768211456)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.intrinsic_mm_xor_si128 |a#0@@112| |b#0@@90|) (LitInt 128)) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@112| (LitInt 128)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@90| (LitInt 128)))) (and (<= (LitInt 0) (F2__X__s.__default.intrinsic_mm_xor_si128 |a#0@@112| |b#0@@90|)) (< (F2__X__s.__default.intrinsic_mm_xor_si128 |a#0@@112| |b#0@@90|) 340282366920938463463374607431768211456)))) :qid |F2Xsdfy.206:97| :skolemid |2513| :pattern ( (F2__X__s.__default.intrinsic_mm_xor_si128 |a#0@@112| |b#0@@90|)) ))))
(assert (forall ((|a#0@@113| Int) (|b#0@@91| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@113|) (< |a#0@@113| 340282366920938463463374607431768211456)) (and (<= (LitInt 0) |b#0@@91|) (< |b#0@@91| 340282366920938463463374607431768211456))) (= (|F2__X__s.__default.intrinsic_mm_xor_si128#requires| |a#0@@113| |b#0@@91|) true)) :qid |F2Xsdfy.206:97| :skolemid |2514| :pattern ( (|F2__X__s.__default.intrinsic_mm_xor_si128#requires| |a#0@@113| |b#0@@91|)) )))
(assert  (=> true (forall ((|a#0@@114| Int) (|b#0@@92| Int) ) (!  (=> (or (|F2__X__s.__default.bitxor32#canCall| |a#0@@114| |b#0@@92|) (and (and (<= (LitInt 0) |a#0@@114|) (< |a#0@@114| 4294967296)) (and (<= (LitInt 0) |b#0@@92|) (< |b#0@@92| 4294967296)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.bitxor32 |a#0@@114| |b#0@@92|) (LitInt 32)) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@114| (LitInt 32)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@92| (LitInt 32)))) (and (<= (LitInt 0) (F2__X__s.__default.bitxor32 |a#0@@114| |b#0@@92|)) (< (F2__X__s.__default.bitxor32 |a#0@@114| |b#0@@92|) 4294967296)))) :qid |F2Xsdfy.211:68| :skolemid |2515| :pattern ( (F2__X__s.__default.bitxor32 |a#0@@114| |b#0@@92|)) ))))
(assert (forall ((|a#0@@115| Int) (|b#0@@93| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@115|) (< |a#0@@115| 4294967296)) (and (<= (LitInt 0) |b#0@@93|) (< |b#0@@93| 4294967296))) (= (|F2__X__s.__default.bitxor32#requires| |a#0@@115| |b#0@@93|) true)) :qid |F2Xsdfy.211:68| :skolemid |2516| :pattern ( (|F2__X__s.__default.bitxor32#requires| |a#0@@115| |b#0@@93|)) )))
(assert  (=> true (forall ((|a#0@@116| Int) (|b#0@@94| Int) ) (!  (=> (or (|F2__X__s.__default.bitxor64#canCall| |a#0@@116| |b#0@@94|) (and (and (<= (LitInt 0) |a#0@@116|) (< |a#0@@116| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@94|) (< |b#0@@94| 18446744073709551616)))) (and (|Seq#Equal| (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (F2__X__s.__default.bitxor64 |a#0@@116| |b#0@@94|) (LitInt 64)) (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |a#0@@116| (LitInt 64)) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int |b#0@@94| (LitInt 64)))) (and (<= (LitInt 0) (F2__X__s.__default.bitxor64 |a#0@@116| |b#0@@94|)) (< (F2__X__s.__default.bitxor64 |a#0@@116| |b#0@@94|) 18446744073709551616)))) :qid |F2Xsdfy.215:68| :skolemid |2517| :pattern ( (F2__X__s.__default.bitxor64 |a#0@@116| |b#0@@94|)) ))))
(assert (forall ((|a#0@@117| Int) (|b#0@@95| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@117|) (< |a#0@@117| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@95|) (< |b#0@@95| 18446744073709551616))) (= (|F2__X__s.__default.bitxor64#requires| |a#0@@117| |b#0@@95|) true)) :qid |F2Xsdfy.215:68| :skolemid |2518| :pattern ( (|F2__X__s.__default.bitxor64#requires| |a#0@@117| |b#0@@95|)) )))
(assert (= (type Tclass.CRC32__C.__default) TyType))
(assert (= (Tag Tclass.CRC32__C.__default) Tagclass.CRC32__C.__default))
(assert (= (TagFamily Tclass.CRC32__C.__default) tytagFamily$_default))
(assert (forall (($o@@50 T@U) ) (!  (=> (= (type $o@@50) refType) (= ($Is $o@@50 Tclass.CRC32__C.__default)  (or (= $o@@50 null) (= (dtype $o@@50) Tclass.CRC32__C.__default)))) :qid |unknown.0:0| :skolemid |2519| :pattern ( ($Is $o@@50 Tclass.CRC32__C.__default)) )))
(assert (forall (($o@@51 T@U) ($h@@144 T@U) ) (!  (=> (and (= (type $o@@51) refType) (= (type $h@@144) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@51 Tclass.CRC32__C.__default $h@@144)  (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@144 $o@@51) alloc))))) :qid |unknown.0:0| :skolemid |2520| :pattern ( ($IsAlloc $o@@51 Tclass.CRC32__C.__default $h@@144)) )))
(assert (forall ((arg0@@600 T@U) (arg1@@285 T@U) ) (! (= (type (CRC32__C.__default.bits__of__bytes arg0@@600 arg1@@285)) (SeqType BoxType)) :qid |funType:CRC32__C.__default.bits__of__bytes| :pattern ( (CRC32__C.__default.bits__of__bytes arg0@@600 arg1@@285)) )))
(assert (forall (($ly@@334 T@U) (|s#0@@130| T@U) ) (!  (=> (and (= (type $ly@@334) LayerTypeType) (= (type |s#0@@130|) (SeqType BoxType))) (= (CRC32__C.__default.bits__of__bytes ($LS $ly@@334) |s#0@@130|) (CRC32__C.__default.bits__of__bytes $ly@@334 |s#0@@130|))) :qid |CRC32Csdfy.25:12| :skolemid |2521| :pattern ( (CRC32__C.__default.bits__of__bytes ($LS $ly@@334) |s#0@@130|)) )))
(assert (forall (($ly@@335 T@U) (|s#0@@131| T@U) ) (!  (=> (and (= (type $ly@@335) LayerTypeType) (= (type |s#0@@131|) (SeqType BoxType))) (= (CRC32__C.__default.bits__of__bytes $ly@@335 |s#0@@131|) (CRC32__C.__default.bits__of__bytes $LZ |s#0@@131|))) :qid |CRC32Csdfy.25:12| :skolemid |2522| :pattern ( (CRC32__C.__default.bits__of__bytes (AsFuelBottom $ly@@335) |s#0@@131|)) )))
(assert  (=> true (forall (($ly@@336 T@U) (|s#0@@132| T@U) ) (!  (=> (and (and (= (type $ly@@336) LayerTypeType) (= (type |s#0@@132|) (SeqType BoxType))) (or (|CRC32__C.__default.bits__of__bytes#canCall| |s#0@@132|) ($Is |s#0@@132| (TSeq Tclass.NativeTypes.byte)))) (and (= (|Seq#Length| (CRC32__C.__default.bits__of__bytes $ly@@336 |s#0@@132|)) (Mul (LitInt 8) (|Seq#Length| |s#0@@132|))) ($Is (CRC32__C.__default.bits__of__bytes $ly@@336 |s#0@@132|) (TSeq TBool)))) :qid |CRC32Csdfy.25:12| :skolemid |2523| :pattern ( (CRC32__C.__default.bits__of__bytes $ly@@336 |s#0@@132|)) ))))
(assert (forall (($ly@@337 T@U) (|s#0@@133| T@U) ) (!  (=> (and (and (= (type $ly@@337) LayerTypeType) (= (type |s#0@@133|) (SeqType BoxType))) ($Is |s#0@@133| (TSeq Tclass.NativeTypes.byte))) (= (|CRC32__C.__default.bits__of__bytes#requires| $ly@@337 |s#0@@133|) true)) :qid |CRC32Csdfy.25:12| :skolemid |2524| :pattern ( (|CRC32__C.__default.bits__of__bytes#requires| $ly@@337 |s#0@@133|)) )))
(assert  (=> true (forall (($ly@@338 T@U) (|s#0@@134| T@U) ) (!  (=> (and (and (= (type $ly@@338) LayerTypeType) (= (type |s#0@@134|) (SeqType BoxType))) (or (|CRC32__C.__default.bits__of__bytes#canCall| |s#0@@134|) ($Is |s#0@@134| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (= (|Seq#Length| |s#0@@134|) (LitInt 0))) (and (|CRC32__C.__default.bits__of__bytes#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@134| (- (|Seq#Length| |s#0@@134|) 1)) (LitInt 0))) (|Bits__s.__default.bits__of__int#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@134| (- (|Seq#Length| |s#0@@134|) 1)))) (LitInt 8)))) (= (CRC32__C.__default.bits__of__bytes ($LS $ly@@338) |s#0@@134|) (ite (= (|Seq#Length| |s#0@@134|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (CRC32__C.__default.bits__of__bytes $ly@@338 (|Seq#Drop| (|Seq#Take| |s#0@@134| (- (|Seq#Length| |s#0@@134|) 1)) (LitInt 0))) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (U_2_int ($Unbox intType (|Seq#Index| |s#0@@134| (- (|Seq#Length| |s#0@@134|) 1)))) (LitInt 8))))))) :qid |CRC32Csdfy.25:12| :skolemid |2525| :pattern ( (CRC32__C.__default.bits__of__bytes ($LS $ly@@338) |s#0@@134|)) ))))
(assert  (=> true (forall (($ly@@339 T@U) (|s#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@339) LayerTypeType) (= (type |s#0@@135|) (SeqType BoxType))) (or (|CRC32__C.__default.bits__of__bytes#canCall| (Lit |s#0@@135|)) ($Is |s#0@@135| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@135|)) (LitInt 0))) (and (|CRC32__C.__default.bits__of__bytes#canCall| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@135|) (- (|Seq#Length| (Lit |s#0@@135|)) 1)) (LitInt 0))) (|Bits__s.__default.bits__of__int#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@135|) (- (|Seq#Length| (Lit |s#0@@135|)) 1)))) (LitInt 8)))) (= (CRC32__C.__default.bits__of__bytes ($LS $ly@@339) (Lit |s#0@@135|)) (ite (= (|Seq#Length| (Lit |s#0@@135|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (CRC32__C.__default.bits__of__bytes ($LS $ly@@339) (|Seq#Drop| (|Seq#Take| (Lit |s#0@@135|) (- (|Seq#Length| (Lit |s#0@@135|)) 1)) (LitInt 0))) (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@135|) (- (|Seq#Length| (Lit |s#0@@135|)) 1)))) (LitInt 8))))))) :qid |CRC32Csdfy.25:12| :weight 3 :skolemid |2526| :pattern ( (CRC32__C.__default.bits__of__bytes ($LS $ly@@339) (Lit |s#0@@135|))) ))))
(assert  (=> true (forall ((|m#0@@16| T@U) ) (!  (=> (and (= (type |m#0@@16|) (SeqType BoxType)) (or (|CRC32__C.__default.byte__of__bits#canCall| |m#0@@16|) (and ($Is |m#0@@16| (TSeq TBool)) (= (|Seq#Length| |m#0@@16|) (LitInt 8))))) (and (<= (LitInt 0) (CRC32__C.__default.byte__of__bits |m#0@@16|)) (< (CRC32__C.__default.byte__of__bits |m#0@@16|) 256))) :qid |CRC32Csdfy.34:25| :skolemid |2527| :pattern ( (CRC32__C.__default.byte__of__bits |m#0@@16|)) ))))
(assert (forall ((|m#0@@17| T@U) ) (!  (=> (and (= (type |m#0@@17|) (SeqType BoxType)) ($Is |m#0@@17| (TSeq TBool))) (= (|CRC32__C.__default.byte__of__bits#requires| |m#0@@17|) (= (|Seq#Length| |m#0@@17|) (LitInt 8)))) :qid |CRC32Csdfy.34:25| :skolemid |2528| :pattern ( (|CRC32__C.__default.byte__of__bits#requires| |m#0@@17|)) )))
(assert  (=> true (forall ((|m#0@@18| T@U) ) (!  (=> (and (= (type |m#0@@18|) (SeqType BoxType)) (or (|CRC32__C.__default.byte__of__bits#canCall| |m#0@@18|) (and ($Is |m#0@@18| (TSeq TBool)) (= (|Seq#Length| |m#0@@18|) (LitInt 8))))) (= (CRC32__C.__default.byte__of__bits |m#0@@18|) (+ (+ (+ (+ (+ (+ (+ (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@18| (LitInt 0)))) 1 0) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@18| (LitInt 1)))) 2 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@18| (LitInt 2)))) 4 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@18| (LitInt 3)))) 8 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@18| (LitInt 4)))) 16 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@18| (LitInt 5)))) 32 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@18| (LitInt 6)))) 64 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| |m#0@@18| (LitInt 7)))) 128 0)))) :qid |CRC32Csdfy.34:25| :skolemid |2529| :pattern ( (CRC32__C.__default.byte__of__bits |m#0@@18|)) ))))
(assert  (=> true (forall ((|m#0@@19| T@U) ) (!  (=> (and (= (type |m#0@@19|) (SeqType BoxType)) (or (|CRC32__C.__default.byte__of__bits#canCall| (Lit |m#0@@19|)) (and ($Is |m#0@@19| (TSeq TBool)) (= (|Seq#Length| (Lit |m#0@@19|)) (LitInt 8))))) (= (CRC32__C.__default.byte__of__bits (Lit |m#0@@19|)) (+ (+ (+ (+ (+ (+ (+ (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@19|) (LitInt 0)))) 1 0) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@19|) (LitInt 1)))) 2 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@19|) (LitInt 2)))) 4 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@19|) (LitInt 3)))) 8 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@19|) (LitInt 4)))) 16 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@19|) (LitInt 5)))) 32 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@19|) (LitInt 6)))) 64 0)) (ite (U_2_bool ($Unbox boolType (|Seq#Index| (Lit |m#0@@19|) (LitInt 7)))) 128 0)))) :qid |CRC32Csdfy.34:25| :weight 3 :skolemid |2530| :pattern ( (CRC32__C.__default.byte__of__bits (Lit |m#0@@19|))) ))))
(assert (forall ((arg0@@601 T@U) (arg1@@286 T@U) ) (! (= (type (CRC32__C.__default.crc32__c arg0@@601 arg1@@286)) (SeqType BoxType)) :qid |funType:CRC32__C.__default.crc32__c| :pattern ( (CRC32__C.__default.crc32__c arg0@@601 arg1@@286)) )))
(assert (forall (($ly@@340 T@U) (|s#0@@136| T@U) ) (!  (=> (and (= (type $ly@@340) LayerTypeType) (= (type |s#0@@136|) (SeqType BoxType))) (= (CRC32__C.__default.crc32__c ($LS $ly@@340) |s#0@@136|) (CRC32__C.__default.crc32__c $ly@@340 |s#0@@136|))) :qid |CRC32Csdfy.47:22| :skolemid |2531| :pattern ( (CRC32__C.__default.crc32__c ($LS $ly@@340) |s#0@@136|)) )))
(assert (forall (($ly@@341 T@U) (|s#0@@137| T@U) ) (!  (=> (and (= (type $ly@@341) LayerTypeType) (= (type |s#0@@137|) (SeqType BoxType))) (= (CRC32__C.__default.crc32__c $ly@@341 |s#0@@137|) (CRC32__C.__default.crc32__c $LZ |s#0@@137|))) :qid |CRC32Csdfy.47:22| :skolemid |2532| :pattern ( (CRC32__C.__default.crc32__c (AsFuelBottom $ly@@341) |s#0@@137|)) )))
(assert  (=> true (forall (($ly@@342 T@U) (|s#0@@138| T@U) ) (!  (=> (and (and (= (type $ly@@342) LayerTypeType) (= (type |s#0@@138|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c#canCall| |s#0@@138|) ($Is |s#0@@138| (TSeq Tclass.NativeTypes.byte)))) (and (= (|Seq#Length| (CRC32__C.__default.crc32__c $ly@@342 |s#0@@138|)) (LitInt 4)) ($Is (CRC32__C.__default.crc32__c $ly@@342 |s#0@@138|) (TSeq Tclass.NativeTypes.byte)))) :qid |CRC32Csdfy.47:22| :skolemid |2533| :pattern ( (CRC32__C.__default.crc32__c $ly@@342 |s#0@@138|)) ))))
(assert (forall (($ly@@343 T@U) (|s#0@@139| T@U) ) (!  (=> (and (and (= (type $ly@@343) LayerTypeType) (= (type |s#0@@139|) (SeqType BoxType))) ($Is |s#0@@139| (TSeq Tclass.NativeTypes.byte))) (= (|CRC32__C.__default.crc32__c#requires| $ly@@343 |s#0@@139|) true)) :qid |CRC32Csdfy.47:22| :skolemid |2534| :pattern ( (|CRC32__C.__default.crc32__c#requires| $ly@@343 |s#0@@139|)) )))
(assert (= (type StartFuel_Bits_s._default.ones) LayerTypeType))
(assert  (=> true (forall (($ly@@344 T@U) (|s#0@@140| T@U) ) (!  (=> (and (and (= (type $ly@@344) LayerTypeType) (= (type |s#0@@140|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c#canCall| |s#0@@140|) ($Is |s#0@@140| (TSeq Tclass.NativeTypes.byte)))) (and (and (and (|Bits__s.__default.zeroes#canCall| (LitInt 32)) (and (|CRC32__C.__default.bits__of__bytes#canCall| |s#0@@140|) (|F2__X__s.__default.reverse#canCall| (CRC32__C.__default.bits__of__bytes ($LS $LZ) |s#0@@140|)))) (let ((|bitstream#0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (CRC32__C.__default.bits__of__bytes ($LS $LZ) |s#0@@140|))))) (and (and (and (|Bits__s.__default.zeroes#canCall| (- (|Seq#Length| |bitstream#0|) 32)) (|Bits__s.__default.ones#canCall| (LitInt 32))) (|F2__X__s.__default.xor#canCall| |bitstream#0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#0|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (let ((|bitstream1#0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |bitstream#0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#0|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))))) (and (and (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33)) (|F2__X__s.__default.mod__F2__X#canCall| |bitstream1#0| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (let ((|m#0@@20| (F2__X__s.__default.mod__F2__X ($LS $LZ) |bitstream1#0| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (and (and (and (|F2__X__s.__default.reverse#canCall| |m#0@@20|) (|Bits__s.__default.ones#canCall| (LitInt 32))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#0@@20|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))) (let ((|m1#0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#0@@20|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (and (and (and (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#0| (LitInt 8)) (LitInt 0))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#0| (LitInt 16)) (LitInt 8)))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#0| (LitInt 24)) (LitInt 16)))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#0| (LitInt 32)) (LitInt 24)))))))))))) (= (CRC32__C.__default.crc32__c ($LS $ly@@344) |s#0@@140|) (let ((|bitstream#0@@0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (CRC32__C.__default.bits__of__bytes ($LS $LZ) |s#0@@140|))))) (let ((|bitstream1#0@@0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |bitstream#0@@0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#0@@0|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))))) (let ((|m#0@@21| (F2__X__s.__default.mod__F2__X ($LS $LZ) |bitstream1#0@@0| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (let ((|m1#0@@0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#0@@21|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#0@@0| (LitInt 8)) (LitInt 0)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#0@@0| (LitInt 16)) (LitInt 8)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#0@@0| (LitInt 24)) (LitInt 16)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#0@@0| (LitInt 32)) (LitInt 24))))))))))))) :qid |CRC32Csdfy.47:22| :skolemid |2535| :pattern ( (CRC32__C.__default.crc32__c ($LS $ly@@344) |s#0@@140|)) ))))
(assert  (=> true (forall (($ly@@345 T@U) (|s#0@@141| T@U) ) (!  (=> (and (and (= (type $ly@@345) LayerTypeType) (= (type |s#0@@141|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c#canCall| (Lit |s#0@@141|)) ($Is |s#0@@141| (TSeq Tclass.NativeTypes.byte)))) (and (and (and (|Bits__s.__default.zeroes#canCall| (LitInt 32)) (and (|CRC32__C.__default.bits__of__bytes#canCall| (Lit |s#0@@141|)) (|F2__X__s.__default.reverse#canCall| (Lit (CRC32__C.__default.bits__of__bytes ($LS $LZ) (Lit |s#0@@141|)))))) (let ((|bitstream#1| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit (CRC32__C.__default.bits__of__bytes ($LS $LZ) (Lit |s#0@@141|))))))) (and (and (and (|Bits__s.__default.zeroes#canCall| (- (|Seq#Length| |bitstream#1|) 32)) (|Bits__s.__default.ones#canCall| (LitInt 32))) (|F2__X__s.__default.xor#canCall| |bitstream#1| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#1|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (let ((|bitstream1#1| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |bitstream#1| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#1|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))))) (and (and (|Bits__s.__default.bits__of__int#canCall| (LitInt 4812730177) (LitInt 33)) (|F2__X__s.__default.mod__F2__X#canCall| |bitstream1#1| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33))))) (let ((|m#1| (F2__X__s.__default.mod__F2__X ($LS $LZ) |bitstream1#1| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (and (and (and (|F2__X__s.__default.reverse#canCall| |m#1|) (|Bits__s.__default.ones#canCall| (LitInt 32))) (|F2__X__s.__default.xor#canCall| (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#1|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))) (let ((|m1#1| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#1|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (and (and (and (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#1| (LitInt 8)) (LitInt 0))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#1| (LitInt 16)) (LitInt 8)))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#1| (LitInt 24)) (LitInt 16)))) (|CRC32__C.__default.byte__of__bits#canCall| (|Seq#Drop| (|Seq#Take| |m1#1| (LitInt 32)) (LitInt 24)))))))))))) (= (CRC32__C.__default.crc32__c ($LS $ly@@345) (Lit |s#0@@141|)) (let ((|bitstream#1@@0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (LitInt 32)) (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse (Lit (CRC32__C.__default.bits__of__bytes ($LS $LZ) (Lit |s#0@@141|))))))) (let ((|bitstream1#1@@0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor |bitstream#1@@0| (|Seq#Append| (Bits__s.__default.zeroes StartFuel_Bits_s._default.zeroes (- (|Seq#Length| |bitstream#1@@0|) 32)) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32)))))) (let ((|m#1@@0| (F2__X__s.__default.mod__F2__X ($LS $LZ) |bitstream1#1@@0| (Lit (Bits__s.__default.bits__of__int StartFuel_Bits_s._default.bits_of_int (LitInt 4812730177) (LitInt 33)))))) (let ((|m1#1@@0| (F2__X__s.__default.xor StartFuel_F2_X_s._default.xor (F2__X__s.__default.reverse StartFuel_F2_X_s._default.reverse |m#1@@0|) (Bits__s.__default.ones StartFuel_Bits_s._default.ones (LitInt 32))))) (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#1@@0| (LitInt 8)) (LitInt 0)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#1@@0| (LitInt 16)) (LitInt 8)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#1@@0| (LitInt 24)) (LitInt 16)))))) ($Box (int_2_U (CRC32__C.__default.byte__of__bits (|Seq#Drop| (|Seq#Take| |m1#1@@0| (LitInt 32)) (LitInt 24))))))))))))) :qid |CRC32Csdfy.47:22| :weight 3 :skolemid |2536| :pattern ( (CRC32__C.__default.crc32__c ($LS $ly@@345) (Lit |s#0@@141|))) ))))
(assert (forall ((arg0@@602 T@U) ) (! (= (type (CRC32__C.__default.crc32__c__padded arg0@@602)) (SeqType BoxType)) :qid |funType:CRC32__C.__default.crc32__c__padded| :pattern ( (CRC32__C.__default.crc32__c__padded arg0@@602)) )))
(assert  (=> true (forall ((|s#0@@142| T@U) ) (!  (=> (and (= (type |s#0@@142|) (SeqType BoxType)) (or (|CRC32__C.__default.crc32__c__padded#canCall| |s#0@@142|) ($Is |s#0@@142| (TSeq Tclass.NativeTypes.byte)))) (and (= (|Seq#Length| (CRC32__C.__default.crc32__c__padded |s#0@@142|)) (LitInt 32)) ($Is (CRC32__C.__default.crc32__c__padded |s#0@@142|) (TSeq Tclass.NativeTypes.byte)))) :qid |CRC32Csdfy.62:27| :skolemid |2537| :pattern ( (CRC32__C.__default.crc32__c__padded |s#0@@142|)) ))))
(assert (forall (($Heap@@46 T@U) (|s#0@@143| T@U) ) (!  (=> (and (and (= (type $Heap@@46) (MapType0Type refType MapType1Type)) (= (type |s#0@@143|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@46) ($Is |s#0@@143| (TSeq Tclass.NativeTypes.byte)))) (= (|CRC32__C.__default.crc32__c__padded#requires| |s#0@@143|) true)) :qid |CRC32Csdfy.62:12| :skolemid |2538| :pattern ( (|CRC32__C.__default.crc32__c__padded#requires| |s#0@@143|) ($IsGoodHeap $Heap@@46)) )))
(assert  (and (and (= (type StartFuel_CRC32_C._default.crc32_c) LayerTypeType) (forall ((arg0@@603 T@U) ) (! (= (type (|lambda#46| arg0@@603)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@603)) ))) (forall ((arg0@@604 T@U) ) (! (= (type (|lambda#47| arg0@@604)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@604)) ))))
(assert  (=> true (forall (($Heap@@47 T@U) (|s#0@@144| T@U) ) (!  (=> (and (and (= (type $Heap@@47) (MapType0Type refType MapType1Type)) (= (type |s#0@@144|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c__padded#canCall| |s#0@@144|) (and ($IsGoodHeap $Heap@@47) ($Is |s#0@@144| (TSeq Tclass.NativeTypes.byte))))) (and (|CRC32__C.__default.crc32__c#canCall| |s#0@@144|) (= (CRC32__C.__default.crc32__c__padded |s#0@@144|) (|Seq#Append| (CRC32__C.__default.crc32__c StartFuel_CRC32_C._default.crc32_c |s#0@@144|) (|Seq#Create| Tclass.NativeTypes.byte $Heap@@47 (LitInt 28) (Lit (AtLayer (|lambda#16| (Handle1 (|lambda#46| ($Box (int_2_U (LitInt 0)))) (|lambda#47| TInt) (|lambda#15| (SetRef_to_SetBox (|lambda#14| false))))) ($LS $LZ)))))))) :qid |CRC32Csdfy.62:12| :skolemid |2539| :pattern ( (CRC32__C.__default.crc32__c__padded |s#0@@144|) ($IsGoodHeap $Heap@@47)) ))))
(assert  (=> true (forall (($Heap@@48 T@U) (|s#0@@145| T@U) ) (!  (=> (and (and (= (type $Heap@@48) (MapType0Type refType MapType1Type)) (= (type |s#0@@145|) (SeqType BoxType))) (or (|CRC32__C.__default.crc32__c__padded#canCall| (Lit |s#0@@145|)) (and ($IsGoodHeap $Heap@@48) ($Is |s#0@@145| (TSeq Tclass.NativeTypes.byte))))) (and (|CRC32__C.__default.crc32__c#canCall| (Lit |s#0@@145|)) (= (CRC32__C.__default.crc32__c__padded (Lit |s#0@@145|)) (|Seq#Append| (CRC32__C.__default.crc32__c StartFuel_CRC32_C._default.crc32_c (Lit |s#0@@145|)) (|Seq#Create| Tclass.NativeTypes.byte $Heap@@48 (LitInt 28) (Lit (AtLayer (|lambda#16| (Handle1 (|lambda#46| ($Box (int_2_U (LitInt 0)))) (|lambda#47| TInt) (|lambda#15| (SetRef_to_SetBox (|lambda#14| false))))) ($LS $LZ)))))))) :qid |CRC32Csdfy.62:12| :weight 3 :skolemid |2540| :pattern ( (CRC32__C.__default.crc32__c__padded (Lit |s#0@@145|)) ($IsGoodHeap $Heap@@48)) ))))
(assert (forall ((arg0@@605 Int) (arg1@@287 Int) ) (! (= (type (|#AsyncDisk.ReqRead.ReqRead| arg0@@605 arg1@@287)) DatatypeTypeType) :qid |funType:#AsyncDisk.ReqRead.ReqRead| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| arg0@@605 arg1@@287)) )))
(assert (forall ((|a#0#0#0@@2| Int) (|a#0#1#0@@1| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.ReqRead.ReqRead| |a#0#0#0@@2| |a#0#1#0@@1|)) |##AsyncDisk.ReqRead.ReqRead|) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2541| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| |a#0#0#0@@2| |a#0#1#0@@1|)) )))
(assert (forall ((d@@117 T@U) ) (!  (=> (= (type d@@117) DatatypeTypeType) (= (AsyncDisk.ReqRead.ReqRead_q d@@117) (= (DatatypeCtorId d@@117) |##AsyncDisk.ReqRead.ReqRead|))) :qid |unknown.0:0| :skolemid |2542| :pattern ( (AsyncDisk.ReqRead.ReqRead_q d@@117)) )))
(assert (forall ((d@@118 T@U) ) (!  (=> (and (= (type d@@118) DatatypeTypeType) (AsyncDisk.ReqRead.ReqRead_q d@@118)) (exists ((|a#1#0#0@@2| Int) (|a#1#1#0@@1| Int) ) (! (= d@@118 (|#AsyncDisk.ReqRead.ReqRead| |a#1#0#0@@2| |a#1#1#0@@1|)) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2543| ))) :qid |unknown.0:0| :skolemid |2544| :pattern ( (AsyncDisk.ReqRead.ReqRead_q d@@118)) )))
(assert (= (type Tclass.AsyncDisk.ReqRead) TyType))
(assert (= (Tag Tclass.AsyncDisk.ReqRead) Tagclass.AsyncDisk.ReqRead))
(assert (= (TagFamily Tclass.AsyncDisk.ReqRead) tytagFamily$ReqRead))
(assert (forall ((bx@@170 T@U) ) (!  (=> (and (= (type bx@@170) BoxType) ($IsBox bx@@170 Tclass.AsyncDisk.ReqRead)) (and (= ($Box ($Unbox DatatypeTypeType bx@@170)) bx@@170) ($Is ($Unbox DatatypeTypeType bx@@170) Tclass.AsyncDisk.ReqRead))) :qid |unknown.0:0| :skolemid |2545| :pattern ( ($IsBox bx@@170 Tclass.AsyncDisk.ReqRead)) )))
(assert (forall ((|a#2#0#0@@2| Int) (|a#2#1#0@@1| Int) ) (! (= ($Is (|#AsyncDisk.ReqRead.ReqRead| |a#2#0#0@@2| |a#2#1#0@@1|) Tclass.AsyncDisk.ReqRead)  (and ($Is (int_2_U |a#2#0#0@@2|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#2#1#0@@1|) Tclass.NativeTypes.uint64))) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2546| :pattern ( ($Is (|#AsyncDisk.ReqRead.ReqRead| |a#2#0#0@@2| |a#2#1#0@@1|) Tclass.AsyncDisk.ReqRead)) )))
(assert (forall ((|a#3#0#0@@2| Int) (|a#3#1#0@@1| Int) ($h@@145 T@U) ) (!  (=> (and (= (type $h@@145) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@145)) (= ($IsAlloc (|#AsyncDisk.ReqRead.ReqRead| |a#3#0#0@@2| |a#3#1#0@@1|) Tclass.AsyncDisk.ReqRead $h@@145)  (and ($IsAlloc (int_2_U |a#3#0#0@@2|) Tclass.NativeTypes.uint64 $h@@145) ($IsAlloc (int_2_U |a#3#1#0@@1|) Tclass.NativeTypes.uint64 $h@@145)))) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2547| :pattern ( ($IsAlloc (|#AsyncDisk.ReqRead.ReqRead| |a#3#0#0@@2| |a#3#1#0@@1|) Tclass.AsyncDisk.ReqRead $h@@145)) )))
(assert (forall ((d@@119 T@U) ($h@@146 T@U) ) (!  (=> (and (and (= (type d@@119) DatatypeTypeType) (= (type $h@@146) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@146) (and (AsyncDisk.ReqRead.ReqRead_q d@@119) ($IsAlloc d@@119 Tclass.AsyncDisk.ReqRead $h@@146)))) ($IsAlloc (int_2_U (AsyncDisk.ReqRead.addr d@@119)) Tclass.NativeTypes.uint64 $h@@146)) :qid |unknown.0:0| :skolemid |2548| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.ReqRead.addr d@@119)) Tclass.NativeTypes.uint64 $h@@146)) )))
(assert (forall ((d@@120 T@U) ($h@@147 T@U) ) (!  (=> (and (and (= (type d@@120) DatatypeTypeType) (= (type $h@@147) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@147) (and (AsyncDisk.ReqRead.ReqRead_q d@@120) ($IsAlloc d@@120 Tclass.AsyncDisk.ReqRead $h@@147)))) ($IsAlloc (int_2_U (AsyncDisk.ReqRead.len d@@120)) Tclass.NativeTypes.uint64 $h@@147)) :qid |unknown.0:0| :skolemid |2549| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.ReqRead.len d@@120)) Tclass.NativeTypes.uint64 $h@@147)) )))
(assert (forall ((|a#4#0#0@@2| Int) (|a#4#1#0@@1| Int) ) (! (= (|#AsyncDisk.ReqRead.ReqRead| (LitInt |a#4#0#0@@2|) (LitInt |a#4#1#0@@1|)) (Lit (|#AsyncDisk.ReqRead.ReqRead| |a#4#0#0@@2| |a#4#1#0@@1|))) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2550| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| (LitInt |a#4#0#0@@2|) (LitInt |a#4#1#0@@1|))) )))
(assert (forall ((|a#5#0#0@@3| Int) (|a#5#1#0@@1| Int) ) (! (= (AsyncDisk.ReqRead.addr (|#AsyncDisk.ReqRead.ReqRead| |a#5#0#0@@3| |a#5#1#0@@1|)) |a#5#0#0@@3|) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2551| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| |a#5#0#0@@3| |a#5#1#0@@1|)) )))
(assert (forall ((|a#6#0#0@@3| Int) (|a#6#1#0@@1| Int) ) (! (= (AsyncDisk.ReqRead.len (|#AsyncDisk.ReqRead.ReqRead| |a#6#0#0@@3| |a#6#1#0@@1|)) |a#6#1#0@@1|) :qid |AsyncDiskModelsdfy.25:30| :skolemid |2552| :pattern ( (|#AsyncDisk.ReqRead.ReqRead| |a#6#0#0@@3| |a#6#1#0@@1|)) )))
(assert (forall ((d@@121 T@U) ) (!  (=> (and (= (type d@@121) DatatypeTypeType) (|$IsA#AsyncDisk.ReqRead| d@@121)) (AsyncDisk.ReqRead.ReqRead_q d@@121)) :qid |unknown.0:0| :skolemid |2553| :pattern ( (|$IsA#AsyncDisk.ReqRead| d@@121)) )))
(assert (forall ((d@@122 T@U) ) (!  (=> (and (= (type d@@122) DatatypeTypeType) ($Is d@@122 Tclass.AsyncDisk.ReqRead)) (AsyncDisk.ReqRead.ReqRead_q d@@122)) :qid |unknown.0:0| :skolemid |2554| :pattern ( (AsyncDisk.ReqRead.ReqRead_q d@@122) ($Is d@@122 Tclass.AsyncDisk.ReqRead)) )))
(assert (forall ((a@@165 T@U) (b@@102 T@U) ) (!  (=> (and (and (= (type a@@165) DatatypeTypeType) (= (type b@@102) DatatypeTypeType)) true) (= (|AsyncDisk.ReqRead#Equal| a@@165 b@@102)  (and (= (AsyncDisk.ReqRead.addr a@@165) (AsyncDisk.ReqRead.addr b@@102)) (= (AsyncDisk.ReqRead.len a@@165) (AsyncDisk.ReqRead.len b@@102))))) :qid |unknown.0:0| :skolemid |2555| :pattern ( (|AsyncDisk.ReqRead#Equal| a@@165 b@@102)) )))
(assert (forall ((a@@166 T@U) (b@@103 T@U) ) (!  (=> (and (= (type a@@166) DatatypeTypeType) (= (type b@@103) DatatypeTypeType)) (= (|AsyncDisk.ReqRead#Equal| a@@166 b@@103) (= a@@166 b@@103))) :qid |unknown.0:0| :skolemid |2556| :pattern ( (|AsyncDisk.ReqRead#Equal| a@@166 b@@103)) )))
(assert (forall ((arg0@@606 Int) (arg1@@288 T@U) ) (! (= (type (|#AsyncDisk.ReqWrite.ReqWrite| arg0@@606 arg1@@288)) DatatypeTypeType) :qid |funType:#AsyncDisk.ReqWrite.ReqWrite| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| arg0@@606 arg1@@288)) )))
(assert (forall ((|a#7#0#0@@2| Int) (|a#7#1#0@@0| T@U) ) (!  (=> (= (type |a#7#1#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#AsyncDisk.ReqWrite.ReqWrite| |a#7#0#0@@2| |a#7#1#0@@0|)) |##AsyncDisk.ReqWrite.ReqWrite|)) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2557| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| |a#7#0#0@@2| |a#7#1#0@@0|)) )))
(assert (forall ((d@@123 T@U) ) (!  (=> (= (type d@@123) DatatypeTypeType) (= (AsyncDisk.ReqWrite.ReqWrite_q d@@123) (= (DatatypeCtorId d@@123) |##AsyncDisk.ReqWrite.ReqWrite|))) :qid |unknown.0:0| :skolemid |2558| :pattern ( (AsyncDisk.ReqWrite.ReqWrite_q d@@123)) )))
(assert (forall ((d@@124 T@U) ) (!  (=> (and (= (type d@@124) DatatypeTypeType) (AsyncDisk.ReqWrite.ReqWrite_q d@@124)) (exists ((|a#8#0#0@@2| Int) (|a#8#1#0@@0| T@U) ) (!  (and (= (type |a#8#1#0@@0|) (SeqType BoxType)) (= d@@124 (|#AsyncDisk.ReqWrite.ReqWrite| |a#8#0#0@@2| |a#8#1#0@@0|))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2559| :no-pattern (type |a#8#1#0@@0|) :no-pattern (U_2_int |a#8#1#0@@0|) :no-pattern (U_2_bool |a#8#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2560| :pattern ( (AsyncDisk.ReqWrite.ReqWrite_q d@@124)) )))
(assert (= (type Tclass.AsyncDisk.ReqWrite) TyType))
(assert (= (Tag Tclass.AsyncDisk.ReqWrite) Tagclass.AsyncDisk.ReqWrite))
(assert (= (TagFamily Tclass.AsyncDisk.ReqWrite) tytagFamily$ReqWrite))
(assert (forall ((bx@@171 T@U) ) (!  (=> (and (= (type bx@@171) BoxType) ($IsBox bx@@171 Tclass.AsyncDisk.ReqWrite)) (and (= ($Box ($Unbox DatatypeTypeType bx@@171)) bx@@171) ($Is ($Unbox DatatypeTypeType bx@@171) Tclass.AsyncDisk.ReqWrite))) :qid |unknown.0:0| :skolemid |2561| :pattern ( ($IsBox bx@@171 Tclass.AsyncDisk.ReqWrite)) )))
(assert (forall ((|a#9#0#0@@2| Int) (|a#9#1#0@@0| T@U) ) (!  (=> (= (type |a#9#1#0@@0|) (SeqType BoxType)) (= ($Is (|#AsyncDisk.ReqWrite.ReqWrite| |a#9#0#0@@2| |a#9#1#0@@0|) Tclass.AsyncDisk.ReqWrite)  (and ($Is (int_2_U |a#9#0#0@@2|) Tclass.NativeTypes.uint64) ($Is |a#9#1#0@@0| (TSeq Tclass.NativeTypes.byte))))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2562| :pattern ( ($Is (|#AsyncDisk.ReqWrite.ReqWrite| |a#9#0#0@@2| |a#9#1#0@@0|) Tclass.AsyncDisk.ReqWrite)) )))
(assert (forall ((|a#10#0#0@@2| Int) (|a#10#1#0@@0| T@U) ($h@@148 T@U) ) (!  (=> (and (and (= (type |a#10#1#0@@0|) (SeqType BoxType)) (= (type $h@@148) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@148)) (= ($IsAlloc (|#AsyncDisk.ReqWrite.ReqWrite| |a#10#0#0@@2| |a#10#1#0@@0|) Tclass.AsyncDisk.ReqWrite $h@@148)  (and ($IsAlloc (int_2_U |a#10#0#0@@2|) Tclass.NativeTypes.uint64 $h@@148) ($IsAlloc |a#10#1#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@148)))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2563| :pattern ( ($IsAlloc (|#AsyncDisk.ReqWrite.ReqWrite| |a#10#0#0@@2| |a#10#1#0@@0|) Tclass.AsyncDisk.ReqWrite $h@@148)) )))
(assert (forall ((d@@125 T@U) ($h@@149 T@U) ) (!  (=> (and (and (= (type d@@125) DatatypeTypeType) (= (type $h@@149) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@149) (and (AsyncDisk.ReqWrite.ReqWrite_q d@@125) ($IsAlloc d@@125 Tclass.AsyncDisk.ReqWrite $h@@149)))) ($IsAlloc (int_2_U (AsyncDisk.ReqWrite.addr d@@125)) Tclass.NativeTypes.uint64 $h@@149)) :qid |unknown.0:0| :skolemid |2564| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.ReqWrite.addr d@@125)) Tclass.NativeTypes.uint64 $h@@149)) )))
(assert (forall ((arg0@@607 T@U) ) (! (= (type (AsyncDisk.ReqWrite.bytes arg0@@607)) (SeqType BoxType)) :qid |funType:AsyncDisk.ReqWrite.bytes| :pattern ( (AsyncDisk.ReqWrite.bytes arg0@@607)) )))
(assert (forall ((d@@126 T@U) ($h@@150 T@U) ) (!  (=> (and (and (= (type d@@126) DatatypeTypeType) (= (type $h@@150) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@150) (and (AsyncDisk.ReqWrite.ReqWrite_q d@@126) ($IsAlloc d@@126 Tclass.AsyncDisk.ReqWrite $h@@150)))) ($IsAlloc (AsyncDisk.ReqWrite.bytes d@@126) (TSeq Tclass.NativeTypes.byte) $h@@150)) :qid |unknown.0:0| :skolemid |2565| :pattern ( ($IsAlloc (AsyncDisk.ReqWrite.bytes d@@126) (TSeq Tclass.NativeTypes.byte) $h@@150)) )))
(assert (forall ((|a#11#0#0@@2| Int) (|a#11#1#0@@0| T@U) ) (!  (=> (= (type |a#11#1#0@@0|) (SeqType BoxType)) (= (|#AsyncDisk.ReqWrite.ReqWrite| (LitInt |a#11#0#0@@2|) (Lit |a#11#1#0@@0|)) (Lit (|#AsyncDisk.ReqWrite.ReqWrite| |a#11#0#0@@2| |a#11#1#0@@0|)))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2566| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| (LitInt |a#11#0#0@@2|) (Lit |a#11#1#0@@0|))) )))
(assert (forall ((|a#12#0#0@@1| Int) (|a#12#1#0@@0| T@U) ) (!  (=> (= (type |a#12#1#0@@0|) (SeqType BoxType)) (= (AsyncDisk.ReqWrite.addr (|#AsyncDisk.ReqWrite.ReqWrite| |a#12#0#0@@1| |a#12#1#0@@0|)) |a#12#0#0@@1|)) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2567| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| |a#12#0#0@@1| |a#12#1#0@@0|)) )))
(assert (forall ((|a#13#0#0@@1| Int) (|a#13#1#0@@0| T@U) ) (!  (=> (= (type |a#13#1#0@@0|) (SeqType BoxType)) (= (AsyncDisk.ReqWrite.bytes (|#AsyncDisk.ReqWrite.ReqWrite| |a#13#0#0@@1| |a#13#1#0@@0|)) |a#13#1#0@@0|)) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2568| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| |a#13#0#0@@1| |a#13#1#0@@0|)) )))
(assert (forall ((|a#14#0#0@@1| Int) (|a#14#1#0@@0| T@U) (i@@27 Int) ) (!  (=> (= (type |a#14#1#0@@0|) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| |a#14#1#0@@0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#14#1#0@@0| i@@27))) (DtRank (|#AsyncDisk.ReqWrite.ReqWrite| |a#14#0#0@@1| |a#14#1#0@@0|))))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2569| :pattern ( (|Seq#Index| |a#14#1#0@@0| i@@27) (|#AsyncDisk.ReqWrite.ReqWrite| |a#14#0#0@@1| |a#14#1#0@@0|)) )))
(assert (forall ((|a#15#0#0@@1| Int) (|a#15#1#0@@0| T@U) ) (!  (=> (= (type |a#15#1#0@@0|) (SeqType BoxType)) (< (|Seq#Rank| |a#15#1#0@@0|) (DtRank (|#AsyncDisk.ReqWrite.ReqWrite| |a#15#0#0@@1| |a#15#1#0@@0|)))) :qid |AsyncDiskModelsdfy.26:32| :skolemid |2570| :pattern ( (|#AsyncDisk.ReqWrite.ReqWrite| |a#15#0#0@@1| |a#15#1#0@@0|)) )))
(assert (forall ((d@@127 T@U) ) (!  (=> (and (= (type d@@127) DatatypeTypeType) (|$IsA#AsyncDisk.ReqWrite| d@@127)) (AsyncDisk.ReqWrite.ReqWrite_q d@@127)) :qid |unknown.0:0| :skolemid |2571| :pattern ( (|$IsA#AsyncDisk.ReqWrite| d@@127)) )))
(assert (forall ((d@@128 T@U) ) (!  (=> (and (= (type d@@128) DatatypeTypeType) ($Is d@@128 Tclass.AsyncDisk.ReqWrite)) (AsyncDisk.ReqWrite.ReqWrite_q d@@128)) :qid |unknown.0:0| :skolemid |2572| :pattern ( (AsyncDisk.ReqWrite.ReqWrite_q d@@128) ($Is d@@128 Tclass.AsyncDisk.ReqWrite)) )))
(assert (forall ((a@@167 T@U) (b@@104 T@U) ) (!  (=> (and (and (= (type a@@167) DatatypeTypeType) (= (type b@@104) DatatypeTypeType)) true) (= (|AsyncDisk.ReqWrite#Equal| a@@167 b@@104)  (and (= (AsyncDisk.ReqWrite.addr a@@167) (AsyncDisk.ReqWrite.addr b@@104)) (|Seq#Equal| (AsyncDisk.ReqWrite.bytes a@@167) (AsyncDisk.ReqWrite.bytes b@@104))))) :qid |unknown.0:0| :skolemid |2573| :pattern ( (|AsyncDisk.ReqWrite#Equal| a@@167 b@@104)) )))
(assert (forall ((a@@168 T@U) (b@@105 T@U) ) (!  (=> (and (= (type a@@168) DatatypeTypeType) (= (type b@@105) DatatypeTypeType)) (= (|AsyncDisk.ReqWrite#Equal| a@@168 b@@105) (= a@@168 b@@105))) :qid |unknown.0:0| :skolemid |2574| :pattern ( (|AsyncDisk.ReqWrite#Equal| a@@168 b@@105)) )))
(assert (forall ((arg0@@608 Int) (arg1@@289 T@U) ) (! (= (type (|#AsyncDisk.RespRead.RespRead| arg0@@608 arg1@@289)) DatatypeTypeType) :qid |funType:#AsyncDisk.RespRead.RespRead| :pattern ( (|#AsyncDisk.RespRead.RespRead| arg0@@608 arg1@@289)) )))
(assert (forall ((|a#16#0#0@@1| Int) (|a#16#1#0@@0| T@U) ) (!  (=> (= (type |a#16#1#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#AsyncDisk.RespRead.RespRead| |a#16#0#0@@1| |a#16#1#0@@0|)) |##AsyncDisk.RespRead.RespRead|)) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2575| :pattern ( (|#AsyncDisk.RespRead.RespRead| |a#16#0#0@@1| |a#16#1#0@@0|)) )))
(assert (forall ((d@@129 T@U) ) (!  (=> (= (type d@@129) DatatypeTypeType) (= (AsyncDisk.RespRead.RespRead_q d@@129) (= (DatatypeCtorId d@@129) |##AsyncDisk.RespRead.RespRead|))) :qid |unknown.0:0| :skolemid |2576| :pattern ( (AsyncDisk.RespRead.RespRead_q d@@129)) )))
(assert (forall ((d@@130 T@U) ) (!  (=> (and (= (type d@@130) DatatypeTypeType) (AsyncDisk.RespRead.RespRead_q d@@130)) (exists ((|a#17#0#0@@1| Int) (|a#17#1#0@@0| T@U) ) (!  (and (= (type |a#17#1#0@@0|) (SeqType BoxType)) (= d@@130 (|#AsyncDisk.RespRead.RespRead| |a#17#0#0@@1| |a#17#1#0@@0|))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2577| :no-pattern (type |a#17#1#0@@0|) :no-pattern (U_2_int |a#17#1#0@@0|) :no-pattern (U_2_bool |a#17#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2578| :pattern ( (AsyncDisk.RespRead.RespRead_q d@@130)) )))
(assert (= (type Tclass.AsyncDisk.RespRead) TyType))
(assert (= (Tag Tclass.AsyncDisk.RespRead) Tagclass.AsyncDisk.RespRead))
(assert (= (TagFamily Tclass.AsyncDisk.RespRead) tytagFamily$RespRead))
(assert (forall ((bx@@172 T@U) ) (!  (=> (and (= (type bx@@172) BoxType) ($IsBox bx@@172 Tclass.AsyncDisk.RespRead)) (and (= ($Box ($Unbox DatatypeTypeType bx@@172)) bx@@172) ($Is ($Unbox DatatypeTypeType bx@@172) Tclass.AsyncDisk.RespRead))) :qid |unknown.0:0| :skolemid |2579| :pattern ( ($IsBox bx@@172 Tclass.AsyncDisk.RespRead)) )))
(assert (forall ((|a#18#0#0@@1| Int) (|a#18#1#0@@0| T@U) ) (!  (=> (= (type |a#18#1#0@@0|) (SeqType BoxType)) (= ($Is (|#AsyncDisk.RespRead.RespRead| |a#18#0#0@@1| |a#18#1#0@@0|) Tclass.AsyncDisk.RespRead)  (and ($Is (int_2_U |a#18#0#0@@1|) Tclass.NativeTypes.uint64) ($Is |a#18#1#0@@0| (TSeq Tclass.NativeTypes.byte))))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2580| :pattern ( ($Is (|#AsyncDisk.RespRead.RespRead| |a#18#0#0@@1| |a#18#1#0@@0|) Tclass.AsyncDisk.RespRead)) )))
(assert (forall ((|a#19#0#0@@1| Int) (|a#19#1#0@@0| T@U) ($h@@151 T@U) ) (!  (=> (and (and (= (type |a#19#1#0@@0|) (SeqType BoxType)) (= (type $h@@151) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@151)) (= ($IsAlloc (|#AsyncDisk.RespRead.RespRead| |a#19#0#0@@1| |a#19#1#0@@0|) Tclass.AsyncDisk.RespRead $h@@151)  (and ($IsAlloc (int_2_U |a#19#0#0@@1|) Tclass.NativeTypes.uint64 $h@@151) ($IsAlloc |a#19#1#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@151)))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2581| :pattern ( ($IsAlloc (|#AsyncDisk.RespRead.RespRead| |a#19#0#0@@1| |a#19#1#0@@0|) Tclass.AsyncDisk.RespRead $h@@151)) )))
(assert (forall ((d@@131 T@U) ($h@@152 T@U) ) (!  (=> (and (and (= (type d@@131) DatatypeTypeType) (= (type $h@@152) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@152) (and (AsyncDisk.RespRead.RespRead_q d@@131) ($IsAlloc d@@131 Tclass.AsyncDisk.RespRead $h@@152)))) ($IsAlloc (int_2_U (AsyncDisk.RespRead.addr d@@131)) Tclass.NativeTypes.uint64 $h@@152)) :qid |unknown.0:0| :skolemid |2582| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.RespRead.addr d@@131)) Tclass.NativeTypes.uint64 $h@@152)) )))
(assert (forall ((arg0@@609 T@U) ) (! (= (type (AsyncDisk.RespRead.bytes arg0@@609)) (SeqType BoxType)) :qid |funType:AsyncDisk.RespRead.bytes| :pattern ( (AsyncDisk.RespRead.bytes arg0@@609)) )))
(assert (forall ((d@@132 T@U) ($h@@153 T@U) ) (!  (=> (and (and (= (type d@@132) DatatypeTypeType) (= (type $h@@153) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@153) (and (AsyncDisk.RespRead.RespRead_q d@@132) ($IsAlloc d@@132 Tclass.AsyncDisk.RespRead $h@@153)))) ($IsAlloc (AsyncDisk.RespRead.bytes d@@132) (TSeq Tclass.NativeTypes.byte) $h@@153)) :qid |unknown.0:0| :skolemid |2583| :pattern ( ($IsAlloc (AsyncDisk.RespRead.bytes d@@132) (TSeq Tclass.NativeTypes.byte) $h@@153)) )))
(assert (forall ((|a#20#0#0@@0| Int) (|a#20#1#0| T@U) ) (!  (=> (= (type |a#20#1#0|) (SeqType BoxType)) (= (|#AsyncDisk.RespRead.RespRead| (LitInt |a#20#0#0@@0|) (Lit |a#20#1#0|)) (Lit (|#AsyncDisk.RespRead.RespRead| |a#20#0#0@@0| |a#20#1#0|)))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2584| :pattern ( (|#AsyncDisk.RespRead.RespRead| (LitInt |a#20#0#0@@0|) (Lit |a#20#1#0|))) )))
(assert (forall ((|a#21#0#0@@0| Int) (|a#21#1#0| T@U) ) (!  (=> (= (type |a#21#1#0|) (SeqType BoxType)) (= (AsyncDisk.RespRead.addr (|#AsyncDisk.RespRead.RespRead| |a#21#0#0@@0| |a#21#1#0|)) |a#21#0#0@@0|)) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2585| :pattern ( (|#AsyncDisk.RespRead.RespRead| |a#21#0#0@@0| |a#21#1#0|)) )))
(assert (forall ((|a#22#0#0@@0| Int) (|a#22#1#0| T@U) ) (!  (=> (= (type |a#22#1#0|) (SeqType BoxType)) (= (AsyncDisk.RespRead.bytes (|#AsyncDisk.RespRead.RespRead| |a#22#0#0@@0| |a#22#1#0|)) |a#22#1#0|)) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2586| :pattern ( (|#AsyncDisk.RespRead.RespRead| |a#22#0#0@@0| |a#22#1#0|)) )))
(assert (forall ((|a#23#0#0@@0| Int) (|a#23#1#0| T@U) (i@@28 Int) ) (!  (=> (= (type |a#23#1#0|) (SeqType BoxType)) (=> (and (<= 0 i@@28) (< i@@28 (|Seq#Length| |a#23#1#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#23#1#0| i@@28))) (DtRank (|#AsyncDisk.RespRead.RespRead| |a#23#0#0@@0| |a#23#1#0|))))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2587| :pattern ( (|Seq#Index| |a#23#1#0| i@@28) (|#AsyncDisk.RespRead.RespRead| |a#23#0#0@@0| |a#23#1#0|)) )))
(assert (forall ((|a#24#0#0| Int) (|a#24#1#0| T@U) ) (!  (=> (= (type |a#24#1#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#24#1#0|) (DtRank (|#AsyncDisk.RespRead.RespRead| |a#24#0#0| |a#24#1#0|)))) :qid |AsyncDiskModelsdfy.27:32| :skolemid |2588| :pattern ( (|#AsyncDisk.RespRead.RespRead| |a#24#0#0| |a#24#1#0|)) )))
(assert (forall ((d@@133 T@U) ) (!  (=> (and (= (type d@@133) DatatypeTypeType) (|$IsA#AsyncDisk.RespRead| d@@133)) (AsyncDisk.RespRead.RespRead_q d@@133)) :qid |unknown.0:0| :skolemid |2589| :pattern ( (|$IsA#AsyncDisk.RespRead| d@@133)) )))
(assert (forall ((d@@134 T@U) ) (!  (=> (and (= (type d@@134) DatatypeTypeType) ($Is d@@134 Tclass.AsyncDisk.RespRead)) (AsyncDisk.RespRead.RespRead_q d@@134)) :qid |unknown.0:0| :skolemid |2590| :pattern ( (AsyncDisk.RespRead.RespRead_q d@@134) ($Is d@@134 Tclass.AsyncDisk.RespRead)) )))
(assert (forall ((a@@169 T@U) (b@@106 T@U) ) (!  (=> (and (and (= (type a@@169) DatatypeTypeType) (= (type b@@106) DatatypeTypeType)) true) (= (|AsyncDisk.RespRead#Equal| a@@169 b@@106)  (and (= (AsyncDisk.RespRead.addr a@@169) (AsyncDisk.RespRead.addr b@@106)) (|Seq#Equal| (AsyncDisk.RespRead.bytes a@@169) (AsyncDisk.RespRead.bytes b@@106))))) :qid |unknown.0:0| :skolemid |2591| :pattern ( (|AsyncDisk.RespRead#Equal| a@@169 b@@106)) )))
(assert (forall ((a@@170 T@U) (b@@107 T@U) ) (!  (=> (and (= (type a@@170) DatatypeTypeType) (= (type b@@107) DatatypeTypeType)) (= (|AsyncDisk.RespRead#Equal| a@@170 b@@107) (= a@@170 b@@107))) :qid |unknown.0:0| :skolemid |2592| :pattern ( (|AsyncDisk.RespRead#Equal| a@@170 b@@107)) )))
(assert (forall ((arg0@@610 Int) (arg1@@290 Int) ) (! (= (type (|#AsyncDisk.RespWrite.RespWrite| arg0@@610 arg1@@290)) DatatypeTypeType) :qid |funType:#AsyncDisk.RespWrite.RespWrite| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| arg0@@610 arg1@@290)) )))
(assert (forall ((|a#25#0#0@@0| Int) (|a#25#1#0@@0| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.RespWrite.RespWrite| |a#25#0#0@@0| |a#25#1#0@@0|)) |##AsyncDisk.RespWrite.RespWrite|) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2593| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| |a#25#0#0@@0| |a#25#1#0@@0|)) )))
(assert (forall ((d@@135 T@U) ) (!  (=> (= (type d@@135) DatatypeTypeType) (= (AsyncDisk.RespWrite.RespWrite_q d@@135) (= (DatatypeCtorId d@@135) |##AsyncDisk.RespWrite.RespWrite|))) :qid |unknown.0:0| :skolemid |2594| :pattern ( (AsyncDisk.RespWrite.RespWrite_q d@@135)) )))
(assert (forall ((d@@136 T@U) ) (!  (=> (and (= (type d@@136) DatatypeTypeType) (AsyncDisk.RespWrite.RespWrite_q d@@136)) (exists ((|a#26#0#0@@0| Int) (|a#26#1#0@@0| Int) ) (! (= d@@136 (|#AsyncDisk.RespWrite.RespWrite| |a#26#0#0@@0| |a#26#1#0@@0|)) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2595| ))) :qid |unknown.0:0| :skolemid |2596| :pattern ( (AsyncDisk.RespWrite.RespWrite_q d@@136)) )))
(assert (= (type Tclass.AsyncDisk.RespWrite) TyType))
(assert (= (Tag Tclass.AsyncDisk.RespWrite) Tagclass.AsyncDisk.RespWrite))
(assert (= (TagFamily Tclass.AsyncDisk.RespWrite) tytagFamily$RespWrite))
(assert (forall ((bx@@173 T@U) ) (!  (=> (and (= (type bx@@173) BoxType) ($IsBox bx@@173 Tclass.AsyncDisk.RespWrite)) (and (= ($Box ($Unbox DatatypeTypeType bx@@173)) bx@@173) ($Is ($Unbox DatatypeTypeType bx@@173) Tclass.AsyncDisk.RespWrite))) :qid |unknown.0:0| :skolemid |2597| :pattern ( ($IsBox bx@@173 Tclass.AsyncDisk.RespWrite)) )))
(assert (forall ((|a#27#0#0@@0| Int) (|a#27#1#0@@0| Int) ) (! (= ($Is (|#AsyncDisk.RespWrite.RespWrite| |a#27#0#0@@0| |a#27#1#0@@0|) Tclass.AsyncDisk.RespWrite)  (and ($Is (int_2_U |a#27#0#0@@0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#27#1#0@@0|) Tclass.NativeTypes.uint64))) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2598| :pattern ( ($Is (|#AsyncDisk.RespWrite.RespWrite| |a#27#0#0@@0| |a#27#1#0@@0|) Tclass.AsyncDisk.RespWrite)) )))
(assert (forall ((|a#28#0#0@@0| Int) (|a#28#1#0@@0| Int) ($h@@154 T@U) ) (!  (=> (and (= (type $h@@154) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@154)) (= ($IsAlloc (|#AsyncDisk.RespWrite.RespWrite| |a#28#0#0@@0| |a#28#1#0@@0|) Tclass.AsyncDisk.RespWrite $h@@154)  (and ($IsAlloc (int_2_U |a#28#0#0@@0|) Tclass.NativeTypes.uint64 $h@@154) ($IsAlloc (int_2_U |a#28#1#0@@0|) Tclass.NativeTypes.uint64 $h@@154)))) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2599| :pattern ( ($IsAlloc (|#AsyncDisk.RespWrite.RespWrite| |a#28#0#0@@0| |a#28#1#0@@0|) Tclass.AsyncDisk.RespWrite $h@@154)) )))
(assert (forall ((d@@137 T@U) ($h@@155 T@U) ) (!  (=> (and (and (= (type d@@137) DatatypeTypeType) (= (type $h@@155) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@155) (and (AsyncDisk.RespWrite.RespWrite_q d@@137) ($IsAlloc d@@137 Tclass.AsyncDisk.RespWrite $h@@155)))) ($IsAlloc (int_2_U (AsyncDisk.RespWrite.addr d@@137)) Tclass.NativeTypes.uint64 $h@@155)) :qid |unknown.0:0| :skolemid |2600| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.RespWrite.addr d@@137)) Tclass.NativeTypes.uint64 $h@@155)) )))
(assert (forall ((d@@138 T@U) ($h@@156 T@U) ) (!  (=> (and (and (= (type d@@138) DatatypeTypeType) (= (type $h@@156) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@156) (and (AsyncDisk.RespWrite.RespWrite_q d@@138) ($IsAlloc d@@138 Tclass.AsyncDisk.RespWrite $h@@156)))) ($IsAlloc (int_2_U (AsyncDisk.RespWrite.len d@@138)) Tclass.NativeTypes.uint64 $h@@156)) :qid |unknown.0:0| :skolemid |2601| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.RespWrite.len d@@138)) Tclass.NativeTypes.uint64 $h@@156)) )))
(assert (forall ((|a#29#0#0@@1| Int) (|a#29#1#0@@0| Int) ) (! (= (|#AsyncDisk.RespWrite.RespWrite| (LitInt |a#29#0#0@@1|) (LitInt |a#29#1#0@@0|)) (Lit (|#AsyncDisk.RespWrite.RespWrite| |a#29#0#0@@1| |a#29#1#0@@0|))) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2602| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| (LitInt |a#29#0#0@@1|) (LitInt |a#29#1#0@@0|))) )))
(assert (forall ((|a#30#0#0@@1| Int) (|a#30#1#0@@0| Int) ) (! (= (AsyncDisk.RespWrite.addr (|#AsyncDisk.RespWrite.RespWrite| |a#30#0#0@@1| |a#30#1#0@@0|)) |a#30#0#0@@1|) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2603| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| |a#30#0#0@@1| |a#30#1#0@@0|)) )))
(assert (forall ((|a#31#0#0@@1| Int) (|a#31#1#0@@0| Int) ) (! (= (AsyncDisk.RespWrite.len (|#AsyncDisk.RespWrite.RespWrite| |a#31#0#0@@1| |a#31#1#0@@0|)) |a#31#1#0@@0|) :qid |AsyncDiskModelsdfy.28:34| :skolemid |2604| :pattern ( (|#AsyncDisk.RespWrite.RespWrite| |a#31#0#0@@1| |a#31#1#0@@0|)) )))
(assert (forall ((d@@139 T@U) ) (!  (=> (and (= (type d@@139) DatatypeTypeType) (|$IsA#AsyncDisk.RespWrite| d@@139)) (AsyncDisk.RespWrite.RespWrite_q d@@139)) :qid |unknown.0:0| :skolemid |2605| :pattern ( (|$IsA#AsyncDisk.RespWrite| d@@139)) )))
(assert (forall ((d@@140 T@U) ) (!  (=> (and (= (type d@@140) DatatypeTypeType) ($Is d@@140 Tclass.AsyncDisk.RespWrite)) (AsyncDisk.RespWrite.RespWrite_q d@@140)) :qid |unknown.0:0| :skolemid |2606| :pattern ( (AsyncDisk.RespWrite.RespWrite_q d@@140) ($Is d@@140 Tclass.AsyncDisk.RespWrite)) )))
(assert (forall ((a@@171 T@U) (b@@108 T@U) ) (!  (=> (and (and (= (type a@@171) DatatypeTypeType) (= (type b@@108) DatatypeTypeType)) true) (= (|AsyncDisk.RespWrite#Equal| a@@171 b@@108)  (and (= (AsyncDisk.RespWrite.addr a@@171) (AsyncDisk.RespWrite.addr b@@108)) (= (AsyncDisk.RespWrite.len a@@171) (AsyncDisk.RespWrite.len b@@108))))) :qid |unknown.0:0| :skolemid |2607| :pattern ( (|AsyncDisk.RespWrite#Equal| a@@171 b@@108)) )))
(assert (forall ((a@@172 T@U) (b@@109 T@U) ) (!  (=> (and (= (type a@@172) DatatypeTypeType) (= (type b@@109) DatatypeTypeType)) (= (|AsyncDisk.RespWrite#Equal| a@@172 b@@109) (= a@@172 b@@109))) :qid |unknown.0:0| :skolemid |2608| :pattern ( (|AsyncDisk.RespWrite#Equal| a@@172 b@@109)) )))
(assert (forall ((arg0@@611 Int) (arg1@@291 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.ReqReadOp| arg0@@611 arg1@@291)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.ReqReadOp| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| arg0@@611 arg1@@291)) )))
(assert (forall ((|a#32#0#0@@1| Int) (|a#32#1#0@@0| T@U) ) (!  (=> (= (type |a#32#1#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.ReqReadOp| |a#32#0#0@@1| |a#32#1#0@@0|)) |##AsyncDisk.DiskOp.ReqReadOp|)) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2609| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| |a#32#0#0@@1| |a#32#1#0@@0|)) )))
(assert (forall ((d@@141 T@U) ) (!  (=> (= (type d@@141) DatatypeTypeType) (= (AsyncDisk.DiskOp.ReqReadOp_q d@@141) (= (DatatypeCtorId d@@141) |##AsyncDisk.DiskOp.ReqReadOp|))) :qid |unknown.0:0| :skolemid |2610| :pattern ( (AsyncDisk.DiskOp.ReqReadOp_q d@@141)) )))
(assert (forall ((d@@142 T@U) ) (!  (=> (and (= (type d@@142) DatatypeTypeType) (AsyncDisk.DiskOp.ReqReadOp_q d@@142)) (exists ((|a#33#0#0@@1| Int) (|a#33#1#0@@0| T@U) ) (!  (and (= (type |a#33#1#0@@0|) DatatypeTypeType) (= d@@142 (|#AsyncDisk.DiskOp.ReqReadOp| |a#33#0#0@@1| |a#33#1#0@@0|))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2611| :no-pattern (type |a#33#1#0@@0|) :no-pattern (U_2_int |a#33#1#0@@0|) :no-pattern (U_2_bool |a#33#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2612| :pattern ( (AsyncDisk.DiskOp.ReqReadOp_q d@@142)) )))
(assert (= (type Tclass.AsyncDisk.DiskOp) TyType))
(assert (= (Tag Tclass.AsyncDisk.DiskOp) Tagclass.AsyncDisk.DiskOp))
(assert (= (TagFamily Tclass.AsyncDisk.DiskOp) tytagFamily$DiskOp))
(assert (forall ((bx@@174 T@U) ) (!  (=> (and (= (type bx@@174) BoxType) ($IsBox bx@@174 Tclass.AsyncDisk.DiskOp)) (and (= ($Box ($Unbox DatatypeTypeType bx@@174)) bx@@174) ($Is ($Unbox DatatypeTypeType bx@@174) Tclass.AsyncDisk.DiskOp))) :qid |unknown.0:0| :skolemid |2613| :pattern ( ($IsBox bx@@174 Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#34#0#0@@0| Int) (|a#34#1#0| T@U) ) (!  (=> (= (type |a#34#1#0|) DatatypeTypeType) (= ($Is (|#AsyncDisk.DiskOp.ReqReadOp| |a#34#0#0@@0| |a#34#1#0|) Tclass.AsyncDisk.DiskOp)  (and ($Is (int_2_U |a#34#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#34#1#0| Tclass.AsyncDisk.ReqRead)))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2614| :pattern ( ($Is (|#AsyncDisk.DiskOp.ReqReadOp| |a#34#0#0@@0| |a#34#1#0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#35#0#0@@0| Int) (|a#35#1#0| T@U) ($h@@157 T@U) ) (!  (=> (and (and (= (type |a#35#1#0|) DatatypeTypeType) (= (type $h@@157) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@157)) (= ($IsAlloc (|#AsyncDisk.DiskOp.ReqReadOp| |a#35#0#0@@0| |a#35#1#0|) Tclass.AsyncDisk.DiskOp $h@@157)  (and ($IsAlloc (int_2_U |a#35#0#0@@0|) Tclass.NativeTypes.uint64 $h@@157) ($IsAlloc |a#35#1#0| Tclass.AsyncDisk.ReqRead $h@@157)))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2615| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.ReqReadOp| |a#35#0#0@@0| |a#35#1#0|) Tclass.AsyncDisk.DiskOp $h@@157)) )))
(assert (forall ((d@@143 T@U) ($h@@158 T@U) ) (!  (=> (and (and (= (type d@@143) DatatypeTypeType) (= (type $h@@158) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@158) (and (AsyncDisk.DiskOp.ReqReadOp_q d@@143) ($IsAlloc d@@143 Tclass.AsyncDisk.DiskOp $h@@158)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@143)) Tclass.NativeTypes.uint64 $h@@158)) :qid |unknown.0:0| :skolemid |2616| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@143)) Tclass.NativeTypes.uint64 $h@@158)) )))
(assert (forall ((arg0@@612 T@U) ) (! (= (type (AsyncDisk.DiskOp.reqRead arg0@@612)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.reqRead| :pattern ( (AsyncDisk.DiskOp.reqRead arg0@@612)) )))
(assert (forall ((d@@144 T@U) ($h@@159 T@U) ) (!  (=> (and (and (= (type d@@144) DatatypeTypeType) (= (type $h@@159) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@159) (and (AsyncDisk.DiskOp.ReqReadOp_q d@@144) ($IsAlloc d@@144 Tclass.AsyncDisk.DiskOp $h@@159)))) ($IsAlloc (AsyncDisk.DiskOp.reqRead d@@144) Tclass.AsyncDisk.ReqRead $h@@159)) :qid |unknown.0:0| :skolemid |2617| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.reqRead d@@144) Tclass.AsyncDisk.ReqRead $h@@159)) )))
(assert (forall ((|a#36#0#0@@0| Int) (|a#36#1#0| T@U) ) (!  (=> (= (type |a#36#1#0|) DatatypeTypeType) (= (|#AsyncDisk.DiskOp.ReqReadOp| (LitInt |a#36#0#0@@0|) (Lit |a#36#1#0|)) (Lit (|#AsyncDisk.DiskOp.ReqReadOp| |a#36#0#0@@0| |a#36#1#0|)))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2618| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| (LitInt |a#36#0#0@@0|) (Lit |a#36#1#0|))) )))
(assert (forall ((|a#37#0#0@@0| Int) (|a#37#1#0| T@U) ) (!  (=> (= (type |a#37#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.id (|#AsyncDisk.DiskOp.ReqReadOp| |a#37#0#0@@0| |a#37#1#0|)) |a#37#0#0@@0|)) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2619| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| |a#37#0#0@@0| |a#37#1#0|)) )))
(assert (forall ((|a#38#0#0@@0| Int) (|a#38#1#0| T@U) ) (!  (=> (= (type |a#38#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.reqRead (|#AsyncDisk.DiskOp.ReqReadOp| |a#38#0#0@@0| |a#38#1#0|)) |a#38#1#0|)) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2620| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| |a#38#0#0@@0| |a#38#1#0|)) )))
(assert (forall ((|a#39#0#0@@0| Int) (|a#39#1#0| T@U) ) (!  (=> (= (type |a#39#1#0|) DatatypeTypeType) (< (DtRank |a#39#1#0|) (DtRank (|#AsyncDisk.DiskOp.ReqReadOp| |a#39#0#0@@0| |a#39#1#0|)))) :qid |AsyncDiskModelsdfy.31:17| :skolemid |2621| :pattern ( (|#AsyncDisk.DiskOp.ReqReadOp| |a#39#0#0@@0| |a#39#1#0|)) )))
(assert (forall ((arg0@@613 Int) (arg1@@292 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.ReqWriteOp| arg0@@613 arg1@@292)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.ReqWriteOp| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| arg0@@613 arg1@@292)) )))
(assert (forall ((|a#40#0#0@@0| Int) (|a#40#1#0| T@U) ) (!  (=> (= (type |a#40#1#0|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.ReqWriteOp| |a#40#0#0@@0| |a#40#1#0|)) |##AsyncDisk.DiskOp.ReqWriteOp|)) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2622| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| |a#40#0#0@@0| |a#40#1#0|)) )))
(assert (forall ((d@@145 T@U) ) (!  (=> (= (type d@@145) DatatypeTypeType) (= (AsyncDisk.DiskOp.ReqWriteOp_q d@@145) (= (DatatypeCtorId d@@145) |##AsyncDisk.DiskOp.ReqWriteOp|))) :qid |unknown.0:0| :skolemid |2623| :pattern ( (AsyncDisk.DiskOp.ReqWriteOp_q d@@145)) )))
(assert (forall ((d@@146 T@U) ) (!  (=> (and (= (type d@@146) DatatypeTypeType) (AsyncDisk.DiskOp.ReqWriteOp_q d@@146)) (exists ((|a#41#0#0| Int) (|a#41#1#0| T@U) ) (!  (and (= (type |a#41#1#0|) DatatypeTypeType) (= d@@146 (|#AsyncDisk.DiskOp.ReqWriteOp| |a#41#0#0| |a#41#1#0|))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2624| :no-pattern (type |a#41#1#0|) :no-pattern (U_2_int |a#41#1#0|) :no-pattern (U_2_bool |a#41#1#0|) ))) :qid |unknown.0:0| :skolemid |2625| :pattern ( (AsyncDisk.DiskOp.ReqWriteOp_q d@@146)) )))
(assert (forall ((|a#42#0#0| Int) (|a#42#1#0| T@U) ) (!  (=> (= (type |a#42#1#0|) DatatypeTypeType) (= ($Is (|#AsyncDisk.DiskOp.ReqWriteOp| |a#42#0#0| |a#42#1#0|) Tclass.AsyncDisk.DiskOp)  (and ($Is (int_2_U |a#42#0#0|) Tclass.NativeTypes.uint64) ($Is |a#42#1#0| Tclass.AsyncDisk.ReqWrite)))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2626| :pattern ( ($Is (|#AsyncDisk.DiskOp.ReqWriteOp| |a#42#0#0| |a#42#1#0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#43#0#0| Int) (|a#43#1#0| T@U) ($h@@160 T@U) ) (!  (=> (and (and (= (type |a#43#1#0|) DatatypeTypeType) (= (type $h@@160) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@160)) (= ($IsAlloc (|#AsyncDisk.DiskOp.ReqWriteOp| |a#43#0#0| |a#43#1#0|) Tclass.AsyncDisk.DiskOp $h@@160)  (and ($IsAlloc (int_2_U |a#43#0#0|) Tclass.NativeTypes.uint64 $h@@160) ($IsAlloc |a#43#1#0| Tclass.AsyncDisk.ReqWrite $h@@160)))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2627| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.ReqWriteOp| |a#43#0#0| |a#43#1#0|) Tclass.AsyncDisk.DiskOp $h@@160)) )))
(assert (forall ((d@@147 T@U) ($h@@161 T@U) ) (!  (=> (and (and (= (type d@@147) DatatypeTypeType) (= (type $h@@161) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@161) (and (AsyncDisk.DiskOp.ReqWriteOp_q d@@147) ($IsAlloc d@@147 Tclass.AsyncDisk.DiskOp $h@@161)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@147)) Tclass.NativeTypes.uint64 $h@@161)) :qid |unknown.0:0| :skolemid |2628| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@147)) Tclass.NativeTypes.uint64 $h@@161)) )))
(assert (forall ((arg0@@614 T@U) ) (! (= (type (AsyncDisk.DiskOp.reqWrite arg0@@614)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.reqWrite| :pattern ( (AsyncDisk.DiskOp.reqWrite arg0@@614)) )))
(assert (forall ((d@@148 T@U) ($h@@162 T@U) ) (!  (=> (and (and (= (type d@@148) DatatypeTypeType) (= (type $h@@162) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@162) (and (AsyncDisk.DiskOp.ReqWriteOp_q d@@148) ($IsAlloc d@@148 Tclass.AsyncDisk.DiskOp $h@@162)))) ($IsAlloc (AsyncDisk.DiskOp.reqWrite d@@148) Tclass.AsyncDisk.ReqWrite $h@@162)) :qid |unknown.0:0| :skolemid |2629| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.reqWrite d@@148) Tclass.AsyncDisk.ReqWrite $h@@162)) )))
(assert (forall ((|a#44#0#0| Int) (|a#44#1#0| T@U) ) (!  (=> (= (type |a#44#1#0|) DatatypeTypeType) (= (|#AsyncDisk.DiskOp.ReqWriteOp| (LitInt |a#44#0#0|) (Lit |a#44#1#0|)) (Lit (|#AsyncDisk.DiskOp.ReqWriteOp| |a#44#0#0| |a#44#1#0|)))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2630| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| (LitInt |a#44#0#0|) (Lit |a#44#1#0|))) )))
(assert (forall ((|a#45#0#0| Int) (|a#45#1#0| T@U) ) (!  (=> (= (type |a#45#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.id (|#AsyncDisk.DiskOp.ReqWriteOp| |a#45#0#0| |a#45#1#0|)) |a#45#0#0|)) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2631| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| |a#45#0#0| |a#45#1#0|)) )))
(assert (forall ((|a#46#0#0@@0| Int) (|a#46#1#0@@0| T@U) ) (!  (=> (= (type |a#46#1#0@@0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.reqWrite (|#AsyncDisk.DiskOp.ReqWriteOp| |a#46#0#0@@0| |a#46#1#0@@0|)) |a#46#1#0@@0|)) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2632| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| |a#46#0#0@@0| |a#46#1#0@@0|)) )))
(assert (forall ((|a#47#0#0@@0| Int) (|a#47#1#0@@0| T@U) ) (!  (=> (= (type |a#47#1#0@@0|) DatatypeTypeType) (< (DtRank |a#47#1#0@@0|) (DtRank (|#AsyncDisk.DiskOp.ReqWriteOp| |a#47#0#0@@0| |a#47#1#0@@0|)))) :qid |AsyncDiskModelsdfy.32:18| :skolemid |2633| :pattern ( (|#AsyncDisk.DiskOp.ReqWriteOp| |a#47#0#0@@0| |a#47#1#0@@0|)) )))
(assert (forall ((arg0@@615 Int) (arg1@@293 Int) (arg2@@164 T@U) (arg3@@105 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.ReqWrite2Op| arg0@@615 arg1@@293 arg2@@164 arg3@@105)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.ReqWrite2Op| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| arg0@@615 arg1@@293 arg2@@164 arg3@@105)) )))
(assert (forall ((|a#48#0#0@@0| Int) (|a#48#1#0@@0| Int) (|a#48#2#0| T@U) (|a#48#3#0| T@U) ) (!  (=> (and (= (type |a#48#2#0|) DatatypeTypeType) (= (type |a#48#3#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#48#0#0@@0| |a#48#1#0@@0| |a#48#2#0| |a#48#3#0|)) |##AsyncDisk.DiskOp.ReqWrite2Op|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2634| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#48#0#0@@0| |a#48#1#0@@0| |a#48#2#0| |a#48#3#0|)) )))
(assert (forall ((d@@149 T@U) ) (!  (=> (= (type d@@149) DatatypeTypeType) (= (AsyncDisk.DiskOp.ReqWrite2Op_q d@@149) (= (DatatypeCtorId d@@149) |##AsyncDisk.DiskOp.ReqWrite2Op|))) :qid |unknown.0:0| :skolemid |2635| :pattern ( (AsyncDisk.DiskOp.ReqWrite2Op_q d@@149)) )))
(assert (forall ((d@@150 T@U) ) (!  (=> (and (= (type d@@150) DatatypeTypeType) (AsyncDisk.DiskOp.ReqWrite2Op_q d@@150)) (exists ((|a#49#0#0@@0| Int) (|a#49#1#0@@0| Int) (|a#49#2#0| T@U) (|a#49#3#0| T@U) ) (!  (and (and (= (type |a#49#2#0|) DatatypeTypeType) (= (type |a#49#3#0|) DatatypeTypeType)) (= d@@150 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#49#0#0@@0| |a#49#1#0@@0| |a#49#2#0| |a#49#3#0|))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2636| :no-pattern (type |a#49#2#0|) :no-pattern (type |a#49#3#0|) :no-pattern (U_2_int |a#49#2#0|) :no-pattern (U_2_bool |a#49#2#0|) :no-pattern (U_2_int |a#49#3#0|) :no-pattern (U_2_bool |a#49#3#0|) ))) :qid |unknown.0:0| :skolemid |2637| :pattern ( (AsyncDisk.DiskOp.ReqWrite2Op_q d@@150)) )))
(assert (forall ((|a#50#0#0@@0| Int) (|a#50#1#0@@0| Int) (|a#50#2#0| T@U) (|a#50#3#0| T@U) ) (!  (=> (and (= (type |a#50#2#0|) DatatypeTypeType) (= (type |a#50#3#0|) DatatypeTypeType)) (= ($Is (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#50#0#0@@0| |a#50#1#0@@0| |a#50#2#0| |a#50#3#0|) Tclass.AsyncDisk.DiskOp)  (and (and (and ($Is (int_2_U |a#50#0#0@@0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#50#1#0@@0|) Tclass.NativeTypes.uint64)) ($Is |a#50#2#0| Tclass.AsyncDisk.ReqWrite)) ($Is |a#50#3#0| Tclass.AsyncDisk.ReqWrite)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2638| :pattern ( ($Is (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#50#0#0@@0| |a#50#1#0@@0| |a#50#2#0| |a#50#3#0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#51#0#0@@0| Int) (|a#51#1#0@@0| Int) (|a#51#2#0| T@U) (|a#51#3#0| T@U) ($h@@163 T@U) ) (!  (=> (and (and (and (= (type |a#51#2#0|) DatatypeTypeType) (= (type |a#51#3#0|) DatatypeTypeType)) (= (type $h@@163) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@163)) (= ($IsAlloc (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#51#0#0@@0| |a#51#1#0@@0| |a#51#2#0| |a#51#3#0|) Tclass.AsyncDisk.DiskOp $h@@163)  (and (and (and ($IsAlloc (int_2_U |a#51#0#0@@0|) Tclass.NativeTypes.uint64 $h@@163) ($IsAlloc (int_2_U |a#51#1#0@@0|) Tclass.NativeTypes.uint64 $h@@163)) ($IsAlloc |a#51#2#0| Tclass.AsyncDisk.ReqWrite $h@@163)) ($IsAlloc |a#51#3#0| Tclass.AsyncDisk.ReqWrite $h@@163)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2639| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#51#0#0@@0| |a#51#1#0@@0| |a#51#2#0| |a#51#3#0|) Tclass.AsyncDisk.DiskOp $h@@163)) )))
(assert (forall ((d@@151 T@U) ($h@@164 T@U) ) (!  (=> (and (and (= (type d@@151) DatatypeTypeType) (= (type $h@@164) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@164) (and (AsyncDisk.DiskOp.ReqWrite2Op_q d@@151) ($IsAlloc d@@151 Tclass.AsyncDisk.DiskOp $h@@164)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id1 d@@151)) Tclass.NativeTypes.uint64 $h@@164)) :qid |unknown.0:0| :skolemid |2640| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id1 d@@151)) Tclass.NativeTypes.uint64 $h@@164)) )))
(assert (forall ((d@@152 T@U) ($h@@165 T@U) ) (!  (=> (and (and (= (type d@@152) DatatypeTypeType) (= (type $h@@165) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@165) (and (AsyncDisk.DiskOp.ReqWrite2Op_q d@@152) ($IsAlloc d@@152 Tclass.AsyncDisk.DiskOp $h@@165)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id2 d@@152)) Tclass.NativeTypes.uint64 $h@@165)) :qid |unknown.0:0| :skolemid |2641| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id2 d@@152)) Tclass.NativeTypes.uint64 $h@@165)) )))
(assert (forall ((arg0@@616 T@U) ) (! (= (type (AsyncDisk.DiskOp.reqWrite1 arg0@@616)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.reqWrite1| :pattern ( (AsyncDisk.DiskOp.reqWrite1 arg0@@616)) )))
(assert (forall ((d@@153 T@U) ($h@@166 T@U) ) (!  (=> (and (and (= (type d@@153) DatatypeTypeType) (= (type $h@@166) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@166) (and (AsyncDisk.DiskOp.ReqWrite2Op_q d@@153) ($IsAlloc d@@153 Tclass.AsyncDisk.DiskOp $h@@166)))) ($IsAlloc (AsyncDisk.DiskOp.reqWrite1 d@@153) Tclass.AsyncDisk.ReqWrite $h@@166)) :qid |unknown.0:0| :skolemid |2642| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.reqWrite1 d@@153) Tclass.AsyncDisk.ReqWrite $h@@166)) )))
(assert (forall ((arg0@@617 T@U) ) (! (= (type (AsyncDisk.DiskOp.reqWrite2 arg0@@617)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.reqWrite2| :pattern ( (AsyncDisk.DiskOp.reqWrite2 arg0@@617)) )))
(assert (forall ((d@@154 T@U) ($h@@167 T@U) ) (!  (=> (and (and (= (type d@@154) DatatypeTypeType) (= (type $h@@167) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@167) (and (AsyncDisk.DiskOp.ReqWrite2Op_q d@@154) ($IsAlloc d@@154 Tclass.AsyncDisk.DiskOp $h@@167)))) ($IsAlloc (AsyncDisk.DiskOp.reqWrite2 d@@154) Tclass.AsyncDisk.ReqWrite $h@@167)) :qid |unknown.0:0| :skolemid |2643| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.reqWrite2 d@@154) Tclass.AsyncDisk.ReqWrite $h@@167)) )))
(assert (forall ((|a#52#0#0@@0| Int) (|a#52#1#0@@0| Int) (|a#52#2#0| T@U) (|a#52#3#0| T@U) ) (!  (=> (and (= (type |a#52#2#0|) DatatypeTypeType) (= (type |a#52#3#0|) DatatypeTypeType)) (= (|#AsyncDisk.DiskOp.ReqWrite2Op| (LitInt |a#52#0#0@@0|) (LitInt |a#52#1#0@@0|) (Lit |a#52#2#0|) (Lit |a#52#3#0|)) (Lit (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#52#0#0@@0| |a#52#1#0@@0| |a#52#2#0| |a#52#3#0|)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2644| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| (LitInt |a#52#0#0@@0|) (LitInt |a#52#1#0@@0|) (Lit |a#52#2#0|) (Lit |a#52#3#0|))) )))
(assert (forall ((|a#53#0#0@@0| Int) (|a#53#1#0@@0| Int) (|a#53#2#0| T@U) (|a#53#3#0| T@U) ) (!  (=> (and (= (type |a#53#2#0|) DatatypeTypeType) (= (type |a#53#3#0|) DatatypeTypeType)) (= (AsyncDisk.DiskOp.id1 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#53#0#0@@0| |a#53#1#0@@0| |a#53#2#0| |a#53#3#0|)) |a#53#0#0@@0|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2645| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#53#0#0@@0| |a#53#1#0@@0| |a#53#2#0| |a#53#3#0|)) )))
(assert (forall ((|a#54#0#0@@0| Int) (|a#54#1#0@@0| Int) (|a#54#2#0| T@U) (|a#54#3#0| T@U) ) (!  (=> (and (= (type |a#54#2#0|) DatatypeTypeType) (= (type |a#54#3#0|) DatatypeTypeType)) (= (AsyncDisk.DiskOp.id2 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#54#0#0@@0| |a#54#1#0@@0| |a#54#2#0| |a#54#3#0|)) |a#54#1#0@@0|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2646| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#54#0#0@@0| |a#54#1#0@@0| |a#54#2#0| |a#54#3#0|)) )))
(assert (forall ((|a#55#0#0@@0| Int) (|a#55#1#0@@0| Int) (|a#55#2#0| T@U) (|a#55#3#0| T@U) ) (!  (=> (and (= (type |a#55#2#0|) DatatypeTypeType) (= (type |a#55#3#0|) DatatypeTypeType)) (= (AsyncDisk.DiskOp.reqWrite1 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#55#0#0@@0| |a#55#1#0@@0| |a#55#2#0| |a#55#3#0|)) |a#55#2#0|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2647| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#55#0#0@@0| |a#55#1#0@@0| |a#55#2#0| |a#55#3#0|)) )))
(assert (forall ((|a#56#0#0@@0| Int) (|a#56#1#0@@0| Int) (|a#56#2#0| T@U) (|a#56#3#0| T@U) ) (!  (=> (and (= (type |a#56#2#0|) DatatypeTypeType) (= (type |a#56#3#0|) DatatypeTypeType)) (< (DtRank |a#56#2#0|) (DtRank (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#56#0#0@@0| |a#56#1#0@@0| |a#56#2#0| |a#56#3#0|)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2648| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#56#0#0@@0| |a#56#1#0@@0| |a#56#2#0| |a#56#3#0|)) )))
(assert (forall ((|a#57#0#0@@0| Int) (|a#57#1#0@@0| Int) (|a#57#2#0| T@U) (|a#57#3#0| T@U) ) (!  (=> (and (= (type |a#57#2#0|) DatatypeTypeType) (= (type |a#57#3#0|) DatatypeTypeType)) (= (AsyncDisk.DiskOp.reqWrite2 (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#57#0#0@@0| |a#57#1#0@@0| |a#57#2#0| |a#57#3#0|)) |a#57#3#0|)) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2649| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#57#0#0@@0| |a#57#1#0@@0| |a#57#2#0| |a#57#3#0|)) )))
(assert (forall ((|a#58#0#0@@0| Int) (|a#58#1#0@@0| Int) (|a#58#2#0| T@U) (|a#58#3#0| T@U) ) (!  (=> (and (= (type |a#58#2#0|) DatatypeTypeType) (= (type |a#58#3#0|) DatatypeTypeType)) (< (DtRank |a#58#3#0|) (DtRank (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#58#0#0@@0| |a#58#1#0@@0| |a#58#2#0| |a#58#3#0|)))) :qid |AsyncDiskModelsdfy.33:19| :skolemid |2650| :pattern ( (|#AsyncDisk.DiskOp.ReqWrite2Op| |a#58#0#0@@0| |a#58#1#0@@0| |a#58#2#0| |a#58#3#0|)) )))
(assert (forall ((arg0@@618 Int) (arg1@@294 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.RespReadOp| arg0@@618 arg1@@294)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.RespReadOp| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| arg0@@618 arg1@@294)) )))
(assert (forall ((|a#59#0#0@@0| Int) (|a#59#1#0@@0| T@U) ) (!  (=> (= (type |a#59#1#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.RespReadOp| |a#59#0#0@@0| |a#59#1#0@@0|)) |##AsyncDisk.DiskOp.RespReadOp|)) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2651| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| |a#59#0#0@@0| |a#59#1#0@@0|)) )))
(assert (forall ((d@@155 T@U) ) (!  (=> (= (type d@@155) DatatypeTypeType) (= (AsyncDisk.DiskOp.RespReadOp_q d@@155) (= (DatatypeCtorId d@@155) |##AsyncDisk.DiskOp.RespReadOp|))) :qid |unknown.0:0| :skolemid |2652| :pattern ( (AsyncDisk.DiskOp.RespReadOp_q d@@155)) )))
(assert (forall ((d@@156 T@U) ) (!  (=> (and (= (type d@@156) DatatypeTypeType) (AsyncDisk.DiskOp.RespReadOp_q d@@156)) (exists ((|a#60#0#0@@0| Int) (|a#60#1#0@@0| T@U) ) (!  (and (= (type |a#60#1#0@@0|) DatatypeTypeType) (= d@@156 (|#AsyncDisk.DiskOp.RespReadOp| |a#60#0#0@@0| |a#60#1#0@@0|))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2653| :no-pattern (type |a#60#1#0@@0|) :no-pattern (U_2_int |a#60#1#0@@0|) :no-pattern (U_2_bool |a#60#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2654| :pattern ( (AsyncDisk.DiskOp.RespReadOp_q d@@156)) )))
(assert (forall ((|a#61#0#0@@0| Int) (|a#61#1#0@@0| T@U) ) (!  (=> (= (type |a#61#1#0@@0|) DatatypeTypeType) (= ($Is (|#AsyncDisk.DiskOp.RespReadOp| |a#61#0#0@@0| |a#61#1#0@@0|) Tclass.AsyncDisk.DiskOp)  (and ($Is (int_2_U |a#61#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#61#1#0@@0| Tclass.AsyncDisk.RespRead)))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2655| :pattern ( ($Is (|#AsyncDisk.DiskOp.RespReadOp| |a#61#0#0@@0| |a#61#1#0@@0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#62#0#0@@0| Int) (|a#62#1#0@@0| T@U) ($h@@168 T@U) ) (!  (=> (and (and (= (type |a#62#1#0@@0|) DatatypeTypeType) (= (type $h@@168) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@168)) (= ($IsAlloc (|#AsyncDisk.DiskOp.RespReadOp| |a#62#0#0@@0| |a#62#1#0@@0|) Tclass.AsyncDisk.DiskOp $h@@168)  (and ($IsAlloc (int_2_U |a#62#0#0@@0|) Tclass.NativeTypes.uint64 $h@@168) ($IsAlloc |a#62#1#0@@0| Tclass.AsyncDisk.RespRead $h@@168)))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2656| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.RespReadOp| |a#62#0#0@@0| |a#62#1#0@@0|) Tclass.AsyncDisk.DiskOp $h@@168)) )))
(assert (forall ((d@@157 T@U) ($h@@169 T@U) ) (!  (=> (and (and (= (type d@@157) DatatypeTypeType) (= (type $h@@169) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@169) (and (AsyncDisk.DiskOp.RespReadOp_q d@@157) ($IsAlloc d@@157 Tclass.AsyncDisk.DiskOp $h@@169)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@157)) Tclass.NativeTypes.uint64 $h@@169)) :qid |unknown.0:0| :skolemid |2657| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@157)) Tclass.NativeTypes.uint64 $h@@169)) )))
(assert (forall ((arg0@@619 T@U) ) (! (= (type (AsyncDisk.DiskOp.respRead arg0@@619)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.respRead| :pattern ( (AsyncDisk.DiskOp.respRead arg0@@619)) )))
(assert (forall ((d@@158 T@U) ($h@@170 T@U) ) (!  (=> (and (and (= (type d@@158) DatatypeTypeType) (= (type $h@@170) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@170) (and (AsyncDisk.DiskOp.RespReadOp_q d@@158) ($IsAlloc d@@158 Tclass.AsyncDisk.DiskOp $h@@170)))) ($IsAlloc (AsyncDisk.DiskOp.respRead d@@158) Tclass.AsyncDisk.RespRead $h@@170)) :qid |unknown.0:0| :skolemid |2658| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.respRead d@@158) Tclass.AsyncDisk.RespRead $h@@170)) )))
(assert (forall ((|a#63#0#0| Int) (|a#63#1#0| T@U) ) (!  (=> (= (type |a#63#1#0|) DatatypeTypeType) (= (|#AsyncDisk.DiskOp.RespReadOp| (LitInt |a#63#0#0|) (Lit |a#63#1#0|)) (Lit (|#AsyncDisk.DiskOp.RespReadOp| |a#63#0#0| |a#63#1#0|)))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2659| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| (LitInt |a#63#0#0|) (Lit |a#63#1#0|))) )))
(assert (forall ((|a#64#0#0| Int) (|a#64#1#0| T@U) ) (!  (=> (= (type |a#64#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.id (|#AsyncDisk.DiskOp.RespReadOp| |a#64#0#0| |a#64#1#0|)) |a#64#0#0|)) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2660| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| |a#64#0#0| |a#64#1#0|)) )))
(assert (forall ((|a#65#0#0| Int) (|a#65#1#0| T@U) ) (!  (=> (= (type |a#65#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.respRead (|#AsyncDisk.DiskOp.RespReadOp| |a#65#0#0| |a#65#1#0|)) |a#65#1#0|)) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2661| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| |a#65#0#0| |a#65#1#0|)) )))
(assert (forall ((|a#66#0#0| Int) (|a#66#1#0| T@U) ) (!  (=> (= (type |a#66#1#0|) DatatypeTypeType) (< (DtRank |a#66#1#0|) (DtRank (|#AsyncDisk.DiskOp.RespReadOp| |a#66#0#0| |a#66#1#0|)))) :qid |AsyncDiskModelsdfy.35:18| :skolemid |2662| :pattern ( (|#AsyncDisk.DiskOp.RespReadOp| |a#66#0#0| |a#66#1#0|)) )))
(assert (forall ((arg0@@620 Int) (arg1@@295 T@U) ) (! (= (type (|#AsyncDisk.DiskOp.RespWriteOp| arg0@@620 arg1@@295)) DatatypeTypeType) :qid |funType:#AsyncDisk.DiskOp.RespWriteOp| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| arg0@@620 arg1@@295)) )))
(assert (forall ((|a#67#0#0| Int) (|a#67#1#0| T@U) ) (!  (=> (= (type |a#67#1#0|) DatatypeTypeType) (= (DatatypeCtorId (|#AsyncDisk.DiskOp.RespWriteOp| |a#67#0#0| |a#67#1#0|)) |##AsyncDisk.DiskOp.RespWriteOp|)) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2663| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| |a#67#0#0| |a#67#1#0|)) )))
(assert (forall ((d@@159 T@U) ) (!  (=> (= (type d@@159) DatatypeTypeType) (= (AsyncDisk.DiskOp.RespWriteOp_q d@@159) (= (DatatypeCtorId d@@159) |##AsyncDisk.DiskOp.RespWriteOp|))) :qid |unknown.0:0| :skolemid |2664| :pattern ( (AsyncDisk.DiskOp.RespWriteOp_q d@@159)) )))
(assert (forall ((d@@160 T@U) ) (!  (=> (and (= (type d@@160) DatatypeTypeType) (AsyncDisk.DiskOp.RespWriteOp_q d@@160)) (exists ((|a#68#0#0| Int) (|a#68#1#0| T@U) ) (!  (and (= (type |a#68#1#0|) DatatypeTypeType) (= d@@160 (|#AsyncDisk.DiskOp.RespWriteOp| |a#68#0#0| |a#68#1#0|))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2665| :no-pattern (type |a#68#1#0|) :no-pattern (U_2_int |a#68#1#0|) :no-pattern (U_2_bool |a#68#1#0|) ))) :qid |unknown.0:0| :skolemid |2666| :pattern ( (AsyncDisk.DiskOp.RespWriteOp_q d@@160)) )))
(assert (forall ((|a#69#0#0| Int) (|a#69#1#0| T@U) ) (!  (=> (= (type |a#69#1#0|) DatatypeTypeType) (= ($Is (|#AsyncDisk.DiskOp.RespWriteOp| |a#69#0#0| |a#69#1#0|) Tclass.AsyncDisk.DiskOp)  (and ($Is (int_2_U |a#69#0#0|) Tclass.NativeTypes.uint64) ($Is |a#69#1#0| Tclass.AsyncDisk.RespWrite)))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2667| :pattern ( ($Is (|#AsyncDisk.DiskOp.RespWriteOp| |a#69#0#0| |a#69#1#0|) Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((|a#70#0#0| Int) (|a#70#1#0| T@U) ($h@@171 T@U) ) (!  (=> (and (and (= (type |a#70#1#0|) DatatypeTypeType) (= (type $h@@171) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@171)) (= ($IsAlloc (|#AsyncDisk.DiskOp.RespWriteOp| |a#70#0#0| |a#70#1#0|) Tclass.AsyncDisk.DiskOp $h@@171)  (and ($IsAlloc (int_2_U |a#70#0#0|) Tclass.NativeTypes.uint64 $h@@171) ($IsAlloc |a#70#1#0| Tclass.AsyncDisk.RespWrite $h@@171)))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2668| :pattern ( ($IsAlloc (|#AsyncDisk.DiskOp.RespWriteOp| |a#70#0#0| |a#70#1#0|) Tclass.AsyncDisk.DiskOp $h@@171)) )))
(assert (forall ((d@@161 T@U) ($h@@172 T@U) ) (!  (=> (and (and (= (type d@@161) DatatypeTypeType) (= (type $h@@172) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@172) (and (AsyncDisk.DiskOp.RespWriteOp_q d@@161) ($IsAlloc d@@161 Tclass.AsyncDisk.DiskOp $h@@172)))) ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@161)) Tclass.NativeTypes.uint64 $h@@172)) :qid |unknown.0:0| :skolemid |2669| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.DiskOp.id d@@161)) Tclass.NativeTypes.uint64 $h@@172)) )))
(assert (forall ((arg0@@621 T@U) ) (! (= (type (AsyncDisk.DiskOp.respWrite arg0@@621)) DatatypeTypeType) :qid |funType:AsyncDisk.DiskOp.respWrite| :pattern ( (AsyncDisk.DiskOp.respWrite arg0@@621)) )))
(assert (forall ((d@@162 T@U) ($h@@173 T@U) ) (!  (=> (and (and (= (type d@@162) DatatypeTypeType) (= (type $h@@173) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@173) (and (AsyncDisk.DiskOp.RespWriteOp_q d@@162) ($IsAlloc d@@162 Tclass.AsyncDisk.DiskOp $h@@173)))) ($IsAlloc (AsyncDisk.DiskOp.respWrite d@@162) Tclass.AsyncDisk.RespWrite $h@@173)) :qid |unknown.0:0| :skolemid |2670| :pattern ( ($IsAlloc (AsyncDisk.DiskOp.respWrite d@@162) Tclass.AsyncDisk.RespWrite $h@@173)) )))
(assert (forall ((|a#71#0#0| Int) (|a#71#1#0| T@U) ) (!  (=> (= (type |a#71#1#0|) DatatypeTypeType) (= (|#AsyncDisk.DiskOp.RespWriteOp| (LitInt |a#71#0#0|) (Lit |a#71#1#0|)) (Lit (|#AsyncDisk.DiskOp.RespWriteOp| |a#71#0#0| |a#71#1#0|)))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2671| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| (LitInt |a#71#0#0|) (Lit |a#71#1#0|))) )))
(assert (forall ((|a#72#0#0| Int) (|a#72#1#0| T@U) ) (!  (=> (= (type |a#72#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.id (|#AsyncDisk.DiskOp.RespWriteOp| |a#72#0#0| |a#72#1#0|)) |a#72#0#0|)) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2672| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| |a#72#0#0| |a#72#1#0|)) )))
(assert (forall ((|a#73#0#0| Int) (|a#73#1#0| T@U) ) (!  (=> (= (type |a#73#1#0|) DatatypeTypeType) (= (AsyncDisk.DiskOp.respWrite (|#AsyncDisk.DiskOp.RespWriteOp| |a#73#0#0| |a#73#1#0|)) |a#73#1#0|)) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2673| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| |a#73#0#0| |a#73#1#0|)) )))
(assert (forall ((|a#74#0#0| Int) (|a#74#1#0| T@U) ) (!  (=> (= (type |a#74#1#0|) DatatypeTypeType) (< (DtRank |a#74#1#0|) (DtRank (|#AsyncDisk.DiskOp.RespWriteOp| |a#74#0#0| |a#74#1#0|)))) :qid |AsyncDiskModelsdfy.36:19| :skolemid |2674| :pattern ( (|#AsyncDisk.DiskOp.RespWriteOp| |a#74#0#0| |a#74#1#0|)) )))
(assert (= (type |#AsyncDisk.DiskOp.NoDiskOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.DiskOp.NoDiskOp|) |##AsyncDisk.DiskOp.NoDiskOp|))
(assert (forall ((d@@163 T@U) ) (!  (=> (= (type d@@163) DatatypeTypeType) (= (AsyncDisk.DiskOp.NoDiskOp_q d@@163) (= (DatatypeCtorId d@@163) |##AsyncDisk.DiskOp.NoDiskOp|))) :qid |unknown.0:0| :skolemid |2675| :pattern ( (AsyncDisk.DiskOp.NoDiskOp_q d@@163)) )))
(assert (forall ((d@@164 T@U) ) (!  (=> (and (= (type d@@164) DatatypeTypeType) (AsyncDisk.DiskOp.NoDiskOp_q d@@164)) (= d@@164 |#AsyncDisk.DiskOp.NoDiskOp|)) :qid |unknown.0:0| :skolemid |2676| :pattern ( (AsyncDisk.DiskOp.NoDiskOp_q d@@164)) )))
(assert ($Is |#AsyncDisk.DiskOp.NoDiskOp| Tclass.AsyncDisk.DiskOp))
(assert (forall (($h@@174 T@U) ) (!  (=> (and (= (type $h@@174) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@174)) ($IsAlloc |#AsyncDisk.DiskOp.NoDiskOp| Tclass.AsyncDisk.DiskOp $h@@174)) :qid |DafnyPreludebpl.545:12| :skolemid |2677| :pattern ( ($IsAlloc |#AsyncDisk.DiskOp.NoDiskOp| Tclass.AsyncDisk.DiskOp $h@@174)) )))
(assert (= |#AsyncDisk.DiskOp.NoDiskOp| (Lit |#AsyncDisk.DiskOp.NoDiskOp|)))
(assert (forall ((d@@165 T@U) ) (!  (=> (and (= (type d@@165) DatatypeTypeType) (|$IsA#AsyncDisk.DiskOp| d@@165)) (or (or (or (or (or (AsyncDisk.DiskOp.ReqReadOp_q d@@165) (AsyncDisk.DiskOp.ReqWriteOp_q d@@165)) (AsyncDisk.DiskOp.ReqWrite2Op_q d@@165)) (AsyncDisk.DiskOp.RespReadOp_q d@@165)) (AsyncDisk.DiskOp.RespWriteOp_q d@@165)) (AsyncDisk.DiskOp.NoDiskOp_q d@@165))) :qid |unknown.0:0| :skolemid |2678| :pattern ( (|$IsA#AsyncDisk.DiskOp| d@@165)) )))
(assert (forall ((d@@166 T@U) ) (!  (=> (and (= (type d@@166) DatatypeTypeType) ($Is d@@166 Tclass.AsyncDisk.DiskOp)) (or (or (or (or (or (AsyncDisk.DiskOp.ReqReadOp_q d@@166) (AsyncDisk.DiskOp.ReqWriteOp_q d@@166)) (AsyncDisk.DiskOp.ReqWrite2Op_q d@@166)) (AsyncDisk.DiskOp.RespReadOp_q d@@166)) (AsyncDisk.DiskOp.RespWriteOp_q d@@166)) (AsyncDisk.DiskOp.NoDiskOp_q d@@166))) :qid |unknown.0:0| :skolemid |2679| :pattern ( (AsyncDisk.DiskOp.NoDiskOp_q d@@166) ($Is d@@166 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.RespWriteOp_q d@@166) ($Is d@@166 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.RespReadOp_q d@@166) ($Is d@@166 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.ReqWrite2Op_q d@@166) ($Is d@@166 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.ReqWriteOp_q d@@166) ($Is d@@166 Tclass.AsyncDisk.DiskOp)) :pattern ( (AsyncDisk.DiskOp.ReqReadOp_q d@@166) ($Is d@@166 Tclass.AsyncDisk.DiskOp)) )))
(assert (forall ((a@@173 T@U) (b@@110 T@U) ) (!  (=> (and (and (= (type a@@173) DatatypeTypeType) (= (type b@@110) DatatypeTypeType)) (and (AsyncDisk.DiskOp.ReqReadOp_q a@@173) (AsyncDisk.DiskOp.ReqReadOp_q b@@110))) (= (|AsyncDisk.DiskOp#Equal| a@@173 b@@110)  (and (= (AsyncDisk.DiskOp.id a@@173) (AsyncDisk.DiskOp.id b@@110)) (|AsyncDisk.ReqRead#Equal| (AsyncDisk.DiskOp.reqRead a@@173) (AsyncDisk.DiskOp.reqRead b@@110))))) :qid |unknown.0:0| :skolemid |2680| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@173 b@@110) (AsyncDisk.DiskOp.ReqReadOp_q a@@173)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@173 b@@110) (AsyncDisk.DiskOp.ReqReadOp_q b@@110)) )))
(assert (forall ((a@@174 T@U) (b@@111 T@U) ) (!  (=> (and (and (= (type a@@174) DatatypeTypeType) (= (type b@@111) DatatypeTypeType)) (and (AsyncDisk.DiskOp.ReqWriteOp_q a@@174) (AsyncDisk.DiskOp.ReqWriteOp_q b@@111))) (= (|AsyncDisk.DiskOp#Equal| a@@174 b@@111)  (and (= (AsyncDisk.DiskOp.id a@@174) (AsyncDisk.DiskOp.id b@@111)) (|AsyncDisk.ReqWrite#Equal| (AsyncDisk.DiskOp.reqWrite a@@174) (AsyncDisk.DiskOp.reqWrite b@@111))))) :qid |unknown.0:0| :skolemid |2681| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@174 b@@111) (AsyncDisk.DiskOp.ReqWriteOp_q a@@174)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@174 b@@111) (AsyncDisk.DiskOp.ReqWriteOp_q b@@111)) )))
(assert (forall ((a@@175 T@U) (b@@112 T@U) ) (!  (=> (and (and (= (type a@@175) DatatypeTypeType) (= (type b@@112) DatatypeTypeType)) (and (AsyncDisk.DiskOp.ReqWrite2Op_q a@@175) (AsyncDisk.DiskOp.ReqWrite2Op_q b@@112))) (= (|AsyncDisk.DiskOp#Equal| a@@175 b@@112)  (and (and (and (= (AsyncDisk.DiskOp.id1 a@@175) (AsyncDisk.DiskOp.id1 b@@112)) (= (AsyncDisk.DiskOp.id2 a@@175) (AsyncDisk.DiskOp.id2 b@@112))) (|AsyncDisk.ReqWrite#Equal| (AsyncDisk.DiskOp.reqWrite1 a@@175) (AsyncDisk.DiskOp.reqWrite1 b@@112))) (|AsyncDisk.ReqWrite#Equal| (AsyncDisk.DiskOp.reqWrite2 a@@175) (AsyncDisk.DiskOp.reqWrite2 b@@112))))) :qid |unknown.0:0| :skolemid |2682| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@175 b@@112) (AsyncDisk.DiskOp.ReqWrite2Op_q a@@175)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@175 b@@112) (AsyncDisk.DiskOp.ReqWrite2Op_q b@@112)) )))
(assert (forall ((a@@176 T@U) (b@@113 T@U) ) (!  (=> (and (and (= (type a@@176) DatatypeTypeType) (= (type b@@113) DatatypeTypeType)) (and (AsyncDisk.DiskOp.RespReadOp_q a@@176) (AsyncDisk.DiskOp.RespReadOp_q b@@113))) (= (|AsyncDisk.DiskOp#Equal| a@@176 b@@113)  (and (= (AsyncDisk.DiskOp.id a@@176) (AsyncDisk.DiskOp.id b@@113)) (|AsyncDisk.RespRead#Equal| (AsyncDisk.DiskOp.respRead a@@176) (AsyncDisk.DiskOp.respRead b@@113))))) :qid |unknown.0:0| :skolemid |2683| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@176 b@@113) (AsyncDisk.DiskOp.RespReadOp_q a@@176)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@176 b@@113) (AsyncDisk.DiskOp.RespReadOp_q b@@113)) )))
(assert (forall ((a@@177 T@U) (b@@114 T@U) ) (!  (=> (and (and (= (type a@@177) DatatypeTypeType) (= (type b@@114) DatatypeTypeType)) (and (AsyncDisk.DiskOp.RespWriteOp_q a@@177) (AsyncDisk.DiskOp.RespWriteOp_q b@@114))) (= (|AsyncDisk.DiskOp#Equal| a@@177 b@@114)  (and (= (AsyncDisk.DiskOp.id a@@177) (AsyncDisk.DiskOp.id b@@114)) (|AsyncDisk.RespWrite#Equal| (AsyncDisk.DiskOp.respWrite a@@177) (AsyncDisk.DiskOp.respWrite b@@114))))) :qid |unknown.0:0| :skolemid |2684| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@177 b@@114) (AsyncDisk.DiskOp.RespWriteOp_q a@@177)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@177 b@@114) (AsyncDisk.DiskOp.RespWriteOp_q b@@114)) )))
(assert (forall ((a@@178 T@U) (b@@115 T@U) ) (!  (=> (and (and (= (type a@@178) DatatypeTypeType) (= (type b@@115) DatatypeTypeType)) (and (AsyncDisk.DiskOp.NoDiskOp_q a@@178) (AsyncDisk.DiskOp.NoDiskOp_q b@@115))) (= (|AsyncDisk.DiskOp#Equal| a@@178 b@@115) true)) :qid |unknown.0:0| :skolemid |2685| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@178 b@@115) (AsyncDisk.DiskOp.NoDiskOp_q a@@178)) :pattern ( (|AsyncDisk.DiskOp#Equal| a@@178 b@@115) (AsyncDisk.DiskOp.NoDiskOp_q b@@115)) )))
(assert (forall ((a@@179 T@U) (b@@116 T@U) ) (!  (=> (and (= (type a@@179) DatatypeTypeType) (= (type b@@116) DatatypeTypeType)) (= (|AsyncDisk.DiskOp#Equal| a@@179 b@@116) (= a@@179 b@@116))) :qid |unknown.0:0| :skolemid |2686| :pattern ( (|AsyncDisk.DiskOp#Equal| a@@179 b@@116)) )))
(assert (forall ((arg0@@622 T@U) (arg1@@296 T@U) (arg2@@165 T@U) (arg3@@106 T@U) (arg4@@75 T@U) ) (! (= (type (|#AsyncDisk.Variables.Variables| arg0@@622 arg1@@296 arg2@@165 arg3@@106 arg4@@75)) DatatypeTypeType) :qid |funType:#AsyncDisk.Variables.Variables| :pattern ( (|#AsyncDisk.Variables.Variables| arg0@@622 arg1@@296 arg2@@165 arg3@@106 arg4@@75)) )))
(assert (forall ((|a#80#0#0@@0| T@U) (|a#80#1#0| T@U) (|a#80#2#0| T@U) (|a#80#3#0| T@U) (|a#80#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#80#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#80#1#0|) (MapType BoxType BoxType))) (= (type |a#80#2#0|) (MapType BoxType BoxType))) (= (type |a#80#3#0|) (MapType BoxType BoxType))) (= (type |a#80#4#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#AsyncDisk.Variables.Variables| |a#80#0#0@@0| |a#80#1#0| |a#80#2#0| |a#80#3#0| |a#80#4#0|)) |##AsyncDisk.Variables.Variables|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2687| :pattern ( (|#AsyncDisk.Variables.Variables| |a#80#0#0@@0| |a#80#1#0| |a#80#2#0| |a#80#3#0| |a#80#4#0|)) )))
(assert (forall ((d@@167 T@U) ) (!  (=> (= (type d@@167) DatatypeTypeType) (= (AsyncDisk.Variables.Variables_q d@@167) (= (DatatypeCtorId d@@167) |##AsyncDisk.Variables.Variables|))) :qid |unknown.0:0| :skolemid |2688| :pattern ( (AsyncDisk.Variables.Variables_q d@@167)) )))
(assert (forall ((d@@168 T@U) ) (!  (=> (and (= (type d@@168) DatatypeTypeType) (AsyncDisk.Variables.Variables_q d@@168)) (exists ((|a#81#0#0@@0| T@U) (|a#81#1#0| T@U) (|a#81#2#0| T@U) (|a#81#3#0| T@U) (|a#81#4#0| T@U) ) (!  (and (and (and (and (and (= (type |a#81#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#81#1#0|) (MapType BoxType BoxType))) (= (type |a#81#2#0|) (MapType BoxType BoxType))) (= (type |a#81#3#0|) (MapType BoxType BoxType))) (= (type |a#81#4#0|) (SeqType BoxType))) (= d@@168 (|#AsyncDisk.Variables.Variables| |a#81#0#0@@0| |a#81#1#0| |a#81#2#0| |a#81#3#0| |a#81#4#0|))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2689| :no-pattern (type |a#81#0#0@@0|) :no-pattern (type |a#81#1#0|) :no-pattern (type |a#81#2#0|) :no-pattern (type |a#81#3#0|) :no-pattern (type |a#81#4#0|) :no-pattern (U_2_int |a#81#0#0@@0|) :no-pattern (U_2_bool |a#81#0#0@@0|) :no-pattern (U_2_int |a#81#1#0|) :no-pattern (U_2_bool |a#81#1#0|) :no-pattern (U_2_int |a#81#2#0|) :no-pattern (U_2_bool |a#81#2#0|) :no-pattern (U_2_int |a#81#3#0|) :no-pattern (U_2_bool |a#81#3#0|) :no-pattern (U_2_int |a#81#4#0|) :no-pattern (U_2_bool |a#81#4#0|) ))) :qid |unknown.0:0| :skolemid |2690| :pattern ( (AsyncDisk.Variables.Variables_q d@@168)) )))
(assert (= (type Tclass.AsyncDisk.Variables) TyType))
(assert (= (Tag Tclass.AsyncDisk.Variables) Tagclass.AsyncDisk.Variables))
(assert (= (TagFamily Tclass.AsyncDisk.Variables) tytagFamily$Variables))
(assert (forall ((bx@@175 T@U) ) (!  (=> (and (= (type bx@@175) BoxType) ($IsBox bx@@175 Tclass.AsyncDisk.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@175)) bx@@175) ($Is ($Unbox DatatypeTypeType bx@@175) Tclass.AsyncDisk.Variables))) :qid |unknown.0:0| :skolemid |2691| :pattern ( ($IsBox bx@@175 Tclass.AsyncDisk.Variables)) )))
(assert (forall ((|a#82#0#0@@0| T@U) (|a#82#1#0| T@U) (|a#82#2#0| T@U) (|a#82#3#0| T@U) (|a#82#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#82#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#82#1#0|) (MapType BoxType BoxType))) (= (type |a#82#2#0|) (MapType BoxType BoxType))) (= (type |a#82#3#0|) (MapType BoxType BoxType))) (= (type |a#82#4#0|) (SeqType BoxType))) (= ($Is (|#AsyncDisk.Variables.Variables| |a#82#0#0@@0| |a#82#1#0| |a#82#2#0| |a#82#3#0| |a#82#4#0|) Tclass.AsyncDisk.Variables)  (and (and (and (and ($Is |a#82#0#0@@0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead)) ($Is |a#82#1#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite))) ($Is |a#82#2#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead))) ($Is |a#82#3#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite))) ($Is |a#82#4#0| (TSeq Tclass.NativeTypes.byte))))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2692| :pattern ( ($Is (|#AsyncDisk.Variables.Variables| |a#82#0#0@@0| |a#82#1#0| |a#82#2#0| |a#82#3#0| |a#82#4#0|) Tclass.AsyncDisk.Variables)) )))
(assert (forall ((|a#83#0#0@@0| T@U) (|a#83#1#0| T@U) (|a#83#2#0| T@U) (|a#83#3#0| T@U) (|a#83#4#0| T@U) ($h@@175 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#83#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#83#1#0|) (MapType BoxType BoxType))) (= (type |a#83#2#0|) (MapType BoxType BoxType))) (= (type |a#83#3#0|) (MapType BoxType BoxType))) (= (type |a#83#4#0|) (SeqType BoxType))) (= (type $h@@175) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@175)) (= ($IsAlloc (|#AsyncDisk.Variables.Variables| |a#83#0#0@@0| |a#83#1#0| |a#83#2#0| |a#83#3#0| |a#83#4#0|) Tclass.AsyncDisk.Variables $h@@175)  (and (and (and (and ($IsAlloc |a#83#0#0@@0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead) $h@@175) ($IsAlloc |a#83#1#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite) $h@@175)) ($IsAlloc |a#83#2#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead) $h@@175)) ($IsAlloc |a#83#3#0| (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite) $h@@175)) ($IsAlloc |a#83#4#0| (TSeq Tclass.NativeTypes.byte) $h@@175)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2693| :pattern ( ($IsAlloc (|#AsyncDisk.Variables.Variables| |a#83#0#0@@0| |a#83#1#0| |a#83#2#0| |a#83#3#0| |a#83#4#0|) Tclass.AsyncDisk.Variables $h@@175)) )))
(assert (forall ((arg0@@623 T@U) ) (! (= (type (AsyncDisk.Variables.reqReads arg0@@623)) (MapType BoxType BoxType)) :qid |funType:AsyncDisk.Variables.reqReads| :pattern ( (AsyncDisk.Variables.reqReads arg0@@623)) )))
(assert (forall ((d@@169 T@U) ($h@@176 T@U) ) (!  (=> (and (and (= (type d@@169) DatatypeTypeType) (= (type $h@@176) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@176) (and (AsyncDisk.Variables.Variables_q d@@169) ($IsAlloc d@@169 Tclass.AsyncDisk.Variables $h@@176)))) ($IsAlloc (AsyncDisk.Variables.reqReads d@@169) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead) $h@@176)) :qid |unknown.0:0| :skolemid |2694| :pattern ( ($IsAlloc (AsyncDisk.Variables.reqReads d@@169) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead) $h@@176)) )))
(assert (forall ((arg0@@624 T@U) ) (! (= (type (AsyncDisk.Variables.reqWrites arg0@@624)) (MapType BoxType BoxType)) :qid |funType:AsyncDisk.Variables.reqWrites| :pattern ( (AsyncDisk.Variables.reqWrites arg0@@624)) )))
(assert (forall ((d@@170 T@U) ($h@@177 T@U) ) (!  (=> (and (and (= (type d@@170) DatatypeTypeType) (= (type $h@@177) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@177) (and (AsyncDisk.Variables.Variables_q d@@170) ($IsAlloc d@@170 Tclass.AsyncDisk.Variables $h@@177)))) ($IsAlloc (AsyncDisk.Variables.reqWrites d@@170) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite) $h@@177)) :qid |unknown.0:0| :skolemid |2695| :pattern ( ($IsAlloc (AsyncDisk.Variables.reqWrites d@@170) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite) $h@@177)) )))
(assert (forall ((arg0@@625 T@U) ) (! (= (type (AsyncDisk.Variables.respReads arg0@@625)) (MapType BoxType BoxType)) :qid |funType:AsyncDisk.Variables.respReads| :pattern ( (AsyncDisk.Variables.respReads arg0@@625)) )))
(assert (forall ((d@@171 T@U) ($h@@178 T@U) ) (!  (=> (and (and (= (type d@@171) DatatypeTypeType) (= (type $h@@178) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@178) (and (AsyncDisk.Variables.Variables_q d@@171) ($IsAlloc d@@171 Tclass.AsyncDisk.Variables $h@@178)))) ($IsAlloc (AsyncDisk.Variables.respReads d@@171) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead) $h@@178)) :qid |unknown.0:0| :skolemid |2696| :pattern ( ($IsAlloc (AsyncDisk.Variables.respReads d@@171) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead) $h@@178)) )))
(assert (forall ((arg0@@626 T@U) ) (! (= (type (AsyncDisk.Variables.respWrites arg0@@626)) (MapType BoxType BoxType)) :qid |funType:AsyncDisk.Variables.respWrites| :pattern ( (AsyncDisk.Variables.respWrites arg0@@626)) )))
(assert (forall ((d@@172 T@U) ($h@@179 T@U) ) (!  (=> (and (and (= (type d@@172) DatatypeTypeType) (= (type $h@@179) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@179) (and (AsyncDisk.Variables.Variables_q d@@172) ($IsAlloc d@@172 Tclass.AsyncDisk.Variables $h@@179)))) ($IsAlloc (AsyncDisk.Variables.respWrites d@@172) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite) $h@@179)) :qid |unknown.0:0| :skolemid |2697| :pattern ( ($IsAlloc (AsyncDisk.Variables.respWrites d@@172) (TMap Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite) $h@@179)) )))
(assert (forall ((arg0@@627 T@U) ) (! (= (type (AsyncDisk.Variables.contents arg0@@627)) (SeqType BoxType)) :qid |funType:AsyncDisk.Variables.contents| :pattern ( (AsyncDisk.Variables.contents arg0@@627)) )))
(assert (forall ((d@@173 T@U) ($h@@180 T@U) ) (!  (=> (and (and (= (type d@@173) DatatypeTypeType) (= (type $h@@180) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@180) (and (AsyncDisk.Variables.Variables_q d@@173) ($IsAlloc d@@173 Tclass.AsyncDisk.Variables $h@@180)))) ($IsAlloc (AsyncDisk.Variables.contents d@@173) (TSeq Tclass.NativeTypes.byte) $h@@180)) :qid |unknown.0:0| :skolemid |2698| :pattern ( ($IsAlloc (AsyncDisk.Variables.contents d@@173) (TSeq Tclass.NativeTypes.byte) $h@@180)) )))
(assert (forall ((|a#84#0#0@@0| T@U) (|a#84#1#0| T@U) (|a#84#2#0| T@U) (|a#84#3#0| T@U) (|a#84#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#84#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#84#1#0|) (MapType BoxType BoxType))) (= (type |a#84#2#0|) (MapType BoxType BoxType))) (= (type |a#84#3#0|) (MapType BoxType BoxType))) (= (type |a#84#4#0|) (SeqType BoxType))) (= (|#AsyncDisk.Variables.Variables| (Lit |a#84#0#0@@0|) (Lit |a#84#1#0|) (Lit |a#84#2#0|) (Lit |a#84#3#0|) (Lit |a#84#4#0|)) (Lit (|#AsyncDisk.Variables.Variables| |a#84#0#0@@0| |a#84#1#0| |a#84#2#0| |a#84#3#0| |a#84#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2699| :pattern ( (|#AsyncDisk.Variables.Variables| (Lit |a#84#0#0@@0|) (Lit |a#84#1#0|) (Lit |a#84#2#0|) (Lit |a#84#3#0|) (Lit |a#84#4#0|))) )))
(assert (forall ((|a#85#0#0@@0| T@U) (|a#85#1#0| T@U) (|a#85#2#0| T@U) (|a#85#3#0| T@U) (|a#85#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#85#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#85#1#0|) (MapType BoxType BoxType))) (= (type |a#85#2#0|) (MapType BoxType BoxType))) (= (type |a#85#3#0|) (MapType BoxType BoxType))) (= (type |a#85#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.reqReads (|#AsyncDisk.Variables.Variables| |a#85#0#0@@0| |a#85#1#0| |a#85#2#0| |a#85#3#0| |a#85#4#0|)) |a#85#0#0@@0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2700| :pattern ( (|#AsyncDisk.Variables.Variables| |a#85#0#0@@0| |a#85#1#0| |a#85#2#0| |a#85#3#0| |a#85#4#0|)) )))
(assert (forall ((|a#86#0#0@@0| T@U) (|a#86#1#0| T@U) (|a#86#2#0| T@U) (|a#86#3#0| T@U) (|a#86#4#0| T@U) (d@@174 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#86#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#86#1#0|) (MapType BoxType BoxType))) (= (type |a#86#2#0|) (MapType BoxType BoxType))) (= (type |a#86#3#0|) (MapType BoxType BoxType))) (= (type |a#86#4#0|) (SeqType BoxType))) (= (type d@@174) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#86#0#0@@0|) ($Box d@@174)))) (< (DtRank d@@174) (DtRank (|#AsyncDisk.Variables.Variables| |a#86#0#0@@0| |a#86#1#0| |a#86#2#0| |a#86#3#0| |a#86#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2701| :pattern ( (MapType0Select (|Map#Domain| |a#86#0#0@@0|) ($Box d@@174)) (|#AsyncDisk.Variables.Variables| |a#86#0#0@@0| |a#86#1#0| |a#86#2#0| |a#86#3#0| |a#86#4#0|)) )))
(assert (forall ((|a#87#0#0@@0| T@U) (|a#87#1#0| T@U) (|a#87#2#0| T@U) (|a#87#3#0| T@U) (|a#87#4#0| T@U) (bx@@176 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#87#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#87#1#0|) (MapType BoxType BoxType))) (= (type |a#87#2#0|) (MapType BoxType BoxType))) (= (type |a#87#3#0|) (MapType BoxType BoxType))) (= (type |a#87#4#0|) (SeqType BoxType))) (= (type bx@@176) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#87#0#0@@0|) bx@@176))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#87#0#0@@0|) bx@@176))) (DtRank (|#AsyncDisk.Variables.Variables| |a#87#0#0@@0| |a#87#1#0| |a#87#2#0| |a#87#3#0| |a#87#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2702| :pattern ( (MapType0Select (|Map#Domain| |a#87#0#0@@0|) bx@@176) (|#AsyncDisk.Variables.Variables| |a#87#0#0@@0| |a#87#1#0| |a#87#2#0| |a#87#3#0| |a#87#4#0|)) )))
(assert (forall ((|a#88#0#0@@0| T@U) (|a#88#1#0| T@U) (|a#88#2#0| T@U) (|a#88#3#0| T@U) (|a#88#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#88#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#88#1#0|) (MapType BoxType BoxType))) (= (type |a#88#2#0|) (MapType BoxType BoxType))) (= (type |a#88#3#0|) (MapType BoxType BoxType))) (= (type |a#88#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.reqWrites (|#AsyncDisk.Variables.Variables| |a#88#0#0@@0| |a#88#1#0| |a#88#2#0| |a#88#3#0| |a#88#4#0|)) |a#88#1#0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2703| :pattern ( (|#AsyncDisk.Variables.Variables| |a#88#0#0@@0| |a#88#1#0| |a#88#2#0| |a#88#3#0| |a#88#4#0|)) )))
(assert (forall ((|a#89#0#0@@0| T@U) (|a#89#1#0| T@U) (|a#89#2#0| T@U) (|a#89#3#0| T@U) (|a#89#4#0| T@U) (d@@175 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#89#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#89#1#0|) (MapType BoxType BoxType))) (= (type |a#89#2#0|) (MapType BoxType BoxType))) (= (type |a#89#3#0|) (MapType BoxType BoxType))) (= (type |a#89#4#0|) (SeqType BoxType))) (= (type d@@175) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#89#1#0|) ($Box d@@175)))) (< (DtRank d@@175) (DtRank (|#AsyncDisk.Variables.Variables| |a#89#0#0@@0| |a#89#1#0| |a#89#2#0| |a#89#3#0| |a#89#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2704| :pattern ( (MapType0Select (|Map#Domain| |a#89#1#0|) ($Box d@@175)) (|#AsyncDisk.Variables.Variables| |a#89#0#0@@0| |a#89#1#0| |a#89#2#0| |a#89#3#0| |a#89#4#0|)) )))
(assert (forall ((|a#90#0#0@@0| T@U) (|a#90#1#0@@0| T@U) (|a#90#2#0| T@U) (|a#90#3#0| T@U) (|a#90#4#0| T@U) (bx@@177 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#90#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#90#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#90#2#0|) (MapType BoxType BoxType))) (= (type |a#90#3#0|) (MapType BoxType BoxType))) (= (type |a#90#4#0|) (SeqType BoxType))) (= (type bx@@177) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#90#1#0@@0|) bx@@177))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#90#1#0@@0|) bx@@177))) (DtRank (|#AsyncDisk.Variables.Variables| |a#90#0#0@@0| |a#90#1#0@@0| |a#90#2#0| |a#90#3#0| |a#90#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2705| :pattern ( (MapType0Select (|Map#Domain| |a#90#1#0@@0|) bx@@177) (|#AsyncDisk.Variables.Variables| |a#90#0#0@@0| |a#90#1#0@@0| |a#90#2#0| |a#90#3#0| |a#90#4#0|)) )))
(assert (forall ((|a#91#0#0@@0| T@U) (|a#91#1#0@@0| T@U) (|a#91#2#0| T@U) (|a#91#3#0| T@U) (|a#91#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#91#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#91#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#91#2#0|) (MapType BoxType BoxType))) (= (type |a#91#3#0|) (MapType BoxType BoxType))) (= (type |a#91#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.respReads (|#AsyncDisk.Variables.Variables| |a#91#0#0@@0| |a#91#1#0@@0| |a#91#2#0| |a#91#3#0| |a#91#4#0|)) |a#91#2#0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2706| :pattern ( (|#AsyncDisk.Variables.Variables| |a#91#0#0@@0| |a#91#1#0@@0| |a#91#2#0| |a#91#3#0| |a#91#4#0|)) )))
(assert (forall ((|a#92#0#0@@0| T@U) (|a#92#1#0@@0| T@U) (|a#92#2#0| T@U) (|a#92#3#0| T@U) (|a#92#4#0| T@U) (d@@176 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#92#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#92#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#92#2#0|) (MapType BoxType BoxType))) (= (type |a#92#3#0|) (MapType BoxType BoxType))) (= (type |a#92#4#0|) (SeqType BoxType))) (= (type d@@176) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#92#2#0|) ($Box d@@176)))) (< (DtRank d@@176) (DtRank (|#AsyncDisk.Variables.Variables| |a#92#0#0@@0| |a#92#1#0@@0| |a#92#2#0| |a#92#3#0| |a#92#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2707| :pattern ( (MapType0Select (|Map#Domain| |a#92#2#0|) ($Box d@@176)) (|#AsyncDisk.Variables.Variables| |a#92#0#0@@0| |a#92#1#0@@0| |a#92#2#0| |a#92#3#0| |a#92#4#0|)) )))
(assert (forall ((|a#93#0#0@@0| T@U) (|a#93#1#0@@0| T@U) (|a#93#2#0| T@U) (|a#93#3#0| T@U) (|a#93#4#0| T@U) (bx@@178 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#93#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#93#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#93#2#0|) (MapType BoxType BoxType))) (= (type |a#93#3#0|) (MapType BoxType BoxType))) (= (type |a#93#4#0|) (SeqType BoxType))) (= (type bx@@178) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#93#2#0|) bx@@178))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#93#2#0|) bx@@178))) (DtRank (|#AsyncDisk.Variables.Variables| |a#93#0#0@@0| |a#93#1#0@@0| |a#93#2#0| |a#93#3#0| |a#93#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2708| :pattern ( (MapType0Select (|Map#Domain| |a#93#2#0|) bx@@178) (|#AsyncDisk.Variables.Variables| |a#93#0#0@@0| |a#93#1#0@@0| |a#93#2#0| |a#93#3#0| |a#93#4#0|)) )))
(assert (forall ((|a#94#0#0@@0| T@U) (|a#94#1#0@@0| T@U) (|a#94#2#0| T@U) (|a#94#3#0| T@U) (|a#94#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#94#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#94#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#94#2#0|) (MapType BoxType BoxType))) (= (type |a#94#3#0|) (MapType BoxType BoxType))) (= (type |a#94#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.respWrites (|#AsyncDisk.Variables.Variables| |a#94#0#0@@0| |a#94#1#0@@0| |a#94#2#0| |a#94#3#0| |a#94#4#0|)) |a#94#3#0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2709| :pattern ( (|#AsyncDisk.Variables.Variables| |a#94#0#0@@0| |a#94#1#0@@0| |a#94#2#0| |a#94#3#0| |a#94#4#0|)) )))
(assert (forall ((|a#95#0#0@@0| T@U) (|a#95#1#0@@0| T@U) (|a#95#2#0| T@U) (|a#95#3#0| T@U) (|a#95#4#0| T@U) (d@@177 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#95#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#95#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#95#2#0|) (MapType BoxType BoxType))) (= (type |a#95#3#0|) (MapType BoxType BoxType))) (= (type |a#95#4#0|) (SeqType BoxType))) (= (type d@@177) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#95#3#0|) ($Box d@@177)))) (< (DtRank d@@177) (DtRank (|#AsyncDisk.Variables.Variables| |a#95#0#0@@0| |a#95#1#0@@0| |a#95#2#0| |a#95#3#0| |a#95#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2710| :pattern ( (MapType0Select (|Map#Domain| |a#95#3#0|) ($Box d@@177)) (|#AsyncDisk.Variables.Variables| |a#95#0#0@@0| |a#95#1#0@@0| |a#95#2#0| |a#95#3#0| |a#95#4#0|)) )))
(assert (forall ((|a#96#0#0@@0| T@U) (|a#96#1#0@@0| T@U) (|a#96#2#0| T@U) (|a#96#3#0| T@U) (|a#96#4#0| T@U) (bx@@179 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |a#96#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#96#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#96#2#0|) (MapType BoxType BoxType))) (= (type |a#96#3#0|) (MapType BoxType BoxType))) (= (type |a#96#4#0|) (SeqType BoxType))) (= (type bx@@179) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#96#3#0|) bx@@179))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#96#3#0|) bx@@179))) (DtRank (|#AsyncDisk.Variables.Variables| |a#96#0#0@@0| |a#96#1#0@@0| |a#96#2#0| |a#96#3#0| |a#96#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2711| :pattern ( (MapType0Select (|Map#Domain| |a#96#3#0|) bx@@179) (|#AsyncDisk.Variables.Variables| |a#96#0#0@@0| |a#96#1#0@@0| |a#96#2#0| |a#96#3#0| |a#96#4#0|)) )))
(assert (forall ((|a#97#0#0@@0| T@U) (|a#97#1#0@@0| T@U) (|a#97#2#0| T@U) (|a#97#3#0| T@U) (|a#97#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#97#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#97#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#97#2#0|) (MapType BoxType BoxType))) (= (type |a#97#3#0|) (MapType BoxType BoxType))) (= (type |a#97#4#0|) (SeqType BoxType))) (= (AsyncDisk.Variables.contents (|#AsyncDisk.Variables.Variables| |a#97#0#0@@0| |a#97#1#0@@0| |a#97#2#0| |a#97#3#0| |a#97#4#0|)) |a#97#4#0|)) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2712| :pattern ( (|#AsyncDisk.Variables.Variables| |a#97#0#0@@0| |a#97#1#0@@0| |a#97#2#0| |a#97#3#0| |a#97#4#0|)) )))
(assert (forall ((|a#98#0#0@@0| T@U) (|a#98#1#0@@0| T@U) (|a#98#2#0| T@U) (|a#98#3#0| T@U) (|a#98#4#0| T@U) (i@@29 Int) ) (!  (=> (and (and (and (and (and (= (type |a#98#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#98#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#98#2#0|) (MapType BoxType BoxType))) (= (type |a#98#3#0|) (MapType BoxType BoxType))) (= (type |a#98#4#0|) (SeqType BoxType))) (and (<= 0 i@@29) (< i@@29 (|Seq#Length| |a#98#4#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#98#4#0| i@@29))) (DtRank (|#AsyncDisk.Variables.Variables| |a#98#0#0@@0| |a#98#1#0@@0| |a#98#2#0| |a#98#3#0| |a#98#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2713| :pattern ( (|Seq#Index| |a#98#4#0| i@@29) (|#AsyncDisk.Variables.Variables| |a#98#0#0@@0| |a#98#1#0@@0| |a#98#2#0| |a#98#3#0| |a#98#4#0|)) )))
(assert (forall ((|a#99#0#0@@0| T@U) (|a#99#1#0@@0| T@U) (|a#99#2#0| T@U) (|a#99#3#0| T@U) (|a#99#4#0| T@U) ) (!  (=> (and (and (and (and (= (type |a#99#0#0@@0|) (MapType BoxType BoxType)) (= (type |a#99#1#0@@0|) (MapType BoxType BoxType))) (= (type |a#99#2#0|) (MapType BoxType BoxType))) (= (type |a#99#3#0|) (MapType BoxType BoxType))) (= (type |a#99#4#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#99#4#0|) (DtRank (|#AsyncDisk.Variables.Variables| |a#99#0#0@@0| |a#99#1#0@@0| |a#99#2#0| |a#99#3#0| |a#99#4#0|)))) :qid |AsyncDiskModelsdfy.41:5| :skolemid |2714| :pattern ( (|#AsyncDisk.Variables.Variables| |a#99#0#0@@0| |a#99#1#0@@0| |a#99#2#0| |a#99#3#0| |a#99#4#0|)) )))
(assert (forall ((d@@178 T@U) ) (!  (=> (and (= (type d@@178) DatatypeTypeType) (|$IsA#AsyncDisk.Variables| d@@178)) (AsyncDisk.Variables.Variables_q d@@178)) :qid |unknown.0:0| :skolemid |2715| :pattern ( (|$IsA#AsyncDisk.Variables| d@@178)) )))
(assert (forall ((d@@179 T@U) ) (!  (=> (and (= (type d@@179) DatatypeTypeType) ($Is d@@179 Tclass.AsyncDisk.Variables)) (AsyncDisk.Variables.Variables_q d@@179)) :qid |unknown.0:0| :skolemid |2716| :pattern ( (AsyncDisk.Variables.Variables_q d@@179) ($Is d@@179 Tclass.AsyncDisk.Variables)) )))
(assert (forall ((a@@180 T@U) (b@@117 T@U) ) (!  (=> (and (and (= (type a@@180) DatatypeTypeType) (= (type b@@117) DatatypeTypeType)) true) (= (|AsyncDisk.Variables#Equal| a@@180 b@@117)  (and (and (and (and (|Map#Equal| (AsyncDisk.Variables.reqReads a@@180) (AsyncDisk.Variables.reqReads b@@117)) (|Map#Equal| (AsyncDisk.Variables.reqWrites a@@180) (AsyncDisk.Variables.reqWrites b@@117))) (|Map#Equal| (AsyncDisk.Variables.respReads a@@180) (AsyncDisk.Variables.respReads b@@117))) (|Map#Equal| (AsyncDisk.Variables.respWrites a@@180) (AsyncDisk.Variables.respWrites b@@117))) (|Seq#Equal| (AsyncDisk.Variables.contents a@@180) (AsyncDisk.Variables.contents b@@117))))) :qid |unknown.0:0| :skolemid |2717| :pattern ( (|AsyncDisk.Variables#Equal| a@@180 b@@117)) )))
(assert (forall ((a@@181 T@U) (b@@118 T@U) ) (!  (=> (and (= (type a@@181) DatatypeTypeType) (= (type b@@118) DatatypeTypeType)) (= (|AsyncDisk.Variables#Equal| a@@181 b@@118) (= a@@181 b@@118))) :qid |unknown.0:0| :skolemid |2718| :pattern ( (|AsyncDisk.Variables#Equal| a@@181 b@@118)) )))
(assert (= (type |#AsyncDisk.Step.RecvReadStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.RecvReadStep|) |##AsyncDisk.Step.RecvReadStep|))
(assert (forall ((d@@180 T@U) ) (!  (=> (= (type d@@180) DatatypeTypeType) (= (AsyncDisk.Step.RecvReadStep_q d@@180) (= (DatatypeCtorId d@@180) |##AsyncDisk.Step.RecvReadStep|))) :qid |unknown.0:0| :skolemid |2719| :pattern ( (AsyncDisk.Step.RecvReadStep_q d@@180)) )))
(assert (forall ((d@@181 T@U) ) (!  (=> (and (= (type d@@181) DatatypeTypeType) (AsyncDisk.Step.RecvReadStep_q d@@181)) (= d@@181 |#AsyncDisk.Step.RecvReadStep|)) :qid |unknown.0:0| :skolemid |2720| :pattern ( (AsyncDisk.Step.RecvReadStep_q d@@181)) )))
(assert (= (type Tclass.AsyncDisk.Step) TyType))
(assert (= (Tag Tclass.AsyncDisk.Step) Tagclass.AsyncDisk.Step))
(assert (= (TagFamily Tclass.AsyncDisk.Step) tytagFamily$Step))
(assert (forall ((bx@@180 T@U) ) (!  (=> (and (= (type bx@@180) BoxType) ($IsBox bx@@180 Tclass.AsyncDisk.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@180)) bx@@180) ($Is ($Unbox DatatypeTypeType bx@@180) Tclass.AsyncDisk.Step))) :qid |unknown.0:0| :skolemid |2721| :pattern ( ($IsBox bx@@180 Tclass.AsyncDisk.Step)) )))
(assert ($Is |#AsyncDisk.Step.RecvReadStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@181 T@U) ) (!  (=> (and (= (type $h@@181) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@181)) ($IsAlloc |#AsyncDisk.Step.RecvReadStep| Tclass.AsyncDisk.Step $h@@181)) :qid |DafnyPreludebpl.545:12| :skolemid |2722| :pattern ( ($IsAlloc |#AsyncDisk.Step.RecvReadStep| Tclass.AsyncDisk.Step $h@@181)) )))
(assert (= |#AsyncDisk.Step.RecvReadStep| (Lit |#AsyncDisk.Step.RecvReadStep|)))
(assert (= (type |#AsyncDisk.Step.RecvWriteStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.RecvWriteStep|) |##AsyncDisk.Step.RecvWriteStep|))
(assert (forall ((d@@182 T@U) ) (!  (=> (= (type d@@182) DatatypeTypeType) (= (AsyncDisk.Step.RecvWriteStep_q d@@182) (= (DatatypeCtorId d@@182) |##AsyncDisk.Step.RecvWriteStep|))) :qid |unknown.0:0| :skolemid |2723| :pattern ( (AsyncDisk.Step.RecvWriteStep_q d@@182)) )))
(assert (forall ((d@@183 T@U) ) (!  (=> (and (= (type d@@183) DatatypeTypeType) (AsyncDisk.Step.RecvWriteStep_q d@@183)) (= d@@183 |#AsyncDisk.Step.RecvWriteStep|)) :qid |unknown.0:0| :skolemid |2724| :pattern ( (AsyncDisk.Step.RecvWriteStep_q d@@183)) )))
(assert ($Is |#AsyncDisk.Step.RecvWriteStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@182 T@U) ) (!  (=> (and (= (type $h@@182) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@182)) ($IsAlloc |#AsyncDisk.Step.RecvWriteStep| Tclass.AsyncDisk.Step $h@@182)) :qid |DafnyPreludebpl.545:12| :skolemid |2725| :pattern ( ($IsAlloc |#AsyncDisk.Step.RecvWriteStep| Tclass.AsyncDisk.Step $h@@182)) )))
(assert (= |#AsyncDisk.Step.RecvWriteStep| (Lit |#AsyncDisk.Step.RecvWriteStep|)))
(assert (= (type |#AsyncDisk.Step.RecvWrite2Step|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.RecvWrite2Step|) |##AsyncDisk.Step.RecvWrite2Step|))
(assert (forall ((d@@184 T@U) ) (!  (=> (= (type d@@184) DatatypeTypeType) (= (AsyncDisk.Step.RecvWrite2Step_q d@@184) (= (DatatypeCtorId d@@184) |##AsyncDisk.Step.RecvWrite2Step|))) :qid |unknown.0:0| :skolemid |2726| :pattern ( (AsyncDisk.Step.RecvWrite2Step_q d@@184)) )))
(assert (forall ((d@@185 T@U) ) (!  (=> (and (= (type d@@185) DatatypeTypeType) (AsyncDisk.Step.RecvWrite2Step_q d@@185)) (= d@@185 |#AsyncDisk.Step.RecvWrite2Step|)) :qid |unknown.0:0| :skolemid |2727| :pattern ( (AsyncDisk.Step.RecvWrite2Step_q d@@185)) )))
(assert ($Is |#AsyncDisk.Step.RecvWrite2Step| Tclass.AsyncDisk.Step))
(assert (forall (($h@@183 T@U) ) (!  (=> (and (= (type $h@@183) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@183)) ($IsAlloc |#AsyncDisk.Step.RecvWrite2Step| Tclass.AsyncDisk.Step $h@@183)) :qid |DafnyPreludebpl.545:12| :skolemid |2728| :pattern ( ($IsAlloc |#AsyncDisk.Step.RecvWrite2Step| Tclass.AsyncDisk.Step $h@@183)) )))
(assert (= |#AsyncDisk.Step.RecvWrite2Step| (Lit |#AsyncDisk.Step.RecvWrite2Step|)))
(assert (= (type |#AsyncDisk.Step.AckReadStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.AckReadStep|) |##AsyncDisk.Step.AckReadStep|))
(assert (forall ((d@@186 T@U) ) (!  (=> (= (type d@@186) DatatypeTypeType) (= (AsyncDisk.Step.AckReadStep_q d@@186) (= (DatatypeCtorId d@@186) |##AsyncDisk.Step.AckReadStep|))) :qid |unknown.0:0| :skolemid |2729| :pattern ( (AsyncDisk.Step.AckReadStep_q d@@186)) )))
(assert (forall ((d@@187 T@U) ) (!  (=> (and (= (type d@@187) DatatypeTypeType) (AsyncDisk.Step.AckReadStep_q d@@187)) (= d@@187 |#AsyncDisk.Step.AckReadStep|)) :qid |unknown.0:0| :skolemid |2730| :pattern ( (AsyncDisk.Step.AckReadStep_q d@@187)) )))
(assert ($Is |#AsyncDisk.Step.AckReadStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@184 T@U) ) (!  (=> (and (= (type $h@@184) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@184)) ($IsAlloc |#AsyncDisk.Step.AckReadStep| Tclass.AsyncDisk.Step $h@@184)) :qid |DafnyPreludebpl.545:12| :skolemid |2731| :pattern ( ($IsAlloc |#AsyncDisk.Step.AckReadStep| Tclass.AsyncDisk.Step $h@@184)) )))
(assert (= |#AsyncDisk.Step.AckReadStep| (Lit |#AsyncDisk.Step.AckReadStep|)))
(assert (= (type |#AsyncDisk.Step.AckWriteStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.AckWriteStep|) |##AsyncDisk.Step.AckWriteStep|))
(assert (forall ((d@@188 T@U) ) (!  (=> (= (type d@@188) DatatypeTypeType) (= (AsyncDisk.Step.AckWriteStep_q d@@188) (= (DatatypeCtorId d@@188) |##AsyncDisk.Step.AckWriteStep|))) :qid |unknown.0:0| :skolemid |2732| :pattern ( (AsyncDisk.Step.AckWriteStep_q d@@188)) )))
(assert (forall ((d@@189 T@U) ) (!  (=> (and (= (type d@@189) DatatypeTypeType) (AsyncDisk.Step.AckWriteStep_q d@@189)) (= d@@189 |#AsyncDisk.Step.AckWriteStep|)) :qid |unknown.0:0| :skolemid |2733| :pattern ( (AsyncDisk.Step.AckWriteStep_q d@@189)) )))
(assert ($Is |#AsyncDisk.Step.AckWriteStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@185 T@U) ) (!  (=> (and (= (type $h@@185) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@185)) ($IsAlloc |#AsyncDisk.Step.AckWriteStep| Tclass.AsyncDisk.Step $h@@185)) :qid |DafnyPreludebpl.545:12| :skolemid |2734| :pattern ( ($IsAlloc |#AsyncDisk.Step.AckWriteStep| Tclass.AsyncDisk.Step $h@@185)) )))
(assert (= |#AsyncDisk.Step.AckWriteStep| (Lit |#AsyncDisk.Step.AckWriteStep|)))
(assert (= (type |#AsyncDisk.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#AsyncDisk.Step.StutterStep|) |##AsyncDisk.Step.StutterStep|))
(assert (forall ((d@@190 T@U) ) (!  (=> (= (type d@@190) DatatypeTypeType) (= (AsyncDisk.Step.StutterStep_q d@@190) (= (DatatypeCtorId d@@190) |##AsyncDisk.Step.StutterStep|))) :qid |unknown.0:0| :skolemid |2735| :pattern ( (AsyncDisk.Step.StutterStep_q d@@190)) )))
(assert (forall ((d@@191 T@U) ) (!  (=> (and (= (type d@@191) DatatypeTypeType) (AsyncDisk.Step.StutterStep_q d@@191)) (= d@@191 |#AsyncDisk.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |2736| :pattern ( (AsyncDisk.Step.StutterStep_q d@@191)) )))
(assert ($Is |#AsyncDisk.Step.StutterStep| Tclass.AsyncDisk.Step))
(assert (forall (($h@@186 T@U) ) (!  (=> (and (= (type $h@@186) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@186)) ($IsAlloc |#AsyncDisk.Step.StutterStep| Tclass.AsyncDisk.Step $h@@186)) :qid |DafnyPreludebpl.545:12| :skolemid |2737| :pattern ( ($IsAlloc |#AsyncDisk.Step.StutterStep| Tclass.AsyncDisk.Step $h@@186)) )))
(assert (= |#AsyncDisk.Step.StutterStep| (Lit |#AsyncDisk.Step.StutterStep|)))
(assert (forall ((d@@192 T@U) ) (!  (=> (and (= (type d@@192) DatatypeTypeType) (|$IsA#AsyncDisk.Step| d@@192)) (or (or (or (or (or (AsyncDisk.Step.RecvReadStep_q d@@192) (AsyncDisk.Step.RecvWriteStep_q d@@192)) (AsyncDisk.Step.RecvWrite2Step_q d@@192)) (AsyncDisk.Step.AckReadStep_q d@@192)) (AsyncDisk.Step.AckWriteStep_q d@@192)) (AsyncDisk.Step.StutterStep_q d@@192))) :qid |unknown.0:0| :skolemid |2738| :pattern ( (|$IsA#AsyncDisk.Step| d@@192)) )))
(assert (forall ((d@@193 T@U) ) (!  (=> (and (= (type d@@193) DatatypeTypeType) ($Is d@@193 Tclass.AsyncDisk.Step)) (or (or (or (or (or (AsyncDisk.Step.RecvReadStep_q d@@193) (AsyncDisk.Step.RecvWriteStep_q d@@193)) (AsyncDisk.Step.RecvWrite2Step_q d@@193)) (AsyncDisk.Step.AckReadStep_q d@@193)) (AsyncDisk.Step.AckWriteStep_q d@@193)) (AsyncDisk.Step.StutterStep_q d@@193))) :qid |unknown.0:0| :skolemid |2739| :pattern ( (AsyncDisk.Step.StutterStep_q d@@193) ($Is d@@193 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.AckWriteStep_q d@@193) ($Is d@@193 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.AckReadStep_q d@@193) ($Is d@@193 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.RecvWrite2Step_q d@@193) ($Is d@@193 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.RecvWriteStep_q d@@193) ($Is d@@193 Tclass.AsyncDisk.Step)) :pattern ( (AsyncDisk.Step.RecvReadStep_q d@@193) ($Is d@@193 Tclass.AsyncDisk.Step)) )))
(assert (forall ((a@@182 T@U) (b@@119 T@U) ) (!  (=> (and (and (= (type a@@182) DatatypeTypeType) (= (type b@@119) DatatypeTypeType)) (and (AsyncDisk.Step.RecvReadStep_q a@@182) (AsyncDisk.Step.RecvReadStep_q b@@119))) (= (|AsyncDisk.Step#Equal| a@@182 b@@119) true)) :qid |unknown.0:0| :skolemid |2740| :pattern ( (|AsyncDisk.Step#Equal| a@@182 b@@119) (AsyncDisk.Step.RecvReadStep_q a@@182)) :pattern ( (|AsyncDisk.Step#Equal| a@@182 b@@119) (AsyncDisk.Step.RecvReadStep_q b@@119)) )))
(assert (forall ((a@@183 T@U) (b@@120 T@U) ) (!  (=> (and (and (= (type a@@183) DatatypeTypeType) (= (type b@@120) DatatypeTypeType)) (and (AsyncDisk.Step.RecvWriteStep_q a@@183) (AsyncDisk.Step.RecvWriteStep_q b@@120))) (= (|AsyncDisk.Step#Equal| a@@183 b@@120) true)) :qid |unknown.0:0| :skolemid |2741| :pattern ( (|AsyncDisk.Step#Equal| a@@183 b@@120) (AsyncDisk.Step.RecvWriteStep_q a@@183)) :pattern ( (|AsyncDisk.Step#Equal| a@@183 b@@120) (AsyncDisk.Step.RecvWriteStep_q b@@120)) )))
(assert (forall ((a@@184 T@U) (b@@121 T@U) ) (!  (=> (and (and (= (type a@@184) DatatypeTypeType) (= (type b@@121) DatatypeTypeType)) (and (AsyncDisk.Step.RecvWrite2Step_q a@@184) (AsyncDisk.Step.RecvWrite2Step_q b@@121))) (= (|AsyncDisk.Step#Equal| a@@184 b@@121) true)) :qid |unknown.0:0| :skolemid |2742| :pattern ( (|AsyncDisk.Step#Equal| a@@184 b@@121) (AsyncDisk.Step.RecvWrite2Step_q a@@184)) :pattern ( (|AsyncDisk.Step#Equal| a@@184 b@@121) (AsyncDisk.Step.RecvWrite2Step_q b@@121)) )))
(assert (forall ((a@@185 T@U) (b@@122 T@U) ) (!  (=> (and (and (= (type a@@185) DatatypeTypeType) (= (type b@@122) DatatypeTypeType)) (and (AsyncDisk.Step.AckReadStep_q a@@185) (AsyncDisk.Step.AckReadStep_q b@@122))) (= (|AsyncDisk.Step#Equal| a@@185 b@@122) true)) :qid |unknown.0:0| :skolemid |2743| :pattern ( (|AsyncDisk.Step#Equal| a@@185 b@@122) (AsyncDisk.Step.AckReadStep_q a@@185)) :pattern ( (|AsyncDisk.Step#Equal| a@@185 b@@122) (AsyncDisk.Step.AckReadStep_q b@@122)) )))
(assert (forall ((a@@186 T@U) (b@@123 T@U) ) (!  (=> (and (and (= (type a@@186) DatatypeTypeType) (= (type b@@123) DatatypeTypeType)) (and (AsyncDisk.Step.AckWriteStep_q a@@186) (AsyncDisk.Step.AckWriteStep_q b@@123))) (= (|AsyncDisk.Step#Equal| a@@186 b@@123) true)) :qid |unknown.0:0| :skolemid |2744| :pattern ( (|AsyncDisk.Step#Equal| a@@186 b@@123) (AsyncDisk.Step.AckWriteStep_q a@@186)) :pattern ( (|AsyncDisk.Step#Equal| a@@186 b@@123) (AsyncDisk.Step.AckWriteStep_q b@@123)) )))
(assert (forall ((a@@187 T@U) (b@@124 T@U) ) (!  (=> (and (and (= (type a@@187) DatatypeTypeType) (= (type b@@124) DatatypeTypeType)) (and (AsyncDisk.Step.StutterStep_q a@@187) (AsyncDisk.Step.StutterStep_q b@@124))) (= (|AsyncDisk.Step#Equal| a@@187 b@@124) true)) :qid |unknown.0:0| :skolemid |2745| :pattern ( (|AsyncDisk.Step#Equal| a@@187 b@@124) (AsyncDisk.Step.StutterStep_q a@@187)) :pattern ( (|AsyncDisk.Step#Equal| a@@187 b@@124) (AsyncDisk.Step.StutterStep_q b@@124)) )))
(assert (forall ((a@@188 T@U) (b@@125 T@U) ) (!  (=> (and (= (type a@@188) DatatypeTypeType) (= (type b@@125) DatatypeTypeType)) (= (|AsyncDisk.Step#Equal| a@@188 b@@125) (= a@@188 b@@125))) :qid |unknown.0:0| :skolemid |2746| :pattern ( (|AsyncDisk.Step#Equal| a@@188 b@@125)) )))
(assert (forall ((arg0@@628 Int) (arg1@@297 T@U) ) (! (= (type (|#AsyncDisk.InternalStep.ProcessReadFailureStep| arg0@@628 arg1@@297)) DatatypeTypeType) :qid |funType:#AsyncDisk.InternalStep.ProcessReadFailureStep| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| arg0@@628 arg1@@297)) )))
(assert (forall ((|a#130#0#0@@0| Int) (|a#130#1#0@@0| T@U) ) (!  (=> (= (type |a#130#1#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#130#0#0@@0| |a#130#1#0@@0|)) |##AsyncDisk.InternalStep.ProcessReadFailureStep|)) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2747| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#130#0#0@@0| |a#130#1#0@@0|)) )))
(assert (forall ((d@@194 T@U) ) (!  (=> (= (type d@@194) DatatypeTypeType) (= (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@194) (= (DatatypeCtorId d@@194) |##AsyncDisk.InternalStep.ProcessReadFailureStep|))) :qid |unknown.0:0| :skolemid |2748| :pattern ( (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@194)) )))
(assert (forall ((d@@195 T@U) ) (!  (=> (and (= (type d@@195) DatatypeTypeType) (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@195)) (exists ((|a#131#0#0@@0| Int) (|a#131#1#0@@0| T@U) ) (!  (and (= (type |a#131#1#0@@0|) (SeqType BoxType)) (= d@@195 (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#131#0#0@@0| |a#131#1#0@@0|))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2749| :no-pattern (type |a#131#1#0@@0|) :no-pattern (U_2_int |a#131#1#0@@0|) :no-pattern (U_2_bool |a#131#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2750| :pattern ( (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@195)) )))
(assert (= (type Tclass.AsyncDisk.InternalStep) TyType))
(assert (= (Tag Tclass.AsyncDisk.InternalStep) Tagclass.AsyncDisk.InternalStep))
(assert (= (TagFamily Tclass.AsyncDisk.InternalStep) tytagFamily$InternalStep))
(assert (forall ((bx@@181 T@U) ) (!  (=> (and (= (type bx@@181) BoxType) ($IsBox bx@@181 Tclass.AsyncDisk.InternalStep)) (and (= ($Box ($Unbox DatatypeTypeType bx@@181)) bx@@181) ($Is ($Unbox DatatypeTypeType bx@@181) Tclass.AsyncDisk.InternalStep))) :qid |unknown.0:0| :skolemid |2751| :pattern ( ($IsBox bx@@181 Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#132#0#0@@0| Int) (|a#132#1#0@@0| T@U) ) (!  (=> (= (type |a#132#1#0@@0|) (SeqType BoxType)) (= ($Is (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#132#0#0@@0| |a#132#1#0@@0|) Tclass.AsyncDisk.InternalStep)  (and ($Is (int_2_U |a#132#0#0@@0|) Tclass.NativeTypes.uint64) ($Is |a#132#1#0@@0| (TSeq Tclass.NativeTypes.byte))))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2752| :pattern ( ($Is (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#132#0#0@@0| |a#132#1#0@@0|) Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#133#0#0@@0| Int) (|a#133#1#0@@0| T@U) ($h@@187 T@U) ) (!  (=> (and (and (= (type |a#133#1#0@@0|) (SeqType BoxType)) (= (type $h@@187) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@187)) (= ($IsAlloc (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#133#0#0@@0| |a#133#1#0@@0|) Tclass.AsyncDisk.InternalStep $h@@187)  (and ($IsAlloc (int_2_U |a#133#0#0@@0|) Tclass.NativeTypes.uint64 $h@@187) ($IsAlloc |a#133#1#0@@0| (TSeq Tclass.NativeTypes.byte) $h@@187)))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2753| :pattern ( ($IsAlloc (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#133#0#0@@0| |a#133#1#0@@0|) Tclass.AsyncDisk.InternalStep $h@@187)) )))
(assert (forall ((d@@196 T@U) ($h@@188 T@U) ) (!  (=> (and (and (= (type d@@196) DatatypeTypeType) (= (type $h@@188) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@188) (and (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@196) ($IsAlloc d@@196 Tclass.AsyncDisk.InternalStep $h@@188)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@196)) Tclass.NativeTypes.uint64 $h@@188)) :qid |unknown.0:0| :skolemid |2754| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@196)) Tclass.NativeTypes.uint64 $h@@188)) )))
(assert (forall ((arg0@@629 T@U) ) (! (= (type (AsyncDisk.InternalStep.fakeContents arg0@@629)) (SeqType BoxType)) :qid |funType:AsyncDisk.InternalStep.fakeContents| :pattern ( (AsyncDisk.InternalStep.fakeContents arg0@@629)) )))
(assert (forall ((d@@197 T@U) ($h@@189 T@U) ) (!  (=> (and (and (= (type d@@197) DatatypeTypeType) (= (type $h@@189) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@189) (and (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@197) ($IsAlloc d@@197 Tclass.AsyncDisk.InternalStep $h@@189)))) ($IsAlloc (AsyncDisk.InternalStep.fakeContents d@@197) (TSeq Tclass.NativeTypes.byte) $h@@189)) :qid |unknown.0:0| :skolemid |2755| :pattern ( ($IsAlloc (AsyncDisk.InternalStep.fakeContents d@@197) (TSeq Tclass.NativeTypes.byte) $h@@189)) )))
(assert (forall ((|a#134#0#0@@0| Int) (|a#134#1#0@@0| T@U) ) (!  (=> (= (type |a#134#1#0@@0|) (SeqType BoxType)) (= (|#AsyncDisk.InternalStep.ProcessReadFailureStep| (LitInt |a#134#0#0@@0|) (Lit |a#134#1#0@@0|)) (Lit (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#134#0#0@@0| |a#134#1#0@@0|)))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2756| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| (LitInt |a#134#0#0@@0|) (Lit |a#134#1#0@@0|))) )))
(assert (forall ((|a#135#0#0@@0| Int) (|a#135#1#0@@0| T@U) ) (!  (=> (= (type |a#135#1#0@@0|) (SeqType BoxType)) (= (AsyncDisk.InternalStep.id (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#135#0#0@@0| |a#135#1#0@@0|)) |a#135#0#0@@0|)) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2757| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#135#0#0@@0| |a#135#1#0@@0|)) )))
(assert (forall ((|a#136#0#0@@0| Int) (|a#136#1#0@@0| T@U) ) (!  (=> (= (type |a#136#1#0@@0|) (SeqType BoxType)) (= (AsyncDisk.InternalStep.fakeContents (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#136#0#0@@0| |a#136#1#0@@0|)) |a#136#1#0@@0|)) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2758| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#136#0#0@@0| |a#136#1#0@@0|)) )))
(assert (forall ((|a#137#0#0| Int) (|a#137#1#0| T@U) (i@@30 Int) ) (!  (=> (= (type |a#137#1#0|) (SeqType BoxType)) (=> (and (<= 0 i@@30) (< i@@30 (|Seq#Length| |a#137#1#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#137#1#0| i@@30))) (DtRank (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#137#0#0| |a#137#1#0|))))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2759| :pattern ( (|Seq#Index| |a#137#1#0| i@@30) (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#137#0#0| |a#137#1#0|)) )))
(assert (forall ((|a#138#0#0| Int) (|a#138#1#0| T@U) ) (!  (=> (= (type |a#138#1#0|) (SeqType BoxType)) (< (|Seq#Rank| |a#138#1#0|) (DtRank (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#138#0#0| |a#138#1#0|)))) :qid |AsyncDiskModelsdfy.135:30| :skolemid |2760| :pattern ( (|#AsyncDisk.InternalStep.ProcessReadFailureStep| |a#138#0#0| |a#138#1#0|)) )))
(assert (forall ((arg0@@630 Int) ) (! (= (type (|#AsyncDisk.InternalStep.ProcessWriteStep| arg0@@630)) DatatypeTypeType) :qid |funType:#AsyncDisk.InternalStep.ProcessWriteStep| :pattern ( (|#AsyncDisk.InternalStep.ProcessWriteStep| arg0@@630)) )))
(assert (forall ((|a#139#0#0| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#139#0#0|)) |##AsyncDisk.InternalStep.ProcessWriteStep|) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2761| :pattern ( (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#139#0#0|)) )))
(assert (forall ((d@@198 T@U) ) (!  (=> (= (type d@@198) DatatypeTypeType) (= (AsyncDisk.InternalStep.ProcessWriteStep_q d@@198) (= (DatatypeCtorId d@@198) |##AsyncDisk.InternalStep.ProcessWriteStep|))) :qid |unknown.0:0| :skolemid |2762| :pattern ( (AsyncDisk.InternalStep.ProcessWriteStep_q d@@198)) )))
(assert (forall ((d@@199 T@U) ) (!  (=> (and (= (type d@@199) DatatypeTypeType) (AsyncDisk.InternalStep.ProcessWriteStep_q d@@199)) (exists ((|a#140#0#0| Int) ) (! (= d@@199 (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#140#0#0|)) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2763| ))) :qid |unknown.0:0| :skolemid |2764| :pattern ( (AsyncDisk.InternalStep.ProcessWriteStep_q d@@199)) )))
(assert (forall ((|a#141#0#0| Int) ) (! (= ($Is (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#141#0#0|) Tclass.AsyncDisk.InternalStep) ($Is (int_2_U |a#141#0#0|) Tclass.NativeTypes.uint64)) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2765| :pattern ( ($Is (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#141#0#0|) Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#142#0#0| Int) ($h@@190 T@U) ) (!  (=> (and (= (type $h@@190) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@190)) (= ($IsAlloc (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#142#0#0|) Tclass.AsyncDisk.InternalStep $h@@190) ($IsAlloc (int_2_U |a#142#0#0|) Tclass.NativeTypes.uint64 $h@@190))) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2766| :pattern ( ($IsAlloc (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#142#0#0|) Tclass.AsyncDisk.InternalStep $h@@190)) )))
(assert (forall ((d@@200 T@U) ($h@@191 T@U) ) (!  (=> (and (and (= (type d@@200) DatatypeTypeType) (= (type $h@@191) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@191) (and (AsyncDisk.InternalStep.ProcessWriteStep_q d@@200) ($IsAlloc d@@200 Tclass.AsyncDisk.InternalStep $h@@191)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@200)) Tclass.NativeTypes.uint64 $h@@191)) :qid |unknown.0:0| :skolemid |2767| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@200)) Tclass.NativeTypes.uint64 $h@@191)) )))
(assert (forall ((|a#143#0#0| Int) ) (! (= (|#AsyncDisk.InternalStep.ProcessWriteStep| (LitInt |a#143#0#0|)) (Lit (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#143#0#0|))) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2768| :pattern ( (|#AsyncDisk.InternalStep.ProcessWriteStep| (LitInt |a#143#0#0|))) )))
(assert (forall ((|a#144#0#0| Int) ) (! (= (AsyncDisk.InternalStep.id (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#144#0#0|)) |a#144#0#0|) :qid |AsyncDiskModelsdfy.136:24| :skolemid |2769| :pattern ( (|#AsyncDisk.InternalStep.ProcessWriteStep| |a#144#0#0|)) )))
(assert (forall ((arg0@@631 Int) (arg1@@298 Int) ) (! (= (type (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| arg0@@631 arg1@@298)) DatatypeTypeType) :qid |funType:#AsyncDisk.InternalStep.HavocConflictingWritesStep| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| arg0@@631 arg1@@298)) )))
(assert (forall ((|a#145#0#0| Int) (|a#145#1#0| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#145#0#0| |a#145#1#0|)) |##AsyncDisk.InternalStep.HavocConflictingWritesStep|) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2770| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#145#0#0| |a#145#1#0|)) )))
(assert (forall ((d@@201 T@U) ) (!  (=> (= (type d@@201) DatatypeTypeType) (= (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@201) (= (DatatypeCtorId d@@201) |##AsyncDisk.InternalStep.HavocConflictingWritesStep|))) :qid |unknown.0:0| :skolemid |2771| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@201)) )))
(assert (forall ((d@@202 T@U) ) (!  (=> (and (= (type d@@202) DatatypeTypeType) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@202)) (exists ((|a#146#0#0| Int) (|a#146#1#0| Int) ) (! (= d@@202 (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#146#0#0| |a#146#1#0|)) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2772| ))) :qid |unknown.0:0| :skolemid |2773| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@202)) )))
(assert (forall ((|a#147#0#0| Int) (|a#147#1#0| Int) ) (! (= ($Is (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#147#0#0| |a#147#1#0|) Tclass.AsyncDisk.InternalStep)  (and ($Is (int_2_U |a#147#0#0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#147#1#0|) Tclass.NativeTypes.uint64))) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2774| :pattern ( ($Is (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#147#0#0| |a#147#1#0|) Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#148#0#0| Int) (|a#148#1#0| Int) ($h@@192 T@U) ) (!  (=> (and (= (type $h@@192) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@192)) (= ($IsAlloc (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#148#0#0| |a#148#1#0|) Tclass.AsyncDisk.InternalStep $h@@192)  (and ($IsAlloc (int_2_U |a#148#0#0|) Tclass.NativeTypes.uint64 $h@@192) ($IsAlloc (int_2_U |a#148#1#0|) Tclass.NativeTypes.uint64 $h@@192)))) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2775| :pattern ( ($IsAlloc (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#148#0#0| |a#148#1#0|) Tclass.AsyncDisk.InternalStep $h@@192)) )))
(assert (forall ((d@@203 T@U) ($h@@193 T@U) ) (!  (=> (and (and (= (type d@@203) DatatypeTypeType) (= (type $h@@193) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@193) (and (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@203) ($IsAlloc d@@203 Tclass.AsyncDisk.InternalStep $h@@193)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@203)) Tclass.NativeTypes.uint64 $h@@193)) :qid |unknown.0:0| :skolemid |2776| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@203)) Tclass.NativeTypes.uint64 $h@@193)) )))
(assert (forall ((d@@204 T@U) ($h@@194 T@U) ) (!  (=> (and (and (= (type d@@204) DatatypeTypeType) (= (type $h@@194) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@194) (and (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@204) ($IsAlloc d@@204 Tclass.AsyncDisk.InternalStep $h@@194)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id_k d@@204)) Tclass.NativeTypes.uint64 $h@@194)) :qid |unknown.0:0| :skolemid |2777| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id_k d@@204)) Tclass.NativeTypes.uint64 $h@@194)) )))
(assert (forall ((|a#149#0#0| Int) (|a#149#1#0| Int) ) (! (= (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| (LitInt |a#149#0#0|) (LitInt |a#149#1#0|)) (Lit (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#149#0#0| |a#149#1#0|))) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2778| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| (LitInt |a#149#0#0|) (LitInt |a#149#1#0|))) )))
(assert (forall ((|a#150#0#0| Int) (|a#150#1#0| Int) ) (! (= (AsyncDisk.InternalStep.id (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#150#0#0| |a#150#1#0|)) |a#150#0#0|) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2779| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#150#0#0| |a#150#1#0|)) )))
(assert (forall ((|a#151#0#0| Int) (|a#151#1#0| Int) ) (! (= (AsyncDisk.InternalStep.id_k (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#151#0#0| |a#151#1#0|)) |a#151#1#0|) :qid |AsyncDiskModelsdfy.137:34| :skolemid |2780| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWritesStep| |a#151#0#0| |a#151#1#0|)) )))
(assert (forall ((arg0@@632 Int) (arg1@@299 Int) ) (! (= (type (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| arg0@@632 arg1@@299)) DatatypeTypeType) :qid |funType:#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| arg0@@632 arg1@@299)) )))
(assert (forall ((|a#152#0#0| Int) (|a#152#1#0| Int) ) (! (= (DatatypeCtorId (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#152#0#0| |a#152#1#0|)) |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep|) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2781| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#152#0#0| |a#152#1#0|)) )))
(assert (forall ((d@@205 T@U) ) (!  (=> (= (type d@@205) DatatypeTypeType) (= (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@205) (= (DatatypeCtorId d@@205) |##AsyncDisk.InternalStep.HavocConflictingWriteReadStep|))) :qid |unknown.0:0| :skolemid |2782| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@205)) )))
(assert (forall ((d@@206 T@U) ) (!  (=> (and (= (type d@@206) DatatypeTypeType) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@206)) (exists ((|a#153#0#0| Int) (|a#153#1#0| Int) ) (! (= d@@206 (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#153#0#0| |a#153#1#0|)) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2783| ))) :qid |unknown.0:0| :skolemid |2784| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@206)) )))
(assert (forall ((|a#154#0#0| Int) (|a#154#1#0| Int) ) (! (= ($Is (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#154#0#0| |a#154#1#0|) Tclass.AsyncDisk.InternalStep)  (and ($Is (int_2_U |a#154#0#0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#154#1#0|) Tclass.NativeTypes.uint64))) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2785| :pattern ( ($Is (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#154#0#0| |a#154#1#0|) Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((|a#155#0#0| Int) (|a#155#1#0| Int) ($h@@195 T@U) ) (!  (=> (and (= (type $h@@195) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@195)) (= ($IsAlloc (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#155#0#0| |a#155#1#0|) Tclass.AsyncDisk.InternalStep $h@@195)  (and ($IsAlloc (int_2_U |a#155#0#0|) Tclass.NativeTypes.uint64 $h@@195) ($IsAlloc (int_2_U |a#155#1#0|) Tclass.NativeTypes.uint64 $h@@195)))) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2786| :pattern ( ($IsAlloc (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#155#0#0| |a#155#1#0|) Tclass.AsyncDisk.InternalStep $h@@195)) )))
(assert (forall ((d@@207 T@U) ($h@@196 T@U) ) (!  (=> (and (and (= (type d@@207) DatatypeTypeType) (= (type $h@@196) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@196) (and (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@207) ($IsAlloc d@@207 Tclass.AsyncDisk.InternalStep $h@@196)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@207)) Tclass.NativeTypes.uint64 $h@@196)) :qid |unknown.0:0| :skolemid |2787| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id d@@207)) Tclass.NativeTypes.uint64 $h@@196)) )))
(assert (forall ((d@@208 T@U) ($h@@197 T@U) ) (!  (=> (and (and (= (type d@@208) DatatypeTypeType) (= (type $h@@197) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@197) (and (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@208) ($IsAlloc d@@208 Tclass.AsyncDisk.InternalStep $h@@197)))) ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id_k d@@208)) Tclass.NativeTypes.uint64 $h@@197)) :qid |unknown.0:0| :skolemid |2788| :pattern ( ($IsAlloc (int_2_U (AsyncDisk.InternalStep.id_k d@@208)) Tclass.NativeTypes.uint64 $h@@197)) )))
(assert (forall ((|a#156#0#0| Int) (|a#156#1#0| Int) ) (! (= (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| (LitInt |a#156#0#0|) (LitInt |a#156#1#0|)) (Lit (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#156#0#0| |a#156#1#0|))) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2789| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| (LitInt |a#156#0#0|) (LitInt |a#156#1#0|))) )))
(assert (forall ((|a#157#0#0| Int) (|a#157#1#0| Int) ) (! (= (AsyncDisk.InternalStep.id (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#157#0#0| |a#157#1#0|)) |a#157#0#0|) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2790| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#157#0#0| |a#157#1#0|)) )))
(assert (forall ((|a#158#0#0| Int) (|a#158#1#0| Int) ) (! (= (AsyncDisk.InternalStep.id_k (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#158#0#0| |a#158#1#0|)) |a#158#1#0|) :qid |AsyncDiskModelsdfy.138:37| :skolemid |2791| :pattern ( (|#AsyncDisk.InternalStep.HavocConflictingWriteReadStep| |a#158#0#0| |a#158#1#0|)) )))
(assert (forall ((d@@209 T@U) ) (!  (=> (and (= (type d@@209) DatatypeTypeType) (|$IsA#AsyncDisk.InternalStep| d@@209)) (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@209) (AsyncDisk.InternalStep.ProcessWriteStep_q d@@209)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@209)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@209))) :qid |unknown.0:0| :skolemid |2792| :pattern ( (|$IsA#AsyncDisk.InternalStep| d@@209)) )))
(assert (forall ((d@@210 T@U) ) (!  (=> (and (= (type d@@210) DatatypeTypeType) ($Is d@@210 Tclass.AsyncDisk.InternalStep)) (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@210) (AsyncDisk.InternalStep.ProcessWriteStep_q d@@210)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@210)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@210))) :qid |unknown.0:0| :skolemid |2793| :pattern ( (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q d@@210) ($Is d@@210 Tclass.AsyncDisk.InternalStep)) :pattern ( (AsyncDisk.InternalStep.HavocConflictingWritesStep_q d@@210) ($Is d@@210 Tclass.AsyncDisk.InternalStep)) :pattern ( (AsyncDisk.InternalStep.ProcessWriteStep_q d@@210) ($Is d@@210 Tclass.AsyncDisk.InternalStep)) :pattern ( (AsyncDisk.InternalStep.ProcessReadFailureStep_q d@@210) ($Is d@@210 Tclass.AsyncDisk.InternalStep)) )))
(assert (forall ((a@@189 T@U) (b@@126 T@U) ) (!  (=> (and (and (= (type a@@189) DatatypeTypeType) (= (type b@@126) DatatypeTypeType)) (and (AsyncDisk.InternalStep.ProcessReadFailureStep_q a@@189) (AsyncDisk.InternalStep.ProcessReadFailureStep_q b@@126))) (= (|AsyncDisk.InternalStep#Equal| a@@189 b@@126)  (and (= (AsyncDisk.InternalStep.id a@@189) (AsyncDisk.InternalStep.id b@@126)) (|Seq#Equal| (AsyncDisk.InternalStep.fakeContents a@@189) (AsyncDisk.InternalStep.fakeContents b@@126))))) :qid |unknown.0:0| :skolemid |2794| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@189 b@@126) (AsyncDisk.InternalStep.ProcessReadFailureStep_q a@@189)) :pattern ( (|AsyncDisk.InternalStep#Equal| a@@189 b@@126) (AsyncDisk.InternalStep.ProcessReadFailureStep_q b@@126)) )))
(assert (forall ((a@@190 T@U) (b@@127 T@U) ) (!  (=> (and (and (= (type a@@190) DatatypeTypeType) (= (type b@@127) DatatypeTypeType)) (and (AsyncDisk.InternalStep.ProcessWriteStep_q a@@190) (AsyncDisk.InternalStep.ProcessWriteStep_q b@@127))) (= (|AsyncDisk.InternalStep#Equal| a@@190 b@@127) (= (AsyncDisk.InternalStep.id a@@190) (AsyncDisk.InternalStep.id b@@127)))) :qid |unknown.0:0| :skolemid |2795| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@190 b@@127) (AsyncDisk.InternalStep.ProcessWriteStep_q a@@190)) :pattern ( (|AsyncDisk.InternalStep#Equal| a@@190 b@@127) (AsyncDisk.InternalStep.ProcessWriteStep_q b@@127)) )))
(assert (forall ((a@@191 T@U) (b@@128 T@U) ) (!  (=> (and (and (= (type a@@191) DatatypeTypeType) (= (type b@@128) DatatypeTypeType)) (and (AsyncDisk.InternalStep.HavocConflictingWritesStep_q a@@191) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q b@@128))) (= (|AsyncDisk.InternalStep#Equal| a@@191 b@@128)  (and (= (AsyncDisk.InternalStep.id a@@191) (AsyncDisk.InternalStep.id b@@128)) (= (AsyncDisk.InternalStep.id_k a@@191) (AsyncDisk.InternalStep.id_k b@@128))))) :qid |unknown.0:0| :skolemid |2796| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@191 b@@128) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q a@@191)) :pattern ( (|AsyncDisk.InternalStep#Equal| a@@191 b@@128) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q b@@128)) )))
(assert (forall ((a@@192 T@U) (b@@129 T@U) ) (!  (=> (and (and (= (type a@@192) DatatypeTypeType) (= (type b@@129) DatatypeTypeType)) (and (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q a@@192) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q b@@129))) (= (|AsyncDisk.InternalStep#Equal| a@@192 b@@129)  (and (= (AsyncDisk.InternalStep.id a@@192) (AsyncDisk.InternalStep.id b@@129)) (= (AsyncDisk.InternalStep.id_k a@@192) (AsyncDisk.InternalStep.id_k b@@129))))) :qid |unknown.0:0| :skolemid |2797| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@192 b@@129) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q a@@192)) :pattern ( (|AsyncDisk.InternalStep#Equal| a@@192 b@@129) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q b@@129)) )))
(assert (forall ((a@@193 T@U) (b@@130 T@U) ) (!  (=> (and (= (type a@@193) DatatypeTypeType) (= (type b@@130) DatatypeTypeType)) (= (|AsyncDisk.InternalStep#Equal| a@@193 b@@130) (= a@@193 b@@130))) :qid |unknown.0:0| :skolemid |2798| :pattern ( (|AsyncDisk.InternalStep#Equal| a@@193 b@@130)) )))
(assert (= (type Tclass.AsyncDisk.__default) TyType))
(assert (= (Tag Tclass.AsyncDisk.__default) Tagclass.AsyncDisk.__default))
(assert (= (TagFamily Tclass.AsyncDisk.__default) tytagFamily$_default))
(assert (forall ((bx@@182 T@U) ) (!  (=> (and (= (type bx@@182) BoxType) ($IsBox bx@@182 Tclass.AsyncDisk.__default)) (and (= ($Box ($Unbox refType bx@@182)) bx@@182) ($Is ($Unbox refType bx@@182) Tclass.AsyncDisk.__default))) :qid |unknown.0:0| :skolemid |2799| :pattern ( ($IsBox bx@@182 Tclass.AsyncDisk.__default)) )))
(assert (forall (($o@@52 T@U) ) (!  (=> (= (type $o@@52) refType) (= ($Is $o@@52 Tclass.AsyncDisk.__default)  (or (= $o@@52 null) (= (dtype $o@@52) Tclass.AsyncDisk.__default)))) :qid |unknown.0:0| :skolemid |2800| :pattern ( ($Is $o@@52 Tclass.AsyncDisk.__default)) )))
(assert (forall (($o@@53 T@U) ($h@@198 T@U) ) (!  (=> (and (= (type $o@@53) refType) (= (type $h@@198) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@53 Tclass.AsyncDisk.__default $h@@198)  (or (= $o@@53 null) (U_2_bool (MapType1Select (MapType0Select $h@@198 $o@@53) alloc))))) :qid |unknown.0:0| :skolemid |2801| :pattern ( ($IsAlloc $o@@53 Tclass.AsyncDisk.__default $h@@198)) )))
(assert  (=> true (forall ((|s#0@@146| T@U) ) (!  (=> (and (= (type |s#0@@146|) DatatypeTypeType) (or (|AsyncDisk.__default.Init#canCall| |s#0@@146|) ($Is |s#0@@146| Tclass.AsyncDisk.Variables))) true) :qid |AsyncDiskModelsdfy.50:18| :skolemid |2802| :pattern ( (AsyncDisk.__default.Init |s#0@@146|)) ))))
(assert (forall ((|s#0@@147| T@U) ) (!  (=> (and (= (type |s#0@@147|) DatatypeTypeType) ($Is |s#0@@147| Tclass.AsyncDisk.Variables)) (= (|AsyncDisk.__default.Init#requires| |s#0@@147|) true)) :qid |AsyncDiskModelsdfy.50:18| :skolemid |2803| :pattern ( (|AsyncDisk.__default.Init#requires| |s#0@@147|)) )))
(assert  (=> true (forall ((|s#0@@148| T@U) ) (!  (=> (and (= (type |s#0@@148|) DatatypeTypeType) (or (|AsyncDisk.__default.Init#canCall| |s#0@@148|) ($Is |s#0@@148| Tclass.AsyncDisk.Variables))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@148|) (=> (|Map#Equal| (AsyncDisk.Variables.reqReads |s#0@@148|) (|Map#Empty| BoxType BoxType)) (and (AsyncDisk.Variables.Variables_q |s#0@@148|) (=> (|Map#Equal| (AsyncDisk.Variables.reqWrites |s#0@@148|) (|Map#Empty| BoxType BoxType)) (and (AsyncDisk.Variables.Variables_q |s#0@@148|) (=> (|Map#Equal| (AsyncDisk.Variables.respReads |s#0@@148|) (|Map#Empty| BoxType BoxType)) (AsyncDisk.Variables.Variables_q |s#0@@148|))))))) (= (AsyncDisk.__default.Init |s#0@@148|)  (and (and (and (|Map#Equal| (AsyncDisk.Variables.reqReads |s#0@@148|) (|Map#Empty| BoxType BoxType)) (|Map#Equal| (AsyncDisk.Variables.reqWrites |s#0@@148|) (|Map#Empty| BoxType BoxType))) (|Map#Equal| (AsyncDisk.Variables.respReads |s#0@@148|) (|Map#Empty| BoxType BoxType))) (|Map#Equal| (AsyncDisk.Variables.respWrites |s#0@@148|) (|Map#Empty| BoxType BoxType)))))) :qid |AsyncDiskModelsdfy.50:18| :skolemid |2804| :pattern ( (AsyncDisk.__default.Init |s#0@@148|)) ))))
(assert  (=> true (forall ((|s#0@@149| T@U) ) (!  (=> (and (= (type |s#0@@149|) DatatypeTypeType) (or (|AsyncDisk.__default.Init#canCall| (Lit |s#0@@149|)) ($Is |s#0@@149| Tclass.AsyncDisk.Variables))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@149|)) (=> (|Map#Equal| (AsyncDisk.Variables.reqReads (Lit |s#0@@149|)) (|Map#Empty| BoxType BoxType)) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@149|)) (=> (|Map#Equal| (AsyncDisk.Variables.reqWrites (Lit |s#0@@149|)) (|Map#Empty| BoxType BoxType)) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@149|)) (=> (|Map#Equal| (AsyncDisk.Variables.respReads (Lit |s#0@@149|)) (|Map#Empty| BoxType BoxType)) (AsyncDisk.Variables.Variables_q (Lit |s#0@@149|)))))))) (= (AsyncDisk.__default.Init (Lit |s#0@@149|))  (and (and (and (|Map#Equal| (AsyncDisk.Variables.reqReads (Lit |s#0@@149|)) (|Map#Empty| BoxType BoxType)) (|Map#Equal| (AsyncDisk.Variables.reqWrites (Lit |s#0@@149|)) (|Map#Empty| BoxType BoxType))) (|Map#Equal| (AsyncDisk.Variables.respReads (Lit |s#0@@149|)) (|Map#Empty| BoxType BoxType))) (|Map#Equal| (AsyncDisk.Variables.respWrites (Lit |s#0@@149|)) (|Map#Empty| BoxType BoxType)))))) :qid |AsyncDiskModelsdfy.50:18| :weight 3 :skolemid |2805| :pattern ( (AsyncDisk.__default.Init (Lit |s#0@@149|))) ))))
(assert  (=> true (forall ((|s#0@@150| T@U) (|s'#0| T@U) (|dop#0| T@U) ) (!  (=> (and (and (and (= (type |s#0@@150|) DatatypeTypeType) (= (type |s'#0|) DatatypeTypeType)) (= (type |dop#0|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvRead#canCall| |s#0@@150| |s'#0| |dop#0|) (and (and ($Is |s#0@@150| Tclass.AsyncDisk.Variables) ($Is |s'#0| Tclass.AsyncDisk.Variables)) ($Is |dop#0| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.66:22| :skolemid |2806| :pattern ( (AsyncDisk.__default.RecvRead |s#0@@150| |s'#0| |dop#0|)) ))))
(assert (forall ((|s#0@@151| T@U) (|s'#0@@0| T@U) (|dop#0@@0| T@U) ) (!  (=> (and (and (and (= (type |s#0@@151|) DatatypeTypeType) (= (type |s'#0@@0|) DatatypeTypeType)) (= (type |dop#0@@0|) DatatypeTypeType)) (and (and ($Is |s#0@@151| Tclass.AsyncDisk.Variables) ($Is |s'#0@@0| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@0| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.RecvRead#requires| |s#0@@151| |s'#0@@0| |dop#0@@0|) true)) :qid |AsyncDiskModelsdfy.66:22| :skolemid |2807| :pattern ( (|AsyncDisk.__default.RecvRead#requires| |s#0@@151| |s'#0@@0| |dop#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@152| T@U) (|s'#0@@1| T@U) (|dop#0@@1| T@U) ) (!  (=> (and (and (and (= (type |s#0@@152|) DatatypeTypeType) (= (type |s'#0@@1|) DatatypeTypeType)) (= (type |dop#0@@1|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvRead#canCall| |s#0@@152| |s'#0@@1| |dop#0@@1|) (and (and ($Is |s#0@@152| Tclass.AsyncDisk.Variables) ($Is |s'#0@@1| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@1| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.ReqReadOp_q |dop#0@@1|) (and (AsyncDisk.Variables.Variables_q |s#0@@152|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@152|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@152|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads |s#0@@152|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|)))))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@1|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0| |s#0@@152|)) (let ((|dt_update#reqReads#0#0| (|Map#Build| (AsyncDisk.Variables.reqReads |s#0@@152|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|))) ($Box (AsyncDisk.DiskOp.reqRead |dop#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0|)))))) (let ((|dt_update_tmp#0#0@@0| |s#0@@152|)) (and (AsyncDisk.Variables.Variables_q |s#0@@152|) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@0|)))))))))) (= (AsyncDisk.__default.RecvRead |s#0@@152| |s'#0@@1| |dop#0@@1|)  (and (and (and (AsyncDisk.DiskOp.ReqReadOp_q |dop#0@@1|) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@152|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads |s#0@@152|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|))))))) (|AsyncDisk.Variables#Equal| |s'#0@@1| (let ((|dt_update_tmp#0#0@@1| |s#0@@152|)) (let ((|dt_update#reqReads#0#0@@0| (|Map#Build| (AsyncDisk.Variables.reqReads |s#0@@152|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@1|))) ($Box (AsyncDisk.DiskOp.reqRead |dop#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0@@0| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@1|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@1|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@1|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@1|))))))))) :qid |AsyncDiskModelsdfy.66:22| :skolemid |2808| :pattern ( (AsyncDisk.__default.RecvRead |s#0@@152| |s'#0@@1| |dop#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@153| T@U) (|s'#0@@2| T@U) (|dop#0@@2| T@U) ) (!  (=> (and (and (and (= (type |s#0@@153|) DatatypeTypeType) (= (type |s'#0@@2|) DatatypeTypeType)) (= (type |dop#0@@2|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvRead#canCall| (Lit |s#0@@153|) (Lit |s'#0@@2|) (Lit |dop#0@@2|)) (and (and ($Is |s#0@@153| Tclass.AsyncDisk.Variables) ($Is |s'#0@@2| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@2| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.ReqReadOp_q (Lit |dop#0@@2|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@153|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@153|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@2|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@153|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads (Lit |s#0@@153|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@2|))))))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@2|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1| (Lit |s#0@@153|))) (let ((|dt_update#reqReads#0#1| (|Map#Build| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@153|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@2|))))) ($Box (Lit (AsyncDisk.DiskOp.reqRead (Lit |dop#0@@2|))))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1|))))))) (let ((|dt_update_tmp#0#1@@0| (Lit |s#0@@153|))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@153|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@0|)))))))))) (= (AsyncDisk.__default.RecvRead (Lit |s#0@@153|) (Lit |s'#0@@2|) (Lit |dop#0@@2|))  (and (and (and (AsyncDisk.DiskOp.ReqReadOp_q (Lit |dop#0@@2|)) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@153|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@2|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads (Lit |s#0@@153|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@2|)))))))) (|AsyncDisk.Variables#Equal| |s'#0@@2| (let ((|dt_update_tmp#0#1@@1| (Lit |s#0@@153|))) (let ((|dt_update#reqReads#0#1@@0| (|Map#Build| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@153|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@2|))))) ($Box (Lit (AsyncDisk.DiskOp.reqRead (Lit |dop#0@@2|))))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1@@0| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@1|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@1|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@1|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@1|)))))))))) :qid |AsyncDiskModelsdfy.66:22| :weight 3 :skolemid |2809| :pattern ( (AsyncDisk.__default.RecvRead (Lit |s#0@@153|) (Lit |s'#0@@2|) (Lit |dop#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@154| T@U) (|s'#0@@3| T@U) (|dop#0@@3| T@U) ) (!  (=> (and (and (and (= (type |s#0@@154|) DatatypeTypeType) (= (type |s'#0@@3|) DatatypeTypeType)) (= (type |dop#0@@3|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite#canCall| |s#0@@154| |s'#0@@3| |dop#0@@3|) (and (and ($Is |s#0@@154| Tclass.AsyncDisk.Variables) ($Is |s'#0@@3| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@3| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.74:23| :skolemid |2810| :pattern ( (AsyncDisk.__default.RecvWrite |s#0@@154| |s'#0@@3| |dop#0@@3|)) ))))
(assert (forall ((|s#0@@155| T@U) (|s'#0@@4| T@U) (|dop#0@@4| T@U) ) (!  (=> (and (and (and (= (type |s#0@@155|) DatatypeTypeType) (= (type |s'#0@@4|) DatatypeTypeType)) (= (type |dop#0@@4|) DatatypeTypeType)) (and (and ($Is |s#0@@155| Tclass.AsyncDisk.Variables) ($Is |s'#0@@4| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@4| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.RecvWrite#requires| |s#0@@155| |s'#0@@4| |dop#0@@4|) true)) :qid |AsyncDiskModelsdfy.74:23| :skolemid |2811| :pattern ( (|AsyncDisk.__default.RecvWrite#requires| |s#0@@155| |s'#0@@4| |dop#0@@4|)) )))
(assert  (=> true (forall ((|s#0@@156| T@U) (|s'#0@@5| T@U) (|dop#0@@5| T@U) ) (!  (=> (and (and (and (= (type |s#0@@156|) DatatypeTypeType) (= (type |s'#0@@5|) DatatypeTypeType)) (= (type |dop#0@@5|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite#canCall| |s#0@@156| |s'#0@@5| |dop#0@@5|) (and (and ($Is |s#0@@156| Tclass.AsyncDisk.Variables) ($Is |s'#0@@5| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@5| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.ReqWriteOp_q |dop#0@@5|) (and (AsyncDisk.Variables.Variables_q |s#0@@156|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@156|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@156|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@156|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|)))))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@5|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0@@2| |s#0@@156|)) (let ((|dt_update#reqWrites#0#0| (|Map#Build| (AsyncDisk.Variables.reqWrites |s#0@@156|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|))) ($Box (AsyncDisk.DiskOp.reqWrite |dop#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@2|) |dt_update#reqWrites#0#0| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@2|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@2|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@2|)))))) (let ((|dt_update_tmp#0#0@@3| |s#0@@156|)) (and (AsyncDisk.Variables.Variables_q |s#0@@156|) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@3|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@3|)))))))))) (= (AsyncDisk.__default.RecvWrite |s#0@@156| |s'#0@@5| |dop#0@@5|)  (and (and (and (AsyncDisk.DiskOp.ReqWriteOp_q |dop#0@@5|) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@156|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@156|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|))))))) (|AsyncDisk.Variables#Equal| |s'#0@@5| (let ((|dt_update_tmp#0#0@@4| |s#0@@156|)) (let ((|dt_update#reqWrites#0#0@@0| (|Map#Build| (AsyncDisk.Variables.reqWrites |s#0@@156|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@5|))) ($Box (AsyncDisk.DiskOp.reqWrite |dop#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@4|) |dt_update#reqWrites#0#0@@0| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@4|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@4|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@4|))))))))) :qid |AsyncDiskModelsdfy.74:23| :skolemid |2812| :pattern ( (AsyncDisk.__default.RecvWrite |s#0@@156| |s'#0@@5| |dop#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@157| T@U) (|s'#0@@6| T@U) (|dop#0@@6| T@U) ) (!  (=> (and (and (and (= (type |s#0@@157|) DatatypeTypeType) (= (type |s'#0@@6|) DatatypeTypeType)) (= (type |dop#0@@6|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite#canCall| (Lit |s#0@@157|) (Lit |s'#0@@6|) (Lit |dop#0@@6|)) (and (and ($Is |s#0@@157| Tclass.AsyncDisk.Variables) ($Is |s'#0@@6| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@6| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.ReqWriteOp_q (Lit |dop#0@@6|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@157|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@157|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@6|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@157|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@157|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@6|))))))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@6|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1@@2| (Lit |s#0@@157|))) (let ((|dt_update#reqWrites#0#1| (|Map#Build| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@157|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@6|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite (Lit |dop#0@@6|))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@2|)) |dt_update#reqWrites#0#1| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@2|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@2|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@2|))))))) (let ((|dt_update_tmp#0#1@@3| (Lit |s#0@@157|))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@157|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@3|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@3|)))))))))) (= (AsyncDisk.__default.RecvWrite (Lit |s#0@@157|) (Lit |s'#0@@6|) (Lit |dop#0@@6|))  (and (and (and (AsyncDisk.DiskOp.ReqWriteOp_q (Lit |dop#0@@6|)) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@157|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@6|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@157|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@6|)))))))) (|AsyncDisk.Variables#Equal| |s'#0@@6| (let ((|dt_update_tmp#0#1@@4| (Lit |s#0@@157|))) (let ((|dt_update#reqWrites#0#1@@0| (|Map#Build| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@157|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@6|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite (Lit |dop#0@@6|))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@4|)) |dt_update#reqWrites#0#1@@0| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@4|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@4|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@4|)))))))))) :qid |AsyncDiskModelsdfy.74:23| :weight 3 :skolemid |2813| :pattern ( (AsyncDisk.__default.RecvWrite (Lit |s#0@@157|) (Lit |s'#0@@6|) (Lit |dop#0@@6|))) ))))
(assert  (=> true (forall ((|s#0@@158| T@U) (|s'#0@@7| T@U) (|dop#0@@7| T@U) ) (!  (=> (and (and (and (= (type |s#0@@158|) DatatypeTypeType) (= (type |s'#0@@7|) DatatypeTypeType)) (= (type |dop#0@@7|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite2#canCall| |s#0@@158| |s'#0@@7| |dop#0@@7|) (and (and ($Is |s#0@@158| Tclass.AsyncDisk.Variables) ($Is |s'#0@@7| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@7| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.82:24| :skolemid |2814| :pattern ( (AsyncDisk.__default.RecvWrite2 |s#0@@158| |s'#0@@7| |dop#0@@7|)) ))))
(assert (forall ((|s#0@@159| T@U) (|s'#0@@8| T@U) (|dop#0@@8| T@U) ) (!  (=> (and (and (and (= (type |s#0@@159|) DatatypeTypeType) (= (type |s'#0@@8|) DatatypeTypeType)) (= (type |dop#0@@8|) DatatypeTypeType)) (and (and ($Is |s#0@@159| Tclass.AsyncDisk.Variables) ($Is |s'#0@@8| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@8| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.RecvWrite2#requires| |s#0@@159| |s'#0@@8| |dop#0@@8|) true)) :qid |AsyncDiskModelsdfy.82:24| :skolemid |2815| :pattern ( (|AsyncDisk.__default.RecvWrite2#requires| |s#0@@159| |s'#0@@8| |dop#0@@8|)) )))
(assert  (=> true (forall ((|s#0@@160| T@U) (|s'#0@@9| T@U) (|dop#0@@9| T@U) ) (!  (=> (and (and (and (= (type |s#0@@160|) DatatypeTypeType) (= (type |s'#0@@9|) DatatypeTypeType)) (= (type |dop#0@@9|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite2#canCall| |s#0@@160| |s'#0@@9| |dop#0@@9|) (and (and ($Is |s#0@@160| Tclass.AsyncDisk.Variables) ($Is |s'#0@@9| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@9| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.ReqWrite2Op_q |dop#0@@9|) (and (AsyncDisk.Variables.Variables_q |s#0@@160|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@160|)) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@160|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@160|)) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@160|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@160|)) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@160|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@160|)) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|)))))) (=> (not (= (AsyncDisk.DiskOp.id1 |dop#0@@9|) (AsyncDisk.DiskOp.id2 |dop#0@@9|))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@9|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0@@5| |s#0@@160|)) (let ((|dt_update#reqWrites#0#0@@1| (|Map#Build| (|Map#Build| (AsyncDisk.Variables.reqWrites |s#0@@160|) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|))) ($Box (AsyncDisk.DiskOp.reqWrite1 |dop#0@@9|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|))) ($Box (AsyncDisk.DiskOp.reqWrite2 |dop#0@@9|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@5|) |dt_update#reqWrites#0#0@@1| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@5|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@5|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@5|)))))) (let ((|dt_update_tmp#0#0@@6| |s#0@@160|)) (and (AsyncDisk.Variables.Variables_q |s#0@@160|) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@6|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@6|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@6|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@6|))))))))))))))) (= (AsyncDisk.__default.RecvWrite2 |s#0@@160| |s'#0@@9| |dop#0@@9|)  (and (and (and (and (and (and (AsyncDisk.DiskOp.ReqWrite2Op_q |dop#0@@9|) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@160|)) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@160|)) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@160|)) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@160|)) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|))))))) (not (= (AsyncDisk.DiskOp.id1 |dop#0@@9|) (AsyncDisk.DiskOp.id2 |dop#0@@9|)))) (|AsyncDisk.Variables#Equal| |s'#0@@9| (let ((|dt_update_tmp#0#0@@7| |s#0@@160|)) (let ((|dt_update#reqWrites#0#0@@2| (|Map#Build| (|Map#Build| (AsyncDisk.Variables.reqWrites |s#0@@160|) ($Box (int_2_U (AsyncDisk.DiskOp.id1 |dop#0@@9|))) ($Box (AsyncDisk.DiskOp.reqWrite1 |dop#0@@9|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 |dop#0@@9|))) ($Box (AsyncDisk.DiskOp.reqWrite2 |dop#0@@9|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@7|) |dt_update#reqWrites#0#0@@2| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@7|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@7|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@7|))))))))) :qid |AsyncDiskModelsdfy.82:24| :skolemid |2816| :pattern ( (AsyncDisk.__default.RecvWrite2 |s#0@@160| |s'#0@@9| |dop#0@@9|)) ))))
(assert  (=> true (forall ((|s#0@@161| T@U) (|s'#0@@10| T@U) (|dop#0@@10| T@U) ) (!  (=> (and (and (and (= (type |s#0@@161|) DatatypeTypeType) (= (type |s'#0@@10|) DatatypeTypeType)) (= (type |dop#0@@10|) DatatypeTypeType)) (or (|AsyncDisk.__default.RecvWrite2#canCall| (Lit |s#0@@161|) (Lit |s'#0@@10|) (Lit |dop#0@@10|)) (and (and ($Is |s#0@@161| Tclass.AsyncDisk.Variables) ($Is |s'#0@@10| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@10| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.ReqWrite2Op_q (Lit |dop#0@@10|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@161|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@161|))) ($Box (int_2_U (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@161|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@161|))) ($Box (int_2_U (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@161|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@161|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@161|)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@161|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))))) (=> (U_2_bool (Lit (bool_2_U (not (= (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|)) (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@10|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1@@5| (Lit |s#0@@161|))) (let ((|dt_update#reqWrites#0#1@@1| (|Map#Build| (|Map#Build| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@161|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite1 (Lit |dop#0@@10|))))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite2 (Lit |dop#0@@10|))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@5|)) |dt_update#reqWrites#0#1@@1| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@5|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@5|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@5|))))))) (let ((|dt_update_tmp#0#1@@6| (Lit |s#0@@161|))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@161|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@6|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@6|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@6|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@6|))))))))))))))) (= (AsyncDisk.__default.RecvWrite2 (Lit |s#0@@161|) (Lit |s'#0@@10|) (Lit |dop#0@@10|))  (and (and (and (and (and (and (AsyncDisk.DiskOp.ReqWrite2Op_q (Lit |dop#0@@10|)) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@161|))) ($Box (int_2_U (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@161|))) ($Box (int_2_U (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@161|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|)))))))) (not (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@161|))) ($Box (int_2_U (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|)))))))) (not (= (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|)) (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))) (|AsyncDisk.Variables#Equal| |s'#0@@10| (let ((|dt_update_tmp#0#1@@7| (Lit |s#0@@161|))) (let ((|dt_update#reqWrites#0#1@@2| (|Map#Build| (|Map#Build| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@161|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id1 (Lit |dop#0@@10|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite1 (Lit |dop#0@@10|))))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id2 (Lit |dop#0@@10|))))) ($Box (Lit (AsyncDisk.DiskOp.reqWrite2 (Lit |dop#0@@10|))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@7|)) |dt_update#reqWrites#0#1@@2| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@7|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@7|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@7|)))))))))) :qid |AsyncDiskModelsdfy.82:24| :weight 3 :skolemid |2817| :pattern ( (AsyncDisk.__default.RecvWrite2 (Lit |s#0@@161|) (Lit |s'#0@@10|) (Lit |dop#0@@10|))) ))))
(assert  (=> true (forall ((|s#0@@162| T@U) (|s'#0@@11| T@U) (|dop#0@@11| T@U) ) (!  (=> (and (and (and (= (type |s#0@@162|) DatatypeTypeType) (= (type |s'#0@@11|) DatatypeTypeType)) (= (type |dop#0@@11|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckRead#canCall| |s#0@@162| |s'#0@@11| |dop#0@@11|) (and (and ($Is |s#0@@162| Tclass.AsyncDisk.Variables) ($Is |s'#0@@11| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@11| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.96:21| :skolemid |2818| :pattern ( (AsyncDisk.__default.AckRead |s#0@@162| |s'#0@@11| |dop#0@@11|)) ))))
(assert (forall ((|s#0@@163| T@U) (|s'#0@@12| T@U) (|dop#0@@12| T@U) ) (!  (=> (and (and (and (= (type |s#0@@163|) DatatypeTypeType) (= (type |s'#0@@12|) DatatypeTypeType)) (= (type |dop#0@@12|) DatatypeTypeType)) (and (and ($Is |s#0@@163| Tclass.AsyncDisk.Variables) ($Is |s'#0@@12| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@12| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.AckRead#requires| |s#0@@163| |s'#0@@12| |dop#0@@12|) true)) :qid |AsyncDiskModelsdfy.96:21| :skolemid |2819| :pattern ( (|AsyncDisk.__default.AckRead#requires| |s#0@@163| |s'#0@@12| |dop#0@@12|)) )))
(assert (= (type StartFuel_MapRemove_s._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((|s#0@@164| T@U) (|s'#0@@13| T@U) (|dop#0@@13| T@U) ) (!  (=> (and (and (and (= (type |s#0@@164|) DatatypeTypeType) (= (type |s'#0@@13|) DatatypeTypeType)) (= (type |dop#0@@13|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckRead#canCall| |s#0@@164| |s'#0@@13| |dop#0@@13|) (and (and ($Is |s#0@@164| Tclass.AsyncDisk.Variables) ($Is |s'#0@@13| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@13| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.RespReadOp_q |dop#0@@13|) (and (AsyncDisk.Variables.Variables_q |s#0@@164|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads |s#0@@164|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|))))) (and (and (and (|$IsA#AsyncDisk.RespRead| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respReads |s#0@@164|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|)))))) (|$IsA#AsyncDisk.RespRead| (AsyncDisk.DiskOp.respRead |dop#0@@13|))) (AsyncDisk.Variables.Variables_q |s#0@@164|)) (=> (|AsyncDisk.RespRead#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respReads |s#0@@164|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|))))) (AsyncDisk.DiskOp.respRead |dop#0@@13|)) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@13|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0@@8| |s#0@@164|)) (let ((|dt_update#respReads#0#0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.respReads |s#0@@164|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@8|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@8|) |dt_update#respReads#0#0| (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@8|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@8|)))))) (let ((|dt_update_tmp#0#0@@9| |s#0@@164|)) (and (and (AsyncDisk.Variables.Variables_q |s#0@@164|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead (AsyncDisk.Variables.respReads |s#0@@164|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@9|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@9|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@9|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@9|)))))))))) (= (AsyncDisk.__default.AckRead |s#0@@164| |s'#0@@13| |dop#0@@13|)  (and (and (and (AsyncDisk.DiskOp.RespReadOp_q |dop#0@@13|) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads |s#0@@164|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|)))))) (|AsyncDisk.RespRead#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respReads |s#0@@164|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|))))) (AsyncDisk.DiskOp.respRead |dop#0@@13|))) (|AsyncDisk.Variables#Equal| |s'#0@@13| (let ((|dt_update_tmp#0#0@@10| |s#0@@164|)) (let ((|dt_update#respReads#0#0@@0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.respReads |s#0@@164|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@13|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@10|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@10|) |dt_update#respReads#0#0@@0| (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@10|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@10|))))))))) :qid |AsyncDiskModelsdfy.96:21| :skolemid |2820| :pattern ( (AsyncDisk.__default.AckRead |s#0@@164| |s'#0@@13| |dop#0@@13|)) ))))
(assert  (=> true (forall ((|s#0@@165| T@U) (|s'#0@@14| T@U) (|dop#0@@14| T@U) ) (!  (=> (and (and (and (= (type |s#0@@165|) DatatypeTypeType) (= (type |s'#0@@14|) DatatypeTypeType)) (= (type |dop#0@@14|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckRead#canCall| (Lit |s#0@@165|) (Lit |s'#0@@14|) (Lit |dop#0@@14|)) (and (and ($Is |s#0@@165| Tclass.AsyncDisk.Variables) ($Is |s'#0@@14| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@14| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.RespReadOp_q (Lit |dop#0@@14|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@165|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads (Lit |s#0@@165|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@14|)))))) (and (and (and (|$IsA#AsyncDisk.RespRead| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@165|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|)))))))) (|$IsA#AsyncDisk.RespRead| (Lit (AsyncDisk.DiskOp.respRead (Lit |dop#0@@14|))))) (AsyncDisk.Variables.Variables_q (Lit |s#0@@165|))) (=> (|AsyncDisk.RespRead#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@165|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|))))))) (AsyncDisk.DiskOp.respRead (Lit |dop#0@@14|))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@14|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1@@8| (Lit |s#0@@165|))) (let ((|dt_update#respReads#0#1| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@165|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|)))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@8|)) (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@8|)) |dt_update#respReads#0#1| (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@8|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@8|))))))) (let ((|dt_update_tmp#0#1@@9| (Lit |s#0@@165|))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@165|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@165|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|))))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@9|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@9|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@9|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@9|)))))))))) (= (AsyncDisk.__default.AckRead (Lit |s#0@@165|) (Lit |s'#0@@14|) (Lit |dop#0@@14|))  (and (and (and (AsyncDisk.DiskOp.RespReadOp_q (Lit |dop#0@@14|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respReads (Lit |s#0@@165|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@14|))))))) (|AsyncDisk.RespRead#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@165|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|))))))) (AsyncDisk.DiskOp.respRead (Lit |dop#0@@14|)))) (|AsyncDisk.Variables#Equal| |s'#0@@14| (let ((|dt_update_tmp#0#1@@10| (Lit |s#0@@165|))) (let ((|dt_update#respReads#0#1@@0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@165|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@14|)))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@10|)) (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@10|)) |dt_update#respReads#0#1@@0| (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@10|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@10|)))))))))) :qid |AsyncDiskModelsdfy.96:21| :weight 3 :skolemid |2821| :pattern ( (AsyncDisk.__default.AckRead (Lit |s#0@@165|) (Lit |s'#0@@14|) (Lit |dop#0@@14|))) ))))
(assert  (=> true (forall ((|s#0@@166| T@U) (|s'#0@@15| T@U) (|dop#0@@15| T@U) ) (!  (=> (and (and (and (= (type |s#0@@166|) DatatypeTypeType) (= (type |s'#0@@15|) DatatypeTypeType)) (= (type |dop#0@@15|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckWrite#canCall| |s#0@@166| |s'#0@@15| |dop#0@@15|) (and (and ($Is |s#0@@166| Tclass.AsyncDisk.Variables) ($Is |s'#0@@15| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@15| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.104:22| :skolemid |2822| :pattern ( (AsyncDisk.__default.AckWrite |s#0@@166| |s'#0@@15| |dop#0@@15|)) ))))
(assert (forall ((|s#0@@167| T@U) (|s'#0@@16| T@U) (|dop#0@@16| T@U) ) (!  (=> (and (and (and (= (type |s#0@@167|) DatatypeTypeType) (= (type |s'#0@@16|) DatatypeTypeType)) (= (type |dop#0@@16|) DatatypeTypeType)) (and (and ($Is |s#0@@167| Tclass.AsyncDisk.Variables) ($Is |s'#0@@16| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@16| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.AckWrite#requires| |s#0@@167| |s'#0@@16| |dop#0@@16|) true)) :qid |AsyncDiskModelsdfy.104:22| :skolemid |2823| :pattern ( (|AsyncDisk.__default.AckWrite#requires| |s#0@@167| |s'#0@@16| |dop#0@@16|)) )))
(assert  (=> true (forall ((|s#0@@168| T@U) (|s'#0@@17| T@U) (|dop#0@@17| T@U) ) (!  (=> (and (and (and (= (type |s#0@@168|) DatatypeTypeType) (= (type |s'#0@@17|) DatatypeTypeType)) (= (type |dop#0@@17|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckWrite#canCall| |s#0@@168| |s'#0@@17| |dop#0@@17|) (and (and ($Is |s#0@@168| Tclass.AsyncDisk.Variables) ($Is |s'#0@@17| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@17| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.RespWriteOp_q |dop#0@@17|) (and (AsyncDisk.Variables.Variables_q |s#0@@168|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@168|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|))))) (and (and (and (|$IsA#AsyncDisk.RespWrite| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respWrites |s#0@@168|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|)))))) (|$IsA#AsyncDisk.RespWrite| (AsyncDisk.DiskOp.respWrite |dop#0@@17|))) (AsyncDisk.Variables.Variables_q |s#0@@168|)) (=> (|AsyncDisk.RespWrite#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respWrites |s#0@@168|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|))))) (AsyncDisk.DiskOp.respWrite |dop#0@@17|)) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@17|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#0@@11| |s#0@@168|)) (let ((|dt_update#respWrites#0#0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.respWrites |s#0@@168|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@11|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@11|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@11|) |dt_update#respWrites#0#0| (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@11|)))))) (let ((|dt_update_tmp#0#0@@12| |s#0@@168|)) (and (and (AsyncDisk.Variables.Variables_q |s#0@@168|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite (AsyncDisk.Variables.respWrites |s#0@@168|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@12|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@12|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@12|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@12|)))))))))) (= (AsyncDisk.__default.AckWrite |s#0@@168| |s'#0@@17| |dop#0@@17|)  (and (and (and (AsyncDisk.DiskOp.RespWriteOp_q |dop#0@@17|) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites |s#0@@168|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|)))))) (|AsyncDisk.RespWrite#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.respWrites |s#0@@168|)) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|))))) (AsyncDisk.DiskOp.respWrite |dop#0@@17|))) (|AsyncDisk.Variables#Equal| |s'#0@@17| (let ((|dt_update_tmp#0#0@@13| |s#0@@168|)) (let ((|dt_update#respWrites#0#0@@0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.respWrites |s#0@@168|) ($Box (int_2_U (AsyncDisk.DiskOp.id |dop#0@@17|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@13|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@13|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@13|) |dt_update#respWrites#0#0@@0| (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@13|))))))))) :qid |AsyncDiskModelsdfy.104:22| :skolemid |2824| :pattern ( (AsyncDisk.__default.AckWrite |s#0@@168| |s'#0@@17| |dop#0@@17|)) ))))
(assert  (=> true (forall ((|s#0@@169| T@U) (|s'#0@@18| T@U) (|dop#0@@18| T@U) ) (!  (=> (and (and (and (= (type |s#0@@169|) DatatypeTypeType) (= (type |s'#0@@18|) DatatypeTypeType)) (= (type |dop#0@@18|) DatatypeTypeType)) (or (|AsyncDisk.__default.AckWrite#canCall| (Lit |s#0@@169|) (Lit |s'#0@@18|) (Lit |dop#0@@18|)) (and (and ($Is |s#0@@169| Tclass.AsyncDisk.Variables) ($Is |s'#0@@18| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@18| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.RespWriteOp_q (Lit |dop#0@@18|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@169|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@169|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@18|)))))) (and (and (and (|$IsA#AsyncDisk.RespWrite| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@169|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|)))))))) (|$IsA#AsyncDisk.RespWrite| (Lit (AsyncDisk.DiskOp.respWrite (Lit |dop#0@@18|))))) (AsyncDisk.Variables.Variables_q (Lit |s#0@@169|))) (=> (|AsyncDisk.RespWrite#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@169|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|))))))) (AsyncDisk.DiskOp.respWrite (Lit |dop#0@@18|))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@18|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#0#1@@11| (Lit |s#0@@169|))) (let ((|dt_update#respWrites#0#1| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@169|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|)))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@11|)) (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@11|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@11|)) |dt_update#respWrites#0#1| (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@11|))))))) (let ((|dt_update_tmp#0#1@@12| (Lit |s#0@@169|))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@169|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@169|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|))))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@12|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@12|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@12|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@12|)))))))))) (= (AsyncDisk.__default.AckWrite (Lit |s#0@@169|) (Lit |s'#0@@18|) (Lit |dop#0@@18|))  (and (and (and (AsyncDisk.DiskOp.RespWriteOp_q (Lit |dop#0@@18|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.respWrites (Lit |s#0@@169|))) ($Box (int_2_U (AsyncDisk.DiskOp.id (Lit |dop#0@@18|))))))) (|AsyncDisk.RespWrite#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@169|)))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|))))))) (AsyncDisk.DiskOp.respWrite (Lit |dop#0@@18|)))) (|AsyncDisk.Variables#Equal| |s'#0@@18| (let ((|dt_update_tmp#0#1@@13| (Lit |s#0@@169|))) (let ((|dt_update#respWrites#0#1@@0| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.RespWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@169|))) ($Box (int_2_U (LitInt (AsyncDisk.DiskOp.id (Lit |dop#0@@18|)))))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@13|)) (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@13|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@13|)) |dt_update#respWrites#0#1@@0| (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@13|)))))))))) :qid |AsyncDiskModelsdfy.104:22| :weight 3 :skolemid |2825| :pattern ( (AsyncDisk.__default.AckWrite (Lit |s#0@@169|) (Lit |s'#0@@18|) (Lit |dop#0@@18|))) ))))
(assert  (=> true (forall ((|s#0@@170| T@U) (|s'#0@@19| T@U) (|dop#0@@19| T@U) ) (!  (=> (and (and (and (= (type |s#0@@170|) DatatypeTypeType) (= (type |s'#0@@19|) DatatypeTypeType)) (= (type |dop#0@@19|) DatatypeTypeType)) (or (|AsyncDisk.__default.Stutter#canCall| |s#0@@170| |s'#0@@19| |dop#0@@19|) (and (and ($Is |s#0@@170| Tclass.AsyncDisk.Variables) ($Is |s'#0@@19| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@19| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.112:21| :skolemid |2826| :pattern ( (AsyncDisk.__default.Stutter |s#0@@170| |s'#0@@19| |dop#0@@19|)) ))))
(assert (forall ((|s#0@@171| T@U) (|s'#0@@20| T@U) (|dop#0@@20| T@U) ) (!  (=> (and (and (and (= (type |s#0@@171|) DatatypeTypeType) (= (type |s'#0@@20|) DatatypeTypeType)) (= (type |dop#0@@20|) DatatypeTypeType)) (and (and ($Is |s#0@@171| Tclass.AsyncDisk.Variables) ($Is |s'#0@@20| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@20| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.Stutter#requires| |s#0@@171| |s'#0@@20| |dop#0@@20|) true)) :qid |AsyncDiskModelsdfy.112:21| :skolemid |2827| :pattern ( (|AsyncDisk.__default.Stutter#requires| |s#0@@171| |s'#0@@20| |dop#0@@20|)) )))
(assert  (=> true (forall ((|s#0@@172| T@U) (|s'#0@@21| T@U) (|dop#0@@21| T@U) ) (!  (=> (and (and (and (= (type |s#0@@172|) DatatypeTypeType) (= (type |s'#0@@21|) DatatypeTypeType)) (= (type |dop#0@@21|) DatatypeTypeType)) (or (|AsyncDisk.__default.Stutter#canCall| |s#0@@172| |s'#0@@21| |dop#0@@21|) (and (and ($Is |s#0@@172| Tclass.AsyncDisk.Variables) ($Is |s'#0@@21| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@21| Tclass.AsyncDisk.DiskOp)))) (and (=> (AsyncDisk.DiskOp.NoDiskOp_q |dop#0@@21|) (and (|$IsA#AsyncDisk.Variables| |s'#0@@21|) (|$IsA#AsyncDisk.Variables| |s#0@@172|))) (= (AsyncDisk.__default.Stutter |s#0@@172| |s'#0@@21| |dop#0@@21|)  (and (AsyncDisk.DiskOp.NoDiskOp_q |dop#0@@21|) (|AsyncDisk.Variables#Equal| |s'#0@@21| |s#0@@172|))))) :qid |AsyncDiskModelsdfy.112:21| :skolemid |2828| :pattern ( (AsyncDisk.__default.Stutter |s#0@@172| |s'#0@@21| |dop#0@@21|)) ))))
(assert  (=> true (forall ((|s#0@@173| T@U) (|s'#0@@22| T@U) (|dop#0@@22| T@U) ) (!  (=> (and (and (and (= (type |s#0@@173|) DatatypeTypeType) (= (type |s'#0@@22|) DatatypeTypeType)) (= (type |dop#0@@22|) DatatypeTypeType)) (or (|AsyncDisk.__default.Stutter#canCall| (Lit |s#0@@173|) (Lit |s'#0@@22|) (Lit |dop#0@@22|)) (and (and ($Is |s#0@@173| Tclass.AsyncDisk.Variables) ($Is |s'#0@@22| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@22| Tclass.AsyncDisk.DiskOp)))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.DiskOp.NoDiskOp_q (Lit |dop#0@@22|))))) (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@22|)) (|$IsA#AsyncDisk.Variables| (Lit |s#0@@173|)))) (= (AsyncDisk.__default.Stutter (Lit |s#0@@173|) (Lit |s'#0@@22|) (Lit |dop#0@@22|))  (and (AsyncDisk.DiskOp.NoDiskOp_q (Lit |dop#0@@22|)) (|AsyncDisk.Variables#Equal| |s'#0@@22| |s#0@@173|))))) :qid |AsyncDiskModelsdfy.112:21| :weight 3 :skolemid |2829| :pattern ( (AsyncDisk.__default.Stutter (Lit |s#0@@173|) (Lit |s'#0@@22|) (Lit |dop#0@@22|))) ))))
(assert  (=> true (forall ((|s#0@@174| T@U) (|s'#0@@23| T@U) (|dop#0@@23| T@U) (|step#0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@174|) DatatypeTypeType) (= (type |s'#0@@23|) DatatypeTypeType)) (= (type |dop#0@@23|) DatatypeTypeType)) (= (type |step#0|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextStep#canCall| |s#0@@174| |s'#0@@23| |dop#0@@23| |step#0|) (and (and (and ($Is |s#0@@174| Tclass.AsyncDisk.Variables) ($Is |s'#0@@23| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@23| Tclass.AsyncDisk.DiskOp)) ($Is |step#0| Tclass.AsyncDisk.Step)))) true) :qid |AsyncDiskModelsdfy.118:22| :skolemid |2830| :pattern ( (AsyncDisk.__default.NextStep |s#0@@174| |s'#0@@23| |dop#0@@23| |step#0|)) ))))
(assert (forall ((|s#0@@175| T@U) (|s'#0@@24| T@U) (|dop#0@@24| T@U) (|step#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@175|) DatatypeTypeType) (= (type |s'#0@@24|) DatatypeTypeType)) (= (type |dop#0@@24|) DatatypeTypeType)) (= (type |step#0@@0|) DatatypeTypeType)) (and (and (and ($Is |s#0@@175| Tclass.AsyncDisk.Variables) ($Is |s'#0@@24| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@24| Tclass.AsyncDisk.DiskOp)) ($Is |step#0@@0| Tclass.AsyncDisk.Step))) (= (|AsyncDisk.__default.NextStep#requires| |s#0@@175| |s'#0@@24| |dop#0@@24| |step#0@@0|) true)) :qid |AsyncDiskModelsdfy.118:22| :skolemid |2831| :pattern ( (|AsyncDisk.__default.NextStep#requires| |s#0@@175| |s'#0@@24| |dop#0@@24| |step#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@176| T@U) (|s'#0@@25| T@U) (|dop#0@@25| T@U) (|step#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@176|) DatatypeTypeType) (= (type |s'#0@@25|) DatatypeTypeType)) (= (type |dop#0@@25|) DatatypeTypeType)) (= (type |step#0@@1|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextStep#canCall| |s#0@@176| |s'#0@@25| |dop#0@@25| |step#0@@1|) (and (and (and ($Is |s#0@@176| Tclass.AsyncDisk.Variables) ($Is |s'#0@@25| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@25| Tclass.AsyncDisk.DiskOp)) ($Is |step#0@@1| Tclass.AsyncDisk.Step)))) (and (and (=> (AsyncDisk.Step.RecvReadStep_q |step#0@@1|) (|AsyncDisk.__default.RecvRead#canCall| |s#0@@176| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.RecvReadStep_q |step#0@@1|)) (and (=> (AsyncDisk.Step.RecvWriteStep_q |step#0@@1|) (|AsyncDisk.__default.RecvWrite#canCall| |s#0@@176| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.RecvWriteStep_q |step#0@@1|)) (and (=> (AsyncDisk.Step.RecvWrite2Step_q |step#0@@1|) (|AsyncDisk.__default.RecvWrite2#canCall| |s#0@@176| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.RecvWrite2Step_q |step#0@@1|)) (and (=> (AsyncDisk.Step.AckReadStep_q |step#0@@1|) (|AsyncDisk.__default.AckRead#canCall| |s#0@@176| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.AckReadStep_q |step#0@@1|)) (and (=> (AsyncDisk.Step.AckWriteStep_q |step#0@@1|) (|AsyncDisk.__default.AckWrite#canCall| |s#0@@176| |s'#0@@25| |dop#0@@25|)) (=> (not (AsyncDisk.Step.AckWriteStep_q |step#0@@1|)) (|AsyncDisk.__default.Stutter#canCall| |s#0@@176| |s'#0@@25| |dop#0@@25|))))))))))) (= (AsyncDisk.__default.NextStep |s#0@@176| |s'#0@@25| |dop#0@@25| |step#0@@1|) (ite (AsyncDisk.Step.RecvReadStep_q |step#0@@1|) (AsyncDisk.__default.RecvRead |s#0@@176| |s'#0@@25| |dop#0@@25|) (ite (AsyncDisk.Step.RecvWriteStep_q |step#0@@1|) (AsyncDisk.__default.RecvWrite |s#0@@176| |s'#0@@25| |dop#0@@25|) (ite (AsyncDisk.Step.RecvWrite2Step_q |step#0@@1|) (AsyncDisk.__default.RecvWrite2 |s#0@@176| |s'#0@@25| |dop#0@@25|) (ite (AsyncDisk.Step.AckReadStep_q |step#0@@1|) (AsyncDisk.__default.AckRead |s#0@@176| |s'#0@@25| |dop#0@@25|) (ite (AsyncDisk.Step.AckWriteStep_q |step#0@@1|) (AsyncDisk.__default.AckWrite |s#0@@176| |s'#0@@25| |dop#0@@25|) (AsyncDisk.__default.Stutter |s#0@@176| |s'#0@@25| |dop#0@@25|))))))))) :qid |AsyncDiskModelsdfy.118:22| :skolemid |2832| :pattern ( (AsyncDisk.__default.NextStep |s#0@@176| |s'#0@@25| |dop#0@@25| |step#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@177| T@U) (|s'#0@@26| T@U) (|dop#0@@26| T@U) (|step#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@177|) DatatypeTypeType) (= (type |s'#0@@26|) DatatypeTypeType)) (= (type |dop#0@@26|) DatatypeTypeType)) (= (type |step#0@@2|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextStep#canCall| (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|) (Lit |step#0@@2|)) (and (and (and ($Is |s#0@@177| Tclass.AsyncDisk.Variables) ($Is |s'#0@@26| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@26| Tclass.AsyncDisk.DiskOp)) ($Is |step#0@@2| Tclass.AsyncDisk.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvReadStep_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.RecvRead#canCall| (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvReadStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvWriteStep_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.RecvWrite#canCall| (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvWriteStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvWrite2Step_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.RecvWrite2#canCall| (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.RecvWrite2Step_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.AckReadStep_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.AckRead#canCall| (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.AckReadStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.AckWriteStep_q (Lit |step#0@@2|))))) (|AsyncDisk.__default.AckWrite#canCall| (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.Step.AckWriteStep_q (Lit |step#0@@2|)))))) (|AsyncDisk.__default.Stutter#canCall| (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)))))))))))) (= (AsyncDisk.__default.NextStep (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|) (Lit |step#0@@2|)) (ite (AsyncDisk.Step.RecvReadStep_q (Lit |step#0@@2|)) (AsyncDisk.__default.RecvRead (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (ite (AsyncDisk.Step.RecvWriteStep_q (Lit |step#0@@2|)) (AsyncDisk.__default.RecvWrite (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (ite (AsyncDisk.Step.RecvWrite2Step_q (Lit |step#0@@2|)) (AsyncDisk.__default.RecvWrite2 (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (ite (AsyncDisk.Step.AckReadStep_q (Lit |step#0@@2|)) (AsyncDisk.__default.AckRead (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (ite (AsyncDisk.Step.AckWriteStep_q (Lit |step#0@@2|)) (AsyncDisk.__default.AckWrite (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)) (AsyncDisk.__default.Stutter (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|)))))))))) :qid |AsyncDiskModelsdfy.118:22| :weight 3 :skolemid |2833| :pattern ( (AsyncDisk.__default.NextStep (Lit |s#0@@177|) (Lit |s'#0@@26|) (Lit |dop#0@@26|) (Lit |step#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@178| T@U) (|s'#0@@27| T@U) (|dop#0@@27| T@U) ) (!  (=> (and (and (and (= (type |s#0@@178|) DatatypeTypeType) (= (type |s'#0@@27|) DatatypeTypeType)) (= (type |dop#0@@27|) DatatypeTypeType)) (or (|AsyncDisk.__default.Next#canCall| |s#0@@178| |s'#0@@27| |dop#0@@27|) (and (and ($Is |s#0@@178| Tclass.AsyncDisk.Variables) ($Is |s'#0@@27| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@27| Tclass.AsyncDisk.DiskOp)))) true) :qid |AsyncDiskModelsdfy.129:18| :skolemid |2834| :pattern ( (AsyncDisk.__default.Next |s#0@@178| |s'#0@@27| |dop#0@@27|)) ))))
(assert (forall ((|s#0@@179| T@U) (|s'#0@@28| T@U) (|dop#0@@28| T@U) ) (!  (=> (and (and (and (= (type |s#0@@179|) DatatypeTypeType) (= (type |s'#0@@28|) DatatypeTypeType)) (= (type |dop#0@@28|) DatatypeTypeType)) (and (and ($Is |s#0@@179| Tclass.AsyncDisk.Variables) ($Is |s'#0@@28| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@28| Tclass.AsyncDisk.DiskOp))) (= (|AsyncDisk.__default.Next#requires| |s#0@@179| |s'#0@@28| |dop#0@@28|) true)) :qid |AsyncDiskModelsdfy.129:18| :skolemid |2835| :pattern ( (|AsyncDisk.__default.Next#requires| |s#0@@179| |s'#0@@28| |dop#0@@28|)) )))
(assert  (=> true (forall ((|s#0@@180| T@U) (|s'#0@@29| T@U) (|dop#0@@29| T@U) ) (!  (=> (and (and (and (= (type |s#0@@180|) DatatypeTypeType) (= (type |s'#0@@29|) DatatypeTypeType)) (= (type |dop#0@@29|) DatatypeTypeType)) (or (|AsyncDisk.__default.Next#canCall| |s#0@@180| |s'#0@@29| |dop#0@@29|) (and (and ($Is |s#0@@180| Tclass.AsyncDisk.Variables) ($Is |s'#0@@29| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@29| Tclass.AsyncDisk.DiskOp)))) (and (forall ((|step#0@@3| T@U) ) (!  (=> (and (= (type |step#0@@3|) DatatypeTypeType) ($Is |step#0@@3| Tclass.AsyncDisk.Step)) (|AsyncDisk.__default.NextStep#canCall| |s#0@@180| |s'#0@@29| |dop#0@@29| |step#0@@3|)) :qid |AsyncDiskModelsdfy.130:12| :skolemid |2837| :pattern ( (AsyncDisk.__default.NextStep |s#0@@180| |s'#0@@29| |dop#0@@29| |step#0@@3|)) )) (= (AsyncDisk.__default.Next |s#0@@180| |s'#0@@29| |dop#0@@29|) (exists ((|step#0@@4| T@U) ) (!  (and (= (type |step#0@@4|) DatatypeTypeType) (and ($Is |step#0@@4| Tclass.AsyncDisk.Step) (AsyncDisk.__default.NextStep |s#0@@180| |s'#0@@29| |dop#0@@29| |step#0@@4|))) :qid |AsyncDiskModelsdfy.130:12| :skolemid |2836| :pattern ( (AsyncDisk.__default.NextStep |s#0@@180| |s'#0@@29| |dop#0@@29| |step#0@@4|)) ))))) :qid |AsyncDiskModelsdfy.129:18| :skolemid |2838| :pattern ( (AsyncDisk.__default.Next |s#0@@180| |s'#0@@29| |dop#0@@29|)) ))))
(assert  (=> true (forall ((|s#0@@181| T@U) (|s'#0@@30| T@U) (|dop#0@@30| T@U) ) (!  (=> (and (and (and (= (type |s#0@@181|) DatatypeTypeType) (= (type |s'#0@@30|) DatatypeTypeType)) (= (type |dop#0@@30|) DatatypeTypeType)) (or (|AsyncDisk.__default.Next#canCall| (Lit |s#0@@181|) (Lit |s'#0@@30|) (Lit |dop#0@@30|)) (and (and ($Is |s#0@@181| Tclass.AsyncDisk.Variables) ($Is |s'#0@@30| Tclass.AsyncDisk.Variables)) ($Is |dop#0@@30| Tclass.AsyncDisk.DiskOp)))) (and (forall ((|step#1| T@U) ) (!  (=> (and (= (type |step#1|) DatatypeTypeType) ($Is |step#1| Tclass.AsyncDisk.Step)) (|AsyncDisk.__default.NextStep#canCall| (Lit |s#0@@181|) (Lit |s'#0@@30|) (Lit |dop#0@@30|) |step#1|)) :qid |AsyncDiskModelsdfy.130:12| :skolemid |2840| :pattern ( (AsyncDisk.__default.NextStep |s#0@@181| |s'#0@@30| |dop#0@@30| |step#1|)) )) (= (AsyncDisk.__default.Next (Lit |s#0@@181|) (Lit |s'#0@@30|) (Lit |dop#0@@30|)) (exists ((|step#1@@0| T@U) ) (!  (and (= (type |step#1@@0|) DatatypeTypeType) (and ($Is |step#1@@0| Tclass.AsyncDisk.Step) (AsyncDisk.__default.NextStep (Lit |s#0@@181|) (Lit |s'#0@@30|) (Lit |dop#0@@30|) |step#1@@0|))) :qid |AsyncDiskModelsdfy.130:12| :skolemid |2839| :pattern ( (AsyncDisk.__default.NextStep |s#0@@181| |s'#0@@30| |dop#0@@30| |step#1@@0|)) ))))) :qid |AsyncDiskModelsdfy.129:18| :weight 3 :skolemid |2841| :pattern ( (AsyncDisk.__default.Next (Lit |s#0@@181|) (Lit |s'#0@@30|) (Lit |dop#0@@30|))) ))))
(assert (forall (($ly@@346 T@U) (|s#0@@182| T@U) ) (!  (=> (and (= (type $ly@@346) LayerTypeType) (= (type |s#0@@182|) (SeqType BoxType))) (= (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@346) |s#0@@182|) (AsyncDisk.__default.ChecksumChecksOut $ly@@346 |s#0@@182|))) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2842| :pattern ( (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@346) |s#0@@182|)) )))
(assert (forall (($ly@@347 T@U) (|s#0@@183| T@U) ) (!  (=> (and (= (type $ly@@347) LayerTypeType) (= (type |s#0@@183|) (SeqType BoxType))) (= (AsyncDisk.__default.ChecksumChecksOut $ly@@347 |s#0@@183|) (AsyncDisk.__default.ChecksumChecksOut $LZ |s#0@@183|))) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2843| :pattern ( (AsyncDisk.__default.ChecksumChecksOut (AsFuelBottom $ly@@347) |s#0@@183|)) )))
(assert  (=> true (forall (($ly@@348 T@U) (|s#0@@184| T@U) ) (!  (=> (and (and (= (type $ly@@348) LayerTypeType) (= (type |s#0@@184|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumChecksOut#canCall| |s#0@@184|) ($Is |s#0@@184| (TSeq Tclass.NativeTypes.byte)))) true) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2844| :pattern ( (AsyncDisk.__default.ChecksumChecksOut $ly@@348 |s#0@@184|)) ))))
(assert (forall (($ly@@349 T@U) (|s#0@@185| T@U) ) (!  (=> (and (and (= (type $ly@@349) LayerTypeType) (= (type |s#0@@185|) (SeqType BoxType))) ($Is |s#0@@185| (TSeq Tclass.NativeTypes.byte))) (= (|AsyncDisk.__default.ChecksumChecksOut#requires| $ly@@349 |s#0@@185|) true)) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2845| :pattern ( (|AsyncDisk.__default.ChecksumChecksOut#requires| $ly@@349 |s#0@@185|)) )))
(assert  (=> true (forall (($ly@@350 T@U) (|s#0@@186| T@U) ) (!  (=> (and (and (= (type $ly@@350) LayerTypeType) (= (type |s#0@@186|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumChecksOut#canCall| |s#0@@186|) ($Is |s#0@@186| (TSeq Tclass.NativeTypes.byte)))) (and (=> (>= (|Seq#Length| |s#0@@186|) (LitInt 32)) (|CRC32__C.__default.crc32__c__padded#canCall| (|Seq#Drop| |s#0@@186| (LitInt 32)))) (= (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@350) |s#0@@186|)  (and (>= (|Seq#Length| |s#0@@186|) (LitInt 32)) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| |s#0@@186| (LitInt 32)) (LitInt 0)) (CRC32__C.__default.crc32__c__padded (|Seq#Drop| |s#0@@186| (LitInt 32)))))))) :qid |AsyncDiskModelsdfy.149:23| :skolemid |2846| :pattern ( (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@350) |s#0@@186|)) ))))
(assert  (=> true (forall (($ly@@351 T@U) (|s#0@@187| T@U) ) (!  (=> (and (and (= (type $ly@@351) LayerTypeType) (= (type |s#0@@187|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumChecksOut#canCall| (Lit |s#0@@187|)) ($Is |s#0@@187| (TSeq Tclass.NativeTypes.byte)))) (and (=> (>= (|Seq#Length| (Lit |s#0@@187|)) (LitInt 32)) (|CRC32__C.__default.crc32__c__padded#canCall| (Lit (|Seq#Drop| (Lit |s#0@@187|) (LitInt 32))))) (= (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@351) (Lit |s#0@@187|))  (and (>= (|Seq#Length| (Lit |s#0@@187|)) (LitInt 32)) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Lit |s#0@@187|) (LitInt 32)) (LitInt 0)) (CRC32__C.__default.crc32__c__padded (Lit (|Seq#Drop| (Lit |s#0@@187|) (LitInt 32))))))))) :qid |AsyncDiskModelsdfy.149:23| :weight 3 :skolemid |2847| :pattern ( (AsyncDisk.__default.ChecksumChecksOut ($LS $ly@@351) (Lit |s#0@@187|))) ))))
(assert  (=> true (forall ((|realContents#0| T@U) (|fakeContents#0| T@U) (|i#0@@123| Int) (|j#0@@14| Int) ) (!  (=> (and (and (= (type |realContents#0|) (SeqType BoxType)) (= (type |fakeContents#0|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| |realContents#0| |fakeContents#0| |i#0@@123| |j#0@@14|) (and (and ($Is |realContents#0| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0| (TSeq Tclass.NativeTypes.byte))) (and (= (|Seq#Length| |realContents#0|) (|Seq#Length| |fakeContents#0|)) (and (and (<= (LitInt 0) |i#0@@123|) (<= |i#0@@123| |j#0@@14|)) (<= |j#0@@14| (|Seq#Length| |realContents#0|))))))) true) :qid |AsyncDiskModelsdfy.154:39| :skolemid |2848| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0| |fakeContents#0| |i#0@@123| |j#0@@14|)) ))))
(assert (forall ((|realContents#0@@0| T@U) (|fakeContents#0@@0| T@U) (|i#0@@124| Int) (|j#0@@15| Int) ) (!  (=> (and (and (= (type |realContents#0@@0|) (SeqType BoxType)) (= (type |fakeContents#0@@0|) (SeqType BoxType))) (and ($Is |realContents#0@@0| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@0| (TSeq Tclass.NativeTypes.byte)))) (= (|AsyncDisk.__default.ChecksumsCheckOutForSlice#requires| |realContents#0@@0| |fakeContents#0@@0| |i#0@@124| |j#0@@15|)  (and (= (|Seq#Length| |realContents#0@@0|) (|Seq#Length| |fakeContents#0@@0|)) (and (and (<= (LitInt 0) |i#0@@124|) (<= |i#0@@124| |j#0@@15|)) (<= |j#0@@15| (|Seq#Length| |realContents#0@@0|)))))) :qid |AsyncDiskModelsdfy.154:39| :skolemid |2849| :pattern ( (|AsyncDisk.__default.ChecksumsCheckOutForSlice#requires| |realContents#0@@0| |fakeContents#0@@0| |i#0@@124| |j#0@@15|)) )))
(assert (= (type StartFuel_AsyncDisk._default.ChecksumChecksOut) LayerTypeType))
(assert  (=> true (forall ((|realContents#0@@1| T@U) (|fakeContents#0@@1| T@U) (|i#0@@125| Int) (|j#0@@16| Int) ) (!  (=> (and (and (= (type |realContents#0@@1|) (SeqType BoxType)) (= (type |fakeContents#0@@1|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| |realContents#0@@1| |fakeContents#0@@1| |i#0@@125| |j#0@@16|) (and (and ($Is |realContents#0@@1| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@1| (TSeq Tclass.NativeTypes.byte))) (and (= (|Seq#Length| |realContents#0@@1|) (|Seq#Length| |fakeContents#0@@1|)) (and (and (<= (LitInt 0) |i#0@@125|) (<= |i#0@@125| |j#0@@16|)) (<= |j#0@@16| (|Seq#Length| |realContents#0@@1|))))))) (and (and (|AsyncDisk.__default.ChecksumChecksOut#canCall| (|Seq#Drop| (|Seq#Take| |realContents#0@@1| |j#0@@16|) |i#0@@125|)) (=> (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (|Seq#Drop| (|Seq#Take| |realContents#0@@1| |j#0@@16|) |i#0@@125|)) (|AsyncDisk.__default.ChecksumChecksOut#canCall| (|Seq#Drop| (|Seq#Take| |fakeContents#0@@1| |j#0@@16|) |i#0@@125|)))) (= (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@1| |fakeContents#0@@1| |i#0@@125| |j#0@@16|)  (=> (and (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (|Seq#Drop| (|Seq#Take| |realContents#0@@1| |j#0@@16|) |i#0@@125|)) (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (|Seq#Drop| (|Seq#Take| |fakeContents#0@@1| |j#0@@16|) |i#0@@125|))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| |realContents#0@@1| |j#0@@16|) |i#0@@125|) (|Seq#Drop| (|Seq#Take| |fakeContents#0@@1| |j#0@@16|) |i#0@@125|)))))) :qid |AsyncDiskModelsdfy.154:39| :skolemid |2850| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@1| |fakeContents#0@@1| |i#0@@125| |j#0@@16|)) ))))
(assert  (=> true (forall ((|realContents#0@@2| T@U) (|fakeContents#0@@2| T@U) (|i#0@@126| Int) (|j#0@@17| Int) ) (!  (=> (and (and (= (type |realContents#0@@2|) (SeqType BoxType)) (= (type |fakeContents#0@@2|) (SeqType BoxType))) (or (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| (Lit |realContents#0@@2|) (Lit |fakeContents#0@@2|) (LitInt |i#0@@126|) (LitInt |j#0@@17|)) (and (and ($Is |realContents#0@@2| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (= (|Seq#Length| (Lit |realContents#0@@2|)) (|Seq#Length| (Lit |fakeContents#0@@2|))) (and (and (<= (LitInt 0) (LitInt |i#0@@126|)) (<= (LitInt |i#0@@126|) (LitInt |j#0@@17|))) (<= (LitInt |j#0@@17|) (|Seq#Length| (Lit |realContents#0@@2|)))))))) (and (and (|AsyncDisk.__default.ChecksumChecksOut#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |realContents#0@@2|) (LitInt |j#0@@17|)) (LitInt |i#0@@126|)))) (=> (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (Lit (|Seq#Drop| (|Seq#Take| (Lit |realContents#0@@2|) (LitInt |j#0@@17|)) (LitInt |i#0@@126|)))) (|AsyncDisk.__default.ChecksumChecksOut#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |fakeContents#0@@2|) (LitInt |j#0@@17|)) (LitInt |i#0@@126|)))))) (= (AsyncDisk.__default.ChecksumsCheckOutForSlice (Lit |realContents#0@@2|) (Lit |fakeContents#0@@2|) (LitInt |i#0@@126|) (LitInt |j#0@@17|))  (=> (and (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (Lit (|Seq#Drop| (|Seq#Take| (Lit |realContents#0@@2|) (LitInt |j#0@@17|)) (LitInt |i#0@@126|)))) (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (Lit (|Seq#Drop| (|Seq#Take| (Lit |fakeContents#0@@2|) (LitInt |j#0@@17|)) (LitInt |i#0@@126|))))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (Lit |realContents#0@@2|) (LitInt |j#0@@17|)) (LitInt |i#0@@126|)) (|Seq#Drop| (|Seq#Take| (Lit |fakeContents#0@@2|) (LitInt |j#0@@17|)) (LitInt |i#0@@126|))))))) :qid |AsyncDiskModelsdfy.154:39| :weight 3 :skolemid |2851| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice (Lit |realContents#0@@2|) (Lit |fakeContents#0@@2|) (LitInt |i#0@@126|) (LitInt |j#0@@17|))) ))))
(assert  (=> true (forall ((|realContents#0@@3| T@U) (|fakeContents#0@@3| T@U) ) (!  (=> (and (and (= (type |realContents#0@@3|) (SeqType BoxType)) (= (type |fakeContents#0@@3|) (SeqType BoxType))) (or (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| |realContents#0@@3| |fakeContents#0@@3|) (and (and ($Is |realContents#0@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@3| (TSeq Tclass.NativeTypes.byte))) (= (|Seq#Length| |realContents#0@@3|) (|Seq#Length| |fakeContents#0@@3|))))) true) :qid |AsyncDiskModelsdfy.171:34| :skolemid |2852| :pattern ( (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@3| |fakeContents#0@@3|)) ))))
(assert (forall ((|realContents#0@@4| T@U) (|fakeContents#0@@4| T@U) ) (!  (=> (and (and (= (type |realContents#0@@4|) (SeqType BoxType)) (= (type |fakeContents#0@@4|) (SeqType BoxType))) (and ($Is |realContents#0@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@4| (TSeq Tclass.NativeTypes.byte)))) (= (|AsyncDisk.__default.AllChecksumsCheckOut#requires| |realContents#0@@4| |fakeContents#0@@4|) (= (|Seq#Length| |realContents#0@@4|) (|Seq#Length| |fakeContents#0@@4|)))) :qid |AsyncDiskModelsdfy.171:34| :skolemid |2853| :pattern ( (|AsyncDisk.__default.AllChecksumsCheckOut#requires| |realContents#0@@4| |fakeContents#0@@4|)) )))
(assert  (=> true (forall ((|realContents#0@@5| T@U) (|fakeContents#0@@5| T@U) ) (!  (=> (and (and (= (type |realContents#0@@5|) (SeqType BoxType)) (= (type |fakeContents#0@@5|) (SeqType BoxType))) (or (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| |realContents#0@@5| |fakeContents#0@@5|) (and (and ($Is |realContents#0@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@5| (TSeq Tclass.NativeTypes.byte))) (= (|Seq#Length| |realContents#0@@5|) (|Seq#Length| |fakeContents#0@@5|))))) (and (forall ((|i#0@@127| Int) (|j#0@@18| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#0@@127|) (<= |i#0@@127| |j#0@@18|)) (<= |j#0@@18| (|Seq#Length| |realContents#0@@5|))) (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| |realContents#0@@5| |fakeContents#0@@5| |i#0@@127| |j#0@@18|)) :qid |AsyncDiskModelsdfy.174:12| :skolemid |2855| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@5| |fakeContents#0@@5| |i#0@@127| |j#0@@18|)) )) (= (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@5| |fakeContents#0@@5|) (forall ((|i#0@@128| Int) (|j#0@@19| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#0@@128|) (<= |i#0@@128| |j#0@@19|)) (<= |j#0@@19| (|Seq#Length| |realContents#0@@5|))) (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@5| |fakeContents#0@@5| |i#0@@128| |j#0@@19|)) :qid |AsyncDiskModelsdfy.174:12| :skolemid |2854| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@5| |fakeContents#0@@5| |i#0@@128| |j#0@@19|)) ))))) :qid |AsyncDiskModelsdfy.171:34| :skolemid |2856| :pattern ( (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@5| |fakeContents#0@@5|)) ))))
(assert  (=> true (forall ((|realContents#0@@6| T@U) (|fakeContents#0@@6| T@U) ) (!  (=> (and (and (= (type |realContents#0@@6|) (SeqType BoxType)) (= (type |fakeContents#0@@6|) (SeqType BoxType))) (or (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|)) (and (and ($Is |realContents#0@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |fakeContents#0@@6| (TSeq Tclass.NativeTypes.byte))) (= (|Seq#Length| (Lit |realContents#0@@6|)) (|Seq#Length| (Lit |fakeContents#0@@6|)))))) (and (forall ((|i#1@@15| Int) (|j#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@15|) (<= |i#1@@15| |j#1@@1|)) (<= |j#1@@1| (|Seq#Length| (Lit |realContents#0@@6|)))) (|AsyncDisk.__default.ChecksumsCheckOutForSlice#canCall| (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|) |i#1@@15| |j#1@@1|)) :qid |AsyncDiskModelsdfy.174:12| :skolemid |2858| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@6| |fakeContents#0@@6| |i#1@@15| |j#1@@1|)) )) (= (AsyncDisk.__default.AllChecksumsCheckOut (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|)) (forall ((|i#1@@16| Int) (|j#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@16|) (<= |i#1@@16| |j#1@@2|)) (<= |j#1@@2| (|Seq#Length| (Lit |realContents#0@@6|)))) (AsyncDisk.__default.ChecksumsCheckOutForSlice (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|) |i#1@@16| |j#1@@2|)) :qid |AsyncDiskModelsdfy.174:12| :skolemid |2857| :pattern ( (AsyncDisk.__default.ChecksumsCheckOutForSlice |realContents#0@@6| |fakeContents#0@@6| |i#1@@16| |j#1@@2|)) ))))) :qid |AsyncDiskModelsdfy.171:34| :weight 3 :skolemid |2859| :pattern ( (AsyncDisk.__default.AllChecksumsCheckOut (Lit |realContents#0@@6|) (Lit |fakeContents#0@@6|))) ))))
(assert  (=> true (forall ((|s#0@@188| T@U) (|s'#0@@31| T@U) (|id#0| Int) (|fakeContents#0@@7| T@U) ) (!  (=> (and (and (and (= (type |s#0@@188|) DatatypeTypeType) (= (type |s'#0@@31|) DatatypeTypeType)) (= (type |fakeContents#0@@7|) (SeqType BoxType))) (or (|AsyncDisk.__default.ProcessReadFailure#canCall| |s#0@@188| |s'#0@@31| |id#0| |fakeContents#0@@7|) (and (and (and ($Is |s#0@@188| Tclass.AsyncDisk.Variables) ($Is |s'#0@@31| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0|) (< |id#0| 18446744073709551616))) ($Is |fakeContents#0@@7| (TSeq Tclass.NativeTypes.byte))))) true) :qid |AsyncDiskModelsdfy.178:32| :skolemid |2860| :pattern ( (AsyncDisk.__default.ProcessReadFailure |s#0@@188| |s'#0@@31| |id#0| |fakeContents#0@@7|)) ))))
(assert (forall ((|s#0@@189| T@U) (|s'#0@@32| T@U) (|id#0@@0| Int) (|fakeContents#0@@8| T@U) ) (!  (=> (and (and (= (type |s#0@@189|) DatatypeTypeType) (= (type |s'#0@@32|) DatatypeTypeType)) (= (type |fakeContents#0@@8|) (SeqType BoxType))) (=> (and (and (and ($Is |s#0@@189| Tclass.AsyncDisk.Variables) ($Is |s'#0@@32| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@0|) (< |id#0@@0| 18446744073709551616))) ($Is |fakeContents#0@@8| (TSeq Tclass.NativeTypes.byte))) (= (|AsyncDisk.__default.ProcessReadFailure#requires| |s#0@@189| |s'#0@@32| |id#0@@0| |fakeContents#0@@8|) true))) :qid |AsyncDiskModelsdfy.178:32| :skolemid |2861| :pattern ( (|AsyncDisk.__default.ProcessReadFailure#requires| |s#0@@189| |s'#0@@32| |id#0@@0| |fakeContents#0@@8|)) )))
(assert  (=> true (forall ((|s#0@@190| T@U) (|s'#0@@33| T@U) (|id#0@@1| Int) (|fakeContents#0@@9| T@U) ) (!  (=> (and (and (and (= (type |s#0@@190|) DatatypeTypeType) (= (type |s'#0@@33|) DatatypeTypeType)) (= (type |fakeContents#0@@9|) (SeqType BoxType))) (or (|AsyncDisk.__default.ProcessReadFailure#canCall| |s#0@@190| |s'#0@@33| |id#0@@1| |fakeContents#0@@9|) (and (and (and ($Is |s#0@@190| Tclass.AsyncDisk.Variables) ($Is |s'#0@@33| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@1|) (< |id#0@@1| 18446744073709551616))) ($Is |fakeContents#0@@9| (TSeq Tclass.NativeTypes.byte))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@190|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@190|)) ($Box (int_2_U |id#0@@1|)))) (and (AsyncDisk.Variables.Variables_q |s#0@@190|) (let ((|req#0| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@190|)) ($Box (int_2_U |id#0@@1|)))))) (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (=> (<= (LitInt 0) (AsyncDisk.ReqRead.addr |req#0|)) (and (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (AsyncDisk.ReqRead.ReqRead_q |req#0|))) (=> (<= (AsyncDisk.ReqRead.addr |req#0|) (+ (AsyncDisk.ReqRead.addr |req#0|) (AsyncDisk.ReqRead.len |req#0|))) (and (and (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (AsyncDisk.ReqRead.ReqRead_q |req#0|)) (AsyncDisk.Variables.Variables_q |s#0@@190|)) (=> (<= (+ (AsyncDisk.ReqRead.addr |req#0|) (AsyncDisk.ReqRead.len |req#0|)) (|Seq#Length| (AsyncDisk.Variables.contents |s#0@@190|))) (and (and (and (AsyncDisk.Variables.Variables_q |s#0@@190|) (AsyncDisk.ReqRead.ReqRead_q |req#0|)) (and (AsyncDisk.ReqRead.ReqRead_q |req#0|) (AsyncDisk.ReqRead.ReqRead_q |req#0|))) (let ((|realContents#0@@7| (|Seq#Drop| (|Seq#Take| (AsyncDisk.Variables.contents |s#0@@190|) (+ (AsyncDisk.ReqRead.addr |req#0|) (AsyncDisk.ReqRead.len |req#0|))) (AsyncDisk.ReqRead.addr |req#0|)))) (=> (= (|Seq#Length| |fakeContents#0@@9|) (|Seq#Length| |realContents#0@@7|)) (=> (not (|Seq#Equal| |fakeContents#0@@9| |realContents#0@@7|)) (and (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| |realContents#0@@7| |fakeContents#0@@9|) (=> (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@7| |fakeContents#0@@9|) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@33|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#1#0| (let ((|dt_update_tmp#0#0@@14| |s#0@@190|)) (let ((|dt_update#reqReads#0#0@@1| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqReads |s#0@@190|) ($Box (int_2_U |id#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0@@1| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@14|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@14|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@14|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@14|)))))) (let ((|dt_update#respReads#0#0@@1| (|Map#Build| (AsyncDisk.Variables.respReads |s#0@@190|) ($Box (int_2_U |id#0@@1|)) ($Box (|#AsyncDisk.RespRead.RespRead| (AsyncDisk.ReqRead.addr |req#0|) |fakeContents#0@@9|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0|) |dt_update#respReads#0#0@@1| (AsyncDisk.Variables.respWrites |dt_update_tmp#1#0|) (AsyncDisk.Variables.contents |dt_update_tmp#1#0|)))))) (and (let ((|dt_update_tmp#0#0@@15| |s#0@@190|)) (and (and (AsyncDisk.Variables.Variables_q |s#0@@190|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead (AsyncDisk.Variables.reqReads |s#0@@190|) ($Box (int_2_U |id#0@@1|)))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@15|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@15|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@15|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@15|)))) (let ((|dt_update_tmp#1#0@@0| (let ((|dt_update_tmp#0#0@@16| |s#0@@190|)) (let ((|dt_update#reqReads#0#0@@2| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqReads |s#0@@190|) ($Box (int_2_U |id#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0@@2| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@16|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@16|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@16|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@16|)))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@190|) (AsyncDisk.ReqRead.ReqRead_q |req#0|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@0|)))))))))))))))))))))) (= (AsyncDisk.__default.ProcessReadFailure |s#0@@190| |s'#0@@33| |id#0@@1| |fakeContents#0@@9|)  (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@190|)) ($Box (int_2_U |id#0@@1|)))) (let ((|req#0@@0| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@190|)) ($Box (int_2_U |id#0@@1|)))))) (and (and (and (<= (LitInt 0) (AsyncDisk.ReqRead.addr |req#0@@0|)) (<= (AsyncDisk.ReqRead.addr |req#0@@0|) (+ (AsyncDisk.ReqRead.addr |req#0@@0|) (AsyncDisk.ReqRead.len |req#0@@0|)))) (<= (+ (AsyncDisk.ReqRead.addr |req#0@@0|) (AsyncDisk.ReqRead.len |req#0@@0|)) (|Seq#Length| (AsyncDisk.Variables.contents |s#0@@190|)))) (let ((|realContents#0@@8| (|Seq#Drop| (|Seq#Take| (AsyncDisk.Variables.contents |s#0@@190|) (+ (AsyncDisk.ReqRead.addr |req#0@@0|) (AsyncDisk.ReqRead.len |req#0@@0|))) (AsyncDisk.ReqRead.addr |req#0@@0|)))) (and (and (and (= (|Seq#Length| |fakeContents#0@@9|) (|Seq#Length| |realContents#0@@8|)) (not (|Seq#Equal| |fakeContents#0@@9| |realContents#0@@8|))) (AsyncDisk.__default.AllChecksumsCheckOut |realContents#0@@8| |fakeContents#0@@9|)) (|AsyncDisk.Variables#Equal| |s'#0@@33| (let ((|dt_update_tmp#1#0@@1| (let ((|dt_update_tmp#0#0@@17| |s#0@@190|)) (let ((|dt_update#reqReads#0#0@@3| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqReads |s#0@@190|) ($Box (int_2_U |id#0@@1|))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#0@@3| (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#0@@17|) (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@17|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@17|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@17|)))))) (let ((|dt_update#respReads#0#0@@2| (|Map#Build| (AsyncDisk.Variables.respReads |s#0@@190|) ($Box (int_2_U |id#0@@1|)) ($Box (|#AsyncDisk.RespRead.RespRead| (AsyncDisk.ReqRead.addr |req#0@@0|) |fakeContents#0@@9|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0@@1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0@@1|) |dt_update#respReads#0#0@@2| (AsyncDisk.Variables.respWrites |dt_update_tmp#1#0@@1|) (AsyncDisk.Variables.contents |dt_update_tmp#1#0@@1|))))))))))))) :qid |AsyncDiskModelsdfy.178:32| :skolemid |2862| :pattern ( (AsyncDisk.__default.ProcessReadFailure |s#0@@190| |s'#0@@33| |id#0@@1| |fakeContents#0@@9|)) ))))
(assert  (=> true (forall ((|s#0@@191| T@U) (|s'#0@@34| T@U) (|id#0@@2| Int) (|fakeContents#0@@10| T@U) ) (!  (=> (and (and (and (= (type |s#0@@191|) DatatypeTypeType) (= (type |s'#0@@34|) DatatypeTypeType)) (= (type |fakeContents#0@@10|) (SeqType BoxType))) (or (|AsyncDisk.__default.ProcessReadFailure#canCall| (Lit |s#0@@191|) (Lit |s'#0@@34|) (LitInt |id#0@@2|) (Lit |fakeContents#0@@10|)) (and (and (and ($Is |s#0@@191| Tclass.AsyncDisk.Variables) ($Is |s'#0@@34| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@2|) (< |id#0@@2| 18446744073709551616))) ($Is |fakeContents#0@@10| (TSeq Tclass.NativeTypes.byte))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@191|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@191|))) ($Box (int_2_U |id#0@@2|)))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@191|)) (let ((|req#1| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@191|)))) ($Box (int_2_U (LitInt |id#0@@2|))))))) (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (=> (<= (LitInt 0) (AsyncDisk.ReqRead.addr |req#1|)) (and (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (AsyncDisk.ReqRead.ReqRead_q |req#1|))) (=> (<= (AsyncDisk.ReqRead.addr |req#1|) (+ (AsyncDisk.ReqRead.addr |req#1|) (AsyncDisk.ReqRead.len |req#1|))) (and (and (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (AsyncDisk.ReqRead.ReqRead_q |req#1|)) (AsyncDisk.Variables.Variables_q (Lit |s#0@@191|))) (=> (<= (+ (AsyncDisk.ReqRead.addr |req#1|) (AsyncDisk.ReqRead.len |req#1|)) (|Seq#Length| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@191|))))) (and (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@191|)) (AsyncDisk.ReqRead.ReqRead_q |req#1|)) (and (AsyncDisk.ReqRead.ReqRead_q |req#1|) (AsyncDisk.ReqRead.ReqRead_q |req#1|))) (let ((|realContents#1| (|Seq#Drop| (|Seq#Take| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@191|))) (+ (AsyncDisk.ReqRead.addr |req#1|) (AsyncDisk.ReqRead.len |req#1|))) (AsyncDisk.ReqRead.addr |req#1|)))) (=> (= (|Seq#Length| (Lit |fakeContents#0@@10|)) (|Seq#Length| |realContents#1|)) (=> (not (|Seq#Equal| |fakeContents#0@@10| |realContents#1|)) (and (|AsyncDisk.__default.AllChecksumsCheckOut#canCall| |realContents#1| (Lit |fakeContents#0@@10|)) (=> (AsyncDisk.__default.AllChecksumsCheckOut |realContents#1| (Lit |fakeContents#0@@10|)) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@34|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#1#1| (let ((|dt_update_tmp#0#1@@14| (Lit |s#0@@191|))) (let ((|dt_update#reqReads#0#1@@1| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@191|))) ($Box (int_2_U (LitInt |id#0@@2|)))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1@@1| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@14|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@14|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@14|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@14|))))))) (let ((|dt_update#respReads#0#1@@1| (|Map#Build| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@191|))) ($Box (int_2_U (LitInt |id#0@@2|))) ($Box (|#AsyncDisk.RespRead.RespRead| (AsyncDisk.ReqRead.addr |req#1|) (Lit |fakeContents#0@@10|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1|) |dt_update#respReads#0#1@@1| (AsyncDisk.Variables.respWrites |dt_update_tmp#1#1|) (AsyncDisk.Variables.contents |dt_update_tmp#1#1|)))))) (and (let ((|dt_update_tmp#0#1@@15| (Lit |s#0@@191|))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@191|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@191|))) ($Box (int_2_U (LitInt |id#0@@2|))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@15|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@15|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@15|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@15|)))) (let ((|dt_update_tmp#1#1@@0| (let ((|dt_update_tmp#0#1@@16| (Lit |s#0@@191|))) (let ((|dt_update#reqReads#0#1@@2| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@191|))) ($Box (int_2_U (LitInt |id#0@@2|)))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1@@2| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@16|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@16|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@16|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@16|))))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@191|)) (AsyncDisk.ReqRead.ReqRead_q |req#1|)) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@0|)))))))))))))))))))))) (= (AsyncDisk.__default.ProcessReadFailure (Lit |s#0@@191|) (Lit |s'#0@@34|) (LitInt |id#0@@2|) (Lit |fakeContents#0@@10|))  (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@191|))) ($Box (int_2_U |id#0@@2|)))) (let ((|req#1@@0| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@191|)))) ($Box (int_2_U (LitInt |id#0@@2|))))))) (and (and (and (<= (LitInt 0) (AsyncDisk.ReqRead.addr |req#1@@0|)) (<= (AsyncDisk.ReqRead.addr |req#1@@0|) (+ (AsyncDisk.ReqRead.addr |req#1@@0|) (AsyncDisk.ReqRead.len |req#1@@0|)))) (<= (+ (AsyncDisk.ReqRead.addr |req#1@@0|) (AsyncDisk.ReqRead.len |req#1@@0|)) (|Seq#Length| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@191|)))))) (let ((|realContents#1@@0| (|Seq#Drop| (|Seq#Take| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@191|))) (+ (AsyncDisk.ReqRead.addr |req#1@@0|) (AsyncDisk.ReqRead.len |req#1@@0|))) (AsyncDisk.ReqRead.addr |req#1@@0|)))) (and (and (and (= (|Seq#Length| (Lit |fakeContents#0@@10|)) (|Seq#Length| |realContents#1@@0|)) (not (|Seq#Equal| |fakeContents#0@@10| |realContents#1@@0|))) (AsyncDisk.__default.AllChecksumsCheckOut |realContents#1@@0| (Lit |fakeContents#0@@10|))) (|AsyncDisk.Variables#Equal| |s'#0@@34| (let ((|dt_update_tmp#1#1@@1| (let ((|dt_update_tmp#0#1@@17| (Lit |s#0@@191|))) (let ((|dt_update#reqReads#0#1@@3| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqRead StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@191|))) ($Box (int_2_U (LitInt |id#0@@2|)))))) (|#AsyncDisk.Variables.Variables| |dt_update#reqReads#0#1@@3| (Lit (AsyncDisk.Variables.reqWrites |dt_update_tmp#0#1@@17|)) (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@17|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@17|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@17|))))))) (let ((|dt_update#respReads#0#1@@2| (|Map#Build| (Lit (AsyncDisk.Variables.respReads (Lit |s#0@@191|))) ($Box (int_2_U (LitInt |id#0@@2|))) ($Box (|#AsyncDisk.RespRead.RespRead| (AsyncDisk.ReqRead.addr |req#1@@0|) (Lit |fakeContents#0@@10|)))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1@@1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1@@1|) |dt_update#respReads#0#1@@2| (AsyncDisk.Variables.respWrites |dt_update_tmp#1#1@@1|) (AsyncDisk.Variables.contents |dt_update_tmp#1#1@@1|))))))))))))) :qid |AsyncDiskModelsdfy.178:32| :weight 3 :skolemid |2863| :pattern ( (AsyncDisk.__default.ProcessReadFailure (Lit |s#0@@191|) (Lit |s'#0@@34|) (LitInt |id#0@@2|) (Lit |fakeContents#0@@10|))) ))))
(assert (forall ((arg0@@633 T@U) (arg1@@300 T@U) (arg2@@166 Int) (arg3@@107 T@U) ) (! (= (type (AsyncDisk.__default.splice arg0@@633 arg1@@300 arg2@@166 arg3@@107)) (SeqType BoxType)) :qid |funType:AsyncDisk.__default.splice| :pattern ( (AsyncDisk.__default.splice arg0@@633 arg1@@300 arg2@@166 arg3@@107)) )))
(assert (forall (($ly@@352 T@U) (|bytes#0| T@U) (|start#0| Int) (|ins#0| T@U) ) (!  (=> (and (and (= (type $ly@@352) LayerTypeType) (= (type |bytes#0|) (SeqType BoxType))) (= (type |ins#0|) (SeqType BoxType))) (= (AsyncDisk.__default.splice ($LS $ly@@352) |bytes#0| |start#0| |ins#0|) (AsyncDisk.__default.splice $ly@@352 |bytes#0| |start#0| |ins#0|))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2864| :pattern ( (AsyncDisk.__default.splice ($LS $ly@@352) |bytes#0| |start#0| |ins#0|)) )))
(assert (forall (($ly@@353 T@U) (|bytes#0@@0| T@U) (|start#0@@0| Int) (|ins#0@@0| T@U) ) (!  (=> (and (and (= (type $ly@@353) LayerTypeType) (= (type |bytes#0@@0|) (SeqType BoxType))) (= (type |ins#0@@0|) (SeqType BoxType))) (= (AsyncDisk.__default.splice $ly@@353 |bytes#0@@0| |start#0@@0| |ins#0@@0|) (AsyncDisk.__default.splice $LZ |bytes#0@@0| |start#0@@0| |ins#0@@0|))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2865| :pattern ( (AsyncDisk.__default.splice (AsFuelBottom $ly@@353) |bytes#0@@0| |start#0@@0| |ins#0@@0|)) )))
(assert  (=> true (forall (($ly@@354 T@U) (|bytes#0@@1| T@U) (|start#0@@1| Int) (|ins#0@@1| T@U) ) (!  (=> (and (and (and (= (type $ly@@354) LayerTypeType) (= (type |bytes#0@@1|) (SeqType BoxType))) (= (type |ins#0@@1|) (SeqType BoxType))) (or (|AsyncDisk.__default.splice#canCall| |bytes#0@@1| |start#0@@1| |ins#0@@1|) (and (and ($Is |bytes#0@@1| (TSeq Tclass.NativeTypes.byte)) ($Is |ins#0@@1| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |start#0@@1|) (<= (+ |start#0@@1| (|Seq#Length| |ins#0@@1|)) (|Seq#Length| |bytes#0@@1|)))))) ($Is (AsyncDisk.__default.splice $ly@@354 |bytes#0@@1| |start#0@@1| |ins#0@@1|) (TSeq Tclass.NativeTypes.byte))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2866| :pattern ( (AsyncDisk.__default.splice $ly@@354 |bytes#0@@1| |start#0@@1| |ins#0@@1|)) ))))
(assert (forall (($ly@@355 T@U) (|bytes#0@@2| T@U) (|start#0@@2| Int) (|ins#0@@2| T@U) ) (!  (=> (and (and (and (= (type $ly@@355) LayerTypeType) (= (type |bytes#0@@2|) (SeqType BoxType))) (= (type |ins#0@@2|) (SeqType BoxType))) (and ($Is |bytes#0@@2| (TSeq Tclass.NativeTypes.byte)) ($Is |ins#0@@2| (TSeq Tclass.NativeTypes.byte)))) (= (|AsyncDisk.__default.splice#requires| $ly@@355 |bytes#0@@2| |start#0@@2| |ins#0@@2|)  (and (<= (LitInt 0) |start#0@@2|) (<= (+ |start#0@@2| (|Seq#Length| |ins#0@@2|)) (|Seq#Length| |bytes#0@@2|))))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2867| :pattern ( (|AsyncDisk.__default.splice#requires| $ly@@355 |bytes#0@@2| |start#0@@2| |ins#0@@2|)) )))
(assert  (=> true (forall (($ly@@356 T@U) (|bytes#0@@3| T@U) (|start#0@@3| Int) (|ins#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@356) LayerTypeType) (= (type |bytes#0@@3|) (SeqType BoxType))) (= (type |ins#0@@3|) (SeqType BoxType))) (or (|AsyncDisk.__default.splice#canCall| |bytes#0@@3| |start#0@@3| |ins#0@@3|) (and (and ($Is |bytes#0@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |ins#0@@3| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |start#0@@3|) (<= (+ |start#0@@3| (|Seq#Length| |ins#0@@3|)) (|Seq#Length| |bytes#0@@3|)))))) (= (AsyncDisk.__default.splice ($LS $ly@@356) |bytes#0@@3| |start#0@@3| |ins#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |bytes#0@@3| |start#0@@3|) |ins#0@@3|) (|Seq#Drop| |bytes#0@@3| (+ |start#0@@3| (|Seq#Length| |ins#0@@3|)))))) :qid |AsyncDiskModelsdfy.193:22| :skolemid |2868| :pattern ( (AsyncDisk.__default.splice ($LS $ly@@356) |bytes#0@@3| |start#0@@3| |ins#0@@3|)) ))))
(assert  (=> true (forall (($ly@@357 T@U) (|bytes#0@@4| T@U) (|start#0@@4| Int) (|ins#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@357) LayerTypeType) (= (type |bytes#0@@4|) (SeqType BoxType))) (= (type |ins#0@@4|) (SeqType BoxType))) (or (|AsyncDisk.__default.splice#canCall| (Lit |bytes#0@@4|) (LitInt |start#0@@4|) (Lit |ins#0@@4|)) (and (and ($Is |bytes#0@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |ins#0@@4| (TSeq Tclass.NativeTypes.byte))) (and (<= (LitInt 0) (LitInt |start#0@@4|)) (<= (+ |start#0@@4| (|Seq#Length| (Lit |ins#0@@4|))) (|Seq#Length| (Lit |bytes#0@@4|))))))) (= (AsyncDisk.__default.splice ($LS $ly@@357) (Lit |bytes#0@@4|) (LitInt |start#0@@4|) (Lit |ins#0@@4|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |bytes#0@@4|) (LitInt |start#0@@4|)) |ins#0@@4|) (|Seq#Drop| (Lit |bytes#0@@4|) (+ |start#0@@4| (|Seq#Length| (Lit |ins#0@@4|))))))) :qid |AsyncDiskModelsdfy.193:22| :weight 3 :skolemid |2869| :pattern ( (AsyncDisk.__default.splice ($LS $ly@@357) (Lit |bytes#0@@4|) (LitInt |start#0@@4|) (Lit |ins#0@@4|))) ))))
(assert  (=> true (forall ((|s#0@@192| T@U) (|s'#0@@35| T@U) (|id#0@@3| Int) ) (!  (=> (and (and (= (type |s#0@@192|) DatatypeTypeType) (= (type |s'#0@@35|) DatatypeTypeType)) (or (|AsyncDisk.__default.ProcessWrite#canCall| |s#0@@192| |s'#0@@35| |id#0@@3|) (and (and ($Is |s#0@@192| Tclass.AsyncDisk.Variables) ($Is |s'#0@@35| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@3|) (< |id#0@@3| 18446744073709551616))))) true) :qid |AsyncDiskModelsdfy.200:26| :skolemid |2870| :pattern ( (AsyncDisk.__default.ProcessWrite |s#0@@192| |s'#0@@35| |id#0@@3|)) ))))
(assert (forall ((|s#0@@193| T@U) (|s'#0@@36| T@U) (|id#0@@4| Int) ) (!  (=> (and (= (type |s#0@@193|) DatatypeTypeType) (= (type |s'#0@@36|) DatatypeTypeType)) (=> (and (and ($Is |s#0@@193| Tclass.AsyncDisk.Variables) ($Is |s'#0@@36| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@4|) (< |id#0@@4| 18446744073709551616))) (= (|AsyncDisk.__default.ProcessWrite#requires| |s#0@@193| |s'#0@@36| |id#0@@4|) true))) :qid |AsyncDiskModelsdfy.200:26| :skolemid |2871| :pattern ( (|AsyncDisk.__default.ProcessWrite#requires| |s#0@@193| |s'#0@@36| |id#0@@4|)) )))
(assert (= (type StartFuel_AsyncDisk._default.splice) LayerTypeType))
(assert  (=> true (forall ((|s#0@@194| T@U) (|s'#0@@37| T@U) (|id#0@@5| Int) ) (!  (=> (and (and (= (type |s#0@@194|) DatatypeTypeType) (= (type |s'#0@@37|) DatatypeTypeType)) (or (|AsyncDisk.__default.ProcessWrite#canCall| |s#0@@194| |s'#0@@37| |id#0@@5|) (and (and ($Is |s#0@@194| Tclass.AsyncDisk.Variables) ($Is |s'#0@@37| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@5|) (< |id#0@@5| 18446744073709551616))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@194|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@194|)) ($Box (int_2_U |id#0@@5|)))) (and (AsyncDisk.Variables.Variables_q |s#0@@194|) (let ((|req#0@@1| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@194|)) ($Box (int_2_U |id#0@@5|)))))) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|) (=> (<= (LitInt 0) (AsyncDisk.ReqWrite.addr |req#0@@1|)) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|) (=> (< (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@1|)) 18446744073709551616) (and (and (and (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|) (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|)) (AsyncDisk.Variables.Variables_q |s#0@@194|)) (=> (<= (+ (AsyncDisk.ReqWrite.addr |req#0@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@1|))) (|Seq#Length| (AsyncDisk.Variables.contents |s#0@@194|))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@37|) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#2#0| (let ((|dt_update_tmp#1#0@@2| (let ((|dt_update_tmp#0#0@@18| |s#0@@194|)) (let ((|dt_update#reqWrites#0#0@@3| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqWrites |s#0@@194|) ($Box (int_2_U |id#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@18|) |dt_update#reqWrites#0#0@@3| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@18|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@18|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@18|)))))) (let ((|dt_update#respWrites#0#0@@1| (|Map#Build| (AsyncDisk.Variables.respWrites |s#0@@194|) ($Box (int_2_U |id#0@@5|)) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#0@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@1|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0@@2|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0@@2|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#0@@2|) |dt_update#respWrites#0#0@@1| (AsyncDisk.Variables.contents |dt_update_tmp#1#0@@2|)))))) (let ((|dt_update#contents#0#0| (AsyncDisk.__default.splice StartFuel_AsyncDisk._default.splice (AsyncDisk.Variables.contents |s#0@@194|) (AsyncDisk.ReqWrite.addr |req#0@@1|) (AsyncDisk.ReqWrite.bytes |req#0@@1|)))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#2#0|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#2#0|) (AsyncDisk.Variables.respReads |dt_update_tmp#2#0|) (AsyncDisk.Variables.respWrites |dt_update_tmp#2#0|) |dt_update#contents#0#0|))))) (and (and (let ((|dt_update_tmp#0#0@@19| |s#0@@194|)) (and (and (AsyncDisk.Variables.Variables_q |s#0@@194|) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite (AsyncDisk.Variables.reqWrites |s#0@@194|) ($Box (int_2_U |id#0@@5|)))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@19|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@19|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@19|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#0@@19|)))) (let ((|dt_update_tmp#1#0@@3| (let ((|dt_update_tmp#0#0@@20| |s#0@@194|)) (let ((|dt_update#reqWrites#0#0@@4| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqWrites |s#0@@194|) ($Box (int_2_U |id#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@20|) |dt_update#reqWrites#0#0@@4| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@20|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@20|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@20|)))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@194|) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|) (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@3|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#0@@3|))))) (let ((|dt_update_tmp#2#0@@0| (let ((|dt_update_tmp#1#0@@4| (let ((|dt_update_tmp#0#0@@21| |s#0@@194|)) (let ((|dt_update#reqWrites#0#0@@5| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqWrites |s#0@@194|) ($Box (int_2_U |id#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@21|) |dt_update#reqWrites#0#0@@5| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@21|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@21|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@21|)))))) (let ((|dt_update#respWrites#0#0@@2| (|Map#Build| (AsyncDisk.Variables.respWrites |s#0@@194|) ($Box (int_2_U |id#0@@5|)) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#0@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@1|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0@@4|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0@@4|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#0@@4|) |dt_update#respWrites#0#0@@2| (AsyncDisk.Variables.contents |dt_update_tmp#1#0@@4|)))))) (and (and (and (and (AsyncDisk.Variables.Variables_q |s#0@@194|) (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|)) (AsyncDisk.ReqWrite.ReqWrite_q |req#0@@1|)) (|AsyncDisk.__default.splice#canCall| (AsyncDisk.Variables.contents |s#0@@194|) (AsyncDisk.ReqWrite.addr |req#0@@1|) (AsyncDisk.ReqWrite.bytes |req#0@@1|))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#0@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#0@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#0@@0|)))))))))))))))) (= (AsyncDisk.__default.ProcessWrite |s#0@@194| |s'#0@@37| |id#0@@5|)  (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@194|)) ($Box (int_2_U |id#0@@5|)))) (let ((|req#0@@2| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@194|)) ($Box (int_2_U |id#0@@5|)))))) (and (and (and (<= (LitInt 0) (AsyncDisk.ReqWrite.addr |req#0@@2|)) (< (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@2|)) 18446744073709551616)) (<= (+ (AsyncDisk.ReqWrite.addr |req#0@@2|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@2|))) (|Seq#Length| (AsyncDisk.Variables.contents |s#0@@194|)))) (|AsyncDisk.Variables#Equal| |s'#0@@37| (let ((|dt_update_tmp#2#0@@1| (let ((|dt_update_tmp#1#0@@5| (let ((|dt_update_tmp#0#0@@22| |s#0@@194|)) (let ((|dt_update#reqWrites#0#0@@6| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (AsyncDisk.Variables.reqWrites |s#0@@194|) ($Box (int_2_U |id#0@@5|))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#0#0@@22|) |dt_update#reqWrites#0#0@@6| (AsyncDisk.Variables.respReads |dt_update_tmp#0#0@@22|) (AsyncDisk.Variables.respWrites |dt_update_tmp#0#0@@22|) (AsyncDisk.Variables.contents |dt_update_tmp#0#0@@22|)))))) (let ((|dt_update#respWrites#0#0@@3| (|Map#Build| (AsyncDisk.Variables.respWrites |s#0@@194|) ($Box (int_2_U |id#0@@5|)) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#0@@2|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#0@@2|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#0@@5|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#0@@5|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#0@@5|) |dt_update#respWrites#0#0@@3| (AsyncDisk.Variables.contents |dt_update_tmp#1#0@@5|)))))) (let ((|dt_update#contents#0#0@@0| (AsyncDisk.__default.splice StartFuel_AsyncDisk._default.splice (AsyncDisk.Variables.contents |s#0@@194|) (AsyncDisk.ReqWrite.addr |req#0@@2|) (AsyncDisk.ReqWrite.bytes |req#0@@2|)))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#2#0@@1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#2#0@@1|) (AsyncDisk.Variables.respReads |dt_update_tmp#2#0@@1|) (AsyncDisk.Variables.respWrites |dt_update_tmp#2#0@@1|) |dt_update#contents#0#0@@0|)))))))))) :qid |AsyncDiskModelsdfy.200:26| :skolemid |2872| :pattern ( (AsyncDisk.__default.ProcessWrite |s#0@@194| |s'#0@@37| |id#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@195| T@U) (|s'#0@@38| T@U) (|id#0@@6| Int) ) (!  (=> (and (and (= (type |s#0@@195|) DatatypeTypeType) (= (type |s'#0@@38|) DatatypeTypeType)) (or (|AsyncDisk.__default.ProcessWrite#canCall| (Lit |s#0@@195|) (Lit |s'#0@@38|) (LitInt |id#0@@6|)) (and (and ($Is |s#0@@195| Tclass.AsyncDisk.Variables) ($Is |s'#0@@38| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@6|) (< |id#0@@6| 18446744073709551616))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@195|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@195|))) ($Box (int_2_U |id#0@@6|)))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@195|)) (let ((|req#1@@1| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@195|)))) ($Box (int_2_U (LitInt |id#0@@6|))))))) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|) (=> (<= (LitInt 0) (AsyncDisk.ReqWrite.addr |req#1@@1|)) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|) (=> (< (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@1|)) 18446744073709551616) (and (and (and (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|) (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|)) (AsyncDisk.Variables.Variables_q (Lit |s#0@@195|))) (=> (<= (+ (AsyncDisk.ReqWrite.addr |req#1@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@1|))) (|Seq#Length| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@195|))))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@38|)) (|$IsA#AsyncDisk.Variables| (let ((|dt_update_tmp#2#1| (let ((|dt_update_tmp#1#1@@2| (let ((|dt_update_tmp#0#1@@18| (Lit |s#0@@195|))) (let ((|dt_update#reqWrites#0#1@@3| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@195|))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@18|)) |dt_update#reqWrites#0#1@@3| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@18|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@18|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@18|))))))) (let ((|dt_update#respWrites#0#1@@1| (|Map#Build| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@195|))) ($Box (int_2_U (LitInt |id#0@@6|))) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#1@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@1|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1@@2|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1@@2|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#1@@2|) |dt_update#respWrites#0#1@@1| (AsyncDisk.Variables.contents |dt_update_tmp#1#1@@2|)))))) (let ((|dt_update#contents#0#1| (AsyncDisk.__default.splice StartFuel_AsyncDisk._default.splice (Lit (AsyncDisk.Variables.contents (Lit |s#0@@195|))) (AsyncDisk.ReqWrite.addr |req#1@@1|) (AsyncDisk.ReqWrite.bytes |req#1@@1|)))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#2#1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#2#1|) (AsyncDisk.Variables.respReads |dt_update_tmp#2#1|) (AsyncDisk.Variables.respWrites |dt_update_tmp#2#1|) |dt_update#contents#0#1|))))) (and (and (let ((|dt_update_tmp#0#1@@19| (Lit |s#0@@195|))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@195|)) (|MapRemove_s.__default.MapRemove1#canCall| Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@195|))) ($Box (int_2_U (LitInt |id#0@@6|))))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@19|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@19|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@19|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#0#1@@19|)))) (let ((|dt_update_tmp#1#1@@3| (let ((|dt_update_tmp#0#1@@20| (Lit |s#0@@195|))) (let ((|dt_update#reqWrites#0#1@@4| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@195|))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@20|)) |dt_update#reqWrites#0#1@@4| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@20|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@20|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@20|))))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@195|)) (and (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|) (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@3|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@3|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#1#1@@3|))))) (let ((|dt_update_tmp#2#1@@0| (let ((|dt_update_tmp#1#1@@4| (let ((|dt_update_tmp#0#1@@21| (Lit |s#0@@195|))) (let ((|dt_update#reqWrites#0#1@@5| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@195|))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@21|)) |dt_update#reqWrites#0#1@@5| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@21|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@21|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@21|))))))) (let ((|dt_update#respWrites#0#1@@2| (|Map#Build| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@195|))) ($Box (int_2_U (LitInt |id#0@@6|))) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#1@@1|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@1|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1@@4|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1@@4|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#1@@4|) |dt_update#respWrites#0#1@@2| (AsyncDisk.Variables.contents |dt_update_tmp#1#1@@4|)))))) (and (and (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@195|)) (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|)) (AsyncDisk.ReqWrite.ReqWrite_q |req#1@@1|)) (|AsyncDisk.__default.splice#canCall| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@195|))) (AsyncDisk.ReqWrite.addr |req#1@@1|) (AsyncDisk.ReqWrite.bytes |req#1@@1|))) (and (and (and (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#1@@0|) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#1@@0|)) (AsyncDisk.Variables.Variables_q |dt_update_tmp#2#1@@0|)))))))))))))))) (= (AsyncDisk.__default.ProcessWrite (Lit |s#0@@195|) (Lit |s'#0@@38|) (LitInt |id#0@@6|))  (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@195|))) ($Box (int_2_U |id#0@@6|)))) (let ((|req#1@@2| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@195|)))) ($Box (int_2_U (LitInt |id#0@@6|))))))) (and (and (and (<= (LitInt 0) (AsyncDisk.ReqWrite.addr |req#1@@2|)) (< (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@2|)) 18446744073709551616)) (<= (+ (AsyncDisk.ReqWrite.addr |req#1@@2|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@2|))) (|Seq#Length| (Lit (AsyncDisk.Variables.contents (Lit |s#0@@195|)))))) (|AsyncDisk.Variables#Equal| |s'#0@@38| (let ((|dt_update_tmp#2#1@@1| (let ((|dt_update_tmp#1#1@@5| (let ((|dt_update_tmp#0#1@@22| (Lit |s#0@@195|))) (let ((|dt_update#reqWrites#0#1@@6| (MapRemove_s.__default.MapRemove1 Tclass.NativeTypes.uint64 Tclass.AsyncDisk.ReqWrite StartFuel_MapRemove_s._default.MapRemove1 (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@195|))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (|#AsyncDisk.Variables.Variables| (Lit (AsyncDisk.Variables.reqReads |dt_update_tmp#0#1@@22|)) |dt_update#reqWrites#0#1@@6| (Lit (AsyncDisk.Variables.respReads |dt_update_tmp#0#1@@22|)) (Lit (AsyncDisk.Variables.respWrites |dt_update_tmp#0#1@@22|)) (Lit (AsyncDisk.Variables.contents |dt_update_tmp#0#1@@22|))))))) (let ((|dt_update#respWrites#0#1@@3| (|Map#Build| (Lit (AsyncDisk.Variables.respWrites (Lit |s#0@@195|))) ($Box (int_2_U (LitInt |id#0@@6|))) ($Box (|#AsyncDisk.RespWrite.RespWrite| (AsyncDisk.ReqWrite.addr |req#1@@2|) (|Seq#Length| (AsyncDisk.ReqWrite.bytes |req#1@@2|))))))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#1#1@@5|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#1#1@@5|) (AsyncDisk.Variables.respReads |dt_update_tmp#1#1@@5|) |dt_update#respWrites#0#1@@3| (AsyncDisk.Variables.contents |dt_update_tmp#1#1@@5|)))))) (let ((|dt_update#contents#0#1@@0| (AsyncDisk.__default.splice StartFuel_AsyncDisk._default.splice (Lit (AsyncDisk.Variables.contents (Lit |s#0@@195|))) (AsyncDisk.ReqWrite.addr |req#1@@2|) (AsyncDisk.ReqWrite.bytes |req#1@@2|)))) (|#AsyncDisk.Variables.Variables| (AsyncDisk.Variables.reqReads |dt_update_tmp#2#1@@1|) (AsyncDisk.Variables.reqWrites |dt_update_tmp#2#1@@1|) (AsyncDisk.Variables.respReads |dt_update_tmp#2#1@@1|) (AsyncDisk.Variables.respWrites |dt_update_tmp#2#1@@1|) |dt_update#contents#0#1@@0|)))))))))) :qid |AsyncDiskModelsdfy.200:26| :weight 3 :skolemid |2873| :pattern ( (AsyncDisk.__default.ProcessWrite (Lit |s#0@@195|) (Lit |s'#0@@38|) (LitInt |id#0@@6|))) ))))
(assert  (=> true (forall ((|start#0@@5| Int) (|len#0@@28| Int) (|start'#0| Int) (|len'#0| Int) ) (!  (=> true true) :qid |AsyncDiskModelsdfy.215:21| :skolemid |2874| :pattern ( (AsyncDisk.__default.overlap |start#0@@5| |len#0@@28| |start'#0| |len'#0|)) ))))
(assert (forall ((|start#0@@6| Int) (|len#0@@29| Int) (|start'#0@@0| Int) (|len'#0@@0| Int) ) (! (= (|AsyncDisk.__default.overlap#requires| |start#0@@6| |len#0@@29| |start'#0@@0| |len'#0@@0|) true) :qid |AsyncDiskModelsdfy.215:21| :skolemid |2875| :pattern ( (|AsyncDisk.__default.overlap#requires| |start#0@@6| |len#0@@29| |start'#0@@0| |len'#0@@0|)) )))
(assert  (=> true (forall ((|start#0@@7| Int) (|len#0@@30| Int) (|start'#0@@1| Int) (|len'#0@@1| Int) ) (!  (=> true (= (AsyncDisk.__default.overlap |start#0@@7| |len#0@@30| |start'#0@@1| |len'#0@@1|)  (and (> (+ |start#0@@7| |len#0@@30|) |start'#0@@1|) (> (+ |start'#0@@1| |len'#0@@1|) |start#0@@7|)))) :qid |AsyncDiskModelsdfy.215:21| :skolemid |2876| :pattern ( (AsyncDisk.__default.overlap |start#0@@7| |len#0@@30| |start'#0@@1| |len'#0@@1|)) ))))
(assert  (=> true (forall ((|start#0@@8| Int) (|len#0@@31| Int) (|start'#0@@2| Int) (|len'#0@@2| Int) ) (!  (=> true (= (AsyncDisk.__default.overlap (LitInt |start#0@@8|) (LitInt |len#0@@31|) (LitInt |start'#0@@2|) (LitInt |len'#0@@2|)) (U_2_bool (Lit (bool_2_U  (and (> (+ |start#0@@8| |len#0@@31|) |start'#0@@2|) (> (+ |start'#0@@2| |len'#0@@2|) |start#0@@8|))))))) :qid |AsyncDiskModelsdfy.215:21| :weight 3 :skolemid |2877| :pattern ( (AsyncDisk.__default.overlap (LitInt |start#0@@8|) (LitInt |len#0@@31|) (LitInt |start'#0@@2|) (LitInt |len'#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@196| T@U) (|s'#0@@39| T@U) (|id#0@@7| Int) (|id'#0| Int) ) (!  (=> (and (and (= (type |s#0@@196|) DatatypeTypeType) (= (type |s'#0@@39|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWrites#canCall| |s#0@@196| |s'#0@@39| |id#0@@7| |id'#0|) (and (and (and ($Is |s#0@@196| Tclass.AsyncDisk.Variables) ($Is |s'#0@@39| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@7|) (< |id#0@@7| 18446744073709551616))) (and (<= (LitInt 0) |id'#0|) (< |id'#0| 18446744073709551616))))) true) :qid |AsyncDiskModelsdfy.221:36| :skolemid |2878| :pattern ( (AsyncDisk.__default.HavocConflictingWrites |s#0@@196| |s'#0@@39| |id#0@@7| |id'#0|)) ))))
(assert (forall ((|s#0@@197| T@U) (|s'#0@@40| T@U) (|id#0@@8| Int) (|id'#0@@0| Int) ) (!  (=> (and (= (type |s#0@@197|) DatatypeTypeType) (= (type |s'#0@@40|) DatatypeTypeType)) (=> (and (and (and ($Is |s#0@@197| Tclass.AsyncDisk.Variables) ($Is |s'#0@@40| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@8|) (< |id#0@@8| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@0|) (< |id'#0@@0| 18446744073709551616))) (= (|AsyncDisk.__default.HavocConflictingWrites#requires| |s#0@@197| |s'#0@@40| |id#0@@8| |id'#0@@0|) true))) :qid |AsyncDiskModelsdfy.221:36| :skolemid |2879| :pattern ( (|AsyncDisk.__default.HavocConflictingWrites#requires| |s#0@@197| |s'#0@@40| |id#0@@8| |id'#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@198| T@U) (|s'#0@@41| T@U) (|id#0@@9| Int) (|id'#0@@1| Int) ) (!  (=> (and (and (= (type |s#0@@198|) DatatypeTypeType) (= (type |s'#0@@41|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWrites#canCall| |s#0@@198| |s'#0@@41| |id#0@@9| |id'#0@@1|) (and (and (and ($Is |s#0@@198| Tclass.AsyncDisk.Variables) ($Is |s'#0@@41| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@9|) (< |id#0@@9| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@1|) (< |id'#0@@1| 18446744073709551616))))) (and (=> (not (= |id#0@@9| |id'#0@@1|)) (and (AsyncDisk.Variables.Variables_q |s#0@@198|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id#0@@9|)))) (and (AsyncDisk.Variables.Variables_q |s#0@@198|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id'#0@@1|)))) (and (and (and (and (and (AsyncDisk.Variables.Variables_q |s#0@@198|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id#0@@9|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@198|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id#0@@9|))))))) (and (AsyncDisk.Variables.Variables_q |s#0@@198|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id'#0@@1|))))))) (and (AsyncDisk.Variables.Variables_q |s#0@@198|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id'#0@@1|))))))) (|AsyncDisk.__default.overlap#canCall| (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id#0@@9|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id#0@@9|)))))) (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id'#0@@1|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id'#0@@1|))))))))))))) (= (AsyncDisk.__default.HavocConflictingWrites |s#0@@198| |s'#0@@41| |id#0@@9| |id'#0@@1|)  (and (and (and (not (= |id#0@@9| |id'#0@@1|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id#0@@9|))))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id'#0@@1|))))) (AsyncDisk.__default.overlap (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id#0@@9|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id#0@@9|)))))) (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id'#0@@1|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@198|)) ($Box (int_2_U |id'#0@@1|))))))))))) :qid |AsyncDiskModelsdfy.221:36| :skolemid |2880| :pattern ( (AsyncDisk.__default.HavocConflictingWrites |s#0@@198| |s'#0@@41| |id#0@@9| |id'#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@199| T@U) (|s'#0@@42| T@U) (|id#0@@10| Int) (|id'#0@@2| Int) ) (!  (=> (and (and (= (type |s#0@@199|) DatatypeTypeType) (= (type |s'#0@@42|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWrites#canCall| (Lit |s#0@@199|) (Lit |s'#0@@42|) (LitInt |id#0@@10|) (LitInt |id'#0@@2|)) (and (and (and ($Is |s#0@@199| Tclass.AsyncDisk.Variables) ($Is |s'#0@@42| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@10|) (< |id#0@@10| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@2|) (< |id'#0@@2| 18446744073709551616))))) (and (=> (U_2_bool (Lit (bool_2_U (not (= |id#0@@10| |id'#0@@2|))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@199|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|))) ($Box (int_2_U |id#0@@10|)))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@199|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|))) ($Box (int_2_U |id'#0@@2|)))) (and (and (and (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@199|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id#0@@10|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@199|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id#0@@10|)))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@199|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@199|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))))) (|AsyncDisk.__default.overlap#canCall| (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id#0@@10|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id#0@@10|))))))) (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))))))))))) (= (AsyncDisk.__default.HavocConflictingWrites (Lit |s#0@@199|) (Lit |s'#0@@42|) (LitInt |id#0@@10|) (LitInt |id'#0@@2|))  (and (and (and (not (= |id#0@@10| |id'#0@@2|)) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|))) ($Box (int_2_U |id#0@@10|))))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|))) ($Box (int_2_U |id'#0@@2|))))) (AsyncDisk.__default.overlap (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id#0@@10|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id#0@@10|))))))) (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@199|)))) ($Box (int_2_U (LitInt |id'#0@@2|)))))))))))) :qid |AsyncDiskModelsdfy.221:36| :weight 3 :skolemid |2881| :pattern ( (AsyncDisk.__default.HavocConflictingWrites (Lit |s#0@@199|) (Lit |s'#0@@42|) (LitInt |id#0@@10|) (LitInt |id'#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@200| T@U) (|s'#0@@43| T@U) (|id#0@@11| Int) (|id'#0@@3| Int) ) (!  (=> (and (and (= (type |s#0@@200|) DatatypeTypeType) (= (type |s'#0@@43|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| |s#0@@200| |s'#0@@43| |id#0@@11| |id'#0@@3|) (and (and (and ($Is |s#0@@200| Tclass.AsyncDisk.Variables) ($Is |s'#0@@43| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@11|) (< |id#0@@11| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@3|) (< |id'#0@@3| 18446744073709551616))))) true) :qid |AsyncDiskModelsdfy.231:39| :skolemid |2882| :pattern ( (AsyncDisk.__default.HavocConflictingWriteRead |s#0@@200| |s'#0@@43| |id#0@@11| |id'#0@@3|)) ))))
(assert (forall ((|s#0@@201| T@U) (|s'#0@@44| T@U) (|id#0@@12| Int) (|id'#0@@4| Int) ) (!  (=> (and (= (type |s#0@@201|) DatatypeTypeType) (= (type |s'#0@@44|) DatatypeTypeType)) (=> (and (and (and ($Is |s#0@@201| Tclass.AsyncDisk.Variables) ($Is |s'#0@@44| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@12|) (< |id#0@@12| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@4|) (< |id'#0@@4| 18446744073709551616))) (= (|AsyncDisk.__default.HavocConflictingWriteRead#requires| |s#0@@201| |s'#0@@44| |id#0@@12| |id'#0@@4|) true))) :qid |AsyncDiskModelsdfy.231:39| :skolemid |2883| :pattern ( (|AsyncDisk.__default.HavocConflictingWriteRead#requires| |s#0@@201| |s'#0@@44| |id#0@@12| |id'#0@@4|)) )))
(assert  (=> true (forall ((|s#0@@202| T@U) (|s'#0@@45| T@U) (|id#0@@13| Int) (|id'#0@@5| Int) ) (!  (=> (and (and (= (type |s#0@@202|) DatatypeTypeType) (= (type |s'#0@@45|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| |s#0@@202| |s'#0@@45| |id#0@@13| |id'#0@@5|) (and (and (and ($Is |s#0@@202| Tclass.AsyncDisk.Variables) ($Is |s'#0@@45| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@13|) (< |id#0@@13| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@5|) (< |id'#0@@5| 18446744073709551616))))) (and (and (AsyncDisk.Variables.Variables_q |s#0@@202|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@202|)) ($Box (int_2_U |id#0@@13|)))) (and (AsyncDisk.Variables.Variables_q |s#0@@202|) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@202|)) ($Box (int_2_U |id'#0@@5|)))) (and (and (and (and (and (AsyncDisk.Variables.Variables_q |s#0@@202|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@202|)) ($Box (int_2_U |id#0@@13|)))))) (and (AsyncDisk.Variables.Variables_q |s#0@@202|) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@202|)) ($Box (int_2_U |id#0@@13|))))))) (and (AsyncDisk.Variables.Variables_q |s#0@@202|) (AsyncDisk.ReqRead.ReqRead_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@202|)) ($Box (int_2_U |id'#0@@5|))))))) (and (AsyncDisk.Variables.Variables_q |s#0@@202|) (AsyncDisk.ReqRead.ReqRead_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@202|)) ($Box (int_2_U |id'#0@@5|))))))) (|AsyncDisk.__default.overlap#canCall| (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@202|)) ($Box (int_2_U |id#0@@13|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@202|)) ($Box (int_2_U |id#0@@13|)))))) (AsyncDisk.ReqRead.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@202|)) ($Box (int_2_U |id'#0@@5|))))) (AsyncDisk.ReqRead.len ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@202|)) ($Box (int_2_U |id'#0@@5|))))))))))) (= (AsyncDisk.__default.HavocConflictingWriteRead |s#0@@202| |s'#0@@45| |id#0@@13| |id'#0@@5|)  (and (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites |s#0@@202|)) ($Box (int_2_U |id#0@@13|)))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads |s#0@@202|)) ($Box (int_2_U |id'#0@@5|))))) (AsyncDisk.__default.overlap (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@202|)) ($Box (int_2_U |id#0@@13|))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqWrites |s#0@@202|)) ($Box (int_2_U |id#0@@13|)))))) (AsyncDisk.ReqRead.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@202|)) ($Box (int_2_U |id'#0@@5|))))) (AsyncDisk.ReqRead.len ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (AsyncDisk.Variables.reqReads |s#0@@202|)) ($Box (int_2_U |id'#0@@5|)))))))))) :qid |AsyncDiskModelsdfy.231:39| :skolemid |2884| :pattern ( (AsyncDisk.__default.HavocConflictingWriteRead |s#0@@202| |s'#0@@45| |id#0@@13| |id'#0@@5|)) ))))
(assert  (=> true (forall ((|s#0@@203| T@U) (|s'#0@@46| T@U) (|id#0@@14| Int) (|id'#0@@6| Int) ) (!  (=> (and (and (= (type |s#0@@203|) DatatypeTypeType) (= (type |s'#0@@46|) DatatypeTypeType)) (or (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| (Lit |s#0@@203|) (Lit |s'#0@@46|) (LitInt |id#0@@14|) (LitInt |id'#0@@6|)) (and (and (and ($Is |s#0@@203| Tclass.AsyncDisk.Variables) ($Is |s'#0@@46| Tclass.AsyncDisk.Variables)) (and (<= (LitInt 0) |id#0@@14|) (< |id#0@@14| 18446744073709551616))) (and (<= (LitInt 0) |id'#0@@6|) (< |id'#0@@6| 18446744073709551616))))) (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@203|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@203|))) ($Box (int_2_U |id#0@@14|)))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@203|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@203|))) ($Box (int_2_U |id'#0@@6|)))) (and (and (and (and (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@203|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id#0@@14|))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@203|)) (AsyncDisk.ReqWrite.ReqWrite_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id#0@@14|)))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@203|)) (AsyncDisk.ReqRead.ReqRead_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))))) (and (AsyncDisk.Variables.Variables_q (Lit |s#0@@203|)) (AsyncDisk.ReqRead.ReqRead_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))))) (|AsyncDisk.__default.overlap#canCall| (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id#0@@14|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id#0@@14|))))))) (AsyncDisk.ReqRead.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))) (AsyncDisk.ReqRead.len ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))))))))) (= (AsyncDisk.__default.HavocConflictingWriteRead (Lit |s#0@@203|) (Lit |s'#0@@46|) (LitInt |id#0@@14|) (LitInt |id'#0@@6|))  (and (and (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqWrites (Lit |s#0@@203|))) ($Box (int_2_U |id#0@@14|)))) (U_2_bool (MapType0Select (|Map#Domain| (AsyncDisk.Variables.reqReads (Lit |s#0@@203|))) ($Box (int_2_U |id'#0@@6|))))) (AsyncDisk.__default.overlap (AsyncDisk.ReqWrite.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id#0@@14|)))))) (|Seq#Length| (AsyncDisk.ReqWrite.bytes ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqWrites (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id#0@@14|))))))) (AsyncDisk.ReqRead.addr ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id'#0@@6|)))))) (AsyncDisk.ReqRead.len ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (AsyncDisk.Variables.reqReads (Lit |s#0@@203|)))) ($Box (int_2_U (LitInt |id'#0@@6|))))))))))) :qid |AsyncDiskModelsdfy.231:39| :weight 3 :skolemid |2885| :pattern ( (AsyncDisk.__default.HavocConflictingWriteRead (Lit |s#0@@203|) (Lit |s'#0@@46|) (LitInt |id#0@@14|) (LitInt |id'#0@@6|))) ))))
(assert  (=> true (forall ((|s#0@@204| T@U) (|s'#0@@47| T@U) (|step#0@@5| T@U) ) (!  (=> (and (and (and (= (type |s#0@@204|) DatatypeTypeType) (= (type |s'#0@@47|) DatatypeTypeType)) (= (type |step#0@@5|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternalStep#canCall| |s#0@@204| |s'#0@@47| |step#0@@5|) (and (and ($Is |s#0@@204| Tclass.AsyncDisk.Variables) ($Is |s'#0@@47| Tclass.AsyncDisk.Variables)) ($Is |step#0@@5| Tclass.AsyncDisk.InternalStep)))) true) :qid |AsyncDiskModelsdfy.240:30| :skolemid |2886| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@204| |s'#0@@47| |step#0@@5|)) ))))
(assert (forall ((|s#0@@205| T@U) (|s'#0@@48| T@U) (|step#0@@6| T@U) ) (!  (=> (and (and (and (= (type |s#0@@205|) DatatypeTypeType) (= (type |s'#0@@48|) DatatypeTypeType)) (= (type |step#0@@6|) DatatypeTypeType)) (and (and ($Is |s#0@@205| Tclass.AsyncDisk.Variables) ($Is |s'#0@@48| Tclass.AsyncDisk.Variables)) ($Is |step#0@@6| Tclass.AsyncDisk.InternalStep))) (= (|AsyncDisk.__default.NextInternalStep#requires| |s#0@@205| |s'#0@@48| |step#0@@6|) true)) :qid |AsyncDiskModelsdfy.240:30| :skolemid |2887| :pattern ( (|AsyncDisk.__default.NextInternalStep#requires| |s#0@@205| |s'#0@@48| |step#0@@6|)) )))
(assert  (=> true (forall ((|s#0@@206| T@U) (|s'#0@@49| T@U) (|step#0@@7| T@U) ) (!  (=> (and (and (and (= (type |s#0@@206|) DatatypeTypeType) (= (type |s'#0@@49|) DatatypeTypeType)) (= (type |step#0@@7|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternalStep#canCall| |s#0@@206| |s'#0@@49| |step#0@@7|) (and (and ($Is |s#0@@206| Tclass.AsyncDisk.Variables) ($Is |s'#0@@49| Tclass.AsyncDisk.Variables)) ($Is |step#0@@7| Tclass.AsyncDisk.InternalStep)))) (and (and (=> (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (let ((|fakeContents#1| (AsyncDisk.InternalStep.fakeContents |step#0@@7|))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q |step#0@@7|)) (let ((|id#4| (AsyncDisk.InternalStep.id |step#0@@7|))) (|AsyncDisk.__default.ProcessReadFailure#canCall| |s#0@@206| |s'#0@@49| |id#4| |fakeContents#1|))))) (=> (not (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|)) (and (=> (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q |step#0@@7|)) (let ((|id#5| (AsyncDisk.InternalStep.id |step#0@@7|))) (|AsyncDisk.__default.ProcessWrite#canCall| |s#0@@206| |s'#0@@49| |id#5|)))) (=> (not (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (and (=> (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|) (let ((|id'#2| (AsyncDisk.InternalStep.id_k |step#0@@7|))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q |step#0@@7|)) (let ((|id#6| (AsyncDisk.InternalStep.id |step#0@@7|))) (|AsyncDisk.__default.HavocConflictingWrites#canCall| |s#0@@206| |s'#0@@49| |id#6| |id'#2|))))) (=> (not (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (let ((|id'#3| (AsyncDisk.InternalStep.id_k |step#0@@7|))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|)) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q |step#0@@7|)) (let ((|id#7| (AsyncDisk.InternalStep.id |step#0@@7|))) (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| |s#0@@206| |s'#0@@49| |id#7| |id'#3|)))))))))) (= (AsyncDisk.__default.NextInternalStep |s#0@@206| |s'#0@@49| |step#0@@7|) (ite (AsyncDisk.InternalStep.ProcessReadFailureStep_q |step#0@@7|) (let ((|fakeContents#0@@11| (AsyncDisk.InternalStep.fakeContents |step#0@@7|))) (let ((|id#0@@15| (AsyncDisk.InternalStep.id |step#0@@7|))) (AsyncDisk.__default.ProcessReadFailure |s#0@@206| |s'#0@@49| |id#0@@15| |fakeContents#0@@11|))) (ite (AsyncDisk.InternalStep.ProcessWriteStep_q |step#0@@7|) (let ((|id#1| (AsyncDisk.InternalStep.id |step#0@@7|))) (AsyncDisk.__default.ProcessWrite |s#0@@206| |s'#0@@49| |id#1|)) (ite (AsyncDisk.InternalStep.HavocConflictingWritesStep_q |step#0@@7|) (let ((|id'#0@@7| (AsyncDisk.InternalStep.id_k |step#0@@7|))) (let ((|id#2| (AsyncDisk.InternalStep.id |step#0@@7|))) (AsyncDisk.__default.HavocConflictingWrites |s#0@@206| |s'#0@@49| |id#2| |id'#0@@7|))) (let ((|id'#1| (AsyncDisk.InternalStep.id_k |step#0@@7|))) (let ((|id#3| (AsyncDisk.InternalStep.id |step#0@@7|))) (AsyncDisk.__default.HavocConflictingWriteRead |s#0@@206| |s'#0@@49| |id#3| |id'#1|))))))))) :qid |AsyncDiskModelsdfy.240:30| :skolemid |2888| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@206| |s'#0@@49| |step#0@@7|)) ))))
(assert  (=> true (forall ((|s#0@@207| T@U) (|s'#0@@50| T@U) (|step#0@@8| T@U) ) (!  (=> (and (and (and (= (type |s#0@@207|) DatatypeTypeType) (= (type |s'#0@@50|) DatatypeTypeType)) (= (type |step#0@@8|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternalStep#canCall| (Lit |s#0@@207|) (Lit |s'#0@@50|) (Lit |step#0@@8|)) (and (and ($Is |s#0@@207| Tclass.AsyncDisk.Variables) ($Is |s'#0@@50| Tclass.AsyncDisk.Variables)) ($Is |step#0@@8| Tclass.AsyncDisk.InternalStep)))) (and (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|))))) (let ((|fakeContents#3| (Lit (AsyncDisk.InternalStep.fakeContents (Lit |step#0@@8|))))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (Lit |step#0@@8|))) (let ((|id#12| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (|AsyncDisk.__default.ProcessReadFailure#canCall| (Lit |s#0@@207|) (Lit |s'#0@@50|) |id#12| |fakeContents#3|))))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (Lit |step#0@@8|))) (let ((|id#13| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (|AsyncDisk.__default.ProcessWrite#canCall| (Lit |s#0@@207|) (Lit |s'#0@@50|) |id#13|)))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|)))))) (and (=> (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))))) (let ((|id'#6| (LitInt (AsyncDisk.InternalStep.id_k (Lit |step#0@@8|))))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (Lit |step#0@@8|))) (let ((|id#14| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (|AsyncDisk.__default.HavocConflictingWrites#canCall| (Lit |s#0@@207|) (Lit |s'#0@@50|) |id#14| |id'#6|))))) (=> (not (U_2_bool (Lit (bool_2_U (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|)))))) (let ((|id'#7| (LitInt (AsyncDisk.InternalStep.id_k (Lit |step#0@@8|))))) (and (or (or (or (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|))) (AsyncDisk.InternalStep.HavocConflictingWriteReadStep_q (Lit |step#0@@8|))) (let ((|id#15| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (|AsyncDisk.__default.HavocConflictingWriteRead#canCall| (Lit |s#0@@207|) (Lit |s'#0@@50|) |id#15| |id'#7|)))))))))) (= (AsyncDisk.__default.NextInternalStep (Lit |s#0@@207|) (Lit |s'#0@@50|) (Lit |step#0@@8|)) (ite (AsyncDisk.InternalStep.ProcessReadFailureStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|fakeContents#2| (Lit (AsyncDisk.InternalStep.fakeContents (Lit |step#0@@8|))))) (let ((|id#8| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncDisk.__default.ProcessReadFailure (Lit |s#0@@207|) (Lit |s'#0@@50|) |id#8| |fakeContents#2|)))))) (ite (AsyncDisk.InternalStep.ProcessWriteStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|id#9| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncDisk.__default.ProcessWrite (Lit |s#0@@207|) (Lit |s'#0@@50|) |id#9|))))) (ite (AsyncDisk.InternalStep.HavocConflictingWritesStep_q (Lit |step#0@@8|)) (U_2_bool (let ((|id'#4| (LitInt (AsyncDisk.InternalStep.id_k (Lit |step#0@@8|))))) (let ((|id#10| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncDisk.__default.HavocConflictingWrites (Lit |s#0@@207|) (Lit |s'#0@@50|) |id#10| |id'#4|)))))) (U_2_bool (let ((|id'#5| (LitInt (AsyncDisk.InternalStep.id_k (Lit |step#0@@8|))))) (let ((|id#11| (LitInt (AsyncDisk.InternalStep.id (Lit |step#0@@8|))))) (Lit (bool_2_U (AsyncDisk.__default.HavocConflictingWriteRead (Lit |s#0@@207|) (Lit |s'#0@@50|) |id#11| |id'#5|)))))))))))) :qid |AsyncDiskModelsdfy.240:30| :weight 3 :skolemid |2889| :pattern ( (AsyncDisk.__default.NextInternalStep (Lit |s#0@@207|) (Lit |s'#0@@50|) (Lit |step#0@@8|))) ))))
(assert  (=> true (forall ((|s#0@@208| T@U) (|s'#0@@51| T@U) ) (!  (=> (and (and (= (type |s#0@@208|) DatatypeTypeType) (= (type |s'#0@@51|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternal#canCall| |s#0@@208| |s'#0@@51|) (and ($Is |s#0@@208| Tclass.AsyncDisk.Variables) ($Is |s'#0@@51| Tclass.AsyncDisk.Variables)))) true) :qid |AsyncDiskModelsdfy.251:26| :skolemid |2890| :pattern ( (AsyncDisk.__default.NextInternal |s#0@@208| |s'#0@@51|)) ))))
(assert (forall ((|s#0@@209| T@U) (|s'#0@@52| T@U) ) (!  (=> (and (and (= (type |s#0@@209|) DatatypeTypeType) (= (type |s'#0@@52|) DatatypeTypeType)) (and ($Is |s#0@@209| Tclass.AsyncDisk.Variables) ($Is |s'#0@@52| Tclass.AsyncDisk.Variables))) (= (|AsyncDisk.__default.NextInternal#requires| |s#0@@209| |s'#0@@52|) true)) :qid |AsyncDiskModelsdfy.251:26| :skolemid |2891| :pattern ( (|AsyncDisk.__default.NextInternal#requires| |s#0@@209| |s'#0@@52|)) )))
(assert  (=> true (forall ((|s#0@@210| T@U) (|s'#0@@53| T@U) ) (!  (=> (and (and (= (type |s#0@@210|) DatatypeTypeType) (= (type |s'#0@@53|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternal#canCall| |s#0@@210| |s'#0@@53|) (and ($Is |s#0@@210| Tclass.AsyncDisk.Variables) ($Is |s'#0@@53| Tclass.AsyncDisk.Variables)))) (and (forall ((|step#0@@9| T@U) ) (!  (=> (and (= (type |step#0@@9|) DatatypeTypeType) ($Is |step#0@@9| Tclass.AsyncDisk.InternalStep)) (|AsyncDisk.__default.NextInternalStep#canCall| |s#0@@210| |s'#0@@53| |step#0@@9|)) :qid |AsyncDiskModelsdfy.253:12| :skolemid |2893| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@210| |s'#0@@53| |step#0@@9|)) )) (= (AsyncDisk.__default.NextInternal |s#0@@210| |s'#0@@53|) (exists ((|step#0@@10| T@U) ) (!  (and (= (type |step#0@@10|) DatatypeTypeType) (and ($Is |step#0@@10| Tclass.AsyncDisk.InternalStep) (AsyncDisk.__default.NextInternalStep |s#0@@210| |s'#0@@53| |step#0@@10|))) :qid |AsyncDiskModelsdfy.253:12| :skolemid |2892| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@210| |s'#0@@53| |step#0@@10|)) ))))) :qid |AsyncDiskModelsdfy.251:26| :skolemid |2894| :pattern ( (AsyncDisk.__default.NextInternal |s#0@@210| |s'#0@@53|)) ))))
(assert  (=> true (forall ((|s#0@@211| T@U) (|s'#0@@54| T@U) ) (!  (=> (and (and (= (type |s#0@@211|) DatatypeTypeType) (= (type |s'#0@@54|) DatatypeTypeType)) (or (|AsyncDisk.__default.NextInternal#canCall| (Lit |s#0@@211|) (Lit |s'#0@@54|)) (and ($Is |s#0@@211| Tclass.AsyncDisk.Variables) ($Is |s'#0@@54| Tclass.AsyncDisk.Variables)))) (and (forall ((|step#1@@1| T@U) ) (!  (=> (and (= (type |step#1@@1|) DatatypeTypeType) ($Is |step#1@@1| Tclass.AsyncDisk.InternalStep)) (|AsyncDisk.__default.NextInternalStep#canCall| (Lit |s#0@@211|) (Lit |s'#0@@54|) |step#1@@1|)) :qid |AsyncDiskModelsdfy.253:12| :skolemid |2896| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@211| |s'#0@@54| |step#1@@1|)) )) (= (AsyncDisk.__default.NextInternal (Lit |s#0@@211|) (Lit |s'#0@@54|)) (exists ((|step#1@@2| T@U) ) (!  (and (= (type |step#1@@2|) DatatypeTypeType) (and ($Is |step#1@@2| Tclass.AsyncDisk.InternalStep) (AsyncDisk.__default.NextInternalStep (Lit |s#0@@211|) (Lit |s'#0@@54|) |step#1@@2|))) :qid |AsyncDiskModelsdfy.253:12| :skolemid |2895| :pattern ( (AsyncDisk.__default.NextInternalStep |s#0@@211| |s'#0@@54| |step#1@@2|)) ))))) :qid |AsyncDiskModelsdfy.251:26| :weight 3 :skolemid |2897| :pattern ( (AsyncDisk.__default.NextInternal (Lit |s#0@@211|) (Lit |s'#0@@54|))) ))))
(assert  (=> true (forall ((|s#0@@212| T@U) (|s'#0@@55| T@U) ) (!  (=> (and (and (= (type |s#0@@212|) DatatypeTypeType) (= (type |s'#0@@55|) DatatypeTypeType)) (or (|AsyncDisk.__default.Crash#canCall| |s#0@@212| |s'#0@@55|) (and ($Is |s#0@@212| Tclass.AsyncDisk.Variables) ($Is |s'#0@@55| Tclass.AsyncDisk.Variables)))) true) :qid |AsyncDiskModelsdfy.256:19| :skolemid |2898| :pattern ( (AsyncDisk.__default.Crash |s#0@@212| |s'#0@@55|)) ))))
(assert (forall ((|s#0@@213| T@U) (|s'#0@@56| T@U) ) (!  (=> (and (and (= (type |s#0@@213|) DatatypeTypeType) (= (type |s'#0@@56|) DatatypeTypeType)) (and ($Is |s#0@@213| Tclass.AsyncDisk.Variables) ($Is |s'#0@@56| Tclass.AsyncDisk.Variables))) (= (|AsyncDisk.__default.Crash#requires| |s#0@@213| |s'#0@@56|) true)) :qid |AsyncDiskModelsdfy.256:19| :skolemid |2899| :pattern ( (|AsyncDisk.__default.Crash#requires| |s#0@@213| |s'#0@@56|)) )))
(assert  (=> true (forall ((|s#0@@214| T@U) (|s'#0@@57| T@U) ) (!  (=> (and (and (= (type |s#0@@214|) DatatypeTypeType) (= (type |s'#0@@57|) DatatypeTypeType)) (or (|AsyncDisk.__default.Crash#canCall| |s#0@@214| |s'#0@@57|) (and ($Is |s#0@@214| Tclass.AsyncDisk.Variables) ($Is |s'#0@@57| Tclass.AsyncDisk.Variables)))) (and (and (|$IsA#AsyncDisk.Variables| |s'#0@@57|) (AsyncDisk.Variables.Variables_q |s#0@@214|)) (= (AsyncDisk.__default.Crash |s#0@@214| |s'#0@@57|) (|AsyncDisk.Variables#Equal| |s'#0@@57| (|#AsyncDisk.Variables.Variables| (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (AsyncDisk.Variables.contents |s#0@@214|)))))) :qid |AsyncDiskModelsdfy.256:19| :skolemid |2900| :pattern ( (AsyncDisk.__default.Crash |s#0@@214| |s'#0@@57|)) ))))
(assert  (=> true (forall ((|s#0@@215| T@U) (|s'#0@@58| T@U) ) (!  (=> (and (and (= (type |s#0@@215|) DatatypeTypeType) (= (type |s'#0@@58|) DatatypeTypeType)) (or (|AsyncDisk.__default.Crash#canCall| (Lit |s#0@@215|) (Lit |s'#0@@58|)) (and ($Is |s#0@@215| Tclass.AsyncDisk.Variables) ($Is |s'#0@@58| Tclass.AsyncDisk.Variables)))) (and (and (|$IsA#AsyncDisk.Variables| (Lit |s'#0@@58|)) (AsyncDisk.Variables.Variables_q (Lit |s#0@@215|))) (= (AsyncDisk.__default.Crash (Lit |s#0@@215|) (Lit |s'#0@@58|)) (|AsyncDisk.Variables#Equal| |s'#0@@58| (|#AsyncDisk.Variables.Variables| (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (|Map#Empty| BoxType BoxType)) (Lit (AsyncDisk.Variables.contents (Lit |s#0@@215|)))))))) :qid |AsyncDiskModelsdfy.256:19| :weight 3 :skolemid |2901| :pattern ( (AsyncDisk.__default.Crash (Lit |s#0@@215|) (Lit |s'#0@@58|))) ))))
(assert (= (type Tclass.JournalBytes.__default) TyType))
(assert (= (Tag Tclass.JournalBytes.__default) Tagclass.JournalBytes.__default))
(assert (= (TagFamily Tclass.JournalBytes.__default) tytagFamily$_default))
(assert (forall ((bx@@183 T@U) ) (!  (=> (and (= (type bx@@183) BoxType) ($IsBox bx@@183 Tclass.JournalBytes.__default)) (and (= ($Box ($Unbox refType bx@@183)) bx@@183) ($Is ($Unbox refType bx@@183) Tclass.JournalBytes.__default))) :qid |unknown.0:0| :skolemid |2902| :pattern ( ($IsBox bx@@183 Tclass.JournalBytes.__default)) )))
(assert (forall (($o@@54 T@U) ) (!  (=> (= (type $o@@54) refType) (= ($Is $o@@54 Tclass.JournalBytes.__default)  (or (= $o@@54 null) (= (dtype $o@@54) Tclass.JournalBytes.__default)))) :qid |unknown.0:0| :skolemid |2903| :pattern ( ($Is $o@@54 Tclass.JournalBytes.__default)) )))
(assert (forall (($o@@55 T@U) ($h@@199 T@U) ) (!  (=> (and (= (type $o@@55) refType) (= (type $h@@199) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@55 Tclass.JournalBytes.__default $h@@199)  (or (= $o@@55 null) (U_2_bool (MapType1Select (MapType0Select $h@@199 $o@@55) alloc))))) :qid |unknown.0:0| :skolemid |2904| :pattern ( ($IsAlloc $o@@55 Tclass.JournalBytes.__default $h@@199)) )))
(assert (forall ((arg0@@634 T@U) (arg1@@301 T@U) ) (! (= (type (JournalBytes.__default.JournalBlockOfByteSeq arg0@@634 arg1@@301)) DatatypeTypeType) :qid |funType:JournalBytes.__default.JournalBlockOfByteSeq| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq arg0@@634 arg1@@301)) )))
(assert (forall (($ly@@358 T@U) (|s#0@@216| T@U) ) (!  (=> (and (= (type $ly@@358) LayerTypeType) (= (type |s#0@@216|) (SeqType BoxType))) (= (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@358) |s#0@@216|) (JournalBytes.__default.JournalBlockOfByteSeq $ly@@358 |s#0@@216|))) :qid |JournalBytesidfy.14:22| :skolemid |2905| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@358) |s#0@@216|)) )))
(assert (forall (($ly@@359 T@U) (|s#0@@217| T@U) ) (!  (=> (and (= (type $ly@@359) LayerTypeType) (= (type |s#0@@217|) (SeqType BoxType))) (= (JournalBytes.__default.JournalBlockOfByteSeq $ly@@359 |s#0@@217|) (JournalBytes.__default.JournalBlockOfByteSeq $LZ |s#0@@217|))) :qid |JournalBytesidfy.14:22| :skolemid |2906| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq (AsFuelBottom $ly@@359) |s#0@@217|)) )))
(assert  (=> true (forall (($ly@@360 T@U) (|s#0@@218| T@U) ) (!  (=> (and (and (= (type $ly@@360) LayerTypeType) (= (type |s#0@@218|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| |s#0@@218|) ($Is |s#0@@218| (TSeq Tclass.NativeTypes.byte)))) (and (=> (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq $ly@@360 |s#0@@218|)) (= (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalBlockOfByteSeq $ly@@360 |s#0@@218|)))) (LitInt 4064))) ($Is (JournalBytes.__default.JournalBlockOfByteSeq $ly@@360 |s#0@@218|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |JournalBytesidfy.14:22| :skolemid |2907| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq $ly@@360 |s#0@@218|)) ))))
(assert (forall (($ly@@361 T@U) (|s#0@@219| T@U) ) (!  (=> (and (and (= (type $ly@@361) LayerTypeType) (= (type |s#0@@219|) (SeqType BoxType))) ($Is |s#0@@219| (TSeq Tclass.NativeTypes.byte))) (= (|JournalBytes.__default.JournalBlockOfByteSeq#requires| $ly@@361 |s#0@@219|) true)) :qid |JournalBytesidfy.14:22| :skolemid |2908| :pattern ( (|JournalBytes.__default.JournalBlockOfByteSeq#requires| $ly@@361 |s#0@@219|)) )))
(assert  (=> true (forall (($ly@@362 T@U) (|s#0@@220| T@U) ) (!  (=> (and (and (= (type $ly@@362) LayerTypeType) (= (type |s#0@@220|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| |s#0@@220|) ($Is |s#0@@220| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| |s#0@@220|) (LitInt 4096)) (|AsyncDisk.__default.ChecksumChecksOut#canCall| |s#0@@220|)) (= (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@362) |s#0@@220|) (ite  (and (= (|Seq#Length| |s#0@@220|) (LitInt 4096)) (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut |s#0@@220|)) (|#Options.Option.Some| ($Box (|Seq#Drop| |s#0@@220| (LitInt 32)))) |#Options.Option.None|)))) :qid |JournalBytesidfy.14:22| :skolemid |2909| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@362) |s#0@@220|)) ))))
(assert  (=> true (forall (($ly@@363 T@U) (|s#0@@221| T@U) ) (!  (=> (and (and (= (type $ly@@363) LayerTypeType) (= (type |s#0@@221|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (Lit |s#0@@221|)) ($Is |s#0@@221| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| (Lit |s#0@@221|)) (LitInt 4096)) (|AsyncDisk.__default.ChecksumChecksOut#canCall| (Lit |s#0@@221|))) (= (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@363) (Lit |s#0@@221|)) (ite  (and (= (|Seq#Length| (Lit |s#0@@221|)) (LitInt 4096)) (AsyncDisk.__default.ChecksumChecksOut StartFuel_AsyncDisk._default.ChecksumChecksOut (Lit |s#0@@221|))) (|#Options.Option.Some| ($Box (Lit (|Seq#Drop| (Lit |s#0@@221|) (LitInt 32))))) |#Options.Option.None|)))) :qid |JournalBytesidfy.14:22| :weight 3 :skolemid |2910| :pattern ( (JournalBytes.__default.JournalBlockOfByteSeq ($LS $ly@@363) (Lit |s#0@@221|))) ))))
(assert (forall ((arg0@@635 T@U) (arg1@@302 T@U) ) (! (= (type (JournalBytes.__default.JournalRangeOfByteSeq arg0@@635 arg1@@302)) DatatypeTypeType) :qid |funType:JournalBytes.__default.JournalRangeOfByteSeq| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq arg0@@635 arg1@@302)) )))
(assert (forall (($ly@@364 T@U) (|s#0@@222| T@U) ) (!  (=> (and (= (type $ly@@364) LayerTypeType) (= (type |s#0@@222|) (SeqType BoxType))) (= (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@364) |s#0@@222|) (JournalBytes.__default.JournalRangeOfByteSeq $ly@@364 |s#0@@222|))) :qid |JournalBytesidfy.23:22| :skolemid |2911| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@364) |s#0@@222|)) )))
(assert (forall (($ly@@365 T@U) (|s#0@@223| T@U) ) (!  (=> (and (= (type $ly@@365) LayerTypeType) (= (type |s#0@@223|) (SeqType BoxType))) (= (JournalBytes.__default.JournalRangeOfByteSeq $ly@@365 |s#0@@223|) (JournalBytes.__default.JournalRangeOfByteSeq $LZ |s#0@@223|))) :qid |JournalBytesidfy.23:22| :skolemid |2912| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq (AsFuelBottom $ly@@365) |s#0@@223|)) )))
(assert  (=> true (forall (($ly@@366 T@U) (|s#0@@224| T@U) ) (!  (=> (and (and (= (type $ly@@366) LayerTypeType) (= (type |s#0@@224|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| |s#0@@224|) ($Is |s#0@@224| (TSeq Tclass.NativeTypes.byte)))) (and (and (=> (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@224|)) (= (Mul (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@224|)))) (LitInt 4096)) (|Seq#Length| |s#0@@224|))) (=> (Options.Option.Some_q (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@224|)) (forall ((|i#0@@129| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@129|) (< |i#0@@129| (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@224|)))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@224|))) |i#0@@129|))) (LitInt 4064))) :qid |JournalBytesidfy.25:32| :skolemid |2913| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| ($Unbox (SeqType BoxType) (Options.Option.value (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@224|))) |i#0@@129|))) )))) ($Is (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@224|) (Tclass.Options.Option (TSeq (TSeq Tclass.NativeTypes.byte)))))) :qid |JournalBytesidfy.23:22| :skolemid |2914| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq $ly@@366 |s#0@@224|)) ))))
(assert (forall (($ly@@367 T@U) (|s#0@@225| T@U) ) (!  (=> (and (and (= (type $ly@@367) LayerTypeType) (= (type |s#0@@225|) (SeqType BoxType))) ($Is |s#0@@225| (TSeq Tclass.NativeTypes.byte))) (= (|JournalBytes.__default.JournalRangeOfByteSeq#requires| $ly@@367 |s#0@@225|) true)) :qid |JournalBytesidfy.23:22| :skolemid |2915| :pattern ( (|JournalBytes.__default.JournalRangeOfByteSeq#requires| $ly@@367 |s#0@@225|)) )))
(assert (= (type StartFuel_JournalBytes._default.JournalBlockOfByteSeq) LayerTypeType))
(assert  (=> true (forall (($ly@@368 T@U) (|s#0@@226| T@U) ) (!  (=> (and (and (= (type $ly@@368) LayerTypeType) (= (type |s#0@@226|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| |s#0@@226|) ($Is |s#0@@226| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (|Seq#Equal| |s#0@@226| (|Seq#Empty| BoxType))) (and (=> (>= (|Seq#Length| |s#0@@226|) (LitInt 4096)) (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@226| (LitInt 4096)) (LitInt 0)))) (=> (and (>= (|Seq#Length| |s#0@@226|) (LitInt 4096)) (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (|Seq#Drop| (|Seq#Take| |s#0@@226| (LitInt 4096)) (LitInt 0))))) (and (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| (|Seq#Drop| |s#0@@226| (LitInt 4096))) (let ((|rest#0@@0| (JournalBytes.__default.JournalRangeOfByteSeq $ly@@368 (|Seq#Drop| |s#0@@226| (LitInt 4096))))) (=> (Options.Option.Some_q |rest#0@@0|) (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@226| (LitInt 4096)) (LitInt 0))))))))) (= (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@368) |s#0@@226|) (ite (|Seq#Equal| |s#0@@226| (|Seq#Empty| BoxType)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite  (and (>= (|Seq#Length| |s#0@@226|) (LitInt 4096)) (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (|Seq#Drop| (|Seq#Take| |s#0@@226| (LitInt 4096)) (LitInt 0))))) (let ((|rest#0@@1| (JournalBytes.__default.JournalRangeOfByteSeq $ly@@368 (|Seq#Drop| |s#0@@226| (LitInt 4096))))) (ite (Options.Option.Some_q |rest#0@@1|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (|Seq#Drop| (|Seq#Take| |s#0@@226| (LitInt 4096)) (LitInt 0))))) ($Unbox (SeqType BoxType) (Options.Option.value |rest#0@@1|))))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalBytesidfy.23:22| :skolemid |2916| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@368) |s#0@@226|)) ))))
(assert  (=> true (forall (($ly@@369 T@U) (|s#0@@227| T@U) ) (!  (=> (and (and (= (type $ly@@369) LayerTypeType) (= (type |s#0@@227|) (SeqType BoxType))) (or (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| (Lit |s#0@@227|)) ($Is |s#0@@227| (TSeq Tclass.NativeTypes.byte)))) (and (=> (not (|Seq#Equal| |s#0@@227| (|Seq#Empty| BoxType))) (and (=> (>= (|Seq#Length| (Lit |s#0@@227|)) (LitInt 4096)) (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@227|) (LitInt 4096)) (LitInt 0))))) (=> (and (>= (|Seq#Length| (Lit |s#0@@227|)) (LitInt 4096)) (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@227|) (LitInt 4096)) (LitInt 0)))))) (and (|JournalBytes.__default.JournalRangeOfByteSeq#canCall| (Lit (|Seq#Drop| (Lit |s#0@@227|) (LitInt 4096)))) (let ((|rest#1@@0| (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@369) (Lit (|Seq#Drop| (Lit |s#0@@227|) (LitInt 4096)))))) (=> (Options.Option.Some_q |rest#1@@0|) (|JournalBytes.__default.JournalBlockOfByteSeq#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@227|) (LitInt 4096)) (LitInt 0)))))))))) (= (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@369) (Lit |s#0@@227|)) (ite (|Seq#Equal| |s#0@@227| (|Seq#Empty| BoxType)) (|#Options.Option.Some| ($Box (Lit (|Seq#Empty| BoxType)))) (ite  (and (>= (|Seq#Length| (Lit |s#0@@227|)) (LitInt 4096)) (Options.Option.Some_q (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@227|) (LitInt 4096)) (LitInt 0)))))) (let ((|rest#1@@1| (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@369) (Lit (|Seq#Drop| (Lit |s#0@@227|) (LitInt 4096)))))) (ite (Options.Option.Some_q |rest#1@@1|) (|#Options.Option.Some| ($Box (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Options.Option.value (JournalBytes.__default.JournalBlockOfByteSeq StartFuel_JournalBytes._default.JournalBlockOfByteSeq (Lit (|Seq#Drop| (|Seq#Take| (Lit |s#0@@227|) (LitInt 4096)) (LitInt 0)))))) ($Unbox (SeqType BoxType) (Options.Option.value |rest#1@@1|))))) |#Options.Option.None|)) |#Options.Option.None|))))) :qid |JournalBytesidfy.23:22| :weight 3 :skolemid |2917| :pattern ( (JournalBytes.__default.JournalRangeOfByteSeq ($LS $ly@@369) (Lit |s#0@@227|))) ))))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (= (TagFamily Tclass.SeqComparison.__default) tytagFamily$_default))
(assert (forall ((bx@@184 T@U) ) (!  (=> (and (= (type bx@@184) BoxType) ($IsBox bx@@184 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@184)) bx@@184) ($Is ($Unbox refType bx@@184) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |2918| :pattern ( ($IsBox bx@@184 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@56 T@U) ) (!  (=> (= (type $o@@56) refType) (= ($Is $o@@56 Tclass.SeqComparison.__default)  (or (= $o@@56 null) (= (dtype $o@@56) Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |2919| :pattern ( ($Is $o@@56 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@57 T@U) ($h@@200 T@U) ) (!  (=> (and (= (type $o@@57) refType) (= (type $h@@200) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@57 Tclass.SeqComparison.__default $h@@200)  (or (= $o@@57 null) (U_2_bool (MapType1Select (MapType0Select $h@@200 $o@@57) alloc))))) :qid |unknown.0:0| :skolemid |2920| :pattern ( ($IsAlloc $o@@57 Tclass.SeqComparison.__default $h@@200)) )))
(assert (forall (($ly@@370 T@U) (|a#0@@118| T@U) (|b#0@@96| T@U) ) (!  (=> (and (and (= (type $ly@@370) LayerTypeType) (= (type |a#0@@118|) (SeqType BoxType))) (= (type |b#0@@96|) (SeqType BoxType))) (= (SeqComparison.__default.lte ($LS $ly@@370) |a#0@@118| |b#0@@96|) (SeqComparison.__default.lte $ly@@370 |a#0@@118| |b#0@@96|))) :qid |SeqComparisonsdfy.14:23| :skolemid |2921| :pattern ( (SeqComparison.__default.lte ($LS $ly@@370) |a#0@@118| |b#0@@96|)) )))
(assert (forall (($ly@@371 T@U) (|a#0@@119| T@U) (|b#0@@97| T@U) ) (!  (=> (and (and (= (type $ly@@371) LayerTypeType) (= (type |a#0@@119|) (SeqType BoxType))) (= (type |b#0@@97|) (SeqType BoxType))) (= (SeqComparison.__default.lte $ly@@371 |a#0@@119| |b#0@@97|) (SeqComparison.__default.lte $LZ |a#0@@119| |b#0@@97|))) :qid |SeqComparisonsdfy.14:23| :skolemid |2922| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@371) |a#0@@119| |b#0@@97|)) )))
(assert  (=> true (forall (($ly@@372 T@U) (|a#0@@120| T@U) (|b#0@@98| T@U) ) (!  (=> (and (and (and (= (type $ly@@372) LayerTypeType) (= (type |a#0@@120|) (SeqType BoxType))) (= (type |b#0@@98|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@120| |b#0@@98|) (and ($Is |a#0@@120| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@98| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqComparisonsdfy.14:23| :skolemid |2923| :pattern ( (SeqComparison.__default.lte $ly@@372 |a#0@@120| |b#0@@98|)) ))))
(assert (forall (($ly@@373 T@U) (|a#0@@121| T@U) (|b#0@@99| T@U) ) (!  (=> (and (and (and (= (type $ly@@373) LayerTypeType) (= (type |a#0@@121|) (SeqType BoxType))) (= (type |b#0@@99|) (SeqType BoxType))) (and ($Is |a#0@@121| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@99| (TSeq Tclass.NativeTypes.byte)))) (= (|SeqComparison.__default.lte#requires| $ly@@373 |a#0@@121| |b#0@@99|) true)) :qid |SeqComparisonsdfy.14:23| :skolemid |2924| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@373 |a#0@@121| |b#0@@99|)) )))
(assert  (=> true (forall (($ly@@374 T@U) (|a#0@@122| T@U) (|b#0@@100| T@U) ) (!  (=> (and (and (and (= (type $ly@@374) LayerTypeType) (= (type |a#0@@122|) (SeqType BoxType))) (= (type |b#0@@100|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@122| |b#0@@100|) (and ($Is |a#0@@122| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@100| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@122|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@100|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@100| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@122| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@122| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@100| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@122| (LitInt 1)) (|Seq#Drop| |b#0@@100| (LitInt 1))))))) (= (SeqComparison.__default.lte ($LS $ly@@374) |a#0@@122| |b#0@@100|) (ite (= (|Seq#Length| |a#0@@122|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@100|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@122| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@100| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@100| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@122| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@374 (|Seq#Drop| |a#0@@122| (LitInt 1)) (|Seq#Drop| |b#0@@100| (LitInt 1)))))))))) :qid |SeqComparisonsdfy.14:23| :skolemid |2925| :pattern ( (SeqComparison.__default.lte ($LS $ly@@374) |a#0@@122| |b#0@@100|)) ))))
(assert  (=> true (forall (($ly@@375 T@U) (|a#0@@123| T@U) (|b#0@@101| T@U) ) (!  (=> (and (and (and (= (type $ly@@375) LayerTypeType) (= (type |a#0@@123|) (SeqType BoxType))) (= (type |b#0@@101|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@123|) |b#0@@101|) (and ($Is |a#0@@123| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@101| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@123|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@101|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@101| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@123|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@123|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@101| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@123|) (LitInt 1))) (|Seq#Drop| |b#0@@101| (LitInt 1))))))) (= (SeqComparison.__default.lte ($LS $ly@@375) (Lit |a#0@@123|) |b#0@@101|) (ite (= (|Seq#Length| (Lit |a#0@@123|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@101|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@123|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@101| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@101| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@123|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@375) (Lit (|Seq#Drop| (Lit |a#0@@123|) (LitInt 1))) (|Seq#Drop| |b#0@@101| (LitInt 1)))))))))) :qid |SeqComparisonsdfy.14:23| :weight 3 :skolemid |2926| :pattern ( (SeqComparison.__default.lte ($LS $ly@@375) (Lit |a#0@@123|) |b#0@@101|)) ))))
(assert  (=> true (forall (($ly@@376 T@U) (|a#0@@124| T@U) (|b#0@@102| T@U) ) (!  (=> (and (and (and (= (type $ly@@376) LayerTypeType) (= (type |a#0@@124|) (SeqType BoxType))) (= (type |b#0@@102|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@124|) (Lit |b#0@@102|)) (and ($Is |a#0@@124| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@102| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@124|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@102|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@102|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@124|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@124|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@102|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@124|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@102|) (LitInt 1)))))))) (= (SeqComparison.__default.lte ($LS $ly@@376) (Lit |a#0@@124|) (Lit |b#0@@102|)) (ite (= (|Seq#Length| (Lit |a#0@@124|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@102|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@124|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@102|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@102|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@124|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@376) (Lit (|Seq#Drop| (Lit |a#0@@124|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@102|) (LitInt 1))))))))))) :qid |SeqComparisonsdfy.14:23| :weight 3 :skolemid |2927| :pattern ( (SeqComparison.__default.lte ($LS $ly@@376) (Lit |a#0@@124|) (Lit |b#0@@102|))) ))))
(assert  (=> true (forall ((|a#0@@125| T@U) (|b#0@@103| T@U) ) (!  (=> (and (and (= (type |a#0@@125|) (SeqType BoxType)) (= (type |b#0@@103|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@125| |b#0@@103|) (and ($Is |a#0@@125| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@103| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqComparisonsdfy.30:16| :skolemid |2928| :pattern ( (SeqComparison.__default.lt |a#0@@125| |b#0@@103|)) ))))
(assert (forall ((|a#0@@126| T@U) (|b#0@@104| T@U) ) (!  (=> (and (and (= (type |a#0@@126|) (SeqType BoxType)) (= (type |b#0@@104|) (SeqType BoxType))) (and ($Is |a#0@@126| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@104| (TSeq Tclass.NativeTypes.byte)))) (= (|SeqComparison.__default.lt#requires| |a#0@@126| |b#0@@104|) true)) :qid |SeqComparisonsdfy.30:16| :skolemid |2929| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@126| |b#0@@104|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@127| T@U) (|b#0@@105| T@U) ) (!  (=> (and (and (= (type |a#0@@127|) (SeqType BoxType)) (= (type |b#0@@105|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@127| |b#0@@105|) (and ($Is |a#0@@127| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@105| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@127| |b#0@@105|) (= (SeqComparison.__default.lt |a#0@@127| |b#0@@105|)  (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@127| |b#0@@105|) (not (|Seq#Equal| |a#0@@127| |b#0@@105|)))))) :qid |SeqComparisonsdfy.30:16| :skolemid |2930| :pattern ( (SeqComparison.__default.lt |a#0@@127| |b#0@@105|)) ))))
(assert  (=> true (forall ((|a#0@@128| T@U) (|b#0@@106| T@U) ) (!  (=> (and (and (= (type |a#0@@128|) (SeqType BoxType)) (= (type |b#0@@106|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@128|) (Lit |b#0@@106|)) (and ($Is |a#0@@128| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@106| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@128|) (Lit |b#0@@106|)) (= (SeqComparison.__default.lt (Lit |a#0@@128|) (Lit |b#0@@106|))  (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@128|) (Lit |b#0@@106|)) (not (|Seq#Equal| |a#0@@128| |b#0@@106|)))))) :qid |SeqComparisonsdfy.30:16| :weight 3 :skolemid |2931| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@128|) (Lit |b#0@@106|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (= (TagFamily Tclass.NativeArrays.__default) tytagFamily$_default))
(assert (forall ((bx@@185 T@U) ) (!  (=> (and (= (type bx@@185) BoxType) ($IsBox bx@@185 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@185)) bx@@185) ($Is ($Unbox refType bx@@185) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |2932| :pattern ( ($IsBox bx@@185 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@58 T@U) ) (!  (=> (= (type $o@@58) refType) (= ($Is $o@@58 Tclass.NativeArrays.__default)  (or (= $o@@58 null) (= (dtype $o@@58) Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |2933| :pattern ( ($Is $o@@58 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@59 T@U) ($h@@201 T@U) ) (!  (=> (and (= (type $o@@59) refType) (= (type $h@@201) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@59 Tclass.NativeArrays.__default $h@@201)  (or (= $o@@59 null) (U_2_bool (MapType1Select (MapType0Select $h@@201 $o@@59) alloc))))) :qid |unknown.0:0| :skolemid |2934| :pattern ( ($IsAlloc $o@@59 Tclass.NativeArrays.__default $h@@201)) )))
(assert (= (type Tclass.CRC32__C__Impl.__default) TyType))
(assert (= (Tag Tclass.CRC32__C__Impl.__default) Tagclass.CRC32__C__Impl.__default))
(assert (= (TagFamily Tclass.CRC32__C__Impl.__default) tytagFamily$_default))
(assert (forall (($o@@60 T@U) ) (!  (=> (= (type $o@@60) refType) (= ($Is $o@@60 Tclass.CRC32__C__Impl.__default)  (or (= $o@@60 null) (= (dtype $o@@60) Tclass.CRC32__C__Impl.__default)))) :qid |unknown.0:0| :skolemid |2938| :pattern ( ($Is $o@@60 Tclass.CRC32__C__Impl.__default)) )))
(assert (forall (($o@@61 T@U) ($h@@202 T@U) ) (!  (=> (and (= (type $o@@61) refType) (= (type $h@@202) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@61 Tclass.CRC32__C__Impl.__default $h@@202)  (or (= $o@@61 null) (U_2_bool (MapType1Select (MapType0Select $h@@202 $o@@61) alloc))))) :qid |unknown.0:0| :skolemid |2939| :pattern ( ($IsAlloc $o@@61 Tclass.CRC32__C__Impl.__default $h@@202)) )))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@636 T@T) (arg1@@303 T@T) ) (! (= (Ctor (MapType8Type arg0@@636 arg1@@303)) 30) :qid |ctor:MapType8Type| )) (forall ((arg0@@637 T@T) (arg1@@304 T@T) ) (! (= (MapType8TypeInv0 (MapType8Type arg0@@637 arg1@@304)) arg0@@637) :qid |typeInv:MapType8TypeInv0| :pattern ( (MapType8Type arg0@@637 arg1@@304)) ))) (forall ((arg0@@638 T@T) (arg1@@305 T@T) ) (! (= (MapType8TypeInv1 (MapType8Type arg0@@638 arg1@@305)) arg1@@305) :qid |typeInv:MapType8TypeInv1| :pattern ( (MapType8Type arg0@@638 arg1@@305)) ))) (forall ((arg0@@639 T@U) (arg1@@306 T@U) (arg2@@167 T@U) ) (! (let ((aVar1@@8 (MapType8TypeInv1 (type arg0@@639)))) (= (type (MapType8Select arg0@@639 arg1@@306 arg2@@167)) aVar1@@8)) :qid |funType:MapType8Select| :pattern ( (MapType8Select arg0@@639 arg1@@306 arg2@@167)) ))) (forall ((arg0@@640 T@U) (arg1@@307 T@U) (arg2@@168 T@U) (arg3@@108 T@U) ) (! (let ((aVar1@@9 (type arg3@@108))) (let ((aVar0@@6 (type arg1@@307))) (= (type (MapType8Store arg0@@640 arg1@@307 arg2@@168 arg3@@108)) (MapType8Type aVar0@@6 aVar1@@9)))) :qid |funType:MapType8Store| :pattern ( (MapType8Store arg0@@640 arg1@@307 arg2@@168 arg3@@108)) ))) (forall ((m@@84 T@U) (x0@@44 T@U) (x1@@38 T@U) (val@@45 T@U) ) (! (let ((aVar1@@10 (MapType8TypeInv1 (type m@@84)))) (=> (= (type val@@45) aVar1@@10) (= (MapType8Select (MapType8Store m@@84 x0@@44 x1@@38 val@@45) x0@@44 x1@@38) val@@45))) :qid |mapAx0:MapType8Select| :weight 0 ))) (and (and (forall ((val@@46 T@U) (m@@85 T@U) (x0@@45 T@U) (x1@@39 T@U) (y0@@36 T@U) (y1@@32 T@U) ) (!  (or (= x0@@45 y0@@36) (= (MapType8Select (MapType8Store m@@85 x0@@45 x1@@39 val@@46) y0@@36 y1@@32) (MapType8Select m@@85 y0@@36 y1@@32))) :qid |mapAx1:MapType8Select:0| :weight 0 )) (forall ((val@@47 T@U) (m@@86 T@U) (x0@@46 T@U) (x1@@40 T@U) (y0@@37 T@U) (y1@@33 T@U) ) (!  (or (= x1@@40 y1@@33) (= (MapType8Select (MapType8Store m@@86 x0@@46 x1@@40 val@@47) y0@@37 y1@@33) (MapType8Select m@@86 y0@@37 y1@@33))) :qid |mapAx1:MapType8Select:1| :weight 0 ))) (forall ((val@@48 T@U) (m@@87 T@U) (x0@@47 T@U) (x1@@41 T@U) (y0@@38 T@U) (y1@@34 T@U) ) (!  (or true (= (MapType8Select (MapType8Store m@@87 x0@@47 x1@@41 val@@48) y0@@38 y1@@34) (MapType8Select m@@87 y0@@38 y1@@34))) :qid |mapAx2:MapType8Select| :weight 0 )))) (forall ((arg0@@641 T@U) (arg1@@308 T@U) (arg2@@169 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#0| arg0@@641 arg1@@308 arg2@@169 arg3@@109)) (MapType8Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@641 arg1@@308 arg2@@169 arg3@@109)) ))))
(assert (forall ((|l#0@@21| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@62 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type |l#0@@21|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@62) refType)) (= (type $f@@4) (FieldType alpha@@11))) (= (U_2_bool (MapType8Select (|lambda#0| |l#0@@21| |l#1| |l#2| |l#3|) $o@@62 $f@@4))  (=> (and (not (= $o@@62 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@62) |l#2|))) |l#3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2941| :pattern ( (MapType8Select (|lambda#0| |l#0@@21| |l#1| |l#2| |l#3|) $o@@62 $f@@4)) )))
(assert (forall ((arg0@@642 T@U) (arg1@@309 T@U) (arg2@@170 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#1| arg0@@642 arg1@@309 arg2@@170 arg3@@110)) (MapType8Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@642 arg1@@309 arg2@@170 arg3@@110)) )))
(assert (forall ((|l#0@@22| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@63 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type |l#0@@22|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@63) refType)) (= (type $f@@5) (FieldType alpha@@12))) (= (U_2_bool (MapType8Select (|lambda#1| |l#0@@22| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@63 $f@@5))  (=> (and (not (= $o@@63 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@63) |l#2@@0|))) |l#3@@0|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2942| :pattern ( (MapType8Select (|lambda#1| |l#0@@22| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@63 $f@@5)) )))
(assert (forall ((arg0@@643 T@U) (arg1@@310 T@U) (arg2@@171 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#2| arg0@@643 arg1@@310 arg2@@171 arg3@@111)) (MapType8Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@643 arg1@@310 arg2@@171 arg3@@111)) )))
(assert (forall ((|l#0@@23| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@64 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type |l#0@@23|) refType) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@64) refType)) (= (type $f@@6) (FieldType alpha@@13))) (= (U_2_bool (MapType8Select (|lambda#2| |l#0@@23| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@64 $f@@6))  (=> (and (not (= $o@@64 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@64) |l#2@@1|))) |l#3@@1|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2943| :pattern ( (MapType8Select (|lambda#2| |l#0@@23| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@64 $f@@6)) )))
(assert (forall ((arg0@@644 T@U) (arg1@@311 T@U) (arg2@@172 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#3| arg0@@644 arg1@@311 arg2@@172 arg3@@112)) (MapType8Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@644 arg1@@311 arg2@@172 arg3@@112)) )))
(assert (forall ((|l#0@@24| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@65 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type |l#0@@24|) refType) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (type $o@@65) refType)) (= (type $f@@7) (FieldType alpha@@14))) (= (U_2_bool (MapType8Select (|lambda#3| |l#0@@24| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@65 $f@@7))  (=> (and (not (= $o@@65 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@65) |l#2@@2|))) |l#3@@2|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2944| :pattern ( (MapType8Select (|lambda#3| |l#0@@24| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@65 $f@@7)) )))
(assert (forall ((arg0@@645 T@U) (arg1@@312 T@U) (arg2@@173 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#4| arg0@@645 arg1@@312 arg2@@173 arg3@@113)) (MapType8Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@645 arg1@@312 arg2@@173 arg3@@113)) )))
(assert (forall ((|l#0@@25| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ($o@@66 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type |l#0@@25|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type $o@@66) refType)) (= (type $f@@8) (FieldType alpha@@15))) (= (U_2_bool (MapType8Select (|lambda#4| |l#0@@25| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@66 $f@@8))  (=> (and (not (= $o@@66 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@66) |l#2@@3|))) |l#3@@3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2945| :pattern ( (MapType8Select (|lambda#4| |l#0@@25| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@66 $f@@8)) )))
(assert (forall ((arg0@@646 T@U) (arg1@@313 T@U) (arg2@@174 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#5| arg0@@646 arg1@@313 arg2@@174 arg3@@114)) (MapType8Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@646 arg1@@313 arg2@@174 arg3@@114)) )))
(assert (forall ((|l#0@@26| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ($o@@67 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type |l#0@@26|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@67) refType)) (= (type $f@@9) (FieldType alpha@@16))) (= (U_2_bool (MapType8Select (|lambda#5| |l#0@@26| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@67 $f@@9))  (=> (and (not (= $o@@67 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@67) |l#2@@4|))) |l#3@@4|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2946| :pattern ( (MapType8Select (|lambda#5| |l#0@@26| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@67 $f@@9)) )))
(assert (forall ((arg0@@647 T@U) (arg1@@314 T@U) (arg2@@175 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#6| arg0@@647 arg1@@314 arg2@@175 arg3@@115)) (MapType8Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@647 arg1@@314 arg2@@175 arg3@@115)) )))
(assert (forall ((|l#0@@27| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ($o@@68 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type |l#0@@27|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (type $o@@68) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType8Select (|lambda#6| |l#0@@27| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@68 $f@@10))  (=> (and (not (= $o@@68 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@68) |l#2@@5|))) |l#3@@5|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2947| :pattern ( (MapType8Select (|lambda#6| |l#0@@27| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@68 $f@@10)) )))
(assert (forall ((arg0@@648 T@U) (arg1@@315 T@U) (arg2@@176 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#7| arg0@@648 arg1@@315 arg2@@176 arg3@@116)) (MapType8Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@648 arg1@@315 arg2@@176 arg3@@116)) )))
(assert (forall ((|l#0@@28| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ($o@@69 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type |l#0@@28|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@69) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType8Select (|lambda#7| |l#0@@28| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@69 $f@@11))  (=> (and (not (= $o@@69 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@69) |l#2@@6|))) |l#3@@6|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2948| :pattern ( (MapType8Select (|lambda#7| |l#0@@28| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@69 $f@@11)) )))
(assert (forall ((arg0@@649 T@U) (arg1@@316 T@U) (arg2@@177 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#8| arg0@@649 arg1@@316 arg2@@177 arg3@@117)) (MapType8Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@649 arg1@@316 arg2@@177 arg3@@117)) )))
(assert (forall ((|l#0@@29| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ($o@@70 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type |l#0@@29|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type $o@@70) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType8Select (|lambda#8| |l#0@@29| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@70 $f@@12))  (=> (and (not (= $o@@70 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@70) |l#2@@7|))) |l#3@@7|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2949| :pattern ( (MapType8Select (|lambda#8| |l#0@@29| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@70 $f@@12)) )))
(assert (forall ((arg0@@650 T@U) (arg1@@317 T@U) (arg2@@178 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#9| arg0@@650 arg1@@317 arg2@@178 arg3@@118)) (MapType8Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@650 arg1@@317 arg2@@178 arg3@@118)) )))
(assert (forall ((|l#0@@30| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ($o@@71 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type |l#0@@30|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@71) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType8Select (|lambda#9| |l#0@@30| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@71 $f@@13))  (=> (and (not (= $o@@71 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@71) |l#2@@8|))) |l#3@@8|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2950| :pattern ( (MapType8Select (|lambda#9| |l#0@@30| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@71 $f@@13)) )))
(assert (forall ((arg0@@651 T@U) (arg1@@318 T@U) (arg2@@179 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#10| arg0@@651 arg1@@318 arg2@@179 arg3@@119)) (MapType8Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@651 arg1@@318 arg2@@179 arg3@@119)) )))
(assert (forall ((|l#0@@31| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ($o@@72 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type |l#0@@31|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@72) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType8Select (|lambda#10| |l#0@@31| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@72 $f@@14))  (=> (and (not (= $o@@72 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@72) |l#2@@9|))) |l#3@@9|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2951| :pattern ( (MapType8Select (|lambda#10| |l#0@@31| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@72 $f@@14)) )))
(assert (forall ((arg0@@652 T@U) (arg1@@319 T@U) (arg2@@180 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#11| arg0@@652 arg1@@319 arg2@@180 arg3@@120)) (MapType8Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@652 arg1@@319 arg2@@180 arg3@@120)) )))
(assert (forall ((|l#0@@32| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ($o@@73 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type |l#0@@32|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type $o@@73) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType8Select (|lambda#11| |l#0@@32| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@73 $f@@15))  (=> (and (not (= $o@@73 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@73) |l#2@@10|))) |l#3@@10|)))) :qid |DafnyPreludebpl.129:1| :skolemid |2952| :pattern ( (MapType8Select (|lambda#11| |l#0@@32| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@73 $f@@15)) )))
(assert (forall ((|l#0@@33| T@U) (|l#1@@11| T@U) (|$l#0#heap#0| T@U) (|$l#0#i#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@33|) TyType) (= (type |l#1@@11|) (SeqType BoxType))) (= (type |$l#0#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0|) BoxType)) (= (MapType2Select (|lambda#12| |l#0@@33| |l#1@@11|) |$l#0#heap#0| |$l#0#i#0|) ($Box (bool_2_U (LinearMaybe.__default.has |l#0@@33| (|Seq#Index| |l#1@@11| (U_2_int ($Unbox intType |$l#0#i#0|)))))))) :qid |unknown.0:0| :skolemid |2953| :pattern ( (MapType2Select (|lambda#12| |l#0@@33| |l#1@@11|) |$l#0#heap#0| |$l#0#i#0|)) )))
(assert (forall ((|l#0@@34| T@U) (|l#1@@12| Int) (|l#2@@11| Int) (|$l#0#heap#0@@0| T@U) (|$l#0#i#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@34|) TyType) (= (type |$l#0#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#13| |l#0@@34| |l#1@@12| |l#2@@11|) |$l#0#heap#0@@0| |$l#0#i#0@@0|))  (and ($IsBox |$l#0#i#0@@0| |l#0@@34|) (and (<= |l#1@@12| (U_2_int ($Unbox intType |$l#0#i#0@@0|))) (< (U_2_int ($Unbox intType |$l#0#i#0@@0|)) |l#2@@11|))))) :qid |DafnyPreludebpl.22:1| :skolemid |2954| :pattern ( (MapType2Select (|lambda#13| |l#0@@34| |l#1@@12| |l#2@@11|) |$l#0#heap#0@@0| |$l#0#i#0@@0|)) )))
(assert (forall ((|l#0@@35| Bool) (|$l#0#o#0| T@U) ) (!  (=> (= (type |$l#0#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#14| |l#0@@35|) |$l#0#o#0|)) |l#0@@35|)) :qid |unknown.0:0| :skolemid |2955| :pattern ( (MapType0Select (|lambda#14| |l#0@@35|) |$l#0#o#0|)) )))
(assert (forall ((|l#0@@36| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#i#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@36|) (MapType0Type BoxType boolType)) (= (type |$l#0#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@1|) BoxType)) (= (MapType2Select (|lambda#15| |l#0@@36|) |$l#0#heap#0@@1| |$l#0#i#0@@1|) |l#0@@36|)) :qid |LinearSequencesdfy.68:25| :skolemid |2956| :pattern ( (MapType2Select (|lambda#15| |l#0@@36|) |$l#0#heap#0@@1| |$l#0#i#0@@1|)) )))
(assert (forall ((|l#0@@37| T@U) (|$l#0#ly#0| T@U) ) (!  (=> (and (= (type |l#0@@37|) HandleTypeType) (= (type |$l#0#ly#0|) LayerTypeType)) (= (MapType0Select (|lambda#16| |l#0@@37|) |$l#0#ly#0|) |l#0@@37|)) :qid |LinearSequencesdfy.68:25| :skolemid |2957| :pattern ( (MapType0Select (|lambda#16| |l#0@@37|) |$l#0#ly#0|)) )))
(assert (forall ((|l#0@@38| T@U) (|l#1@@13| T@U) (|l#2@@12| Int) (|$y#0| T@U) ) (!  (=> (and (and (= (type |l#0@@38|) TyType) (= (type |l#1@@13|) (MapType0Type BoxType intType))) (= (type |$y#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#22| |l#0@@38| |l#1@@13| |l#2@@12|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@38|) (> (U_2_int (MapType0Select |l#1@@13| |$y#0|)) |l#2@@12|)))) :qid |unknown.0:0| :skolemid |2958| :pattern ( (MapType0Select (|lambda#22| |l#0@@38| |l#1@@13| |l#2@@12|) |$y#0|)) )))
(assert (forall ((|l#0@@39| T@U) (|l#1@@14| T@U) (|$y#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@39|) TyType) (= (type |l#1@@14|) (MapType0Type BoxType boolType))) (= (type |$y#0@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#24| |l#0@@39| |l#1@@14|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@39|) (U_2_bool (MapType0Select |l#1@@14| |$y#0@@0|))))) :qid |unknown.0:0| :skolemid |2959| :pattern ( (MapType0Select (|lambda#24| |l#0@@39| |l#1@@14|) |$y#0@@0|)) )))
(assert (forall ((|l#0@@40| T@U) (|l#1@@15| T@U) (|l#2@@13| T@U) (|$w#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@40|) TyType) (= (type |l#1@@15|) (MapType0Type BoxType boolType))) (= (type |l#2@@13|) BoxType)) (= (type |$w#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#30| |l#0@@40| |l#1@@15| |l#2@@13|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@40|) (and (U_2_bool (MapType0Select |l#1@@15| |$w#0|)) (not (= |$w#0| |l#2@@13|)))))) :qid |unknown.0:0| :skolemid |2960| :pattern ( (MapType0Select (|lambda#30| |l#0@@40| |l#1@@15| |l#2@@13|) |$w#0|)) )))
(assert (forall ((|l#0@@41| T@U) (|$w#0@@0| T@U) ) (!  (=> (and (= (type |l#0@@41|) (MapType0Type BoxType BoxType)) (= (type |$w#0@@0|) BoxType)) (= (MapType0Select (|lambda#31| |l#0@@41|) |$w#0@@0|) (MapType0Select |l#0@@41| |$w#0@@0|))) :qid |MapRemovesdfy.22:44| :skolemid |2961| :pattern ( (MapType0Select (|lambda#31| |l#0@@41|) |$w#0@@0|)) )))
(assert (forall ((|l#0@@42| T@U) (|l#1@@16| T@U) (|$l#0#heap#0@@2| T@U) (|$l#0#i#0@@2| T@U) ) (!  (=> (and (and (and (= (type |l#0@@42|) (SeqType BoxType)) (= (type |l#1@@16|) (SeqType BoxType))) (= (type |$l#0#heap#0@@2|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@2|) BoxType)) (= (MapType2Select (|lambda#36| |l#0@@42| |l#1@@16|) |$l#0#heap#0@@2| |$l#0#i#0@@2|) ($Box (bool_2_U (F2__X__s.__default.mul__F2__X__digit |l#0@@42| |l#1@@16| (U_2_int ($Unbox intType |$l#0#i#0@@2|))))))) :qid |F2Xsdfy.67:31| :skolemid |2962| :pattern ( (MapType2Select (|lambda#36| |l#0@@42| |l#1@@16|) |$l#0#heap#0@@2| |$l#0#i#0@@2|)) )))
(assert (forall ((|l#0@@43| T@U) (|l#1@@17| Int) (|$l#0#heap#0@@3| T@U) (|$l#0#i#0@@3| T@U) ) (!  (=> (and (and (= (type |l#0@@43|) TyType) (= (type |$l#0#heap#0@@3|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@3|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#37| |l#0@@43| |l#1@@17|) |$l#0#heap#0@@3| |$l#0#i#0@@3|))  (and ($IsBox |$l#0#i#0@@3| |l#0@@43|) (<= |l#1@@17| (U_2_int ($Unbox intType |$l#0#i#0@@3|)))))) :qid |DafnyPreludebpl.22:1| :skolemid |2963| :pattern ( (MapType2Select (|lambda#37| |l#0@@43| |l#1@@17|) |$l#0#heap#0@@3| |$l#0#i#0@@3|)) )))
(assert (forall ((|l#0@@44| T@U) (|$l#0#heap#0@@4| T@U) (|$l#0#i#0@@4| T@U) ) (!  (=> (and (and (= (type |l#0@@44|) BoxType) (= (type |$l#0#heap#0@@4|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@4|) BoxType)) (= (MapType2Select (|lambda#46| |l#0@@44|) |$l#0#heap#0@@4| |$l#0#i#0@@4|) |l#0@@44|)) :qid |unknown.0:0| :skolemid |2964| :pattern ( (MapType2Select (|lambda#46| |l#0@@44|) |$l#0#heap#0@@4| |$l#0#i#0@@4|)) )))
(assert (forall ((|l#0@@45| T@U) (|$l#0#heap#0@@5| T@U) (|$l#0#i#0@@5| T@U) ) (!  (=> (and (and (= (type |l#0@@45|) TyType) (= (type |$l#0#heap#0@@5|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@5|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#47| |l#0@@45|) |$l#0#heap#0@@5| |$l#0#i#0@@5|)) ($IsBox |$l#0#i#0@@5| |l#0@@45|))) :qid |DafnyPreludebpl.22:1| :skolemid |2965| :pattern ( (MapType2Select (|lambda#47| |l#0@@45|) |$l#0#heap#0@@5| |$l#0#i#0@@5|)) )))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |s#0@@228| () T@U)
(declare-fun |len#0@@32| () Int)
(declare-fun $Heap@1 () T@U)
(declare-fun |##idx#4@0| () Int)
(declare-fun $nw@0 () T@U)
(declare-fun |i#0@1| () Int)
(declare-fun |newtype$check#6@0| () Int)
(declare-fun |##len#6@0| () Int)
(declare-fun |idx#0@1| () Int)
(declare-fun |##idx#3@0| () Int)
(declare-fun |newtype$check#5@0| () Int)
(declare-fun |##len#3@0| () Int)
(declare-fun |##idx#1@0| () Int)
(declare-fun |newtype$check#4@0| () Int)
(declare-fun |##len#1@0| () Int)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |newtype$check#3@0| () Int)
(declare-fun |newtype$check#1_0_0@0| () Int)
(declare-fun |##len#1_0_0@0| () Int)
(declare-fun |##idx#1_0_1@0| () Int)
(declare-fun |newtype$check#1_1_0@0| () Int)
(declare-fun |##len#1_1_0@0| () Int)
(declare-fun |newtype$check#1_1_1@0| () Int)
(declare-fun |##len#1_1_1@0| () Int)
(declare-fun |res#0@4| () T@U)
(declare-fun |res#0@0| () T@U)
(declare-fun |call4formal@i#0@0| () Int)
(declare-fun |idx3#0_0@1| () Int)
(declare-fun |res#0@3| () T@U)
(declare-fun |call4formal@i#0@0@@0| () Int)
(declare-fun |res#0@2| () T@U)
(declare-fun |res#0@1| () T@U)
(declare-fun |newtype$check#0_24@1| () Int)
(declare-fun |value#0_0@1| () T@U)
(declare-fun |newtype$check#0_26@1| () Int)
(declare-fun |idx4#0_0@1| () Int)
(declare-fun |je#0_0@1| () T@U)
(declare-fun |key#0_0@1| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |newtype$check#0_27@1| () Int)
(declare-fun |newtype$check#0_28@1| () Int)
(declare-fun |i#0@2| () Int)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun |newtype$check#0_21@1| () Int)
(declare-fun |newtype$check#0_22@1| () Int)
(declare-fun |idx1#0_0@1| () Int)
(declare-fun |newtype$check#0_14@1| () Int)
(declare-fun |newtype$check#0_16@1| () Int)
(declare-fun |idx2#0_0@1| () Int)
(declare-fun |call4formal@i#0| () Int)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |newtype$check#0_17@1| () Int)
(declare-fun |newtype$check#0_18@1| () Int)
(declare-fun |newtype$check#0_3@1| () Int)
(declare-fun |newtype$check#0_4@1| () Int)
(declare-fun |call4formal@i#0@@0| () Int)
(declare-fun |newtype$check#0_5@1| () Int)
(declare-fun |newtype$check#0_7@1| () Int)
(declare-fun |newtype$check#0_8@1| () Int)
(declare-fun |newtype$check#0_9@1| () Int)
(declare-fun |newtype$check#0_10@1| () Int)
(declare-fun |newtype$check#0_11@1| () Int)
(declare-fun |newtype$check#0_0@1| () Int)
(declare-fun |newtype$check#0_1@1| () Int)
(declare-fun |newtype$check#0_2@1| () Int)
(declare-fun |value#0_0@0| () T@U)
(declare-fun |idx4#0_0@0| () Int)
(declare-fun |je#0_0@0| () T@U)
(declare-fun |$rhs#0_0@0| () T@U)
(declare-fun |key#0_0@0| () T@U)
(declare-fun |idx2#0_0@0| () Int)
(declare-fun |$rhs##0_1@0| () Int)
(declare-fun |valueLen#0_0@0| () Int)
(declare-fun |idx3#0_0@0| () Int)
(declare-fun |idx1#0_0@0| () Int)
(declare-fun |$rhs##0_0@0| () Int)
(declare-fun |keyLen#0_0@0| () Int)
(declare-fun |idx0#0_0@0| () Int)
(declare-fun |newtype$check#1@0| () Int)
(declare-fun |newtype$check#2@0| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun $Heap@@49 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64 () T@U)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq () T@U)
(declare-fun StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq () T@U)
(declare-fun StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq () T@U)
(declare-fun StartFuelAssert_JournalRanges._default.parseHeader () T@U)
(declare-fun StartFuel_JournalRanges._default.WeightJournalEntries () T@U)
(declare-fun StartFuelAssert_JournalRanges._default.WeightJournalEntries () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun BaseFuel_Bits_s._default.bits_of_int () T@U)
(declare-fun StartFuelAssert_Bits_s._default.bits_of_int () T@U)
(declare-fun StartFuelAssert_Bits_s._default.zeroes () T@U)
(declare-fun StartFuelAssert_Bits_s._default.ones () T@U)
(declare-fun StartFuelAssert_F2_X_s._default.reverse () T@U)
(declare-fun StartFuelAssert_F2_X_s._default.xor () T@U)
(declare-fun StartFuelAssert_F2_X_s._default.mul_F2_X () T@U)
(declare-fun BaseFuel_F2_X_s._default.mm_crc32_u64 () T@U)
(declare-fun StartFuelAssert_F2_X_s._default.mm_crc32_u64 () T@U)
(declare-fun StartFuelAssert_CRC32_C._default.crc32_c () T@U)
(declare-fun StartFuelAssert_AsyncDisk._default.ChecksumChecksOut () T@U)
(declare-fun StartFuelAssert_AsyncDisk._default.splice () T@U)
(declare-fun StartFuelAssert_JournalBytes._default.JournalBlockOfByteSeq () T@U)
(declare-fun StartFuel_JournalBytes._default.JournalRangeOfByteSeq () T@U)
(declare-fun StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun |i#0@0| () Int)
(declare-fun |idx#0@0| () Int)
(declare-fun |res#0| () T@U)
(declare-fun |ar#0| () T@U)
(declare-fun |i#0@@130| () Int)
(declare-fun |idx#0@@8| () Int)
(declare-fun |idx0#0_0| () Int)
(declare-fun |idx1#0_0| () Int)
(declare-fun |keyLen#0_0| () Int)
(declare-fun |$rhs##0_0| () Int)
(declare-fun |key#0_0| () T@U)
(declare-fun |idx2#0_0| () Int)
(declare-fun |valueLen#0_0| () Int)
(declare-fun |$rhs##0_1| () Int)
(declare-fun |idx3#0_0| () Int)
(declare-fun |value#0_0| () T@U)
(declare-fun |idx4#0_0| () Int)
(declare-fun |je#0_0| () T@U)
(declare-fun |$rhs#0_0| () T@U)
(declare-fun $FunctionContextHeight () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type |s#0@@228|) (SeqType BoxType)) (= (type |value#0_0@1|) (SeqType BoxType))) (= (type |je#0_0@1|) DatatypeTypeType)) (= (type |key#0_0@1|) (SeqType BoxType))) (= (type $nw@0) refType)) (= (type $_Frame@0) (MapType8Type refType boolType))) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type |res#0@4|) DatatypeTypeType)) (= (type |res#0@1|) DatatypeTypeType)) (= (type |res#0@2|) DatatypeTypeType)) (= (type |res#0@3|) DatatypeTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) LayerTypeType)) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type |res#0@0|) DatatypeTypeType)) (= (type |value#0_0@0|) (SeqType BoxType))) (= (type |je#0_0@0|) DatatypeTypeType)) (= (type |$rhs#0_0@0|) DatatypeTypeType)) (= (type |key#0_0@0|) (SeqType BoxType))) (= (type $Heap@@49) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) LayerTypeType)) (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) LayerTypeType)) (= (type StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) LayerTypeType)) (= (type StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) LayerTypeType)) (= (type StartFuelAssert_JournalRanges._default.parseHeader) LayerTypeType)) (= (type StartFuel_JournalRanges._default.WeightJournalEntries) LayerTypeType)) (= (type StartFuelAssert_JournalRanges._default.WeightJournalEntries) LayerTypeType)) (= (type StartFuelAssert_MapRemove_s._default.MapRemove1) LayerTypeType)) (= (type BaseFuel_Bits_s._default.bits_of_int) LayerTypeType)) (= (type StartFuelAssert_Bits_s._default.bits_of_int) LayerTypeType)) (= (type StartFuelAssert_Bits_s._default.zeroes) LayerTypeType)) (= (type StartFuelAssert_Bits_s._default.ones) LayerTypeType)) (= (type StartFuelAssert_F2_X_s._default.reverse) LayerTypeType)) (= (type StartFuelAssert_F2_X_s._default.xor) LayerTypeType)) (= (type StartFuelAssert_F2_X_s._default.mul_F2_X) LayerTypeType)) (= (type BaseFuel_F2_X_s._default.mm_crc32_u64) LayerTypeType)) (= (type StartFuelAssert_F2_X_s._default.mm_crc32_u64) LayerTypeType)) (= (type StartFuelAssert_CRC32_C._default.crc32_c) LayerTypeType)) (= (type StartFuelAssert_AsyncDisk._default.ChecksumChecksOut) LayerTypeType)) (= (type StartFuelAssert_AsyncDisk._default.splice) LayerTypeType)) (= (type StartFuelAssert_JournalBytes._default.JournalBlockOfByteSeq) LayerTypeType)) (= (type StartFuel_JournalBytes._default.JournalRangeOfByteSeq) LayerTypeType)) (= (type StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq) LayerTypeType)) (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)) (= (type |res#0|) DatatypeTypeType)) (= (type |ar#0|) refType)) (= (type |key#0_0|) (SeqType BoxType))) (= (type |value#0_0|) (SeqType BoxType))) (= (type |je#0_0|) DatatypeTypeType)) (= (type |$rhs#0_0|) DatatypeTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$JournalistParsingImpl.__default.ParseJournalRangeOfBytes)
(assert (not (=> (= (ControlFlow 0 0) 292143) (let ((anon12_correct true)) (let ((anon41_Else_correct  (=> (and (not (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8)))) (= (ControlFlow 0 68866) 68870)) anon12_correct))) (let ((anon41_Then_correct  (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8))) (=> (and (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) ($IsAlloc (int_2_U |len#0@@32|) TInt $Heap@1)) (and (= |##idx#4@0| (LitInt 8)) ($IsAlloc (int_2_U |##idx#4@0|) TInt $Heap@1))) (and (=> (= (ControlFlow 0 68864) (- 0 298128)) (<= (LitInt 0) |##idx#4@0|)) (and (=> (= (ControlFlow 0 68864) (- 0 298135)) (<= |##idx#4@0| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68864) (- 0 298141)) (<= (LitInt 0) |len#0@@32|)) (=> (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)) (and (=> (= (ControlFlow 0 68864) (- 0 298158)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8)))) (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8))) (and (=> (= (ControlFlow 0 68864) (- 0 298174)) (not (= $nw@0 null))) (=> (not (= $nw@0 null)) (and (=> (= (ControlFlow 0 68864) (- 0 298179)) (and (<= 0 |i#0@1|) (<= |i#0@1| (_System.array.Length $nw@0)))) (=> (= |newtype$check#6@0| (- |len#0@@32| |i#0@1|)) (and (=> (= (ControlFlow 0 68864) (- 0 298203)) (and (<= (LitInt 0) |newtype$check#6@0|) (< |newtype$check#6@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#6@0|) (< |newtype$check#6@0| 18446744073709551616)) (=> (and (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) (= |##len#6@0| (- |len#0@@32| |i#0@1|))) (and ($IsAlloc (int_2_U |##len#6@0|) TInt $Heap@1) ($IsAlloc (int_2_U |idx#0@1|) TInt $Heap@1))) (and (=> (= (ControlFlow 0 68864) (- 0 298253)) (<= (LitInt 0) |idx#0@1|)) (and (=> (= (ControlFlow 0 68864) (- 0 298260)) (<= |idx#0@1| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68864) (- 0 298266)) (<= (LitInt 0) |##len#6@0|)) (=> (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (and (=> (= (ControlFlow 0 68864) (- 0 298283)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))) (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (=> (= (ControlFlow 0 68864) 68870) anon12_correct)))))))))))))))))))))))) (let ((anon40_Then_correct  (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (=> (and (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) ($IsAlloc (int_2_U |len#0@@32|) TInt $Heap@1)) (and (= |##idx#3@0| (LitInt 8)) ($IsAlloc (int_2_U |##idx#3@0|) TInt $Heap@1))) (and (=> (= (ControlFlow 0 68862) (- 0 298028)) (<= (LitInt 0) |##idx#3@0|)) (and (=> (= (ControlFlow 0 68862) (- 0 298035)) (<= |##idx#3@0| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68862) (- 0 298041)) (<= (LitInt 0) |len#0@@32|)) (=> (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)) (and (=> (= (ControlFlow 0 68862) 68864) anon41_Then_correct) (=> (= (ControlFlow 0 68862) 68866) anon41_Else_correct)))))))))) (let ((anon40_Else_correct  (=> (and (not (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))) (= (ControlFlow 0 68868) 68870)) anon12_correct))) (let ((anon9_correct  (=> (and (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (=> (U_2_bool (Lit (bool_2_U true))) (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8))))) (and (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (and true (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8))))) (= |newtype$check#5@0| (- |len#0@@32| |i#0@1|)))) (and (=> (= (ControlFlow 0 68855) (- 0 297896)) (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| 18446744073709551616)) (=> (and (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) (= |##len#3@0| (- |len#0@@32| |i#0@1|))) (and ($IsAlloc (int_2_U |##len#3@0|) TInt $Heap@1) ($IsAlloc (int_2_U |idx#0@1|) TInt $Heap@1))) (and (=> (= (ControlFlow 0 68855) (- 0 297946)) (<= (LitInt 0) |idx#0@1|)) (and (=> (= (ControlFlow 0 68855) (- 0 297953)) (<= |idx#0@1| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68855) (- 0 297959)) (<= (LitInt 0) |##len#3@0|)) (=> (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (and (=> (= (ControlFlow 0 68855) 68862) anon40_Then_correct) (=> (= (ControlFlow 0 68855) 68868) anon40_Else_correct)))))))))))) (let ((anon39_Else_correct  (=> (and (not (U_2_bool (Lit (bool_2_U true)))) (= (ControlFlow 0 68846) 68855)) anon9_correct))) (let ((anon39_Then_correct  (=> (U_2_bool (Lit (bool_2_U true))) (=> (and (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) ($IsAlloc (int_2_U |len#0@@32|) TInt $Heap@1)) (and (= |##idx#1@0| (LitInt 8)) ($IsAlloc (int_2_U |##idx#1@0|) TInt $Heap@1))) (and (=> (= (ControlFlow 0 68844) (- 0 297765)) (<= (LitInt 0) |##idx#1@0|)) (and (=> (= (ControlFlow 0 68844) (- 0 297772)) (<= |##idx#1@0| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68844) (- 0 297778)) (<= (LitInt 0) |len#0@@32|)) (=> (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)) (= (ControlFlow 0 68844) 68855)) anon9_correct)))))))) (let ((anon38_Then_correct  (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (and (=> (= (ControlFlow 0 68842) 68844) anon39_Then_correct) (=> (= (ControlFlow 0 68842) 68846) anon39_Else_correct))))) (let ((anon38_Else_correct  (=> (and (not (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))) (= (ControlFlow 0 68848) 68855)) anon9_correct))) (let ((anon6_correct  (=> (and (<= (LitInt 0) |idx#0@1|) (<= |idx#0@1| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68835) (- 0 297586)) (not (= $nw@0 null))) (=> (and (= (_System.array.Length $nw@0) |len#0@@32|) (= |newtype$check#4@0| (- |len#0@@32| |i#0@1|))) (and (=> (= (ControlFlow 0 68835) (- 0 297611)) (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| 18446744073709551616)) (=> (and (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) (= |##len#1@0| (- |len#0@@32| |i#0@1|))) (and ($IsAlloc (int_2_U |##len#1@0|) TInt $Heap@1) ($IsAlloc (int_2_U |idx#0@1|) TInt $Heap@1))) (and (=> (= (ControlFlow 0 68835) (- 0 297661)) (<= (LitInt 0) |idx#0@1|)) (and (=> (= (ControlFlow 0 68835) (- 0 297668)) (<= |idx#0@1| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68835) (- 0 297674)) (<= (LitInt 0) |##len#1@0|)) (=> (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (and (=> (= (ControlFlow 0 68835) 68842) anon38_Then_correct) (=> (= (ControlFlow 0 68835) 68848) anon38_Else_correct)))))))))))))) (let ((anon37_Else_correct  (=> (and (< |idx#0@1| (LitInt 0)) (= (ControlFlow 0 68828) 68835)) anon6_correct))) (let ((anon37_Then_correct  (=> (and (<= (LitInt 0) |idx#0@1|) (= (ControlFlow 0 68826) 68835)) anon6_correct))) (let ((anon4_correct  (=> (and (<= (LitInt 0) |i#0@1|) (<= |i#0@1| |len#0@@32|)) (and (=> (= (ControlFlow 0 68824) 68826) anon37_Then_correct) (=> (= (ControlFlow 0 68824) 68828) anon37_Else_correct))))) (let ((anon36_Else_correct  (=> (and (< |i#0@1| (LitInt 0)) (= (ControlFlow 0 68817) 68824)) anon4_correct))) (let ((anon36_Then_correct  (=> (and (<= (LitInt 0) |i#0@1|) (= (ControlFlow 0 68815) 68824)) anon4_correct))) (let ((anon35_Then_correct  (=> (and (not |$w$loop#0@0|) (= |newtype$check#3@0| (LitInt 0))) (and (=> (= (ControlFlow 0 68813) (- 0 294848)) (and (<= (LitInt 0) |newtype$check#3@0|) (< |newtype$check#3@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#3@0|) (< |newtype$check#3@0| 18446744073709551616)) (and (=> (= (ControlFlow 0 68813) 68815) anon36_Then_correct) (=> (= (ControlFlow 0 68813) 68817) anon36_Else_correct))))))) (let ((anon50_Then_correct  (=> (not (= $nw@0 null)) (=> (and (and (<= 0 |i#0@1|) (<= |i#0@1| (_System.array.Length $nw@0))) (= |newtype$check#1_0_0@0| (- |len#0@@32| |i#0@1|))) (=> (and (and (and (and (<= (LitInt 0) |newtype$check#1_0_0@0|) (< |newtype$check#1_0_0@0| 18446744073709551616)) (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) (= |##len#1_0_0@0| (- |len#0@@32| |i#0@1|)))) (and (and ($IsAlloc (int_2_U |##len#1_0_0@0|) TInt $Heap@1) ($IsAlloc (int_2_U |idx#0@1|) TInt $Heap@1)) (and (<= (LitInt 0) |idx#0@1|) (<= |idx#0@1| (|Seq#Length| |s#0@@228|))))) (and (and (and (<= (LitInt 0) |##len#1_0_0@0|) (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (and (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))) (and (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) ($IsAlloc (int_2_U |len#0@@32|) TInt $Heap@1)) (and (= |##idx#1_0_1@0| (LitInt 8)) ($IsAlloc (int_2_U |##idx#1_0_1@0|) TInt $Heap@1))))) (and (=> (= (ControlFlow 0 68948) (- 0 297385)) (<= (LitInt 0) |##idx#1_0_1@0|)) (and (=> (= (ControlFlow 0 68948) (- 0 297392)) (<= |##idx#1_0_1@0| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68948) (- 0 297398)) (<= (LitInt 0) |len#0@@32|)) (=> (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)) (and (=> (= (ControlFlow 0 68948) (- 0 297415)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8)))) (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8))) (=> (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)) (= (ControlFlow 0 68948) (- 0 297441))) (|Seq#Equal| (|Seq#Append| (|Seq#Take| (|Seq#FromArray| $Heap@1 $nw@0) |i#0@1|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)))) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8))))))))))))))))) (let ((anon49_Then_correct  (=> (and (not (= $nw@0 null)) (= |newtype$check#1_1_0@0| (- |len#0@@32| |i#0@1|))) (and (=> (= (ControlFlow 0 68944) (- 0 296880)) (and (<= (LitInt 0) |newtype$check#1_1_0@0|) (< |newtype$check#1_1_0@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#1_1_0@0|) (< |newtype$check#1_1_0@0| 18446744073709551616)) (=> (and (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) (= |##len#1_1_0@0| (- |len#0@@32| |i#0@1|))) (and ($IsAlloc (int_2_U |##len#1_1_0@0|) TInt $Heap@1) ($IsAlloc (int_2_U |idx#0@1|) TInt $Heap@1))) (and (=> (= (ControlFlow 0 68944) (- 0 296930)) (<= (LitInt 0) |idx#0@1|)) (and (=> (= (ControlFlow 0 68944) (- 0 296937)) (<= |idx#0@1| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68944) (- 0 296943)) (<= (LitInt 0) |##len#1_1_0@0|)) (=> (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (and (=> (= (ControlFlow 0 68944) (- 0 296960)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))) (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (=> (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (and (=> (= (ControlFlow 0 68944) (- 0 296986)) (|Seq#Equal| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))) (|Seq#Empty| BoxType))) (=> (|Seq#Equal| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))) (|Seq#Empty| BoxType)) (and (=> (= (ControlFlow 0 68944) (- 0 297040)) (not (= $nw@0 null))) (=> (not (= $nw@0 null)) (and (=> (= (ControlFlow 0 68944) (- 0 297045)) (and (<= 0 |i#0@1|) (<= |i#0@1| (_System.array.Length $nw@0)))) (=> (= |newtype$check#1_1_1@0| (- |len#0@@32| |i#0@1|)) (and (=> (= (ControlFlow 0 68944) (- 0 297069)) (and (<= (LitInt 0) |newtype$check#1_1_1@0|) (< |newtype$check#1_1_1@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#1_1_1@0|) (< |newtype$check#1_1_1@0| 18446744073709551616)) (=> (and (and ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@1) (= |##len#1_1_1@0| (- |len#0@@32| |i#0@1|))) (and ($IsAlloc (int_2_U |##len#1_1_1@0|) TInt $Heap@1) ($IsAlloc (int_2_U |idx#0@1|) TInt $Heap@1))) (and (=> (= (ControlFlow 0 68944) (- 0 297119)) (<= (LitInt 0) |idx#0@1|)) (and (=> (= (ControlFlow 0 68944) (- 0 297126)) (<= |idx#0@1| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68944) (- 0 297132)) (<= (LitInt 0) |##len#1_1_1@0|)) (=> (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (and (=> (= (ControlFlow 0 68944) (- 0 297149)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))) (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (=> (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (= (ControlFlow 0 68944) (- 0 297175))) (|Seq#Equal| (|Seq#FromArray| $Heap@1 $nw@0) (|Seq#Append| (|Seq#Take| (|Seq#FromArray| $Heap@1 $nw@0) |i#0@1|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)))))))))))))))))))))))))))))))))) (let ((anon48_Then_correct  (=> (= (ControlFlow 0 68940) (- 0 296853)) (not (= $nw@0 null))))) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 292060) (- 0 298532)) (|Options.Option#Equal| |res#0@4| (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@228| |len#0@@32|))) (=> (|Options.Option#Equal| |res#0@4| (JournalRanges.__default.parseJournalRangeOfBytes |s#0@@228| |len#0@@32|)) (=> (= (ControlFlow 0 292060) (- 0 298541)) (=> (Options.Option.Some_q |res#0@4|) (<= (|Seq#Length| ($Unbox (SeqType BoxType) (Options.Option.value |res#0@4|))) (|Seq#Length| |s#0@@228|)))))))) (let ((anon50_Else_correct  (=> (|Seq#Equal| (|Seq#FromArray| $Heap@1 $nw@0) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8))))) (=> (and (= |res#0@4| |res#0@0|) (= (ControlFlow 0 68950) 292060)) GeneratedUnifiedExit_correct)))) (let ((anon42_Then_correct  (=> (<= |len#0@@32| |i#0@1|) (and (=> (= (ControlFlow 0 68881) (- 0 294872)) (not (= $nw@0 null))) (=> (not (= $nw@0 null)) (=> (= |res#0@0| (|#Options.Option.Some| ($Box (|Seq#FromArray| $Heap@1 $nw@0)))) (and (and (and (=> (= (ControlFlow 0 68881) 68940) anon48_Then_correct) (=> (= (ControlFlow 0 68881) 68944) anon49_Then_correct)) (=> (= (ControlFlow 0 68881) 68948) anon50_Then_correct)) (=> (= (ControlFlow 0 68881) 68950) anon50_Else_correct)))))))) (let ((anon47_Then_correct  (=> (and (and (not (and (<= |call4formal@i#0@0| (LitInt ValueType.__default.MaxLen)) (<= |call4formal@i#0@0| (- (|Seq#Length| |s#0@@228|) |idx3#0_0@1|)))) (= |res#0@3| (Lit |#Options.Option.None|))) (and (= |res#0@4| |res#0@3|) (= (ControlFlow 0 68930) 292060))) GeneratedUnifiedExit_correct))) (let ((anon45_Then_correct  (=> (and (and (not (and (<= (+ (+ 4 |call4formal@i#0@0@@0|) 4) (- (|Seq#Length| |s#0@@228|) |idx#0@1|)) (<= |call4formal@i#0@0@@0| (LitInt KeyType.__default.MaxLen)))) (= |res#0@2| (Lit |#Options.Option.None|))) (and (= |res#0@4| |res#0@2|) (= (ControlFlow 0 68910) 292060))) GeneratedUnifiedExit_correct))) (let ((anon43_Then_correct  (=> (and (and (not (<= (LitInt 4) (- (|Seq#Length| |s#0@@228|) |idx#0@1|))) (= |res#0@1| (Lit |#Options.Option.None|))) (and (= |res#0@4| |res#0@1|) (= (ControlFlow 0 68890) 292060))) GeneratedUnifiedExit_correct))) (let ((anon47_Else_correct  (=> (and (<= |call4formal@i#0@0| (LitInt ValueType.__default.MaxLen)) (<= |call4formal@i#0@0| (- (|Seq#Length| |s#0@@228|) |idx3#0_0@1|))) (and (=> (= (ControlFlow 0 68932) (- 0 296151)) (and (<= 0 |idx3#0_0@1|) (<= |idx3#0_0@1| (|Seq#Length| |s#0@@228|)))) (=> (and (<= 0 |idx3#0_0@1|) (<= |idx3#0_0@1| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68932) (- 0 296167)) (and (<= (LitInt 0) |call4formal@i#0@0|) (< |call4formal@i#0@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |call4formal@i#0@0|) (< |call4formal@i#0@0| 18446744073709551616)) (=> (= |newtype$check#0_24@1| (+ |idx3#0_0@1| |call4formal@i#0@0|)) (and (=> (= (ControlFlow 0 68932) (- 0 296191)) (and (<= (LitInt 0) |newtype$check#0_24@1|) (< |newtype$check#0_24@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_24@1|) (< |newtype$check#0_24@1| 18446744073709551616)) (and (=> (= (ControlFlow 0 68932) (- 0 296205)) (and (<= |idx3#0_0@1| (+ |idx3#0_0@1| |call4formal@i#0@0|)) (<= (+ |idx3#0_0@1| |call4formal@i#0@0|) (|Seq#Length| |s#0@@228|)))) (=> (and (<= |idx3#0_0@1| (+ |idx3#0_0@1| |call4formal@i#0@0|)) (<= (+ |idx3#0_0@1| |call4formal@i#0@0|) (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68932) (- 0 296226)) ($Is (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx3#0_0@1| |call4formal@i#0@0|)) |idx3#0_0@1|) Tclass.ValueType.Value)) (=> ($Is (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx3#0_0@1| |call4formal@i#0@0|)) |idx3#0_0@1|) Tclass.ValueType.Value) (=> (= |value#0_0@1| (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx3#0_0@1| |call4formal@i#0@0|)) |idx3#0_0@1|)) (and (=> (= (ControlFlow 0 68932) (- 0 296264)) (and (<= (LitInt 0) |call4formal@i#0@0|) (< |call4formal@i#0@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |call4formal@i#0@0|) (< |call4formal@i#0@0| 18446744073709551616)) (=> (= |newtype$check#0_26@1| (+ |idx3#0_0@1| |call4formal@i#0@0|)) (and (=> (= (ControlFlow 0 68932) (- 0 296288)) (and (<= (LitInt 0) |newtype$check#0_26@1|) (< |newtype$check#0_26@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_26@1|) (< |newtype$check#0_26@1| 18446744073709551616)) (=> (and (= |idx4#0_0@1| (+ |idx3#0_0@1| |call4formal@i#0@0|)) (= |je#0_0@1| (|#Journal.JournalEntry.JournalInsert| |key#0_0@1| |value#0_0@1|))) (and (=> (= (ControlFlow 0 68932) (- 0 296332)) (not (= $nw@0 null))) (=> (not (= $nw@0 null)) (and (=> (= (ControlFlow 0 68932) (- 0 296337)) (and (<= 0 |i#0@1|) (< |i#0@1| (_System.array.Length $nw@0)))) (=> (and (<= 0 |i#0@1|) (< |i#0@1| (_System.array.Length $nw@0))) (and (=> (= (ControlFlow 0 68932) (- 0 296352)) (U_2_bool (MapType8Select $_Frame@0 $nw@0 (IndexField |i#0@1|)))) (=> (U_2_bool (MapType8Select $_Frame@0 $nw@0 (IndexField |i#0@1|))) (=> (= $Heap@4 (MapType0Store $Heap@3 $nw@0 (MapType1Store (MapType0Select $Heap@3 $nw@0) (IndexField |i#0@1|) ($Box |je#0_0@1|)))) (=> (and ($IsGoodHeap $Heap@4) (= |newtype$check#0_27@1| (LitInt 1))) (and (=> (= (ControlFlow 0 68932) (- 0 296396)) (and (<= (LitInt 0) |newtype$check#0_27@1|) (< |newtype$check#0_27@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_27@1|) (< |newtype$check#0_27@1| 18446744073709551616)) (=> (= |newtype$check#0_28@1| (+ |i#0@1| 1)) (and (=> (= (ControlFlow 0 68932) (- 0 296421)) (and (<= (LitInt 0) |newtype$check#0_28@1|) (< |newtype$check#0_28@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_28@1|) (< |newtype$check#0_28@1| 18446744073709551616)) (=> (= |i#0@2| (+ |i#0@1| 1)) (and (=> (= (ControlFlow 0 68932) (- 0 296458)) (or (<= 0 |$decr$loop#00@1|) (= (- |len#0@@32| |i#0@2|) |$decr$loop#00@1|))) (=> (or (<= 0 |$decr$loop#00@1|) (= (- |len#0@@32| |i#0@2|) |$decr$loop#00@1|)) (and (=> (= (ControlFlow 0 68932) (- 0 296473)) (< (- |len#0@@32| |i#0@2|) |$decr$loop#00@1|)) (=> (< (- |len#0@@32| |i#0@2|) |$decr$loop#00@1|) (=> (and (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|) (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (=> (U_2_bool (Lit (bool_2_U true))) (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8))))) (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|) (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)) (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8))) (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)) (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|))))))) (and (=> (= (ControlFlow 0 68932) (- 0 296617)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@2|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@2|)) (and (=> (= (ControlFlow 0 68932) (- 0 296627)) (=> |$w$loop#0@0| (<= |i#0@2| |len#0@@32|))) (=> (=> |$w$loop#0@0| (<= |i#0@2| |len#0@@32|)) (and (=> (= (ControlFlow 0 68932) (- 0 296635)) (=> |$w$loop#0@0| (<= (LitInt 0) |idx4#0_0@1|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |idx4#0_0@1|)) (and (=> (= (ControlFlow 0 68932) (- 0 296645)) (=> |$w$loop#0@0| (<= |idx4#0_0@1| (|Seq#Length| |s#0@@228|)))) (=> (=> |$w$loop#0@0| (<= |idx4#0_0@1| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68932) (- 0 296655)) (=> |$w$loop#0@0| (= (_System.array.Length $nw@0) |len#0@@32|))) (=> (=> |$w$loop#0@0| (= (_System.array.Length $nw@0) |len#0@@32|)) (and (=> (= (ControlFlow 0 68932) (- 0 296665)) (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (U_2_bool (Lit (bool_2_U true)))))) (=> (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (U_2_bool (Lit (bool_2_U true))))) (and (=> (= (ControlFlow 0 68932) (- 0 296690)) (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))))) (=> (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8))))) (and (=> (= (ControlFlow 0 68932) (- 0 296729)) (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))))) (=> (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8))))) (and (=> (= (ControlFlow 0 68932) (- 0 296768)) (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))) (|Seq#Append| (|Seq#Take| (|Seq#FromArray| $Heap@4 $nw@0) |i#0@2|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)))))))) (=> (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))) (|Seq#Append| (|Seq#Take| (|Seq#FromArray| $Heap@4 $nw@0) |i#0@2|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| (- |len#0@@32| |i#0@2|) |idx4#0_0@1|))))))) (=> (= (ControlFlow 0 68932) (- 0 296844)) (=> |$w$loop#0@0| (<= |i#0@2| |idx4#0_0@1|))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon25_correct  (=> |ValueType.__default.MaxLen#canCall| (and (=> (= (ControlFlow 0 68929) 68930) anon47_Then_correct) (=> (= (ControlFlow 0 68929) 68932) anon47_Else_correct))))) (let ((anon46_Else_correct  (=> (and (< (LitInt ValueType.__default.MaxLen) |call4formal@i#0@0|) (= (ControlFlow 0 68923) 68929)) anon25_correct))) (let ((anon46_Then_correct  (=> (<= |call4formal@i#0@0| (LitInt ValueType.__default.MaxLen)) (and (=> (= (ControlFlow 0 68921) (- 0 296019)) (and (<= (LitInt 0) |call4formal@i#0@0|) (< |call4formal@i#0@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |call4formal@i#0@0|) (< |call4formal@i#0@0| 18446744073709551616)) (=> (= |newtype$check#0_21@1| (|Seq#Length| |s#0@@228|)) (and (=> (= (ControlFlow 0 68921) (- 0 296043)) (and (<= (LitInt 0) |newtype$check#0_21@1|) (< |newtype$check#0_21@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_21@1|) (< |newtype$check#0_21@1| 18446744073709551616)) (=> (= |newtype$check#0_22@1| (- (|Seq#Length| |s#0@@228|) |idx3#0_0@1|)) (and (=> (= (ControlFlow 0 68921) (- 0 296070)) (and (<= (LitInt 0) |newtype$check#0_22@1|) (< |newtype$check#0_22@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_22@1|) (< |newtype$check#0_22@1| 18446744073709551616)) (=> (= (ControlFlow 0 68921) 68929) anon25_correct)))))))))))) (let ((anon45_Else_correct  (=> (and (<= (+ (+ 4 |call4formal@i#0@0@@0|) 4) (- (|Seq#Length| |s#0@@228|) |idx#0@1|)) (<= |call4formal@i#0@0@@0| (LitInt KeyType.__default.MaxLen))) (and (=> (= (ControlFlow 0 68912) (- 0 295593)) (and (<= 0 |idx1#0_0@1|) (<= |idx1#0_0@1| (|Seq#Length| |s#0@@228|)))) (=> (and (<= 0 |idx1#0_0@1|) (<= |idx1#0_0@1| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68912) (- 0 295609)) (and (<= (LitInt 0) |call4formal@i#0@0@@0|) (< |call4formal@i#0@0@@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |call4formal@i#0@0@@0|) (< |call4formal@i#0@0@@0| 18446744073709551616)) (=> (= |newtype$check#0_14@1| (+ |idx1#0_0@1| |call4formal@i#0@0@@0|)) (and (=> (= (ControlFlow 0 68912) (- 0 295633)) (and (<= (LitInt 0) |newtype$check#0_14@1|) (< |newtype$check#0_14@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_14@1|) (< |newtype$check#0_14@1| 18446744073709551616)) (and (=> (= (ControlFlow 0 68912) (- 0 295647)) (and (<= |idx1#0_0@1| (+ |idx1#0_0@1| |call4formal@i#0@0@@0|)) (<= (+ |idx1#0_0@1| |call4formal@i#0@0@@0|) (|Seq#Length| |s#0@@228|)))) (=> (and (<= |idx1#0_0@1| (+ |idx1#0_0@1| |call4formal@i#0@0@@0|)) (<= (+ |idx1#0_0@1| |call4formal@i#0@0@@0|) (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68912) (- 0 295668)) ($Is (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx1#0_0@1| |call4formal@i#0@0@@0|)) |idx1#0_0@1|) Tclass.KeyType.Key)) (=> ($Is (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx1#0_0@1| |call4formal@i#0@0@@0|)) |idx1#0_0@1|) Tclass.KeyType.Key) (=> (= |key#0_0@1| (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx1#0_0@1| |call4formal@i#0@0@@0|)) |idx1#0_0@1|)) (and (=> (= (ControlFlow 0 68912) (- 0 295706)) (and (<= (LitInt 0) |call4formal@i#0@0@@0|) (< |call4formal@i#0@0@@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |call4formal@i#0@0@@0|) (< |call4formal@i#0@0@@0| 18446744073709551616)) (=> (= |newtype$check#0_16@1| (+ |idx1#0_0@1| |call4formal@i#0@0@@0|)) (and (=> (= (ControlFlow 0 68912) (- 0 295730)) (and (<= (LitInt 0) |newtype$check#0_16@1|) (< |newtype$check#0_16@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_16@1|) (< |newtype$check#0_16@1| 18446744073709551616)) (=> (= |idx2#0_0@1| (+ |idx1#0_0@1| |call4formal@i#0@0@@0|)) (and (=> (= (ControlFlow 0 68912) (- 0 295769)) (forall (($o@@74 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (= (type $o@@74) refType) (= (type $f@@16) (FieldType alpha@@23))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@74 $f@@16)))) :qid |JournalistParsingImplidfy.221:37| :skolemid |1488| :no-pattern (type $o@@74) :no-pattern (type $f@@16) :no-pattern (U_2_int $o@@74) :no-pattern (U_2_bool $o@@74) :no-pattern (U_2_int $f@@16) :no-pattern (U_2_bool $f@@16) ))) (=> (forall (($o@@75 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (= (type $o@@75) refType) (= (type $f@@17) (FieldType alpha@@24))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@75 $f@@17)))) :qid |JournalistParsingImplidfy.221:37| :skolemid |1488| :no-pattern (type $o@@75) :no-pattern (type $f@@17) :no-pattern (U_2_int $o@@75) :no-pattern (U_2_bool $o@@75) :no-pattern (U_2_int $f@@17) :no-pattern (U_2_bool $f@@17) )) (=> (and (<= (LitInt 0) |call4formal@i#0|) (< |call4formal@i#0| 4294967296)) (and (=> (= (ControlFlow 0 68912) (- 0 295788)) (<= (LitInt 0) |idx2#0_0@1|)) (=> (<= (LitInt 0) |idx2#0_0@1|) (and (=> (= (ControlFlow 0 68912) (- 0 295795)) (<= (+ |idx2#0_0@1| 4) (|Seq#Length| |s#0@@228|))) (=> (<= (+ |idx2#0_0@1| 4) (|Seq#Length| |s#0@@228|)) (and (=> (= (ControlFlow 0 68912) (- 0 295805)) (< (|Seq#Length| |s#0@@228|) 18446744073709551616)) (=> (< (|Seq#Length| |s#0@@228|) 18446744073709551616) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (<= (LitInt 0) |call4formal@i#0@0|) (< |call4formal@i#0@0| 4294967296)) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx2#0_0@1| 4)) |idx2#0_0@1|))) (and (and (= |call4formal@i#0@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx2#0_0@1| 4)) |idx2#0_0@1|))) (forall (($o@@76 T@U) ) (!  (=> (= (type $o@@76) refType) (=> (and (not (= $o@@76 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@2 $o@@76) alloc))) (= (MapType0Select $Heap@3 $o@@76) (MapType0Select $Heap@2 $o@@76)))) :qid |PackedIntssdfy.69:3| :skolemid |2270| :pattern ( (MapType0Select $Heap@3 $o@@76)) ))) (and ($HeapSucc $Heap@2 $Heap@3) (= |newtype$check#0_17@1| (LitInt 4))))) (and (=> (= (ControlFlow 0 68912) (- 0 295938)) (and (<= (LitInt 0) |newtype$check#0_17@1|) (< |newtype$check#0_17@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_17@1|) (< |newtype$check#0_17@1| 18446744073709551616)) (=> (= |newtype$check#0_18@1| (+ |idx2#0_0@1| 4)) (and (=> (= (ControlFlow 0 68912) (- 0 295963)) (and (<= (LitInt 0) |newtype$check#0_18@1|) (< |newtype$check#0_18@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_18@1|) (< |newtype$check#0_18@1| 18446744073709551616)) (=> (= |idx3#0_0@1| (+ |idx2#0_0@1| 4)) (and (=> (= (ControlFlow 0 68912) (- 0 295994)) (and (<= (LitInt 0) |call4formal@i#0@0|) (< |call4formal@i#0@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |call4formal@i#0@0|) (< |call4formal@i#0@0| 18446744073709551616)) (=> |ValueType.__default.MaxLen#canCall| (and (=> (= (ControlFlow 0 68912) 68921) anon46_Then_correct) (=> (= (ControlFlow 0 68912) 68923) anon46_Else_correct))))))))))))))))))))))))))))))))))))))))))) (let ((anon20_correct  (=> (=> (<= (+ (+ 4 |call4formal@i#0@0@@0|) 4) (- (|Seq#Length| |s#0@@228|) |idx#0@1|)) |KeyType.__default.MaxLen#canCall|) (and (=> (= (ControlFlow 0 68909) 68910) anon45_Then_correct) (=> (= (ControlFlow 0 68909) 68912) anon45_Else_correct))))) (let ((anon44_Else_correct  (=> (and (< (- (|Seq#Length| |s#0@@228|) |idx#0@1|) (+ (+ 4 |call4formal@i#0@0@@0|) 4)) (= (ControlFlow 0 68903) 68909)) anon20_correct))) (let ((anon44_Then_correct  (=> (<= (+ (+ 4 |call4formal@i#0@0@@0|) 4) (- (|Seq#Length| |s#0@@228|) |idx#0@1|)) (and (=> (= (ControlFlow 0 68901) (- 0 295463)) (and (<= (LitInt 0) |call4formal@i#0@0@@0|) (< |call4formal@i#0@0@@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |call4formal@i#0@0@@0|) (< |call4formal@i#0@0@@0| 18446744073709551616)) (=> (and |KeyType.__default.MaxLen#canCall| (= (ControlFlow 0 68901) 68909)) anon20_correct)))))) (let ((anon43_Else_correct  (=> (and (<= (LitInt 4) (- (|Seq#Length| |s#0@@228|) |idx#0@1|)) (= |newtype$check#0_3@1| (LitInt 4))) (and (=> (= (ControlFlow 0 68892) (- 0 295052)) (and (<= (LitInt 0) |newtype$check#0_3@1|) (< |newtype$check#0_3@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_3@1|) (< |newtype$check#0_3@1| 18446744073709551616)) (=> (= |newtype$check#0_4@1| (+ |idx#0@1| 4)) (and (=> (= (ControlFlow 0 68892) (- 0 295077)) (and (<= (LitInt 0) |newtype$check#0_4@1|) (< |newtype$check#0_4@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_4@1|) (< |newtype$check#0_4@1| 18446744073709551616)) (=> (= |idx1#0_0@1| (+ |idx#0@1| 4)) (and (=> (= (ControlFlow 0 68892) (- 0 295117)) (forall (($o@@77 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (= (type $o@@77) refType) (= (type $f@@18) (FieldType alpha@@25))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@77 $f@@18)))) :qid |JournalistParsingImplidfy.212:47| :skolemid |1486| :no-pattern (type $o@@77) :no-pattern (type $f@@18) :no-pattern (U_2_int $o@@77) :no-pattern (U_2_bool $o@@77) :no-pattern (U_2_int $f@@18) :no-pattern (U_2_bool $f@@18) ))) (=> (forall (($o@@78 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (= (type $o@@78) refType) (= (type $f@@19) (FieldType alpha@@26))) false) (U_2_bool (MapType8Select $_Frame@0 $o@@78 $f@@19)))) :qid |JournalistParsingImplidfy.212:47| :skolemid |1486| :no-pattern (type $o@@78) :no-pattern (type $f@@19) :no-pattern (U_2_int $o@@78) :no-pattern (U_2_bool $o@@78) :no-pattern (U_2_int $f@@19) :no-pattern (U_2_bool $f@@19) )) (=> (and (<= (LitInt 0) |call4formal@i#0@@0|) (< |call4formal@i#0@@0| 4294967296)) (and (=> (= (ControlFlow 0 68892) (- 0 295136)) (<= (LitInt 0) |idx#0@1|)) (=> (<= (LitInt 0) |idx#0@1|) (and (=> (= (ControlFlow 0 68892) (- 0 295143)) (<= (+ |idx#0@1| 4) (|Seq#Length| |s#0@@228|))) (=> (<= (+ |idx#0@1| 4) (|Seq#Length| |s#0@@228|)) (and (=> (= (ControlFlow 0 68892) (- 0 295153)) (< (|Seq#Length| |s#0@@228|) 18446744073709551616)) (=> (< (|Seq#Length| |s#0@@228|) 18446744073709551616) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (and (<= (LitInt 0) |call4formal@i#0@0@@0|) (< |call4formal@i#0@0@@0| 4294967296)) (|NativePackedInts.__default.unpack__LittleEndian__Uint32#canCall| (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx#0@1| 4)) |idx#0@1|))) (and (and (= |call4formal@i#0@0@@0| (NativePackedInts.__default.unpack__LittleEndian__Uint32 StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32 (|Seq#Drop| (|Seq#Take| |s#0@@228| (+ |idx#0@1| 4)) |idx#0@1|))) (forall (($o@@79 T@U) ) (!  (=> (= (type $o@@79) refType) (=> (and (not (= $o@@79 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@1 $o@@79) alloc))) (= (MapType0Select $Heap@2 $o@@79) (MapType0Select $Heap@1 $o@@79)))) :qid |PackedIntssdfy.69:3| :skolemid |2270| :pattern ( (MapType0Select $Heap@2 $o@@79)) ))) (and ($HeapSucc $Heap@1 $Heap@2) (= |newtype$check#0_5@1| (LitInt 4))))) (and (=> (= (ControlFlow 0 68892) (- 0 295284)) (and (<= (LitInt 0) |newtype$check#0_5@1|) (< |newtype$check#0_5@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_5@1|) (< |newtype$check#0_5@1| 18446744073709551616)) (and (=> (= (ControlFlow 0 68892) (- 0 295300)) (and (<= (LitInt 0) |call4formal@i#0@0@@0|) (< |call4formal@i#0@0@@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |call4formal@i#0@0@@0|) (< |call4formal@i#0@0@@0| 18446744073709551616)) (=> (= |newtype$check#0_7@1| (+ 4 |call4formal@i#0@0@@0|)) (and (=> (= (ControlFlow 0 68892) (- 0 295325)) (and (<= (LitInt 0) |newtype$check#0_7@1|) (< |newtype$check#0_7@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_7@1|) (< |newtype$check#0_7@1| 18446744073709551616)) (=> (= |newtype$check#0_8@1| (LitInt 4)) (and (=> (= (ControlFlow 0 68892) (- 0 295349)) (and (<= (LitInt 0) |newtype$check#0_8@1|) (< |newtype$check#0_8@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_8@1|) (< |newtype$check#0_8@1| 18446744073709551616)) (=> (= |newtype$check#0_9@1| (+ (+ 4 |call4formal@i#0@0@@0|) 4)) (and (=> (= (ControlFlow 0 68892) (- 0 295378)) (and (<= (LitInt 0) |newtype$check#0_9@1|) (< |newtype$check#0_9@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_9@1|) (< |newtype$check#0_9@1| 18446744073709551616)) (=> (= |newtype$check#0_10@1| (|Seq#Length| |s#0@@228|)) (and (=> (= (ControlFlow 0 68892) (- 0 295402)) (and (<= (LitInt 0) |newtype$check#0_10@1|) (< |newtype$check#0_10@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_10@1|) (< |newtype$check#0_10@1| 18446744073709551616)) (=> (= |newtype$check#0_11@1| (- (|Seq#Length| |s#0@@228|) |idx#0@1|)) (and (=> (= (ControlFlow 0 68892) (- 0 295429)) (and (<= (LitInt 0) |newtype$check#0_11@1|) (< |newtype$check#0_11@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_11@1|) (< |newtype$check#0_11@1| 18446744073709551616)) (and (=> (= (ControlFlow 0 68892) 68901) anon44_Then_correct) (=> (= (ControlFlow 0 68892) 68903) anon44_Else_correct))))))))))))))))))))))))))))))))))))))))) (let ((anon42_Else_correct  (=> (< |i#0@1| |len#0@@32|) (=> (and (= |$decr$loop#00@1| (- |len#0@@32| |i#0@1|)) (= |newtype$check#0_0@1| (LitInt 4))) (and (=> (= (ControlFlow 0 68883) (- 0 294929)) (and (<= (LitInt 0) |newtype$check#0_0@1|) (< |newtype$check#0_0@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_0@1|) (< |newtype$check#0_0@1| 18446744073709551616)) (=> (= |newtype$check#0_1@1| (|Seq#Length| |s#0@@228|)) (and (=> (= (ControlFlow 0 68883) (- 0 294953)) (and (<= (LitInt 0) |newtype$check#0_1@1|) (< |newtype$check#0_1@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_1@1|) (< |newtype$check#0_1@1| 18446744073709551616)) (=> (= |newtype$check#0_2@1| (- (|Seq#Length| |s#0@@228|) |idx#0@1|)) (and (=> (= (ControlFlow 0 68883) (- 0 294980)) (and (<= (LitInt 0) |newtype$check#0_2@1|) (< |newtype$check#0_2@1| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#0_2@1|) (< |newtype$check#0_2@1| 18446744073709551616)) (and (=> (= (ControlFlow 0 68883) 68890) anon43_Then_correct) (=> (= (ControlFlow 0 68883) 68892) anon43_Else_correct)))))))))))))) (let ((anon35_Else_correct  (=> |$w$loop#0@0| (and (=> (= (ControlFlow 0 68872) 68881) anon42_Then_correct) (=> (= (ControlFlow 0 68872) 68883) anon42_Else_correct))))) (let ((anon34_LoopBody_correct  (and (=> (= (ControlFlow 0 68806) 68813) anon35_Then_correct) (=> (= (ControlFlow 0 68806) 68872) anon35_Else_correct)))) (let ((anon34_LoopDone_correct true)) (let ((anon34_LoopHead_correct  (=> (and (and (and (and (and ($Is |value#0_0@0| Tclass.ValueType.Value) ($IsAlloc |value#0_0@0| Tclass.ValueType.Value $Heap@1)) (and (<= (LitInt 0) |idx4#0_0@0|) (< |idx4#0_0@0| 18446744073709551616))) (and (and ($Is |je#0_0@0| Tclass.Journal.JournalEntry) ($IsAlloc |je#0_0@0| Tclass.Journal.JournalEntry $Heap@1)) ($Is |$rhs#0_0@0| Tclass.Journal.JournalEntry))) (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (<= (LitInt 0) |i#0@1|) (< |i#0@1| 18446744073709551616))) (and (and (<= (LitInt 0) |idx#0@1|) (< |idx#0@1| 18446744073709551616)) (and ($Is |key#0_0@0| Tclass.KeyType.Key) ($IsAlloc |key#0_0@0| Tclass.KeyType.Key $Heap@1))))) (and (and (and (and (<= (LitInt 0) |idx2#0_0@0|) (< |idx2#0_0@0| 18446744073709551616)) (and (<= (LitInt 0) |$rhs##0_1@0|) (< |$rhs##0_1@0| 4294967296))) (and (and (<= (LitInt 0) |valueLen#0_0@0|) (< |valueLen#0_0@0| 4294967296)) (and (<= (LitInt 0) |idx3#0_0@0|) (< |idx3#0_0@0| 18446744073709551616)))) (and (and (and (<= (LitInt 0) |idx1#0_0@0|) (< |idx1#0_0@0| 18446744073709551616)) (and (<= (LitInt 0) |$rhs##0_0@0|) (< |$rhs##0_0@0| 4294967296))) (and (and (<= (LitInt 0) |keyLen#0_0@0|) (< |keyLen#0_0@0| 4294967296)) (and (<= (LitInt 0) |idx0#0_0@0|) (< |idx0#0_0@0| 18446744073709551616)))))) (=> (and (and (and (and (and (and (and (not false) (<= 0 |i#0@1|)) (= |newtype$check#1@0| 0)) (= |newtype$check#2@0| 8)) (<= 0 |$decr_init$loop#00@0|)) (=> |$w$loop#0@0| true)) (and (and (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@1|)) (=> |$w$loop#0@0| (<= |i#0@1| |len#0@@32|))) (and (=> |$w$loop#0@0| true) (=> |$w$loop#0@0| (<= (LitInt 0) |idx#0@1|))))) (and (and (and (and (=> |$w$loop#0@0| (<= |idx#0@1| (|Seq#Length| |s#0@@228|))) (=> |$w$loop#0@0| true)) (and (=> |$w$loop#0@0| (= (_System.array.Length $nw@0) |len#0@@32|)) (=> |$w$loop#0@0| (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (=> (U_2_bool (Lit (bool_2_U true))) (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)))))))) (and (and (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (U_2_bool (Lit (bool_2_U true))))) (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))))) (and (=> |$w$loop#0@0| (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|) (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)) (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| |len#0@@32| (LitInt 8))) (and (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| |len#0@@32| (LitInt 8)) (|JournalRanges.__default.parseEntries#canCall| |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))))))) (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))))))) (and (and (and (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))) (|Seq#Append| (|Seq#Take| (|Seq#FromArray| $Heap@1 $nw@0) |i#0@1|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| (- |len#0@@32| |i#0@1|) |idx#0@1|))))))) (=> |$w$loop#0@0| true)) (and (=> |$w$loop#0@0| (<= |i#0@1| |idx#0@1|)) (forall (($o@@80 T@U) ) (!  (=> (= (type $o@@80) refType) (=> (and (not (= $o@@80 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@@49 $o@@80) alloc))) (= (MapType0Select $Heap@1 $o@@80) (MapType0Select $Heap@0 $o@@80)))) :qid |JournalistParsingImplidfy.192:5| :skolemid |1484| :pattern ( (MapType0Select $Heap@1 $o@@80)) )))) (and (and ($HeapSucc $Heap@0 $Heap@1) (forall (($o@@81 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (= (type $o@@81) refType) (= (type $f@@20) (FieldType alpha@@27))) (and (not (= $o@@81 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@0 $o@@81) alloc)))) (or (= (MapType1Select (MapType0Select $Heap@1 $o@@81) $f@@20) (MapType1Select (MapType0Select $Heap@0 $o@@81) $f@@20)) (U_2_bool (MapType8Select $_Frame@0 $o@@81 $f@@20))))) :qid |JournalistParsingImplidfy.192:5| :skolemid |1485| :pattern ( (MapType1Select (MapType0Select $Heap@1 $o@@81) $f@@20)) ))) (and (<= (- |len#0@@32| |i#0@1|) |$decr_init$loop#00@0|) (=> (= (- |len#0@@32| |i#0@1|) |$decr_init$loop#00@0|) true)))))) (and (=> (= (ControlFlow 0 68800) 68936) anon34_LoopDone_correct) (=> (= (ControlFlow 0 68800) 68806) anon34_LoopBody_correct)))))) (let ((anon0_correct  (=> (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (=> (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (=> (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)))) (=> (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate))))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32)) (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64)))) (and (and (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq)) (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint32_Seq) (= (AsFuelBottom StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) StartFuel_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq))) (and (and (= (AsFuelBottom StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) StartFuelAssert_NativePackedInts._default.unpack_LittleEndian_Uint64_Seq) (= (AsFuelBottom StartFuel_JournalRanges._default.parseHeader) StartFuel_JournalRanges._default.parseHeader)) (and (= (AsFuelBottom StartFuelAssert_JournalRanges._default.parseHeader) StartFuelAssert_JournalRanges._default.parseHeader) (= (AsFuelBottom StartFuel_JournalRanges._default.WeightJournalEntries) StartFuel_JournalRanges._default.WeightJournalEntries)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_JournalRanges._default.WeightJournalEntries) StartFuelAssert_JournalRanges._default.WeightJournalEntries) (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1)) (and (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1) (= StartFuel_Bits_s._default.bits_of_int ($LS BaseFuel_Bits_s._default.bits_of_int)))) (and (and (= StartFuelAssert_Bits_s._default.bits_of_int ($LS ($LS BaseFuel_Bits_s._default.bits_of_int))) (= (AsFuelBottom BaseFuel_Bits_s._default.bits_of_int) BaseFuel_Bits_s._default.bits_of_int)) (and (= (AsFuelBottom StartFuel_Bits_s._default.zeroes) StartFuel_Bits_s._default.zeroes) (= (AsFuelBottom StartFuelAssert_Bits_s._default.zeroes) StartFuelAssert_Bits_s._default.zeroes)))) (and (and (and (= (AsFuelBottom StartFuel_Bits_s._default.ones) StartFuel_Bits_s._default.ones) (= (AsFuelBottom StartFuelAssert_Bits_s._default.ones) StartFuelAssert_Bits_s._default.ones)) (and (= (AsFuelBottom StartFuel_F2_X_s._default.reverse) StartFuel_F2_X_s._default.reverse) (= (AsFuelBottom StartFuelAssert_F2_X_s._default.reverse) StartFuelAssert_F2_X_s._default.reverse))) (and (and (= (AsFuelBottom StartFuel_F2_X_s._default.xor) StartFuel_F2_X_s._default.xor) (= (AsFuelBottom StartFuelAssert_F2_X_s._default.xor) StartFuelAssert_F2_X_s._default.xor)) (and (= (AsFuelBottom StartFuel_F2_X_s._default.mul_F2_X) StartFuel_F2_X_s._default.mul_F2_X) (= (AsFuelBottom StartFuelAssert_F2_X_s._default.mul_F2_X) StartFuelAssert_F2_X_s._default.mul_F2_X))))) (and (and (and (and (= StartFuel_F2_X_s._default.mm_crc32_u64 ($LS BaseFuel_F2_X_s._default.mm_crc32_u64)) (= StartFuelAssert_F2_X_s._default.mm_crc32_u64 ($LS ($LS BaseFuel_F2_X_s._default.mm_crc32_u64)))) (and (= (AsFuelBottom BaseFuel_F2_X_s._default.mm_crc32_u64) BaseFuel_F2_X_s._default.mm_crc32_u64) (= (AsFuelBottom StartFuel_CRC32_C._default.crc32_c) StartFuel_CRC32_C._default.crc32_c))) (and (and (= (AsFuelBottom StartFuelAssert_CRC32_C._default.crc32_c) StartFuelAssert_CRC32_C._default.crc32_c) (= (AsFuelBottom StartFuel_AsyncDisk._default.ChecksumChecksOut) StartFuel_AsyncDisk._default.ChecksumChecksOut)) (and (= (AsFuelBottom StartFuelAssert_AsyncDisk._default.ChecksumChecksOut) StartFuelAssert_AsyncDisk._default.ChecksumChecksOut) (= (AsFuelBottom StartFuel_AsyncDisk._default.splice) StartFuel_AsyncDisk._default.splice)))) (and (and (and (= (AsFuelBottom StartFuelAssert_AsyncDisk._default.splice) StartFuelAssert_AsyncDisk._default.splice) (= (AsFuelBottom StartFuel_JournalBytes._default.JournalBlockOfByteSeq) StartFuel_JournalBytes._default.JournalBlockOfByteSeq)) (and (= (AsFuelBottom StartFuelAssert_JournalBytes._default.JournalBlockOfByteSeq) StartFuelAssert_JournalBytes._default.JournalBlockOfByteSeq) (= (AsFuelBottom StartFuel_JournalBytes._default.JournalRangeOfByteSeq) StartFuel_JournalBytes._default.JournalRangeOfByteSeq))) (and (and (= (AsFuelBottom StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq) StartFuelAssert_JournalBytes._default.JournalRangeOfByteSeq) (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte)) (and (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte) (= $_Frame@0 (|lambda#9| null $Heap@@49 alloc false)))))))) (and (=> (= (ControlFlow 0 68798) (- 0 293538)) (<= 0 |len#0@@32|)) (=> (<= 0 |len#0@@32|) (=> (and (and (and (not (= $nw@0 null)) (= (dtype $nw@0) (Tclass._System.array? Tclass.Journal.JournalEntry))) (and (not (U_2_bool (MapType1Select (MapType0Select $Heap@@49 $nw@0) alloc))) (= (_System.array.Length $nw@0) |len#0@@32|))) (and (and (= $Heap@0 (MapType0Store $Heap@@49 $nw@0 (MapType1Store (MapType0Select $Heap@@49 $nw@0) alloc (bool_2_U true)))) ($IsGoodHeap $Heap@0)) (and ($IsHeapAnchor $Heap@0) (= |newtype$check#1@0| (LitInt 0))))) (and (=> (= (ControlFlow 0 68798) (- 0 293616)) (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#1@0|) (< |newtype$check#1@0| 18446744073709551616)) (=> (and (= |i#0@0| (LitInt 0)) (= |newtype$check#2@0| (LitInt 8))) (and (=> (= (ControlFlow 0 68798) (- 0 293656)) (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#2@0|) (< |newtype$check#2@0| 18446744073709551616)) (=> (and (= |idx#0@0| (LitInt 8)) (= |$decr_init$loop#00@0| (- |len#0@@32| |i#0@0|))) (and (=> (= (ControlFlow 0 68798) (- 0 293700)) (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#0@0|)) (and (=> (= (ControlFlow 0 68798) (- 0 293710)) (=> |$w$loop#0@0| (<= |i#0@0| |len#0@@32|))) (=> (=> |$w$loop#0@0| (<= |i#0@0| |len#0@@32|)) (and (=> (= (ControlFlow 0 68798) (- 0 293718)) (=> |$w$loop#0@0| (<= (LitInt 0) |idx#0@0|))) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |idx#0@0|)) (and (=> (= (ControlFlow 0 68798) (- 0 293728)) (=> |$w$loop#0@0| (<= |idx#0@0| (|Seq#Length| |s#0@@228|)))) (=> (=> |$w$loop#0@0| (<= |idx#0@0| (|Seq#Length| |s#0@@228|))) (and (=> (= (ControlFlow 0 68798) (- 0 293738)) (=> |$w$loop#0@0| (= (_System.array.Length $nw@0) |len#0@@32|))) (=> (=> |$w$loop#0@0| (= (_System.array.Length $nw@0) |len#0@@32|)) (and (=> (= (ControlFlow 0 68798) (- 0 293748)) (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|)) (U_2_bool (Lit (bool_2_U true)))))) (=> (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|)) (U_2_bool (Lit (bool_2_U true))))) (and (=> (= (ControlFlow 0 68798) (- 0 293773)) (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|)) (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))))) (=> (=> |$w$loop#0@0| (=> (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|)) (Options.Option.None_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8))))) (and (=> (= (ControlFlow 0 68798) (- 0 293812)) (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))))) (=> (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|)) (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8))))) (and (=> (= (ControlFlow 0 68798) (- 0 293851)) (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))) (|Seq#Append| (|Seq#Take| (|Seq#FromArray| $Heap@0 $nw@0) |i#0@0|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|)))))))) (=> (=> |$w$loop#0@0| (=> (Options.Option.Some_q (JournalRanges.__default.parseEntries ($LS $LZ) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| |len#0@@32| (LitInt 8)))) (|Seq#Append| (|Seq#Take| (|Seq#FromArray| $Heap@0 $nw@0) |i#0@0|) ($Unbox (SeqType BoxType) (Options.Option.value (JournalRanges.__default.parseEntries ($LS ($LS $LZ)) |s#0@@228| (- |len#0@@32| |i#0@0|) |idx#0@0|))))))) (and (=> (= (ControlFlow 0 68798) (- 0 293927)) (=> |$w$loop#0@0| (<= |i#0@0| |idx#0@0|))) (=> (=> |$w$loop#0@0| (<= |i#0@0| |idx#0@0|)) (=> (= (ControlFlow 0 68798) 68800) anon34_LoopHead_correct))))))))))))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (and (and ($IsGoodHeap $Heap@@49) ($IsHeapAnchor $Heap@@49)) (and ($Is |s#0@@228| (TSeq Tclass.NativeTypes.byte)) ($IsAlloc |s#0@@228| (TSeq Tclass.NativeTypes.byte) $Heap@@49))) (=> (and (and (and (and (<= (LitInt 0) |len#0@@32|) (< |len#0@@32| 18446744073709551616)) (and ($Is |res#0| (Tclass.Options.Option (TSeq Tclass.Journal.JournalEntry))) ($IsAlloc |res#0| (Tclass.Options.Option (TSeq Tclass.Journal.JournalEntry)) $Heap@@49))) (and (and ($Is |ar#0| (Tclass._System.array Tclass.Journal.JournalEntry)) ($IsAlloc |ar#0| (Tclass._System.array Tclass.Journal.JournalEntry) $Heap@@49)) (and (<= (LitInt 0) |i#0@@130|) (< |i#0@@130| 18446744073709551616)))) (and (and (and (<= (LitInt 0) |idx#0@@8|) (< |idx#0@@8| 18446744073709551616)) (and (<= (LitInt 0) |idx0#0_0|) (< |idx0#0_0| 18446744073709551616))) (and (and (<= (LitInt 0) |idx1#0_0|) (< |idx1#0_0| 18446744073709551616)) (and (<= (LitInt 0) |keyLen#0_0|) (< |keyLen#0_0| 4294967296))))) (=> (and (and (and (and (and (<= (LitInt 0) |$rhs##0_0|) (< |$rhs##0_0| 4294967296)) (and ($Is |key#0_0| Tclass.KeyType.Key) ($IsAlloc |key#0_0| Tclass.KeyType.Key $Heap@@49))) (and (and (<= (LitInt 0) |idx2#0_0|) (< |idx2#0_0| 18446744073709551616)) (and (<= (LitInt 0) |valueLen#0_0|) (< |valueLen#0_0| 4294967296)))) (and (and (and (<= (LitInt 0) |$rhs##0_1|) (< |$rhs##0_1| 4294967296)) (and (<= (LitInt 0) |idx3#0_0|) (< |idx3#0_0| 18446744073709551616))) (and (and ($Is |value#0_0| Tclass.ValueType.Value) ($IsAlloc |value#0_0| Tclass.ValueType.Value $Heap@@49)) (and (<= (LitInt 0) |idx4#0_0|) (< |idx4#0_0| 18446744073709551616))))) (and (and (and (and ($Is |je#0_0| Tclass.Journal.JournalEntry) ($IsAlloc |je#0_0| Tclass.Journal.JournalEntry $Heap@@49)) ($Is |$rhs#0_0| Tclass.Journal.JournalEntry)) (and (= 14 $FunctionContextHeight) (<= (LitInt 0) (LitInt 8)))) (and (and (<= (LitInt 8) (|Seq#Length| |s#0@@228|)) (< (|Seq#Length| |s#0@@228|) 18446744073709551616)) (and (<= (LitInt 0) |len#0@@32|) (= (ControlFlow 0 292143) 68798))))) anon0_correct))))) PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))) ))
(check-sat)
