(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun Tagclass._System.___hFunc5 () T@U)
(declare-fun Tagclass._System.___hPartialFunc5 () T@U)
(declare-fun Tagclass._System.___hTotalFunc5 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc6 () T@U)
(declare-fun Tagclass._System.___hPartialFunc6 () T@U)
(declare-fun Tagclass._System.___hTotalFunc6 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc7 () T@U)
(declare-fun Tagclass._System.___hPartialFunc7 () T@U)
(declare-fun Tagclass._System.___hTotalFunc7 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun |##TSJ.Constants.Constants| () T@U)
(declare-fun Tagclass.TSJ.Constants () T@U)
(declare-fun class.TSJ.Constants () T@U)
(declare-fun |##TSJ.Variables.Variables| () T@U)
(declare-fun Tagclass.Journal.JournalEntry () T@U)
(declare-fun Tagclass.ThreeStateTypes.SyncReqStatus () T@U)
(declare-fun Tagclass.TSJ.Variables () T@U)
(declare-fun class.TSJ.Variables () T@U)
(declare-fun |##TSJ.Step.CrashStep| () T@U)
(declare-fun Tagclass.TSJ.Step () T@U)
(declare-fun |##TSJ.Step.Move1to2Step| () T@U)
(declare-fun |##TSJ.Step.Move2to3Step| () T@U)
(declare-fun |##TSJ.Step.ExtendLog1Step| () T@U)
(declare-fun |##TSJ.Step.ExtendLog2Step| () T@U)
(declare-fun |##TSJ.Step.Move3Step| () T@U)
(declare-fun |##TSJ.Step.ReplayStep| () T@U)
(declare-fun Tagclass.UI.Op () T@U)
(declare-fun |##TSJ.Step.PushSyncStep| () T@U)
(declare-fun |##TSJ.Step.PopSyncStep| () T@U)
(declare-fun |##TSJ.Step.StutterStep| () T@U)
(declare-fun class.TSJ.Step () T@U)
(declare-fun class.TSJ.__default () T@U)
(declare-fun Tagclass.TSJ.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun |##UI.RangeStart.SInclusive| () T@U)
(declare-fun Tagclass.UI.RangeStart () T@U)
(declare-fun |##UI.RangeStart.SExclusive| () T@U)
(declare-fun |##UI.RangeStart.NegativeInf| () T@U)
(declare-fun class.UI.RangeStart () T@U)
(declare-fun |##UI.RangeEnd.EInclusive| () T@U)
(declare-fun Tagclass.UI.RangeEnd () T@U)
(declare-fun |##UI.RangeEnd.EExclusive| () T@U)
(declare-fun |##UI.RangeEnd.PositiveInf| () T@U)
(declare-fun class.UI.RangeEnd () T@U)
(declare-fun |##UI.SuccResult.SuccResult| () T@U)
(declare-fun Tagclass.UI.SuccResult () T@U)
(declare-fun class.UI.SuccResult () T@U)
(declare-fun |##UI.SuccResultList.SuccResultList| () T@U)
(declare-fun Tagclass.UI.SuccResultList () T@U)
(declare-fun class.UI.SuccResultList () T@U)
(declare-fun |##UI.Op.NoOp| () T@U)
(declare-fun |##UI.Op.SyncOp| () T@U)
(declare-fun |##UI.Op.CrashOp| () T@U)
(declare-fun |##UI.Op.PushSyncOp| () T@U)
(declare-fun |##UI.Op.PopSyncOp| () T@U)
(declare-fun |##UI.Op.GetOp| () T@U)
(declare-fun |##UI.Op.PutOp| () T@U)
(declare-fun |##UI.Op.SuccOp| () T@U)
(declare-fun class.UI.Op () T@U)
(declare-fun class.UI.__default () T@U)
(declare-fun Tagclass.UI.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun |##ThreeStateTypes.SyncReqStatus.State1| () T@U)
(declare-fun |##ThreeStateTypes.SyncReqStatus.State2| () T@U)
(declare-fun |##ThreeStateTypes.SyncReqStatus.State3| () T@U)
(declare-fun class.ThreeStateTypes.SyncReqStatus () T@U)
(declare-fun class.ThreeStateTypes.__default () T@U)
(declare-fun Tagclass.ThreeStateTypes.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun |##Journal.JournalEntry.JournalInsert| () T@U)
(declare-fun class.Journal.JournalEntry () T@U)
(declare-fun class.Journal.__default () T@U)
(declare-fun Tagclass.Journal.__default () T@U)
(declare-fun Tagclass.TSJ.SM.Abs.__default () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3TypeInv4 (T@T) T@T)
(declare-fun MapType3TypeInv5 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_5 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4TypeInv5 (T@T) T@T)
(declare-fun MapType4TypeInv6 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle5 (T@U T@U T@U) T@U)
(declare-fun Requires5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_6 (T@U) T@U)
(declare-fun MapType6Type (T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6TypeInv2 (T@T) T@T)
(declare-fun MapType6TypeInv3 (T@T) T@T)
(declare-fun MapType6TypeInv4 (T@T) T@T)
(declare-fun MapType6TypeInv5 (T@T) T@T)
(declare-fun MapType6TypeInv6 (T@T) T@T)
(declare-fun MapType6TypeInv7 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle6 (T@U T@U T@U) T@U)
(declare-fun Requires6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType7Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType7TypeInv0 (T@T) T@T)
(declare-fun MapType7TypeInv1 (T@T) T@T)
(declare-fun MapType7TypeInv2 (T@T) T@T)
(declare-fun MapType7TypeInv3 (T@T) T@T)
(declare-fun MapType7TypeInv4 (T@T) T@T)
(declare-fun MapType7Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType7Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc7_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_6 (T@U) T@U)
(declare-fun Tclass._System.___hFunc7_7 (T@U) T@U)
(declare-fun MapType8Type (T@T T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType8TypeInv0 (T@T) T@T)
(declare-fun MapType8TypeInv1 (T@T) T@T)
(declare-fun MapType8TypeInv2 (T@T) T@T)
(declare-fun MapType8TypeInv3 (T@T) T@T)
(declare-fun MapType8TypeInv4 (T@T) T@T)
(declare-fun MapType8TypeInv5 (T@T) T@T)
(declare-fun MapType8TypeInv6 (T@T) T@T)
(declare-fun MapType8TypeInv7 (T@T) T@T)
(declare-fun MapType8TypeInv8 (T@T) T@T)
(declare-fun MapType8Select (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType8Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply7 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle7 (T@U T@U T@U) T@U)
(declare-fun Requires7 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads7 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_6 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc7_7 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc7_7 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun |#TSJ.Constants.Constants| (T@U) T@U)
(declare-fun TSJ.Constants.Constants_q (T@U) Bool)
(declare-fun Tclass.TSJ.Constants () T@U)
(declare-fun |#$Constants| () T@U)
(declare-fun TSJ.Constants.k (T@U) T@U)
(declare-fun |$IsA#TSJ.Constants| (T@U) Bool)
(declare-fun |TSJ.Constants#Equal| (T@U T@U) Bool)
(declare-fun |#TSJ.Variables.Variables| (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun TSJ.Variables.Variables_q (T@U) Bool)
(declare-fun Tclass.Journal.JournalEntry () T@U)
(declare-fun Tclass.ThreeStateTypes.SyncReqStatus () T@U)
(declare-fun Tclass.TSJ.Variables () T@U)
(declare-fun |#$Variables| () T@U)
(declare-fun TSJ.Variables.s1 (T@U) T@U)
(declare-fun TSJ.Variables.s2 (T@U) T@U)
(declare-fun TSJ.Variables.s3 (T@U) T@U)
(declare-fun TSJ.Variables.j1 (T@U) T@U)
(declare-fun TSJ.Variables.j2 (T@U) T@U)
(declare-fun TSJ.Variables.j3 (T@U) T@U)
(declare-fun TSJ.Variables.j__gamma (T@U) T@U)
(declare-fun TSJ.Variables.j__delta (T@U) T@U)
(declare-fun TSJ.Variables.outstandingSyncReqs (T@U) T@U)
(declare-fun |$IsA#TSJ.Variables| (T@U) Bool)
(declare-fun |TSJ.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#TSJ.Step.CrashStep| () T@U)
(declare-fun TSJ.Step.CrashStep_q (T@U) Bool)
(declare-fun Tclass.TSJ.Step () T@U)
(declare-fun |#TSJ.Step.Move1to2Step| () T@U)
(declare-fun TSJ.Step.Move1to2Step_q (T@U) Bool)
(declare-fun |#TSJ.Step.Move2to3Step| () T@U)
(declare-fun TSJ.Step.Move2to3Step_q (T@U) Bool)
(declare-fun |#TSJ.Step.ExtendLog1Step| () T@U)
(declare-fun TSJ.Step.ExtendLog1Step_q (T@U) Bool)
(declare-fun |#TSJ.Step.ExtendLog2Step| () T@U)
(declare-fun TSJ.Step.ExtendLog2Step_q (T@U) Bool)
(declare-fun |#TSJ.Step.Move3Step| () T@U)
(declare-fun TSJ.Step.Move3Step_q (T@U) Bool)
(declare-fun |#TSJ.Step.ReplayStep| (T@U) T@U)
(declare-fun TSJ.Step.ReplayStep_q (T@U) Bool)
(declare-fun Tclass.UI.Op () T@U)
(declare-fun TSJ.Step.replayedUIOp (T@U) T@U)
(declare-fun |#TSJ.Step.PushSyncStep| (Int) T@U)
(declare-fun TSJ.Step.PushSyncStep_q (T@U) Bool)
(declare-fun TSJ.Step.id (T@U) Int)
(declare-fun |#TSJ.Step.PopSyncStep| (Int) T@U)
(declare-fun TSJ.Step.PopSyncStep_q (T@U) Bool)
(declare-fun |#TSJ.Step.StutterStep| () T@U)
(declare-fun TSJ.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#TSJ.Step| (T@U) Bool)
(declare-fun |TSJ.Step#Equal| (T@U T@U) Bool)
(declare-fun |UI.Op#Equal| (T@U T@U) Bool)
(declare-fun Tclass.TSJ.__default () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun TSJ.__default.Init (T@U T@U) Bool)
(declare-fun |TSJ.__default.Init#canCall| (T@U T@U) Bool)
(declare-fun |TSJ.__default.Init#requires| (T@U T@U) Bool)
(declare-fun |TSJ.SM.Abs.__default.Init#canCall| (T@U T@U) Bool)
(declare-fun TSJ.SM.Abs.__default.Init (T@U T@U) Bool)
(declare-fun TSJ.__default.Crash (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Crash#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Crash#requires| (T@U T@U T@U T@U) Bool)
(declare-fun UI.Op.CrashOp_q (T@U) Bool)
(declare-fun TSJ.__default.Move1to2 (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Move1to2#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Move1to2#requires| (T@U T@U T@U T@U) Bool)
(declare-fun ThreeStateTypes.__default.SyncReqs2to1 (T@U) T@U)
(declare-fun UI.Op.NoOp_q (T@U) Bool)
(declare-fun |ThreeStateTypes.__default.SyncReqs2to1#canCall| (T@U) Bool)
(declare-fun TSJ.__default.Move2to3 (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Move2to3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Move2to3#requires| (T@U T@U T@U T@U) Bool)
(declare-fun ThreeStateTypes.__default.SyncReqs3to2 (T@U) T@U)
(declare-fun |ThreeStateTypes.__default.SyncReqs3to2#canCall| (T@U) Bool)
(declare-fun TSJ.__default.ExtendLog1 (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.ExtendLog1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.ExtendLog1#requires| (T@U T@U T@U T@U) Bool)
(declare-fun TSJ.__default.ExtendLog2 (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.ExtendLog2#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.ExtendLog2#requires| (T@U T@U T@U T@U) Bool)
(declare-fun TSJ.__default.Move3 (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Move3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Move3#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Journal.__default.JournalEntriesForUIOp (T@U) T@U)
(declare-fun |TSJ.SM.Abs.__default.Next#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun TSJ.SM.Abs.__default.Next (T@U T@U T@U T@U) Bool)
(declare-fun |Journal.__default.JournalEntriesForUIOp#canCall| (T@U) Bool)
(declare-fun TSJ.__default.Replay (T@U T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Replay#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Replay#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun TSJ.__default.PushSync (T@U T@U T@U T@U Int) Bool)
(declare-fun |TSJ.__default.PushSync#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |TSJ.__default.PushSync#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun |#UI.Op.PushSyncOp| (Int) T@U)
(declare-fun |#ThreeStateTypes.SyncReqStatus.State3| () T@U)
(declare-fun |$IsA#UI.Op| (T@U) Bool)
(declare-fun TSJ.__default.PopSync (T@U T@U T@U T@U Int) Bool)
(declare-fun |TSJ.__default.PopSync#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |TSJ.__default.PopSync#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun |#UI.Op.PopSyncOp| (Int) T@U)
(declare-fun |#ThreeStateTypes.SyncReqStatus.State1| () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapRemove1 () T@U)
(declare-fun |$IsA#ThreeStateTypes.SyncReqStatus| (T@U) Bool)
(declare-fun |ThreeStateTypes.SyncReqStatus#Equal| (T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun TSJ.__default.Stutter (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Stutter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Stutter#requires| (T@U T@U T@U T@U) Bool)
(declare-fun TSJ.__default.NextStep (T@U T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.NextStep#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.NextStep#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun TSJ.__default.Next (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Next#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.Next#requires| (T@U T@U T@U T@U) Bool)
(declare-fun TSJ.__default.IsPath (T@U T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.IsPath#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.IsPath#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun TSJ.__default.path (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.path#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.path#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Journal.__default.JournalEntriesForUIOps (T@U T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |Journal.__default.JournalEntriesForUIOps#canCall| (T@U) Bool)
(declare-fun TSJ.__default.IsSuffix (T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.IsSuffix#requires| (T@U T@U T@U) Bool)
(declare-fun TSJ.__default.SeqSub (T@U T@U T@U T@U) T@U)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun |TSJ.__default.SeqSub#canCall| (T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.SeqSub#requires| (T@U T@U T@U T@U) Bool)
(declare-fun TSJ.__default.advances (T@U T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.advances#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.__default.advances#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_TSJ._default.SeqSub () T@U)
(declare-fun TSJ.__default.Inv (T@U T@U) Bool)
(declare-fun |TSJ.__default.Inv#canCall| (T@U T@U) Bool)
(declare-fun |TSJ.__default.Inv#requires| (T@U T@U) Bool)
(declare-fun |TSJ.SM.Abs.__default.Inv#canCall| (T@U T@U) Bool)
(declare-fun TSJ.SM.Abs.__default.Inv (T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun Tclass.KeyType.__default () T@U)
(declare-fun KeyType.__default.MaxLen () Int)
(declare-fun |KeyType.__default.MaxLen#requires| () Bool)
(declare-fun |#UI.RangeStart.SInclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeStart () T@U)
(declare-fun UI.RangeStart.key (T@U) T@U)
(declare-fun |#UI.RangeStart.SExclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeStart.NegativeInf| () T@U)
(declare-fun UI.RangeStart.NegativeInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeStart| (T@U) Bool)
(declare-fun |UI.RangeStart#Equal| (T@U T@U) Bool)
(declare-fun |#UI.RangeEnd.EInclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeEnd () T@U)
(declare-fun UI.RangeEnd.key (T@U) T@U)
(declare-fun |#UI.RangeEnd.EExclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeEnd.PositiveInf| () T@U)
(declare-fun UI.RangeEnd.PositiveInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeEnd| (T@U) Bool)
(declare-fun |UI.RangeEnd#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResult.SuccResult| (T@U T@U) T@U)
(declare-fun UI.SuccResult.SuccResult_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResult () T@U)
(declare-fun UI.SuccResult.key (T@U) T@U)
(declare-fun UI.SuccResult.value (T@U) T@U)
(declare-fun |$IsA#UI.SuccResult| (T@U) Bool)
(declare-fun |UI.SuccResult#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResultList.SuccResultList| (T@U T@U) T@U)
(declare-fun UI.SuccResultList.SuccResultList_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResultList () T@U)
(declare-fun UI.SuccResultList.results (T@U) T@U)
(declare-fun UI.SuccResultList.end (T@U) T@U)
(declare-fun |$IsA#UI.SuccResultList| (T@U) Bool)
(declare-fun |UI.SuccResultList#Equal| (T@U T@U) Bool)
(declare-fun |#UI.Op.NoOp| () T@U)
(declare-fun |#UI.Op.SyncOp| () T@U)
(declare-fun UI.Op.SyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.CrashOp| () T@U)
(declare-fun UI.Op.PushSyncOp_q (T@U) Bool)
(declare-fun UI.Op.id (T@U) Int)
(declare-fun UI.Op.PopSyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetOp| (T@U T@U) T@U)
(declare-fun UI.Op.GetOp_q (T@U) Bool)
(declare-fun UI.Op.key (T@U) T@U)
(declare-fun UI.Op.value (T@U) T@U)
(declare-fun |#UI.Op.PutOp| (T@U T@U) T@U)
(declare-fun UI.Op.PutOp_q (T@U) Bool)
(declare-fun |#UI.Op.SuccOp| (T@U T@U T@U) T@U)
(declare-fun UI.Op.SuccOp_q (T@U) Bool)
(declare-fun UI.Op.start (T@U) T@U)
(declare-fun UI.Op.results (T@U) T@U)
(declare-fun UI.Op.end (T@U) T@U)
(declare-fun Tclass.UI.__default () T@U)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#49| (T@U T@U T@U) T@U)
(declare-fun |lambda#50| (T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#53| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MoreFuel_Maps._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove11 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#67| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#81| (T@U T@U T@U) T@U)
(declare-fun |lambda#82| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#101| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#102| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#105| (T@U T@U) T@U)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun ThreeStateTypes.SyncReqStatus.State1_q (T@U) Bool)
(declare-fun |#ThreeStateTypes.SyncReqStatus.State2| () T@U)
(declare-fun ThreeStateTypes.SyncReqStatus.State2_q (T@U) Bool)
(declare-fun ThreeStateTypes.SyncReqStatus.State3_q (T@U) Bool)
(declare-fun Tclass.ThreeStateTypes.__default () T@U)
(declare-fun |ThreeStateTypes.__default.SyncReqs2to1#requires| (T@U) Bool)
(declare-fun |lambda#109| (T@U) T@U)
(declare-fun |lambda#110| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |ThreeStateTypes.__default.SyncReqs3to2#requires| (T@U) Bool)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#117| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun ValueMessage.__default.bytestring__to__Message (T@U) T@U)
(declare-fun |ValueMessage.__default.bytestring__to__Message#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestring__to__Message#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessageSeq (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.Message__to__bytestring (T@U) T@U)
(declare-fun |ValueMessage.__default.Message__to__bytestring#canCall| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun |ValueMessage.__default.Message__to__bytestring#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.messageSeq__to__bytestringSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestringSeq__to__MessageSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun ValueMessage.__default.DefineDefault () T@U)
(declare-fun |ValueMessage.__default.DefineDefault#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun |#Journal.JournalEntry.JournalInsert| (T@U T@U) T@U)
(declare-fun Journal.JournalEntry.JournalInsert_q (T@U) Bool)
(declare-fun Journal.JournalEntry.key (T@U) T@U)
(declare-fun Journal.JournalEntry.value (T@U) T@U)
(declare-fun |$IsA#Journal.JournalEntry| (T@U) Bool)
(declare-fun |Journal.JournalEntry#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Journal.__default () T@U)
(declare-fun |Journal.__default.JournalEntriesForUIOp#requires| (T@U) Bool)
(declare-fun |Journal.__default.JournalEntriesForUIOps#requires| (T@U T@U) Bool)
(declare-fun Tclass.TSJ.SM.Abs.__default () T@U)
(declare-fun |TSJ.SM.Abs.__default.Init#requires| (T@U T@U) Bool)
(declare-fun |TSJ.SM.Abs.__default.Next#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |TSJ.SM.Abs.__default.Inv#requires| (T@U T@U) Bool)
(declare-fun MapType9Type (T@T T@T) T@T)
(declare-fun MapType9TypeInv0 (T@T) T@T)
(declare-fun MapType9TypeInv1 (T@T) T@T)
(declare-fun MapType9Select (T@U T@U T@U) T@U)
(declare-fun MapType9Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type Tagclass._System.___hFunc5) TyTagType)) (= (type Tagclass._System.___hPartialFunc5) TyTagType)) (= (type Tagclass._System.___hTotalFunc5) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc6) TyTagType)) (= (type Tagclass._System.___hPartialFunc6) TyTagType)) (= (type Tagclass._System.___hTotalFunc6) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc7) TyTagType)) (= (type Tagclass._System.___hPartialFunc7) TyTagType)) (= (type Tagclass._System.___hTotalFunc7) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type |##TSJ.Constants.Constants|) DtCtorIdType)) (= (type Tagclass.TSJ.Constants) TyTagType)) (= (type class.TSJ.Constants) ClassNameType)) (= (type |##TSJ.Variables.Variables|) DtCtorIdType)) (= (type Tagclass.Journal.JournalEntry) TyTagType)) (= (type Tagclass.ThreeStateTypes.SyncReqStatus) TyTagType)) (= (type Tagclass.TSJ.Variables) TyTagType)) (= (type class.TSJ.Variables) ClassNameType)) (= (type |##TSJ.Step.CrashStep|) DtCtorIdType)) (= (type Tagclass.TSJ.Step) TyTagType)) (= (type |##TSJ.Step.Move1to2Step|) DtCtorIdType)) (= (type |##TSJ.Step.Move2to3Step|) DtCtorIdType)) (= (type |##TSJ.Step.ExtendLog1Step|) DtCtorIdType)) (= (type |##TSJ.Step.ExtendLog2Step|) DtCtorIdType)) (= (type |##TSJ.Step.Move3Step|) DtCtorIdType)) (= (type |##TSJ.Step.ReplayStep|) DtCtorIdType)) (= (type Tagclass.UI.Op) TyTagType)) (= (type |##TSJ.Step.PushSyncStep|) DtCtorIdType)) (= (type |##TSJ.Step.PopSyncStep|) DtCtorIdType)) (= (type |##TSJ.Step.StutterStep|) DtCtorIdType)) (= (type class.TSJ.Step) ClassNameType)) (= (type class.TSJ.__default) ClassNameType)) (= (type Tagclass.TSJ.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type Tagclass.KeyType.Key) TyTagType)) (= (type class.KeyType.__default) ClassNameType)) (= (type Tagclass.KeyType.__default) TyTagType)) (= (type |##UI.RangeStart.SInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeStart) TyTagType)) (= (type |##UI.RangeStart.SExclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.NegativeInf|) DtCtorIdType)) (= (type class.UI.RangeStart) ClassNameType)) (= (type |##UI.RangeEnd.EInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeEnd) TyTagType)) (= (type |##UI.RangeEnd.EExclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.PositiveInf|) DtCtorIdType)) (= (type class.UI.RangeEnd) ClassNameType)) (= (type |##UI.SuccResult.SuccResult|) DtCtorIdType)) (= (type Tagclass.UI.SuccResult) TyTagType)) (= (type class.UI.SuccResult) ClassNameType)) (= (type |##UI.SuccResultList.SuccResultList|) DtCtorIdType)) (= (type Tagclass.UI.SuccResultList) TyTagType)) (= (type class.UI.SuccResultList) ClassNameType)) (= (type |##UI.Op.NoOp|) DtCtorIdType)) (= (type |##UI.Op.SyncOp|) DtCtorIdType)) (= (type |##UI.Op.CrashOp|) DtCtorIdType)) (= (type |##UI.Op.PushSyncOp|) DtCtorIdType)) (= (type |##UI.Op.PopSyncOp|) DtCtorIdType)) (= (type |##UI.Op.GetOp|) DtCtorIdType)) (= (type |##UI.Op.PutOp|) DtCtorIdType)) (= (type |##UI.Op.SuccOp|) DtCtorIdType)) (= (type class.UI.Op) ClassNameType)) (= (type class.UI.__default) ClassNameType)) (= (type Tagclass.UI.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type |##ThreeStateTypes.SyncReqStatus.State1|) DtCtorIdType)) (= (type |##ThreeStateTypes.SyncReqStatus.State2|) DtCtorIdType)) (= (type |##ThreeStateTypes.SyncReqStatus.State3|) DtCtorIdType)) (= (type class.ThreeStateTypes.SyncReqStatus) ClassNameType)) (= (type class.ThreeStateTypes.__default) ClassNameType)) (= (type Tagclass.ThreeStateTypes.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type |##Journal.JournalEntry.JournalInsert|) DtCtorIdType)) (= (type class.Journal.JournalEntry) ClassNameType)) (= (type class.Journal.__default) ClassNameType)) (= (type Tagclass.Journal.__default) TyTagType)) (= (type Tagclass.TSJ.SM.Abs.__default) TyTagType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 Tagclass._System.___hFunc5 Tagclass._System.___hPartialFunc5 Tagclass._System.___hTotalFunc5 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc6 Tagclass._System.___hPartialFunc6 Tagclass._System.___hTotalFunc6 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc7 Tagclass._System.___hPartialFunc7 Tagclass._System.___hTotalFunc7 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 |##TSJ.Constants.Constants| Tagclass.TSJ.Constants class.TSJ.Constants |##TSJ.Variables.Variables| Tagclass.Journal.JournalEntry Tagclass.ThreeStateTypes.SyncReqStatus Tagclass.TSJ.Variables class.TSJ.Variables |##TSJ.Step.CrashStep| Tagclass.TSJ.Step |##TSJ.Step.Move1to2Step| |##TSJ.Step.Move2to3Step| |##TSJ.Step.ExtendLog1Step| |##TSJ.Step.ExtendLog2Step| |##TSJ.Step.Move3Step| |##TSJ.Step.ReplayStep| Tagclass.UI.Op |##TSJ.Step.PushSyncStep| |##TSJ.Step.PopSyncStep| |##TSJ.Step.StutterStep| class.TSJ.Step class.TSJ.__default Tagclass.TSJ.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default Tagclass.ValueType.Value class.ValueType.__default Tagclass.ValueType.__default Tagclass.KeyType.Key class.KeyType.__default Tagclass.KeyType.__default |##UI.RangeStart.SInclusive| Tagclass.UI.RangeStart |##UI.RangeStart.SExclusive| |##UI.RangeStart.NegativeInf| class.UI.RangeStart |##UI.RangeEnd.EInclusive| Tagclass.UI.RangeEnd |##UI.RangeEnd.EExclusive| |##UI.RangeEnd.PositiveInf| class.UI.RangeEnd |##UI.SuccResult.SuccResult| Tagclass.UI.SuccResult class.UI.SuccResult |##UI.SuccResultList.SuccResultList| Tagclass.UI.SuccResultList class.UI.SuccResultList |##UI.Op.NoOp| |##UI.Op.SyncOp| |##UI.Op.CrashOp| |##UI.Op.PushSyncOp| |##UI.Op.PopSyncOp| |##UI.Op.GetOp| |##UI.Op.PutOp| |##UI.Op.SuccOp| class.UI.Op class.UI.__default Tagclass.UI.__default |##Options.Option.None| Tagclass.Options.Option |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.Maps.__default Tagclass.Maps.__default |##ThreeStateTypes.SyncReqStatus.State1| |##ThreeStateTypes.SyncReqStatus.State2| |##ThreeStateTypes.SyncReqStatus.State3| class.ThreeStateTypes.SyncReqStatus class.ThreeStateTypes.__default Tagclass.ThreeStateTypes.__default class.Sequences.__default Tagclass.Sequences.__default class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default Tagclass.ValueMessage.Delta Tagclass.ValueMessage.Message |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message |##Journal.JournalEntry.JournalInsert| class.Journal.JournalEntry class.Journal.__default Tagclass.Journal.__default Tagclass.TSJ.SM.Abs.__default) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |319| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |320| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |321| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |322| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |323| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |324| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |325| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |326| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |327| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |328| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |329| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |330| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |331| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |332| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |333| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |334| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |335| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |336| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |337| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |338| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |339| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |340| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |341| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |342| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |343| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |344| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |345| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |346| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |347| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |348| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |349| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |350| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |351| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |352| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |353| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |354| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |355| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |356| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |357| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |358| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |359| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |360| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |361| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |362| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |363| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |364| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |365| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |366| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |368| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |370| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |372| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |373| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |375| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |377| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |379| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |381| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |383| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |385| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |387| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |389| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |391| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |392| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |393| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |394| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |395| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |396| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |397| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |398| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |399| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |400| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |401| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |402| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |403| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |404| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |405| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |406| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |407| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |408| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |409| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |410| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |411| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |412| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |413| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |414| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |415| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |416| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |417| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |418| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |419| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |420| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |421| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |422| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |423| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |424| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |425| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |426| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |427| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |428| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |429| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |430| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |435| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |436| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |437| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |438| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |439| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |440| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |441| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |442| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |443| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |444| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |445| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |446| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |447| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |448| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |449| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |450| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |451| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |452| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |453| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |454| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |455| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |456| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |457| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |458| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |459| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |461| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |463| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |464| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |466| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |467| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |468| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |469| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |470| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |471| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |472| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |473| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |474| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |475| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |476| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |477| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |478| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |479| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |480| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |481| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |483| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |485| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |486| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |488| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |489| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |490| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |491| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |492| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |493| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |495| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |496| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |497| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |498| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |499| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |500| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |501| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |502| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |503| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |504| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |505| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |506| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |507| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |508| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |509| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |510| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |511| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |512| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |513| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |514| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |515| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |517| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |519| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |520| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |522| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |523| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |524| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |525| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |526| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |527| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |528| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |529| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |530| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |532| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |533| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |534| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |535| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |536| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |537| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |538| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |539| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |540| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |541| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |542| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |543| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |544| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |545| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |546| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |547| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |548| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |549| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |551| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |552| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |553| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |554| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |556| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |558| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |560| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |561| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |563| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |564| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |565| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |566| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |567| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |568| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |569| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |570| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |571| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |572| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |573| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |574| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |575| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |576| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |577| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |578| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |579| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |580| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |581| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |582| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |583| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |584| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |585| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |586| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |587| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |588| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |589| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |591| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |592| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |593| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |594| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |595| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |596| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |597| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |598| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |599| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |600| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |601| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |602| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |605| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |606| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |608| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |610| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |611| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |612| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |613| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |614| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |615| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |616| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |619| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |620| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |621| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |622| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |623| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |624| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |625| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |626| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |627| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |628| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |629| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |630| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |631| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |632| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |633| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |634| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |635| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |636| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |637| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |638| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |639| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |640| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |641| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |642| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |643| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |644| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |645| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |646| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |647| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |648| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |649| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |650| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |651| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |652| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |653| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |654| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |655| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |656| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |657| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |658| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |659| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |660| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |661| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |662| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |663| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |664| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |665| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |666| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |667| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |668| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |669| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |670| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |671| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |672| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |673| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |674| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |675| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |676| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |677| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |678| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |679| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |680| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |682| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |683| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |684| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |686| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |687| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |688| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |689| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |690| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |691| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |692| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |693| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |694| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |696| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |701| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |702| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |705| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |706| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |707| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |708| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |709| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |710| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |711| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |712| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |713| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |715| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |717| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |718| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |719| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |721| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |722| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |723| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |724| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |726| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |727| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |728| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |729| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |730| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |734| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |736| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |737| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |738| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |739| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |744| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |745| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |746| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |747| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |748| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |750| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) (arg2@@24 T@U) (arg3@@10 T@U) (arg4@@3 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@139 arg1@@63 arg2@@24 arg3@@10 arg4@@3)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@139 arg1@@63 arg2@@24 arg3@@10 arg4@@3)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$T3| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@18| |#$T1@@18| |#$T2| |#$T3| |#$R@@31|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |752| :pattern ( (Tclass._System.___hFunc4 |#$T0@@18| |#$T1@@18| |#$T2| |#$T3| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$T3@@0| T@U) (|#$R@@32| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@19| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hFunc4 |#$T0@@19| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$T3@@1| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@20| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@33|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hFunc4 |#$T0@@20| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@33|)) )))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@142)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@142)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$T3@@2| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@21| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@34|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hFunc4 |#$T0@@21| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@34|)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@143)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@143)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$T3@@3| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@22| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@35|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |756| :pattern ( (Tclass._System.___hFunc4 |#$T0@@22| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@35|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@144)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@144)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$T3@@4| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@23| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Tclass._System.___hFunc4 |#$T0@@23| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$T3@@5| T@U) (|#$R@@37| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc4 |#$T0@@24| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc4 |#$T0@@24| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc4 |#$T0@@24| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@37|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@145 T@T) (arg1@@64 T@T) (arg2@@25 T@T) (arg3@@11 T@T) (arg4@@4 T@T) (arg5@@1 T@T) ) (! (= (Ctor (MapType3Type arg0@@145 arg1@@64 arg2@@25 arg3@@11 arg4@@4 arg5@@1)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@146 T@T) (arg1@@65 T@T) (arg2@@26 T@T) (arg3@@12 T@T) (arg4@@5 T@T) (arg5@@2 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@146 arg1@@65 arg2@@26 arg3@@12 arg4@@5 arg5@@2)) arg0@@146) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@146 arg1@@65 arg2@@26 arg3@@12 arg4@@5 arg5@@2)) ))) (forall ((arg0@@147 T@T) (arg1@@66 T@T) (arg2@@27 T@T) (arg3@@13 T@T) (arg4@@6 T@T) (arg5@@3 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@147 arg1@@66 arg2@@27 arg3@@13 arg4@@6 arg5@@3)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@147 arg1@@66 arg2@@27 arg3@@13 arg4@@6 arg5@@3)) ))) (forall ((arg0@@148 T@T) (arg1@@67 T@T) (arg2@@28 T@T) (arg3@@14 T@T) (arg4@@7 T@T) (arg5@@4 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@148 arg1@@67 arg2@@28 arg3@@14 arg4@@7 arg5@@4)) arg2@@28) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@148 arg1@@67 arg2@@28 arg3@@14 arg4@@7 arg5@@4)) ))) (forall ((arg0@@149 T@T) (arg1@@68 T@T) (arg2@@29 T@T) (arg3@@15 T@T) (arg4@@8 T@T) (arg5@@5 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@149 arg1@@68 arg2@@29 arg3@@15 arg4@@8 arg5@@5)) arg3@@15) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@149 arg1@@68 arg2@@29 arg3@@15 arg4@@8 arg5@@5)) ))) (forall ((arg0@@150 T@T) (arg1@@69 T@T) (arg2@@30 T@T) (arg3@@16 T@T) (arg4@@9 T@T) (arg5@@6 T@T) ) (! (= (MapType3TypeInv4 (MapType3Type arg0@@150 arg1@@69 arg2@@30 arg3@@16 arg4@@9 arg5@@6)) arg4@@9) :qid |typeInv:MapType3TypeInv4| :pattern ( (MapType3Type arg0@@150 arg1@@69 arg2@@30 arg3@@16 arg4@@9 arg5@@6)) ))) (forall ((arg0@@151 T@T) (arg1@@70 T@T) (arg2@@31 T@T) (arg3@@17 T@T) (arg4@@10 T@T) (arg5@@7 T@T) ) (! (= (MapType3TypeInv5 (MapType3Type arg0@@151 arg1@@70 arg2@@31 arg3@@17 arg4@@10 arg5@@7)) arg5@@7) :qid |typeInv:MapType3TypeInv5| :pattern ( (MapType3Type arg0@@151 arg1@@70 arg2@@31 arg3@@17 arg4@@10 arg5@@7)) ))) (forall ((arg0@@152 T@U) (arg1@@71 T@U) (arg2@@32 T@U) (arg3@@18 T@U) (arg4@@11 T@U) (arg5@@8 T@U) ) (! (let ((aVar5 (MapType3TypeInv5 (type arg0@@152)))) (= (type (MapType3Select arg0@@152 arg1@@71 arg2@@32 arg3@@18 arg4@@11 arg5@@8)) aVar5)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@152 arg1@@71 arg2@@32 arg3@@18 arg4@@11 arg5@@8)) ))) (forall ((arg0@@153 T@U) (arg1@@72 T@U) (arg2@@33 T@U) (arg3@@19 T@U) (arg4@@12 T@U) (arg5@@9 T@U) (arg6@@1 T@U) ) (! (let ((aVar5@@0 (type arg6@@1))) (let ((aVar4 (type arg5@@9))) (let ((aVar3@@2 (type arg4@@12))) (let ((aVar2@@0 (type arg3@@19))) (let ((aVar1@@3 (type arg2@@33))) (let ((aVar0@@1 (type arg1@@72))) (= (type (MapType3Store arg0@@153 arg1@@72 arg2@@33 arg3@@19 arg4@@12 arg5@@9 arg6@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@0 aVar3@@2 aVar4 aVar5@@0)))))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@153 arg1@@72 arg2@@33 arg3@@19 arg4@@12 arg5@@9 arg6@@1)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@4 T@U) (x3 T@U) (x4 T@U) (val@@11 T@U) ) (! (let ((aVar5@@1 (MapType3TypeInv5 (type m@@32)))) (=> (= (type val@@11) aVar5@@1) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 x2@@4 x3 x4 val@@11) x0@@10 x1@@4 x2@@4 x3 x4) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@5 T@U) (x3@@0 T@U) (x4@@0 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@3 T@U) (y3 T@U) (y4 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 x2@@5 x3@@0 x4@@0 val@@12) y0@@7 y1@@3 y2@@3 y3 y4) (MapType3Select m@@33 y0@@7 y1@@3 y2@@3 y3 y4))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@6 T@U) (x3@@1 T@U) (x4@@1 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@4 T@U) (y3@@0 T@U) (y4@@0 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 x2@@6 x3@@1 x4@@1 val@@13) y0@@8 y1@@4 y2@@4 y3@@0 y4@@0) (MapType3Select m@@34 y0@@8 y1@@4 y2@@4 y3@@0 y4@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@7 T@U) (x3@@2 T@U) (x4@@2 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@5 T@U) (y3@@1 T@U) (y4@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 x2@@7 x3@@2 x4@@2 val@@14) y0@@9 y1@@5 y2@@5 y3@@1 y4@@1) (MapType3Select m@@35 y0@@9 y1@@5 y2@@5 y3@@1 y4@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@15 T@U) (m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@8 T@U) (x3@@3 T@U) (x4@@3 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@6 T@U) (y3@@2 T@U) (y4@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType3Select (MapType3Store m@@36 x0@@14 x1@@8 x2@@8 x3@@3 x4@@3 val@@15) y0@@10 y1@@6 y2@@6 y3@@2 y4@@2) (MapType3Select m@@36 y0@@10 y1@@6 y2@@6 y3@@2 y4@@2))) :qid |mapAx1:MapType3Select:3| :weight 0 ))) (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@9 T@U) (x3@@4 T@U) (x4@@4 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@7 T@U) (y3@@3 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType3Select (MapType3Store m@@37 x0@@15 x1@@9 x2@@9 x3@@4 x4@@4 val@@16) y0@@11 y1@@7 y2@@7 y3@@3 y4@@3) (MapType3Select m@@37 y0@@11 y1@@7 y2@@7 y3@@3 y4@@3))) :qid |mapAx1:MapType3Select:4| :weight 0 ))) (forall ((val@@17 T@U) (m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4@@5 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@38 x0@@16 x1@@10 x2@@10 x3@@5 x4@@5 val@@17) y0@@12 y1@@8 y2@@8 y3@@4 y4@@4) (MapType3Select m@@38 y0@@12 y1@@8 y2@@8 y3@@4 y4@@4))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@154 T@U) (arg1@@73 T@U) (arg2@@34 T@U) (arg3@@20 T@U) (arg4@@13 T@U) (arg5@@10 T@U) (arg6@@2 T@U) (arg7 T@U) (arg8 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@154 arg1@@73 arg2@@34 arg3@@20 arg4@@13 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@154 arg1@@73 arg2@@34 arg3@@20 arg4@@13 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) ))) (forall ((arg0@@155 T@U) (arg1@@74 T@U) (arg2@@35 T@U) ) (! (= (type (Handle4 arg0@@155 arg1@@74 arg2@@35)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@155 arg1@@74 arg2@@35)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (t2@@14 T@U) (t3 T@U) (t4 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) (bx1@@15 T@U) (bx2 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type t4) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@42 t1@@18 t2@@14 t3 t4 heap@@11 (Handle4 h@@34 r@@16 rd@@5) bx0@@15 bx1@@15 bx2 bx3) (MapType3Select h@@34 heap@@11 bx0@@15 bx1@@15 bx2 bx3))) :qid |unknown.0:0| :skolemid |759| :pattern ( (Apply4 t0@@42 t1@@18 t2@@14 t3 t4 heap@@11 (Handle4 h@@34 r@@16 rd@@5) bx0@@15 bx1@@15 bx2 bx3)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (t2@@15 T@U) (t3@@0 T@U) (t4@@0 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) (bx1@@16 T@U) (bx2@@0 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type t4@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16 bx1@@16 bx2@@0 bx3@@0))) (Requires4 t0@@43 t1@@19 t2@@15 t3@@0 t4@@0 heap@@12 (Handle4 h@@35 r@@17 rd@@6) bx0@@16 bx1@@16 bx2@@0 bx3@@0)) :qid |unknown.0:0| :skolemid |760| :pattern ( (Requires4 t0@@43 t1@@19 t2@@15 t3@@0 t4@@0 heap@@12 (Handle4 h@@35 r@@17 rd@@6) bx0@@16 bx1@@16 bx2@@0 bx3@@0)) )))
(assert (forall ((arg0@@156 T@U) (arg1@@75 T@U) (arg2@@36 T@U) (arg3@@21 T@U) (arg4@@14 T@U) (arg5@@11 T@U) (arg6@@3 T@U) (arg7@@0 T@U) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@156 arg1@@75 arg2@@36 arg3@@21 arg4@@14 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@156 arg1@@75 arg2@@36 arg3@@21 arg4@@14 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (t2@@16 T@U) (t3@@1 T@U) (t4@@1 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx3@@1 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type t4@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@44 t1@@20 t2@@16 t3@@1 t4@@1 heap@@13 (Handle4 h@@36 r@@18 rd@@7) bx0@@17 bx1@@17 bx2@@1 bx3@@1) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17 bx1@@17 bx2@@1 bx3@@1) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17 bx1@@17 bx2@@1 bx3@@1) bx@@53)) (U_2_bool (MapType0Select (Reads4 t0@@44 t1@@20 t2@@16 t3@@1 t4@@1 heap@@13 (Handle4 h@@36 r@@18 rd@@7) bx0@@17 bx1@@17 bx2@@1 bx3@@1) bx@@53))))) :qid |unknown.0:0| :skolemid |761| :pattern ( (MapType0Select (Reads4 t0@@44 t1@@20 t2@@16 t3@@1 t4@@1 heap@@13 (Handle4 h@@36 r@@18 rd@@7) bx0@@17 bx1@@17 bx2@@1 bx3@@1) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (t2@@17 T@U) (t3@@2 T@U) (t4@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) (bx1@@18 T@U) (bx2@@2 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type t4@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and (and (and ($IsBox bx0@@18 t0@@45) ($IsBox bx1@@18 t1@@21)) ($IsBox bx2@@2 t2@@17)) ($IsBox bx3@@2 t3@@2)) ($Is f@@29 (Tclass._System.___hFunc4 t0@@45 t1@@21 t2@@17 t3@@2 t4@@2)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads4 t0@@45 t1@@21 t2@@17 t3@@2 t4@@2 h0@@12 f@@29 bx0@@18 bx1@@18 bx2@@2 bx3@@2) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |762| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads4 t0@@45 t1@@21 t2@@17 t3@@2 t4@@2 h0@@12 f@@29 bx0@@18 bx1@@18 bx2@@2 bx3@@2) (Reads4 t0@@45 t1@@21 t2@@17 t3@@2 t4@@2 h1@@12 f@@29 bx0@@18 bx1@@18 bx2@@2 bx3@@2))) :qid |unknown.0:0| :skolemid |763| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads4 t0@@45 t1@@21 t2@@17 t3@@2 t4@@2 h1@@12 f@@29 bx0@@18 bx1@@18 bx2@@2 bx3@@2)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2@@18 T@U) (t3@@3 T@U) (t4@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) (bx1@@19 T@U) (bx2@@3 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type t4@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and (and (and ($IsBox bx0@@19 t0@@46) ($IsBox bx1@@19 t1@@22)) ($IsBox bx2@@3 t2@@18)) ($IsBox bx3@@3 t3@@3)) ($Is f@@30 (Tclass._System.___hFunc4 t0@@46 t1@@22 t2@@18 t3@@3 t4@@3)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads4 t0@@46 t1@@22 t2@@18 t3@@3 t4@@3 h1@@13 f@@30 bx0@@19 bx1@@19 bx2@@3 bx3@@3) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |764| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads4 t0@@46 t1@@22 t2@@18 t3@@3 t4@@3 h0@@13 f@@30 bx0@@19 bx1@@19 bx2@@3 bx3@@3) (Reads4 t0@@46 t1@@22 t2@@18 t3@@3 t4@@3 h1@@13 f@@30 bx0@@19 bx1@@19 bx2@@3 bx3@@3))) :qid |unknown.0:0| :skolemid |765| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads4 t0@@46 t1@@22 t2@@18 t3@@3 t4@@3 h1@@13 f@@30 bx0@@19 bx1@@19 bx2@@3 bx3@@3)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@19 T@U) (t3@@4 T@U) (t4@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) (bx1@@20 T@U) (bx2@@4 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type t4@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and (and (and ($IsBox bx0@@20 t0@@47) ($IsBox bx1@@20 t1@@23)) ($IsBox bx2@@4 t2@@19)) ($IsBox bx3@@4 t3@@4)) ($Is f@@31 (Tclass._System.___hFunc4 t0@@47 t1@@23 t2@@19 t3@@4 t4@@4)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads4 t0@@47 t1@@23 t2@@19 t3@@4 t4@@4 h0@@14 f@@31 bx0@@20 bx1@@20 bx2@@4 bx3@@4) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |766| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires4 t0@@47 t1@@23 t2@@19 t3@@4 t4@@4 h0@@14 f@@31 bx0@@20 bx1@@20 bx2@@4 bx3@@4) (Requires4 t0@@47 t1@@23 t2@@19 t3@@4 t4@@4 h1@@14 f@@31 bx0@@20 bx1@@20 bx2@@4 bx3@@4)) (=> (Requires4 t0@@47 t1@@23 t2@@19 t3@@4 t4@@4 h1@@14 f@@31 bx0@@20 bx1@@20 bx2@@4 bx3@@4) (Requires4 t0@@47 t1@@23 t2@@19 t3@@4 t4@@4 h0@@14 f@@31 bx0@@20 bx1@@20 bx2@@4 bx3@@4)))) :qid |unknown.0:0| :skolemid |767| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires4 t0@@47 t1@@23 t2@@19 t3@@4 t4@@4 h1@@14 f@@31 bx0@@20 bx1@@20 bx2@@4 bx3@@4)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@20 T@U) (t3@@5 T@U) (t4@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) (bx1@@21 T@U) (bx2@@5 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type t4@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and (and (and ($IsBox bx0@@21 t0@@48) ($IsBox bx1@@21 t1@@24)) ($IsBox bx2@@5 t2@@20)) ($IsBox bx3@@5 t3@@5)) ($Is f@@32 (Tclass._System.___hFunc4 t0@@48 t1@@24 t2@@20 t3@@5 t4@@5)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads4 t0@@48 t1@@24 t2@@20 t3@@5 t4@@5 h1@@15 f@@32 bx0@@21 bx1@@21 bx2@@5 bx3@@5) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires4 t0@@48 t1@@24 t2@@20 t3@@5 t4@@5 h0@@15 f@@32 bx0@@21 bx1@@21 bx2@@5 bx3@@5) (Requires4 t0@@48 t1@@24 t2@@20 t3@@5 t4@@5 h1@@15 f@@32 bx0@@21 bx1@@21 bx2@@5 bx3@@5)) (=> (Requires4 t0@@48 t1@@24 t2@@20 t3@@5 t4@@5 h1@@15 f@@32 bx0@@21 bx1@@21 bx2@@5 bx3@@5) (Requires4 t0@@48 t1@@24 t2@@20 t3@@5 t4@@5 h0@@15 f@@32 bx0@@21 bx1@@21 bx2@@5 bx3@@5)))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires4 t0@@48 t1@@24 t2@@20 t3@@5 t4@@5 h1@@15 f@@32 bx0@@21 bx1@@21 bx2@@5 bx3@@5)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@21 T@U) (t3@@6 T@U) (t4@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) (bx1@@22 T@U) (bx2@@6 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type t4@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and (and (and ($IsBox bx0@@22 t0@@49) ($IsBox bx1@@22 t1@@25)) ($IsBox bx2@@6 t2@@21)) ($IsBox bx3@@6 t3@@6)) ($Is f@@33 (Tclass._System.___hFunc4 t0@@49 t1@@25 t2@@21 t3@@6 t4@@6)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads4 t0@@49 t1@@25 t2@@21 t3@@6 t4@@6 h0@@16 f@@33 bx0@@22 bx1@@22 bx2@@6 bx3@@6) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply4 t0@@49 t1@@25 t2@@21 t3@@6 t4@@6 h0@@16 f@@33 bx0@@22 bx1@@22 bx2@@6 bx3@@6) (Apply4 t0@@49 t1@@25 t2@@21 t3@@6 t4@@6 h1@@16 f@@33 bx0@@22 bx1@@22 bx2@@6 bx3@@6))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply4 t0@@49 t1@@25 t2@@21 t3@@6 t4@@6 h1@@16 f@@33 bx0@@22 bx1@@22 bx2@@6 bx3@@6)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@22 T@U) (t3@@7 T@U) (t4@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) (bx1@@23 T@U) (bx2@@7 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type t4@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and (and (and ($IsBox bx0@@23 t0@@50) ($IsBox bx1@@23 t1@@26)) ($IsBox bx2@@7 t2@@22)) ($IsBox bx3@@7 t3@@7)) ($Is f@@34 (Tclass._System.___hFunc4 t0@@50 t1@@26 t2@@22 t3@@7 t4@@7)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads4 t0@@50 t1@@26 t2@@22 t3@@7 t4@@7 h1@@17 f@@34 bx0@@23 bx1@@23 bx2@@7 bx3@@7) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply4 t0@@50 t1@@26 t2@@22 t3@@7 t4@@7 h0@@17 f@@34 bx0@@23 bx1@@23 bx2@@7 bx3@@7) (Apply4 t0@@50 t1@@26 t2@@22 t3@@7 t4@@7 h1@@17 f@@34 bx0@@23 bx1@@23 bx2@@7 bx3@@7))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply4 t0@@50 t1@@26 t2@@22 t3@@7 t4@@7 h1@@17 f@@34 bx0@@23 bx1@@23 bx2@@7 bx3@@7)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@23 T@U) (t3@@8 T@U) (t4@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) (bx1@@24 T@U) (bx2@@8 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type t4@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and (and (and ($IsBox bx0@@24 t0@@51) ($IsBox bx1@@24 t1@@27)) ($IsBox bx2@@8 t2@@23)) ($IsBox bx3@@8 t3@@8)) ($Is f@@35 (Tclass._System.___hFunc4 t0@@51 t1@@27 t2@@23 t3@@8 t4@@8))))) (and (=> (|Set#Equal| (Reads4 t0@@51 t1@@27 t2@@23 t3@@8 t4@@8 $OneHeap f@@35 bx0@@24 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@51 t1@@27 t2@@23 t3@@8 t4@@8 heap@@14 f@@35 bx0@@24 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads4 t0@@51 t1@@27 t2@@23 t3@@8 t4@@8 heap@@14 f@@35 bx0@@24 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@51 t1@@27 t2@@23 t3@@8 t4@@8 $OneHeap f@@35 bx0@@24 bx1@@24 bx2@@8 bx3@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |774| :pattern ( (Reads4 t0@@51 t1@@27 t2@@23 t3@@8 t4@@8 $OneHeap f@@35 bx0@@24 bx1@@24 bx2@@8 bx3@@8) ($IsGoodHeap heap@@14)) :pattern ( (Reads4 t0@@51 t1@@27 t2@@23 t3@@8 t4@@8 heap@@14 f@@35 bx0@@24 bx1@@24 bx2@@8 bx3@@8)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@24 T@U) (t3@@9 T@U) (t4@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) (bx1@@25 T@U) (bx2@@9 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type t4@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and (and (and ($IsBox bx0@@25 t0@@52) ($IsBox bx1@@25 t1@@28)) ($IsBox bx2@@9 t2@@24)) ($IsBox bx3@@9 t3@@9)) ($Is f@@36 (Tclass._System.___hFunc4 t0@@52 t1@@28 t2@@24 t3@@9 t4@@9)))) (|Set#Equal| (Reads4 t0@@52 t1@@28 t2@@24 t3@@9 t4@@9 $OneHeap f@@36 bx0@@25 bx1@@25 bx2@@9 bx3@@9) (|Set#Empty| BoxType)))) (and (=> (Requires4 t0@@52 t1@@28 t2@@24 t3@@9 t4@@9 $OneHeap f@@36 bx0@@25 bx1@@25 bx2@@9 bx3@@9) (Requires4 t0@@52 t1@@28 t2@@24 t3@@9 t4@@9 heap@@15 f@@36 bx0@@25 bx1@@25 bx2@@9 bx3@@9)) (=> (Requires4 t0@@52 t1@@28 t2@@24 t3@@9 t4@@9 heap@@15 f@@36 bx0@@25 bx1@@25 bx2@@9 bx3@@9) (Requires4 t0@@52 t1@@28 t2@@24 t3@@9 t4@@9 $OneHeap f@@36 bx0@@25 bx1@@25 bx2@@9 bx3@@9)))) :qid |unknown.0:0| :skolemid |775| :pattern ( (Requires4 t0@@52 t1@@28 t2@@24 t3@@9 t4@@9 $OneHeap f@@36 bx0@@25 bx1@@25 bx2@@9 bx3@@9) ($IsGoodHeap heap@@15)) :pattern ( (Requires4 t0@@52 t1@@28 t2@@24 t3@@9 t4@@9 heap@@15 f@@36 bx0@@25 bx1@@25 bx2@@9 bx3@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) (t2@@25 T@U) (t3@@10 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= (type t4@@10) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc4 t0@@53 t1@@29 t2@@25 t3@@10 t4@@10)) (forall ((h@@37 T@U) (bx0@@26 T@U) (bx1@@26 T@U) (bx2@@10 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@37) (and (and (and ($IsBox bx0@@26 t0@@53) ($IsBox bx1@@26 t1@@29)) ($IsBox bx2@@10 t2@@25)) ($IsBox bx3@@10 t3@@10))) (Requires4 t0@@53 t1@@29 t2@@25 t3@@10 t4@@10 h@@37 f@@37 bx0@@26 bx1@@26 bx2@@10 bx3@@10))) ($IsBox (Apply4 t0@@53 t1@@29 t2@@25 t3@@10 t4@@10 h@@37 f@@37 bx0@@26 bx1@@26 bx2@@10 bx3@@10) t4@@10)) :qid |DafnyPre.521:12| :skolemid |776| :pattern ( (Apply4 t0@@53 t1@@29 t2@@25 t3@@10 t4@@10 h@@37 f@@37 bx0@@26 bx1@@26 bx2@@10 bx3@@10)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) (bx1@@27 T@U) (bx2@@11 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (= (type bx3@@11) BoxType)) (and (and ($IsGoodHeap h@@38) (and (and (and ($IsBox bx0@@27 t0@@53) ($IsBox bx1@@27 t1@@29)) ($IsBox bx2@@11 t2@@25)) ($IsBox bx3@@11 t3@@10))) (Requires4 t0@@53 t1@@29 t2@@25 t3@@10 t4@@10 h@@38 f@@37 bx0@@27 bx1@@27 bx2@@11 bx3@@11))) ($IsBox (Apply4 t0@@53 t1@@29 t2@@25 t3@@10 t4@@10 h@@38 f@@37 bx0@@27 bx1@@27 bx2@@11 bx3@@11) t4@@10)) :qid |DafnyPre.521:12| :skolemid |776| :pattern ( (Apply4 t0@@53 t1@@29 t2@@25 t3@@10 t4@@10 h@@38 f@@37 bx0@@27 bx1@@27 bx2@@11 bx3@@11)) )) ($Is f@@37 (Tclass._System.___hFunc4 t0@@53 t1@@29 t2@@25 t3@@10 t4@@10))))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($Is f@@37 (Tclass._System.___hFunc4 t0@@53 t1@@29 t2@@25 t3@@10 t4@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (t2@@26 T@U) (t3@@11 T@U) (t4@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2@@0 T@U) (u3 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type t4@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@38 (Tclass._System.___hFunc4 t0@@54 t1@@30 t2@@26 t3@@11 t4@@11)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |778| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 u1@@0)) ($IsBox bx@@55 t1@@30)) :qid |unknown.0:0| :skolemid |779| :pattern ( ($IsBox bx@@55 u1@@0)) :pattern ( ($IsBox bx@@55 t1@@30)) ))) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 u2@@0)) ($IsBox bx@@56 t2@@26)) :qid |unknown.0:0| :skolemid |780| :pattern ( ($IsBox bx@@56 u2@@0)) :pattern ( ($IsBox bx@@56 t2@@26)) ))) (forall ((bx@@57 T@U) ) (!  (=> (and (= (type bx@@57) BoxType) ($IsBox bx@@57 u3)) ($IsBox bx@@57 t3@@11)) :qid |unknown.0:0| :skolemid |781| :pattern ( ($IsBox bx@@57 u3)) :pattern ( ($IsBox bx@@57 t3@@11)) ))) (forall ((bx@@58 T@U) ) (!  (=> (and (= (type bx@@58) BoxType) ($IsBox bx@@58 t4@@11)) ($IsBox bx@@58 u4)) :qid |unknown.0:0| :skolemid |782| :pattern ( ($IsBox bx@@58 t4@@11)) :pattern ( ($IsBox bx@@58 u4)) )))) ($Is f@@38 (Tclass._System.___hFunc4 u0@@1 u1@@0 u2@@0 u3 u4))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($Is f@@38 (Tclass._System.___hFunc4 t0@@54 t1@@30 t2@@26 t3@@11 t4@@11)) ($Is f@@38 (Tclass._System.___hFunc4 u0@@1 u1@@0 u2@@0 u3 u4))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (t2@@27 T@U) (t3@@12 T@U) (t4@@12 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type t4@@12) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12) h@@39) (forall ((bx0@@28 T@U) (bx1@@28 T@U) (bx2@@12 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@28) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (and ($IsBox bx1@@28 t1@@31) ($IsAllocBox bx1@@28 t1@@31 h@@39))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@39))) (and ($IsBox bx3@@12 t3@@12) ($IsAllocBox bx3@@12 t3@@12 h@@39))) (Requires4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12 bx3@@12)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12 bx3@@12) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |784| :pattern ( (MapType0Select (Reads4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12 bx3@@12) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |785| :pattern ( (Apply4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12 bx3@@12)) :pattern ( (Reads4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@28 bx1@@28 bx2@@12 bx3@@12)) ))) (=> (forall ((bx0@@29 T@U) (bx1@@29 T@U) (bx2@@13 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (= (type bx0@@29) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3@@13) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (and ($IsBox bx1@@29 t1@@31) ($IsAllocBox bx1@@29 t1@@31 h@@39))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@39))) (and ($IsBox bx3@@13 t3@@12) ($IsAllocBox bx3@@13 t3@@12 h@@39))) (Requires4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13 bx3@@13)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13 bx3@@13) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |784| :pattern ( (MapType0Select (Reads4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13 bx3@@13) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |785| :pattern ( (Apply4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13 bx3@@13)) :pattern ( (Reads4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12 h@@39 f@@39 bx0@@29 bx1@@29 bx2@@13 bx3@@13)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12) h@@39)))) :qid |unknown.0:0| :skolemid |786| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc4 t0@@55 t1@@31 t2@@27 t3@@12 t4@@12) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (t2@@28 T@U) (t3@@13 T@U) (t4@@13 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type t4@@13) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc4 t0@@56 t1@@32 t2@@28 t3@@13 t4@@13) h@@40))) (forall ((bx0@@30 T@U) (bx1@@30 T@U) (bx2@@14 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (= (type bx0@@30) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@14) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@30 t0@@56 h@@40) ($IsAllocBox bx1@@30 t1@@32 h@@40)) ($IsAllocBox bx2@@14 t2@@28 h@@40)) ($IsAllocBox bx3@@14 t3@@13 h@@40)) (Requires4 t0@@56 t1@@32 t2@@28 t3@@13 t4@@13 h@@40 f@@40 bx0@@30 bx1@@30 bx2@@14 bx3@@14)) ($IsAllocBox (Apply4 t0@@56 t1@@32 t2@@28 t3@@13 t4@@13 h@@40 f@@40 bx0@@30 bx1@@30 bx2@@14 bx3@@14) t4@@13 h@@40))) :qid |unknown.0:0| :skolemid |787| :pattern ( (Apply4 t0@@56 t1@@32 t2@@28 t3@@13 t4@@13 h@@40 f@@40 bx0@@30 bx1@@30 bx2@@14 bx3@@14)) ))) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc4 t0@@56 t1@@32 t2@@28 t3@@13 t4@@13) h@@40)) )))
(assert (forall ((arg0@@157 T@U) (arg1@@76 T@U) (arg2@@37 T@U) (arg3@@22 T@U) (arg4@@15 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@157 arg1@@76 arg2@@37 arg3@@22 arg4@@15)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@157 arg1@@76 arg2@@37 arg3@@22 arg4@@15)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$T3@@6| T@U) (|#$R@@38| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@38|) TyType)) (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@25| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@38|)) Tagclass._System.___hPartialFunc4)) :qid |unknown.0:0| :skolemid |789| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@25| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@38|)) )))
(assert (forall ((arg0@@158 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@158)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@158)) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$T3@@7| T@U) (|#$R@@39| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@39|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@26| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@39|)) |#$T0@@26|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@26| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@39|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@159)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@159)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$T3@@8| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@40|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@27| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@40|)) |#$T1@@27|)) :qid |unknown.0:0| :skolemid |791| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@27| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@40|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@160)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@160)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$T3@@9| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@28| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@41|)) |#$T2@@9|)) :qid |unknown.0:0| :skolemid |792| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@28| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@41|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@161)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@161)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$T3@@10| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@29| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@42|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |793| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@29| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@42|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@162)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$T3@@11| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@30| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@30| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$T3@@12| T@U) (|#$R@@44| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hPartialFunc4 |#$T0@@31| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hPartialFunc4 |#$T0@@31| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |795| :pattern ( ($IsBox bx@@59 (Tclass._System.___hPartialFunc4 |#$T0@@31| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$T3@@13| T@U) (|#$R@@45| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc4 |#$T0@@32| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@45|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc4 |#$T0@@32| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@45|)) (forall ((|x0#0@@3| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@3| |#$T0@@32|) ($IsBox |x1#0@@3| |#$T1@@32|)) ($IsBox |x2#0| |#$T2@@13|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@32| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@45| $OneHeap |f#0@@7| |x0#0@@3| |x1#0@@3| |x2#0| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |796| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc4 |#$T0@@32| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@45|)) (forall ((|x0#0@@4| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@4| |#$T0@@32|) ($IsBox |x1#0@@4| |#$T1@@32|)) ($IsBox |x2#0@@0| |#$T2@@13|)) ($IsBox |x3#0@@0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@32| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@45| $OneHeap |f#0@@7| |x0#0@@4| |x1#0@@4| |x2#0@@0| |x3#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |796| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc4 |#$T0@@32| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@45|))))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc4 |#$T0@@32| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$T3@@14| T@U) (|#$R@@46| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc4 |#$T0@@33| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@46|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc4 |#$T0@@33| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@46|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc4 |#$T0@@33| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@46|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc4 |#$T0@@33| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@46|) $h@@12)))) :qid |unknown.0:0| :skolemid |798| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc4 |#$T0@@33| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@46|) $h@@12)) )))
(assert (forall ((arg0@@163 T@U) (arg1@@77 T@U) (arg2@@38 T@U) (arg3@@23 T@U) (arg4@@16 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@163 arg1@@77 arg2@@38 arg3@@23 arg4@@16)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@163 arg1@@77 arg2@@38 arg3@@23 arg4@@16)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$T3@@15| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@34| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@47|)) Tagclass._System.___hTotalFunc4)) :qid |unknown.0:0| :skolemid |799| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@34| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@47|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@164)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$T3@@16| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@35| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |800| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@35| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@48|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@165)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@165)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$T3@@17| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@36| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@49|)) |#$T1@@36|)) :qid |unknown.0:0| :skolemid |801| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@36| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@49|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@166)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$T3@@18| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@37| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@50|)) |#$T2@@18|)) :qid |unknown.0:0| :skolemid |802| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@37| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@50|)) )))
(assert (forall ((arg0@@167 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@167)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@167)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$T3@@19| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@38| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@51|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |803| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@38| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@51|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@168)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@168)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$T3@@20| T@U) (|#$R@@52| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@52|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@39| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@52|)) |#$R@@52|)) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@39| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@52|)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3@@21| T@U) (|#$R@@53| T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@53|) TyType)) (= (type bx@@60) BoxType)) ($IsBox bx@@60 (Tclass._System.___hTotalFunc4 |#$T0@@40| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@53|))) (and (= ($Box ($Unbox HandleTypeType bx@@60)) bx@@60) ($Is ($Unbox HandleTypeType bx@@60) (Tclass._System.___hTotalFunc4 |#$T0@@40| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@53|)))) :qid |unknown.0:0| :skolemid |805| :pattern ( ($IsBox bx@@60 (Tclass._System.___hTotalFunc4 |#$T0@@40| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@53|))) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@22| T@U) (|#$R@@54| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@54|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc4 |#$T0@@41| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@54|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@54|)) (forall ((|x0#0@@5| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) (|x3#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (= (type |x3#0@@1|) BoxType)) (and (and (and ($IsBox |x0#0@@5| |#$T0@@41|) ($IsBox |x1#0@@5| |#$T1@@41|)) ($IsBox |x2#0@@1| |#$T2@@22|)) ($IsBox |x3#0@@1| |#$T3@@22|))) (Requires4 |#$T0@@41| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@54| $OneHeap |f#0@@9| |x0#0@@5| |x1#0@@5| |x2#0@@1| |x3#0@@1|)) :qid |unknown.0:0| :skolemid |806| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (type |x3#0@@1|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@54|)) (forall ((|x0#0@@6| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) (|x3#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (= (type |x3#0@@2|) BoxType)) (and (and (and ($IsBox |x0#0@@6| |#$T0@@41|) ($IsBox |x1#0@@6| |#$T1@@41|)) ($IsBox |x2#0@@2| |#$T2@@22|)) ($IsBox |x3#0@@2| |#$T3@@22|))) (Requires4 |#$T0@@41| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@54| $OneHeap |f#0@@9| |x0#0@@6| |x1#0@@6| |x2#0@@2| |x3#0@@2|)) :qid |unknown.0:0| :skolemid |806| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (type |x3#0@@2|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc4 |#$T0@@41| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@54|))))) :qid |unknown.0:0| :skolemid |807| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc4 |#$T0@@41| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@54|))) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@23| T@U) (|#$R@@55| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@55|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc4 |#$T0@@42| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@55|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@55|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@55|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc4 |#$T0@@42| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@55|) $h@@13)))) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc4 |#$T0@@42| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@55|) $h@@13)) )))
(assert (forall ((arg0@@169 T@U) (arg1@@78 T@U) (arg2@@39 T@U) (arg3@@24 T@U) (arg4@@17 T@U) (arg5@@12 T@U) ) (! (= (type (Tclass._System.___hFunc5 arg0@@169 arg1@@78 arg2@@39 arg3@@24 arg4@@17 arg5@@12)) TyType) :qid |funType:Tclass._System.___hFunc5| :pattern ( (Tclass._System.___hFunc5 arg0@@169 arg1@@78 arg2@@39 arg3@@24 arg4@@17 arg5@@12)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@24| T@U) (|#$T4| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$T4|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tag (Tclass._System.___hFunc5 |#$T0@@43| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4| |#$R@@56|)) Tagclass._System.___hFunc5)) :qid |unknown.0:0| :skolemid |809| :pattern ( (Tclass._System.___hFunc5 |#$T0@@43| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4| |#$R@@56|)) )))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc5_0 arg0@@170)) TyType) :qid |funType:Tclass._System.___hFunc5_0| :pattern ( (Tclass._System.___hFunc5_0 arg0@@170)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@25| T@U) (|#$T4@@0| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$T4@@0|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hFunc5_0 (Tclass._System.___hFunc5 |#$T0@@44| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@0| |#$R@@57|)) |#$T0@@44|)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Tclass._System.___hFunc5 |#$T0@@44| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@0| |#$R@@57|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc5_1 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc5_1| :pattern ( (Tclass._System.___hFunc5_1 arg0@@171)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@26| T@U) (|#$T4@@1| T@U) (|#$R@@58| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$T4@@1|) TyType)) (= (type |#$R@@58|) TyType)) (= (Tclass._System.___hFunc5_1 (Tclass._System.___hFunc5 |#$T0@@45| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@1| |#$R@@58|)) |#$T1@@45|)) :qid |unknown.0:0| :skolemid |811| :pattern ( (Tclass._System.___hFunc5 |#$T0@@45| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@1| |#$R@@58|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc5_2 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc5_2| :pattern ( (Tclass._System.___hFunc5_2 arg0@@172)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$T3@@27| T@U) (|#$T4@@2| T@U) (|#$R@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$T4@@2|) TyType)) (= (type |#$R@@59|) TyType)) (= (Tclass._System.___hFunc5_2 (Tclass._System.___hFunc5 |#$T0@@46| |#$T1@@46| |#$T2@@27| |#$T3@@27| |#$T4@@2| |#$R@@59|)) |#$T2@@27|)) :qid |unknown.0:0| :skolemid |812| :pattern ( (Tclass._System.___hFunc5 |#$T0@@46| |#$T1@@46| |#$T2@@27| |#$T3@@27| |#$T4@@2| |#$R@@59|)) )))
(assert (forall ((arg0@@173 T@U) ) (! (= (type (Tclass._System.___hFunc5_3 arg0@@173)) TyType) :qid |funType:Tclass._System.___hFunc5_3| :pattern ( (Tclass._System.___hFunc5_3 arg0@@173)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$T3@@28| T@U) (|#$T4@@3| T@U) (|#$R@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$T4@@3|) TyType)) (= (type |#$R@@60|) TyType)) (= (Tclass._System.___hFunc5_3 (Tclass._System.___hFunc5 |#$T0@@47| |#$T1@@47| |#$T2@@28| |#$T3@@28| |#$T4@@3| |#$R@@60|)) |#$T3@@28|)) :qid |unknown.0:0| :skolemid |813| :pattern ( (Tclass._System.___hFunc5 |#$T0@@47| |#$T1@@47| |#$T2@@28| |#$T3@@28| |#$T4@@3| |#$R@@60|)) )))
(assert (forall ((arg0@@174 T@U) ) (! (= (type (Tclass._System.___hFunc5_4 arg0@@174)) TyType) :qid |funType:Tclass._System.___hFunc5_4| :pattern ( (Tclass._System.___hFunc5_4 arg0@@174)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$T3@@29| T@U) (|#$T4@@4| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$T4@@4|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tclass._System.___hFunc5_4 (Tclass._System.___hFunc5 |#$T0@@48| |#$T1@@48| |#$T2@@29| |#$T3@@29| |#$T4@@4| |#$R@@61|)) |#$T4@@4|)) :qid |unknown.0:0| :skolemid |814| :pattern ( (Tclass._System.___hFunc5 |#$T0@@48| |#$T1@@48| |#$T2@@29| |#$T3@@29| |#$T4@@4| |#$R@@61|)) )))
(assert (forall ((arg0@@175 T@U) ) (! (= (type (Tclass._System.___hFunc5_5 arg0@@175)) TyType) :qid |funType:Tclass._System.___hFunc5_5| :pattern ( (Tclass._System.___hFunc5_5 arg0@@175)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$T3@@30| T@U) (|#$T4@@5| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$T4@@5|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hFunc5_5 (Tclass._System.___hFunc5 |#$T0@@49| |#$T1@@49| |#$T2@@30| |#$T3@@30| |#$T4@@5| |#$R@@62|)) |#$R@@62|)) :qid |unknown.0:0| :skolemid |815| :pattern ( (Tclass._System.___hFunc5 |#$T0@@49| |#$T1@@49| |#$T2@@30| |#$T3@@30| |#$T4@@5| |#$R@@62|)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$T3@@31| T@U) (|#$T4@@6| T@U) (|#$R@@63| T@U) (bx@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@31|) TyType)) (= (type |#$T4@@6|) TyType)) (= (type |#$R@@63|) TyType)) (= (type bx@@61) BoxType)) ($IsBox bx@@61 (Tclass._System.___hFunc5 |#$T0@@50| |#$T1@@50| |#$T2@@31| |#$T3@@31| |#$T4@@6| |#$R@@63|))) (and (= ($Box ($Unbox HandleTypeType bx@@61)) bx@@61) ($Is ($Unbox HandleTypeType bx@@61) (Tclass._System.___hFunc5 |#$T0@@50| |#$T1@@50| |#$T2@@31| |#$T3@@31| |#$T4@@6| |#$R@@63|)))) :qid |unknown.0:0| :skolemid |816| :pattern ( ($IsBox bx@@61 (Tclass._System.___hFunc5 |#$T0@@50| |#$T1@@50| |#$T2@@31| |#$T3@@31| |#$T4@@6| |#$R@@63|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@176 T@T) (arg1@@79 T@T) (arg2@@40 T@T) (arg3@@25 T@T) (arg4@@18 T@T) (arg5@@13 T@T) (arg6@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@176 arg1@@79 arg2@@40 arg3@@25 arg4@@18 arg5@@13 arg6@@4)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@177 T@T) (arg1@@80 T@T) (arg2@@41 T@T) (arg3@@26 T@T) (arg4@@19 T@T) (arg5@@14 T@T) (arg6@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@177 arg1@@80 arg2@@41 arg3@@26 arg4@@19 arg5@@14 arg6@@5)) arg0@@177) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@177 arg1@@80 arg2@@41 arg3@@26 arg4@@19 arg5@@14 arg6@@5)) ))) (forall ((arg0@@178 T@T) (arg1@@81 T@T) (arg2@@42 T@T) (arg3@@27 T@T) (arg4@@20 T@T) (arg5@@15 T@T) (arg6@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@178 arg1@@81 arg2@@42 arg3@@27 arg4@@20 arg5@@15 arg6@@6)) arg1@@81) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@178 arg1@@81 arg2@@42 arg3@@27 arg4@@20 arg5@@15 arg6@@6)) ))) (forall ((arg0@@179 T@T) (arg1@@82 T@T) (arg2@@43 T@T) (arg3@@28 T@T) (arg4@@21 T@T) (arg5@@16 T@T) (arg6@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@179 arg1@@82 arg2@@43 arg3@@28 arg4@@21 arg5@@16 arg6@@7)) arg2@@43) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@179 arg1@@82 arg2@@43 arg3@@28 arg4@@21 arg5@@16 arg6@@7)) ))) (forall ((arg0@@180 T@T) (arg1@@83 T@T) (arg2@@44 T@T) (arg3@@29 T@T) (arg4@@22 T@T) (arg5@@17 T@T) (arg6@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@180 arg1@@83 arg2@@44 arg3@@29 arg4@@22 arg5@@17 arg6@@8)) arg3@@29) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@180 arg1@@83 arg2@@44 arg3@@29 arg4@@22 arg5@@17 arg6@@8)) ))) (forall ((arg0@@181 T@T) (arg1@@84 T@T) (arg2@@45 T@T) (arg3@@30 T@T) (arg4@@23 T@T) (arg5@@18 T@T) (arg6@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@181 arg1@@84 arg2@@45 arg3@@30 arg4@@23 arg5@@18 arg6@@9)) arg4@@23) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@181 arg1@@84 arg2@@45 arg3@@30 arg4@@23 arg5@@18 arg6@@9)) ))) (forall ((arg0@@182 T@T) (arg1@@85 T@T) (arg2@@46 T@T) (arg3@@31 T@T) (arg4@@24 T@T) (arg5@@19 T@T) (arg6@@10 T@T) ) (! (= (MapType4TypeInv5 (MapType4Type arg0@@182 arg1@@85 arg2@@46 arg3@@31 arg4@@24 arg5@@19 arg6@@10)) arg5@@19) :qid |typeInv:MapType4TypeInv5| :pattern ( (MapType4Type arg0@@182 arg1@@85 arg2@@46 arg3@@31 arg4@@24 arg5@@19 arg6@@10)) ))) (forall ((arg0@@183 T@T) (arg1@@86 T@T) (arg2@@47 T@T) (arg3@@32 T@T) (arg4@@25 T@T) (arg5@@20 T@T) (arg6@@11 T@T) ) (! (= (MapType4TypeInv6 (MapType4Type arg0@@183 arg1@@86 arg2@@47 arg3@@32 arg4@@25 arg5@@20 arg6@@11)) arg6@@11) :qid |typeInv:MapType4TypeInv6| :pattern ( (MapType4Type arg0@@183 arg1@@86 arg2@@47 arg3@@32 arg4@@25 arg5@@20 arg6@@11)) ))) (forall ((arg0@@184 T@U) (arg1@@87 T@U) (arg2@@48 T@U) (arg3@@33 T@U) (arg4@@26 T@U) (arg5@@21 T@U) (arg6@@12 T@U) ) (! (let ((aVar6 (MapType4TypeInv6 (type arg0@@184)))) (= (type (MapType4Select arg0@@184 arg1@@87 arg2@@48 arg3@@33 arg4@@26 arg5@@21 arg6@@12)) aVar6)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@184 arg1@@87 arg2@@48 arg3@@33 arg4@@26 arg5@@21 arg6@@12)) ))) (forall ((arg0@@185 T@U) (arg1@@88 T@U) (arg2@@49 T@U) (arg3@@34 T@U) (arg4@@27 T@U) (arg5@@22 T@U) (arg6@@13 T@U) (arg7@@1 T@U) ) (! (let ((aVar6@@0 (type arg7@@1))) (let ((aVar5@@2 (type arg6@@13))) (let ((aVar4@@0 (type arg5@@22))) (let ((aVar3@@3 (type arg4@@27))) (let ((aVar2@@1 (type arg3@@34))) (let ((aVar1@@4 (type arg2@@49))) (let ((aVar0@@2 (type arg1@@88))) (= (type (MapType4Store arg0@@185 arg1@@88 arg2@@49 arg3@@34 arg4@@27 arg5@@22 arg6@@13 arg7@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@1 aVar3@@3 aVar4@@0 aVar5@@2 aVar6@@0))))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@185 arg1@@88 arg2@@49 arg3@@34 arg4@@27 arg5@@22 arg6@@13 arg7@@1)) ))) (forall ((m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@6 T@U) (x5 T@U) (val@@18 T@U) ) (! (let ((aVar6@@1 (MapType4TypeInv6 (type m@@39)))) (=> (= (type val@@18) aVar6@@1) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 x2@@11 x3@@6 x4@@6 x5 val@@18) x0@@17 x1@@11 x2@@11 x3@@6 x4@@6 x5) val@@18))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (and (and (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@7 T@U) (x5@@0 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@5 T@U) (y5 T@U) ) (!  (or (= x0@@18 y0@@13) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 x2@@12 x3@@7 x4@@7 x5@@0 val@@19) y0@@13 y1@@9 y2@@9 y3@@5 y4@@5 y5) (MapType4Select m@@40 y0@@13 y1@@9 y2@@9 y3@@5 y4@@5 y5))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@8 T@U) (x5@@1 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@6 T@U) (y5@@0 T@U) ) (!  (or (= x1@@13 y1@@10) (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 x2@@13 x3@@8 x4@@8 x5@@1 val@@20) y0@@14 y1@@10 y2@@10 y3@@6 y4@@6 y5@@0) (MapType4Select m@@41 y0@@14 y1@@10 y2@@10 y3@@6 y4@@6 y5@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@21 T@U) (m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@9 T@U) (x5@@2 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@7 T@U) (y5@@1 T@U) ) (!  (or (= x2@@14 y2@@11) (= (MapType4Select (MapType4Store m@@42 x0@@20 x1@@14 x2@@14 x3@@9 x4@@9 x5@@2 val@@21) y0@@15 y1@@11 y2@@11 y3@@7 y4@@7 y5@@1) (MapType4Select m@@42 y0@@15 y1@@11 y2@@11 y3@@7 y4@@7 y5@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@22 T@U) (m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@10 T@U) (x5@@3 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@8 T@U) (y5@@2 T@U) ) (!  (or (= x3@@10 y3@@8) (= (MapType4Select (MapType4Store m@@43 x0@@21 x1@@15 x2@@15 x3@@10 x4@@10 x5@@3 val@@22) y0@@16 y1@@12 y2@@12 y3@@8 y4@@8 y5@@2) (MapType4Select m@@43 y0@@16 y1@@12 y2@@12 y3@@8 y4@@8 y5@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@11 T@U) (x5@@4 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@9 T@U) (y5@@3 T@U) ) (!  (or (= x4@@11 y4@@9) (= (MapType4Select (MapType4Store m@@44 x0@@22 x1@@16 x2@@16 x3@@11 x4@@11 x5@@4 val@@23) y0@@17 y1@@13 y2@@13 y3@@9 y4@@9 y5@@3) (MapType4Select m@@44 y0@@17 y1@@13 y2@@13 y3@@9 y4@@9 y5@@3))) :qid |mapAx1:MapType4Select:4| :weight 0 ))) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@17 T@U) (x3@@12 T@U) (x4@@12 T@U) (x5@@5 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@14 T@U) (y3@@10 T@U) (y4@@10 T@U) (y5@@4 T@U) ) (!  (or (= x5@@5 y5@@4) (= (MapType4Select (MapType4Store m@@45 x0@@23 x1@@17 x2@@17 x3@@12 x4@@12 x5@@5 val@@24) y0@@18 y1@@14 y2@@14 y3@@10 y4@@10 y5@@4) (MapType4Select m@@45 y0@@18 y1@@14 y2@@14 y3@@10 y4@@10 y5@@4))) :qid |mapAx1:MapType4Select:5| :weight 0 ))) (forall ((val@@25 T@U) (m@@46 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@18 T@U) (x3@@13 T@U) (x4@@13 T@U) (x5@@6 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@15 T@U) (y3@@11 T@U) (y4@@11 T@U) (y5@@5 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@46 x0@@24 x1@@18 x2@@18 x3@@13 x4@@13 x5@@6 val@@25) y0@@19 y1@@15 y2@@15 y3@@11 y4@@11 y5@@5) (MapType4Select m@@46 y0@@19 y1@@15 y2@@15 y3@@11 y4@@11 y5@@5))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@186 T@U) (arg1@@89 T@U) (arg2@@50 T@U) (arg3@@35 T@U) (arg4@@28 T@U) (arg5@@23 T@U) (arg6@@14 T@U) (arg7@@2 T@U) (arg8@@1 T@U) (arg9@@1 T@U) (arg10@@1 T@U) (arg11 T@U) (arg12 T@U) ) (! (= (type (Apply5 arg0@@186 arg1@@89 arg2@@50 arg3@@35 arg4@@28 arg5@@23 arg6@@14 arg7@@2 arg8@@1 arg9@@1 arg10@@1 arg11 arg12)) BoxType) :qid |funType:Apply5| :pattern ( (Apply5 arg0@@186 arg1@@89 arg2@@50 arg3@@35 arg4@@28 arg5@@23 arg6@@14 arg7@@2 arg8@@1 arg9@@1 arg10@@1 arg11 arg12)) ))) (forall ((arg0@@187 T@U) (arg1@@90 T@U) (arg2@@51 T@U) ) (! (= (type (Handle5 arg0@@187 arg1@@90 arg2@@51)) HandleTypeType) :qid |funType:Handle5| :pattern ( (Handle5 arg0@@187 arg1@@90 arg2@@51)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4@@14 T@U) (t5 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) (bx1@@31 T@U) (bx2@@15 T@U) (bx3@@15 T@U) (bx4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4@@14) TyType)) (= (type t5) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3@@15) BoxType)) (= (type bx4) BoxType)) (= (Apply5 t0@@57 t1@@33 t2@@29 t3@@14 t4@@14 t5 heap@@16 (Handle5 h@@41 r@@21 rd@@8) bx0@@31 bx1@@31 bx2@@15 bx3@@15 bx4) (MapType4Select h@@41 heap@@16 bx0@@31 bx1@@31 bx2@@15 bx3@@15 bx4))) :qid |unknown.0:0| :skolemid |817| :pattern ( (Apply5 t0@@57 t1@@33 t2@@29 t3@@14 t4@@14 t5 heap@@16 (Handle5 h@@41 r@@21 rd@@8) bx0@@31 bx1@@31 bx2@@15 bx3@@15 bx4)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@15 T@U) (t5@@0 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) (bx1@@32 T@U) (bx2@@16 T@U) (bx3@@16 T@U) (bx4@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@15) TyType)) (= (type t5@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@16) BoxType)) (= (type bx4@@0) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32 bx1@@32 bx2@@16 bx3@@16 bx4@@0))) (Requires5 t0@@58 t1@@34 t2@@30 t3@@15 t4@@15 t5@@0 heap@@17 (Handle5 h@@42 r@@22 rd@@9) bx0@@32 bx1@@32 bx2@@16 bx3@@16 bx4@@0)) :qid |unknown.0:0| :skolemid |818| :pattern ( (Requires5 t0@@58 t1@@34 t2@@30 t3@@15 t4@@15 t5@@0 heap@@17 (Handle5 h@@42 r@@22 rd@@9) bx0@@32 bx1@@32 bx2@@16 bx3@@16 bx4@@0)) )))
(assert (forall ((arg0@@188 T@U) (arg1@@91 T@U) (arg2@@52 T@U) (arg3@@36 T@U) (arg4@@29 T@U) (arg5@@24 T@U) (arg6@@15 T@U) (arg7@@3 T@U) (arg8@@2 T@U) (arg9@@2 T@U) (arg10@@2 T@U) (arg11@@0 T@U) (arg12@@0 T@U) ) (! (= (type (Reads5 arg0@@188 arg1@@91 arg2@@52 arg3@@36 arg4@@29 arg5@@24 arg6@@15 arg7@@3 arg8@@2 arg9@@2 arg10@@2 arg11@@0 arg12@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads5| :pattern ( (Reads5 arg0@@188 arg1@@91 arg2@@52 arg3@@36 arg4@@29 arg5@@24 arg6@@15 arg7@@3 arg8@@2 arg9@@2 arg10@@2 arg11@@0 arg12@@0)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@16 T@U) (t5@@1 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx1@@33 T@U) (bx2@@17 T@U) (bx3@@17 T@U) (bx4@@1 T@U) (bx@@62 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@16) TyType)) (= (type t5@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@17) BoxType)) (= (type bx4@@1) BoxType)) (= (type bx@@62) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads5 t0@@59 t1@@35 t2@@31 t3@@16 t4@@16 t5@@1 heap@@18 (Handle5 h@@43 r@@23 rd@@10) bx0@@33 bx1@@33 bx2@@17 bx3@@17 bx4@@1) bx@@62)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@33 bx2@@17 bx3@@17 bx4@@1) bx@@62))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@33 bx2@@17 bx3@@17 bx4@@1) bx@@62)) (U_2_bool (MapType0Select (Reads5 t0@@59 t1@@35 t2@@31 t3@@16 t4@@16 t5@@1 heap@@18 (Handle5 h@@43 r@@23 rd@@10) bx0@@33 bx1@@33 bx2@@17 bx3@@17 bx4@@1) bx@@62))))) :qid |unknown.0:0| :skolemid |819| :pattern ( (MapType0Select (Reads5 t0@@59 t1@@35 t2@@31 t3@@16 t4@@16 t5@@1 heap@@18 (Handle5 h@@43 r@@23 rd@@10) bx0@@33 bx1@@33 bx2@@17 bx3@@17 bx4@@1) bx@@62)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@17 T@U) (t5@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) (bx1@@34 T@U) (bx2@@18 T@U) (bx3@@18 T@U) (bx4@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@17) TyType)) (= (type t5@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@18) BoxType)) (= (type bx4@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and (and (and ($IsBox bx0@@34 t0@@60) ($IsBox bx1@@34 t1@@36)) ($IsBox bx2@@18 t2@@32)) ($IsBox bx3@@18 t3@@17)) ($IsBox bx4@@2 t4@@17)) ($Is f@@41 (Tclass._System.___hFunc5 t0@@60 t1@@36 t2@@32 t3@@17 t4@@17 t5@@2)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads5 t0@@60 t1@@36 t2@@32 t3@@17 t4@@17 t5@@2 h0@@18 f@@41 bx0@@34 bx1@@34 bx2@@18 bx3@@18 bx4@@2) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads5 t0@@60 t1@@36 t2@@32 t3@@17 t4@@17 t5@@2 h0@@18 f@@41 bx0@@34 bx1@@34 bx2@@18 bx3@@18 bx4@@2) (Reads5 t0@@60 t1@@36 t2@@32 t3@@17 t4@@17 t5@@2 h1@@18 f@@41 bx0@@34 bx1@@34 bx2@@18 bx3@@18 bx4@@2))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads5 t0@@60 t1@@36 t2@@32 t3@@17 t4@@17 t5@@2 h1@@18 f@@41 bx0@@34 bx1@@34 bx2@@18 bx3@@18 bx4@@2)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@18 T@U) (t5@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) (bx1@@35 T@U) (bx2@@19 T@U) (bx3@@19 T@U) (bx4@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@18) TyType)) (= (type t5@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@19) BoxType)) (= (type bx4@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and (and (and ($IsBox bx0@@35 t0@@61) ($IsBox bx1@@35 t1@@37)) ($IsBox bx2@@19 t2@@33)) ($IsBox bx3@@19 t3@@18)) ($IsBox bx4@@3 t4@@18)) ($Is f@@42 (Tclass._System.___hFunc5 t0@@61 t1@@37 t2@@33 t3@@18 t4@@18 t5@@3)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads5 t0@@61 t1@@37 t2@@33 t3@@18 t4@@18 t5@@3 h1@@19 f@@42 bx0@@35 bx1@@35 bx2@@19 bx3@@19 bx4@@3) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads5 t0@@61 t1@@37 t2@@33 t3@@18 t4@@18 t5@@3 h0@@19 f@@42 bx0@@35 bx1@@35 bx2@@19 bx3@@19 bx4@@3) (Reads5 t0@@61 t1@@37 t2@@33 t3@@18 t4@@18 t5@@3 h1@@19 f@@42 bx0@@35 bx1@@35 bx2@@19 bx3@@19 bx4@@3))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads5 t0@@61 t1@@37 t2@@33 t3@@18 t4@@18 t5@@3 h1@@19 f@@42 bx0@@35 bx1@@35 bx2@@19 bx3@@19 bx4@@3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@19 T@U) (t5@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) (bx1@@36 T@U) (bx2@@20 T@U) (bx3@@20 T@U) (bx4@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@19) TyType)) (= (type t5@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@20) BoxType)) (= (type bx4@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and (and (and ($IsBox bx0@@36 t0@@62) ($IsBox bx1@@36 t1@@38)) ($IsBox bx2@@20 t2@@34)) ($IsBox bx3@@20 t3@@19)) ($IsBox bx4@@4 t4@@19)) ($Is f@@43 (Tclass._System.___hFunc5 t0@@62 t1@@38 t2@@34 t3@@19 t4@@19 t5@@4)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads5 t0@@62 t1@@38 t2@@34 t3@@19 t4@@19 t5@@4 h0@@20 f@@43 bx0@@36 bx1@@36 bx2@@20 bx3@@20 bx4@@4) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |824| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires5 t0@@62 t1@@38 t2@@34 t3@@19 t4@@19 t5@@4 h0@@20 f@@43 bx0@@36 bx1@@36 bx2@@20 bx3@@20 bx4@@4) (Requires5 t0@@62 t1@@38 t2@@34 t3@@19 t4@@19 t5@@4 h1@@20 f@@43 bx0@@36 bx1@@36 bx2@@20 bx3@@20 bx4@@4)) (=> (Requires5 t0@@62 t1@@38 t2@@34 t3@@19 t4@@19 t5@@4 h1@@20 f@@43 bx0@@36 bx1@@36 bx2@@20 bx3@@20 bx4@@4) (Requires5 t0@@62 t1@@38 t2@@34 t3@@19 t4@@19 t5@@4 h0@@20 f@@43 bx0@@36 bx1@@36 bx2@@20 bx3@@20 bx4@@4)))) :qid |unknown.0:0| :skolemid |825| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires5 t0@@62 t1@@38 t2@@34 t3@@19 t4@@19 t5@@4 h1@@20 f@@43 bx0@@36 bx1@@36 bx2@@20 bx3@@20 bx4@@4)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@20 T@U) (t5@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) (bx1@@37 T@U) (bx2@@21 T@U) (bx3@@21 T@U) (bx4@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@20) TyType)) (= (type t5@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@21) BoxType)) (= (type bx4@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and (and (and ($IsBox bx0@@37 t0@@63) ($IsBox bx1@@37 t1@@39)) ($IsBox bx2@@21 t2@@35)) ($IsBox bx3@@21 t3@@20)) ($IsBox bx4@@5 t4@@20)) ($Is f@@44 (Tclass._System.___hFunc5 t0@@63 t1@@39 t2@@35 t3@@20 t4@@20 t5@@5)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads5 t0@@63 t1@@39 t2@@35 t3@@20 t4@@20 t5@@5 h1@@21 f@@44 bx0@@37 bx1@@37 bx2@@21 bx3@@21 bx4@@5) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |826| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires5 t0@@63 t1@@39 t2@@35 t3@@20 t4@@20 t5@@5 h0@@21 f@@44 bx0@@37 bx1@@37 bx2@@21 bx3@@21 bx4@@5) (Requires5 t0@@63 t1@@39 t2@@35 t3@@20 t4@@20 t5@@5 h1@@21 f@@44 bx0@@37 bx1@@37 bx2@@21 bx3@@21 bx4@@5)) (=> (Requires5 t0@@63 t1@@39 t2@@35 t3@@20 t4@@20 t5@@5 h1@@21 f@@44 bx0@@37 bx1@@37 bx2@@21 bx3@@21 bx4@@5) (Requires5 t0@@63 t1@@39 t2@@35 t3@@20 t4@@20 t5@@5 h0@@21 f@@44 bx0@@37 bx1@@37 bx2@@21 bx3@@21 bx4@@5)))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires5 t0@@63 t1@@39 t2@@35 t3@@20 t4@@20 t5@@5 h1@@21 f@@44 bx0@@37 bx1@@37 bx2@@21 bx3@@21 bx4@@5)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@21 T@U) (t5@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) (bx1@@38 T@U) (bx2@@22 T@U) (bx3@@22 T@U) (bx4@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@21) TyType)) (= (type t5@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@22) BoxType)) (= (type bx4@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and (and (and ($IsBox bx0@@38 t0@@64) ($IsBox bx1@@38 t1@@40)) ($IsBox bx2@@22 t2@@36)) ($IsBox bx3@@22 t3@@21)) ($IsBox bx4@@6 t4@@21)) ($Is f@@45 (Tclass._System.___hFunc5 t0@@64 t1@@40 t2@@36 t3@@21 t4@@21 t5@@6)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads5 t0@@64 t1@@40 t2@@36 t3@@21 t4@@21 t5@@6 h0@@22 f@@45 bx0@@38 bx1@@38 bx2@@22 bx3@@22 bx4@@6) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |828| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply5 t0@@64 t1@@40 t2@@36 t3@@21 t4@@21 t5@@6 h0@@22 f@@45 bx0@@38 bx1@@38 bx2@@22 bx3@@22 bx4@@6) (Apply5 t0@@64 t1@@40 t2@@36 t3@@21 t4@@21 t5@@6 h1@@22 f@@45 bx0@@38 bx1@@38 bx2@@22 bx3@@22 bx4@@6))) :qid |unknown.0:0| :skolemid |829| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply5 t0@@64 t1@@40 t2@@36 t3@@21 t4@@21 t5@@6 h1@@22 f@@45 bx0@@38 bx1@@38 bx2@@22 bx3@@22 bx4@@6)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@22 T@U) (t5@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) (bx1@@39 T@U) (bx2@@23 T@U) (bx3@@23 T@U) (bx4@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@22) TyType)) (= (type t5@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@23) BoxType)) (= (type bx4@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and (and (and ($IsBox bx0@@39 t0@@65) ($IsBox bx1@@39 t1@@41)) ($IsBox bx2@@23 t2@@37)) ($IsBox bx3@@23 t3@@22)) ($IsBox bx4@@7 t4@@22)) ($Is f@@46 (Tclass._System.___hFunc5 t0@@65 t1@@41 t2@@37 t3@@22 t4@@22 t5@@7)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads5 t0@@65 t1@@41 t2@@37 t3@@22 t4@@22 t5@@7 h1@@23 f@@46 bx0@@39 bx1@@39 bx2@@23 bx3@@23 bx4@@7) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |830| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply5 t0@@65 t1@@41 t2@@37 t3@@22 t4@@22 t5@@7 h0@@23 f@@46 bx0@@39 bx1@@39 bx2@@23 bx3@@23 bx4@@7) (Apply5 t0@@65 t1@@41 t2@@37 t3@@22 t4@@22 t5@@7 h1@@23 f@@46 bx0@@39 bx1@@39 bx2@@23 bx3@@23 bx4@@7))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply5 t0@@65 t1@@41 t2@@37 t3@@22 t4@@22 t5@@7 h1@@23 f@@46 bx0@@39 bx1@@39 bx2@@23 bx3@@23 bx4@@7)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@23 T@U) (t5@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) (bx1@@40 T@U) (bx2@@24 T@U) (bx3@@24 T@U) (bx4@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@23) TyType)) (= (type t5@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@24) BoxType)) (= (type bx4@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and (and (and ($IsBox bx0@@40 t0@@66) ($IsBox bx1@@40 t1@@42)) ($IsBox bx2@@24 t2@@38)) ($IsBox bx3@@24 t3@@23)) ($IsBox bx4@@8 t4@@23)) ($Is f@@47 (Tclass._System.___hFunc5 t0@@66 t1@@42 t2@@38 t3@@23 t4@@23 t5@@8))))) (and (=> (|Set#Equal| (Reads5 t0@@66 t1@@42 t2@@38 t3@@23 t4@@23 t5@@8 $OneHeap f@@47 bx0@@40 bx1@@40 bx2@@24 bx3@@24 bx4@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@66 t1@@42 t2@@38 t3@@23 t4@@23 t5@@8 heap@@19 f@@47 bx0@@40 bx1@@40 bx2@@24 bx3@@24 bx4@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads5 t0@@66 t1@@42 t2@@38 t3@@23 t4@@23 t5@@8 heap@@19 f@@47 bx0@@40 bx1@@40 bx2@@24 bx3@@24 bx4@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@66 t1@@42 t2@@38 t3@@23 t4@@23 t5@@8 $OneHeap f@@47 bx0@@40 bx1@@40 bx2@@24 bx3@@24 bx4@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |832| :pattern ( (Reads5 t0@@66 t1@@42 t2@@38 t3@@23 t4@@23 t5@@8 $OneHeap f@@47 bx0@@40 bx1@@40 bx2@@24 bx3@@24 bx4@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads5 t0@@66 t1@@42 t2@@38 t3@@23 t4@@23 t5@@8 heap@@19 f@@47 bx0@@40 bx1@@40 bx2@@24 bx3@@24 bx4@@8)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@24 T@U) (t5@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) (bx1@@41 T@U) (bx2@@25 T@U) (bx3@@25 T@U) (bx4@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@24) TyType)) (= (type t5@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@25) BoxType)) (= (type bx4@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and (and (and ($IsBox bx0@@41 t0@@67) ($IsBox bx1@@41 t1@@43)) ($IsBox bx2@@25 t2@@39)) ($IsBox bx3@@25 t3@@24)) ($IsBox bx4@@9 t4@@24)) ($Is f@@48 (Tclass._System.___hFunc5 t0@@67 t1@@43 t2@@39 t3@@24 t4@@24 t5@@9)))) (|Set#Equal| (Reads5 t0@@67 t1@@43 t2@@39 t3@@24 t4@@24 t5@@9 $OneHeap f@@48 bx0@@41 bx1@@41 bx2@@25 bx3@@25 bx4@@9) (|Set#Empty| BoxType)))) (and (=> (Requires5 t0@@67 t1@@43 t2@@39 t3@@24 t4@@24 t5@@9 $OneHeap f@@48 bx0@@41 bx1@@41 bx2@@25 bx3@@25 bx4@@9) (Requires5 t0@@67 t1@@43 t2@@39 t3@@24 t4@@24 t5@@9 heap@@20 f@@48 bx0@@41 bx1@@41 bx2@@25 bx3@@25 bx4@@9)) (=> (Requires5 t0@@67 t1@@43 t2@@39 t3@@24 t4@@24 t5@@9 heap@@20 f@@48 bx0@@41 bx1@@41 bx2@@25 bx3@@25 bx4@@9) (Requires5 t0@@67 t1@@43 t2@@39 t3@@24 t4@@24 t5@@9 $OneHeap f@@48 bx0@@41 bx1@@41 bx2@@25 bx3@@25 bx4@@9)))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Requires5 t0@@67 t1@@43 t2@@39 t3@@24 t4@@24 t5@@9 $OneHeap f@@48 bx0@@41 bx1@@41 bx2@@25 bx3@@25 bx4@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires5 t0@@67 t1@@43 t2@@39 t3@@24 t4@@24 t5@@9 heap@@20 f@@48 bx0@@41 bx1@@41 bx2@@25 bx3@@25 bx4@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@25 T@U) (t5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@25) TyType)) (= (type t5@@10) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc5 t0@@68 t1@@44 t2@@40 t3@@25 t4@@25 t5@@10)) (forall ((h@@44 T@U) (bx0@@42 T@U) (bx1@@42 T@U) (bx2@@26 T@U) (bx3@@26 T@U) (bx4@@10 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@26) BoxType)) (= (type bx4@@10) BoxType)) (and (and ($IsGoodHeap h@@44) (and (and (and (and ($IsBox bx0@@42 t0@@68) ($IsBox bx1@@42 t1@@44)) ($IsBox bx2@@26 t2@@40)) ($IsBox bx3@@26 t3@@25)) ($IsBox bx4@@10 t4@@25))) (Requires5 t0@@68 t1@@44 t2@@40 t3@@25 t4@@25 t5@@10 h@@44 f@@49 bx0@@42 bx1@@42 bx2@@26 bx3@@26 bx4@@10))) ($IsBox (Apply5 t0@@68 t1@@44 t2@@40 t3@@25 t4@@25 t5@@10 h@@44 f@@49 bx0@@42 bx1@@42 bx2@@26 bx3@@26 bx4@@10) t5@@10)) :qid |DafnyPre.521:12| :skolemid |834| :pattern ( (Apply5 t0@@68 t1@@44 t2@@40 t3@@25 t4@@25 t5@@10 h@@44 f@@49 bx0@@42 bx1@@42 bx2@@26 bx3@@26 bx4@@10)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) (bx1@@43 T@U) (bx2@@27 T@U) (bx3@@27 T@U) (bx4@@11 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@27) BoxType)) (= (type bx4@@11) BoxType)) (and (and ($IsGoodHeap h@@45) (and (and (and (and ($IsBox bx0@@43 t0@@68) ($IsBox bx1@@43 t1@@44)) ($IsBox bx2@@27 t2@@40)) ($IsBox bx3@@27 t3@@25)) ($IsBox bx4@@11 t4@@25))) (Requires5 t0@@68 t1@@44 t2@@40 t3@@25 t4@@25 t5@@10 h@@45 f@@49 bx0@@43 bx1@@43 bx2@@27 bx3@@27 bx4@@11))) ($IsBox (Apply5 t0@@68 t1@@44 t2@@40 t3@@25 t4@@25 t5@@10 h@@45 f@@49 bx0@@43 bx1@@43 bx2@@27 bx3@@27 bx4@@11) t5@@10)) :qid |DafnyPre.521:12| :skolemid |834| :pattern ( (Apply5 t0@@68 t1@@44 t2@@40 t3@@25 t4@@25 t5@@10 h@@45 f@@49 bx0@@43 bx1@@43 bx2@@27 bx3@@27 bx4@@11)) )) ($Is f@@49 (Tclass._System.___hFunc5 t0@@68 t1@@44 t2@@40 t3@@25 t4@@25 t5@@10))))) :qid |unknown.0:0| :skolemid |835| :pattern ( ($Is f@@49 (Tclass._System.___hFunc5 t0@@68 t1@@44 t2@@40 t3@@25 t4@@25 t5@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@26 T@U) (t5@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4@@0 T@U) (u5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@26) TyType)) (= (type t5@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4@@0) TyType)) (= (type u5) TyType)) (and (and (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc5 t0@@69 t1@@45 t2@@41 t3@@26 t4@@26 t5@@11)) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u0@@2)) ($IsBox bx@@63 t0@@69)) :qid |unknown.0:0| :skolemid |836| :pattern ( ($IsBox bx@@63 u0@@2)) :pattern ( ($IsBox bx@@63 t0@@69)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 u1@@1)) ($IsBox bx@@64 t1@@45)) :qid |unknown.0:0| :skolemid |837| :pattern ( ($IsBox bx@@64 u1@@1)) :pattern ( ($IsBox bx@@64 t1@@45)) ))) (forall ((bx@@65 T@U) ) (!  (=> (and (= (type bx@@65) BoxType) ($IsBox bx@@65 u2@@1)) ($IsBox bx@@65 t2@@41)) :qid |unknown.0:0| :skolemid |838| :pattern ( ($IsBox bx@@65 u2@@1)) :pattern ( ($IsBox bx@@65 t2@@41)) ))) (forall ((bx@@66 T@U) ) (!  (=> (and (= (type bx@@66) BoxType) ($IsBox bx@@66 u3@@0)) ($IsBox bx@@66 t3@@26)) :qid |unknown.0:0| :skolemid |839| :pattern ( ($IsBox bx@@66 u3@@0)) :pattern ( ($IsBox bx@@66 t3@@26)) ))) (forall ((bx@@67 T@U) ) (!  (=> (and (= (type bx@@67) BoxType) ($IsBox bx@@67 u4@@0)) ($IsBox bx@@67 t4@@26)) :qid |unknown.0:0| :skolemid |840| :pattern ( ($IsBox bx@@67 u4@@0)) :pattern ( ($IsBox bx@@67 t4@@26)) ))) (forall ((bx@@68 T@U) ) (!  (=> (and (= (type bx@@68) BoxType) ($IsBox bx@@68 t5@@11)) ($IsBox bx@@68 u5)) :qid |unknown.0:0| :skolemid |841| :pattern ( ($IsBox bx@@68 t5@@11)) :pattern ( ($IsBox bx@@68 u5)) )))) ($Is f@@50 (Tclass._System.___hFunc5 u0@@2 u1@@1 u2@@1 u3@@0 u4@@0 u5))) :qid |unknown.0:0| :skolemid |842| :pattern ( ($Is f@@50 (Tclass._System.___hFunc5 t0@@69 t1@@45 t2@@41 t3@@26 t4@@26 t5@@11)) ($Is f@@50 (Tclass._System.___hFunc5 u0@@2 u1@@1 u2@@1 u3@@0 u4@@0 u5))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@27 T@U) (t5@@12 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@27) TyType)) (= (type t5@@12) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12) h@@46) (forall ((bx0@@44 T@U) (bx1@@44 T@U) (bx2@@28 T@U) (bx3@@28 T@U) (bx4@@12 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@44) BoxType) (= (type bx1@@44) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@28) BoxType)) (= (type bx4@@12) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (and ($IsBox bx1@@44 t1@@46) ($IsAllocBox bx1@@44 t1@@46 h@@46))) (and ($IsBox bx2@@28 t2@@42) ($IsAllocBox bx2@@28 t2@@42 h@@46))) (and ($IsBox bx3@@28 t3@@27) ($IsAllocBox bx3@@28 t3@@27 h@@46))) (and ($IsBox bx4@@12 t4@@27) ($IsAllocBox bx4@@12 t4@@27 h@@46))) (Requires5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@44 bx1@@44 bx2@@28 bx3@@28 bx4@@12)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@44 bx1@@44 bx2@@28 bx3@@28 bx4@@12) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |843| :pattern ( (MapType0Select (Reads5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@44 bx1@@44 bx2@@28 bx3@@28 bx4@@12) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |844| :pattern ( (Apply5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@44 bx1@@44 bx2@@28 bx3@@28 bx4@@12)) :pattern ( (Reads5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@44 bx1@@44 bx2@@28 bx3@@28 bx4@@12)) ))) (=> (forall ((bx0@@45 T@U) (bx1@@45 T@U) (bx2@@29 T@U) (bx3@@29 T@U) (bx4@@13 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@45) BoxType) (= (type bx1@@45) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@29) BoxType)) (= (type bx4@@13) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (and ($IsBox bx1@@45 t1@@46) ($IsAllocBox bx1@@45 t1@@46 h@@46))) (and ($IsBox bx2@@29 t2@@42) ($IsAllocBox bx2@@29 t2@@42 h@@46))) (and ($IsBox bx3@@29 t3@@27) ($IsAllocBox bx3@@29 t3@@27 h@@46))) (and ($IsBox bx4@@13 t4@@27) ($IsAllocBox bx4@@13 t4@@27 h@@46))) (Requires5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@45 bx1@@45 bx2@@29 bx3@@29 bx4@@13)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@45 bx1@@45 bx2@@29 bx3@@29 bx4@@13) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |843| :pattern ( (MapType0Select (Reads5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@45 bx1@@45 bx2@@29 bx3@@29 bx4@@13) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |844| :pattern ( (Apply5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@45 bx1@@45 bx2@@29 bx3@@29 bx4@@13)) :pattern ( (Reads5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12 h@@46 f@@51 bx0@@45 bx1@@45 bx2@@29 bx3@@29 bx4@@13)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12) h@@46)))) :qid |unknown.0:0| :skolemid |845| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc5 t0@@70 t1@@46 t2@@42 t3@@27 t4@@27 t5@@12) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@28 T@U) (t5@@13 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@28) TyType)) (= (type t5@@13) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc5 t0@@71 t1@@47 t2@@43 t3@@28 t4@@28 t5@@13) h@@47))) (forall ((bx0@@46 T@U) (bx1@@46 T@U) (bx2@@30 T@U) (bx3@@30 T@U) (bx4@@14 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@46) BoxType) (= (type bx1@@46) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@30) BoxType)) (= (type bx4@@14) BoxType)) (=> (and (and (and (and (and ($IsAllocBox bx0@@46 t0@@71 h@@47) ($IsAllocBox bx1@@46 t1@@47 h@@47)) ($IsAllocBox bx2@@30 t2@@43 h@@47)) ($IsAllocBox bx3@@30 t3@@28 h@@47)) ($IsAllocBox bx4@@14 t4@@28 h@@47)) (Requires5 t0@@71 t1@@47 t2@@43 t3@@28 t4@@28 t5@@13 h@@47 f@@52 bx0@@46 bx1@@46 bx2@@30 bx3@@30 bx4@@14)) ($IsAllocBox (Apply5 t0@@71 t1@@47 t2@@43 t3@@28 t4@@28 t5@@13 h@@47 f@@52 bx0@@46 bx1@@46 bx2@@30 bx3@@30 bx4@@14) t5@@13 h@@47))) :qid |unknown.0:0| :skolemid |846| :pattern ( (Apply5 t0@@71 t1@@47 t2@@43 t3@@28 t4@@28 t5@@13 h@@47 f@@52 bx0@@46 bx1@@46 bx2@@30 bx3@@30 bx4@@14)) ))) :qid |unknown.0:0| :skolemid |847| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc5 t0@@71 t1@@47 t2@@43 t3@@28 t4@@28 t5@@13) h@@47)) )))
(assert (forall ((arg0@@189 T@U) (arg1@@92 T@U) (arg2@@53 T@U) (arg3@@37 T@U) (arg4@@30 T@U) (arg5@@25 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5 arg0@@189 arg1@@92 arg2@@53 arg3@@37 arg4@@30 arg5@@25)) TyType) :qid |funType:Tclass._System.___hPartialFunc5| :pattern ( (Tclass._System.___hPartialFunc5 arg0@@189 arg1@@92 arg2@@53 arg3@@37 arg4@@30 arg5@@25)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$T3@@32| T@U) (|#$T4@@7| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@32|) TyType)) (= (type |#$T4@@7|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tag (Tclass._System.___hPartialFunc5 |#$T0@@51| |#$T1@@51| |#$T2@@32| |#$T3@@32| |#$T4@@7| |#$R@@64|)) Tagclass._System.___hPartialFunc5)) :qid |unknown.0:0| :skolemid |848| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@51| |#$T1@@51| |#$T2@@32| |#$T3@@32| |#$T4@@7| |#$R@@64|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_0 arg0@@190)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_0| :pattern ( (Tclass._System.___hPartialFunc5_0 arg0@@190)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$T3@@33| T@U) (|#$T4@@8| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@33|) TyType)) (= (type |#$T4@@8|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hPartialFunc5_0 (Tclass._System.___hPartialFunc5 |#$T0@@52| |#$T1@@52| |#$T2@@33| |#$T3@@33| |#$T4@@8| |#$R@@65|)) |#$T0@@52|)) :qid |unknown.0:0| :skolemid |849| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@52| |#$T1@@52| |#$T2@@33| |#$T3@@33| |#$T4@@8| |#$R@@65|)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_1 arg0@@191)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_1| :pattern ( (Tclass._System.___hPartialFunc5_1 arg0@@191)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$T3@@34| T@U) (|#$T4@@9| T@U) (|#$R@@66| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@34|) TyType)) (= (type |#$T4@@9|) TyType)) (= (type |#$R@@66|) TyType)) (= (Tclass._System.___hPartialFunc5_1 (Tclass._System.___hPartialFunc5 |#$T0@@53| |#$T1@@53| |#$T2@@34| |#$T3@@34| |#$T4@@9| |#$R@@66|)) |#$T1@@53|)) :qid |unknown.0:0| :skolemid |850| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@53| |#$T1@@53| |#$T2@@34| |#$T3@@34| |#$T4@@9| |#$R@@66|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_2 arg0@@192)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_2| :pattern ( (Tclass._System.___hPartialFunc5_2 arg0@@192)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$T3@@35| T@U) (|#$T4@@10| T@U) (|#$R@@67| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@35|) TyType)) (= (type |#$T4@@10|) TyType)) (= (type |#$R@@67|) TyType)) (= (Tclass._System.___hPartialFunc5_2 (Tclass._System.___hPartialFunc5 |#$T0@@54| |#$T1@@54| |#$T2@@35| |#$T3@@35| |#$T4@@10| |#$R@@67|)) |#$T2@@35|)) :qid |unknown.0:0| :skolemid |851| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@54| |#$T1@@54| |#$T2@@35| |#$T3@@35| |#$T4@@10| |#$R@@67|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_3 arg0@@193)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_3| :pattern ( (Tclass._System.___hPartialFunc5_3 arg0@@193)) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$T3@@36| T@U) (|#$T4@@11| T@U) (|#$R@@68| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@36|) TyType)) (= (type |#$T4@@11|) TyType)) (= (type |#$R@@68|) TyType)) (= (Tclass._System.___hPartialFunc5_3 (Tclass._System.___hPartialFunc5 |#$T0@@55| |#$T1@@55| |#$T2@@36| |#$T3@@36| |#$T4@@11| |#$R@@68|)) |#$T3@@36|)) :qid |unknown.0:0| :skolemid |852| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@55| |#$T1@@55| |#$T2@@36| |#$T3@@36| |#$T4@@11| |#$R@@68|)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_4 arg0@@194)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_4| :pattern ( (Tclass._System.___hPartialFunc5_4 arg0@@194)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$T3@@37| T@U) (|#$T4@@12| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@37|) TyType)) (= (type |#$T4@@12|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tclass._System.___hPartialFunc5_4 (Tclass._System.___hPartialFunc5 |#$T0@@56| |#$T1@@56| |#$T2@@37| |#$T3@@37| |#$T4@@12| |#$R@@69|)) |#$T4@@12|)) :qid |unknown.0:0| :skolemid |853| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@56| |#$T1@@56| |#$T2@@37| |#$T3@@37| |#$T4@@12| |#$R@@69|)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_5 arg0@@195)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_5| :pattern ( (Tclass._System.___hPartialFunc5_5 arg0@@195)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$T3@@38| T@U) (|#$T4@@13| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@38|) TyType)) (= (type |#$T4@@13|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hPartialFunc5_5 (Tclass._System.___hPartialFunc5 |#$T0@@57| |#$T1@@57| |#$T2@@38| |#$T3@@38| |#$T4@@13| |#$R@@70|)) |#$R@@70|)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@57| |#$T1@@57| |#$T2@@38| |#$T3@@38| |#$T4@@13| |#$R@@70|)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$T3@@39| T@U) (|#$T4@@14| T@U) (|#$R@@71| T@U) (bx@@69 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@39|) TyType)) (= (type |#$T4@@14|) TyType)) (= (type |#$R@@71|) TyType)) (= (type bx@@69) BoxType)) ($IsBox bx@@69 (Tclass._System.___hPartialFunc5 |#$T0@@58| |#$T1@@58| |#$T2@@39| |#$T3@@39| |#$T4@@14| |#$R@@71|))) (and (= ($Box ($Unbox HandleTypeType bx@@69)) bx@@69) ($Is ($Unbox HandleTypeType bx@@69) (Tclass._System.___hPartialFunc5 |#$T0@@58| |#$T1@@58| |#$T2@@39| |#$T3@@39| |#$T4@@14| |#$R@@71|)))) :qid |unknown.0:0| :skolemid |855| :pattern ( ($IsBox bx@@69 (Tclass._System.___hPartialFunc5 |#$T0@@58| |#$T1@@58| |#$T2@@39| |#$T3@@39| |#$T4@@14| |#$R@@71|))) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$T3@@40| T@U) (|#$T4@@15| T@U) (|#$R@@72| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@40|) TyType)) (= (type |#$T4@@15|) TyType)) (= (type |#$R@@72|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc5 |#$T0@@59| |#$T1@@59| |#$T2@@40| |#$T3@@40| |#$T4@@15| |#$R@@72|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc5 |#$T0@@59| |#$T1@@59| |#$T2@@40| |#$T3@@40| |#$T4@@15| |#$R@@72|)) (forall ((|x0#0@@7| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) (|x3#0@@3| T@U) (|x4#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0@@3|) BoxType)) (= (type |x4#0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@7| |#$T0@@59|) ($IsBox |x1#0@@7| |#$T1@@59|)) ($IsBox |x2#0@@3| |#$T2@@40|)) ($IsBox |x3#0@@3| |#$T3@@40|)) ($IsBox |x4#0| |#$T4@@15|))) (|Set#Equal| (Reads5 |#$T0@@59| |#$T1@@59| |#$T2@@40| |#$T3@@40| |#$T4@@15| |#$R@@72| $OneHeap |f#0@@11| |x0#0@@7| |x1#0@@7| |x2#0@@3| |x3#0@@3| |x4#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |856| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0@@3|) :no-pattern (type |x4#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0@@3|) :no-pattern (U_2_bool |x3#0@@3|) :no-pattern (U_2_int |x4#0|) :no-pattern (U_2_bool |x4#0|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc5 |#$T0@@59| |#$T1@@59| |#$T2@@40| |#$T3@@40| |#$T4@@15| |#$R@@72|)) (forall ((|x0#0@@8| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) (|x3#0@@4| T@U) (|x4#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@4|) BoxType)) (= (type |x4#0@@0|) BoxType)) (and (and (and (and ($IsBox |x0#0@@8| |#$T0@@59|) ($IsBox |x1#0@@8| |#$T1@@59|)) ($IsBox |x2#0@@4| |#$T2@@40|)) ($IsBox |x3#0@@4| |#$T3@@40|)) ($IsBox |x4#0@@0| |#$T4@@15|))) (|Set#Equal| (Reads5 |#$T0@@59| |#$T1@@59| |#$T2@@40| |#$T3@@40| |#$T4@@15| |#$R@@72| $OneHeap |f#0@@11| |x0#0@@8| |x1#0@@8| |x2#0@@4| |x3#0@@4| |x4#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |856| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@4|) :no-pattern (type |x4#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@4|) :no-pattern (U_2_bool |x3#0@@4|) :no-pattern (U_2_int |x4#0@@0|) :no-pattern (U_2_bool |x4#0@@0|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc5 |#$T0@@59| |#$T1@@59| |#$T2@@40| |#$T3@@40| |#$T4@@15| |#$R@@72|))))) :qid |unknown.0:0| :skolemid |857| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc5 |#$T0@@59| |#$T1@@59| |#$T2@@40| |#$T3@@40| |#$T4@@15| |#$R@@72|))) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$T3@@41| T@U) (|#$T4@@16| T@U) (|#$R@@73| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@41|) TyType)) (= (type |#$T4@@16|) TyType)) (= (type |#$R@@73|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc5 |#$T0@@60| |#$T1@@60| |#$T2@@41| |#$T3@@41| |#$T4@@16| |#$R@@73|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc5 |#$T0@@60| |#$T1@@60| |#$T2@@41| |#$T3@@41| |#$T4@@16| |#$R@@73|) $h@@14)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc5 |#$T0@@60| |#$T1@@60| |#$T2@@41| |#$T3@@41| |#$T4@@16| |#$R@@73|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc5 |#$T0@@60| |#$T1@@60| |#$T2@@41| |#$T3@@41| |#$T4@@16| |#$R@@73|) $h@@14)))) :qid |unknown.0:0| :skolemid |858| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc5 |#$T0@@60| |#$T1@@60| |#$T2@@41| |#$T3@@41| |#$T4@@16| |#$R@@73|) $h@@14)) )))
(assert (forall ((arg0@@196 T@U) (arg1@@93 T@U) (arg2@@54 T@U) (arg3@@38 T@U) (arg4@@31 T@U) (arg5@@26 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5 arg0@@196 arg1@@93 arg2@@54 arg3@@38 arg4@@31 arg5@@26)) TyType) :qid |funType:Tclass._System.___hTotalFunc5| :pattern ( (Tclass._System.___hTotalFunc5 arg0@@196 arg1@@93 arg2@@54 arg3@@38 arg4@@31 arg5@@26)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$T3@@42| T@U) (|#$T4@@17| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@42|) TyType)) (= (type |#$T4@@17|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tag (Tclass._System.___hTotalFunc5 |#$T0@@61| |#$T1@@61| |#$T2@@42| |#$T3@@42| |#$T4@@17| |#$R@@74|)) Tagclass._System.___hTotalFunc5)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@61| |#$T1@@61| |#$T2@@42| |#$T3@@42| |#$T4@@17| |#$R@@74|)) )))
(assert (forall ((arg0@@197 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_0 arg0@@197)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_0| :pattern ( (Tclass._System.___hTotalFunc5_0 arg0@@197)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$T3@@43| T@U) (|#$T4@@18| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@43|) TyType)) (= (type |#$T4@@18|) TyType)) (= (type |#$R@@75|) TyType)) (= (Tclass._System.___hTotalFunc5_0 (Tclass._System.___hTotalFunc5 |#$T0@@62| |#$T1@@62| |#$T2@@43| |#$T3@@43| |#$T4@@18| |#$R@@75|)) |#$T0@@62|)) :qid |unknown.0:0| :skolemid |860| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@62| |#$T1@@62| |#$T2@@43| |#$T3@@43| |#$T4@@18| |#$R@@75|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_1 arg0@@198)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_1| :pattern ( (Tclass._System.___hTotalFunc5_1 arg0@@198)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$T3@@44| T@U) (|#$T4@@19| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@44|) TyType)) (= (type |#$T4@@19|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tclass._System.___hTotalFunc5_1 (Tclass._System.___hTotalFunc5 |#$T0@@63| |#$T1@@63| |#$T2@@44| |#$T3@@44| |#$T4@@19| |#$R@@76|)) |#$T1@@63|)) :qid |unknown.0:0| :skolemid |861| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@63| |#$T1@@63| |#$T2@@44| |#$T3@@44| |#$T4@@19| |#$R@@76|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_2 arg0@@199)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_2| :pattern ( (Tclass._System.___hTotalFunc5_2 arg0@@199)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$T3@@45| T@U) (|#$T4@@20| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@45|) TyType)) (= (type |#$T4@@20|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hTotalFunc5_2 (Tclass._System.___hTotalFunc5 |#$T0@@64| |#$T1@@64| |#$T2@@45| |#$T3@@45| |#$T4@@20| |#$R@@77|)) |#$T2@@45|)) :qid |unknown.0:0| :skolemid |862| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@64| |#$T1@@64| |#$T2@@45| |#$T3@@45| |#$T4@@20| |#$R@@77|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_3 arg0@@200)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_3| :pattern ( (Tclass._System.___hTotalFunc5_3 arg0@@200)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@65| T@U) (|#$T2@@46| T@U) (|#$T3@@46| T@U) (|#$T4@@21| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$T3@@46|) TyType)) (= (type |#$T4@@21|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hTotalFunc5_3 (Tclass._System.___hTotalFunc5 |#$T0@@65| |#$T1@@65| |#$T2@@46| |#$T3@@46| |#$T4@@21| |#$R@@78|)) |#$T3@@46|)) :qid |unknown.0:0| :skolemid |863| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@65| |#$T1@@65| |#$T2@@46| |#$T3@@46| |#$T4@@21| |#$R@@78|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_4 arg0@@201)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_4| :pattern ( (Tclass._System.___hTotalFunc5_4 arg0@@201)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@66| T@U) (|#$T2@@47| T@U) (|#$T3@@47| T@U) (|#$T4@@22| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$T3@@47|) TyType)) (= (type |#$T4@@22|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hTotalFunc5_4 (Tclass._System.___hTotalFunc5 |#$T0@@66| |#$T1@@66| |#$T2@@47| |#$T3@@47| |#$T4@@22| |#$R@@79|)) |#$T4@@22|)) :qid |unknown.0:0| :skolemid |864| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@66| |#$T1@@66| |#$T2@@47| |#$T3@@47| |#$T4@@22| |#$R@@79|)) )))
(assert (forall ((arg0@@202 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_5 arg0@@202)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_5| :pattern ( (Tclass._System.___hTotalFunc5_5 arg0@@202)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@67| T@U) (|#$T2@@48| T@U) (|#$T3@@48| T@U) (|#$T4@@23| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$T3@@48|) TyType)) (= (type |#$T4@@23|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hTotalFunc5_5 (Tclass._System.___hTotalFunc5 |#$T0@@67| |#$T1@@67| |#$T2@@48| |#$T3@@48| |#$T4@@23| |#$R@@80|)) |#$R@@80|)) :qid |unknown.0:0| :skolemid |865| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@67| |#$T1@@67| |#$T2@@48| |#$T3@@48| |#$T4@@23| |#$R@@80|)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@68| T@U) (|#$T2@@49| T@U) (|#$T3@@49| T@U) (|#$T4@@24| T@U) (|#$R@@81| T@U) (bx@@70 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$T3@@49|) TyType)) (= (type |#$T4@@24|) TyType)) (= (type |#$R@@81|) TyType)) (= (type bx@@70) BoxType)) ($IsBox bx@@70 (Tclass._System.___hTotalFunc5 |#$T0@@68| |#$T1@@68| |#$T2@@49| |#$T3@@49| |#$T4@@24| |#$R@@81|))) (and (= ($Box ($Unbox HandleTypeType bx@@70)) bx@@70) ($Is ($Unbox HandleTypeType bx@@70) (Tclass._System.___hTotalFunc5 |#$T0@@68| |#$T1@@68| |#$T2@@49| |#$T3@@49| |#$T4@@24| |#$R@@81|)))) :qid |unknown.0:0| :skolemid |866| :pattern ( ($IsBox bx@@70 (Tclass._System.___hTotalFunc5 |#$T0@@68| |#$T1@@68| |#$T2@@49| |#$T3@@49| |#$T4@@24| |#$R@@81|))) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@69| T@U) (|#$T2@@50| T@U) (|#$T3@@50| T@U) (|#$T4@@25| T@U) (|#$R@@82| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$T3@@50|) TyType)) (= (type |#$T4@@25|) TyType)) (= (type |#$R@@82|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc5 |#$T0@@69| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$R@@82|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc5 |#$T0@@69| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$R@@82|)) (forall ((|x0#0@@9| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) (|x3#0@@5| T@U) (|x4#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@5|) BoxType)) (= (type |x4#0@@1|) BoxType)) (and (and (and (and ($IsBox |x0#0@@9| |#$T0@@69|) ($IsBox |x1#0@@9| |#$T1@@69|)) ($IsBox |x2#0@@5| |#$T2@@50|)) ($IsBox |x3#0@@5| |#$T3@@50|)) ($IsBox |x4#0@@1| |#$T4@@25|))) (Requires5 |#$T0@@69| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$R@@82| $OneHeap |f#0@@13| |x0#0@@9| |x1#0@@9| |x2#0@@5| |x3#0@@5| |x4#0@@1|)) :qid |unknown.0:0| :skolemid |867| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@5|) :no-pattern (type |x4#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@5|) :no-pattern (U_2_bool |x3#0@@5|) :no-pattern (U_2_int |x4#0@@1|) :no-pattern (U_2_bool |x4#0@@1|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc5 |#$T0@@69| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$R@@82|)) (forall ((|x0#0@@10| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) (|x3#0@@6| T@U) (|x4#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@6|) BoxType)) (= (type |x4#0@@2|) BoxType)) (and (and (and (and ($IsBox |x0#0@@10| |#$T0@@69|) ($IsBox |x1#0@@10| |#$T1@@69|)) ($IsBox |x2#0@@6| |#$T2@@50|)) ($IsBox |x3#0@@6| |#$T3@@50|)) ($IsBox |x4#0@@2| |#$T4@@25|))) (Requires5 |#$T0@@69| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$R@@82| $OneHeap |f#0@@13| |x0#0@@10| |x1#0@@10| |x2#0@@6| |x3#0@@6| |x4#0@@2|)) :qid |unknown.0:0| :skolemid |867| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@6|) :no-pattern (type |x4#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@6|) :no-pattern (U_2_bool |x3#0@@6|) :no-pattern (U_2_int |x4#0@@2|) :no-pattern (U_2_bool |x4#0@@2|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc5 |#$T0@@69| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$R@@82|))))) :qid |unknown.0:0| :skolemid |868| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc5 |#$T0@@69| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$R@@82|))) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@70| T@U) (|#$T2@@51| T@U) (|#$T3@@51| T@U) (|#$T4@@26| T@U) (|#$R@@83| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$T3@@51|) TyType)) (= (type |#$T4@@26|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc5 |#$T0@@70| |#$T1@@70| |#$T2@@51| |#$T3@@51| |#$T4@@26| |#$R@@83|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc5 |#$T0@@70| |#$T1@@70| |#$T2@@51| |#$T3@@51| |#$T4@@26| |#$R@@83|) $h@@15)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc5 |#$T0@@70| |#$T1@@70| |#$T2@@51| |#$T3@@51| |#$T4@@26| |#$R@@83|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc5 |#$T0@@70| |#$T1@@70| |#$T2@@51| |#$T3@@51| |#$T4@@26| |#$R@@83|) $h@@15)))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc5 |#$T0@@70| |#$T1@@70| |#$T2@@51| |#$T3@@51| |#$T4@@26| |#$R@@83|) $h@@15)) )))
(assert (forall ((arg0@@203 T@U) (arg1@@94 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@203 arg1@@94)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@203 arg1@@94)) )))
(assert (forall ((|#$T0@@71| T@U) (|#$R@@84| T@U) ) (!  (=> (and (= (type |#$T0@@71|) TyType) (= (type |#$R@@84|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@71| |#$R@@84|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |870| :pattern ( (Tclass._System.___hFunc1 |#$T0@@71| |#$R@@84|)) )))
(assert (forall ((arg0@@204 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@204)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@204)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$R@@85| T@U) ) (!  (=> (and (= (type |#$T0@@72|) TyType) (= (type |#$R@@85|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@72| |#$R@@85|)) |#$T0@@72|)) :qid |unknown.0:0| :skolemid |871| :pattern ( (Tclass._System.___hFunc1 |#$T0@@72| |#$R@@85|)) )))
(assert (forall ((arg0@@205 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@205)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@205)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$R@@86| T@U) ) (!  (=> (and (= (type |#$T0@@73|) TyType) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@73| |#$R@@86|)) |#$R@@86|)) :qid |unknown.0:0| :skolemid |872| :pattern ( (Tclass._System.___hFunc1 |#$T0@@73| |#$R@@86|)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$R@@87| T@U) (bx@@71 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$R@@87|) TyType)) (= (type bx@@71) BoxType)) ($IsBox bx@@71 (Tclass._System.___hFunc1 |#$T0@@74| |#$R@@87|))) (and (= ($Box ($Unbox HandleTypeType bx@@71)) bx@@71) ($Is ($Unbox HandleTypeType bx@@71) (Tclass._System.___hFunc1 |#$T0@@74| |#$R@@87|)))) :qid |unknown.0:0| :skolemid |873| :pattern ( ($IsBox bx@@71 (Tclass._System.___hFunc1 |#$T0@@74| |#$R@@87|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@206 T@T) (arg1@@95 T@T) (arg2@@55 T@T) ) (! (= (Ctor (MapType5Type arg0@@206 arg1@@95 arg2@@55)) 24) :qid |ctor:MapType5Type| )) (forall ((arg0@@207 T@T) (arg1@@96 T@T) (arg2@@56 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@207 arg1@@96 arg2@@56)) arg0@@207) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@207 arg1@@96 arg2@@56)) ))) (forall ((arg0@@208 T@T) (arg1@@97 T@T) (arg2@@57 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@208 arg1@@97 arg2@@57)) arg1@@97) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@208 arg1@@97 arg2@@57)) ))) (forall ((arg0@@209 T@T) (arg1@@98 T@T) (arg2@@58 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@209 arg1@@98 arg2@@58)) arg2@@58) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@209 arg1@@98 arg2@@58)) ))) (forall ((arg0@@210 T@U) (arg1@@99 T@U) (arg2@@59 T@U) ) (! (let ((aVar2@@2 (MapType5TypeInv2 (type arg0@@210)))) (= (type (MapType5Select arg0@@210 arg1@@99 arg2@@59)) aVar2@@2)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@210 arg1@@99 arg2@@59)) ))) (forall ((arg0@@211 T@U) (arg1@@100 T@U) (arg2@@60 T@U) (arg3@@39 T@U) ) (! (let ((aVar2@@3 (type arg3@@39))) (let ((aVar1@@5 (type arg2@@60))) (let ((aVar0@@3 (type arg1@@100))) (= (type (MapType5Store arg0@@211 arg1@@100 arg2@@60 arg3@@39)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@3))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@211 arg1@@100 arg2@@60 arg3@@39)) ))) (forall ((m@@47 T@U) (x0@@25 T@U) (x1@@19 T@U) (val@@26 T@U) ) (! (let ((aVar2@@4 (MapType5TypeInv2 (type m@@47)))) (=> (= (type val@@26) aVar2@@4) (= (MapType5Select (MapType5Store m@@47 x0@@25 x1@@19 val@@26) x0@@25 x1@@19) val@@26))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (forall ((val@@27 T@U) (m@@48 T@U) (x0@@26 T@U) (x1@@20 T@U) (y0@@20 T@U) (y1@@16 T@U) ) (!  (or (= x0@@26 y0@@20) (= (MapType5Select (MapType5Store m@@48 x0@@26 x1@@20 val@@27) y0@@20 y1@@16) (MapType5Select m@@48 y0@@20 y1@@16))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@28 T@U) (m@@49 T@U) (x0@@27 T@U) (x1@@21 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x1@@21 y1@@17) (= (MapType5Select (MapType5Store m@@49 x0@@27 x1@@21 val@@28) y0@@21 y1@@17) (MapType5Select m@@49 y0@@21 y1@@17))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@29 T@U) (m@@50 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@50 x0@@28 x1@@22 val@@29) y0@@22 y1@@18) (MapType5Select m@@50 y0@@22 y1@@18))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@212 T@U) (arg1@@101 T@U) (arg2@@61 T@U) ) (! (= (type (Handle1 arg0@@212 arg1@@101 arg2@@61)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@212 arg1@@101 arg2@@61)) ))))
(assert (forall ((t0@@72 T@U) (t1@@48 T@U) (heap@@21 T@U) (h@@48 T@U) (r@@26 T@U) (rd@@11 T@U) (bx0@@47 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@48) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@48) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@26) (MapType5Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@47) BoxType)) (= (Apply1 t0@@72 t1@@48 heap@@21 (Handle1 h@@48 r@@26 rd@@11) bx0@@47) (MapType5Select h@@48 heap@@21 bx0@@47))) :qid |unknown.0:0| :skolemid |874| :pattern ( (Apply1 t0@@72 t1@@48 heap@@21 (Handle1 h@@48 r@@26 rd@@11) bx0@@47)) )))
(assert (forall ((t0@@73 T@U) (t1@@49 T@U) (heap@@22 T@U) (h@@49 T@U) (r@@27 T@U) (rd@@12 T@U) (bx0@@48 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@49) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@49) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@27) (MapType5Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@48) BoxType)) (U_2_bool (MapType5Select r@@27 heap@@22 bx0@@48))) (Requires1 t0@@73 t1@@49 heap@@22 (Handle1 h@@49 r@@27 rd@@12) bx0@@48)) :qid |unknown.0:0| :skolemid |875| :pattern ( (Requires1 t0@@73 t1@@49 heap@@22 (Handle1 h@@49 r@@27 rd@@12) bx0@@48)) )))
(assert (forall ((arg0@@213 T@U) (arg1@@102 T@U) (arg2@@62 T@U) (arg3@@40 T@U) (arg4@@32 T@U) ) (! (= (type (Reads1 arg0@@213 arg1@@102 arg2@@62 arg3@@40 arg4@@32)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@213 arg1@@102 arg2@@62 arg3@@40 arg4@@32)) )))
(assert (forall ((t0@@74 T@U) (t1@@50 T@U) (heap@@23 T@U) (h@@50 T@U) (r@@28 T@U) (rd@@13 T@U) (bx0@@49 T@U) (bx@@72 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@50) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@50) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@28) (MapType5Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@49) BoxType)) (= (type bx@@72) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@74 t1@@50 heap@@23 (Handle1 h@@50 r@@28 rd@@13) bx0@@49) bx@@72)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49) bx@@72))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49) bx@@72)) (U_2_bool (MapType0Select (Reads1 t0@@74 t1@@50 heap@@23 (Handle1 h@@50 r@@28 rd@@13) bx0@@49) bx@@72))))) :qid |unknown.0:0| :skolemid |876| :pattern ( (MapType0Select (Reads1 t0@@74 t1@@50 heap@@23 (Handle1 h@@50 r@@28 rd@@13) bx0@@49) bx@@72)) )))
(assert (forall ((t0@@75 T@U) (t1@@51 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@50 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@51) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@50) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and ($IsBox bx0@@50 t0@@75) ($Is f@@53 (Tclass._System.___hFunc1 t0@@75 t1@@51)))) (forall ((o@@78 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads1 t0@@75 t1@@51 h0@@24 f@@53 bx0@@50) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@24 o@@78) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@78) fld@@23)))) :qid |unknown.0:0| :skolemid |877| :no-pattern (type o@@78) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads1 t0@@75 t1@@51 h0@@24 f@@53 bx0@@50) (Reads1 t0@@75 t1@@51 h1@@24 f@@53 bx0@@50))) :qid |unknown.0:0| :skolemid |878| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads1 t0@@75 t1@@51 h1@@24 f@@53 bx0@@50)) )))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@51 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@51) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and ($IsBox bx0@@51 t0@@76) ($Is f@@54 (Tclass._System.___hFunc1 t0@@76 t1@@52)))) (forall ((o@@79 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads1 t0@@76 t1@@52 h1@@25 f@@54 bx0@@51) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@25 o@@79) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@79) fld@@24)))) :qid |unknown.0:0| :skolemid |879| :no-pattern (type o@@79) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads1 t0@@76 t1@@52 h0@@25 f@@54 bx0@@51) (Reads1 t0@@76 t1@@52 h1@@25 f@@54 bx0@@51))) :qid |unknown.0:0| :skolemid |880| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads1 t0@@76 t1@@52 h1@@25 f@@54 bx0@@51)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@52 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@52) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and ($IsBox bx0@@52 t0@@77) ($Is f@@55 (Tclass._System.___hFunc1 t0@@77 t1@@53)))) (forall ((o@@80 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads1 t0@@77 t1@@53 h0@@26 f@@55 bx0@@52) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@26 o@@80) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@80) fld@@25)))) :qid |unknown.0:0| :skolemid |881| :no-pattern (type o@@80) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires1 t0@@77 t1@@53 h0@@26 f@@55 bx0@@52) (Requires1 t0@@77 t1@@53 h1@@26 f@@55 bx0@@52)) (=> (Requires1 t0@@77 t1@@53 h1@@26 f@@55 bx0@@52) (Requires1 t0@@77 t1@@53 h0@@26 f@@55 bx0@@52)))) :qid |unknown.0:0| :skolemid |882| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires1 t0@@77 t1@@53 h1@@26 f@@55 bx0@@52)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@53 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@53) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and ($IsBox bx0@@53 t0@@78) ($Is f@@56 (Tclass._System.___hFunc1 t0@@78 t1@@54)))) (forall ((o@@81 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads1 t0@@78 t1@@54 h1@@27 f@@56 bx0@@53) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@27 o@@81) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@81) fld@@26)))) :qid |unknown.0:0| :skolemid |883| :no-pattern (type o@@81) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires1 t0@@78 t1@@54 h0@@27 f@@56 bx0@@53) (Requires1 t0@@78 t1@@54 h1@@27 f@@56 bx0@@53)) (=> (Requires1 t0@@78 t1@@54 h1@@27 f@@56 bx0@@53) (Requires1 t0@@78 t1@@54 h0@@27 f@@56 bx0@@53)))) :qid |unknown.0:0| :skolemid |884| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires1 t0@@78 t1@@54 h1@@27 f@@56 bx0@@53)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@54 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@54) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and ($IsBox bx0@@54 t0@@79) ($Is f@@57 (Tclass._System.___hFunc1 t0@@79 t1@@55)))) (forall ((o@@82 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads1 t0@@79 t1@@55 h0@@28 f@@57 bx0@@54) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@28 o@@82) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@82) fld@@27)))) :qid |unknown.0:0| :skolemid |885| :no-pattern (type o@@82) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply1 t0@@79 t1@@55 h0@@28 f@@57 bx0@@54) (Apply1 t0@@79 t1@@55 h1@@28 f@@57 bx0@@54))) :qid |unknown.0:0| :skolemid |886| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply1 t0@@79 t1@@55 h1@@28 f@@57 bx0@@54)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@55 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@55) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and ($IsBox bx0@@55 t0@@80) ($Is f@@58 (Tclass._System.___hFunc1 t0@@80 t1@@56)))) (forall ((o@@83 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads1 t0@@80 t1@@56 h1@@29 f@@58 bx0@@55) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@29 o@@83) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@83) fld@@28)))) :qid |unknown.0:0| :skolemid |887| :no-pattern (type o@@83) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply1 t0@@80 t1@@56 h0@@29 f@@58 bx0@@55) (Apply1 t0@@80 t1@@56 h1@@29 f@@58 bx0@@55))) :qid |unknown.0:0| :skolemid |888| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply1 t0@@80 t1@@56 h1@@29 f@@58 bx0@@55)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@56 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@56) BoxType)) (and ($IsGoodHeap heap@@24) (and ($IsBox bx0@@56 t0@@81) ($Is f@@59 (Tclass._System.___hFunc1 t0@@81 t1@@57))))) (and (=> (|Set#Equal| (Reads1 t0@@81 t1@@57 $OneHeap f@@59 bx0@@56) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@81 t1@@57 heap@@24 f@@59 bx0@@56) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@81 t1@@57 heap@@24 f@@59 bx0@@56) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@81 t1@@57 $OneHeap f@@59 bx0@@56) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |889| :pattern ( (Reads1 t0@@81 t1@@57 $OneHeap f@@59 bx0@@56) ($IsGoodHeap heap@@24)) :pattern ( (Reads1 t0@@81 t1@@57 heap@@24 f@@59 bx0@@56)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@57 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@57) BoxType)) (and (and ($IsGoodHeap heap@@25) (and ($IsBox bx0@@57 t0@@82) ($Is f@@60 (Tclass._System.___hFunc1 t0@@82 t1@@58)))) (|Set#Equal| (Reads1 t0@@82 t1@@58 $OneHeap f@@60 bx0@@57) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@82 t1@@58 $OneHeap f@@60 bx0@@57) (Requires1 t0@@82 t1@@58 heap@@25 f@@60 bx0@@57)) (=> (Requires1 t0@@82 t1@@58 heap@@25 f@@60 bx0@@57) (Requires1 t0@@82 t1@@58 $OneHeap f@@60 bx0@@57)))) :qid |unknown.0:0| :skolemid |890| :pattern ( (Requires1 t0@@82 t1@@58 $OneHeap f@@60 bx0@@57) ($IsGoodHeap heap@@25)) :pattern ( (Requires1 t0@@82 t1@@58 heap@@25 f@@60 bx0@@57)) )))
(assert (forall ((f@@61 T@U) (t0@@83 T@U) (t1@@59 T@U) ) (!  (=> (and (and (= (type f@@61) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@59) TyType)) (and (=> ($Is f@@61 (Tclass._System.___hFunc1 t0@@83 t1@@59)) (forall ((h@@51 T@U) (bx0@@58 T@U) ) (!  (=> (and (= (type h@@51) (MapType0Type refType MapType1Type)) (= (type bx0@@58) BoxType)) (=> (and (and ($IsGoodHeap h@@51) ($IsBox bx0@@58 t0@@83)) (Requires1 t0@@83 t1@@59 h@@51 f@@61 bx0@@58)) ($IsBox (Apply1 t0@@83 t1@@59 h@@51 f@@61 bx0@@58) t1@@59))) :qid |DafnyPre.521:12| :skolemid |891| :pattern ( (Apply1 t0@@83 t1@@59 h@@51 f@@61 bx0@@58)) ))) (=> (forall ((h@@52 T@U) (bx0@@59 T@U) ) (!  (=> (and (= (type h@@52) (MapType0Type refType MapType1Type)) (= (type bx0@@59) BoxType)) (=> (and (and ($IsGoodHeap h@@52) ($IsBox bx0@@59 t0@@83)) (Requires1 t0@@83 t1@@59 h@@52 f@@61 bx0@@59)) ($IsBox (Apply1 t0@@83 t1@@59 h@@52 f@@61 bx0@@59) t1@@59))) :qid |DafnyPre.521:12| :skolemid |891| :pattern ( (Apply1 t0@@83 t1@@59 h@@52 f@@61 bx0@@59)) )) ($Is f@@61 (Tclass._System.___hFunc1 t0@@83 t1@@59))))) :qid |unknown.0:0| :skolemid |892| :pattern ( ($Is f@@61 (Tclass._System.___hFunc1 t0@@83 t1@@59))) )))
(assert (forall ((f@@62 T@U) (t0@@84 T@U) (t1@@60 T@U) (u0@@3 T@U) (u1@@2 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@84) TyType)) (= (type t1@@60) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (and (and ($Is f@@62 (Tclass._System.___hFunc1 t0@@84 t1@@60)) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 u0@@3)) ($IsBox bx@@73 t0@@84)) :qid |unknown.0:0| :skolemid |893| :pattern ( ($IsBox bx@@73 u0@@3)) :pattern ( ($IsBox bx@@73 t0@@84)) ))) (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 t1@@60)) ($IsBox bx@@74 u1@@2)) :qid |unknown.0:0| :skolemid |894| :pattern ( ($IsBox bx@@74 t1@@60)) :pattern ( ($IsBox bx@@74 u1@@2)) )))) ($Is f@@62 (Tclass._System.___hFunc1 u0@@3 u1@@2))) :qid |unknown.0:0| :skolemid |895| :pattern ( ($Is f@@62 (Tclass._System.___hFunc1 t0@@84 t1@@60)) ($Is f@@62 (Tclass._System.___hFunc1 u0@@3 u1@@2))) )))
(assert (forall ((f@@63 T@U) (t0@@85 T@U) (t1@@61 T@U) (h@@53 T@U) ) (!  (=> (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@85) TyType)) (= (type t1@@61) TyType)) (= (type h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@53)) (and (=> ($IsAlloc f@@63 (Tclass._System.___hFunc1 t0@@85 t1@@61) h@@53) (forall ((bx0@@60 T@U) ) (!  (=> (= (type bx0@@60) BoxType) (=> (and (and ($IsBox bx0@@60 t0@@85) ($IsAllocBox bx0@@60 t0@@85 h@@53)) (Requires1 t0@@85 t1@@61 h@@53 f@@63 bx0@@60)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads1 t0@@85 t1@@61 h@@53 f@@63 bx0@@60) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |896| :pattern ( (MapType0Select (Reads1 t0@@85 t1@@61 h@@53 f@@63 bx0@@60) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |897| :pattern ( (Apply1 t0@@85 t1@@61 h@@53 f@@63 bx0@@60)) :pattern ( (Reads1 t0@@85 t1@@61 h@@53 f@@63 bx0@@60)) ))) (=> (forall ((bx0@@61 T@U) ) (!  (=> (= (type bx0@@61) BoxType) (=> (and (and ($IsBox bx0@@61 t0@@85) ($IsAllocBox bx0@@61 t0@@85 h@@53)) (Requires1 t0@@85 t1@@61 h@@53 f@@63 bx0@@61)) (forall ((r@@30 T@U) ) (!  (=> (= (type r@@30) refType) (=> (and (not (= r@@30 null)) (U_2_bool (MapType0Select (Reads1 t0@@85 t1@@61 h@@53 f@@63 bx0@@61) ($Box r@@30)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@30) alloc)))) :qid |unknown.0:0| :skolemid |896| :pattern ( (MapType0Select (Reads1 t0@@85 t1@@61 h@@53 f@@63 bx0@@61) ($Box r@@30))) )))) :qid |unknown.0:0| :skolemid |897| :pattern ( (Apply1 t0@@85 t1@@61 h@@53 f@@63 bx0@@61)) :pattern ( (Reads1 t0@@85 t1@@61 h@@53 f@@63 bx0@@61)) )) ($IsAlloc f@@63 (Tclass._System.___hFunc1 t0@@85 t1@@61) h@@53)))) :qid |unknown.0:0| :skolemid |898| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc1 t0@@85 t1@@61) h@@53)) )))
(assert (forall ((f@@64 T@U) (t0@@86 T@U) (t1@@62 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@86) TyType)) (= (type t1@@62) TyType)) (= (type h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@54) ($IsAlloc f@@64 (Tclass._System.___hFunc1 t0@@86 t1@@62) h@@54))) (forall ((bx0@@62 T@U) ) (!  (=> (= (type bx0@@62) BoxType) (=> (and ($IsAllocBox bx0@@62 t0@@86 h@@54) (Requires1 t0@@86 t1@@62 h@@54 f@@64 bx0@@62)) ($IsAllocBox (Apply1 t0@@86 t1@@62 h@@54 f@@64 bx0@@62) t1@@62 h@@54))) :qid |unknown.0:0| :skolemid |899| :pattern ( (Apply1 t0@@86 t1@@62 h@@54 f@@64 bx0@@62)) ))) :qid |unknown.0:0| :skolemid |900| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc1 t0@@86 t1@@62) h@@54)) )))
(assert (forall ((arg0@@214 T@U) (arg1@@103 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@214 arg1@@103)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@214 arg1@@103)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$R@@88| T@U) ) (!  (=> (and (= (type |#$T0@@75|) TyType) (= (type |#$R@@88|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@75| |#$R@@88|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |901| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@75| |#$R@@88|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@215)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@215)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$R@@89| T@U) ) (!  (=> (and (= (type |#$T0@@76|) TyType) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@76| |#$R@@89|)) |#$T0@@76|)) :qid |unknown.0:0| :skolemid |902| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@76| |#$R@@89|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@216)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@216)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$R@@90| T@U) ) (!  (=> (and (= (type |#$T0@@77|) TyType) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@77| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |903| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@77| |#$R@@90|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$R@@91| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$R@@91|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hPartialFunc1 |#$T0@@78| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hPartialFunc1 |#$T0@@78| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |904| :pattern ( ($IsBox bx@@75 (Tclass._System.___hPartialFunc1 |#$T0@@78| |#$R@@91|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$R@@92| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@79|) TyType) (= (type |#$R@@92|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (and (=> ($Is |f#0@@15| (Tclass._System.___hPartialFunc1 |#$T0@@79| |#$R@@92|)) (and ($Is |f#0@@15| (Tclass._System.___hFunc1 |#$T0@@79| |#$R@@92|)) (forall ((|x0#0@@11| T@U) ) (!  (=> (and (= (type |x0#0@@11|) BoxType) ($IsBox |x0#0@@11| |#$T0@@79|)) (|Set#Equal| (Reads1 |#$T0@@79| |#$R@@92| $OneHeap |f#0@@15| |x0#0@@11|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |905| :no-pattern (type |x0#0@@11|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) )))) (=> (and ($Is |f#0@@15| (Tclass._System.___hFunc1 |#$T0@@79| |#$R@@92|)) (forall ((|x0#0@@12| T@U) ) (!  (=> (and (= (type |x0#0@@12|) BoxType) ($IsBox |x0#0@@12| |#$T0@@79|)) (|Set#Equal| (Reads1 |#$T0@@79| |#$R@@92| $OneHeap |f#0@@15| |x0#0@@12|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |905| :no-pattern (type |x0#0@@12|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) ))) ($Is |f#0@@15| (Tclass._System.___hPartialFunc1 |#$T0@@79| |#$R@@92|))))) :qid |unknown.0:0| :skolemid |906| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc1 |#$T0@@79| |#$R@@92|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$R@@93| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$R@@93|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc1 |#$T0@@80| |#$R@@93|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc1 |#$T0@@80| |#$R@@93|) $h@@16)) (=> ($IsAlloc |f#0@@16| (Tclass._System.___hFunc1 |#$T0@@80| |#$R@@93|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc1 |#$T0@@80| |#$R@@93|) $h@@16)))) :qid |unknown.0:0| :skolemid |907| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc1 |#$T0@@80| |#$R@@93|) $h@@16)) )))
(assert (forall ((arg0@@217 T@U) (arg1@@104 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@217 arg1@@104)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@217 arg1@@104)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$R@@94| T@U) ) (!  (=> (and (= (type |#$T0@@81|) TyType) (= (type |#$R@@94|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@81| |#$R@@94|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |908| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@81| |#$R@@94|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@218)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@218)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$R@@95| T@U) ) (!  (=> (and (= (type |#$T0@@82|) TyType) (= (type |#$R@@95|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@82| |#$R@@95|)) |#$T0@@82|)) :qid |unknown.0:0| :skolemid |909| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@82| |#$R@@95|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@219)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@219)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$R@@96| T@U) ) (!  (=> (and (= (type |#$T0@@83|) TyType) (= (type |#$R@@96|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@83| |#$R@@96|)) |#$R@@96|)) :qid |unknown.0:0| :skolemid |910| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@83| |#$R@@96|)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$R@@97| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$R@@97|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hTotalFunc1 |#$T0@@84| |#$R@@97|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hTotalFunc1 |#$T0@@84| |#$R@@97|)))) :qid |unknown.0:0| :skolemid |911| :pattern ( ($IsBox bx@@76 (Tclass._System.___hTotalFunc1 |#$T0@@84| |#$R@@97|))) )))
(assert (forall ((|#$T0@@85| T@U) (|#$R@@98| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@85|) TyType) (= (type |#$R@@98|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (and (=> ($Is |f#0@@17| (Tclass._System.___hTotalFunc1 |#$T0@@85| |#$R@@98|)) (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc1 |#$T0@@85| |#$R@@98|)) (forall ((|x0#0@@13| T@U) ) (!  (=> (and (= (type |x0#0@@13|) BoxType) ($IsBox |x0#0@@13| |#$T0@@85|)) (Requires1 |#$T0@@85| |#$R@@98| $OneHeap |f#0@@17| |x0#0@@13|)) :qid |unknown.0:0| :skolemid |912| :no-pattern (type |x0#0@@13|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) )))) (=> (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc1 |#$T0@@85| |#$R@@98|)) (forall ((|x0#0@@14| T@U) ) (!  (=> (and (= (type |x0#0@@14|) BoxType) ($IsBox |x0#0@@14| |#$T0@@85|)) (Requires1 |#$T0@@85| |#$R@@98| $OneHeap |f#0@@17| |x0#0@@14|)) :qid |unknown.0:0| :skolemid |912| :no-pattern (type |x0#0@@14|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) ))) ($Is |f#0@@17| (Tclass._System.___hTotalFunc1 |#$T0@@85| |#$R@@98|))))) :qid |unknown.0:0| :skolemid |913| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc1 |#$T0@@85| |#$R@@98|))) )))
(assert (forall ((|#$T0@@86| T@U) (|#$R@@99| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$R@@99|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc1 |#$T0@@86| |#$R@@99|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc1 |#$T0@@86| |#$R@@99|) $h@@17)) (=> ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc1 |#$T0@@86| |#$R@@99|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc1 |#$T0@@86| |#$R@@99|) $h@@17)))) :qid |unknown.0:0| :skolemid |914| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc1 |#$T0@@86| |#$R@@99|) $h@@17)) )))
(assert (forall ((arg0@@220 T@U) (arg1@@105 T@U) (arg2@@63 T@U) (arg3@@41 T@U) (arg4@@33 T@U) (arg5@@27 T@U) (arg6@@16 T@U) ) (! (= (type (Tclass._System.___hFunc6 arg0@@220 arg1@@105 arg2@@63 arg3@@41 arg4@@33 arg5@@27 arg6@@16)) TyType) :qid |funType:Tclass._System.___hFunc6| :pattern ( (Tclass._System.___hFunc6 arg0@@220 arg1@@105 arg2@@63 arg3@@41 arg4@@33 arg5@@27 arg6@@16)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@52| T@U) (|#$T3@@52| T@U) (|#$T4@@27| T@U) (|#$T5| T@U) (|#$R@@100| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$T3@@52|) TyType)) (= (type |#$T4@@27|) TyType)) (= (type |#$T5|) TyType)) (= (type |#$R@@100|) TyType)) (= (Tag (Tclass._System.___hFunc6 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@100|)) Tagclass._System.___hFunc6)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hFunc6 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@52| |#$T4@@27| |#$T5| |#$R@@100|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hFunc6_0 arg0@@221)) TyType) :qid |funType:Tclass._System.___hFunc6_0| :pattern ( (Tclass._System.___hFunc6_0 arg0@@221)) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@53| T@U) (|#$T3@@53| T@U) (|#$T4@@28| T@U) (|#$T5@@0| T@U) (|#$R@@101| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$T3@@53|) TyType)) (= (type |#$T4@@28|) TyType)) (= (type |#$T5@@0|) TyType)) (= (type |#$R@@101|) TyType)) (= (Tclass._System.___hFunc6_0 (Tclass._System.___hFunc6 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@101|)) |#$T0@@88|)) :qid |unknown.0:0| :skolemid |916| :pattern ( (Tclass._System.___hFunc6 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@53| |#$T4@@28| |#$T5@@0| |#$R@@101|)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hFunc6_1 arg0@@222)) TyType) :qid |funType:Tclass._System.___hFunc6_1| :pattern ( (Tclass._System.___hFunc6_1 arg0@@222)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@54| T@U) (|#$T3@@54| T@U) (|#$T4@@29| T@U) (|#$T5@@1| T@U) (|#$R@@102| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$T3@@54|) TyType)) (= (type |#$T4@@29|) TyType)) (= (type |#$T5@@1|) TyType)) (= (type |#$R@@102|) TyType)) (= (Tclass._System.___hFunc6_1 (Tclass._System.___hFunc6 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@102|)) |#$T1@@73|)) :qid |unknown.0:0| :skolemid |917| :pattern ( (Tclass._System.___hFunc6 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@54| |#$T4@@29| |#$T5@@1| |#$R@@102|)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (Tclass._System.___hFunc6_2 arg0@@223)) TyType) :qid |funType:Tclass._System.___hFunc6_2| :pattern ( (Tclass._System.___hFunc6_2 arg0@@223)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@55| T@U) (|#$T3@@55| T@U) (|#$T4@@30| T@U) (|#$T5@@2| T@U) (|#$R@@103| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$T3@@55|) TyType)) (= (type |#$T4@@30|) TyType)) (= (type |#$T5@@2|) TyType)) (= (type |#$R@@103|) TyType)) (= (Tclass._System.___hFunc6_2 (Tclass._System.___hFunc6 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@103|)) |#$T2@@55|)) :qid |unknown.0:0| :skolemid |918| :pattern ( (Tclass._System.___hFunc6 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@55| |#$T4@@30| |#$T5@@2| |#$R@@103|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hFunc6_3 arg0@@224)) TyType) :qid |funType:Tclass._System.___hFunc6_3| :pattern ( (Tclass._System.___hFunc6_3 arg0@@224)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@56| T@U) (|#$T3@@56| T@U) (|#$T4@@31| T@U) (|#$T5@@3| T@U) (|#$R@@104| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$T3@@56|) TyType)) (= (type |#$T4@@31|) TyType)) (= (type |#$T5@@3|) TyType)) (= (type |#$R@@104|) TyType)) (= (Tclass._System.___hFunc6_3 (Tclass._System.___hFunc6 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@104|)) |#$T3@@56|)) :qid |unknown.0:0| :skolemid |919| :pattern ( (Tclass._System.___hFunc6 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@56| |#$T4@@31| |#$T5@@3| |#$R@@104|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.___hFunc6_4 arg0@@225)) TyType) :qid |funType:Tclass._System.___hFunc6_4| :pattern ( (Tclass._System.___hFunc6_4 arg0@@225)) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@57| T@U) (|#$T3@@57| T@U) (|#$T4@@32| T@U) (|#$T5@@4| T@U) (|#$R@@105| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$T3@@57|) TyType)) (= (type |#$T4@@32|) TyType)) (= (type |#$T5@@4|) TyType)) (= (type |#$R@@105|) TyType)) (= (Tclass._System.___hFunc6_4 (Tclass._System.___hFunc6 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@105|)) |#$T4@@32|)) :qid |unknown.0:0| :skolemid |920| :pattern ( (Tclass._System.___hFunc6 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@57| |#$T4@@32| |#$T5@@4| |#$R@@105|)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass._System.___hFunc6_5 arg0@@226)) TyType) :qid |funType:Tclass._System.___hFunc6_5| :pattern ( (Tclass._System.___hFunc6_5 arg0@@226)) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@58| T@U) (|#$T3@@58| T@U) (|#$T4@@33| T@U) (|#$T5@@5| T@U) (|#$R@@106| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$T3@@58|) TyType)) (= (type |#$T4@@33|) TyType)) (= (type |#$T5@@5|) TyType)) (= (type |#$R@@106|) TyType)) (= (Tclass._System.___hFunc6_5 (Tclass._System.___hFunc6 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@106|)) |#$T5@@5|)) :qid |unknown.0:0| :skolemid |921| :pattern ( (Tclass._System.___hFunc6 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@58| |#$T4@@33| |#$T5@@5| |#$R@@106|)) )))
(assert (forall ((arg0@@227 T@U) ) (! (= (type (Tclass._System.___hFunc6_6 arg0@@227)) TyType) :qid |funType:Tclass._System.___hFunc6_6| :pattern ( (Tclass._System.___hFunc6_6 arg0@@227)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@59| T@U) (|#$T3@@59| T@U) (|#$T4@@34| T@U) (|#$T5@@6| T@U) (|#$R@@107| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$T3@@59|) TyType)) (= (type |#$T4@@34|) TyType)) (= (type |#$T5@@6|) TyType)) (= (type |#$R@@107|) TyType)) (= (Tclass._System.___hFunc6_6 (Tclass._System.___hFunc6 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@107|)) |#$R@@107|)) :qid |unknown.0:0| :skolemid |922| :pattern ( (Tclass._System.___hFunc6 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@59| |#$T4@@34| |#$T5@@6| |#$R@@107|)) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@60| T@U) (|#$T3@@60| T@U) (|#$T4@@35| T@U) (|#$T5@@7| T@U) (|#$R@@108| T@U) (bx@@77 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$T3@@60|) TyType)) (= (type |#$T4@@35|) TyType)) (= (type |#$T5@@7|) TyType)) (= (type |#$R@@108|) TyType)) (= (type bx@@77) BoxType)) ($IsBox bx@@77 (Tclass._System.___hFunc6 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@108|))) (and (= ($Box ($Unbox HandleTypeType bx@@77)) bx@@77) ($Is ($Unbox HandleTypeType bx@@77) (Tclass._System.___hFunc6 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@108|)))) :qid |unknown.0:0| :skolemid |923| :pattern ( ($IsBox bx@@77 (Tclass._System.___hFunc6 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@60| |#$T4@@35| |#$T5@@7| |#$R@@108|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@228 T@T) (arg1@@106 T@T) (arg2@@64 T@T) (arg3@@42 T@T) (arg4@@34 T@T) (arg5@@28 T@T) (arg6@@17 T@T) (arg7@@4 T@T) ) (! (= (Ctor (MapType6Type arg0@@228 arg1@@106 arg2@@64 arg3@@42 arg4@@34 arg5@@28 arg6@@17 arg7@@4)) 25) :qid |ctor:MapType6Type| )) (forall ((arg0@@229 T@T) (arg1@@107 T@T) (arg2@@65 T@T) (arg3@@43 T@T) (arg4@@35 T@T) (arg5@@29 T@T) (arg6@@18 T@T) (arg7@@5 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@229 arg1@@107 arg2@@65 arg3@@43 arg4@@35 arg5@@29 arg6@@18 arg7@@5)) arg0@@229) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@229 arg1@@107 arg2@@65 arg3@@43 arg4@@35 arg5@@29 arg6@@18 arg7@@5)) ))) (forall ((arg0@@230 T@T) (arg1@@108 T@T) (arg2@@66 T@T) (arg3@@44 T@T) (arg4@@36 T@T) (arg5@@30 T@T) (arg6@@19 T@T) (arg7@@6 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@230 arg1@@108 arg2@@66 arg3@@44 arg4@@36 arg5@@30 arg6@@19 arg7@@6)) arg1@@108) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@230 arg1@@108 arg2@@66 arg3@@44 arg4@@36 arg5@@30 arg6@@19 arg7@@6)) ))) (forall ((arg0@@231 T@T) (arg1@@109 T@T) (arg2@@67 T@T) (arg3@@45 T@T) (arg4@@37 T@T) (arg5@@31 T@T) (arg6@@20 T@T) (arg7@@7 T@T) ) (! (= (MapType6TypeInv2 (MapType6Type arg0@@231 arg1@@109 arg2@@67 arg3@@45 arg4@@37 arg5@@31 arg6@@20 arg7@@7)) arg2@@67) :qid |typeInv:MapType6TypeInv2| :pattern ( (MapType6Type arg0@@231 arg1@@109 arg2@@67 arg3@@45 arg4@@37 arg5@@31 arg6@@20 arg7@@7)) ))) (forall ((arg0@@232 T@T) (arg1@@110 T@T) (arg2@@68 T@T) (arg3@@46 T@T) (arg4@@38 T@T) (arg5@@32 T@T) (arg6@@21 T@T) (arg7@@8 T@T) ) (! (= (MapType6TypeInv3 (MapType6Type arg0@@232 arg1@@110 arg2@@68 arg3@@46 arg4@@38 arg5@@32 arg6@@21 arg7@@8)) arg3@@46) :qid |typeInv:MapType6TypeInv3| :pattern ( (MapType6Type arg0@@232 arg1@@110 arg2@@68 arg3@@46 arg4@@38 arg5@@32 arg6@@21 arg7@@8)) ))) (forall ((arg0@@233 T@T) (arg1@@111 T@T) (arg2@@69 T@T) (arg3@@47 T@T) (arg4@@39 T@T) (arg5@@33 T@T) (arg6@@22 T@T) (arg7@@9 T@T) ) (! (= (MapType6TypeInv4 (MapType6Type arg0@@233 arg1@@111 arg2@@69 arg3@@47 arg4@@39 arg5@@33 arg6@@22 arg7@@9)) arg4@@39) :qid |typeInv:MapType6TypeInv4| :pattern ( (MapType6Type arg0@@233 arg1@@111 arg2@@69 arg3@@47 arg4@@39 arg5@@33 arg6@@22 arg7@@9)) ))) (forall ((arg0@@234 T@T) (arg1@@112 T@T) (arg2@@70 T@T) (arg3@@48 T@T) (arg4@@40 T@T) (arg5@@34 T@T) (arg6@@23 T@T) (arg7@@10 T@T) ) (! (= (MapType6TypeInv5 (MapType6Type arg0@@234 arg1@@112 arg2@@70 arg3@@48 arg4@@40 arg5@@34 arg6@@23 arg7@@10)) arg5@@34) :qid |typeInv:MapType6TypeInv5| :pattern ( (MapType6Type arg0@@234 arg1@@112 arg2@@70 arg3@@48 arg4@@40 arg5@@34 arg6@@23 arg7@@10)) ))) (forall ((arg0@@235 T@T) (arg1@@113 T@T) (arg2@@71 T@T) (arg3@@49 T@T) (arg4@@41 T@T) (arg5@@35 T@T) (arg6@@24 T@T) (arg7@@11 T@T) ) (! (= (MapType6TypeInv6 (MapType6Type arg0@@235 arg1@@113 arg2@@71 arg3@@49 arg4@@41 arg5@@35 arg6@@24 arg7@@11)) arg6@@24) :qid |typeInv:MapType6TypeInv6| :pattern ( (MapType6Type arg0@@235 arg1@@113 arg2@@71 arg3@@49 arg4@@41 arg5@@35 arg6@@24 arg7@@11)) ))) (forall ((arg0@@236 T@T) (arg1@@114 T@T) (arg2@@72 T@T) (arg3@@50 T@T) (arg4@@42 T@T) (arg5@@36 T@T) (arg6@@25 T@T) (arg7@@12 T@T) ) (! (= (MapType6TypeInv7 (MapType6Type arg0@@236 arg1@@114 arg2@@72 arg3@@50 arg4@@42 arg5@@36 arg6@@25 arg7@@12)) arg7@@12) :qid |typeInv:MapType6TypeInv7| :pattern ( (MapType6Type arg0@@236 arg1@@114 arg2@@72 arg3@@50 arg4@@42 arg5@@36 arg6@@25 arg7@@12)) ))) (forall ((arg0@@237 T@U) (arg1@@115 T@U) (arg2@@73 T@U) (arg3@@51 T@U) (arg4@@43 T@U) (arg5@@37 T@U) (arg6@@26 T@U) (arg7@@13 T@U) ) (! (let ((aVar7 (MapType6TypeInv7 (type arg0@@237)))) (= (type (MapType6Select arg0@@237 arg1@@115 arg2@@73 arg3@@51 arg4@@43 arg5@@37 arg6@@26 arg7@@13)) aVar7)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@237 arg1@@115 arg2@@73 arg3@@51 arg4@@43 arg5@@37 arg6@@26 arg7@@13)) ))) (forall ((arg0@@238 T@U) (arg1@@116 T@U) (arg2@@74 T@U) (arg3@@52 T@U) (arg4@@44 T@U) (arg5@@38 T@U) (arg6@@27 T@U) (arg7@@14 T@U) (arg8@@3 T@U) ) (! (let ((aVar7@@0 (type arg8@@3))) (let ((aVar6@@2 (type arg7@@14))) (let ((aVar5@@3 (type arg6@@27))) (let ((aVar4@@1 (type arg5@@38))) (let ((aVar3@@4 (type arg4@@44))) (let ((aVar2@@5 (type arg3@@52))) (let ((aVar1@@6 (type arg2@@74))) (let ((aVar0@@4 (type arg1@@116))) (= (type (MapType6Store arg0@@238 arg1@@116 arg2@@74 arg3@@52 arg4@@44 arg5@@38 arg6@@27 arg7@@14 arg8@@3)) (MapType6Type aVar0@@4 aVar1@@6 aVar2@@5 aVar3@@4 aVar4@@1 aVar5@@3 aVar6@@2 aVar7@@0)))))))))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@238 arg1@@116 arg2@@74 arg3@@52 arg4@@44 arg5@@38 arg6@@27 arg7@@14 arg8@@3)) ))) (forall ((m@@51 T@U) (x0@@29 T@U) (x1@@23 T@U) (x2@@19 T@U) (x3@@14 T@U) (x4@@14 T@U) (x5@@7 T@U) (x6 T@U) (val@@30 T@U) ) (! (let ((aVar7@@1 (MapType6TypeInv7 (type m@@51)))) (=> (= (type val@@30) aVar7@@1) (= (MapType6Select (MapType6Store m@@51 x0@@29 x1@@23 x2@@19 x3@@14 x4@@14 x5@@7 x6 val@@30) x0@@29 x1@@23 x2@@19 x3@@14 x4@@14 x5@@7 x6) val@@30))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (and (and (and (and (and (forall ((val@@31 T@U) (m@@52 T@U) (x0@@30 T@U) (x1@@24 T@U) (x2@@20 T@U) (x3@@15 T@U) (x4@@15 T@U) (x5@@8 T@U) (x6@@0 T@U) (y0@@23 T@U) (y1@@19 T@U) (y2@@16 T@U) (y3@@12 T@U) (y4@@12 T@U) (y5@@6 T@U) (y6 T@U) ) (!  (or (= x0@@30 y0@@23) (= (MapType6Select (MapType6Store m@@52 x0@@30 x1@@24 x2@@20 x3@@15 x4@@15 x5@@8 x6@@0 val@@31) y0@@23 y1@@19 y2@@16 y3@@12 y4@@12 y5@@6 y6) (MapType6Select m@@52 y0@@23 y1@@19 y2@@16 y3@@12 y4@@12 y5@@6 y6))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@32 T@U) (m@@53 T@U) (x0@@31 T@U) (x1@@25 T@U) (x2@@21 T@U) (x3@@16 T@U) (x4@@16 T@U) (x5@@9 T@U) (x6@@1 T@U) (y0@@24 T@U) (y1@@20 T@U) (y2@@17 T@U) (y3@@13 T@U) (y4@@13 T@U) (y5@@7 T@U) (y6@@0 T@U) ) (!  (or (= x1@@25 y1@@20) (= (MapType6Select (MapType6Store m@@53 x0@@31 x1@@25 x2@@21 x3@@16 x4@@16 x5@@9 x6@@1 val@@32) y0@@24 y1@@20 y2@@17 y3@@13 y4@@13 y5@@7 y6@@0) (MapType6Select m@@53 y0@@24 y1@@20 y2@@17 y3@@13 y4@@13 y5@@7 y6@@0))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@33 T@U) (m@@54 T@U) (x0@@32 T@U) (x1@@26 T@U) (x2@@22 T@U) (x3@@17 T@U) (x4@@17 T@U) (x5@@10 T@U) (x6@@2 T@U) (y0@@25 T@U) (y1@@21 T@U) (y2@@18 T@U) (y3@@14 T@U) (y4@@14 T@U) (y5@@8 T@U) (y6@@1 T@U) ) (!  (or (= x2@@22 y2@@18) (= (MapType6Select (MapType6Store m@@54 x0@@32 x1@@26 x2@@22 x3@@17 x4@@17 x5@@10 x6@@2 val@@33) y0@@25 y1@@21 y2@@18 y3@@14 y4@@14 y5@@8 y6@@1) (MapType6Select m@@54 y0@@25 y1@@21 y2@@18 y3@@14 y4@@14 y5@@8 y6@@1))) :qid |mapAx1:MapType6Select:2| :weight 0 ))) (forall ((val@@34 T@U) (m@@55 T@U) (x0@@33 T@U) (x1@@27 T@U) (x2@@23 T@U) (x3@@18 T@U) (x4@@18 T@U) (x5@@11 T@U) (x6@@3 T@U) (y0@@26 T@U) (y1@@22 T@U) (y2@@19 T@U) (y3@@15 T@U) (y4@@15 T@U) (y5@@9 T@U) (y6@@2 T@U) ) (!  (or (= x3@@18 y3@@15) (= (MapType6Select (MapType6Store m@@55 x0@@33 x1@@27 x2@@23 x3@@18 x4@@18 x5@@11 x6@@3 val@@34) y0@@26 y1@@22 y2@@19 y3@@15 y4@@15 y5@@9 y6@@2) (MapType6Select m@@55 y0@@26 y1@@22 y2@@19 y3@@15 y4@@15 y5@@9 y6@@2))) :qid |mapAx1:MapType6Select:3| :weight 0 ))) (forall ((val@@35 T@U) (m@@56 T@U) (x0@@34 T@U) (x1@@28 T@U) (x2@@24 T@U) (x3@@19 T@U) (x4@@19 T@U) (x5@@12 T@U) (x6@@4 T@U) (y0@@27 T@U) (y1@@23 T@U) (y2@@20 T@U) (y3@@16 T@U) (y4@@16 T@U) (y5@@10 T@U) (y6@@3 T@U) ) (!  (or (= x4@@19 y4@@16) (= (MapType6Select (MapType6Store m@@56 x0@@34 x1@@28 x2@@24 x3@@19 x4@@19 x5@@12 x6@@4 val@@35) y0@@27 y1@@23 y2@@20 y3@@16 y4@@16 y5@@10 y6@@3) (MapType6Select m@@56 y0@@27 y1@@23 y2@@20 y3@@16 y4@@16 y5@@10 y6@@3))) :qid |mapAx1:MapType6Select:4| :weight 0 ))) (forall ((val@@36 T@U) (m@@57 T@U) (x0@@35 T@U) (x1@@29 T@U) (x2@@25 T@U) (x3@@20 T@U) (x4@@20 T@U) (x5@@13 T@U) (x6@@5 T@U) (y0@@28 T@U) (y1@@24 T@U) (y2@@21 T@U) (y3@@17 T@U) (y4@@17 T@U) (y5@@11 T@U) (y6@@4 T@U) ) (!  (or (= x5@@13 y5@@11) (= (MapType6Select (MapType6Store m@@57 x0@@35 x1@@29 x2@@25 x3@@20 x4@@20 x5@@13 x6@@5 val@@36) y0@@28 y1@@24 y2@@21 y3@@17 y4@@17 y5@@11 y6@@4) (MapType6Select m@@57 y0@@28 y1@@24 y2@@21 y3@@17 y4@@17 y5@@11 y6@@4))) :qid |mapAx1:MapType6Select:5| :weight 0 ))) (forall ((val@@37 T@U) (m@@58 T@U) (x0@@36 T@U) (x1@@30 T@U) (x2@@26 T@U) (x3@@21 T@U) (x4@@21 T@U) (x5@@14 T@U) (x6@@6 T@U) (y0@@29 T@U) (y1@@25 T@U) (y2@@22 T@U) (y3@@18 T@U) (y4@@18 T@U) (y5@@12 T@U) (y6@@5 T@U) ) (!  (or (= x6@@6 y6@@5) (= (MapType6Select (MapType6Store m@@58 x0@@36 x1@@30 x2@@26 x3@@21 x4@@21 x5@@14 x6@@6 val@@37) y0@@29 y1@@25 y2@@22 y3@@18 y4@@18 y5@@12 y6@@5) (MapType6Select m@@58 y0@@29 y1@@25 y2@@22 y3@@18 y4@@18 y5@@12 y6@@5))) :qid |mapAx1:MapType6Select:6| :weight 0 ))) (forall ((val@@38 T@U) (m@@59 T@U) (x0@@37 T@U) (x1@@31 T@U) (x2@@27 T@U) (x3@@22 T@U) (x4@@22 T@U) (x5@@15 T@U) (x6@@7 T@U) (y0@@30 T@U) (y1@@26 T@U) (y2@@23 T@U) (y3@@19 T@U) (y4@@19 T@U) (y5@@13 T@U) (y6@@6 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@59 x0@@37 x1@@31 x2@@27 x3@@22 x4@@22 x5@@15 x6@@7 val@@38) y0@@30 y1@@26 y2@@23 y3@@19 y4@@19 y5@@13 y6@@6) (MapType6Select m@@59 y0@@30 y1@@26 y2@@23 y3@@19 y4@@19 y5@@13 y6@@6))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@239 T@U) (arg1@@117 T@U) (arg2@@75 T@U) (arg3@@53 T@U) (arg4@@45 T@U) (arg5@@39 T@U) (arg6@@28 T@U) (arg7@@15 T@U) (arg8@@4 T@U) (arg9@@3 T@U) (arg10@@3 T@U) (arg11@@1 T@U) (arg12@@1 T@U) (arg13 T@U) (arg14 T@U) ) (! (= (type (Apply6 arg0@@239 arg1@@117 arg2@@75 arg3@@53 arg4@@45 arg5@@39 arg6@@28 arg7@@15 arg8@@4 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) BoxType) :qid |funType:Apply6| :pattern ( (Apply6 arg0@@239 arg1@@117 arg2@@75 arg3@@53 arg4@@45 arg5@@39 arg6@@28 arg7@@15 arg8@@4 arg9@@3 arg10@@3 arg11@@1 arg12@@1 arg13 arg14)) ))) (forall ((arg0@@240 T@U) (arg1@@118 T@U) (arg2@@76 T@U) ) (! (= (type (Handle6 arg0@@240 arg1@@118 arg2@@76)) HandleTypeType) :qid |funType:Handle6| :pattern ( (Handle6 arg0@@240 arg1@@118 arg2@@76)) ))))
(assert (forall ((t0@@87 T@U) (t1@@63 T@U) (t2@@44 T@U) (t3@@29 T@U) (t4@@29 T@U) (t5@@14 T@U) (t6 T@U) (heap@@26 T@U) (h@@55 T@U) (r@@31 T@U) (rd@@14 T@U) (bx0@@63 T@U) (bx1@@47 T@U) (bx2@@31 T@U) (bx3@@31 T@U) (bx4@@15 T@U) (bx5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@87) TyType) (= (type t1@@63) TyType)) (= (type t2@@44) TyType)) (= (type t3@@29) TyType)) (= (type t4@@29) TyType)) (= (type t5@@14) TyType)) (= (type t6) TyType)) (= (type heap@@26) (MapType0Type refType MapType1Type))) (= (type h@@55) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@31) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@14) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@63) BoxType)) (= (type bx1@@47) BoxType)) (= (type bx2@@31) BoxType)) (= (type bx3@@31) BoxType)) (= (type bx4@@15) BoxType)) (= (type bx5) BoxType)) (= (Apply6 t0@@87 t1@@63 t2@@44 t3@@29 t4@@29 t5@@14 t6 heap@@26 (Handle6 h@@55 r@@31 rd@@14) bx0@@63 bx1@@47 bx2@@31 bx3@@31 bx4@@15 bx5) (MapType6Select h@@55 heap@@26 bx0@@63 bx1@@47 bx2@@31 bx3@@31 bx4@@15 bx5))) :qid |unknown.0:0| :skolemid |924| :pattern ( (Apply6 t0@@87 t1@@63 t2@@44 t3@@29 t4@@29 t5@@14 t6 heap@@26 (Handle6 h@@55 r@@31 rd@@14) bx0@@63 bx1@@47 bx2@@31 bx3@@31 bx4@@15 bx5)) )))
(assert (forall ((t0@@88 T@U) (t1@@64 T@U) (t2@@45 T@U) (t3@@30 T@U) (t4@@30 T@U) (t5@@15 T@U) (t6@@0 T@U) (heap@@27 T@U) (h@@56 T@U) (r@@32 T@U) (rd@@15 T@U) (bx0@@64 T@U) (bx1@@48 T@U) (bx2@@32 T@U) (bx3@@32 T@U) (bx4@@16 T@U) (bx5@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@88) TyType) (= (type t1@@64) TyType)) (= (type t2@@45) TyType)) (= (type t3@@30) TyType)) (= (type t4@@30) TyType)) (= (type t5@@15) TyType)) (= (type t6@@0) TyType)) (= (type heap@@27) (MapType0Type refType MapType1Type))) (= (type h@@56) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@32) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@15) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@64) BoxType)) (= (type bx1@@48) BoxType)) (= (type bx2@@32) BoxType)) (= (type bx3@@32) BoxType)) (= (type bx4@@16) BoxType)) (= (type bx5@@0) BoxType)) (U_2_bool (MapType6Select r@@32 heap@@27 bx0@@64 bx1@@48 bx2@@32 bx3@@32 bx4@@16 bx5@@0))) (Requires6 t0@@88 t1@@64 t2@@45 t3@@30 t4@@30 t5@@15 t6@@0 heap@@27 (Handle6 h@@56 r@@32 rd@@15) bx0@@64 bx1@@48 bx2@@32 bx3@@32 bx4@@16 bx5@@0)) :qid |unknown.0:0| :skolemid |925| :pattern ( (Requires6 t0@@88 t1@@64 t2@@45 t3@@30 t4@@30 t5@@15 t6@@0 heap@@27 (Handle6 h@@56 r@@32 rd@@15) bx0@@64 bx1@@48 bx2@@32 bx3@@32 bx4@@16 bx5@@0)) )))
(assert (forall ((arg0@@241 T@U) (arg1@@119 T@U) (arg2@@77 T@U) (arg3@@54 T@U) (arg4@@46 T@U) (arg5@@40 T@U) (arg6@@29 T@U) (arg7@@16 T@U) (arg8@@5 T@U) (arg9@@4 T@U) (arg10@@4 T@U) (arg11@@2 T@U) (arg12@@2 T@U) (arg13@@0 T@U) (arg14@@0 T@U) ) (! (= (type (Reads6 arg0@@241 arg1@@119 arg2@@77 arg3@@54 arg4@@46 arg5@@40 arg6@@29 arg7@@16 arg8@@5 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads6| :pattern ( (Reads6 arg0@@241 arg1@@119 arg2@@77 arg3@@54 arg4@@46 arg5@@40 arg6@@29 arg7@@16 arg8@@5 arg9@@4 arg10@@4 arg11@@2 arg12@@2 arg13@@0 arg14@@0)) )))
(assert (forall ((t0@@89 T@U) (t1@@65 T@U) (t2@@46 T@U) (t3@@31 T@U) (t4@@31 T@U) (t5@@16 T@U) (t6@@1 T@U) (heap@@28 T@U) (h@@57 T@U) (r@@33 T@U) (rd@@16 T@U) (bx0@@65 T@U) (bx1@@49 T@U) (bx2@@33 T@U) (bx3@@33 T@U) (bx4@@17 T@U) (bx5@@1 T@U) (bx@@78 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@89) TyType) (= (type t1@@65) TyType)) (= (type t2@@46) TyType)) (= (type t3@@31) TyType)) (= (type t4@@31) TyType)) (= (type t5@@16) TyType)) (= (type t6@@1) TyType)) (= (type heap@@28) (MapType0Type refType MapType1Type))) (= (type h@@57) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@33) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@16) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@65) BoxType)) (= (type bx1@@49) BoxType)) (= (type bx2@@33) BoxType)) (= (type bx3@@33) BoxType)) (= (type bx4@@17) BoxType)) (= (type bx5@@1) BoxType)) (= (type bx@@78) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads6 t0@@89 t1@@65 t2@@46 t3@@31 t4@@31 t5@@16 t6@@1 heap@@28 (Handle6 h@@57 r@@33 rd@@16) bx0@@65 bx1@@49 bx2@@33 bx3@@33 bx4@@17 bx5@@1) bx@@78)) (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@65 bx1@@49 bx2@@33 bx3@@33 bx4@@17 bx5@@1) bx@@78))) (=> (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@65 bx1@@49 bx2@@33 bx3@@33 bx4@@17 bx5@@1) bx@@78)) (U_2_bool (MapType0Select (Reads6 t0@@89 t1@@65 t2@@46 t3@@31 t4@@31 t5@@16 t6@@1 heap@@28 (Handle6 h@@57 r@@33 rd@@16) bx0@@65 bx1@@49 bx2@@33 bx3@@33 bx4@@17 bx5@@1) bx@@78))))) :qid |unknown.0:0| :skolemid |926| :pattern ( (MapType0Select (Reads6 t0@@89 t1@@65 t2@@46 t3@@31 t4@@31 t5@@16 t6@@1 heap@@28 (Handle6 h@@57 r@@33 rd@@16) bx0@@65 bx1@@49 bx2@@33 bx3@@33 bx4@@17 bx5@@1) bx@@78)) )))
(assert (forall ((t0@@90 T@U) (t1@@66 T@U) (t2@@47 T@U) (t3@@32 T@U) (t4@@32 T@U) (t5@@17 T@U) (t6@@2 T@U) (h0@@30 T@U) (h1@@30 T@U) (f@@65 T@U) (bx0@@66 T@U) (bx1@@50 T@U) (bx2@@34 T@U) (bx3@@34 T@U) (bx4@@18 T@U) (bx5@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@90) TyType) (= (type t1@@66) TyType)) (= (type t2@@47) TyType)) (= (type t3@@32) TyType)) (= (type t4@@32) TyType)) (= (type t5@@17) TyType)) (= (type t6@@2) TyType)) (= (type h0@@30) (MapType0Type refType MapType1Type))) (= (type h1@@30) (MapType0Type refType MapType1Type))) (= (type f@@65) HandleTypeType)) (= (type bx0@@66) BoxType)) (= (type bx1@@50) BoxType)) (= (type bx2@@34) BoxType)) (= (type bx3@@34) BoxType)) (= (type bx4@@18) BoxType)) (= (type bx5@@2) BoxType)) (and (and (and ($HeapSucc h0@@30 h1@@30) (and ($IsGoodHeap h0@@30) ($IsGoodHeap h1@@30))) (and (and (and (and (and (and ($IsBox bx0@@66 t0@@90) ($IsBox bx1@@50 t1@@66)) ($IsBox bx2@@34 t2@@47)) ($IsBox bx3@@34 t3@@32)) ($IsBox bx4@@18 t4@@32)) ($IsBox bx5@@2 t5@@17)) ($Is f@@65 (Tclass._System.___hFunc6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@32 t5@@17 t6@@2)))) (forall ((o@@84 T@U) (fld@@29 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@29)))) (=> (and (and (= (type o@@84) refType) (= (type fld@@29) (FieldType a@@112))) (and (not (= o@@84 null)) (U_2_bool (MapType0Select (Reads6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@32 t5@@17 t6@@2 h0@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@34 bx4@@18 bx5@@2) ($Box o@@84))))) (= (MapType1Select (MapType0Select h0@@30 o@@84) fld@@29) (MapType1Select (MapType0Select h1@@30 o@@84) fld@@29)))) :qid |unknown.0:0| :skolemid |927| :no-pattern (type o@@84) :no-pattern (type fld@@29) :no-pattern (U_2_int o@@84) :no-pattern (U_2_bool o@@84) :no-pattern (U_2_int fld@@29) :no-pattern (U_2_bool fld@@29) )))) (= (Reads6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@32 t5@@17 t6@@2 h0@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@34 bx4@@18 bx5@@2) (Reads6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@32 t5@@17 t6@@2 h1@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@34 bx4@@18 bx5@@2))) :qid |unknown.0:0| :skolemid |928| :pattern ( ($HeapSucc h0@@30 h1@@30) (Reads6 t0@@90 t1@@66 t2@@47 t3@@32 t4@@32 t5@@17 t6@@2 h1@@30 f@@65 bx0@@66 bx1@@50 bx2@@34 bx3@@34 bx4@@18 bx5@@2)) )))
(assert (forall ((t0@@91 T@U) (t1@@67 T@U) (t2@@48 T@U) (t3@@33 T@U) (t4@@33 T@U) (t5@@18 T@U) (t6@@3 T@U) (h0@@31 T@U) (h1@@31 T@U) (f@@66 T@U) (bx0@@67 T@U) (bx1@@51 T@U) (bx2@@35 T@U) (bx3@@35 T@U) (bx4@@19 T@U) (bx5@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@91) TyType) (= (type t1@@67) TyType)) (= (type t2@@48) TyType)) (= (type t3@@33) TyType)) (= (type t4@@33) TyType)) (= (type t5@@18) TyType)) (= (type t6@@3) TyType)) (= (type h0@@31) (MapType0Type refType MapType1Type))) (= (type h1@@31) (MapType0Type refType MapType1Type))) (= (type f@@66) HandleTypeType)) (= (type bx0@@67) BoxType)) (= (type bx1@@51) BoxType)) (= (type bx2@@35) BoxType)) (= (type bx3@@35) BoxType)) (= (type bx4@@19) BoxType)) (= (type bx5@@3) BoxType)) (and (and (and ($HeapSucc h0@@31 h1@@31) (and ($IsGoodHeap h0@@31) ($IsGoodHeap h1@@31))) (and (and (and (and (and (and ($IsBox bx0@@67 t0@@91) ($IsBox bx1@@51 t1@@67)) ($IsBox bx2@@35 t2@@48)) ($IsBox bx3@@35 t3@@33)) ($IsBox bx4@@19 t4@@33)) ($IsBox bx5@@3 t5@@18)) ($Is f@@66 (Tclass._System.___hFunc6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@33 t5@@18 t6@@3)))) (forall ((o@@85 T@U) (fld@@30 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@30)))) (=> (and (and (= (type o@@85) refType) (= (type fld@@30) (FieldType a@@113))) (and (not (= o@@85 null)) (U_2_bool (MapType0Select (Reads6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@33 t5@@18 t6@@3 h1@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@35 bx4@@19 bx5@@3) ($Box o@@85))))) (= (MapType1Select (MapType0Select h0@@31 o@@85) fld@@30) (MapType1Select (MapType0Select h1@@31 o@@85) fld@@30)))) :qid |unknown.0:0| :skolemid |929| :no-pattern (type o@@85) :no-pattern (type fld@@30) :no-pattern (U_2_int o@@85) :no-pattern (U_2_bool o@@85) :no-pattern (U_2_int fld@@30) :no-pattern (U_2_bool fld@@30) )))) (= (Reads6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@33 t5@@18 t6@@3 h0@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@35 bx4@@19 bx5@@3) (Reads6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@33 t5@@18 t6@@3 h1@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@35 bx4@@19 bx5@@3))) :qid |unknown.0:0| :skolemid |930| :pattern ( ($HeapSucc h0@@31 h1@@31) (Reads6 t0@@91 t1@@67 t2@@48 t3@@33 t4@@33 t5@@18 t6@@3 h1@@31 f@@66 bx0@@67 bx1@@51 bx2@@35 bx3@@35 bx4@@19 bx5@@3)) )))
(assert (forall ((t0@@92 T@U) (t1@@68 T@U) (t2@@49 T@U) (t3@@34 T@U) (t4@@34 T@U) (t5@@19 T@U) (t6@@4 T@U) (h0@@32 T@U) (h1@@32 T@U) (f@@67 T@U) (bx0@@68 T@U) (bx1@@52 T@U) (bx2@@36 T@U) (bx3@@36 T@U) (bx4@@20 T@U) (bx5@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@92) TyType) (= (type t1@@68) TyType)) (= (type t2@@49) TyType)) (= (type t3@@34) TyType)) (= (type t4@@34) TyType)) (= (type t5@@19) TyType)) (= (type t6@@4) TyType)) (= (type h0@@32) (MapType0Type refType MapType1Type))) (= (type h1@@32) (MapType0Type refType MapType1Type))) (= (type f@@67) HandleTypeType)) (= (type bx0@@68) BoxType)) (= (type bx1@@52) BoxType)) (= (type bx2@@36) BoxType)) (= (type bx3@@36) BoxType)) (= (type bx4@@20) BoxType)) (= (type bx5@@4) BoxType)) (and (and (and ($HeapSucc h0@@32 h1@@32) (and ($IsGoodHeap h0@@32) ($IsGoodHeap h1@@32))) (and (and (and (and (and (and ($IsBox bx0@@68 t0@@92) ($IsBox bx1@@52 t1@@68)) ($IsBox bx2@@36 t2@@49)) ($IsBox bx3@@36 t3@@34)) ($IsBox bx4@@20 t4@@34)) ($IsBox bx5@@4 t5@@19)) ($Is f@@67 (Tclass._System.___hFunc6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@34 t5@@19 t6@@4)))) (forall ((o@@86 T@U) (fld@@31 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@31)))) (=> (and (and (= (type o@@86) refType) (= (type fld@@31) (FieldType a@@114))) (and (not (= o@@86 null)) (U_2_bool (MapType0Select (Reads6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@34 t5@@19 t6@@4 h0@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@36 bx4@@20 bx5@@4) ($Box o@@86))))) (= (MapType1Select (MapType0Select h0@@32 o@@86) fld@@31) (MapType1Select (MapType0Select h1@@32 o@@86) fld@@31)))) :qid |unknown.0:0| :skolemid |931| :no-pattern (type o@@86) :no-pattern (type fld@@31) :no-pattern (U_2_int o@@86) :no-pattern (U_2_bool o@@86) :no-pattern (U_2_int fld@@31) :no-pattern (U_2_bool fld@@31) )))) (and (=> (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@34 t5@@19 t6@@4 h0@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@36 bx4@@20 bx5@@4) (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@34 t5@@19 t6@@4 h1@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@36 bx4@@20 bx5@@4)) (=> (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@34 t5@@19 t6@@4 h1@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@36 bx4@@20 bx5@@4) (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@34 t5@@19 t6@@4 h0@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@36 bx4@@20 bx5@@4)))) :qid |unknown.0:0| :skolemid |932| :pattern ( ($HeapSucc h0@@32 h1@@32) (Requires6 t0@@92 t1@@68 t2@@49 t3@@34 t4@@34 t5@@19 t6@@4 h1@@32 f@@67 bx0@@68 bx1@@52 bx2@@36 bx3@@36 bx4@@20 bx5@@4)) )))
(assert (forall ((t0@@93 T@U) (t1@@69 T@U) (t2@@50 T@U) (t3@@35 T@U) (t4@@35 T@U) (t5@@20 T@U) (t6@@5 T@U) (h0@@33 T@U) (h1@@33 T@U) (f@@68 T@U) (bx0@@69 T@U) (bx1@@53 T@U) (bx2@@37 T@U) (bx3@@37 T@U) (bx4@@21 T@U) (bx5@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@93) TyType) (= (type t1@@69) TyType)) (= (type t2@@50) TyType)) (= (type t3@@35) TyType)) (= (type t4@@35) TyType)) (= (type t5@@20) TyType)) (= (type t6@@5) TyType)) (= (type h0@@33) (MapType0Type refType MapType1Type))) (= (type h1@@33) (MapType0Type refType MapType1Type))) (= (type f@@68) HandleTypeType)) (= (type bx0@@69) BoxType)) (= (type bx1@@53) BoxType)) (= (type bx2@@37) BoxType)) (= (type bx3@@37) BoxType)) (= (type bx4@@21) BoxType)) (= (type bx5@@5) BoxType)) (and (and (and ($HeapSucc h0@@33 h1@@33) (and ($IsGoodHeap h0@@33) ($IsGoodHeap h1@@33))) (and (and (and (and (and (and ($IsBox bx0@@69 t0@@93) ($IsBox bx1@@53 t1@@69)) ($IsBox bx2@@37 t2@@50)) ($IsBox bx3@@37 t3@@35)) ($IsBox bx4@@21 t4@@35)) ($IsBox bx5@@5 t5@@20)) ($Is f@@68 (Tclass._System.___hFunc6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@35 t5@@20 t6@@5)))) (forall ((o@@87 T@U) (fld@@32 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@32)))) (=> (and (and (= (type o@@87) refType) (= (type fld@@32) (FieldType a@@115))) (and (not (= o@@87 null)) (U_2_bool (MapType0Select (Reads6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@35 t5@@20 t6@@5 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@37 bx4@@21 bx5@@5) ($Box o@@87))))) (= (MapType1Select (MapType0Select h0@@33 o@@87) fld@@32) (MapType1Select (MapType0Select h1@@33 o@@87) fld@@32)))) :qid |unknown.0:0| :skolemid |933| :no-pattern (type o@@87) :no-pattern (type fld@@32) :no-pattern (U_2_int o@@87) :no-pattern (U_2_bool o@@87) :no-pattern (U_2_int fld@@32) :no-pattern (U_2_bool fld@@32) )))) (and (=> (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@35 t5@@20 t6@@5 h0@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@37 bx4@@21 bx5@@5) (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@35 t5@@20 t6@@5 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@37 bx4@@21 bx5@@5)) (=> (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@35 t5@@20 t6@@5 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@37 bx4@@21 bx5@@5) (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@35 t5@@20 t6@@5 h0@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@37 bx4@@21 bx5@@5)))) :qid |unknown.0:0| :skolemid |934| :pattern ( ($HeapSucc h0@@33 h1@@33) (Requires6 t0@@93 t1@@69 t2@@50 t3@@35 t4@@35 t5@@20 t6@@5 h1@@33 f@@68 bx0@@69 bx1@@53 bx2@@37 bx3@@37 bx4@@21 bx5@@5)) )))
(assert (forall ((t0@@94 T@U) (t1@@70 T@U) (t2@@51 T@U) (t3@@36 T@U) (t4@@36 T@U) (t5@@21 T@U) (t6@@6 T@U) (h0@@34 T@U) (h1@@34 T@U) (f@@69 T@U) (bx0@@70 T@U) (bx1@@54 T@U) (bx2@@38 T@U) (bx3@@38 T@U) (bx4@@22 T@U) (bx5@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@94) TyType) (= (type t1@@70) TyType)) (= (type t2@@51) TyType)) (= (type t3@@36) TyType)) (= (type t4@@36) TyType)) (= (type t5@@21) TyType)) (= (type t6@@6) TyType)) (= (type h0@@34) (MapType0Type refType MapType1Type))) (= (type h1@@34) (MapType0Type refType MapType1Type))) (= (type f@@69) HandleTypeType)) (= (type bx0@@70) BoxType)) (= (type bx1@@54) BoxType)) (= (type bx2@@38) BoxType)) (= (type bx3@@38) BoxType)) (= (type bx4@@22) BoxType)) (= (type bx5@@6) BoxType)) (and (and (and ($HeapSucc h0@@34 h1@@34) (and ($IsGoodHeap h0@@34) ($IsGoodHeap h1@@34))) (and (and (and (and (and (and ($IsBox bx0@@70 t0@@94) ($IsBox bx1@@54 t1@@70)) ($IsBox bx2@@38 t2@@51)) ($IsBox bx3@@38 t3@@36)) ($IsBox bx4@@22 t4@@36)) ($IsBox bx5@@6 t5@@21)) ($Is f@@69 (Tclass._System.___hFunc6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@36 t5@@21 t6@@6)))) (forall ((o@@88 T@U) (fld@@33 T@U) ) (! (let ((a@@116 (FieldTypeInv0 (type fld@@33)))) (=> (and (and (= (type o@@88) refType) (= (type fld@@33) (FieldType a@@116))) (and (not (= o@@88 null)) (U_2_bool (MapType0Select (Reads6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@36 t5@@21 t6@@6 h0@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@38 bx4@@22 bx5@@6) ($Box o@@88))))) (= (MapType1Select (MapType0Select h0@@34 o@@88) fld@@33) (MapType1Select (MapType0Select h1@@34 o@@88) fld@@33)))) :qid |unknown.0:0| :skolemid |935| :no-pattern (type o@@88) :no-pattern (type fld@@33) :no-pattern (U_2_int o@@88) :no-pattern (U_2_bool o@@88) :no-pattern (U_2_int fld@@33) :no-pattern (U_2_bool fld@@33) )))) (= (Apply6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@36 t5@@21 t6@@6 h0@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@38 bx4@@22 bx5@@6) (Apply6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@36 t5@@21 t6@@6 h1@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@38 bx4@@22 bx5@@6))) :qid |unknown.0:0| :skolemid |936| :pattern ( ($HeapSucc h0@@34 h1@@34) (Apply6 t0@@94 t1@@70 t2@@51 t3@@36 t4@@36 t5@@21 t6@@6 h1@@34 f@@69 bx0@@70 bx1@@54 bx2@@38 bx3@@38 bx4@@22 bx5@@6)) )))
(assert (forall ((t0@@95 T@U) (t1@@71 T@U) (t2@@52 T@U) (t3@@37 T@U) (t4@@37 T@U) (t5@@22 T@U) (t6@@7 T@U) (h0@@35 T@U) (h1@@35 T@U) (f@@70 T@U) (bx0@@71 T@U) (bx1@@55 T@U) (bx2@@39 T@U) (bx3@@39 T@U) (bx4@@23 T@U) (bx5@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@95) TyType) (= (type t1@@71) TyType)) (= (type t2@@52) TyType)) (= (type t3@@37) TyType)) (= (type t4@@37) TyType)) (= (type t5@@22) TyType)) (= (type t6@@7) TyType)) (= (type h0@@35) (MapType0Type refType MapType1Type))) (= (type h1@@35) (MapType0Type refType MapType1Type))) (= (type f@@70) HandleTypeType)) (= (type bx0@@71) BoxType)) (= (type bx1@@55) BoxType)) (= (type bx2@@39) BoxType)) (= (type bx3@@39) BoxType)) (= (type bx4@@23) BoxType)) (= (type bx5@@7) BoxType)) (and (and (and ($HeapSucc h0@@35 h1@@35) (and ($IsGoodHeap h0@@35) ($IsGoodHeap h1@@35))) (and (and (and (and (and (and ($IsBox bx0@@71 t0@@95) ($IsBox bx1@@55 t1@@71)) ($IsBox bx2@@39 t2@@52)) ($IsBox bx3@@39 t3@@37)) ($IsBox bx4@@23 t4@@37)) ($IsBox bx5@@7 t5@@22)) ($Is f@@70 (Tclass._System.___hFunc6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@37 t5@@22 t6@@7)))) (forall ((o@@89 T@U) (fld@@34 T@U) ) (! (let ((a@@117 (FieldTypeInv0 (type fld@@34)))) (=> (and (and (= (type o@@89) refType) (= (type fld@@34) (FieldType a@@117))) (and (not (= o@@89 null)) (U_2_bool (MapType0Select (Reads6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@37 t5@@22 t6@@7 h1@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@39 bx4@@23 bx5@@7) ($Box o@@89))))) (= (MapType1Select (MapType0Select h0@@35 o@@89) fld@@34) (MapType1Select (MapType0Select h1@@35 o@@89) fld@@34)))) :qid |unknown.0:0| :skolemid |937| :no-pattern (type o@@89) :no-pattern (type fld@@34) :no-pattern (U_2_int o@@89) :no-pattern (U_2_bool o@@89) :no-pattern (U_2_int fld@@34) :no-pattern (U_2_bool fld@@34) )))) (= (Apply6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@37 t5@@22 t6@@7 h0@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@39 bx4@@23 bx5@@7) (Apply6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@37 t5@@22 t6@@7 h1@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@39 bx4@@23 bx5@@7))) :qid |unknown.0:0| :skolemid |938| :pattern ( ($HeapSucc h0@@35 h1@@35) (Apply6 t0@@95 t1@@71 t2@@52 t3@@37 t4@@37 t5@@22 t6@@7 h1@@35 f@@70 bx0@@71 bx1@@55 bx2@@39 bx3@@39 bx4@@23 bx5@@7)) )))
(assert (forall ((t0@@96 T@U) (t1@@72 T@U) (t2@@53 T@U) (t3@@38 T@U) (t4@@38 T@U) (t5@@23 T@U) (t6@@8 T@U) (heap@@29 T@U) (f@@71 T@U) (bx0@@72 T@U) (bx1@@56 T@U) (bx2@@40 T@U) (bx3@@40 T@U) (bx4@@24 T@U) (bx5@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@96) TyType) (= (type t1@@72) TyType)) (= (type t2@@53) TyType)) (= (type t3@@38) TyType)) (= (type t4@@38) TyType)) (= (type t5@@23) TyType)) (= (type t6@@8) TyType)) (= (type heap@@29) (MapType0Type refType MapType1Type))) (= (type f@@71) HandleTypeType)) (= (type bx0@@72) BoxType)) (= (type bx1@@56) BoxType)) (= (type bx2@@40) BoxType)) (= (type bx3@@40) BoxType)) (= (type bx4@@24) BoxType)) (= (type bx5@@8) BoxType)) (and ($IsGoodHeap heap@@29) (and (and (and (and (and (and ($IsBox bx0@@72 t0@@96) ($IsBox bx1@@56 t1@@72)) ($IsBox bx2@@40 t2@@53)) ($IsBox bx3@@40 t3@@38)) ($IsBox bx4@@24 t4@@38)) ($IsBox bx5@@8 t5@@23)) ($Is f@@71 (Tclass._System.___hFunc6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@38 t5@@23 t6@@8))))) (and (=> (|Set#Equal| (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@38 t5@@23 t6@@8 $OneHeap f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@40 bx4@@24 bx5@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@38 t5@@23 t6@@8 heap@@29 f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@40 bx4@@24 bx5@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@38 t5@@23 t6@@8 heap@@29 f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@40 bx4@@24 bx5@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@38 t5@@23 t6@@8 $OneHeap f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@40 bx4@@24 bx5@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |939| :pattern ( (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@38 t5@@23 t6@@8 $OneHeap f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@40 bx4@@24 bx5@@8) ($IsGoodHeap heap@@29)) :pattern ( (Reads6 t0@@96 t1@@72 t2@@53 t3@@38 t4@@38 t5@@23 t6@@8 heap@@29 f@@71 bx0@@72 bx1@@56 bx2@@40 bx3@@40 bx4@@24 bx5@@8)) )))
(assert (forall ((t0@@97 T@U) (t1@@73 T@U) (t2@@54 T@U) (t3@@39 T@U) (t4@@39 T@U) (t5@@24 T@U) (t6@@9 T@U) (heap@@30 T@U) (f@@72 T@U) (bx0@@73 T@U) (bx1@@57 T@U) (bx2@@41 T@U) (bx3@@41 T@U) (bx4@@25 T@U) (bx5@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@97) TyType) (= (type t1@@73) TyType)) (= (type t2@@54) TyType)) (= (type t3@@39) TyType)) (= (type t4@@39) TyType)) (= (type t5@@24) TyType)) (= (type t6@@9) TyType)) (= (type heap@@30) (MapType0Type refType MapType1Type))) (= (type f@@72) HandleTypeType)) (= (type bx0@@73) BoxType)) (= (type bx1@@57) BoxType)) (= (type bx2@@41) BoxType)) (= (type bx3@@41) BoxType)) (= (type bx4@@25) BoxType)) (= (type bx5@@9) BoxType)) (and (and ($IsGoodHeap heap@@30) (and (and (and (and (and (and ($IsBox bx0@@73 t0@@97) ($IsBox bx1@@57 t1@@73)) ($IsBox bx2@@41 t2@@54)) ($IsBox bx3@@41 t3@@39)) ($IsBox bx4@@25 t4@@39)) ($IsBox bx5@@9 t5@@24)) ($Is f@@72 (Tclass._System.___hFunc6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@39 t5@@24 t6@@9)))) (|Set#Equal| (Reads6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@39 t5@@24 t6@@9 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@41 bx4@@25 bx5@@9) (|Set#Empty| BoxType)))) (and (=> (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@39 t5@@24 t6@@9 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@41 bx4@@25 bx5@@9) (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@39 t5@@24 t6@@9 heap@@30 f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@41 bx4@@25 bx5@@9)) (=> (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@39 t5@@24 t6@@9 heap@@30 f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@41 bx4@@25 bx5@@9) (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@39 t5@@24 t6@@9 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@41 bx4@@25 bx5@@9)))) :qid |unknown.0:0| :skolemid |940| :pattern ( (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@39 t5@@24 t6@@9 $OneHeap f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@41 bx4@@25 bx5@@9) ($IsGoodHeap heap@@30)) :pattern ( (Requires6 t0@@97 t1@@73 t2@@54 t3@@39 t4@@39 t5@@24 t6@@9 heap@@30 f@@72 bx0@@73 bx1@@57 bx2@@41 bx3@@41 bx4@@25 bx5@@9)) )))
(assert (forall ((f@@73 T@U) (t0@@98 T@U) (t1@@74 T@U) (t2@@55 T@U) (t3@@40 T@U) (t4@@40 T@U) (t5@@25 T@U) (t6@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@73) HandleTypeType) (= (type t0@@98) TyType)) (= (type t1@@74) TyType)) (= (type t2@@55) TyType)) (= (type t3@@40) TyType)) (= (type t4@@40) TyType)) (= (type t5@@25) TyType)) (= (type t6@@10) TyType)) (and (=> ($Is f@@73 (Tclass._System.___hFunc6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@40 t5@@25 t6@@10)) (forall ((h@@58 T@U) (bx0@@74 T@U) (bx1@@58 T@U) (bx2@@42 T@U) (bx3@@42 T@U) (bx4@@26 T@U) (bx5@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@58) (MapType0Type refType MapType1Type)) (= (type bx0@@74) BoxType)) (= (type bx1@@58) BoxType)) (= (type bx2@@42) BoxType)) (= (type bx3@@42) BoxType)) (= (type bx4@@26) BoxType)) (= (type bx5@@10) BoxType)) (and (and ($IsGoodHeap h@@58) (and (and (and (and (and ($IsBox bx0@@74 t0@@98) ($IsBox bx1@@58 t1@@74)) ($IsBox bx2@@42 t2@@55)) ($IsBox bx3@@42 t3@@40)) ($IsBox bx4@@26 t4@@40)) ($IsBox bx5@@10 t5@@25))) (Requires6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@40 t5@@25 t6@@10 h@@58 f@@73 bx0@@74 bx1@@58 bx2@@42 bx3@@42 bx4@@26 bx5@@10))) ($IsBox (Apply6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@40 t5@@25 t6@@10 h@@58 f@@73 bx0@@74 bx1@@58 bx2@@42 bx3@@42 bx4@@26 bx5@@10) t6@@10)) :qid |DafnyPre.521:12| :skolemid |941| :pattern ( (Apply6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@40 t5@@25 t6@@10 h@@58 f@@73 bx0@@74 bx1@@58 bx2@@42 bx3@@42 bx4@@26 bx5@@10)) ))) (=> (forall ((h@@59 T@U) (bx0@@75 T@U) (bx1@@59 T@U) (bx2@@43 T@U) (bx3@@43 T@U) (bx4@@27 T@U) (bx5@@11 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@59) (MapType0Type refType MapType1Type)) (= (type bx0@@75) BoxType)) (= (type bx1@@59) BoxType)) (= (type bx2@@43) BoxType)) (= (type bx3@@43) BoxType)) (= (type bx4@@27) BoxType)) (= (type bx5@@11) BoxType)) (and (and ($IsGoodHeap h@@59) (and (and (and (and (and ($IsBox bx0@@75 t0@@98) ($IsBox bx1@@59 t1@@74)) ($IsBox bx2@@43 t2@@55)) ($IsBox bx3@@43 t3@@40)) ($IsBox bx4@@27 t4@@40)) ($IsBox bx5@@11 t5@@25))) (Requires6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@40 t5@@25 t6@@10 h@@59 f@@73 bx0@@75 bx1@@59 bx2@@43 bx3@@43 bx4@@27 bx5@@11))) ($IsBox (Apply6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@40 t5@@25 t6@@10 h@@59 f@@73 bx0@@75 bx1@@59 bx2@@43 bx3@@43 bx4@@27 bx5@@11) t6@@10)) :qid |DafnyPre.521:12| :skolemid |941| :pattern ( (Apply6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@40 t5@@25 t6@@10 h@@59 f@@73 bx0@@75 bx1@@59 bx2@@43 bx3@@43 bx4@@27 bx5@@11)) )) ($Is f@@73 (Tclass._System.___hFunc6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@40 t5@@25 t6@@10))))) :qid |unknown.0:0| :skolemid |942| :pattern ( ($Is f@@73 (Tclass._System.___hFunc6 t0@@98 t1@@74 t2@@55 t3@@40 t4@@40 t5@@25 t6@@10))) )))
(assert (forall ((f@@74 T@U) (t0@@99 T@U) (t1@@75 T@U) (t2@@56 T@U) (t3@@41 T@U) (t4@@41 T@U) (t5@@26 T@U) (t6@@11 T@U) (u0@@4 T@U) (u1@@3 T@U) (u2@@2 T@U) (u3@@1 T@U) (u4@@1 T@U) (u5@@0 T@U) (u6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@74) HandleTypeType) (= (type t0@@99) TyType)) (= (type t1@@75) TyType)) (= (type t2@@56) TyType)) (= (type t3@@41) TyType)) (= (type t4@@41) TyType)) (= (type t5@@26) TyType)) (= (type t6@@11) TyType)) (= (type u0@@4) TyType)) (= (type u1@@3) TyType)) (= (type u2@@2) TyType)) (= (type u3@@1) TyType)) (= (type u4@@1) TyType)) (= (type u5@@0) TyType)) (= (type u6) TyType)) (and (and (and (and (and (and (and ($Is f@@74 (Tclass._System.___hFunc6 t0@@99 t1@@75 t2@@56 t3@@41 t4@@41 t5@@26 t6@@11)) (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 u0@@4)) ($IsBox bx@@79 t0@@99)) :qid |unknown.0:0| :skolemid |943| :pattern ( ($IsBox bx@@79 u0@@4)) :pattern ( ($IsBox bx@@79 t0@@99)) ))) (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 u1@@3)) ($IsBox bx@@80 t1@@75)) :qid |unknown.0:0| :skolemid |944| :pattern ( ($IsBox bx@@80 u1@@3)) :pattern ( ($IsBox bx@@80 t1@@75)) ))) (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 u2@@2)) ($IsBox bx@@81 t2@@56)) :qid |unknown.0:0| :skolemid |945| :pattern ( ($IsBox bx@@81 u2@@2)) :pattern ( ($IsBox bx@@81 t2@@56)) ))) (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 u3@@1)) ($IsBox bx@@82 t3@@41)) :qid |unknown.0:0| :skolemid |946| :pattern ( ($IsBox bx@@82 u3@@1)) :pattern ( ($IsBox bx@@82 t3@@41)) ))) (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 u4@@1)) ($IsBox bx@@83 t4@@41)) :qid |unknown.0:0| :skolemid |947| :pattern ( ($IsBox bx@@83 u4@@1)) :pattern ( ($IsBox bx@@83 t4@@41)) ))) (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 u5@@0)) ($IsBox bx@@84 t5@@26)) :qid |unknown.0:0| :skolemid |948| :pattern ( ($IsBox bx@@84 u5@@0)) :pattern ( ($IsBox bx@@84 t5@@26)) ))) (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 t6@@11)) ($IsBox bx@@85 u6)) :qid |unknown.0:0| :skolemid |949| :pattern ( ($IsBox bx@@85 t6@@11)) :pattern ( ($IsBox bx@@85 u6)) )))) ($Is f@@74 (Tclass._System.___hFunc6 u0@@4 u1@@3 u2@@2 u3@@1 u4@@1 u5@@0 u6))) :qid |unknown.0:0| :skolemid |950| :pattern ( ($Is f@@74 (Tclass._System.___hFunc6 t0@@99 t1@@75 t2@@56 t3@@41 t4@@41 t5@@26 t6@@11)) ($Is f@@74 (Tclass._System.___hFunc6 u0@@4 u1@@3 u2@@2 u3@@1 u4@@1 u5@@0 u6))) )))
(assert (forall ((f@@75 T@U) (t0@@100 T@U) (t1@@76 T@U) (t2@@57 T@U) (t3@@42 T@U) (t4@@42 T@U) (t5@@27 T@U) (t6@@12 T@U) (h@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@75) HandleTypeType) (= (type t0@@100) TyType)) (= (type t1@@76) TyType)) (= (type t2@@57) TyType)) (= (type t3@@42) TyType)) (= (type t4@@42) TyType)) (= (type t5@@27) TyType)) (= (type t6@@12) TyType)) (= (type h@@60) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@60)) (and (=> ($IsAlloc f@@75 (Tclass._System.___hFunc6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12) h@@60) (forall ((bx0@@76 T@U) (bx1@@60 T@U) (bx2@@44 T@U) (bx3@@44 T@U) (bx4@@28 T@U) (bx5@@12 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@76) BoxType) (= (type bx1@@60) BoxType)) (= (type bx2@@44) BoxType)) (= (type bx3@@44) BoxType)) (= (type bx4@@28) BoxType)) (= (type bx5@@12) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@76 t0@@100) ($IsAllocBox bx0@@76 t0@@100 h@@60)) (and ($IsBox bx1@@60 t1@@76) ($IsAllocBox bx1@@60 t1@@76 h@@60))) (and ($IsBox bx2@@44 t2@@57) ($IsAllocBox bx2@@44 t2@@57 h@@60))) (and ($IsBox bx3@@44 t3@@42) ($IsAllocBox bx3@@44 t3@@42 h@@60))) (and ($IsBox bx4@@28 t4@@42) ($IsAllocBox bx4@@28 t4@@42 h@@60))) (and ($IsBox bx5@@12 t5@@27) ($IsAllocBox bx5@@12 t5@@27 h@@60))) (Requires6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@44 bx4@@28 bx5@@12)) (forall ((r@@34 T@U) ) (!  (=> (= (type r@@34) refType) (=> (and (not (= r@@34 null)) (U_2_bool (MapType0Select (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@44 bx4@@28 bx5@@12) ($Box r@@34)))) (U_2_bool (MapType1Select (MapType0Select h@@60 r@@34) alloc)))) :qid |unknown.0:0| :skolemid |951| :pattern ( (MapType0Select (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@44 bx4@@28 bx5@@12) ($Box r@@34))) )))) :qid |unknown.0:0| :skolemid |952| :pattern ( (Apply6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@44 bx4@@28 bx5@@12)) :pattern ( (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@76 bx1@@60 bx2@@44 bx3@@44 bx4@@28 bx5@@12)) ))) (=> (forall ((bx0@@77 T@U) (bx1@@61 T@U) (bx2@@45 T@U) (bx3@@45 T@U) (bx4@@29 T@U) (bx5@@13 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@77) BoxType) (= (type bx1@@61) BoxType)) (= (type bx2@@45) BoxType)) (= (type bx3@@45) BoxType)) (= (type bx4@@29) BoxType)) (= (type bx5@@13) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@77 t0@@100) ($IsAllocBox bx0@@77 t0@@100 h@@60)) (and ($IsBox bx1@@61 t1@@76) ($IsAllocBox bx1@@61 t1@@76 h@@60))) (and ($IsBox bx2@@45 t2@@57) ($IsAllocBox bx2@@45 t2@@57 h@@60))) (and ($IsBox bx3@@45 t3@@42) ($IsAllocBox bx3@@45 t3@@42 h@@60))) (and ($IsBox bx4@@29 t4@@42) ($IsAllocBox bx4@@29 t4@@42 h@@60))) (and ($IsBox bx5@@13 t5@@27) ($IsAllocBox bx5@@13 t5@@27 h@@60))) (Requires6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@45 bx4@@29 bx5@@13)) (forall ((r@@35 T@U) ) (!  (=> (= (type r@@35) refType) (=> (and (not (= r@@35 null)) (U_2_bool (MapType0Select (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@45 bx4@@29 bx5@@13) ($Box r@@35)))) (U_2_bool (MapType1Select (MapType0Select h@@60 r@@35) alloc)))) :qid |unknown.0:0| :skolemid |951| :pattern ( (MapType0Select (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@45 bx4@@29 bx5@@13) ($Box r@@35))) )))) :qid |unknown.0:0| :skolemid |952| :pattern ( (Apply6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@45 bx4@@29 bx5@@13)) :pattern ( (Reads6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12 h@@60 f@@75 bx0@@77 bx1@@61 bx2@@45 bx3@@45 bx4@@29 bx5@@13)) )) ($IsAlloc f@@75 (Tclass._System.___hFunc6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12) h@@60)))) :qid |unknown.0:0| :skolemid |953| :pattern ( ($IsAlloc f@@75 (Tclass._System.___hFunc6 t0@@100 t1@@76 t2@@57 t3@@42 t4@@42 t5@@27 t6@@12) h@@60)) )))
(assert (forall ((f@@76 T@U) (t0@@101 T@U) (t1@@77 T@U) (t2@@58 T@U) (t3@@43 T@U) (t4@@43 T@U) (t5@@28 T@U) (t6@@13 T@U) (h@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@76) HandleTypeType) (= (type t0@@101) TyType)) (= (type t1@@77) TyType)) (= (type t2@@58) TyType)) (= (type t3@@43) TyType)) (= (type t4@@43) TyType)) (= (type t5@@28) TyType)) (= (type t6@@13) TyType)) (= (type h@@61) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@61) ($IsAlloc f@@76 (Tclass._System.___hFunc6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@43 t5@@28 t6@@13) h@@61))) (forall ((bx0@@78 T@U) (bx1@@62 T@U) (bx2@@46 T@U) (bx3@@46 T@U) (bx4@@30 T@U) (bx5@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@78) BoxType) (= (type bx1@@62) BoxType)) (= (type bx2@@46) BoxType)) (= (type bx3@@46) BoxType)) (= (type bx4@@30) BoxType)) (= (type bx5@@14) BoxType)) (=> (and (and (and (and (and (and ($IsAllocBox bx0@@78 t0@@101 h@@61) ($IsAllocBox bx1@@62 t1@@77 h@@61)) ($IsAllocBox bx2@@46 t2@@58 h@@61)) ($IsAllocBox bx3@@46 t3@@43 h@@61)) ($IsAllocBox bx4@@30 t4@@43 h@@61)) ($IsAllocBox bx5@@14 t5@@28 h@@61)) (Requires6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@43 t5@@28 t6@@13 h@@61 f@@76 bx0@@78 bx1@@62 bx2@@46 bx3@@46 bx4@@30 bx5@@14)) ($IsAllocBox (Apply6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@43 t5@@28 t6@@13 h@@61 f@@76 bx0@@78 bx1@@62 bx2@@46 bx3@@46 bx4@@30 bx5@@14) t6@@13 h@@61))) :qid |unknown.0:0| :skolemid |954| :pattern ( (Apply6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@43 t5@@28 t6@@13 h@@61 f@@76 bx0@@78 bx1@@62 bx2@@46 bx3@@46 bx4@@30 bx5@@14)) ))) :qid |unknown.0:0| :skolemid |955| :pattern ( ($IsAlloc f@@76 (Tclass._System.___hFunc6 t0@@101 t1@@77 t2@@58 t3@@43 t4@@43 t5@@28 t6@@13) h@@61)) )))
(assert (forall ((arg0@@242 T@U) (arg1@@120 T@U) (arg2@@78 T@U) (arg3@@55 T@U) (arg4@@47 T@U) (arg5@@41 T@U) (arg6@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6 arg0@@242 arg1@@120 arg2@@78 arg3@@55 arg4@@47 arg5@@41 arg6@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc6| :pattern ( (Tclass._System.___hPartialFunc6 arg0@@242 arg1@@120 arg2@@78 arg3@@55 arg4@@47 arg5@@41 arg6@@30)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@61| T@U) (|#$T3@@61| T@U) (|#$T4@@36| T@U) (|#$T5@@8| T@U) (|#$R@@109| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$T3@@61|) TyType)) (= (type |#$T4@@36|) TyType)) (= (type |#$T5@@8|) TyType)) (= (type |#$R@@109|) TyType)) (= (Tag (Tclass._System.___hPartialFunc6 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@109|)) Tagclass._System.___hPartialFunc6)) :qid |unknown.0:0| :skolemid |956| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@61| |#$T4@@36| |#$T5@@8| |#$R@@109|)) )))
(assert (forall ((arg0@@243 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_0 arg0@@243)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_0| :pattern ( (Tclass._System.___hPartialFunc6_0 arg0@@243)) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$T2@@62| T@U) (|#$T3@@62| T@U) (|#$T4@@37| T@U) (|#$T5@@9| T@U) (|#$R@@110| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$T3@@62|) TyType)) (= (type |#$T4@@37|) TyType)) (= (type |#$T5@@9|) TyType)) (= (type |#$R@@110|) TyType)) (= (Tclass._System.___hPartialFunc6_0 (Tclass._System.___hPartialFunc6 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@110|)) |#$T0@@97|)) :qid |unknown.0:0| :skolemid |957| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@62| |#$T4@@37| |#$T5@@9| |#$R@@110|)) )))
(assert (forall ((arg0@@244 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_1 arg0@@244)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_1| :pattern ( (Tclass._System.___hPartialFunc6_1 arg0@@244)) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$T2@@63| T@U) (|#$T3@@63| T@U) (|#$T4@@38| T@U) (|#$T5@@10| T@U) (|#$R@@111| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$T3@@63|) TyType)) (= (type |#$T4@@38|) TyType)) (= (type |#$T5@@10|) TyType)) (= (type |#$R@@111|) TyType)) (= (Tclass._System.___hPartialFunc6_1 (Tclass._System.___hPartialFunc6 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@111|)) |#$T1@@82|)) :qid |unknown.0:0| :skolemid |958| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@63| |#$T4@@38| |#$T5@@10| |#$R@@111|)) )))
(assert (forall ((arg0@@245 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_2 arg0@@245)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_2| :pattern ( (Tclass._System.___hPartialFunc6_2 arg0@@245)) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$T2@@64| T@U) (|#$T3@@64| T@U) (|#$T4@@39| T@U) (|#$T5@@11| T@U) (|#$R@@112| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$T3@@64|) TyType)) (= (type |#$T4@@39|) TyType)) (= (type |#$T5@@11|) TyType)) (= (type |#$R@@112|) TyType)) (= (Tclass._System.___hPartialFunc6_2 (Tclass._System.___hPartialFunc6 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@112|)) |#$T2@@64|)) :qid |unknown.0:0| :skolemid |959| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@64| |#$T4@@39| |#$T5@@11| |#$R@@112|)) )))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_3 arg0@@246)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_3| :pattern ( (Tclass._System.___hPartialFunc6_3 arg0@@246)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@65| T@U) (|#$T3@@65| T@U) (|#$T4@@40| T@U) (|#$T5@@12| T@U) (|#$R@@113| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$T3@@65|) TyType)) (= (type |#$T4@@40|) TyType)) (= (type |#$T5@@12|) TyType)) (= (type |#$R@@113|) TyType)) (= (Tclass._System.___hPartialFunc6_3 (Tclass._System.___hPartialFunc6 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@113|)) |#$T3@@65|)) :qid |unknown.0:0| :skolemid |960| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@65| |#$T4@@40| |#$T5@@12| |#$R@@113|)) )))
(assert (forall ((arg0@@247 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_4 arg0@@247)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_4| :pattern ( (Tclass._System.___hPartialFunc6_4 arg0@@247)) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@66| T@U) (|#$T3@@66| T@U) (|#$T4@@41| T@U) (|#$T5@@13| T@U) (|#$R@@114| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$T3@@66|) TyType)) (= (type |#$T4@@41|) TyType)) (= (type |#$T5@@13|) TyType)) (= (type |#$R@@114|) TyType)) (= (Tclass._System.___hPartialFunc6_4 (Tclass._System.___hPartialFunc6 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@114|)) |#$T4@@41|)) :qid |unknown.0:0| :skolemid |961| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@66| |#$T4@@41| |#$T5@@13| |#$R@@114|)) )))
(assert (forall ((arg0@@248 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_5 arg0@@248)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_5| :pattern ( (Tclass._System.___hPartialFunc6_5 arg0@@248)) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@67| T@U) (|#$T3@@67| T@U) (|#$T4@@42| T@U) (|#$T5@@14| T@U) (|#$R@@115| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$T3@@67|) TyType)) (= (type |#$T4@@42|) TyType)) (= (type |#$T5@@14|) TyType)) (= (type |#$R@@115|) TyType)) (= (Tclass._System.___hPartialFunc6_5 (Tclass._System.___hPartialFunc6 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@115|)) |#$T5@@14|)) :qid |unknown.0:0| :skolemid |962| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$T3@@67| |#$T4@@42| |#$T5@@14| |#$R@@115|)) )))
(assert (forall ((arg0@@249 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_6 arg0@@249)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_6| :pattern ( (Tclass._System.___hPartialFunc6_6 arg0@@249)) )))
(assert (forall ((|#$T0@@103| T@U) (|#$T1@@87| T@U) (|#$T2@@68| T@U) (|#$T3@@68| T@U) (|#$T4@@43| T@U) (|#$T5@@15| T@U) (|#$R@@116| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@103|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$T3@@68|) TyType)) (= (type |#$T4@@43|) TyType)) (= (type |#$T5@@15|) TyType)) (= (type |#$R@@116|) TyType)) (= (Tclass._System.___hPartialFunc6_6 (Tclass._System.___hPartialFunc6 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@116|)) |#$R@@116|)) :qid |unknown.0:0| :skolemid |963| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$T3@@68| |#$T4@@43| |#$T5@@15| |#$R@@116|)) )))
(assert (forall ((|#$T0@@104| T@U) (|#$T1@@88| T@U) (|#$T2@@69| T@U) (|#$T3@@69| T@U) (|#$T4@@44| T@U) (|#$T5@@16| T@U) (|#$R@@117| T@U) (bx@@86 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$T3@@69|) TyType)) (= (type |#$T4@@44|) TyType)) (= (type |#$T5@@16|) TyType)) (= (type |#$R@@117|) TyType)) (= (type bx@@86) BoxType)) ($IsBox bx@@86 (Tclass._System.___hPartialFunc6 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@117|))) (and (= ($Box ($Unbox HandleTypeType bx@@86)) bx@@86) ($Is ($Unbox HandleTypeType bx@@86) (Tclass._System.___hPartialFunc6 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@117|)))) :qid |unknown.0:0| :skolemid |964| :pattern ( ($IsBox bx@@86 (Tclass._System.___hPartialFunc6 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$T3@@69| |#$T4@@44| |#$T5@@16| |#$R@@117|))) )))
(assert (forall ((|#$T0@@105| T@U) (|#$T1@@89| T@U) (|#$T2@@70| T@U) (|#$T3@@70| T@U) (|#$T4@@45| T@U) (|#$T5@@17| T@U) (|#$R@@118| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@105|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$T3@@70|) TyType)) (= (type |#$T4@@45|) TyType)) (= (type |#$T5@@17|) TyType)) (= (type |#$R@@118|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (and (=> ($Is |f#0@@19| (Tclass._System.___hPartialFunc6 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@118|)) (and ($Is |f#0@@19| (Tclass._System.___hFunc6 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@118|)) (forall ((|x0#0@@15| T@U) (|x1#0@@11| T@U) (|x2#0@@7| T@U) (|x3#0@@7| T@U) (|x4#0@@3| T@U) (|x5#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@15|) BoxType) (= (type |x1#0@@11|) BoxType)) (= (type |x2#0@@7|) BoxType)) (= (type |x3#0@@7|) BoxType)) (= (type |x4#0@@3|) BoxType)) (= (type |x5#0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@15| |#$T0@@105|) ($IsBox |x1#0@@11| |#$T1@@89|)) ($IsBox |x2#0@@7| |#$T2@@70|)) ($IsBox |x3#0@@7| |#$T3@@70|)) ($IsBox |x4#0@@3| |#$T4@@45|)) ($IsBox |x5#0| |#$T5@@17|))) (|Set#Equal| (Reads6 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@118| $OneHeap |f#0@@19| |x0#0@@15| |x1#0@@11| |x2#0@@7| |x3#0@@7| |x4#0@@3| |x5#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |965| :no-pattern (type |x0#0@@15|) :no-pattern (type |x1#0@@11|) :no-pattern (type |x2#0@@7|) :no-pattern (type |x3#0@@7|) :no-pattern (type |x4#0@@3|) :no-pattern (type |x5#0|) :no-pattern (U_2_int |x0#0@@15|) :no-pattern (U_2_bool |x0#0@@15|) :no-pattern (U_2_int |x1#0@@11|) :no-pattern (U_2_bool |x1#0@@11|) :no-pattern (U_2_int |x2#0@@7|) :no-pattern (U_2_bool |x2#0@@7|) :no-pattern (U_2_int |x3#0@@7|) :no-pattern (U_2_bool |x3#0@@7|) :no-pattern (U_2_int |x4#0@@3|) :no-pattern (U_2_bool |x4#0@@3|) :no-pattern (U_2_int |x5#0|) :no-pattern (U_2_bool |x5#0|) )))) (=> (and ($Is |f#0@@19| (Tclass._System.___hFunc6 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@118|)) (forall ((|x0#0@@16| T@U) (|x1#0@@12| T@U) (|x2#0@@8| T@U) (|x3#0@@8| T@U) (|x4#0@@4| T@U) (|x5#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@16|) BoxType) (= (type |x1#0@@12|) BoxType)) (= (type |x2#0@@8|) BoxType)) (= (type |x3#0@@8|) BoxType)) (= (type |x4#0@@4|) BoxType)) (= (type |x5#0@@0|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@16| |#$T0@@105|) ($IsBox |x1#0@@12| |#$T1@@89|)) ($IsBox |x2#0@@8| |#$T2@@70|)) ($IsBox |x3#0@@8| |#$T3@@70|)) ($IsBox |x4#0@@4| |#$T4@@45|)) ($IsBox |x5#0@@0| |#$T5@@17|))) (|Set#Equal| (Reads6 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@118| $OneHeap |f#0@@19| |x0#0@@16| |x1#0@@12| |x2#0@@8| |x3#0@@8| |x4#0@@4| |x5#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |965| :no-pattern (type |x0#0@@16|) :no-pattern (type |x1#0@@12|) :no-pattern (type |x2#0@@8|) :no-pattern (type |x3#0@@8|) :no-pattern (type |x4#0@@4|) :no-pattern (type |x5#0@@0|) :no-pattern (U_2_int |x0#0@@16|) :no-pattern (U_2_bool |x0#0@@16|) :no-pattern (U_2_int |x1#0@@12|) :no-pattern (U_2_bool |x1#0@@12|) :no-pattern (U_2_int |x2#0@@8|) :no-pattern (U_2_bool |x2#0@@8|) :no-pattern (U_2_int |x3#0@@8|) :no-pattern (U_2_bool |x3#0@@8|) :no-pattern (U_2_int |x4#0@@4|) :no-pattern (U_2_bool |x4#0@@4|) :no-pattern (U_2_int |x5#0@@0|) :no-pattern (U_2_bool |x5#0@@0|) ))) ($Is |f#0@@19| (Tclass._System.___hPartialFunc6 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@118|))))) :qid |unknown.0:0| :skolemid |966| :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc6 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$T3@@70| |#$T4@@45| |#$T5@@17| |#$R@@118|))) )))
(assert (forall ((|#$T0@@106| T@U) (|#$T1@@90| T@U) (|#$T2@@71| T@U) (|#$T3@@71| T@U) (|#$T4@@46| T@U) (|#$T5@@18| T@U) (|#$R@@119| T@U) (|f#0@@20| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$T3@@71|) TyType)) (= (type |#$T4@@46|) TyType)) (= (type |#$T5@@18|) TyType)) (= (type |#$R@@119|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc6 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@119|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc6 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@119|) $h@@18)) (=> ($IsAlloc |f#0@@20| (Tclass._System.___hFunc6 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@119|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc6 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@119|) $h@@18)))) :qid |unknown.0:0| :skolemid |967| :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc6 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$T3@@71| |#$T4@@46| |#$T5@@18| |#$R@@119|) $h@@18)) )))
(assert (forall ((arg0@@250 T@U) (arg1@@121 T@U) (arg2@@79 T@U) (arg3@@56 T@U) (arg4@@48 T@U) (arg5@@42 T@U) (arg6@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6 arg0@@250 arg1@@121 arg2@@79 arg3@@56 arg4@@48 arg5@@42 arg6@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc6| :pattern ( (Tclass._System.___hTotalFunc6 arg0@@250 arg1@@121 arg2@@79 arg3@@56 arg4@@48 arg5@@42 arg6@@31)) )))
(assert (forall ((|#$T0@@107| T@U) (|#$T1@@91| T@U) (|#$T2@@72| T@U) (|#$T3@@72| T@U) (|#$T4@@47| T@U) (|#$T5@@19| T@U) (|#$R@@120| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@107|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$T3@@72|) TyType)) (= (type |#$T4@@47|) TyType)) (= (type |#$T5@@19|) TyType)) (= (type |#$R@@120|) TyType)) (= (Tag (Tclass._System.___hTotalFunc6 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@120|)) Tagclass._System.___hTotalFunc6)) :qid |unknown.0:0| :skolemid |968| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$T3@@72| |#$T4@@47| |#$T5@@19| |#$R@@120|)) )))
(assert (forall ((arg0@@251 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_0 arg0@@251)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_0| :pattern ( (Tclass._System.___hTotalFunc6_0 arg0@@251)) )))
(assert (forall ((|#$T0@@108| T@U) (|#$T1@@92| T@U) (|#$T2@@73| T@U) (|#$T3@@73| T@U) (|#$T4@@48| T@U) (|#$T5@@20| T@U) (|#$R@@121| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@108|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$T3@@73|) TyType)) (= (type |#$T4@@48|) TyType)) (= (type |#$T5@@20|) TyType)) (= (type |#$R@@121|) TyType)) (= (Tclass._System.___hTotalFunc6_0 (Tclass._System.___hTotalFunc6 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@121|)) |#$T0@@108|)) :qid |unknown.0:0| :skolemid |969| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$T3@@73| |#$T4@@48| |#$T5@@20| |#$R@@121|)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_1 arg0@@252)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_1| :pattern ( (Tclass._System.___hTotalFunc6_1 arg0@@252)) )))
(assert (forall ((|#$T0@@109| T@U) (|#$T1@@93| T@U) (|#$T2@@74| T@U) (|#$T3@@74| T@U) (|#$T4@@49| T@U) (|#$T5@@21| T@U) (|#$R@@122| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@109|) TyType) (= (type |#$T1@@93|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$T3@@74|) TyType)) (= (type |#$T4@@49|) TyType)) (= (type |#$T5@@21|) TyType)) (= (type |#$R@@122|) TyType)) (= (Tclass._System.___hTotalFunc6_1 (Tclass._System.___hTotalFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@122|)) |#$T1@@93|)) :qid |unknown.0:0| :skolemid |970| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$T3@@74| |#$T4@@49| |#$T5@@21| |#$R@@122|)) )))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_2 arg0@@253)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_2| :pattern ( (Tclass._System.___hTotalFunc6_2 arg0@@253)) )))
(assert (forall ((|#$T0@@110| T@U) (|#$T1@@94| T@U) (|#$T2@@75| T@U) (|#$T3@@75| T@U) (|#$T4@@50| T@U) (|#$T5@@22| T@U) (|#$R@@123| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@110|) TyType) (= (type |#$T1@@94|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$T3@@75|) TyType)) (= (type |#$T4@@50|) TyType)) (= (type |#$T5@@22|) TyType)) (= (type |#$R@@123|) TyType)) (= (Tclass._System.___hTotalFunc6_2 (Tclass._System.___hTotalFunc6 |#$T0@@110| |#$T1@@94| |#$T2@@75| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@123|)) |#$T2@@75|)) :qid |unknown.0:0| :skolemid |971| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@110| |#$T1@@94| |#$T2@@75| |#$T3@@75| |#$T4@@50| |#$T5@@22| |#$R@@123|)) )))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_3 arg0@@254)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_3| :pattern ( (Tclass._System.___hTotalFunc6_3 arg0@@254)) )))
(assert (forall ((|#$T0@@111| T@U) (|#$T1@@95| T@U) (|#$T2@@76| T@U) (|#$T3@@76| T@U) (|#$T4@@51| T@U) (|#$T5@@23| T@U) (|#$R@@124| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@111|) TyType) (= (type |#$T1@@95|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$T3@@76|) TyType)) (= (type |#$T4@@51|) TyType)) (= (type |#$T5@@23|) TyType)) (= (type |#$R@@124|) TyType)) (= (Tclass._System.___hTotalFunc6_3 (Tclass._System.___hTotalFunc6 |#$T0@@111| |#$T1@@95| |#$T2@@76| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@124|)) |#$T3@@76|)) :qid |unknown.0:0| :skolemid |972| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@111| |#$T1@@95| |#$T2@@76| |#$T3@@76| |#$T4@@51| |#$T5@@23| |#$R@@124|)) )))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_4 arg0@@255)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_4| :pattern ( (Tclass._System.___hTotalFunc6_4 arg0@@255)) )))
(assert (forall ((|#$T0@@112| T@U) (|#$T1@@96| T@U) (|#$T2@@77| T@U) (|#$T3@@77| T@U) (|#$T4@@52| T@U) (|#$T5@@24| T@U) (|#$R@@125| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@112|) TyType) (= (type |#$T1@@96|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$T3@@77|) TyType)) (= (type |#$T4@@52|) TyType)) (= (type |#$T5@@24|) TyType)) (= (type |#$R@@125|) TyType)) (= (Tclass._System.___hTotalFunc6_4 (Tclass._System.___hTotalFunc6 |#$T0@@112| |#$T1@@96| |#$T2@@77| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@125|)) |#$T4@@52|)) :qid |unknown.0:0| :skolemid |973| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@112| |#$T1@@96| |#$T2@@77| |#$T3@@77| |#$T4@@52| |#$T5@@24| |#$R@@125|)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_5 arg0@@256)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_5| :pattern ( (Tclass._System.___hTotalFunc6_5 arg0@@256)) )))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@97| T@U) (|#$T2@@78| T@U) (|#$T3@@78| T@U) (|#$T4@@53| T@U) (|#$T5@@25| T@U) (|#$R@@126| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$T3@@78|) TyType)) (= (type |#$T4@@53|) TyType)) (= (type |#$T5@@25|) TyType)) (= (type |#$R@@126|) TyType)) (= (Tclass._System.___hTotalFunc6_5 (Tclass._System.___hTotalFunc6 |#$T0@@113| |#$T1@@97| |#$T2@@78| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@126|)) |#$T5@@25|)) :qid |unknown.0:0| :skolemid |974| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@113| |#$T1@@97| |#$T2@@78| |#$T3@@78| |#$T4@@53| |#$T5@@25| |#$R@@126|)) )))
(assert (forall ((arg0@@257 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_6 arg0@@257)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_6| :pattern ( (Tclass._System.___hTotalFunc6_6 arg0@@257)) )))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@98| T@U) (|#$T2@@79| T@U) (|#$T3@@79| T@U) (|#$T4@@54| T@U) (|#$T5@@26| T@U) (|#$R@@127| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$T3@@79|) TyType)) (= (type |#$T4@@54|) TyType)) (= (type |#$T5@@26|) TyType)) (= (type |#$R@@127|) TyType)) (= (Tclass._System.___hTotalFunc6_6 (Tclass._System.___hTotalFunc6 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@127|)) |#$R@@127|)) :qid |unknown.0:0| :skolemid |975| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$T3@@79| |#$T4@@54| |#$T5@@26| |#$R@@127|)) )))
(assert (forall ((|#$T0@@115| T@U) (|#$T1@@99| T@U) (|#$T2@@80| T@U) (|#$T3@@80| T@U) (|#$T4@@55| T@U) (|#$T5@@27| T@U) (|#$R@@128| T@U) (bx@@87 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@115|) TyType) (= (type |#$T1@@99|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$T3@@80|) TyType)) (= (type |#$T4@@55|) TyType)) (= (type |#$T5@@27|) TyType)) (= (type |#$R@@128|) TyType)) (= (type bx@@87) BoxType)) ($IsBox bx@@87 (Tclass._System.___hTotalFunc6 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@128|))) (and (= ($Box ($Unbox HandleTypeType bx@@87)) bx@@87) ($Is ($Unbox HandleTypeType bx@@87) (Tclass._System.___hTotalFunc6 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@128|)))) :qid |unknown.0:0| :skolemid |976| :pattern ( ($IsBox bx@@87 (Tclass._System.___hTotalFunc6 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$T3@@80| |#$T4@@55| |#$T5@@27| |#$R@@128|))) )))
(assert (forall ((|#$T0@@116| T@U) (|#$T1@@100| T@U) (|#$T2@@81| T@U) (|#$T3@@81| T@U) (|#$T4@@56| T@U) (|#$T5@@28| T@U) (|#$R@@129| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@116|) TyType) (= (type |#$T1@@100|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$T3@@81|) TyType)) (= (type |#$T4@@56|) TyType)) (= (type |#$T5@@28|) TyType)) (= (type |#$R@@129|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (and (=> ($Is |f#0@@21| (Tclass._System.___hTotalFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@129|)) (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@129|)) (forall ((|x0#0@@17| T@U) (|x1#0@@13| T@U) (|x2#0@@9| T@U) (|x3#0@@9| T@U) (|x4#0@@5| T@U) (|x5#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@17|) BoxType) (= (type |x1#0@@13|) BoxType)) (= (type |x2#0@@9|) BoxType)) (= (type |x3#0@@9|) BoxType)) (= (type |x4#0@@5|) BoxType)) (= (type |x5#0@@1|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@17| |#$T0@@116|) ($IsBox |x1#0@@13| |#$T1@@100|)) ($IsBox |x2#0@@9| |#$T2@@81|)) ($IsBox |x3#0@@9| |#$T3@@81|)) ($IsBox |x4#0@@5| |#$T4@@56|)) ($IsBox |x5#0@@1| |#$T5@@28|))) (Requires6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@129| $OneHeap |f#0@@21| |x0#0@@17| |x1#0@@13| |x2#0@@9| |x3#0@@9| |x4#0@@5| |x5#0@@1|)) :qid |unknown.0:0| :skolemid |977| :no-pattern (type |x0#0@@17|) :no-pattern (type |x1#0@@13|) :no-pattern (type |x2#0@@9|) :no-pattern (type |x3#0@@9|) :no-pattern (type |x4#0@@5|) :no-pattern (type |x5#0@@1|) :no-pattern (U_2_int |x0#0@@17|) :no-pattern (U_2_bool |x0#0@@17|) :no-pattern (U_2_int |x1#0@@13|) :no-pattern (U_2_bool |x1#0@@13|) :no-pattern (U_2_int |x2#0@@9|) :no-pattern (U_2_bool |x2#0@@9|) :no-pattern (U_2_int |x3#0@@9|) :no-pattern (U_2_bool |x3#0@@9|) :no-pattern (U_2_int |x4#0@@5|) :no-pattern (U_2_bool |x4#0@@5|) :no-pattern (U_2_int |x5#0@@1|) :no-pattern (U_2_bool |x5#0@@1|) )))) (=> (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@129|)) (forall ((|x0#0@@18| T@U) (|x1#0@@14| T@U) (|x2#0@@10| T@U) (|x3#0@@10| T@U) (|x4#0@@6| T@U) (|x5#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@18|) BoxType) (= (type |x1#0@@14|) BoxType)) (= (type |x2#0@@10|) BoxType)) (= (type |x3#0@@10|) BoxType)) (= (type |x4#0@@6|) BoxType)) (= (type |x5#0@@2|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@18| |#$T0@@116|) ($IsBox |x1#0@@14| |#$T1@@100|)) ($IsBox |x2#0@@10| |#$T2@@81|)) ($IsBox |x3#0@@10| |#$T3@@81|)) ($IsBox |x4#0@@6| |#$T4@@56|)) ($IsBox |x5#0@@2| |#$T5@@28|))) (Requires6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@129| $OneHeap |f#0@@21| |x0#0@@18| |x1#0@@14| |x2#0@@10| |x3#0@@10| |x4#0@@6| |x5#0@@2|)) :qid |unknown.0:0| :skolemid |977| :no-pattern (type |x0#0@@18|) :no-pattern (type |x1#0@@14|) :no-pattern (type |x2#0@@10|) :no-pattern (type |x3#0@@10|) :no-pattern (type |x4#0@@6|) :no-pattern (type |x5#0@@2|) :no-pattern (U_2_int |x0#0@@18|) :no-pattern (U_2_bool |x0#0@@18|) :no-pattern (U_2_int |x1#0@@14|) :no-pattern (U_2_bool |x1#0@@14|) :no-pattern (U_2_int |x2#0@@10|) :no-pattern (U_2_bool |x2#0@@10|) :no-pattern (U_2_int |x3#0@@10|) :no-pattern (U_2_bool |x3#0@@10|) :no-pattern (U_2_int |x4#0@@6|) :no-pattern (U_2_bool |x4#0@@6|) :no-pattern (U_2_int |x5#0@@2|) :no-pattern (U_2_bool |x5#0@@2|) ))) ($Is |f#0@@21| (Tclass._System.___hTotalFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@129|))))) :qid |unknown.0:0| :skolemid |978| :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc6 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$T3@@81| |#$T4@@56| |#$T5@@28| |#$R@@129|))) )))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@101| T@U) (|#$T2@@82| T@U) (|#$T3@@82| T@U) (|#$T4@@57| T@U) (|#$T5@@29| T@U) (|#$R@@130| T@U) (|f#0@@22| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@101|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$T3@@82|) TyType)) (= (type |#$T4@@57|) TyType)) (= (type |#$T5@@29|) TyType)) (= (type |#$R@@130|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@130|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@130|) $h@@19)) (=> ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@130|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@130|) $h@@19)))) :qid |unknown.0:0| :skolemid |979| :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc6 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$T3@@82| |#$T4@@57| |#$T5@@29| |#$R@@130|) $h@@19)) )))
(assert (forall ((arg0@@258 T@U) (arg1@@122 T@U) (arg2@@80 T@U) (arg3@@57 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@258 arg1@@122 arg2@@80 arg3@@57)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@258 arg1@@122 arg2@@80 arg3@@57)) )))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@102| T@U) (|#$T2@@83| T@U) (|#$R@@131| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$R@@131|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$R@@131|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |980| :pattern ( (Tclass._System.___hFunc3 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$R@@131|)) )))
(assert (forall ((arg0@@259 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@259)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@259)) )))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@103| T@U) (|#$T2@@84| T@U) (|#$R@@132| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$R@@132|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@119| |#$T1@@103| |#$T2@@84| |#$R@@132|)) |#$T0@@119|)) :qid |unknown.0:0| :skolemid |981| :pattern ( (Tclass._System.___hFunc3 |#$T0@@119| |#$T1@@103| |#$T2@@84| |#$R@@132|)) )))
(assert (forall ((arg0@@260 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@260)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@260)) )))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@104| T@U) (|#$T2@@85| T@U) (|#$R@@133| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$R@@133|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@120| |#$T1@@104| |#$T2@@85| |#$R@@133|)) |#$T1@@104|)) :qid |unknown.0:0| :skolemid |982| :pattern ( (Tclass._System.___hFunc3 |#$T0@@120| |#$T1@@104| |#$T2@@85| |#$R@@133|)) )))
(assert (forall ((arg0@@261 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@261)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@261)) )))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@105| T@U) (|#$T2@@86| T@U) (|#$R@@134| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$R@@134|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@121| |#$T1@@105| |#$T2@@86| |#$R@@134|)) |#$T2@@86|)) :qid |unknown.0:0| :skolemid |983| :pattern ( (Tclass._System.___hFunc3 |#$T0@@121| |#$T1@@105| |#$T2@@86| |#$R@@134|)) )))
(assert (forall ((arg0@@262 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@262)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@262)) )))
(assert (forall ((|#$T0@@122| T@U) (|#$T1@@106| T@U) (|#$T2@@87| T@U) (|#$R@@135| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@122|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$R@@135|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$R@@135|)) |#$R@@135|)) :qid |unknown.0:0| :skolemid |984| :pattern ( (Tclass._System.___hFunc3 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$R@@135|)) )))
(assert (forall ((|#$T0@@123| T@U) (|#$T1@@107| T@U) (|#$T2@@88| T@U) (|#$R@@136| T@U) (bx@@88 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@123|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$R@@136|) TyType)) (= (type bx@@88) BoxType)) ($IsBox bx@@88 (Tclass._System.___hFunc3 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$R@@136|))) (and (= ($Box ($Unbox HandleTypeType bx@@88)) bx@@88) ($Is ($Unbox HandleTypeType bx@@88) (Tclass._System.___hFunc3 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$R@@136|)))) :qid |unknown.0:0| :skolemid |985| :pattern ( ($IsBox bx@@88 (Tclass._System.___hFunc3 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$R@@136|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@263 T@T) (arg1@@123 T@T) (arg2@@81 T@T) (arg3@@58 T@T) (arg4@@49 T@T) ) (! (= (Ctor (MapType7Type arg0@@263 arg1@@123 arg2@@81 arg3@@58 arg4@@49)) 26) :qid |ctor:MapType7Type| )) (forall ((arg0@@264 T@T) (arg1@@124 T@T) (arg2@@82 T@T) (arg3@@59 T@T) (arg4@@50 T@T) ) (! (= (MapType7TypeInv0 (MapType7Type arg0@@264 arg1@@124 arg2@@82 arg3@@59 arg4@@50)) arg0@@264) :qid |typeInv:MapType7TypeInv0| :pattern ( (MapType7Type arg0@@264 arg1@@124 arg2@@82 arg3@@59 arg4@@50)) ))) (forall ((arg0@@265 T@T) (arg1@@125 T@T) (arg2@@83 T@T) (arg3@@60 T@T) (arg4@@51 T@T) ) (! (= (MapType7TypeInv1 (MapType7Type arg0@@265 arg1@@125 arg2@@83 arg3@@60 arg4@@51)) arg1@@125) :qid |typeInv:MapType7TypeInv1| :pattern ( (MapType7Type arg0@@265 arg1@@125 arg2@@83 arg3@@60 arg4@@51)) ))) (forall ((arg0@@266 T@T) (arg1@@126 T@T) (arg2@@84 T@T) (arg3@@61 T@T) (arg4@@52 T@T) ) (! (= (MapType7TypeInv2 (MapType7Type arg0@@266 arg1@@126 arg2@@84 arg3@@61 arg4@@52)) arg2@@84) :qid |typeInv:MapType7TypeInv2| :pattern ( (MapType7Type arg0@@266 arg1@@126 arg2@@84 arg3@@61 arg4@@52)) ))) (forall ((arg0@@267 T@T) (arg1@@127 T@T) (arg2@@85 T@T) (arg3@@62 T@T) (arg4@@53 T@T) ) (! (= (MapType7TypeInv3 (MapType7Type arg0@@267 arg1@@127 arg2@@85 arg3@@62 arg4@@53)) arg3@@62) :qid |typeInv:MapType7TypeInv3| :pattern ( (MapType7Type arg0@@267 arg1@@127 arg2@@85 arg3@@62 arg4@@53)) ))) (forall ((arg0@@268 T@T) (arg1@@128 T@T) (arg2@@86 T@T) (arg3@@63 T@T) (arg4@@54 T@T) ) (! (= (MapType7TypeInv4 (MapType7Type arg0@@268 arg1@@128 arg2@@86 arg3@@63 arg4@@54)) arg4@@54) :qid |typeInv:MapType7TypeInv4| :pattern ( (MapType7Type arg0@@268 arg1@@128 arg2@@86 arg3@@63 arg4@@54)) ))) (forall ((arg0@@269 T@U) (arg1@@129 T@U) (arg2@@87 T@U) (arg3@@64 T@U) (arg4@@55 T@U) ) (! (let ((aVar4@@2 (MapType7TypeInv4 (type arg0@@269)))) (= (type (MapType7Select arg0@@269 arg1@@129 arg2@@87 arg3@@64 arg4@@55)) aVar4@@2)) :qid |funType:MapType7Select| :pattern ( (MapType7Select arg0@@269 arg1@@129 arg2@@87 arg3@@64 arg4@@55)) ))) (forall ((arg0@@270 T@U) (arg1@@130 T@U) (arg2@@88 T@U) (arg3@@65 T@U) (arg4@@56 T@U) (arg5@@43 T@U) ) (! (let ((aVar4@@3 (type arg5@@43))) (let ((aVar3@@5 (type arg4@@56))) (let ((aVar2@@6 (type arg3@@65))) (let ((aVar1@@7 (type arg2@@88))) (let ((aVar0@@5 (type arg1@@130))) (= (type (MapType7Store arg0@@270 arg1@@130 arg2@@88 arg3@@65 arg4@@56 arg5@@43)) (MapType7Type aVar0@@5 aVar1@@7 aVar2@@6 aVar3@@5 aVar4@@3))))))) :qid |funType:MapType7Store| :pattern ( (MapType7Store arg0@@270 arg1@@130 arg2@@88 arg3@@65 arg4@@56 arg5@@43)) ))) (forall ((m@@60 T@U) (x0@@38 T@U) (x1@@32 T@U) (x2@@28 T@U) (x3@@23 T@U) (val@@39 T@U) ) (! (let ((aVar4@@4 (MapType7TypeInv4 (type m@@60)))) (=> (= (type val@@39) aVar4@@4) (= (MapType7Select (MapType7Store m@@60 x0@@38 x1@@32 x2@@28 x3@@23 val@@39) x0@@38 x1@@32 x2@@28 x3@@23) val@@39))) :qid |mapAx0:MapType7Select| :weight 0 ))) (and (and (and (and (forall ((val@@40 T@U) (m@@61 T@U) (x0@@39 T@U) (x1@@33 T@U) (x2@@29 T@U) (x3@@24 T@U) (y0@@31 T@U) (y1@@27 T@U) (y2@@24 T@U) (y3@@20 T@U) ) (!  (or (= x0@@39 y0@@31) (= (MapType7Select (MapType7Store m@@61 x0@@39 x1@@33 x2@@29 x3@@24 val@@40) y0@@31 y1@@27 y2@@24 y3@@20) (MapType7Select m@@61 y0@@31 y1@@27 y2@@24 y3@@20))) :qid |mapAx1:MapType7Select:0| :weight 0 )) (forall ((val@@41 T@U) (m@@62 T@U) (x0@@40 T@U) (x1@@34 T@U) (x2@@30 T@U) (x3@@25 T@U) (y0@@32 T@U) (y1@@28 T@U) (y2@@25 T@U) (y3@@21 T@U) ) (!  (or (= x1@@34 y1@@28) (= (MapType7Select (MapType7Store m@@62 x0@@40 x1@@34 x2@@30 x3@@25 val@@41) y0@@32 y1@@28 y2@@25 y3@@21) (MapType7Select m@@62 y0@@32 y1@@28 y2@@25 y3@@21))) :qid |mapAx1:MapType7Select:1| :weight 0 ))) (forall ((val@@42 T@U) (m@@63 T@U) (x0@@41 T@U) (x1@@35 T@U) (x2@@31 T@U) (x3@@26 T@U) (y0@@33 T@U) (y1@@29 T@U) (y2@@26 T@U) (y3@@22 T@U) ) (!  (or (= x2@@31 y2@@26) (= (MapType7Select (MapType7Store m@@63 x0@@41 x1@@35 x2@@31 x3@@26 val@@42) y0@@33 y1@@29 y2@@26 y3@@22) (MapType7Select m@@63 y0@@33 y1@@29 y2@@26 y3@@22))) :qid |mapAx1:MapType7Select:2| :weight 0 ))) (forall ((val@@43 T@U) (m@@64 T@U) (x0@@42 T@U) (x1@@36 T@U) (x2@@32 T@U) (x3@@27 T@U) (y0@@34 T@U) (y1@@30 T@U) (y2@@27 T@U) (y3@@23 T@U) ) (!  (or (= x3@@27 y3@@23) (= (MapType7Select (MapType7Store m@@64 x0@@42 x1@@36 x2@@32 x3@@27 val@@43) y0@@34 y1@@30 y2@@27 y3@@23) (MapType7Select m@@64 y0@@34 y1@@30 y2@@27 y3@@23))) :qid |mapAx1:MapType7Select:3| :weight 0 ))) (forall ((val@@44 T@U) (m@@65 T@U) (x0@@43 T@U) (x1@@37 T@U) (x2@@33 T@U) (x3@@28 T@U) (y0@@35 T@U) (y1@@31 T@U) (y2@@28 T@U) (y3@@24 T@U) ) (!  (or true (= (MapType7Select (MapType7Store m@@65 x0@@43 x1@@37 x2@@33 x3@@28 val@@44) y0@@35 y1@@31 y2@@28 y3@@24) (MapType7Select m@@65 y0@@35 y1@@31 y2@@28 y3@@24))) :qid |mapAx2:MapType7Select| :weight 0 )))) (forall ((arg0@@271 T@U) (arg1@@131 T@U) (arg2@@89 T@U) (arg3@@66 T@U) (arg4@@57 T@U) (arg5@@44 T@U) (arg6@@32 T@U) (arg7@@17 T@U) (arg8@@6 T@U) ) (! (= (type (Apply3 arg0@@271 arg1@@131 arg2@@89 arg3@@66 arg4@@57 arg5@@44 arg6@@32 arg7@@17 arg8@@6)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@271 arg1@@131 arg2@@89 arg3@@66 arg4@@57 arg5@@44 arg6@@32 arg7@@17 arg8@@6)) ))) (forall ((arg0@@272 T@U) (arg1@@132 T@U) (arg2@@90 T@U) ) (! (= (type (Handle3 arg0@@272 arg1@@132 arg2@@90)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@272 arg1@@132 arg2@@90)) ))))
(assert (forall ((t0@@102 T@U) (t1@@78 T@U) (t2@@59 T@U) (t3@@44 T@U) (heap@@31 T@U) (h@@62 T@U) (r@@36 T@U) (rd@@17 T@U) (bx0@@79 T@U) (bx1@@63 T@U) (bx2@@47 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@102) TyType) (= (type t1@@78) TyType)) (= (type t2@@59) TyType)) (= (type t3@@44) TyType)) (= (type heap@@31) (MapType0Type refType MapType1Type))) (= (type h@@62) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@36) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@17) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@79) BoxType)) (= (type bx1@@63) BoxType)) (= (type bx2@@47) BoxType)) (= (Apply3 t0@@102 t1@@78 t2@@59 t3@@44 heap@@31 (Handle3 h@@62 r@@36 rd@@17) bx0@@79 bx1@@63 bx2@@47) (MapType7Select h@@62 heap@@31 bx0@@79 bx1@@63 bx2@@47))) :qid |unknown.0:0| :skolemid |986| :pattern ( (Apply3 t0@@102 t1@@78 t2@@59 t3@@44 heap@@31 (Handle3 h@@62 r@@36 rd@@17) bx0@@79 bx1@@63 bx2@@47)) )))
(assert (forall ((t0@@103 T@U) (t1@@79 T@U) (t2@@60 T@U) (t3@@45 T@U) (heap@@32 T@U) (h@@63 T@U) (r@@37 T@U) (rd@@18 T@U) (bx0@@80 T@U) (bx1@@64 T@U) (bx2@@48 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@103) TyType) (= (type t1@@79) TyType)) (= (type t2@@60) TyType)) (= (type t3@@45) TyType)) (= (type heap@@32) (MapType0Type refType MapType1Type))) (= (type h@@63) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@37) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@18) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@80) BoxType)) (= (type bx1@@64) BoxType)) (= (type bx2@@48) BoxType)) (U_2_bool (MapType7Select r@@37 heap@@32 bx0@@80 bx1@@64 bx2@@48))) (Requires3 t0@@103 t1@@79 t2@@60 t3@@45 heap@@32 (Handle3 h@@63 r@@37 rd@@18) bx0@@80 bx1@@64 bx2@@48)) :qid |unknown.0:0| :skolemid |987| :pattern ( (Requires3 t0@@103 t1@@79 t2@@60 t3@@45 heap@@32 (Handle3 h@@63 r@@37 rd@@18) bx0@@80 bx1@@64 bx2@@48)) )))
(assert (forall ((arg0@@273 T@U) (arg1@@133 T@U) (arg2@@91 T@U) (arg3@@67 T@U) (arg4@@58 T@U) (arg5@@45 T@U) (arg6@@33 T@U) (arg7@@18 T@U) (arg8@@7 T@U) ) (! (= (type (Reads3 arg0@@273 arg1@@133 arg2@@91 arg3@@67 arg4@@58 arg5@@45 arg6@@33 arg7@@18 arg8@@7)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@273 arg1@@133 arg2@@91 arg3@@67 arg4@@58 arg5@@45 arg6@@33 arg7@@18 arg8@@7)) )))
(assert (forall ((t0@@104 T@U) (t1@@80 T@U) (t2@@61 T@U) (t3@@46 T@U) (heap@@33 T@U) (h@@64 T@U) (r@@38 T@U) (rd@@19 T@U) (bx0@@81 T@U) (bx1@@65 T@U) (bx2@@49 T@U) (bx@@89 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@104) TyType) (= (type t1@@80) TyType)) (= (type t2@@61) TyType)) (= (type t3@@46) TyType)) (= (type heap@@33) (MapType0Type refType MapType1Type))) (= (type h@@64) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@38) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@19) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@81) BoxType)) (= (type bx1@@65) BoxType)) (= (type bx2@@49) BoxType)) (= (type bx@@89) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@104 t1@@80 t2@@61 t3@@46 heap@@33 (Handle3 h@@64 r@@38 rd@@19) bx0@@81 bx1@@65 bx2@@49) bx@@89)) (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@81 bx1@@65 bx2@@49) bx@@89))) (=> (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@81 bx1@@65 bx2@@49) bx@@89)) (U_2_bool (MapType0Select (Reads3 t0@@104 t1@@80 t2@@61 t3@@46 heap@@33 (Handle3 h@@64 r@@38 rd@@19) bx0@@81 bx1@@65 bx2@@49) bx@@89))))) :qid |unknown.0:0| :skolemid |988| :pattern ( (MapType0Select (Reads3 t0@@104 t1@@80 t2@@61 t3@@46 heap@@33 (Handle3 h@@64 r@@38 rd@@19) bx0@@81 bx1@@65 bx2@@49) bx@@89)) )))
(assert (forall ((t0@@105 T@U) (t1@@81 T@U) (t2@@62 T@U) (t3@@47 T@U) (h0@@36 T@U) (h1@@36 T@U) (f@@77 T@U) (bx0@@82 T@U) (bx1@@66 T@U) (bx2@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@105) TyType) (= (type t1@@81) TyType)) (= (type t2@@62) TyType)) (= (type t3@@47) TyType)) (= (type h0@@36) (MapType0Type refType MapType1Type))) (= (type h1@@36) (MapType0Type refType MapType1Type))) (= (type f@@77) HandleTypeType)) (= (type bx0@@82) BoxType)) (= (type bx1@@66) BoxType)) (= (type bx2@@50) BoxType)) (and (and (and ($HeapSucc h0@@36 h1@@36) (and ($IsGoodHeap h0@@36) ($IsGoodHeap h1@@36))) (and (and (and ($IsBox bx0@@82 t0@@105) ($IsBox bx1@@66 t1@@81)) ($IsBox bx2@@50 t2@@62)) ($Is f@@77 (Tclass._System.___hFunc3 t0@@105 t1@@81 t2@@62 t3@@47)))) (forall ((o@@90 T@U) (fld@@35 T@U) ) (! (let ((a@@118 (FieldTypeInv0 (type fld@@35)))) (=> (and (and (= (type o@@90) refType) (= (type fld@@35) (FieldType a@@118))) (and (not (= o@@90 null)) (U_2_bool (MapType0Select (Reads3 t0@@105 t1@@81 t2@@62 t3@@47 h0@@36 f@@77 bx0@@82 bx1@@66 bx2@@50) ($Box o@@90))))) (= (MapType1Select (MapType0Select h0@@36 o@@90) fld@@35) (MapType1Select (MapType0Select h1@@36 o@@90) fld@@35)))) :qid |unknown.0:0| :skolemid |989| :no-pattern (type o@@90) :no-pattern (type fld@@35) :no-pattern (U_2_int o@@90) :no-pattern (U_2_bool o@@90) :no-pattern (U_2_int fld@@35) :no-pattern (U_2_bool fld@@35) )))) (= (Reads3 t0@@105 t1@@81 t2@@62 t3@@47 h0@@36 f@@77 bx0@@82 bx1@@66 bx2@@50) (Reads3 t0@@105 t1@@81 t2@@62 t3@@47 h1@@36 f@@77 bx0@@82 bx1@@66 bx2@@50))) :qid |unknown.0:0| :skolemid |990| :pattern ( ($HeapSucc h0@@36 h1@@36) (Reads3 t0@@105 t1@@81 t2@@62 t3@@47 h1@@36 f@@77 bx0@@82 bx1@@66 bx2@@50)) )))
(assert (forall ((t0@@106 T@U) (t1@@82 T@U) (t2@@63 T@U) (t3@@48 T@U) (h0@@37 T@U) (h1@@37 T@U) (f@@78 T@U) (bx0@@83 T@U) (bx1@@67 T@U) (bx2@@51 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@106) TyType) (= (type t1@@82) TyType)) (= (type t2@@63) TyType)) (= (type t3@@48) TyType)) (= (type h0@@37) (MapType0Type refType MapType1Type))) (= (type h1@@37) (MapType0Type refType MapType1Type))) (= (type f@@78) HandleTypeType)) (= (type bx0@@83) BoxType)) (= (type bx1@@67) BoxType)) (= (type bx2@@51) BoxType)) (and (and (and ($HeapSucc h0@@37 h1@@37) (and ($IsGoodHeap h0@@37) ($IsGoodHeap h1@@37))) (and (and (and ($IsBox bx0@@83 t0@@106) ($IsBox bx1@@67 t1@@82)) ($IsBox bx2@@51 t2@@63)) ($Is f@@78 (Tclass._System.___hFunc3 t0@@106 t1@@82 t2@@63 t3@@48)))) (forall ((o@@91 T@U) (fld@@36 T@U) ) (! (let ((a@@119 (FieldTypeInv0 (type fld@@36)))) (=> (and (and (= (type o@@91) refType) (= (type fld@@36) (FieldType a@@119))) (and (not (= o@@91 null)) (U_2_bool (MapType0Select (Reads3 t0@@106 t1@@82 t2@@63 t3@@48 h1@@37 f@@78 bx0@@83 bx1@@67 bx2@@51) ($Box o@@91))))) (= (MapType1Select (MapType0Select h0@@37 o@@91) fld@@36) (MapType1Select (MapType0Select h1@@37 o@@91) fld@@36)))) :qid |unknown.0:0| :skolemid |991| :no-pattern (type o@@91) :no-pattern (type fld@@36) :no-pattern (U_2_int o@@91) :no-pattern (U_2_bool o@@91) :no-pattern (U_2_int fld@@36) :no-pattern (U_2_bool fld@@36) )))) (= (Reads3 t0@@106 t1@@82 t2@@63 t3@@48 h0@@37 f@@78 bx0@@83 bx1@@67 bx2@@51) (Reads3 t0@@106 t1@@82 t2@@63 t3@@48 h1@@37 f@@78 bx0@@83 bx1@@67 bx2@@51))) :qid |unknown.0:0| :skolemid |992| :pattern ( ($HeapSucc h0@@37 h1@@37) (Reads3 t0@@106 t1@@82 t2@@63 t3@@48 h1@@37 f@@78 bx0@@83 bx1@@67 bx2@@51)) )))
(assert (forall ((t0@@107 T@U) (t1@@83 T@U) (t2@@64 T@U) (t3@@49 T@U) (h0@@38 T@U) (h1@@38 T@U) (f@@79 T@U) (bx0@@84 T@U) (bx1@@68 T@U) (bx2@@52 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@107) TyType) (= (type t1@@83) TyType)) (= (type t2@@64) TyType)) (= (type t3@@49) TyType)) (= (type h0@@38) (MapType0Type refType MapType1Type))) (= (type h1@@38) (MapType0Type refType MapType1Type))) (= (type f@@79) HandleTypeType)) (= (type bx0@@84) BoxType)) (= (type bx1@@68) BoxType)) (= (type bx2@@52) BoxType)) (and (and (and ($HeapSucc h0@@38 h1@@38) (and ($IsGoodHeap h0@@38) ($IsGoodHeap h1@@38))) (and (and (and ($IsBox bx0@@84 t0@@107) ($IsBox bx1@@68 t1@@83)) ($IsBox bx2@@52 t2@@64)) ($Is f@@79 (Tclass._System.___hFunc3 t0@@107 t1@@83 t2@@64 t3@@49)))) (forall ((o@@92 T@U) (fld@@37 T@U) ) (! (let ((a@@120 (FieldTypeInv0 (type fld@@37)))) (=> (and (and (= (type o@@92) refType) (= (type fld@@37) (FieldType a@@120))) (and (not (= o@@92 null)) (U_2_bool (MapType0Select (Reads3 t0@@107 t1@@83 t2@@64 t3@@49 h0@@38 f@@79 bx0@@84 bx1@@68 bx2@@52) ($Box o@@92))))) (= (MapType1Select (MapType0Select h0@@38 o@@92) fld@@37) (MapType1Select (MapType0Select h1@@38 o@@92) fld@@37)))) :qid |unknown.0:0| :skolemid |993| :no-pattern (type o@@92) :no-pattern (type fld@@37) :no-pattern (U_2_int o@@92) :no-pattern (U_2_bool o@@92) :no-pattern (U_2_int fld@@37) :no-pattern (U_2_bool fld@@37) )))) (and (=> (Requires3 t0@@107 t1@@83 t2@@64 t3@@49 h0@@38 f@@79 bx0@@84 bx1@@68 bx2@@52) (Requires3 t0@@107 t1@@83 t2@@64 t3@@49 h1@@38 f@@79 bx0@@84 bx1@@68 bx2@@52)) (=> (Requires3 t0@@107 t1@@83 t2@@64 t3@@49 h1@@38 f@@79 bx0@@84 bx1@@68 bx2@@52) (Requires3 t0@@107 t1@@83 t2@@64 t3@@49 h0@@38 f@@79 bx0@@84 bx1@@68 bx2@@52)))) :qid |unknown.0:0| :skolemid |994| :pattern ( ($HeapSucc h0@@38 h1@@38) (Requires3 t0@@107 t1@@83 t2@@64 t3@@49 h1@@38 f@@79 bx0@@84 bx1@@68 bx2@@52)) )))
(assert (forall ((t0@@108 T@U) (t1@@84 T@U) (t2@@65 T@U) (t3@@50 T@U) (h0@@39 T@U) (h1@@39 T@U) (f@@80 T@U) (bx0@@85 T@U) (bx1@@69 T@U) (bx2@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@108) TyType) (= (type t1@@84) TyType)) (= (type t2@@65) TyType)) (= (type t3@@50) TyType)) (= (type h0@@39) (MapType0Type refType MapType1Type))) (= (type h1@@39) (MapType0Type refType MapType1Type))) (= (type f@@80) HandleTypeType)) (= (type bx0@@85) BoxType)) (= (type bx1@@69) BoxType)) (= (type bx2@@53) BoxType)) (and (and (and ($HeapSucc h0@@39 h1@@39) (and ($IsGoodHeap h0@@39) ($IsGoodHeap h1@@39))) (and (and (and ($IsBox bx0@@85 t0@@108) ($IsBox bx1@@69 t1@@84)) ($IsBox bx2@@53 t2@@65)) ($Is f@@80 (Tclass._System.___hFunc3 t0@@108 t1@@84 t2@@65 t3@@50)))) (forall ((o@@93 T@U) (fld@@38 T@U) ) (! (let ((a@@121 (FieldTypeInv0 (type fld@@38)))) (=> (and (and (= (type o@@93) refType) (= (type fld@@38) (FieldType a@@121))) (and (not (= o@@93 null)) (U_2_bool (MapType0Select (Reads3 t0@@108 t1@@84 t2@@65 t3@@50 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53) ($Box o@@93))))) (= (MapType1Select (MapType0Select h0@@39 o@@93) fld@@38) (MapType1Select (MapType0Select h1@@39 o@@93) fld@@38)))) :qid |unknown.0:0| :skolemid |995| :no-pattern (type o@@93) :no-pattern (type fld@@38) :no-pattern (U_2_int o@@93) :no-pattern (U_2_bool o@@93) :no-pattern (U_2_int fld@@38) :no-pattern (U_2_bool fld@@38) )))) (and (=> (Requires3 t0@@108 t1@@84 t2@@65 t3@@50 h0@@39 f@@80 bx0@@85 bx1@@69 bx2@@53) (Requires3 t0@@108 t1@@84 t2@@65 t3@@50 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53)) (=> (Requires3 t0@@108 t1@@84 t2@@65 t3@@50 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53) (Requires3 t0@@108 t1@@84 t2@@65 t3@@50 h0@@39 f@@80 bx0@@85 bx1@@69 bx2@@53)))) :qid |unknown.0:0| :skolemid |996| :pattern ( ($HeapSucc h0@@39 h1@@39) (Requires3 t0@@108 t1@@84 t2@@65 t3@@50 h1@@39 f@@80 bx0@@85 bx1@@69 bx2@@53)) )))
(assert (forall ((t0@@109 T@U) (t1@@85 T@U) (t2@@66 T@U) (t3@@51 T@U) (h0@@40 T@U) (h1@@40 T@U) (f@@81 T@U) (bx0@@86 T@U) (bx1@@70 T@U) (bx2@@54 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@109) TyType) (= (type t1@@85) TyType)) (= (type t2@@66) TyType)) (= (type t3@@51) TyType)) (= (type h0@@40) (MapType0Type refType MapType1Type))) (= (type h1@@40) (MapType0Type refType MapType1Type))) (= (type f@@81) HandleTypeType)) (= (type bx0@@86) BoxType)) (= (type bx1@@70) BoxType)) (= (type bx2@@54) BoxType)) (and (and (and ($HeapSucc h0@@40 h1@@40) (and ($IsGoodHeap h0@@40) ($IsGoodHeap h1@@40))) (and (and (and ($IsBox bx0@@86 t0@@109) ($IsBox bx1@@70 t1@@85)) ($IsBox bx2@@54 t2@@66)) ($Is f@@81 (Tclass._System.___hFunc3 t0@@109 t1@@85 t2@@66 t3@@51)))) (forall ((o@@94 T@U) (fld@@39 T@U) ) (! (let ((a@@122 (FieldTypeInv0 (type fld@@39)))) (=> (and (and (= (type o@@94) refType) (= (type fld@@39) (FieldType a@@122))) (and (not (= o@@94 null)) (U_2_bool (MapType0Select (Reads3 t0@@109 t1@@85 t2@@66 t3@@51 h0@@40 f@@81 bx0@@86 bx1@@70 bx2@@54) ($Box o@@94))))) (= (MapType1Select (MapType0Select h0@@40 o@@94) fld@@39) (MapType1Select (MapType0Select h1@@40 o@@94) fld@@39)))) :qid |unknown.0:0| :skolemid |997| :no-pattern (type o@@94) :no-pattern (type fld@@39) :no-pattern (U_2_int o@@94) :no-pattern (U_2_bool o@@94) :no-pattern (U_2_int fld@@39) :no-pattern (U_2_bool fld@@39) )))) (= (Apply3 t0@@109 t1@@85 t2@@66 t3@@51 h0@@40 f@@81 bx0@@86 bx1@@70 bx2@@54) (Apply3 t0@@109 t1@@85 t2@@66 t3@@51 h1@@40 f@@81 bx0@@86 bx1@@70 bx2@@54))) :qid |unknown.0:0| :skolemid |998| :pattern ( ($HeapSucc h0@@40 h1@@40) (Apply3 t0@@109 t1@@85 t2@@66 t3@@51 h1@@40 f@@81 bx0@@86 bx1@@70 bx2@@54)) )))
(assert (forall ((t0@@110 T@U) (t1@@86 T@U) (t2@@67 T@U) (t3@@52 T@U) (h0@@41 T@U) (h1@@41 T@U) (f@@82 T@U) (bx0@@87 T@U) (bx1@@71 T@U) (bx2@@55 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@110) TyType) (= (type t1@@86) TyType)) (= (type t2@@67) TyType)) (= (type t3@@52) TyType)) (= (type h0@@41) (MapType0Type refType MapType1Type))) (= (type h1@@41) (MapType0Type refType MapType1Type))) (= (type f@@82) HandleTypeType)) (= (type bx0@@87) BoxType)) (= (type bx1@@71) BoxType)) (= (type bx2@@55) BoxType)) (and (and (and ($HeapSucc h0@@41 h1@@41) (and ($IsGoodHeap h0@@41) ($IsGoodHeap h1@@41))) (and (and (and ($IsBox bx0@@87 t0@@110) ($IsBox bx1@@71 t1@@86)) ($IsBox bx2@@55 t2@@67)) ($Is f@@82 (Tclass._System.___hFunc3 t0@@110 t1@@86 t2@@67 t3@@52)))) (forall ((o@@95 T@U) (fld@@40 T@U) ) (! (let ((a@@123 (FieldTypeInv0 (type fld@@40)))) (=> (and (and (= (type o@@95) refType) (= (type fld@@40) (FieldType a@@123))) (and (not (= o@@95 null)) (U_2_bool (MapType0Select (Reads3 t0@@110 t1@@86 t2@@67 t3@@52 h1@@41 f@@82 bx0@@87 bx1@@71 bx2@@55) ($Box o@@95))))) (= (MapType1Select (MapType0Select h0@@41 o@@95) fld@@40) (MapType1Select (MapType0Select h1@@41 o@@95) fld@@40)))) :qid |unknown.0:0| :skolemid |999| :no-pattern (type o@@95) :no-pattern (type fld@@40) :no-pattern (U_2_int o@@95) :no-pattern (U_2_bool o@@95) :no-pattern (U_2_int fld@@40) :no-pattern (U_2_bool fld@@40) )))) (= (Apply3 t0@@110 t1@@86 t2@@67 t3@@52 h0@@41 f@@82 bx0@@87 bx1@@71 bx2@@55) (Apply3 t0@@110 t1@@86 t2@@67 t3@@52 h1@@41 f@@82 bx0@@87 bx1@@71 bx2@@55))) :qid |unknown.0:0| :skolemid |1000| :pattern ( ($HeapSucc h0@@41 h1@@41) (Apply3 t0@@110 t1@@86 t2@@67 t3@@52 h1@@41 f@@82 bx0@@87 bx1@@71 bx2@@55)) )))
(assert (forall ((t0@@111 T@U) (t1@@87 T@U) (t2@@68 T@U) (t3@@53 T@U) (heap@@34 T@U) (f@@83 T@U) (bx0@@88 T@U) (bx1@@72 T@U) (bx2@@56 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@111) TyType) (= (type t1@@87) TyType)) (= (type t2@@68) TyType)) (= (type t3@@53) TyType)) (= (type heap@@34) (MapType0Type refType MapType1Type))) (= (type f@@83) HandleTypeType)) (= (type bx0@@88) BoxType)) (= (type bx1@@72) BoxType)) (= (type bx2@@56) BoxType)) (and ($IsGoodHeap heap@@34) (and (and (and ($IsBox bx0@@88 t0@@111) ($IsBox bx1@@72 t1@@87)) ($IsBox bx2@@56 t2@@68)) ($Is f@@83 (Tclass._System.___hFunc3 t0@@111 t1@@87 t2@@68 t3@@53))))) (and (=> (|Set#Equal| (Reads3 t0@@111 t1@@87 t2@@68 t3@@53 $OneHeap f@@83 bx0@@88 bx1@@72 bx2@@56) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@111 t1@@87 t2@@68 t3@@53 heap@@34 f@@83 bx0@@88 bx1@@72 bx2@@56) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@111 t1@@87 t2@@68 t3@@53 heap@@34 f@@83 bx0@@88 bx1@@72 bx2@@56) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@111 t1@@87 t2@@68 t3@@53 $OneHeap f@@83 bx0@@88 bx1@@72 bx2@@56) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1001| :pattern ( (Reads3 t0@@111 t1@@87 t2@@68 t3@@53 $OneHeap f@@83 bx0@@88 bx1@@72 bx2@@56) ($IsGoodHeap heap@@34)) :pattern ( (Reads3 t0@@111 t1@@87 t2@@68 t3@@53 heap@@34 f@@83 bx0@@88 bx1@@72 bx2@@56)) )))
(assert (forall ((t0@@112 T@U) (t1@@88 T@U) (t2@@69 T@U) (t3@@54 T@U) (heap@@35 T@U) (f@@84 T@U) (bx0@@89 T@U) (bx1@@73 T@U) (bx2@@57 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@112) TyType) (= (type t1@@88) TyType)) (= (type t2@@69) TyType)) (= (type t3@@54) TyType)) (= (type heap@@35) (MapType0Type refType MapType1Type))) (= (type f@@84) HandleTypeType)) (= (type bx0@@89) BoxType)) (= (type bx1@@73) BoxType)) (= (type bx2@@57) BoxType)) (and (and ($IsGoodHeap heap@@35) (and (and (and ($IsBox bx0@@89 t0@@112) ($IsBox bx1@@73 t1@@88)) ($IsBox bx2@@57 t2@@69)) ($Is f@@84 (Tclass._System.___hFunc3 t0@@112 t1@@88 t2@@69 t3@@54)))) (|Set#Equal| (Reads3 t0@@112 t1@@88 t2@@69 t3@@54 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@112 t1@@88 t2@@69 t3@@54 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57) (Requires3 t0@@112 t1@@88 t2@@69 t3@@54 heap@@35 f@@84 bx0@@89 bx1@@73 bx2@@57)) (=> (Requires3 t0@@112 t1@@88 t2@@69 t3@@54 heap@@35 f@@84 bx0@@89 bx1@@73 bx2@@57) (Requires3 t0@@112 t1@@88 t2@@69 t3@@54 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57)))) :qid |unknown.0:0| :skolemid |1002| :pattern ( (Requires3 t0@@112 t1@@88 t2@@69 t3@@54 $OneHeap f@@84 bx0@@89 bx1@@73 bx2@@57) ($IsGoodHeap heap@@35)) :pattern ( (Requires3 t0@@112 t1@@88 t2@@69 t3@@54 heap@@35 f@@84 bx0@@89 bx1@@73 bx2@@57)) )))
(assert (forall ((f@@85 T@U) (t0@@113 T@U) (t1@@89 T@U) (t2@@70 T@U) (t3@@55 T@U) ) (!  (=> (and (and (and (and (= (type f@@85) HandleTypeType) (= (type t0@@113) TyType)) (= (type t1@@89) TyType)) (= (type t2@@70) TyType)) (= (type t3@@55) TyType)) (and (=> ($Is f@@85 (Tclass._System.___hFunc3 t0@@113 t1@@89 t2@@70 t3@@55)) (forall ((h@@65 T@U) (bx0@@90 T@U) (bx1@@74 T@U) (bx2@@58 T@U) ) (!  (=> (and (and (and (and (= (type h@@65) (MapType0Type refType MapType1Type)) (= (type bx0@@90) BoxType)) (= (type bx1@@74) BoxType)) (= (type bx2@@58) BoxType)) (and (and ($IsGoodHeap h@@65) (and (and ($IsBox bx0@@90 t0@@113) ($IsBox bx1@@74 t1@@89)) ($IsBox bx2@@58 t2@@70))) (Requires3 t0@@113 t1@@89 t2@@70 t3@@55 h@@65 f@@85 bx0@@90 bx1@@74 bx2@@58))) ($IsBox (Apply3 t0@@113 t1@@89 t2@@70 t3@@55 h@@65 f@@85 bx0@@90 bx1@@74 bx2@@58) t3@@55)) :qid |DafnyPre.521:12| :skolemid |1003| :pattern ( (Apply3 t0@@113 t1@@89 t2@@70 t3@@55 h@@65 f@@85 bx0@@90 bx1@@74 bx2@@58)) ))) (=> (forall ((h@@66 T@U) (bx0@@91 T@U) (bx1@@75 T@U) (bx2@@59 T@U) ) (!  (=> (and (and (and (and (= (type h@@66) (MapType0Type refType MapType1Type)) (= (type bx0@@91) BoxType)) (= (type bx1@@75) BoxType)) (= (type bx2@@59) BoxType)) (and (and ($IsGoodHeap h@@66) (and (and ($IsBox bx0@@91 t0@@113) ($IsBox bx1@@75 t1@@89)) ($IsBox bx2@@59 t2@@70))) (Requires3 t0@@113 t1@@89 t2@@70 t3@@55 h@@66 f@@85 bx0@@91 bx1@@75 bx2@@59))) ($IsBox (Apply3 t0@@113 t1@@89 t2@@70 t3@@55 h@@66 f@@85 bx0@@91 bx1@@75 bx2@@59) t3@@55)) :qid |DafnyPre.521:12| :skolemid |1003| :pattern ( (Apply3 t0@@113 t1@@89 t2@@70 t3@@55 h@@66 f@@85 bx0@@91 bx1@@75 bx2@@59)) )) ($Is f@@85 (Tclass._System.___hFunc3 t0@@113 t1@@89 t2@@70 t3@@55))))) :qid |unknown.0:0| :skolemid |1004| :pattern ( ($Is f@@85 (Tclass._System.___hFunc3 t0@@113 t1@@89 t2@@70 t3@@55))) )))
(assert (forall ((f@@86 T@U) (t0@@114 T@U) (t1@@90 T@U) (t2@@71 T@U) (t3@@56 T@U) (u0@@5 T@U) (u1@@4 T@U) (u2@@3 T@U) (u3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@86) HandleTypeType) (= (type t0@@114) TyType)) (= (type t1@@90) TyType)) (= (type t2@@71) TyType)) (= (type t3@@56) TyType)) (= (type u0@@5) TyType)) (= (type u1@@4) TyType)) (= (type u2@@3) TyType)) (= (type u3@@2) TyType)) (and (and (and (and ($Is f@@86 (Tclass._System.___hFunc3 t0@@114 t1@@90 t2@@71 t3@@56)) (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 u0@@5)) ($IsBox bx@@90 t0@@114)) :qid |unknown.0:0| :skolemid |1005| :pattern ( ($IsBox bx@@90 u0@@5)) :pattern ( ($IsBox bx@@90 t0@@114)) ))) (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 u1@@4)) ($IsBox bx@@91 t1@@90)) :qid |unknown.0:0| :skolemid |1006| :pattern ( ($IsBox bx@@91 u1@@4)) :pattern ( ($IsBox bx@@91 t1@@90)) ))) (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 u2@@3)) ($IsBox bx@@92 t2@@71)) :qid |unknown.0:0| :skolemid |1007| :pattern ( ($IsBox bx@@92 u2@@3)) :pattern ( ($IsBox bx@@92 t2@@71)) ))) (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 t3@@56)) ($IsBox bx@@93 u3@@2)) :qid |unknown.0:0| :skolemid |1008| :pattern ( ($IsBox bx@@93 t3@@56)) :pattern ( ($IsBox bx@@93 u3@@2)) )))) ($Is f@@86 (Tclass._System.___hFunc3 u0@@5 u1@@4 u2@@3 u3@@2))) :qid |unknown.0:0| :skolemid |1009| :pattern ( ($Is f@@86 (Tclass._System.___hFunc3 t0@@114 t1@@90 t2@@71 t3@@56)) ($Is f@@86 (Tclass._System.___hFunc3 u0@@5 u1@@4 u2@@3 u3@@2))) )))
(assert (forall ((f@@87 T@U) (t0@@115 T@U) (t1@@91 T@U) (t2@@72 T@U) (t3@@57 T@U) (h@@67 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@87) HandleTypeType) (= (type t0@@115) TyType)) (= (type t1@@91) TyType)) (= (type t2@@72) TyType)) (= (type t3@@57) TyType)) (= (type h@@67) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@67)) (and (=> ($IsAlloc f@@87 (Tclass._System.___hFunc3 t0@@115 t1@@91 t2@@72 t3@@57) h@@67) (forall ((bx0@@92 T@U) (bx1@@76 T@U) (bx2@@60 T@U) ) (!  (=> (and (and (= (type bx0@@92) BoxType) (= (type bx1@@76) BoxType)) (= (type bx2@@60) BoxType)) (=> (and (and (and (and ($IsBox bx0@@92 t0@@115) ($IsAllocBox bx0@@92 t0@@115 h@@67)) (and ($IsBox bx1@@76 t1@@91) ($IsAllocBox bx1@@76 t1@@91 h@@67))) (and ($IsBox bx2@@60 t2@@72) ($IsAllocBox bx2@@60 t2@@72 h@@67))) (Requires3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60)) (forall ((r@@39 T@U) ) (!  (=> (= (type r@@39) refType) (=> (and (not (= r@@39 null)) (U_2_bool (MapType0Select (Reads3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60) ($Box r@@39)))) (U_2_bool (MapType1Select (MapType0Select h@@67 r@@39) alloc)))) :qid |unknown.0:0| :skolemid |1010| :pattern ( (MapType0Select (Reads3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60) ($Box r@@39))) )))) :qid |unknown.0:0| :skolemid |1011| :pattern ( (Apply3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60)) :pattern ( (Reads3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@92 bx1@@76 bx2@@60)) ))) (=> (forall ((bx0@@93 T@U) (bx1@@77 T@U) (bx2@@61 T@U) ) (!  (=> (and (and (= (type bx0@@93) BoxType) (= (type bx1@@77) BoxType)) (= (type bx2@@61) BoxType)) (=> (and (and (and (and ($IsBox bx0@@93 t0@@115) ($IsAllocBox bx0@@93 t0@@115 h@@67)) (and ($IsBox bx1@@77 t1@@91) ($IsAllocBox bx1@@77 t1@@91 h@@67))) (and ($IsBox bx2@@61 t2@@72) ($IsAllocBox bx2@@61 t2@@72 h@@67))) (Requires3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61)) (forall ((r@@40 T@U) ) (!  (=> (= (type r@@40) refType) (=> (and (not (= r@@40 null)) (U_2_bool (MapType0Select (Reads3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61) ($Box r@@40)))) (U_2_bool (MapType1Select (MapType0Select h@@67 r@@40) alloc)))) :qid |unknown.0:0| :skolemid |1010| :pattern ( (MapType0Select (Reads3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61) ($Box r@@40))) )))) :qid |unknown.0:0| :skolemid |1011| :pattern ( (Apply3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61)) :pattern ( (Reads3 t0@@115 t1@@91 t2@@72 t3@@57 h@@67 f@@87 bx0@@93 bx1@@77 bx2@@61)) )) ($IsAlloc f@@87 (Tclass._System.___hFunc3 t0@@115 t1@@91 t2@@72 t3@@57) h@@67)))) :qid |unknown.0:0| :skolemid |1012| :pattern ( ($IsAlloc f@@87 (Tclass._System.___hFunc3 t0@@115 t1@@91 t2@@72 t3@@57) h@@67)) )))
(assert (forall ((f@@88 T@U) (t0@@116 T@U) (t1@@92 T@U) (t2@@73 T@U) (t3@@58 T@U) (h@@68 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@88) HandleTypeType) (= (type t0@@116) TyType)) (= (type t1@@92) TyType)) (= (type t2@@73) TyType)) (= (type t3@@58) TyType)) (= (type h@@68) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@68) ($IsAlloc f@@88 (Tclass._System.___hFunc3 t0@@116 t1@@92 t2@@73 t3@@58) h@@68))) (forall ((bx0@@94 T@U) (bx1@@78 T@U) (bx2@@62 T@U) ) (!  (=> (and (and (= (type bx0@@94) BoxType) (= (type bx1@@78) BoxType)) (= (type bx2@@62) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@94 t0@@116 h@@68) ($IsAllocBox bx1@@78 t1@@92 h@@68)) ($IsAllocBox bx2@@62 t2@@73 h@@68)) (Requires3 t0@@116 t1@@92 t2@@73 t3@@58 h@@68 f@@88 bx0@@94 bx1@@78 bx2@@62)) ($IsAllocBox (Apply3 t0@@116 t1@@92 t2@@73 t3@@58 h@@68 f@@88 bx0@@94 bx1@@78 bx2@@62) t3@@58 h@@68))) :qid |unknown.0:0| :skolemid |1013| :pattern ( (Apply3 t0@@116 t1@@92 t2@@73 t3@@58 h@@68 f@@88 bx0@@94 bx1@@78 bx2@@62)) ))) :qid |unknown.0:0| :skolemid |1014| :pattern ( ($IsAlloc f@@88 (Tclass._System.___hFunc3 t0@@116 t1@@92 t2@@73 t3@@58) h@@68)) )))
(assert (forall ((arg0@@274 T@U) (arg1@@134 T@U) (arg2@@92 T@U) (arg3@@68 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@274 arg1@@134 arg2@@92 arg3@@68)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@274 arg1@@134 arg2@@92 arg3@@68)) )))
(assert (forall ((|#$T0@@124| T@U) (|#$T1@@108| T@U) (|#$T2@@89| T@U) (|#$R@@137| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@124|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$R@@137|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@124| |#$T1@@108| |#$T2@@89| |#$R@@137|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |1015| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@124| |#$T1@@108| |#$T2@@89| |#$R@@137|)) )))
(assert (forall ((arg0@@275 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@275)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@275)) )))
(assert (forall ((|#$T0@@125| T@U) (|#$T1@@109| T@U) (|#$T2@@90| T@U) (|#$R@@138| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@125|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$T2@@90|) TyType)) (= (type |#$R@@138|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@125| |#$T1@@109| |#$T2@@90| |#$R@@138|)) |#$T0@@125|)) :qid |unknown.0:0| :skolemid |1016| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@125| |#$T1@@109| |#$T2@@90| |#$R@@138|)) )))
(assert (forall ((arg0@@276 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@276)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@276)) )))
(assert (forall ((|#$T0@@126| T@U) (|#$T1@@110| T@U) (|#$T2@@91| T@U) (|#$R@@139| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@126|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$T2@@91|) TyType)) (= (type |#$R@@139|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$R@@139|)) |#$T1@@110|)) :qid |unknown.0:0| :skolemid |1017| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$R@@139|)) )))
(assert (forall ((arg0@@277 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@277)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@277)) )))
(assert (forall ((|#$T0@@127| T@U) (|#$T1@@111| T@U) (|#$T2@@92| T@U) (|#$R@@140| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@127|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$T2@@92|) TyType)) (= (type |#$R@@140|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$R@@140|)) |#$T2@@92|)) :qid |unknown.0:0| :skolemid |1018| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$R@@140|)) )))
(assert (forall ((arg0@@278 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@278)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@278)) )))
(assert (forall ((|#$T0@@128| T@U) (|#$T1@@112| T@U) (|#$T2@@93| T@U) (|#$R@@141| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@128|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$T2@@93|) TyType)) (= (type |#$R@@141|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$R@@141|)) |#$R@@141|)) :qid |unknown.0:0| :skolemid |1019| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$R@@141|)) )))
(assert (forall ((|#$T0@@129| T@U) (|#$T1@@113| T@U) (|#$T2@@94| T@U) (|#$R@@142| T@U) (bx@@94 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@129|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$T2@@94|) TyType)) (= (type |#$R@@142|) TyType)) (= (type bx@@94) BoxType)) ($IsBox bx@@94 (Tclass._System.___hPartialFunc3 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$R@@142|))) (and (= ($Box ($Unbox HandleTypeType bx@@94)) bx@@94) ($Is ($Unbox HandleTypeType bx@@94) (Tclass._System.___hPartialFunc3 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$R@@142|)))) :qid |unknown.0:0| :skolemid |1020| :pattern ( ($IsBox bx@@94 (Tclass._System.___hPartialFunc3 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$R@@142|))) )))
(assert (forall ((|#$T0@@130| T@U) (|#$T1@@114| T@U) (|#$T2@@95| T@U) (|#$R@@143| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@130|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$T2@@95|) TyType)) (= (type |#$R@@143|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (and (=> ($Is |f#0@@23| (Tclass._System.___hPartialFunc3 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$R@@143|)) (and ($Is |f#0@@23| (Tclass._System.___hFunc3 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$R@@143|)) (forall ((|x0#0@@19| T@U) (|x1#0@@15| T@U) (|x2#0@@11| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@19|) BoxType) (= (type |x1#0@@15|) BoxType)) (= (type |x2#0@@11|) BoxType)) (and (and ($IsBox |x0#0@@19| |#$T0@@130|) ($IsBox |x1#0@@15| |#$T1@@114|)) ($IsBox |x2#0@@11| |#$T2@@95|))) (|Set#Equal| (Reads3 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$R@@143| $OneHeap |f#0@@23| |x0#0@@19| |x1#0@@15| |x2#0@@11|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1021| :no-pattern (type |x0#0@@19|) :no-pattern (type |x1#0@@15|) :no-pattern (type |x2#0@@11|) :no-pattern (U_2_int |x0#0@@19|) :no-pattern (U_2_bool |x0#0@@19|) :no-pattern (U_2_int |x1#0@@15|) :no-pattern (U_2_bool |x1#0@@15|) :no-pattern (U_2_int |x2#0@@11|) :no-pattern (U_2_bool |x2#0@@11|) )))) (=> (and ($Is |f#0@@23| (Tclass._System.___hFunc3 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$R@@143|)) (forall ((|x0#0@@20| T@U) (|x1#0@@16| T@U) (|x2#0@@12| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@20|) BoxType) (= (type |x1#0@@16|) BoxType)) (= (type |x2#0@@12|) BoxType)) (and (and ($IsBox |x0#0@@20| |#$T0@@130|) ($IsBox |x1#0@@16| |#$T1@@114|)) ($IsBox |x2#0@@12| |#$T2@@95|))) (|Set#Equal| (Reads3 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$R@@143| $OneHeap |f#0@@23| |x0#0@@20| |x1#0@@16| |x2#0@@12|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1021| :no-pattern (type |x0#0@@20|) :no-pattern (type |x1#0@@16|) :no-pattern (type |x2#0@@12|) :no-pattern (U_2_int |x0#0@@20|) :no-pattern (U_2_bool |x0#0@@20|) :no-pattern (U_2_int |x1#0@@16|) :no-pattern (U_2_bool |x1#0@@16|) :no-pattern (U_2_int |x2#0@@12|) :no-pattern (U_2_bool |x2#0@@12|) ))) ($Is |f#0@@23| (Tclass._System.___hPartialFunc3 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$R@@143|))))) :qid |unknown.0:0| :skolemid |1022| :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc3 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$R@@143|))) )))
(assert (forall ((|#$T0@@131| T@U) (|#$T1@@115| T@U) (|#$T2@@96| T@U) (|#$R@@144| T@U) (|f#0@@24| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@131|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$T2@@96|) TyType)) (= (type |#$R@@144|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc3 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$R@@144|) $h@@20) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc3 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$R@@144|) $h@@20)) (=> ($IsAlloc |f#0@@24| (Tclass._System.___hFunc3 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$R@@144|) $h@@20) ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc3 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$R@@144|) $h@@20)))) :qid |unknown.0:0| :skolemid |1023| :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc3 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$R@@144|) $h@@20)) )))
(assert (forall ((arg0@@279 T@U) (arg1@@135 T@U) (arg2@@93 T@U) (arg3@@69 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@279 arg1@@135 arg2@@93 arg3@@69)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@279 arg1@@135 arg2@@93 arg3@@69)) )))
(assert (forall ((|#$T0@@132| T@U) (|#$T1@@116| T@U) (|#$T2@@97| T@U) (|#$R@@145| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@132|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$T2@@97|) TyType)) (= (type |#$R@@145|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@132| |#$T1@@116| |#$T2@@97| |#$R@@145|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |1024| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@132| |#$T1@@116| |#$T2@@97| |#$R@@145|)) )))
(assert (forall ((arg0@@280 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@280)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@280)) )))
(assert (forall ((|#$T0@@133| T@U) (|#$T1@@117| T@U) (|#$T2@@98| T@U) (|#$R@@146| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@133|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$T2@@98|) TyType)) (= (type |#$R@@146|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@133| |#$T1@@117| |#$T2@@98| |#$R@@146|)) |#$T0@@133|)) :qid |unknown.0:0| :skolemid |1025| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@133| |#$T1@@117| |#$T2@@98| |#$R@@146|)) )))
(assert (forall ((arg0@@281 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@281)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@281)) )))
(assert (forall ((|#$T0@@134| T@U) (|#$T1@@118| T@U) (|#$T2@@99| T@U) (|#$R@@147| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@134|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$T2@@99|) TyType)) (= (type |#$R@@147|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@134| |#$T1@@118| |#$T2@@99| |#$R@@147|)) |#$T1@@118|)) :qid |unknown.0:0| :skolemid |1026| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@134| |#$T1@@118| |#$T2@@99| |#$R@@147|)) )))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@282)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@282)) )))
(assert (forall ((|#$T0@@135| T@U) (|#$T1@@119| T@U) (|#$T2@@100| T@U) (|#$R@@148| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@135|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$T2@@100|) TyType)) (= (type |#$R@@148|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@135| |#$T1@@119| |#$T2@@100| |#$R@@148|)) |#$T2@@100|)) :qid |unknown.0:0| :skolemid |1027| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@135| |#$T1@@119| |#$T2@@100| |#$R@@148|)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@283)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@283)) )))
(assert (forall ((|#$T0@@136| T@U) (|#$T1@@120| T@U) (|#$T2@@101| T@U) (|#$R@@149| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@136|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$T2@@101|) TyType)) (= (type |#$R@@149|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@136| |#$T1@@120| |#$T2@@101| |#$R@@149|)) |#$R@@149|)) :qid |unknown.0:0| :skolemid |1028| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@136| |#$T1@@120| |#$T2@@101| |#$R@@149|)) )))
(assert (forall ((|#$T0@@137| T@U) (|#$T1@@121| T@U) (|#$T2@@102| T@U) (|#$R@@150| T@U) (bx@@95 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@137|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$T2@@102|) TyType)) (= (type |#$R@@150|) TyType)) (= (type bx@@95) BoxType)) ($IsBox bx@@95 (Tclass._System.___hTotalFunc3 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$R@@150|))) (and (= ($Box ($Unbox HandleTypeType bx@@95)) bx@@95) ($Is ($Unbox HandleTypeType bx@@95) (Tclass._System.___hTotalFunc3 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$R@@150|)))) :qid |unknown.0:0| :skolemid |1029| :pattern ( ($IsBox bx@@95 (Tclass._System.___hTotalFunc3 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$R@@150|))) )))
(assert (forall ((|#$T0@@138| T@U) (|#$T1@@122| T@U) (|#$T2@@103| T@U) (|#$R@@151| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@138|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$T2@@103|) TyType)) (= (type |#$R@@151|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (and (=> ($Is |f#0@@25| (Tclass._System.___hTotalFunc3 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$R@@151|)) (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc3 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$R@@151|)) (forall ((|x0#0@@21| T@U) (|x1#0@@17| T@U) (|x2#0@@13| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@21|) BoxType) (= (type |x1#0@@17|) BoxType)) (= (type |x2#0@@13|) BoxType)) (and (and ($IsBox |x0#0@@21| |#$T0@@138|) ($IsBox |x1#0@@17| |#$T1@@122|)) ($IsBox |x2#0@@13| |#$T2@@103|))) (Requires3 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$R@@151| $OneHeap |f#0@@25| |x0#0@@21| |x1#0@@17| |x2#0@@13|)) :qid |unknown.0:0| :skolemid |1030| :no-pattern (type |x0#0@@21|) :no-pattern (type |x1#0@@17|) :no-pattern (type |x2#0@@13|) :no-pattern (U_2_int |x0#0@@21|) :no-pattern (U_2_bool |x0#0@@21|) :no-pattern (U_2_int |x1#0@@17|) :no-pattern (U_2_bool |x1#0@@17|) :no-pattern (U_2_int |x2#0@@13|) :no-pattern (U_2_bool |x2#0@@13|) )))) (=> (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc3 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$R@@151|)) (forall ((|x0#0@@22| T@U) (|x1#0@@18| T@U) (|x2#0@@14| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@22|) BoxType) (= (type |x1#0@@18|) BoxType)) (= (type |x2#0@@14|) BoxType)) (and (and ($IsBox |x0#0@@22| |#$T0@@138|) ($IsBox |x1#0@@18| |#$T1@@122|)) ($IsBox |x2#0@@14| |#$T2@@103|))) (Requires3 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$R@@151| $OneHeap |f#0@@25| |x0#0@@22| |x1#0@@18| |x2#0@@14|)) :qid |unknown.0:0| :skolemid |1030| :no-pattern (type |x0#0@@22|) :no-pattern (type |x1#0@@18|) :no-pattern (type |x2#0@@14|) :no-pattern (U_2_int |x0#0@@22|) :no-pattern (U_2_bool |x0#0@@22|) :no-pattern (U_2_int |x1#0@@18|) :no-pattern (U_2_bool |x1#0@@18|) :no-pattern (U_2_int |x2#0@@14|) :no-pattern (U_2_bool |x2#0@@14|) ))) ($Is |f#0@@25| (Tclass._System.___hTotalFunc3 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$R@@151|))))) :qid |unknown.0:0| :skolemid |1031| :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc3 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$R@@151|))) )))
(assert (forall ((|#$T0@@139| T@U) (|#$T1@@123| T@U) (|#$T2@@104| T@U) (|#$R@@152| T@U) (|f#0@@26| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@139|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$T2@@104|) TyType)) (= (type |#$R@@152|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc3 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$R@@152|) $h@@21) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc3 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$R@@152|) $h@@21)) (=> ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc3 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$R@@152|) $h@@21) ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc3 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$R@@152|) $h@@21)))) :qid |unknown.0:0| :skolemid |1032| :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc3 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$R@@152|) $h@@21)) )))
(assert (forall ((arg0@@284 T@U) (arg1@@136 T@U) (arg2@@94 T@U) (arg3@@70 T@U) (arg4@@59 T@U) (arg5@@46 T@U) (arg6@@34 T@U) (arg7@@19 T@U) ) (! (= (type (Tclass._System.___hFunc7 arg0@@284 arg1@@136 arg2@@94 arg3@@70 arg4@@59 arg5@@46 arg6@@34 arg7@@19)) TyType) :qid |funType:Tclass._System.___hFunc7| :pattern ( (Tclass._System.___hFunc7 arg0@@284 arg1@@136 arg2@@94 arg3@@70 arg4@@59 arg5@@46 arg6@@34 arg7@@19)) )))
(assert (forall ((|#$T0@@140| T@U) (|#$T1@@124| T@U) (|#$T2@@105| T@U) (|#$T3@@83| T@U) (|#$T4@@58| T@U) (|#$T5@@30| T@U) (|#$T6| T@U) (|#$R@@153| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@140|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$T2@@105|) TyType)) (= (type |#$T3@@83|) TyType)) (= (type |#$T4@@58|) TyType)) (= (type |#$T5@@30|) TyType)) (= (type |#$T6|) TyType)) (= (type |#$R@@153|) TyType)) (= (Tag (Tclass._System.___hFunc7 |#$T0@@140| |#$T1@@124| |#$T2@@105| |#$T3@@83| |#$T4@@58| |#$T5@@30| |#$T6| |#$R@@153|)) Tagclass._System.___hFunc7)) :qid |unknown.0:0| :skolemid |1033| :pattern ( (Tclass._System.___hFunc7 |#$T0@@140| |#$T1@@124| |#$T2@@105| |#$T3@@83| |#$T4@@58| |#$T5@@30| |#$T6| |#$R@@153|)) )))
(assert (forall ((arg0@@285 T@U) ) (! (= (type (Tclass._System.___hFunc7_0 arg0@@285)) TyType) :qid |funType:Tclass._System.___hFunc7_0| :pattern ( (Tclass._System.___hFunc7_0 arg0@@285)) )))
(assert (forall ((|#$T0@@141| T@U) (|#$T1@@125| T@U) (|#$T2@@106| T@U) (|#$T3@@84| T@U) (|#$T4@@59| T@U) (|#$T5@@31| T@U) (|#$T6@@0| T@U) (|#$R@@154| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@141|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$T2@@106|) TyType)) (= (type |#$T3@@84|) TyType)) (= (type |#$T4@@59|) TyType)) (= (type |#$T5@@31|) TyType)) (= (type |#$T6@@0|) TyType)) (= (type |#$R@@154|) TyType)) (= (Tclass._System.___hFunc7_0 (Tclass._System.___hFunc7 |#$T0@@141| |#$T1@@125| |#$T2@@106| |#$T3@@84| |#$T4@@59| |#$T5@@31| |#$T6@@0| |#$R@@154|)) |#$T0@@141|)) :qid |unknown.0:0| :skolemid |1034| :pattern ( (Tclass._System.___hFunc7 |#$T0@@141| |#$T1@@125| |#$T2@@106| |#$T3@@84| |#$T4@@59| |#$T5@@31| |#$T6@@0| |#$R@@154|)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (Tclass._System.___hFunc7_1 arg0@@286)) TyType) :qid |funType:Tclass._System.___hFunc7_1| :pattern ( (Tclass._System.___hFunc7_1 arg0@@286)) )))
(assert (forall ((|#$T0@@142| T@U) (|#$T1@@126| T@U) (|#$T2@@107| T@U) (|#$T3@@85| T@U) (|#$T4@@60| T@U) (|#$T5@@32| T@U) (|#$T6@@1| T@U) (|#$R@@155| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@142|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$T2@@107|) TyType)) (= (type |#$T3@@85|) TyType)) (= (type |#$T4@@60|) TyType)) (= (type |#$T5@@32|) TyType)) (= (type |#$T6@@1|) TyType)) (= (type |#$R@@155|) TyType)) (= (Tclass._System.___hFunc7_1 (Tclass._System.___hFunc7 |#$T0@@142| |#$T1@@126| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@32| |#$T6@@1| |#$R@@155|)) |#$T1@@126|)) :qid |unknown.0:0| :skolemid |1035| :pattern ( (Tclass._System.___hFunc7 |#$T0@@142| |#$T1@@126| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@32| |#$T6@@1| |#$R@@155|)) )))
(assert (forall ((arg0@@287 T@U) ) (! (= (type (Tclass._System.___hFunc7_2 arg0@@287)) TyType) :qid |funType:Tclass._System.___hFunc7_2| :pattern ( (Tclass._System.___hFunc7_2 arg0@@287)) )))
(assert (forall ((|#$T0@@143| T@U) (|#$T1@@127| T@U) (|#$T2@@108| T@U) (|#$T3@@86| T@U) (|#$T4@@61| T@U) (|#$T5@@33| T@U) (|#$T6@@2| T@U) (|#$R@@156| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@143|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$T2@@108|) TyType)) (= (type |#$T3@@86|) TyType)) (= (type |#$T4@@61|) TyType)) (= (type |#$T5@@33|) TyType)) (= (type |#$T6@@2|) TyType)) (= (type |#$R@@156|) TyType)) (= (Tclass._System.___hFunc7_2 (Tclass._System.___hFunc7 |#$T0@@143| |#$T1@@127| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@33| |#$T6@@2| |#$R@@156|)) |#$T2@@108|)) :qid |unknown.0:0| :skolemid |1036| :pattern ( (Tclass._System.___hFunc7 |#$T0@@143| |#$T1@@127| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@33| |#$T6@@2| |#$R@@156|)) )))
(assert (forall ((arg0@@288 T@U) ) (! (= (type (Tclass._System.___hFunc7_3 arg0@@288)) TyType) :qid |funType:Tclass._System.___hFunc7_3| :pattern ( (Tclass._System.___hFunc7_3 arg0@@288)) )))
(assert (forall ((|#$T0@@144| T@U) (|#$T1@@128| T@U) (|#$T2@@109| T@U) (|#$T3@@87| T@U) (|#$T4@@62| T@U) (|#$T5@@34| T@U) (|#$T6@@3| T@U) (|#$R@@157| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@144|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$T2@@109|) TyType)) (= (type |#$T3@@87|) TyType)) (= (type |#$T4@@62|) TyType)) (= (type |#$T5@@34|) TyType)) (= (type |#$T6@@3|) TyType)) (= (type |#$R@@157|) TyType)) (= (Tclass._System.___hFunc7_3 (Tclass._System.___hFunc7 |#$T0@@144| |#$T1@@128| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@34| |#$T6@@3| |#$R@@157|)) |#$T3@@87|)) :qid |unknown.0:0| :skolemid |1037| :pattern ( (Tclass._System.___hFunc7 |#$T0@@144| |#$T1@@128| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@34| |#$T6@@3| |#$R@@157|)) )))
(assert (forall ((arg0@@289 T@U) ) (! (= (type (Tclass._System.___hFunc7_4 arg0@@289)) TyType) :qid |funType:Tclass._System.___hFunc7_4| :pattern ( (Tclass._System.___hFunc7_4 arg0@@289)) )))
(assert (forall ((|#$T0@@145| T@U) (|#$T1@@129| T@U) (|#$T2@@110| T@U) (|#$T3@@88| T@U) (|#$T4@@63| T@U) (|#$T5@@35| T@U) (|#$T6@@4| T@U) (|#$R@@158| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@145|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$T2@@110|) TyType)) (= (type |#$T3@@88|) TyType)) (= (type |#$T4@@63|) TyType)) (= (type |#$T5@@35|) TyType)) (= (type |#$T6@@4|) TyType)) (= (type |#$R@@158|) TyType)) (= (Tclass._System.___hFunc7_4 (Tclass._System.___hFunc7 |#$T0@@145| |#$T1@@129| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@35| |#$T6@@4| |#$R@@158|)) |#$T4@@63|)) :qid |unknown.0:0| :skolemid |1038| :pattern ( (Tclass._System.___hFunc7 |#$T0@@145| |#$T1@@129| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@35| |#$T6@@4| |#$R@@158|)) )))
(assert (forall ((arg0@@290 T@U) ) (! (= (type (Tclass._System.___hFunc7_5 arg0@@290)) TyType) :qid |funType:Tclass._System.___hFunc7_5| :pattern ( (Tclass._System.___hFunc7_5 arg0@@290)) )))
(assert (forall ((|#$T0@@146| T@U) (|#$T1@@130| T@U) (|#$T2@@111| T@U) (|#$T3@@89| T@U) (|#$T4@@64| T@U) (|#$T5@@36| T@U) (|#$T6@@5| T@U) (|#$R@@159| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@146|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$T2@@111|) TyType)) (= (type |#$T3@@89|) TyType)) (= (type |#$T4@@64|) TyType)) (= (type |#$T5@@36|) TyType)) (= (type |#$T6@@5|) TyType)) (= (type |#$R@@159|) TyType)) (= (Tclass._System.___hFunc7_5 (Tclass._System.___hFunc7 |#$T0@@146| |#$T1@@130| |#$T2@@111| |#$T3@@89| |#$T4@@64| |#$T5@@36| |#$T6@@5| |#$R@@159|)) |#$T5@@36|)) :qid |unknown.0:0| :skolemid |1039| :pattern ( (Tclass._System.___hFunc7 |#$T0@@146| |#$T1@@130| |#$T2@@111| |#$T3@@89| |#$T4@@64| |#$T5@@36| |#$T6@@5| |#$R@@159|)) )))
(assert (forall ((arg0@@291 T@U) ) (! (= (type (Tclass._System.___hFunc7_6 arg0@@291)) TyType) :qid |funType:Tclass._System.___hFunc7_6| :pattern ( (Tclass._System.___hFunc7_6 arg0@@291)) )))
(assert (forall ((|#$T0@@147| T@U) (|#$T1@@131| T@U) (|#$T2@@112| T@U) (|#$T3@@90| T@U) (|#$T4@@65| T@U) (|#$T5@@37| T@U) (|#$T6@@6| T@U) (|#$R@@160| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@147|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$T2@@112|) TyType)) (= (type |#$T3@@90|) TyType)) (= (type |#$T4@@65|) TyType)) (= (type |#$T5@@37|) TyType)) (= (type |#$T6@@6|) TyType)) (= (type |#$R@@160|) TyType)) (= (Tclass._System.___hFunc7_6 (Tclass._System.___hFunc7 |#$T0@@147| |#$T1@@131| |#$T2@@112| |#$T3@@90| |#$T4@@65| |#$T5@@37| |#$T6@@6| |#$R@@160|)) |#$T6@@6|)) :qid |unknown.0:0| :skolemid |1040| :pattern ( (Tclass._System.___hFunc7 |#$T0@@147| |#$T1@@131| |#$T2@@112| |#$T3@@90| |#$T4@@65| |#$T5@@37| |#$T6@@6| |#$R@@160|)) )))
(assert (forall ((arg0@@292 T@U) ) (! (= (type (Tclass._System.___hFunc7_7 arg0@@292)) TyType) :qid |funType:Tclass._System.___hFunc7_7| :pattern ( (Tclass._System.___hFunc7_7 arg0@@292)) )))
(assert (forall ((|#$T0@@148| T@U) (|#$T1@@132| T@U) (|#$T2@@113| T@U) (|#$T3@@91| T@U) (|#$T4@@66| T@U) (|#$T5@@38| T@U) (|#$T6@@7| T@U) (|#$R@@161| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@148|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$T2@@113|) TyType)) (= (type |#$T3@@91|) TyType)) (= (type |#$T4@@66|) TyType)) (= (type |#$T5@@38|) TyType)) (= (type |#$T6@@7|) TyType)) (= (type |#$R@@161|) TyType)) (= (Tclass._System.___hFunc7_7 (Tclass._System.___hFunc7 |#$T0@@148| |#$T1@@132| |#$T2@@113| |#$T3@@91| |#$T4@@66| |#$T5@@38| |#$T6@@7| |#$R@@161|)) |#$R@@161|)) :qid |unknown.0:0| :skolemid |1041| :pattern ( (Tclass._System.___hFunc7 |#$T0@@148| |#$T1@@132| |#$T2@@113| |#$T3@@91| |#$T4@@66| |#$T5@@38| |#$T6@@7| |#$R@@161|)) )))
(assert (forall ((|#$T0@@149| T@U) (|#$T1@@133| T@U) (|#$T2@@114| T@U) (|#$T3@@92| T@U) (|#$T4@@67| T@U) (|#$T5@@39| T@U) (|#$T6@@8| T@U) (|#$R@@162| T@U) (bx@@96 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@149|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$T2@@114|) TyType)) (= (type |#$T3@@92|) TyType)) (= (type |#$T4@@67|) TyType)) (= (type |#$T5@@39|) TyType)) (= (type |#$T6@@8|) TyType)) (= (type |#$R@@162|) TyType)) (= (type bx@@96) BoxType)) ($IsBox bx@@96 (Tclass._System.___hFunc7 |#$T0@@149| |#$T1@@133| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$T5@@39| |#$T6@@8| |#$R@@162|))) (and (= ($Box ($Unbox HandleTypeType bx@@96)) bx@@96) ($Is ($Unbox HandleTypeType bx@@96) (Tclass._System.___hFunc7 |#$T0@@149| |#$T1@@133| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$T5@@39| |#$T6@@8| |#$R@@162|)))) :qid |unknown.0:0| :skolemid |1042| :pattern ( ($IsBox bx@@96 (Tclass._System.___hFunc7 |#$T0@@149| |#$T1@@133| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$T5@@39| |#$T6@@8| |#$R@@162|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@293 T@T) (arg1@@137 T@T) (arg2@@95 T@T) (arg3@@71 T@T) (arg4@@60 T@T) (arg5@@47 T@T) (arg6@@35 T@T) (arg7@@20 T@T) (arg8@@8 T@T) ) (! (= (Ctor (MapType8Type arg0@@293 arg1@@137 arg2@@95 arg3@@71 arg4@@60 arg5@@47 arg6@@35 arg7@@20 arg8@@8)) 27) :qid |ctor:MapType8Type| )) (forall ((arg0@@294 T@T) (arg1@@138 T@T) (arg2@@96 T@T) (arg3@@72 T@T) (arg4@@61 T@T) (arg5@@48 T@T) (arg6@@36 T@T) (arg7@@21 T@T) (arg8@@9 T@T) ) (! (= (MapType8TypeInv0 (MapType8Type arg0@@294 arg1@@138 arg2@@96 arg3@@72 arg4@@61 arg5@@48 arg6@@36 arg7@@21 arg8@@9)) arg0@@294) :qid |typeInv:MapType8TypeInv0| :pattern ( (MapType8Type arg0@@294 arg1@@138 arg2@@96 arg3@@72 arg4@@61 arg5@@48 arg6@@36 arg7@@21 arg8@@9)) ))) (forall ((arg0@@295 T@T) (arg1@@139 T@T) (arg2@@97 T@T) (arg3@@73 T@T) (arg4@@62 T@T) (arg5@@49 T@T) (arg6@@37 T@T) (arg7@@22 T@T) (arg8@@10 T@T) ) (! (= (MapType8TypeInv1 (MapType8Type arg0@@295 arg1@@139 arg2@@97 arg3@@73 arg4@@62 arg5@@49 arg6@@37 arg7@@22 arg8@@10)) arg1@@139) :qid |typeInv:MapType8TypeInv1| :pattern ( (MapType8Type arg0@@295 arg1@@139 arg2@@97 arg3@@73 arg4@@62 arg5@@49 arg6@@37 arg7@@22 arg8@@10)) ))) (forall ((arg0@@296 T@T) (arg1@@140 T@T) (arg2@@98 T@T) (arg3@@74 T@T) (arg4@@63 T@T) (arg5@@50 T@T) (arg6@@38 T@T) (arg7@@23 T@T) (arg8@@11 T@T) ) (! (= (MapType8TypeInv2 (MapType8Type arg0@@296 arg1@@140 arg2@@98 arg3@@74 arg4@@63 arg5@@50 arg6@@38 arg7@@23 arg8@@11)) arg2@@98) :qid |typeInv:MapType8TypeInv2| :pattern ( (MapType8Type arg0@@296 arg1@@140 arg2@@98 arg3@@74 arg4@@63 arg5@@50 arg6@@38 arg7@@23 arg8@@11)) ))) (forall ((arg0@@297 T@T) (arg1@@141 T@T) (arg2@@99 T@T) (arg3@@75 T@T) (arg4@@64 T@T) (arg5@@51 T@T) (arg6@@39 T@T) (arg7@@24 T@T) (arg8@@12 T@T) ) (! (= (MapType8TypeInv3 (MapType8Type arg0@@297 arg1@@141 arg2@@99 arg3@@75 arg4@@64 arg5@@51 arg6@@39 arg7@@24 arg8@@12)) arg3@@75) :qid |typeInv:MapType8TypeInv3| :pattern ( (MapType8Type arg0@@297 arg1@@141 arg2@@99 arg3@@75 arg4@@64 arg5@@51 arg6@@39 arg7@@24 arg8@@12)) ))) (forall ((arg0@@298 T@T) (arg1@@142 T@T) (arg2@@100 T@T) (arg3@@76 T@T) (arg4@@65 T@T) (arg5@@52 T@T) (arg6@@40 T@T) (arg7@@25 T@T) (arg8@@13 T@T) ) (! (= (MapType8TypeInv4 (MapType8Type arg0@@298 arg1@@142 arg2@@100 arg3@@76 arg4@@65 arg5@@52 arg6@@40 arg7@@25 arg8@@13)) arg4@@65) :qid |typeInv:MapType8TypeInv4| :pattern ( (MapType8Type arg0@@298 arg1@@142 arg2@@100 arg3@@76 arg4@@65 arg5@@52 arg6@@40 arg7@@25 arg8@@13)) ))) (forall ((arg0@@299 T@T) (arg1@@143 T@T) (arg2@@101 T@T) (arg3@@77 T@T) (arg4@@66 T@T) (arg5@@53 T@T) (arg6@@41 T@T) (arg7@@26 T@T) (arg8@@14 T@T) ) (! (= (MapType8TypeInv5 (MapType8Type arg0@@299 arg1@@143 arg2@@101 arg3@@77 arg4@@66 arg5@@53 arg6@@41 arg7@@26 arg8@@14)) arg5@@53) :qid |typeInv:MapType8TypeInv5| :pattern ( (MapType8Type arg0@@299 arg1@@143 arg2@@101 arg3@@77 arg4@@66 arg5@@53 arg6@@41 arg7@@26 arg8@@14)) ))) (forall ((arg0@@300 T@T) (arg1@@144 T@T) (arg2@@102 T@T) (arg3@@78 T@T) (arg4@@67 T@T) (arg5@@54 T@T) (arg6@@42 T@T) (arg7@@27 T@T) (arg8@@15 T@T) ) (! (= (MapType8TypeInv6 (MapType8Type arg0@@300 arg1@@144 arg2@@102 arg3@@78 arg4@@67 arg5@@54 arg6@@42 arg7@@27 arg8@@15)) arg6@@42) :qid |typeInv:MapType8TypeInv6| :pattern ( (MapType8Type arg0@@300 arg1@@144 arg2@@102 arg3@@78 arg4@@67 arg5@@54 arg6@@42 arg7@@27 arg8@@15)) ))) (forall ((arg0@@301 T@T) (arg1@@145 T@T) (arg2@@103 T@T) (arg3@@79 T@T) (arg4@@68 T@T) (arg5@@55 T@T) (arg6@@43 T@T) (arg7@@28 T@T) (arg8@@16 T@T) ) (! (= (MapType8TypeInv7 (MapType8Type arg0@@301 arg1@@145 arg2@@103 arg3@@79 arg4@@68 arg5@@55 arg6@@43 arg7@@28 arg8@@16)) arg7@@28) :qid |typeInv:MapType8TypeInv7| :pattern ( (MapType8Type arg0@@301 arg1@@145 arg2@@103 arg3@@79 arg4@@68 arg5@@55 arg6@@43 arg7@@28 arg8@@16)) ))) (forall ((arg0@@302 T@T) (arg1@@146 T@T) (arg2@@104 T@T) (arg3@@80 T@T) (arg4@@69 T@T) (arg5@@56 T@T) (arg6@@44 T@T) (arg7@@29 T@T) (arg8@@17 T@T) ) (! (= (MapType8TypeInv8 (MapType8Type arg0@@302 arg1@@146 arg2@@104 arg3@@80 arg4@@69 arg5@@56 arg6@@44 arg7@@29 arg8@@17)) arg8@@17) :qid |typeInv:MapType8TypeInv8| :pattern ( (MapType8Type arg0@@302 arg1@@146 arg2@@104 arg3@@80 arg4@@69 arg5@@56 arg6@@44 arg7@@29 arg8@@17)) ))) (forall ((arg0@@303 T@U) (arg1@@147 T@U) (arg2@@105 T@U) (arg3@@81 T@U) (arg4@@70 T@U) (arg5@@57 T@U) (arg6@@45 T@U) (arg7@@30 T@U) (arg8@@18 T@U) ) (! (let ((aVar8 (MapType8TypeInv8 (type arg0@@303)))) (= (type (MapType8Select arg0@@303 arg1@@147 arg2@@105 arg3@@81 arg4@@70 arg5@@57 arg6@@45 arg7@@30 arg8@@18)) aVar8)) :qid |funType:MapType8Select| :pattern ( (MapType8Select arg0@@303 arg1@@147 arg2@@105 arg3@@81 arg4@@70 arg5@@57 arg6@@45 arg7@@30 arg8@@18)) ))) (forall ((arg0@@304 T@U) (arg1@@148 T@U) (arg2@@106 T@U) (arg3@@82 T@U) (arg4@@71 T@U) (arg5@@58 T@U) (arg6@@46 T@U) (arg7@@31 T@U) (arg8@@19 T@U) (arg9@@5 T@U) ) (! (let ((aVar8@@0 (type arg9@@5))) (let ((aVar7@@2 (type arg8@@19))) (let ((aVar6@@3 (type arg7@@31))) (let ((aVar5@@4 (type arg6@@46))) (let ((aVar4@@5 (type arg5@@58))) (let ((aVar3@@6 (type arg4@@71))) (let ((aVar2@@7 (type arg3@@82))) (let ((aVar1@@8 (type arg2@@106))) (let ((aVar0@@6 (type arg1@@148))) (= (type (MapType8Store arg0@@304 arg1@@148 arg2@@106 arg3@@82 arg4@@71 arg5@@58 arg6@@46 arg7@@31 arg8@@19 arg9@@5)) (MapType8Type aVar0@@6 aVar1@@8 aVar2@@7 aVar3@@6 aVar4@@5 aVar5@@4 aVar6@@3 aVar7@@2 aVar8@@0))))))))))) :qid |funType:MapType8Store| :pattern ( (MapType8Store arg0@@304 arg1@@148 arg2@@106 arg3@@82 arg4@@71 arg5@@58 arg6@@46 arg7@@31 arg8@@19 arg9@@5)) ))) (forall ((m@@66 T@U) (x0@@44 T@U) (x1@@38 T@U) (x2@@34 T@U) (x3@@29 T@U) (x4@@23 T@U) (x5@@16 T@U) (x6@@8 T@U) (x7 T@U) (val@@45 T@U) ) (! (let ((aVar8@@1 (MapType8TypeInv8 (type m@@66)))) (=> (= (type val@@45) aVar8@@1) (= (MapType8Select (MapType8Store m@@66 x0@@44 x1@@38 x2@@34 x3@@29 x4@@23 x5@@16 x6@@8 x7 val@@45) x0@@44 x1@@38 x2@@34 x3@@29 x4@@23 x5@@16 x6@@8 x7) val@@45))) :qid |mapAx0:MapType8Select| :weight 0 ))) (and (and (and (and (and (and (and (and (forall ((val@@46 T@U) (m@@67 T@U) (x0@@45 T@U) (x1@@39 T@U) (x2@@35 T@U) (x3@@30 T@U) (x4@@24 T@U) (x5@@17 T@U) (x6@@9 T@U) (x7@@0 T@U) (y0@@36 T@U) (y1@@32 T@U) (y2@@29 T@U) (y3@@25 T@U) (y4@@20 T@U) (y5@@14 T@U) (y6@@7 T@U) (y7 T@U) ) (!  (or (= x0@@45 y0@@36) (= (MapType8Select (MapType8Store m@@67 x0@@45 x1@@39 x2@@35 x3@@30 x4@@24 x5@@17 x6@@9 x7@@0 val@@46) y0@@36 y1@@32 y2@@29 y3@@25 y4@@20 y5@@14 y6@@7 y7) (MapType8Select m@@67 y0@@36 y1@@32 y2@@29 y3@@25 y4@@20 y5@@14 y6@@7 y7))) :qid |mapAx1:MapType8Select:0| :weight 0 )) (forall ((val@@47 T@U) (m@@68 T@U) (x0@@46 T@U) (x1@@40 T@U) (x2@@36 T@U) (x3@@31 T@U) (x4@@25 T@U) (x5@@18 T@U) (x6@@10 T@U) (x7@@1 T@U) (y0@@37 T@U) (y1@@33 T@U) (y2@@30 T@U) (y3@@26 T@U) (y4@@21 T@U) (y5@@15 T@U) (y6@@8 T@U) (y7@@0 T@U) ) (!  (or (= x1@@40 y1@@33) (= (MapType8Select (MapType8Store m@@68 x0@@46 x1@@40 x2@@36 x3@@31 x4@@25 x5@@18 x6@@10 x7@@1 val@@47) y0@@37 y1@@33 y2@@30 y3@@26 y4@@21 y5@@15 y6@@8 y7@@0) (MapType8Select m@@68 y0@@37 y1@@33 y2@@30 y3@@26 y4@@21 y5@@15 y6@@8 y7@@0))) :qid |mapAx1:MapType8Select:1| :weight 0 ))) (forall ((val@@48 T@U) (m@@69 T@U) (x0@@47 T@U) (x1@@41 T@U) (x2@@37 T@U) (x3@@32 T@U) (x4@@26 T@U) (x5@@19 T@U) (x6@@11 T@U) (x7@@2 T@U) (y0@@38 T@U) (y1@@34 T@U) (y2@@31 T@U) (y3@@27 T@U) (y4@@22 T@U) (y5@@16 T@U) (y6@@9 T@U) (y7@@1 T@U) ) (!  (or (= x2@@37 y2@@31) (= (MapType8Select (MapType8Store m@@69 x0@@47 x1@@41 x2@@37 x3@@32 x4@@26 x5@@19 x6@@11 x7@@2 val@@48) y0@@38 y1@@34 y2@@31 y3@@27 y4@@22 y5@@16 y6@@9 y7@@1) (MapType8Select m@@69 y0@@38 y1@@34 y2@@31 y3@@27 y4@@22 y5@@16 y6@@9 y7@@1))) :qid |mapAx1:MapType8Select:2| :weight 0 ))) (forall ((val@@49 T@U) (m@@70 T@U) (x0@@48 T@U) (x1@@42 T@U) (x2@@38 T@U) (x3@@33 T@U) (x4@@27 T@U) (x5@@20 T@U) (x6@@12 T@U) (x7@@3 T@U) (y0@@39 T@U) (y1@@35 T@U) (y2@@32 T@U) (y3@@28 T@U) (y4@@23 T@U) (y5@@17 T@U) (y6@@10 T@U) (y7@@2 T@U) ) (!  (or (= x3@@33 y3@@28) (= (MapType8Select (MapType8Store m@@70 x0@@48 x1@@42 x2@@38 x3@@33 x4@@27 x5@@20 x6@@12 x7@@3 val@@49) y0@@39 y1@@35 y2@@32 y3@@28 y4@@23 y5@@17 y6@@10 y7@@2) (MapType8Select m@@70 y0@@39 y1@@35 y2@@32 y3@@28 y4@@23 y5@@17 y6@@10 y7@@2))) :qid |mapAx1:MapType8Select:3| :weight 0 ))) (forall ((val@@50 T@U) (m@@71 T@U) (x0@@49 T@U) (x1@@43 T@U) (x2@@39 T@U) (x3@@34 T@U) (x4@@28 T@U) (x5@@21 T@U) (x6@@13 T@U) (x7@@4 T@U) (y0@@40 T@U) (y1@@36 T@U) (y2@@33 T@U) (y3@@29 T@U) (y4@@24 T@U) (y5@@18 T@U) (y6@@11 T@U) (y7@@3 T@U) ) (!  (or (= x4@@28 y4@@24) (= (MapType8Select (MapType8Store m@@71 x0@@49 x1@@43 x2@@39 x3@@34 x4@@28 x5@@21 x6@@13 x7@@4 val@@50) y0@@40 y1@@36 y2@@33 y3@@29 y4@@24 y5@@18 y6@@11 y7@@3) (MapType8Select m@@71 y0@@40 y1@@36 y2@@33 y3@@29 y4@@24 y5@@18 y6@@11 y7@@3))) :qid |mapAx1:MapType8Select:4| :weight 0 ))) (forall ((val@@51 T@U) (m@@72 T@U) (x0@@50 T@U) (x1@@44 T@U) (x2@@40 T@U) (x3@@35 T@U) (x4@@29 T@U) (x5@@22 T@U) (x6@@14 T@U) (x7@@5 T@U) (y0@@41 T@U) (y1@@37 T@U) (y2@@34 T@U) (y3@@30 T@U) (y4@@25 T@U) (y5@@19 T@U) (y6@@12 T@U) (y7@@4 T@U) ) (!  (or (= x5@@22 y5@@19) (= (MapType8Select (MapType8Store m@@72 x0@@50 x1@@44 x2@@40 x3@@35 x4@@29 x5@@22 x6@@14 x7@@5 val@@51) y0@@41 y1@@37 y2@@34 y3@@30 y4@@25 y5@@19 y6@@12 y7@@4) (MapType8Select m@@72 y0@@41 y1@@37 y2@@34 y3@@30 y4@@25 y5@@19 y6@@12 y7@@4))) :qid |mapAx1:MapType8Select:5| :weight 0 ))) (forall ((val@@52 T@U) (m@@73 T@U) (x0@@51 T@U) (x1@@45 T@U) (x2@@41 T@U) (x3@@36 T@U) (x4@@30 T@U) (x5@@23 T@U) (x6@@15 T@U) (x7@@6 T@U) (y0@@42 T@U) (y1@@38 T@U) (y2@@35 T@U) (y3@@31 T@U) (y4@@26 T@U) (y5@@20 T@U) (y6@@13 T@U) (y7@@5 T@U) ) (!  (or (= x6@@15 y6@@13) (= (MapType8Select (MapType8Store m@@73 x0@@51 x1@@45 x2@@41 x3@@36 x4@@30 x5@@23 x6@@15 x7@@6 val@@52) y0@@42 y1@@38 y2@@35 y3@@31 y4@@26 y5@@20 y6@@13 y7@@5) (MapType8Select m@@73 y0@@42 y1@@38 y2@@35 y3@@31 y4@@26 y5@@20 y6@@13 y7@@5))) :qid |mapAx1:MapType8Select:6| :weight 0 ))) (forall ((val@@53 T@U) (m@@74 T@U) (x0@@52 T@U) (x1@@46 T@U) (x2@@42 T@U) (x3@@37 T@U) (x4@@31 T@U) (x5@@24 T@U) (x6@@16 T@U) (x7@@7 T@U) (y0@@43 T@U) (y1@@39 T@U) (y2@@36 T@U) (y3@@32 T@U) (y4@@27 T@U) (y5@@21 T@U) (y6@@14 T@U) (y7@@6 T@U) ) (!  (or (= x7@@7 y7@@6) (= (MapType8Select (MapType8Store m@@74 x0@@52 x1@@46 x2@@42 x3@@37 x4@@31 x5@@24 x6@@16 x7@@7 val@@53) y0@@43 y1@@39 y2@@36 y3@@32 y4@@27 y5@@21 y6@@14 y7@@6) (MapType8Select m@@74 y0@@43 y1@@39 y2@@36 y3@@32 y4@@27 y5@@21 y6@@14 y7@@6))) :qid |mapAx1:MapType8Select:7| :weight 0 ))) (forall ((val@@54 T@U) (m@@75 T@U) (x0@@53 T@U) (x1@@47 T@U) (x2@@43 T@U) (x3@@38 T@U) (x4@@32 T@U) (x5@@25 T@U) (x6@@17 T@U) (x7@@8 T@U) (y0@@44 T@U) (y1@@40 T@U) (y2@@37 T@U) (y3@@33 T@U) (y4@@28 T@U) (y5@@22 T@U) (y6@@15 T@U) (y7@@7 T@U) ) (!  (or true (= (MapType8Select (MapType8Store m@@75 x0@@53 x1@@47 x2@@43 x3@@38 x4@@32 x5@@25 x6@@17 x7@@8 val@@54) y0@@44 y1@@40 y2@@37 y3@@33 y4@@28 y5@@22 y6@@15 y7@@7) (MapType8Select m@@75 y0@@44 y1@@40 y2@@37 y3@@33 y4@@28 y5@@22 y6@@15 y7@@7))) :qid |mapAx2:MapType8Select| :weight 0 )))) (forall ((arg0@@305 T@U) (arg1@@149 T@U) (arg2@@107 T@U) (arg3@@83 T@U) (arg4@@72 T@U) (arg5@@59 T@U) (arg6@@47 T@U) (arg7@@32 T@U) (arg8@@20 T@U) (arg9@@6 T@U) (arg10@@5 T@U) (arg11@@3 T@U) (arg12@@3 T@U) (arg13@@1 T@U) (arg14@@1 T@U) (arg15 T@U) (arg16 T@U) ) (! (= (type (Apply7 arg0@@305 arg1@@149 arg2@@107 arg3@@83 arg4@@72 arg5@@59 arg6@@47 arg7@@32 arg8@@20 arg9@@6 arg10@@5 arg11@@3 arg12@@3 arg13@@1 arg14@@1 arg15 arg16)) BoxType) :qid |funType:Apply7| :pattern ( (Apply7 arg0@@305 arg1@@149 arg2@@107 arg3@@83 arg4@@72 arg5@@59 arg6@@47 arg7@@32 arg8@@20 arg9@@6 arg10@@5 arg11@@3 arg12@@3 arg13@@1 arg14@@1 arg15 arg16)) ))) (forall ((arg0@@306 T@U) (arg1@@150 T@U) (arg2@@108 T@U) ) (! (= (type (Handle7 arg0@@306 arg1@@150 arg2@@108)) HandleTypeType) :qid |funType:Handle7| :pattern ( (Handle7 arg0@@306 arg1@@150 arg2@@108)) ))))
(assert (forall ((t0@@117 T@U) (t1@@93 T@U) (t2@@74 T@U) (t3@@59 T@U) (t4@@44 T@U) (t5@@29 T@U) (t6@@14 T@U) (t7 T@U) (heap@@36 T@U) (h@@69 T@U) (r@@41 T@U) (rd@@20 T@U) (bx0@@95 T@U) (bx1@@79 T@U) (bx2@@63 T@U) (bx3@@47 T@U) (bx4@@31 T@U) (bx5@@15 T@U) (bx6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@117) TyType) (= (type t1@@93) TyType)) (= (type t2@@74) TyType)) (= (type t3@@59) TyType)) (= (type t4@@44) TyType)) (= (type t5@@29) TyType)) (= (type t6@@14) TyType)) (= (type t7) TyType)) (= (type heap@@36) (MapType0Type refType MapType1Type))) (= (type h@@69) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@41) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@20) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@95) BoxType)) (= (type bx1@@79) BoxType)) (= (type bx2@@63) BoxType)) (= (type bx3@@47) BoxType)) (= (type bx4@@31) BoxType)) (= (type bx5@@15) BoxType)) (= (type bx6) BoxType)) (= (Apply7 t0@@117 t1@@93 t2@@74 t3@@59 t4@@44 t5@@29 t6@@14 t7 heap@@36 (Handle7 h@@69 r@@41 rd@@20) bx0@@95 bx1@@79 bx2@@63 bx3@@47 bx4@@31 bx5@@15 bx6) (MapType8Select h@@69 heap@@36 bx0@@95 bx1@@79 bx2@@63 bx3@@47 bx4@@31 bx5@@15 bx6))) :qid |unknown.0:0| :skolemid |1043| :pattern ( (Apply7 t0@@117 t1@@93 t2@@74 t3@@59 t4@@44 t5@@29 t6@@14 t7 heap@@36 (Handle7 h@@69 r@@41 rd@@20) bx0@@95 bx1@@79 bx2@@63 bx3@@47 bx4@@31 bx5@@15 bx6)) )))
(assert (forall ((t0@@118 T@U) (t1@@94 T@U) (t2@@75 T@U) (t3@@60 T@U) (t4@@45 T@U) (t5@@30 T@U) (t6@@15 T@U) (t7@@0 T@U) (heap@@37 T@U) (h@@70 T@U) (r@@42 T@U) (rd@@21 T@U) (bx0@@96 T@U) (bx1@@80 T@U) (bx2@@64 T@U) (bx3@@48 T@U) (bx4@@32 T@U) (bx5@@16 T@U) (bx6@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@118) TyType) (= (type t1@@94) TyType)) (= (type t2@@75) TyType)) (= (type t3@@60) TyType)) (= (type t4@@45) TyType)) (= (type t5@@30) TyType)) (= (type t6@@15) TyType)) (= (type t7@@0) TyType)) (= (type heap@@37) (MapType0Type refType MapType1Type))) (= (type h@@70) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@42) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@21) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@96) BoxType)) (= (type bx1@@80) BoxType)) (= (type bx2@@64) BoxType)) (= (type bx3@@48) BoxType)) (= (type bx4@@32) BoxType)) (= (type bx5@@16) BoxType)) (= (type bx6@@0) BoxType)) (U_2_bool (MapType8Select r@@42 heap@@37 bx0@@96 bx1@@80 bx2@@64 bx3@@48 bx4@@32 bx5@@16 bx6@@0))) (Requires7 t0@@118 t1@@94 t2@@75 t3@@60 t4@@45 t5@@30 t6@@15 t7@@0 heap@@37 (Handle7 h@@70 r@@42 rd@@21) bx0@@96 bx1@@80 bx2@@64 bx3@@48 bx4@@32 bx5@@16 bx6@@0)) :qid |unknown.0:0| :skolemid |1044| :pattern ( (Requires7 t0@@118 t1@@94 t2@@75 t3@@60 t4@@45 t5@@30 t6@@15 t7@@0 heap@@37 (Handle7 h@@70 r@@42 rd@@21) bx0@@96 bx1@@80 bx2@@64 bx3@@48 bx4@@32 bx5@@16 bx6@@0)) )))
(assert (forall ((arg0@@307 T@U) (arg1@@151 T@U) (arg2@@109 T@U) (arg3@@84 T@U) (arg4@@73 T@U) (arg5@@60 T@U) (arg6@@48 T@U) (arg7@@33 T@U) (arg8@@21 T@U) (arg9@@7 T@U) (arg10@@6 T@U) (arg11@@4 T@U) (arg12@@4 T@U) (arg13@@2 T@U) (arg14@@2 T@U) (arg15@@0 T@U) (arg16@@0 T@U) ) (! (= (type (Reads7 arg0@@307 arg1@@151 arg2@@109 arg3@@84 arg4@@73 arg5@@60 arg6@@48 arg7@@33 arg8@@21 arg9@@7 arg10@@6 arg11@@4 arg12@@4 arg13@@2 arg14@@2 arg15@@0 arg16@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads7| :pattern ( (Reads7 arg0@@307 arg1@@151 arg2@@109 arg3@@84 arg4@@73 arg5@@60 arg6@@48 arg7@@33 arg8@@21 arg9@@7 arg10@@6 arg11@@4 arg12@@4 arg13@@2 arg14@@2 arg15@@0 arg16@@0)) )))
(assert (forall ((t0@@119 T@U) (t1@@95 T@U) (t2@@76 T@U) (t3@@61 T@U) (t4@@46 T@U) (t5@@31 T@U) (t6@@16 T@U) (t7@@1 T@U) (heap@@38 T@U) (h@@71 T@U) (r@@43 T@U) (rd@@22 T@U) (bx0@@97 T@U) (bx1@@81 T@U) (bx2@@65 T@U) (bx3@@49 T@U) (bx4@@33 T@U) (bx5@@17 T@U) (bx6@@1 T@U) (bx@@97 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@119) TyType) (= (type t1@@95) TyType)) (= (type t2@@76) TyType)) (= (type t3@@61) TyType)) (= (type t4@@46) TyType)) (= (type t5@@31) TyType)) (= (type t6@@16) TyType)) (= (type t7@@1) TyType)) (= (type heap@@38) (MapType0Type refType MapType1Type))) (= (type h@@71) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@43) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@22) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@97) BoxType)) (= (type bx1@@81) BoxType)) (= (type bx2@@65) BoxType)) (= (type bx3@@49) BoxType)) (= (type bx4@@33) BoxType)) (= (type bx5@@17) BoxType)) (= (type bx6@@1) BoxType)) (= (type bx@@97) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads7 t0@@119 t1@@95 t2@@76 t3@@61 t4@@46 t5@@31 t6@@16 t7@@1 heap@@38 (Handle7 h@@71 r@@43 rd@@22) bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@97)) (U_2_bool (MapType0Select (MapType8Select rd@@22 heap@@38 bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@97))) (=> (U_2_bool (MapType0Select (MapType8Select rd@@22 heap@@38 bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@97)) (U_2_bool (MapType0Select (Reads7 t0@@119 t1@@95 t2@@76 t3@@61 t4@@46 t5@@31 t6@@16 t7@@1 heap@@38 (Handle7 h@@71 r@@43 rd@@22) bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@97))))) :qid |unknown.0:0| :skolemid |1045| :pattern ( (MapType0Select (Reads7 t0@@119 t1@@95 t2@@76 t3@@61 t4@@46 t5@@31 t6@@16 t7@@1 heap@@38 (Handle7 h@@71 r@@43 rd@@22) bx0@@97 bx1@@81 bx2@@65 bx3@@49 bx4@@33 bx5@@17 bx6@@1) bx@@97)) )))
(assert (forall ((t0@@120 T@U) (t1@@96 T@U) (t2@@77 T@U) (t3@@62 T@U) (t4@@47 T@U) (t5@@32 T@U) (t6@@17 T@U) (t7@@2 T@U) (h0@@42 T@U) (h1@@42 T@U) (f@@89 T@U) (bx0@@98 T@U) (bx1@@82 T@U) (bx2@@66 T@U) (bx3@@50 T@U) (bx4@@34 T@U) (bx5@@18 T@U) (bx6@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@120) TyType) (= (type t1@@96) TyType)) (= (type t2@@77) TyType)) (= (type t3@@62) TyType)) (= (type t4@@47) TyType)) (= (type t5@@32) TyType)) (= (type t6@@17) TyType)) (= (type t7@@2) TyType)) (= (type h0@@42) (MapType0Type refType MapType1Type))) (= (type h1@@42) (MapType0Type refType MapType1Type))) (= (type f@@89) HandleTypeType)) (= (type bx0@@98) BoxType)) (= (type bx1@@82) BoxType)) (= (type bx2@@66) BoxType)) (= (type bx3@@50) BoxType)) (= (type bx4@@34) BoxType)) (= (type bx5@@18) BoxType)) (= (type bx6@@2) BoxType)) (and (and (and ($HeapSucc h0@@42 h1@@42) (and ($IsGoodHeap h0@@42) ($IsGoodHeap h1@@42))) (and (and (and (and (and (and (and ($IsBox bx0@@98 t0@@120) ($IsBox bx1@@82 t1@@96)) ($IsBox bx2@@66 t2@@77)) ($IsBox bx3@@50 t3@@62)) ($IsBox bx4@@34 t4@@47)) ($IsBox bx5@@18 t5@@32)) ($IsBox bx6@@2 t6@@17)) ($Is f@@89 (Tclass._System.___hFunc7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2)))) (forall ((o@@96 T@U) (fld@@41 T@U) ) (! (let ((a@@124 (FieldTypeInv0 (type fld@@41)))) (=> (and (and (= (type o@@96) refType) (= (type fld@@41) (FieldType a@@124))) (and (not (= o@@96 null)) (U_2_bool (MapType0Select (Reads7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2 h0@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34 bx5@@18 bx6@@2) ($Box o@@96))))) (= (MapType1Select (MapType0Select h0@@42 o@@96) fld@@41) (MapType1Select (MapType0Select h1@@42 o@@96) fld@@41)))) :qid |unknown.0:0| :skolemid |1046| :no-pattern (type o@@96) :no-pattern (type fld@@41) :no-pattern (U_2_int o@@96) :no-pattern (U_2_bool o@@96) :no-pattern (U_2_int fld@@41) :no-pattern (U_2_bool fld@@41) )))) (= (Reads7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2 h0@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34 bx5@@18 bx6@@2) (Reads7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2 h1@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34 bx5@@18 bx6@@2))) :qid |unknown.0:0| :skolemid |1047| :pattern ( ($HeapSucc h0@@42 h1@@42) (Reads7 t0@@120 t1@@96 t2@@77 t3@@62 t4@@47 t5@@32 t6@@17 t7@@2 h1@@42 f@@89 bx0@@98 bx1@@82 bx2@@66 bx3@@50 bx4@@34 bx5@@18 bx6@@2)) )))
(assert (forall ((t0@@121 T@U) (t1@@97 T@U) (t2@@78 T@U) (t3@@63 T@U) (t4@@48 T@U) (t5@@33 T@U) (t6@@18 T@U) (t7@@3 T@U) (h0@@43 T@U) (h1@@43 T@U) (f@@90 T@U) (bx0@@99 T@U) (bx1@@83 T@U) (bx2@@67 T@U) (bx3@@51 T@U) (bx4@@35 T@U) (bx5@@19 T@U) (bx6@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@121) TyType) (= (type t1@@97) TyType)) (= (type t2@@78) TyType)) (= (type t3@@63) TyType)) (= (type t4@@48) TyType)) (= (type t5@@33) TyType)) (= (type t6@@18) TyType)) (= (type t7@@3) TyType)) (= (type h0@@43) (MapType0Type refType MapType1Type))) (= (type h1@@43) (MapType0Type refType MapType1Type))) (= (type f@@90) HandleTypeType)) (= (type bx0@@99) BoxType)) (= (type bx1@@83) BoxType)) (= (type bx2@@67) BoxType)) (= (type bx3@@51) BoxType)) (= (type bx4@@35) BoxType)) (= (type bx5@@19) BoxType)) (= (type bx6@@3) BoxType)) (and (and (and ($HeapSucc h0@@43 h1@@43) (and ($IsGoodHeap h0@@43) ($IsGoodHeap h1@@43))) (and (and (and (and (and (and (and ($IsBox bx0@@99 t0@@121) ($IsBox bx1@@83 t1@@97)) ($IsBox bx2@@67 t2@@78)) ($IsBox bx3@@51 t3@@63)) ($IsBox bx4@@35 t4@@48)) ($IsBox bx5@@19 t5@@33)) ($IsBox bx6@@3 t6@@18)) ($Is f@@90 (Tclass._System.___hFunc7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3)))) (forall ((o@@97 T@U) (fld@@42 T@U) ) (! (let ((a@@125 (FieldTypeInv0 (type fld@@42)))) (=> (and (and (= (type o@@97) refType) (= (type fld@@42) (FieldType a@@125))) (and (not (= o@@97 null)) (U_2_bool (MapType0Select (Reads7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3 h1@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35 bx5@@19 bx6@@3) ($Box o@@97))))) (= (MapType1Select (MapType0Select h0@@43 o@@97) fld@@42) (MapType1Select (MapType0Select h1@@43 o@@97) fld@@42)))) :qid |unknown.0:0| :skolemid |1048| :no-pattern (type o@@97) :no-pattern (type fld@@42) :no-pattern (U_2_int o@@97) :no-pattern (U_2_bool o@@97) :no-pattern (U_2_int fld@@42) :no-pattern (U_2_bool fld@@42) )))) (= (Reads7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3 h0@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35 bx5@@19 bx6@@3) (Reads7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3 h1@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35 bx5@@19 bx6@@3))) :qid |unknown.0:0| :skolemid |1049| :pattern ( ($HeapSucc h0@@43 h1@@43) (Reads7 t0@@121 t1@@97 t2@@78 t3@@63 t4@@48 t5@@33 t6@@18 t7@@3 h1@@43 f@@90 bx0@@99 bx1@@83 bx2@@67 bx3@@51 bx4@@35 bx5@@19 bx6@@3)) )))
(assert (forall ((t0@@122 T@U) (t1@@98 T@U) (t2@@79 T@U) (t3@@64 T@U) (t4@@49 T@U) (t5@@34 T@U) (t6@@19 T@U) (t7@@4 T@U) (h0@@44 T@U) (h1@@44 T@U) (f@@91 T@U) (bx0@@100 T@U) (bx1@@84 T@U) (bx2@@68 T@U) (bx3@@52 T@U) (bx4@@36 T@U) (bx5@@20 T@U) (bx6@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@122) TyType) (= (type t1@@98) TyType)) (= (type t2@@79) TyType)) (= (type t3@@64) TyType)) (= (type t4@@49) TyType)) (= (type t5@@34) TyType)) (= (type t6@@19) TyType)) (= (type t7@@4) TyType)) (= (type h0@@44) (MapType0Type refType MapType1Type))) (= (type h1@@44) (MapType0Type refType MapType1Type))) (= (type f@@91) HandleTypeType)) (= (type bx0@@100) BoxType)) (= (type bx1@@84) BoxType)) (= (type bx2@@68) BoxType)) (= (type bx3@@52) BoxType)) (= (type bx4@@36) BoxType)) (= (type bx5@@20) BoxType)) (= (type bx6@@4) BoxType)) (and (and (and ($HeapSucc h0@@44 h1@@44) (and ($IsGoodHeap h0@@44) ($IsGoodHeap h1@@44))) (and (and (and (and (and (and (and ($IsBox bx0@@100 t0@@122) ($IsBox bx1@@84 t1@@98)) ($IsBox bx2@@68 t2@@79)) ($IsBox bx3@@52 t3@@64)) ($IsBox bx4@@36 t4@@49)) ($IsBox bx5@@20 t5@@34)) ($IsBox bx6@@4 t6@@19)) ($Is f@@91 (Tclass._System.___hFunc7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4)))) (forall ((o@@98 T@U) (fld@@43 T@U) ) (! (let ((a@@126 (FieldTypeInv0 (type fld@@43)))) (=> (and (and (= (type o@@98) refType) (= (type fld@@43) (FieldType a@@126))) (and (not (= o@@98 null)) (U_2_bool (MapType0Select (Reads7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h0@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4) ($Box o@@98))))) (= (MapType1Select (MapType0Select h0@@44 o@@98) fld@@43) (MapType1Select (MapType0Select h1@@44 o@@98) fld@@43)))) :qid |unknown.0:0| :skolemid |1050| :no-pattern (type o@@98) :no-pattern (type fld@@43) :no-pattern (U_2_int o@@98) :no-pattern (U_2_bool o@@98) :no-pattern (U_2_int fld@@43) :no-pattern (U_2_bool fld@@43) )))) (and (=> (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h0@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4) (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h1@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4)) (=> (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h1@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4) (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h0@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4)))) :qid |unknown.0:0| :skolemid |1051| :pattern ( ($HeapSucc h0@@44 h1@@44) (Requires7 t0@@122 t1@@98 t2@@79 t3@@64 t4@@49 t5@@34 t6@@19 t7@@4 h1@@44 f@@91 bx0@@100 bx1@@84 bx2@@68 bx3@@52 bx4@@36 bx5@@20 bx6@@4)) )))
(assert (forall ((t0@@123 T@U) (t1@@99 T@U) (t2@@80 T@U) (t3@@65 T@U) (t4@@50 T@U) (t5@@35 T@U) (t6@@20 T@U) (t7@@5 T@U) (h0@@45 T@U) (h1@@45 T@U) (f@@92 T@U) (bx0@@101 T@U) (bx1@@85 T@U) (bx2@@69 T@U) (bx3@@53 T@U) (bx4@@37 T@U) (bx5@@21 T@U) (bx6@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@123) TyType) (= (type t1@@99) TyType)) (= (type t2@@80) TyType)) (= (type t3@@65) TyType)) (= (type t4@@50) TyType)) (= (type t5@@35) TyType)) (= (type t6@@20) TyType)) (= (type t7@@5) TyType)) (= (type h0@@45) (MapType0Type refType MapType1Type))) (= (type h1@@45) (MapType0Type refType MapType1Type))) (= (type f@@92) HandleTypeType)) (= (type bx0@@101) BoxType)) (= (type bx1@@85) BoxType)) (= (type bx2@@69) BoxType)) (= (type bx3@@53) BoxType)) (= (type bx4@@37) BoxType)) (= (type bx5@@21) BoxType)) (= (type bx6@@5) BoxType)) (and (and (and ($HeapSucc h0@@45 h1@@45) (and ($IsGoodHeap h0@@45) ($IsGoodHeap h1@@45))) (and (and (and (and (and (and (and ($IsBox bx0@@101 t0@@123) ($IsBox bx1@@85 t1@@99)) ($IsBox bx2@@69 t2@@80)) ($IsBox bx3@@53 t3@@65)) ($IsBox bx4@@37 t4@@50)) ($IsBox bx5@@21 t5@@35)) ($IsBox bx6@@5 t6@@20)) ($Is f@@92 (Tclass._System.___hFunc7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5)))) (forall ((o@@99 T@U) (fld@@44 T@U) ) (! (let ((a@@127 (FieldTypeInv0 (type fld@@44)))) (=> (and (and (= (type o@@99) refType) (= (type fld@@44) (FieldType a@@127))) (and (not (= o@@99 null)) (U_2_bool (MapType0Select (Reads7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5) ($Box o@@99))))) (= (MapType1Select (MapType0Select h0@@45 o@@99) fld@@44) (MapType1Select (MapType0Select h1@@45 o@@99) fld@@44)))) :qid |unknown.0:0| :skolemid |1052| :no-pattern (type o@@99) :no-pattern (type fld@@44) :no-pattern (U_2_int o@@99) :no-pattern (U_2_bool o@@99) :no-pattern (U_2_int fld@@44) :no-pattern (U_2_bool fld@@44) )))) (and (=> (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h0@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5) (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5)) (=> (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5) (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h0@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5)))) :qid |unknown.0:0| :skolemid |1053| :pattern ( ($HeapSucc h0@@45 h1@@45) (Requires7 t0@@123 t1@@99 t2@@80 t3@@65 t4@@50 t5@@35 t6@@20 t7@@5 h1@@45 f@@92 bx0@@101 bx1@@85 bx2@@69 bx3@@53 bx4@@37 bx5@@21 bx6@@5)) )))
(assert (forall ((t0@@124 T@U) (t1@@100 T@U) (t2@@81 T@U) (t3@@66 T@U) (t4@@51 T@U) (t5@@36 T@U) (t6@@21 T@U) (t7@@6 T@U) (h0@@46 T@U) (h1@@46 T@U) (f@@93 T@U) (bx0@@102 T@U) (bx1@@86 T@U) (bx2@@70 T@U) (bx3@@54 T@U) (bx4@@38 T@U) (bx5@@22 T@U) (bx6@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@124) TyType) (= (type t1@@100) TyType)) (= (type t2@@81) TyType)) (= (type t3@@66) TyType)) (= (type t4@@51) TyType)) (= (type t5@@36) TyType)) (= (type t6@@21) TyType)) (= (type t7@@6) TyType)) (= (type h0@@46) (MapType0Type refType MapType1Type))) (= (type h1@@46) (MapType0Type refType MapType1Type))) (= (type f@@93) HandleTypeType)) (= (type bx0@@102) BoxType)) (= (type bx1@@86) BoxType)) (= (type bx2@@70) BoxType)) (= (type bx3@@54) BoxType)) (= (type bx4@@38) BoxType)) (= (type bx5@@22) BoxType)) (= (type bx6@@6) BoxType)) (and (and (and ($HeapSucc h0@@46 h1@@46) (and ($IsGoodHeap h0@@46) ($IsGoodHeap h1@@46))) (and (and (and (and (and (and (and ($IsBox bx0@@102 t0@@124) ($IsBox bx1@@86 t1@@100)) ($IsBox bx2@@70 t2@@81)) ($IsBox bx3@@54 t3@@66)) ($IsBox bx4@@38 t4@@51)) ($IsBox bx5@@22 t5@@36)) ($IsBox bx6@@6 t6@@21)) ($Is f@@93 (Tclass._System.___hFunc7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6)))) (forall ((o@@100 T@U) (fld@@45 T@U) ) (! (let ((a@@128 (FieldTypeInv0 (type fld@@45)))) (=> (and (and (= (type o@@100) refType) (= (type fld@@45) (FieldType a@@128))) (and (not (= o@@100 null)) (U_2_bool (MapType0Select (Reads7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6 h0@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38 bx5@@22 bx6@@6) ($Box o@@100))))) (= (MapType1Select (MapType0Select h0@@46 o@@100) fld@@45) (MapType1Select (MapType0Select h1@@46 o@@100) fld@@45)))) :qid |unknown.0:0| :skolemid |1054| :no-pattern (type o@@100) :no-pattern (type fld@@45) :no-pattern (U_2_int o@@100) :no-pattern (U_2_bool o@@100) :no-pattern (U_2_int fld@@45) :no-pattern (U_2_bool fld@@45) )))) (= (Apply7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6 h0@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38 bx5@@22 bx6@@6) (Apply7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6 h1@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38 bx5@@22 bx6@@6))) :qid |unknown.0:0| :skolemid |1055| :pattern ( ($HeapSucc h0@@46 h1@@46) (Apply7 t0@@124 t1@@100 t2@@81 t3@@66 t4@@51 t5@@36 t6@@21 t7@@6 h1@@46 f@@93 bx0@@102 bx1@@86 bx2@@70 bx3@@54 bx4@@38 bx5@@22 bx6@@6)) )))
(assert (forall ((t0@@125 T@U) (t1@@101 T@U) (t2@@82 T@U) (t3@@67 T@U) (t4@@52 T@U) (t5@@37 T@U) (t6@@22 T@U) (t7@@7 T@U) (h0@@47 T@U) (h1@@47 T@U) (f@@94 T@U) (bx0@@103 T@U) (bx1@@87 T@U) (bx2@@71 T@U) (bx3@@55 T@U) (bx4@@39 T@U) (bx5@@23 T@U) (bx6@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@125) TyType) (= (type t1@@101) TyType)) (= (type t2@@82) TyType)) (= (type t3@@67) TyType)) (= (type t4@@52) TyType)) (= (type t5@@37) TyType)) (= (type t6@@22) TyType)) (= (type t7@@7) TyType)) (= (type h0@@47) (MapType0Type refType MapType1Type))) (= (type h1@@47) (MapType0Type refType MapType1Type))) (= (type f@@94) HandleTypeType)) (= (type bx0@@103) BoxType)) (= (type bx1@@87) BoxType)) (= (type bx2@@71) BoxType)) (= (type bx3@@55) BoxType)) (= (type bx4@@39) BoxType)) (= (type bx5@@23) BoxType)) (= (type bx6@@7) BoxType)) (and (and (and ($HeapSucc h0@@47 h1@@47) (and ($IsGoodHeap h0@@47) ($IsGoodHeap h1@@47))) (and (and (and (and (and (and (and ($IsBox bx0@@103 t0@@125) ($IsBox bx1@@87 t1@@101)) ($IsBox bx2@@71 t2@@82)) ($IsBox bx3@@55 t3@@67)) ($IsBox bx4@@39 t4@@52)) ($IsBox bx5@@23 t5@@37)) ($IsBox bx6@@7 t6@@22)) ($Is f@@94 (Tclass._System.___hFunc7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7)))) (forall ((o@@101 T@U) (fld@@46 T@U) ) (! (let ((a@@129 (FieldTypeInv0 (type fld@@46)))) (=> (and (and (= (type o@@101) refType) (= (type fld@@46) (FieldType a@@129))) (and (not (= o@@101 null)) (U_2_bool (MapType0Select (Reads7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7 h1@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39 bx5@@23 bx6@@7) ($Box o@@101))))) (= (MapType1Select (MapType0Select h0@@47 o@@101) fld@@46) (MapType1Select (MapType0Select h1@@47 o@@101) fld@@46)))) :qid |unknown.0:0| :skolemid |1056| :no-pattern (type o@@101) :no-pattern (type fld@@46) :no-pattern (U_2_int o@@101) :no-pattern (U_2_bool o@@101) :no-pattern (U_2_int fld@@46) :no-pattern (U_2_bool fld@@46) )))) (= (Apply7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7 h0@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39 bx5@@23 bx6@@7) (Apply7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7 h1@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39 bx5@@23 bx6@@7))) :qid |unknown.0:0| :skolemid |1057| :pattern ( ($HeapSucc h0@@47 h1@@47) (Apply7 t0@@125 t1@@101 t2@@82 t3@@67 t4@@52 t5@@37 t6@@22 t7@@7 h1@@47 f@@94 bx0@@103 bx1@@87 bx2@@71 bx3@@55 bx4@@39 bx5@@23 bx6@@7)) )))
(assert (forall ((t0@@126 T@U) (t1@@102 T@U) (t2@@83 T@U) (t3@@68 T@U) (t4@@53 T@U) (t5@@38 T@U) (t6@@23 T@U) (t7@@8 T@U) (heap@@39 T@U) (f@@95 T@U) (bx0@@104 T@U) (bx1@@88 T@U) (bx2@@72 T@U) (bx3@@56 T@U) (bx4@@40 T@U) (bx5@@24 T@U) (bx6@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@126) TyType) (= (type t1@@102) TyType)) (= (type t2@@83) TyType)) (= (type t3@@68) TyType)) (= (type t4@@53) TyType)) (= (type t5@@38) TyType)) (= (type t6@@23) TyType)) (= (type t7@@8) TyType)) (= (type heap@@39) (MapType0Type refType MapType1Type))) (= (type f@@95) HandleTypeType)) (= (type bx0@@104) BoxType)) (= (type bx1@@88) BoxType)) (= (type bx2@@72) BoxType)) (= (type bx3@@56) BoxType)) (= (type bx4@@40) BoxType)) (= (type bx5@@24) BoxType)) (= (type bx6@@8) BoxType)) (and ($IsGoodHeap heap@@39) (and (and (and (and (and (and (and ($IsBox bx0@@104 t0@@126) ($IsBox bx1@@88 t1@@102)) ($IsBox bx2@@72 t2@@83)) ($IsBox bx3@@56 t3@@68)) ($IsBox bx4@@40 t4@@53)) ($IsBox bx5@@24 t5@@38)) ($IsBox bx6@@8 t6@@23)) ($Is f@@95 (Tclass._System.___hFunc7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8))))) (and (=> (|Set#Equal| (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 $OneHeap f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 heap@@39 f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 heap@@39 f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 $OneHeap f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1058| :pattern ( (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 $OneHeap f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8) ($IsGoodHeap heap@@39)) :pattern ( (Reads7 t0@@126 t1@@102 t2@@83 t3@@68 t4@@53 t5@@38 t6@@23 t7@@8 heap@@39 f@@95 bx0@@104 bx1@@88 bx2@@72 bx3@@56 bx4@@40 bx5@@24 bx6@@8)) )))
(assert (forall ((t0@@127 T@U) (t1@@103 T@U) (t2@@84 T@U) (t3@@69 T@U) (t4@@54 T@U) (t5@@39 T@U) (t6@@24 T@U) (t7@@9 T@U) (heap@@40 T@U) (f@@96 T@U) (bx0@@105 T@U) (bx1@@89 T@U) (bx2@@73 T@U) (bx3@@57 T@U) (bx4@@41 T@U) (bx5@@25 T@U) (bx6@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@127) TyType) (= (type t1@@103) TyType)) (= (type t2@@84) TyType)) (= (type t3@@69) TyType)) (= (type t4@@54) TyType)) (= (type t5@@39) TyType)) (= (type t6@@24) TyType)) (= (type t7@@9) TyType)) (= (type heap@@40) (MapType0Type refType MapType1Type))) (= (type f@@96) HandleTypeType)) (= (type bx0@@105) BoxType)) (= (type bx1@@89) BoxType)) (= (type bx2@@73) BoxType)) (= (type bx3@@57) BoxType)) (= (type bx4@@41) BoxType)) (= (type bx5@@25) BoxType)) (= (type bx6@@9) BoxType)) (and (and ($IsGoodHeap heap@@40) (and (and (and (and (and (and (and ($IsBox bx0@@105 t0@@127) ($IsBox bx1@@89 t1@@103)) ($IsBox bx2@@73 t2@@84)) ($IsBox bx3@@57 t3@@69)) ($IsBox bx4@@41 t4@@54)) ($IsBox bx5@@25 t5@@39)) ($IsBox bx6@@9 t6@@24)) ($Is f@@96 (Tclass._System.___hFunc7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9)))) (|Set#Equal| (Reads7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9) (|Set#Empty| BoxType)))) (and (=> (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9) (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 heap@@40 f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9)) (=> (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 heap@@40 f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9) (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9)))) :qid |unknown.0:0| :skolemid |1059| :pattern ( (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 $OneHeap f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9) ($IsGoodHeap heap@@40)) :pattern ( (Requires7 t0@@127 t1@@103 t2@@84 t3@@69 t4@@54 t5@@39 t6@@24 t7@@9 heap@@40 f@@96 bx0@@105 bx1@@89 bx2@@73 bx3@@57 bx4@@41 bx5@@25 bx6@@9)) )))
(assert (forall ((f@@97 T@U) (t0@@128 T@U) (t1@@104 T@U) (t2@@85 T@U) (t3@@70 T@U) (t4@@55 T@U) (t5@@40 T@U) (t6@@25 T@U) (t7@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@97) HandleTypeType) (= (type t0@@128) TyType)) (= (type t1@@104) TyType)) (= (type t2@@85) TyType)) (= (type t3@@70) TyType)) (= (type t4@@55) TyType)) (= (type t5@@40) TyType)) (= (type t6@@25) TyType)) (= (type t7@@10) TyType)) (and (=> ($Is f@@97 (Tclass._System.___hFunc7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10)) (forall ((h@@72 T@U) (bx0@@106 T@U) (bx1@@90 T@U) (bx2@@74 T@U) (bx3@@58 T@U) (bx4@@42 T@U) (bx5@@26 T@U) (bx6@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type h@@72) (MapType0Type refType MapType1Type)) (= (type bx0@@106) BoxType)) (= (type bx1@@90) BoxType)) (= (type bx2@@74) BoxType)) (= (type bx3@@58) BoxType)) (= (type bx4@@42) BoxType)) (= (type bx5@@26) BoxType)) (= (type bx6@@10) BoxType)) (and (and ($IsGoodHeap h@@72) (and (and (and (and (and (and ($IsBox bx0@@106 t0@@128) ($IsBox bx1@@90 t1@@104)) ($IsBox bx2@@74 t2@@85)) ($IsBox bx3@@58 t3@@70)) ($IsBox bx4@@42 t4@@55)) ($IsBox bx5@@26 t5@@40)) ($IsBox bx6@@10 t6@@25))) (Requires7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@72 f@@97 bx0@@106 bx1@@90 bx2@@74 bx3@@58 bx4@@42 bx5@@26 bx6@@10))) ($IsBox (Apply7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@72 f@@97 bx0@@106 bx1@@90 bx2@@74 bx3@@58 bx4@@42 bx5@@26 bx6@@10) t7@@10)) :qid |DafnyPre.521:12| :skolemid |1060| :pattern ( (Apply7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@72 f@@97 bx0@@106 bx1@@90 bx2@@74 bx3@@58 bx4@@42 bx5@@26 bx6@@10)) ))) (=> (forall ((h@@73 T@U) (bx0@@107 T@U) (bx1@@91 T@U) (bx2@@75 T@U) (bx3@@59 T@U) (bx4@@43 T@U) (bx5@@27 T@U) (bx6@@11 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type h@@73) (MapType0Type refType MapType1Type)) (= (type bx0@@107) BoxType)) (= (type bx1@@91) BoxType)) (= (type bx2@@75) BoxType)) (= (type bx3@@59) BoxType)) (= (type bx4@@43) BoxType)) (= (type bx5@@27) BoxType)) (= (type bx6@@11) BoxType)) (and (and ($IsGoodHeap h@@73) (and (and (and (and (and (and ($IsBox bx0@@107 t0@@128) ($IsBox bx1@@91 t1@@104)) ($IsBox bx2@@75 t2@@85)) ($IsBox bx3@@59 t3@@70)) ($IsBox bx4@@43 t4@@55)) ($IsBox bx5@@27 t5@@40)) ($IsBox bx6@@11 t6@@25))) (Requires7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@73 f@@97 bx0@@107 bx1@@91 bx2@@75 bx3@@59 bx4@@43 bx5@@27 bx6@@11))) ($IsBox (Apply7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@73 f@@97 bx0@@107 bx1@@91 bx2@@75 bx3@@59 bx4@@43 bx5@@27 bx6@@11) t7@@10)) :qid |DafnyPre.521:12| :skolemid |1060| :pattern ( (Apply7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10 h@@73 f@@97 bx0@@107 bx1@@91 bx2@@75 bx3@@59 bx4@@43 bx5@@27 bx6@@11)) )) ($Is f@@97 (Tclass._System.___hFunc7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10))))) :qid |unknown.0:0| :skolemid |1061| :pattern ( ($Is f@@97 (Tclass._System.___hFunc7 t0@@128 t1@@104 t2@@85 t3@@70 t4@@55 t5@@40 t6@@25 t7@@10))) )))
(assert (forall ((f@@98 T@U) (t0@@129 T@U) (t1@@105 T@U) (t2@@86 T@U) (t3@@71 T@U) (t4@@56 T@U) (t5@@41 T@U) (t6@@26 T@U) (t7@@11 T@U) (u0@@6 T@U) (u1@@5 T@U) (u2@@4 T@U) (u3@@3 T@U) (u4@@2 T@U) (u5@@1 T@U) (u6@@0 T@U) (u7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@98) HandleTypeType) (= (type t0@@129) TyType)) (= (type t1@@105) TyType)) (= (type t2@@86) TyType)) (= (type t3@@71) TyType)) (= (type t4@@56) TyType)) (= (type t5@@41) TyType)) (= (type t6@@26) TyType)) (= (type t7@@11) TyType)) (= (type u0@@6) TyType)) (= (type u1@@5) TyType)) (= (type u2@@4) TyType)) (= (type u3@@3) TyType)) (= (type u4@@2) TyType)) (= (type u5@@1) TyType)) (= (type u6@@0) TyType)) (= (type u7) TyType)) (and (and (and (and (and (and (and (and ($Is f@@98 (Tclass._System.___hFunc7 t0@@129 t1@@105 t2@@86 t3@@71 t4@@56 t5@@41 t6@@26 t7@@11)) (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 u0@@6)) ($IsBox bx@@98 t0@@129)) :qid |unknown.0:0| :skolemid |1062| :pattern ( ($IsBox bx@@98 u0@@6)) :pattern ( ($IsBox bx@@98 t0@@129)) ))) (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 u1@@5)) ($IsBox bx@@99 t1@@105)) :qid |unknown.0:0| :skolemid |1063| :pattern ( ($IsBox bx@@99 u1@@5)) :pattern ( ($IsBox bx@@99 t1@@105)) ))) (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 u2@@4)) ($IsBox bx@@100 t2@@86)) :qid |unknown.0:0| :skolemid |1064| :pattern ( ($IsBox bx@@100 u2@@4)) :pattern ( ($IsBox bx@@100 t2@@86)) ))) (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 u3@@3)) ($IsBox bx@@101 t3@@71)) :qid |unknown.0:0| :skolemid |1065| :pattern ( ($IsBox bx@@101 u3@@3)) :pattern ( ($IsBox bx@@101 t3@@71)) ))) (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 u4@@2)) ($IsBox bx@@102 t4@@56)) :qid |unknown.0:0| :skolemid |1066| :pattern ( ($IsBox bx@@102 u4@@2)) :pattern ( ($IsBox bx@@102 t4@@56)) ))) (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 u5@@1)) ($IsBox bx@@103 t5@@41)) :qid |unknown.0:0| :skolemid |1067| :pattern ( ($IsBox bx@@103 u5@@1)) :pattern ( ($IsBox bx@@103 t5@@41)) ))) (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 u6@@0)) ($IsBox bx@@104 t6@@26)) :qid |unknown.0:0| :skolemid |1068| :pattern ( ($IsBox bx@@104 u6@@0)) :pattern ( ($IsBox bx@@104 t6@@26)) ))) (forall ((bx@@105 T@U) ) (!  (=> (and (= (type bx@@105) BoxType) ($IsBox bx@@105 t7@@11)) ($IsBox bx@@105 u7)) :qid |unknown.0:0| :skolemid |1069| :pattern ( ($IsBox bx@@105 t7@@11)) :pattern ( ($IsBox bx@@105 u7)) )))) ($Is f@@98 (Tclass._System.___hFunc7 u0@@6 u1@@5 u2@@4 u3@@3 u4@@2 u5@@1 u6@@0 u7))) :qid |unknown.0:0| :skolemid |1070| :pattern ( ($Is f@@98 (Tclass._System.___hFunc7 t0@@129 t1@@105 t2@@86 t3@@71 t4@@56 t5@@41 t6@@26 t7@@11)) ($Is f@@98 (Tclass._System.___hFunc7 u0@@6 u1@@5 u2@@4 u3@@3 u4@@2 u5@@1 u6@@0 u7))) )))
(assert (forall ((f@@99 T@U) (t0@@130 T@U) (t1@@106 T@U) (t2@@87 T@U) (t3@@72 T@U) (t4@@57 T@U) (t5@@42 T@U) (t6@@27 T@U) (t7@@12 T@U) (h@@74 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type f@@99) HandleTypeType) (= (type t0@@130) TyType)) (= (type t1@@106) TyType)) (= (type t2@@87) TyType)) (= (type t3@@72) TyType)) (= (type t4@@57) TyType)) (= (type t5@@42) TyType)) (= (type t6@@27) TyType)) (= (type t7@@12) TyType)) (= (type h@@74) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@74)) (and (=> ($IsAlloc f@@99 (Tclass._System.___hFunc7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12) h@@74) (forall ((bx0@@108 T@U) (bx1@@92 T@U) (bx2@@76 T@U) (bx3@@60 T@U) (bx4@@44 T@U) (bx5@@28 T@U) (bx6@@12 T@U) ) (!  (=> (and (and (and (and (and (and (= (type bx0@@108) BoxType) (= (type bx1@@92) BoxType)) (= (type bx2@@76) BoxType)) (= (type bx3@@60) BoxType)) (= (type bx4@@44) BoxType)) (= (type bx5@@28) BoxType)) (= (type bx6@@12) BoxType)) (=> (and (and (and (and (and (and (and (and ($IsBox bx0@@108 t0@@130) ($IsAllocBox bx0@@108 t0@@130 h@@74)) (and ($IsBox bx1@@92 t1@@106) ($IsAllocBox bx1@@92 t1@@106 h@@74))) (and ($IsBox bx2@@76 t2@@87) ($IsAllocBox bx2@@76 t2@@87 h@@74))) (and ($IsBox bx3@@60 t3@@72) ($IsAllocBox bx3@@60 t3@@72 h@@74))) (and ($IsBox bx4@@44 t4@@57) ($IsAllocBox bx4@@44 t4@@57 h@@74))) (and ($IsBox bx5@@28 t5@@42) ($IsAllocBox bx5@@28 t5@@42 h@@74))) (and ($IsBox bx6@@12 t6@@27) ($IsAllocBox bx6@@12 t6@@27 h@@74))) (Requires7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12)) (forall ((r@@44 T@U) ) (!  (=> (= (type r@@44) refType) (=> (and (not (= r@@44 null)) (U_2_bool (MapType0Select (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12) ($Box r@@44)))) (U_2_bool (MapType1Select (MapType0Select h@@74 r@@44) alloc)))) :qid |unknown.0:0| :skolemid |1071| :pattern ( (MapType0Select (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12) ($Box r@@44))) )))) :qid |unknown.0:0| :skolemid |1072| :pattern ( (Apply7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12)) :pattern ( (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@108 bx1@@92 bx2@@76 bx3@@60 bx4@@44 bx5@@28 bx6@@12)) ))) (=> (forall ((bx0@@109 T@U) (bx1@@93 T@U) (bx2@@77 T@U) (bx3@@61 T@U) (bx4@@45 T@U) (bx5@@29 T@U) (bx6@@13 T@U) ) (!  (=> (and (and (and (and (and (and (= (type bx0@@109) BoxType) (= (type bx1@@93) BoxType)) (= (type bx2@@77) BoxType)) (= (type bx3@@61) BoxType)) (= (type bx4@@45) BoxType)) (= (type bx5@@29) BoxType)) (= (type bx6@@13) BoxType)) (=> (and (and (and (and (and (and (and (and ($IsBox bx0@@109 t0@@130) ($IsAllocBox bx0@@109 t0@@130 h@@74)) (and ($IsBox bx1@@93 t1@@106) ($IsAllocBox bx1@@93 t1@@106 h@@74))) (and ($IsBox bx2@@77 t2@@87) ($IsAllocBox bx2@@77 t2@@87 h@@74))) (and ($IsBox bx3@@61 t3@@72) ($IsAllocBox bx3@@61 t3@@72 h@@74))) (and ($IsBox bx4@@45 t4@@57) ($IsAllocBox bx4@@45 t4@@57 h@@74))) (and ($IsBox bx5@@29 t5@@42) ($IsAllocBox bx5@@29 t5@@42 h@@74))) (and ($IsBox bx6@@13 t6@@27) ($IsAllocBox bx6@@13 t6@@27 h@@74))) (Requires7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13)) (forall ((r@@45 T@U) ) (!  (=> (= (type r@@45) refType) (=> (and (not (= r@@45 null)) (U_2_bool (MapType0Select (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13) ($Box r@@45)))) (U_2_bool (MapType1Select (MapType0Select h@@74 r@@45) alloc)))) :qid |unknown.0:0| :skolemid |1071| :pattern ( (MapType0Select (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13) ($Box r@@45))) )))) :qid |unknown.0:0| :skolemid |1072| :pattern ( (Apply7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13)) :pattern ( (Reads7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12 h@@74 f@@99 bx0@@109 bx1@@93 bx2@@77 bx3@@61 bx4@@45 bx5@@29 bx6@@13)) )) ($IsAlloc f@@99 (Tclass._System.___hFunc7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12) h@@74)))) :qid |unknown.0:0| :skolemid |1073| :pattern ( ($IsAlloc f@@99 (Tclass._System.___hFunc7 t0@@130 t1@@106 t2@@87 t3@@72 t4@@57 t5@@42 t6@@27 t7@@12) h@@74)) )))
(assert (forall ((f@@100 T@U) (t0@@131 T@U) (t1@@107 T@U) (t2@@88 T@U) (t3@@73 T@U) (t4@@58 T@U) (t5@@43 T@U) (t6@@28 T@U) (t7@@13 T@U) (h@@75 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type f@@100) HandleTypeType) (= (type t0@@131) TyType)) (= (type t1@@107) TyType)) (= (type t2@@88) TyType)) (= (type t3@@73) TyType)) (= (type t4@@58) TyType)) (= (type t5@@43) TyType)) (= (type t6@@28) TyType)) (= (type t7@@13) TyType)) (= (type h@@75) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@75) ($IsAlloc f@@100 (Tclass._System.___hFunc7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13) h@@75))) (forall ((bx0@@110 T@U) (bx1@@94 T@U) (bx2@@78 T@U) (bx3@@62 T@U) (bx4@@46 T@U) (bx5@@30 T@U) (bx6@@14 T@U) ) (!  (=> (and (and (and (and (and (and (= (type bx0@@110) BoxType) (= (type bx1@@94) BoxType)) (= (type bx2@@78) BoxType)) (= (type bx3@@62) BoxType)) (= (type bx4@@46) BoxType)) (= (type bx5@@30) BoxType)) (= (type bx6@@14) BoxType)) (=> (and (and (and (and (and (and (and ($IsAllocBox bx0@@110 t0@@131 h@@75) ($IsAllocBox bx1@@94 t1@@107 h@@75)) ($IsAllocBox bx2@@78 t2@@88 h@@75)) ($IsAllocBox bx3@@62 t3@@73 h@@75)) ($IsAllocBox bx4@@46 t4@@58 h@@75)) ($IsAllocBox bx5@@30 t5@@43 h@@75)) ($IsAllocBox bx6@@14 t6@@28 h@@75)) (Requires7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13 h@@75 f@@100 bx0@@110 bx1@@94 bx2@@78 bx3@@62 bx4@@46 bx5@@30 bx6@@14)) ($IsAllocBox (Apply7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13 h@@75 f@@100 bx0@@110 bx1@@94 bx2@@78 bx3@@62 bx4@@46 bx5@@30 bx6@@14) t7@@13 h@@75))) :qid |unknown.0:0| :skolemid |1074| :pattern ( (Apply7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13 h@@75 f@@100 bx0@@110 bx1@@94 bx2@@78 bx3@@62 bx4@@46 bx5@@30 bx6@@14)) ))) :qid |unknown.0:0| :skolemid |1075| :pattern ( ($IsAlloc f@@100 (Tclass._System.___hFunc7 t0@@131 t1@@107 t2@@88 t3@@73 t4@@58 t5@@43 t6@@28 t7@@13) h@@75)) )))
(assert (forall ((arg0@@308 T@U) (arg1@@152 T@U) (arg2@@110 T@U) (arg3@@85 T@U) (arg4@@74 T@U) (arg5@@61 T@U) (arg6@@49 T@U) (arg7@@34 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7 arg0@@308 arg1@@152 arg2@@110 arg3@@85 arg4@@74 arg5@@61 arg6@@49 arg7@@34)) TyType) :qid |funType:Tclass._System.___hPartialFunc7| :pattern ( (Tclass._System.___hPartialFunc7 arg0@@308 arg1@@152 arg2@@110 arg3@@85 arg4@@74 arg5@@61 arg6@@49 arg7@@34)) )))
(assert (forall ((|#$T0@@150| T@U) (|#$T1@@134| T@U) (|#$T2@@115| T@U) (|#$T3@@93| T@U) (|#$T4@@68| T@U) (|#$T5@@40| T@U) (|#$T6@@9| T@U) (|#$R@@163| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@150|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$T2@@115|) TyType)) (= (type |#$T3@@93|) TyType)) (= (type |#$T4@@68|) TyType)) (= (type |#$T5@@40|) TyType)) (= (type |#$T6@@9|) TyType)) (= (type |#$R@@163|) TyType)) (= (Tag (Tclass._System.___hPartialFunc7 |#$T0@@150| |#$T1@@134| |#$T2@@115| |#$T3@@93| |#$T4@@68| |#$T5@@40| |#$T6@@9| |#$R@@163|)) Tagclass._System.___hPartialFunc7)) :qid |unknown.0:0| :skolemid |1076| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@150| |#$T1@@134| |#$T2@@115| |#$T3@@93| |#$T4@@68| |#$T5@@40| |#$T6@@9| |#$R@@163|)) )))
(assert (forall ((arg0@@309 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_0 arg0@@309)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_0| :pattern ( (Tclass._System.___hPartialFunc7_0 arg0@@309)) )))
(assert (forall ((|#$T0@@151| T@U) (|#$T1@@135| T@U) (|#$T2@@116| T@U) (|#$T3@@94| T@U) (|#$T4@@69| T@U) (|#$T5@@41| T@U) (|#$T6@@10| T@U) (|#$R@@164| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@151|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$T2@@116|) TyType)) (= (type |#$T3@@94|) TyType)) (= (type |#$T4@@69|) TyType)) (= (type |#$T5@@41|) TyType)) (= (type |#$T6@@10|) TyType)) (= (type |#$R@@164|) TyType)) (= (Tclass._System.___hPartialFunc7_0 (Tclass._System.___hPartialFunc7 |#$T0@@151| |#$T1@@135| |#$T2@@116| |#$T3@@94| |#$T4@@69| |#$T5@@41| |#$T6@@10| |#$R@@164|)) |#$T0@@151|)) :qid |unknown.0:0| :skolemid |1077| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@151| |#$T1@@135| |#$T2@@116| |#$T3@@94| |#$T4@@69| |#$T5@@41| |#$T6@@10| |#$R@@164|)) )))
(assert (forall ((arg0@@310 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_1 arg0@@310)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_1| :pattern ( (Tclass._System.___hPartialFunc7_1 arg0@@310)) )))
(assert (forall ((|#$T0@@152| T@U) (|#$T1@@136| T@U) (|#$T2@@117| T@U) (|#$T3@@95| T@U) (|#$T4@@70| T@U) (|#$T5@@42| T@U) (|#$T6@@11| T@U) (|#$R@@165| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@152|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$T2@@117|) TyType)) (= (type |#$T3@@95|) TyType)) (= (type |#$T4@@70|) TyType)) (= (type |#$T5@@42|) TyType)) (= (type |#$T6@@11|) TyType)) (= (type |#$R@@165|) TyType)) (= (Tclass._System.___hPartialFunc7_1 (Tclass._System.___hPartialFunc7 |#$T0@@152| |#$T1@@136| |#$T2@@117| |#$T3@@95| |#$T4@@70| |#$T5@@42| |#$T6@@11| |#$R@@165|)) |#$T1@@136|)) :qid |unknown.0:0| :skolemid |1078| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@152| |#$T1@@136| |#$T2@@117| |#$T3@@95| |#$T4@@70| |#$T5@@42| |#$T6@@11| |#$R@@165|)) )))
(assert (forall ((arg0@@311 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_2 arg0@@311)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_2| :pattern ( (Tclass._System.___hPartialFunc7_2 arg0@@311)) )))
(assert (forall ((|#$T0@@153| T@U) (|#$T1@@137| T@U) (|#$T2@@118| T@U) (|#$T3@@96| T@U) (|#$T4@@71| T@U) (|#$T5@@43| T@U) (|#$T6@@12| T@U) (|#$R@@166| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@153|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$T2@@118|) TyType)) (= (type |#$T3@@96|) TyType)) (= (type |#$T4@@71|) TyType)) (= (type |#$T5@@43|) TyType)) (= (type |#$T6@@12|) TyType)) (= (type |#$R@@166|) TyType)) (= (Tclass._System.___hPartialFunc7_2 (Tclass._System.___hPartialFunc7 |#$T0@@153| |#$T1@@137| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$T5@@43| |#$T6@@12| |#$R@@166|)) |#$T2@@118|)) :qid |unknown.0:0| :skolemid |1079| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@153| |#$T1@@137| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$T5@@43| |#$T6@@12| |#$R@@166|)) )))
(assert (forall ((arg0@@312 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_3 arg0@@312)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_3| :pattern ( (Tclass._System.___hPartialFunc7_3 arg0@@312)) )))
(assert (forall ((|#$T0@@154| T@U) (|#$T1@@138| T@U) (|#$T2@@119| T@U) (|#$T3@@97| T@U) (|#$T4@@72| T@U) (|#$T5@@44| T@U) (|#$T6@@13| T@U) (|#$R@@167| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@154|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$T2@@119|) TyType)) (= (type |#$T3@@97|) TyType)) (= (type |#$T4@@72|) TyType)) (= (type |#$T5@@44|) TyType)) (= (type |#$T6@@13|) TyType)) (= (type |#$R@@167|) TyType)) (= (Tclass._System.___hPartialFunc7_3 (Tclass._System.___hPartialFunc7 |#$T0@@154| |#$T1@@138| |#$T2@@119| |#$T3@@97| |#$T4@@72| |#$T5@@44| |#$T6@@13| |#$R@@167|)) |#$T3@@97|)) :qid |unknown.0:0| :skolemid |1080| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@154| |#$T1@@138| |#$T2@@119| |#$T3@@97| |#$T4@@72| |#$T5@@44| |#$T6@@13| |#$R@@167|)) )))
(assert (forall ((arg0@@313 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_4 arg0@@313)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_4| :pattern ( (Tclass._System.___hPartialFunc7_4 arg0@@313)) )))
(assert (forall ((|#$T0@@155| T@U) (|#$T1@@139| T@U) (|#$T2@@120| T@U) (|#$T3@@98| T@U) (|#$T4@@73| T@U) (|#$T5@@45| T@U) (|#$T6@@14| T@U) (|#$R@@168| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@155|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$T2@@120|) TyType)) (= (type |#$T3@@98|) TyType)) (= (type |#$T4@@73|) TyType)) (= (type |#$T5@@45|) TyType)) (= (type |#$T6@@14|) TyType)) (= (type |#$R@@168|) TyType)) (= (Tclass._System.___hPartialFunc7_4 (Tclass._System.___hPartialFunc7 |#$T0@@155| |#$T1@@139| |#$T2@@120| |#$T3@@98| |#$T4@@73| |#$T5@@45| |#$T6@@14| |#$R@@168|)) |#$T4@@73|)) :qid |unknown.0:0| :skolemid |1081| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@155| |#$T1@@139| |#$T2@@120| |#$T3@@98| |#$T4@@73| |#$T5@@45| |#$T6@@14| |#$R@@168|)) )))
(assert (forall ((arg0@@314 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_5 arg0@@314)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_5| :pattern ( (Tclass._System.___hPartialFunc7_5 arg0@@314)) )))
(assert (forall ((|#$T0@@156| T@U) (|#$T1@@140| T@U) (|#$T2@@121| T@U) (|#$T3@@99| T@U) (|#$T4@@74| T@U) (|#$T5@@46| T@U) (|#$T6@@15| T@U) (|#$R@@169| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@156|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$T2@@121|) TyType)) (= (type |#$T3@@99|) TyType)) (= (type |#$T4@@74|) TyType)) (= (type |#$T5@@46|) TyType)) (= (type |#$T6@@15|) TyType)) (= (type |#$R@@169|) TyType)) (= (Tclass._System.___hPartialFunc7_5 (Tclass._System.___hPartialFunc7 |#$T0@@156| |#$T1@@140| |#$T2@@121| |#$T3@@99| |#$T4@@74| |#$T5@@46| |#$T6@@15| |#$R@@169|)) |#$T5@@46|)) :qid |unknown.0:0| :skolemid |1082| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@156| |#$T1@@140| |#$T2@@121| |#$T3@@99| |#$T4@@74| |#$T5@@46| |#$T6@@15| |#$R@@169|)) )))
(assert (forall ((arg0@@315 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_6 arg0@@315)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_6| :pattern ( (Tclass._System.___hPartialFunc7_6 arg0@@315)) )))
(assert (forall ((|#$T0@@157| T@U) (|#$T1@@141| T@U) (|#$T2@@122| T@U) (|#$T3@@100| T@U) (|#$T4@@75| T@U) (|#$T5@@47| T@U) (|#$T6@@16| T@U) (|#$R@@170| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@157|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$T2@@122|) TyType)) (= (type |#$T3@@100|) TyType)) (= (type |#$T4@@75|) TyType)) (= (type |#$T5@@47|) TyType)) (= (type |#$T6@@16|) TyType)) (= (type |#$R@@170|) TyType)) (= (Tclass._System.___hPartialFunc7_6 (Tclass._System.___hPartialFunc7 |#$T0@@157| |#$T1@@141| |#$T2@@122| |#$T3@@100| |#$T4@@75| |#$T5@@47| |#$T6@@16| |#$R@@170|)) |#$T6@@16|)) :qid |unknown.0:0| :skolemid |1083| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@157| |#$T1@@141| |#$T2@@122| |#$T3@@100| |#$T4@@75| |#$T5@@47| |#$T6@@16| |#$R@@170|)) )))
(assert (forall ((arg0@@316 T@U) ) (! (= (type (Tclass._System.___hPartialFunc7_7 arg0@@316)) TyType) :qid |funType:Tclass._System.___hPartialFunc7_7| :pattern ( (Tclass._System.___hPartialFunc7_7 arg0@@316)) )))
(assert (forall ((|#$T0@@158| T@U) (|#$T1@@142| T@U) (|#$T2@@123| T@U) (|#$T3@@101| T@U) (|#$T4@@76| T@U) (|#$T5@@48| T@U) (|#$T6@@17| T@U) (|#$R@@171| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@158|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$T2@@123|) TyType)) (= (type |#$T3@@101|) TyType)) (= (type |#$T4@@76|) TyType)) (= (type |#$T5@@48|) TyType)) (= (type |#$T6@@17|) TyType)) (= (type |#$R@@171|) TyType)) (= (Tclass._System.___hPartialFunc7_7 (Tclass._System.___hPartialFunc7 |#$T0@@158| |#$T1@@142| |#$T2@@123| |#$T3@@101| |#$T4@@76| |#$T5@@48| |#$T6@@17| |#$R@@171|)) |#$R@@171|)) :qid |unknown.0:0| :skolemid |1084| :pattern ( (Tclass._System.___hPartialFunc7 |#$T0@@158| |#$T1@@142| |#$T2@@123| |#$T3@@101| |#$T4@@76| |#$T5@@48| |#$T6@@17| |#$R@@171|)) )))
(assert (forall ((|#$T0@@159| T@U) (|#$T1@@143| T@U) (|#$T2@@124| T@U) (|#$T3@@102| T@U) (|#$T4@@77| T@U) (|#$T5@@49| T@U) (|#$T6@@18| T@U) (|#$R@@172| T@U) (bx@@106 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@159|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$T2@@124|) TyType)) (= (type |#$T3@@102|) TyType)) (= (type |#$T4@@77|) TyType)) (= (type |#$T5@@49|) TyType)) (= (type |#$T6@@18|) TyType)) (= (type |#$R@@172|) TyType)) (= (type bx@@106) BoxType)) ($IsBox bx@@106 (Tclass._System.___hPartialFunc7 |#$T0@@159| |#$T1@@143| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$T5@@49| |#$T6@@18| |#$R@@172|))) (and (= ($Box ($Unbox HandleTypeType bx@@106)) bx@@106) ($Is ($Unbox HandleTypeType bx@@106) (Tclass._System.___hPartialFunc7 |#$T0@@159| |#$T1@@143| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$T5@@49| |#$T6@@18| |#$R@@172|)))) :qid |unknown.0:0| :skolemid |1085| :pattern ( ($IsBox bx@@106 (Tclass._System.___hPartialFunc7 |#$T0@@159| |#$T1@@143| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$T5@@49| |#$T6@@18| |#$R@@172|))) )))
(assert (forall ((|#$T0@@160| T@U) (|#$T1@@144| T@U) (|#$T2@@125| T@U) (|#$T3@@103| T@U) (|#$T4@@78| T@U) (|#$T5@@50| T@U) (|#$T6@@19| T@U) (|#$R@@173| T@U) (|f#0@@27| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@160|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$T2@@125|) TyType)) (= (type |#$T3@@103|) TyType)) (= (type |#$T4@@78|) TyType)) (= (type |#$T5@@50|) TyType)) (= (type |#$T6@@19|) TyType)) (= (type |#$R@@173|) TyType)) (= (type |f#0@@27|) HandleTypeType)) (and (=> ($Is |f#0@@27| (Tclass._System.___hPartialFunc7 |#$T0@@160| |#$T1@@144| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|)) (and ($Is |f#0@@27| (Tclass._System.___hFunc7 |#$T0@@160| |#$T1@@144| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|)) (forall ((|x0#0@@23| T@U) (|x1#0@@19| T@U) (|x2#0@@15| T@U) (|x3#0@@11| T@U) (|x4#0@@7| T@U) (|x5#0@@3| T@U) (|x6#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@23|) BoxType) (= (type |x1#0@@19|) BoxType)) (= (type |x2#0@@15|) BoxType)) (= (type |x3#0@@11|) BoxType)) (= (type |x4#0@@7|) BoxType)) (= (type |x5#0@@3|) BoxType)) (= (type |x6#0|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@23| |#$T0@@160|) ($IsBox |x1#0@@19| |#$T1@@144|)) ($IsBox |x2#0@@15| |#$T2@@125|)) ($IsBox |x3#0@@11| |#$T3@@103|)) ($IsBox |x4#0@@7| |#$T4@@78|)) ($IsBox |x5#0@@3| |#$T5@@50|)) ($IsBox |x6#0| |#$T6@@19|))) (|Set#Equal| (Reads7 |#$T0@@160| |#$T1@@144| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173| $OneHeap |f#0@@27| |x0#0@@23| |x1#0@@19| |x2#0@@15| |x3#0@@11| |x4#0@@7| |x5#0@@3| |x6#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1086| :no-pattern (type |x0#0@@23|) :no-pattern (type |x1#0@@19|) :no-pattern (type |x2#0@@15|) :no-pattern (type |x3#0@@11|) :no-pattern (type |x4#0@@7|) :no-pattern (type |x5#0@@3|) :no-pattern (type |x6#0|) :no-pattern (U_2_int |x0#0@@23|) :no-pattern (U_2_bool |x0#0@@23|) :no-pattern (U_2_int |x1#0@@19|) :no-pattern (U_2_bool |x1#0@@19|) :no-pattern (U_2_int |x2#0@@15|) :no-pattern (U_2_bool |x2#0@@15|) :no-pattern (U_2_int |x3#0@@11|) :no-pattern (U_2_bool |x3#0@@11|) :no-pattern (U_2_int |x4#0@@7|) :no-pattern (U_2_bool |x4#0@@7|) :no-pattern (U_2_int |x5#0@@3|) :no-pattern (U_2_bool |x5#0@@3|) :no-pattern (U_2_int |x6#0|) :no-pattern (U_2_bool |x6#0|) )))) (=> (and ($Is |f#0@@27| (Tclass._System.___hFunc7 |#$T0@@160| |#$T1@@144| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|)) (forall ((|x0#0@@24| T@U) (|x1#0@@20| T@U) (|x2#0@@16| T@U) (|x3#0@@12| T@U) (|x4#0@@8| T@U) (|x5#0@@4| T@U) (|x6#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@24|) BoxType) (= (type |x1#0@@20|) BoxType)) (= (type |x2#0@@16|) BoxType)) (= (type |x3#0@@12|) BoxType)) (= (type |x4#0@@8|) BoxType)) (= (type |x5#0@@4|) BoxType)) (= (type |x6#0@@0|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@24| |#$T0@@160|) ($IsBox |x1#0@@20| |#$T1@@144|)) ($IsBox |x2#0@@16| |#$T2@@125|)) ($IsBox |x3#0@@12| |#$T3@@103|)) ($IsBox |x4#0@@8| |#$T4@@78|)) ($IsBox |x5#0@@4| |#$T5@@50|)) ($IsBox |x6#0@@0| |#$T6@@19|))) (|Set#Equal| (Reads7 |#$T0@@160| |#$T1@@144| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173| $OneHeap |f#0@@27| |x0#0@@24| |x1#0@@20| |x2#0@@16| |x3#0@@12| |x4#0@@8| |x5#0@@4| |x6#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1086| :no-pattern (type |x0#0@@24|) :no-pattern (type |x1#0@@20|) :no-pattern (type |x2#0@@16|) :no-pattern (type |x3#0@@12|) :no-pattern (type |x4#0@@8|) :no-pattern (type |x5#0@@4|) :no-pattern (type |x6#0@@0|) :no-pattern (U_2_int |x0#0@@24|) :no-pattern (U_2_bool |x0#0@@24|) :no-pattern (U_2_int |x1#0@@20|) :no-pattern (U_2_bool |x1#0@@20|) :no-pattern (U_2_int |x2#0@@16|) :no-pattern (U_2_bool |x2#0@@16|) :no-pattern (U_2_int |x3#0@@12|) :no-pattern (U_2_bool |x3#0@@12|) :no-pattern (U_2_int |x4#0@@8|) :no-pattern (U_2_bool |x4#0@@8|) :no-pattern (U_2_int |x5#0@@4|) :no-pattern (U_2_bool |x5#0@@4|) :no-pattern (U_2_int |x6#0@@0|) :no-pattern (U_2_bool |x6#0@@0|) ))) ($Is |f#0@@27| (Tclass._System.___hPartialFunc7 |#$T0@@160| |#$T1@@144| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|))))) :qid |unknown.0:0| :skolemid |1087| :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc7 |#$T0@@160| |#$T1@@144| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$T5@@50| |#$T6@@19| |#$R@@173|))) )))
(assert (forall ((|#$T0@@161| T@U) (|#$T1@@145| T@U) (|#$T2@@126| T@U) (|#$T3@@104| T@U) (|#$T4@@79| T@U) (|#$T5@@51| T@U) (|#$T6@@20| T@U) (|#$R@@174| T@U) (|f#0@@28| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@161|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$T2@@126|) TyType)) (= (type |#$T3@@104|) TyType)) (= (type |#$T4@@79|) TyType)) (= (type |#$T5@@51|) TyType)) (= (type |#$T6@@20|) TyType)) (= (type |#$R@@174|) TyType)) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc7 |#$T0@@161| |#$T1@@145| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@22) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc7 |#$T0@@161| |#$T1@@145| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@22)) (=> ($IsAlloc |f#0@@28| (Tclass._System.___hFunc7 |#$T0@@161| |#$T1@@145| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@22) ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc7 |#$T0@@161| |#$T1@@145| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@22)))) :qid |unknown.0:0| :skolemid |1088| :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc7 |#$T0@@161| |#$T1@@145| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$T5@@51| |#$T6@@20| |#$R@@174|) $h@@22)) )))
(assert (forall ((arg0@@317 T@U) (arg1@@153 T@U) (arg2@@111 T@U) (arg3@@86 T@U) (arg4@@75 T@U) (arg5@@62 T@U) (arg6@@50 T@U) (arg7@@35 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7 arg0@@317 arg1@@153 arg2@@111 arg3@@86 arg4@@75 arg5@@62 arg6@@50 arg7@@35)) TyType) :qid |funType:Tclass._System.___hTotalFunc7| :pattern ( (Tclass._System.___hTotalFunc7 arg0@@317 arg1@@153 arg2@@111 arg3@@86 arg4@@75 arg5@@62 arg6@@50 arg7@@35)) )))
(assert (forall ((|#$T0@@162| T@U) (|#$T1@@146| T@U) (|#$T2@@127| T@U) (|#$T3@@105| T@U) (|#$T4@@80| T@U) (|#$T5@@52| T@U) (|#$T6@@21| T@U) (|#$R@@175| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@162|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$T2@@127|) TyType)) (= (type |#$T3@@105|) TyType)) (= (type |#$T4@@80|) TyType)) (= (type |#$T5@@52|) TyType)) (= (type |#$T6@@21|) TyType)) (= (type |#$R@@175|) TyType)) (= (Tag (Tclass._System.___hTotalFunc7 |#$T0@@162| |#$T1@@146| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$T5@@52| |#$T6@@21| |#$R@@175|)) Tagclass._System.___hTotalFunc7)) :qid |unknown.0:0| :skolemid |1089| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@162| |#$T1@@146| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$T5@@52| |#$T6@@21| |#$R@@175|)) )))
(assert (forall ((arg0@@318 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_0 arg0@@318)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_0| :pattern ( (Tclass._System.___hTotalFunc7_0 arg0@@318)) )))
(assert (forall ((|#$T0@@163| T@U) (|#$T1@@147| T@U) (|#$T2@@128| T@U) (|#$T3@@106| T@U) (|#$T4@@81| T@U) (|#$T5@@53| T@U) (|#$T6@@22| T@U) (|#$R@@176| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@163|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$T2@@128|) TyType)) (= (type |#$T3@@106|) TyType)) (= (type |#$T4@@81|) TyType)) (= (type |#$T5@@53|) TyType)) (= (type |#$T6@@22|) TyType)) (= (type |#$R@@176|) TyType)) (= (Tclass._System.___hTotalFunc7_0 (Tclass._System.___hTotalFunc7 |#$T0@@163| |#$T1@@147| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$T5@@53| |#$T6@@22| |#$R@@176|)) |#$T0@@163|)) :qid |unknown.0:0| :skolemid |1090| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@163| |#$T1@@147| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$T5@@53| |#$T6@@22| |#$R@@176|)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_1 arg0@@319)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_1| :pattern ( (Tclass._System.___hTotalFunc7_1 arg0@@319)) )))
(assert (forall ((|#$T0@@164| T@U) (|#$T1@@148| T@U) (|#$T2@@129| T@U) (|#$T3@@107| T@U) (|#$T4@@82| T@U) (|#$T5@@54| T@U) (|#$T6@@23| T@U) (|#$R@@177| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@164|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$T2@@129|) TyType)) (= (type |#$T3@@107|) TyType)) (= (type |#$T4@@82|) TyType)) (= (type |#$T5@@54|) TyType)) (= (type |#$T6@@23|) TyType)) (= (type |#$R@@177|) TyType)) (= (Tclass._System.___hTotalFunc7_1 (Tclass._System.___hTotalFunc7 |#$T0@@164| |#$T1@@148| |#$T2@@129| |#$T3@@107| |#$T4@@82| |#$T5@@54| |#$T6@@23| |#$R@@177|)) |#$T1@@148|)) :qid |unknown.0:0| :skolemid |1091| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@164| |#$T1@@148| |#$T2@@129| |#$T3@@107| |#$T4@@82| |#$T5@@54| |#$T6@@23| |#$R@@177|)) )))
(assert (forall ((arg0@@320 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_2 arg0@@320)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_2| :pattern ( (Tclass._System.___hTotalFunc7_2 arg0@@320)) )))
(assert (forall ((|#$T0@@165| T@U) (|#$T1@@149| T@U) (|#$T2@@130| T@U) (|#$T3@@108| T@U) (|#$T4@@83| T@U) (|#$T5@@55| T@U) (|#$T6@@24| T@U) (|#$R@@178| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@165|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$T2@@130|) TyType)) (= (type |#$T3@@108|) TyType)) (= (type |#$T4@@83|) TyType)) (= (type |#$T5@@55|) TyType)) (= (type |#$T6@@24|) TyType)) (= (type |#$R@@178|) TyType)) (= (Tclass._System.___hTotalFunc7_2 (Tclass._System.___hTotalFunc7 |#$T0@@165| |#$T1@@149| |#$T2@@130| |#$T3@@108| |#$T4@@83| |#$T5@@55| |#$T6@@24| |#$R@@178|)) |#$T2@@130|)) :qid |unknown.0:0| :skolemid |1092| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@165| |#$T1@@149| |#$T2@@130| |#$T3@@108| |#$T4@@83| |#$T5@@55| |#$T6@@24| |#$R@@178|)) )))
(assert (forall ((arg0@@321 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_3 arg0@@321)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_3| :pattern ( (Tclass._System.___hTotalFunc7_3 arg0@@321)) )))
(assert (forall ((|#$T0@@166| T@U) (|#$T1@@150| T@U) (|#$T2@@131| T@U) (|#$T3@@109| T@U) (|#$T4@@84| T@U) (|#$T5@@56| T@U) (|#$T6@@25| T@U) (|#$R@@179| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@166|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$T2@@131|) TyType)) (= (type |#$T3@@109|) TyType)) (= (type |#$T4@@84|) TyType)) (= (type |#$T5@@56|) TyType)) (= (type |#$T6@@25|) TyType)) (= (type |#$R@@179|) TyType)) (= (Tclass._System.___hTotalFunc7_3 (Tclass._System.___hTotalFunc7 |#$T0@@166| |#$T1@@150| |#$T2@@131| |#$T3@@109| |#$T4@@84| |#$T5@@56| |#$T6@@25| |#$R@@179|)) |#$T3@@109|)) :qid |unknown.0:0| :skolemid |1093| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@166| |#$T1@@150| |#$T2@@131| |#$T3@@109| |#$T4@@84| |#$T5@@56| |#$T6@@25| |#$R@@179|)) )))
(assert (forall ((arg0@@322 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_4 arg0@@322)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_4| :pattern ( (Tclass._System.___hTotalFunc7_4 arg0@@322)) )))
(assert (forall ((|#$T0@@167| T@U) (|#$T1@@151| T@U) (|#$T2@@132| T@U) (|#$T3@@110| T@U) (|#$T4@@85| T@U) (|#$T5@@57| T@U) (|#$T6@@26| T@U) (|#$R@@180| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@167|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$T2@@132|) TyType)) (= (type |#$T3@@110|) TyType)) (= (type |#$T4@@85|) TyType)) (= (type |#$T5@@57|) TyType)) (= (type |#$T6@@26|) TyType)) (= (type |#$R@@180|) TyType)) (= (Tclass._System.___hTotalFunc7_4 (Tclass._System.___hTotalFunc7 |#$T0@@167| |#$T1@@151| |#$T2@@132| |#$T3@@110| |#$T4@@85| |#$T5@@57| |#$T6@@26| |#$R@@180|)) |#$T4@@85|)) :qid |unknown.0:0| :skolemid |1094| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@167| |#$T1@@151| |#$T2@@132| |#$T3@@110| |#$T4@@85| |#$T5@@57| |#$T6@@26| |#$R@@180|)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_5 arg0@@323)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_5| :pattern ( (Tclass._System.___hTotalFunc7_5 arg0@@323)) )))
(assert (forall ((|#$T0@@168| T@U) (|#$T1@@152| T@U) (|#$T2@@133| T@U) (|#$T3@@111| T@U) (|#$T4@@86| T@U) (|#$T5@@58| T@U) (|#$T6@@27| T@U) (|#$R@@181| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@168|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$T2@@133|) TyType)) (= (type |#$T3@@111|) TyType)) (= (type |#$T4@@86|) TyType)) (= (type |#$T5@@58|) TyType)) (= (type |#$T6@@27|) TyType)) (= (type |#$R@@181|) TyType)) (= (Tclass._System.___hTotalFunc7_5 (Tclass._System.___hTotalFunc7 |#$T0@@168| |#$T1@@152| |#$T2@@133| |#$T3@@111| |#$T4@@86| |#$T5@@58| |#$T6@@27| |#$R@@181|)) |#$T5@@58|)) :qid |unknown.0:0| :skolemid |1095| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@168| |#$T1@@152| |#$T2@@133| |#$T3@@111| |#$T4@@86| |#$T5@@58| |#$T6@@27| |#$R@@181|)) )))
(assert (forall ((arg0@@324 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_6 arg0@@324)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_6| :pattern ( (Tclass._System.___hTotalFunc7_6 arg0@@324)) )))
(assert (forall ((|#$T0@@169| T@U) (|#$T1@@153| T@U) (|#$T2@@134| T@U) (|#$T3@@112| T@U) (|#$T4@@87| T@U) (|#$T5@@59| T@U) (|#$T6@@28| T@U) (|#$R@@182| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@169|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$T2@@134|) TyType)) (= (type |#$T3@@112|) TyType)) (= (type |#$T4@@87|) TyType)) (= (type |#$T5@@59|) TyType)) (= (type |#$T6@@28|) TyType)) (= (type |#$R@@182|) TyType)) (= (Tclass._System.___hTotalFunc7_6 (Tclass._System.___hTotalFunc7 |#$T0@@169| |#$T1@@153| |#$T2@@134| |#$T3@@112| |#$T4@@87| |#$T5@@59| |#$T6@@28| |#$R@@182|)) |#$T6@@28|)) :qid |unknown.0:0| :skolemid |1096| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@169| |#$T1@@153| |#$T2@@134| |#$T3@@112| |#$T4@@87| |#$T5@@59| |#$T6@@28| |#$R@@182|)) )))
(assert (forall ((arg0@@325 T@U) ) (! (= (type (Tclass._System.___hTotalFunc7_7 arg0@@325)) TyType) :qid |funType:Tclass._System.___hTotalFunc7_7| :pattern ( (Tclass._System.___hTotalFunc7_7 arg0@@325)) )))
(assert (forall ((|#$T0@@170| T@U) (|#$T1@@154| T@U) (|#$T2@@135| T@U) (|#$T3@@113| T@U) (|#$T4@@88| T@U) (|#$T5@@60| T@U) (|#$T6@@29| T@U) (|#$R@@183| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@170|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$T2@@135|) TyType)) (= (type |#$T3@@113|) TyType)) (= (type |#$T4@@88|) TyType)) (= (type |#$T5@@60|) TyType)) (= (type |#$T6@@29|) TyType)) (= (type |#$R@@183|) TyType)) (= (Tclass._System.___hTotalFunc7_7 (Tclass._System.___hTotalFunc7 |#$T0@@170| |#$T1@@154| |#$T2@@135| |#$T3@@113| |#$T4@@88| |#$T5@@60| |#$T6@@29| |#$R@@183|)) |#$R@@183|)) :qid |unknown.0:0| :skolemid |1097| :pattern ( (Tclass._System.___hTotalFunc7 |#$T0@@170| |#$T1@@154| |#$T2@@135| |#$T3@@113| |#$T4@@88| |#$T5@@60| |#$T6@@29| |#$R@@183|)) )))
(assert (forall ((|#$T0@@171| T@U) (|#$T1@@155| T@U) (|#$T2@@136| T@U) (|#$T3@@114| T@U) (|#$T4@@89| T@U) (|#$T5@@61| T@U) (|#$T6@@30| T@U) (|#$R@@184| T@U) (bx@@107 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@171|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$T2@@136|) TyType)) (= (type |#$T3@@114|) TyType)) (= (type |#$T4@@89|) TyType)) (= (type |#$T5@@61|) TyType)) (= (type |#$T6@@30|) TyType)) (= (type |#$R@@184|) TyType)) (= (type bx@@107) BoxType)) ($IsBox bx@@107 (Tclass._System.___hTotalFunc7 |#$T0@@171| |#$T1@@155| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$T5@@61| |#$T6@@30| |#$R@@184|))) (and (= ($Box ($Unbox HandleTypeType bx@@107)) bx@@107) ($Is ($Unbox HandleTypeType bx@@107) (Tclass._System.___hTotalFunc7 |#$T0@@171| |#$T1@@155| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$T5@@61| |#$T6@@30| |#$R@@184|)))) :qid |unknown.0:0| :skolemid |1098| :pattern ( ($IsBox bx@@107 (Tclass._System.___hTotalFunc7 |#$T0@@171| |#$T1@@155| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$T5@@61| |#$T6@@30| |#$R@@184|))) )))
(assert (forall ((|#$T0@@172| T@U) (|#$T1@@156| T@U) (|#$T2@@137| T@U) (|#$T3@@115| T@U) (|#$T4@@90| T@U) (|#$T5@@62| T@U) (|#$T6@@31| T@U) (|#$R@@185| T@U) (|f#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@172|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$T2@@137|) TyType)) (= (type |#$T3@@115|) TyType)) (= (type |#$T4@@90|) TyType)) (= (type |#$T5@@62|) TyType)) (= (type |#$T6@@31|) TyType)) (= (type |#$R@@185|) TyType)) (= (type |f#0@@29|) HandleTypeType)) (and (=> ($Is |f#0@@29| (Tclass._System.___hTotalFunc7 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|)) (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc7 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|)) (forall ((|x0#0@@25| T@U) (|x1#0@@21| T@U) (|x2#0@@17| T@U) (|x3#0@@13| T@U) (|x4#0@@9| T@U) (|x5#0@@5| T@U) (|x6#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@25|) BoxType) (= (type |x1#0@@21|) BoxType)) (= (type |x2#0@@17|) BoxType)) (= (type |x3#0@@13|) BoxType)) (= (type |x4#0@@9|) BoxType)) (= (type |x5#0@@5|) BoxType)) (= (type |x6#0@@1|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@25| |#$T0@@172|) ($IsBox |x1#0@@21| |#$T1@@156|)) ($IsBox |x2#0@@17| |#$T2@@137|)) ($IsBox |x3#0@@13| |#$T3@@115|)) ($IsBox |x4#0@@9| |#$T4@@90|)) ($IsBox |x5#0@@5| |#$T5@@62|)) ($IsBox |x6#0@@1| |#$T6@@31|))) (Requires7 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185| $OneHeap |f#0@@29| |x0#0@@25| |x1#0@@21| |x2#0@@17| |x3#0@@13| |x4#0@@9| |x5#0@@5| |x6#0@@1|)) :qid |unknown.0:0| :skolemid |1099| :no-pattern (type |x0#0@@25|) :no-pattern (type |x1#0@@21|) :no-pattern (type |x2#0@@17|) :no-pattern (type |x3#0@@13|) :no-pattern (type |x4#0@@9|) :no-pattern (type |x5#0@@5|) :no-pattern (type |x6#0@@1|) :no-pattern (U_2_int |x0#0@@25|) :no-pattern (U_2_bool |x0#0@@25|) :no-pattern (U_2_int |x1#0@@21|) :no-pattern (U_2_bool |x1#0@@21|) :no-pattern (U_2_int |x2#0@@17|) :no-pattern (U_2_bool |x2#0@@17|) :no-pattern (U_2_int |x3#0@@13|) :no-pattern (U_2_bool |x3#0@@13|) :no-pattern (U_2_int |x4#0@@9|) :no-pattern (U_2_bool |x4#0@@9|) :no-pattern (U_2_int |x5#0@@5|) :no-pattern (U_2_bool |x5#0@@5|) :no-pattern (U_2_int |x6#0@@1|) :no-pattern (U_2_bool |x6#0@@1|) )))) (=> (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc7 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|)) (forall ((|x0#0@@26| T@U) (|x1#0@@22| T@U) (|x2#0@@18| T@U) (|x3#0@@14| T@U) (|x4#0@@10| T@U) (|x5#0@@6| T@U) (|x6#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |x0#0@@26|) BoxType) (= (type |x1#0@@22|) BoxType)) (= (type |x2#0@@18|) BoxType)) (= (type |x3#0@@14|) BoxType)) (= (type |x4#0@@10|) BoxType)) (= (type |x5#0@@6|) BoxType)) (= (type |x6#0@@2|) BoxType)) (and (and (and (and (and (and ($IsBox |x0#0@@26| |#$T0@@172|) ($IsBox |x1#0@@22| |#$T1@@156|)) ($IsBox |x2#0@@18| |#$T2@@137|)) ($IsBox |x3#0@@14| |#$T3@@115|)) ($IsBox |x4#0@@10| |#$T4@@90|)) ($IsBox |x5#0@@6| |#$T5@@62|)) ($IsBox |x6#0@@2| |#$T6@@31|))) (Requires7 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185| $OneHeap |f#0@@29| |x0#0@@26| |x1#0@@22| |x2#0@@18| |x3#0@@14| |x4#0@@10| |x5#0@@6| |x6#0@@2|)) :qid |unknown.0:0| :skolemid |1099| :no-pattern (type |x0#0@@26|) :no-pattern (type |x1#0@@22|) :no-pattern (type |x2#0@@18|) :no-pattern (type |x3#0@@14|) :no-pattern (type |x4#0@@10|) :no-pattern (type |x5#0@@6|) :no-pattern (type |x6#0@@2|) :no-pattern (U_2_int |x0#0@@26|) :no-pattern (U_2_bool |x0#0@@26|) :no-pattern (U_2_int |x1#0@@22|) :no-pattern (U_2_bool |x1#0@@22|) :no-pattern (U_2_int |x2#0@@18|) :no-pattern (U_2_bool |x2#0@@18|) :no-pattern (U_2_int |x3#0@@14|) :no-pattern (U_2_bool |x3#0@@14|) :no-pattern (U_2_int |x4#0@@10|) :no-pattern (U_2_bool |x4#0@@10|) :no-pattern (U_2_int |x5#0@@6|) :no-pattern (U_2_bool |x5#0@@6|) :no-pattern (U_2_int |x6#0@@2|) :no-pattern (U_2_bool |x6#0@@2|) ))) ($Is |f#0@@29| (Tclass._System.___hTotalFunc7 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|))))) :qid |unknown.0:0| :skolemid |1100| :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc7 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$T5@@62| |#$T6@@31| |#$R@@185|))) )))
(assert (forall ((|#$T0@@173| T@U) (|#$T1@@157| T@U) (|#$T2@@138| T@U) (|#$T3@@116| T@U) (|#$T4@@91| T@U) (|#$T5@@63| T@U) (|#$T6@@32| T@U) (|#$R@@186| T@U) (|f#0@@30| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@173|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$T2@@138|) TyType)) (= (type |#$T3@@116|) TyType)) (= (type |#$T4@@91|) TyType)) (= (type |#$T5@@63|) TyType)) (= (type |#$T6@@32|) TyType)) (= (type |#$R@@186|) TyType)) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc7 |#$T0@@173| |#$T1@@157| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@23) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc7 |#$T0@@173| |#$T1@@157| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@23)) (=> ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc7 |#$T0@@173| |#$T1@@157| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@23) ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc7 |#$T0@@173| |#$T1@@157| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@23)))) :qid |unknown.0:0| :skolemid |1101| :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc7 |#$T0@@173| |#$T1@@157| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$T5@@63| |#$T6@@32| |#$R@@186|) $h@@23)) )))
(assert  (and (forall ((arg0@@326 T@U) (arg1@@154 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@326 arg1@@154)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@326 arg1@@154)) )) (forall ((arg0@@327 T@U) ) (! (= (type (DatatypeCtorId arg0@@327)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@327)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |1102| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |1103| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |1104| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |1105| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@328 T@U) (arg1@@155 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@328 arg1@@155)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@328 arg1@@155)) )))
(assert (forall ((|#$T0@@174| T@U) (|#$T1@@158| T@U) ) (!  (=> (and (= (type |#$T0@@174|) TyType) (= (type |#$T1@@158|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@174| |#$T1@@158|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |1106| :pattern ( (Tclass._System.Tuple2 |#$T0@@174| |#$T1@@158|)) )))
(assert (forall ((arg0@@329 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@329)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@329)) )))
(assert (forall ((|#$T0@@175| T@U) (|#$T1@@159| T@U) ) (!  (=> (and (= (type |#$T0@@175|) TyType) (= (type |#$T1@@159|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@175| |#$T1@@159|)) |#$T0@@175|)) :qid |unknown.0:0| :skolemid |1107| :pattern ( (Tclass._System.Tuple2 |#$T0@@175| |#$T1@@159|)) )))
(assert (forall ((arg0@@330 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@330)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@330)) )))
(assert (forall ((|#$T0@@176| T@U) (|#$T1@@160| T@U) ) (!  (=> (and (= (type |#$T0@@176|) TyType) (= (type |#$T1@@160|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@176| |#$T1@@160|)) |#$T1@@160|)) :qid |unknown.0:0| :skolemid |1108| :pattern ( (Tclass._System.Tuple2 |#$T0@@176| |#$T1@@160|)) )))
(assert (forall ((|#$T0@@177| T@U) (|#$T1@@161| T@U) (bx@@108 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@177|) TyType) (= (type |#$T1@@161|) TyType)) (= (type bx@@108) BoxType)) ($IsBox bx@@108 (Tclass._System.Tuple2 |#$T0@@177| |#$T1@@161|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@108)) bx@@108) ($Is ($Unbox DatatypeTypeType bx@@108) (Tclass._System.Tuple2 |#$T0@@177| |#$T1@@161|)))) :qid |unknown.0:0| :skolemid |1109| :pattern ( ($IsBox bx@@108 (Tclass._System.Tuple2 |#$T0@@177| |#$T1@@161|))) )))
(assert (forall ((|#$T0@@178| T@U) (|#$T1@@162| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@178|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@178| |#$T1@@162|)) (and ($IsBox |a#2#0#0| |#$T0@@178|) ($IsBox |a#2#1#0| |#$T1@@162|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@178|) ($IsBox |a#2#1#0| |#$T1@@162|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@178| |#$T1@@162|))))) :qid |unknown.0:0| :skolemid |1110| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@178| |#$T1@@162|))) )))
(assert (forall ((|#$T0@@179| T@U) (|#$T1@@163| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@179|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@24)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@179| |#$T1@@163|) $h@@24) (and ($IsAllocBox |a#3#0#0| |#$T0@@179| $h@@24) ($IsAllocBox |a#3#1#0| |#$T1@@163| $h@@24))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@179| $h@@24) ($IsAllocBox |a#3#1#0| |#$T1@@163| $h@@24)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@179| |#$T1@@163|) $h@@24)))) :qid |unknown.0:0| :skolemid |1111| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@179| |#$T1@@163|) $h@@24)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@180| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@180|) TyType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@25) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@164| T@U) ) (!  (and (= (type |#$T1@@164|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@180| |#$T1@@164|) $h@@25)) :qid |unknown.0:0| :skolemid |1112| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@180| |#$T1@@164|) $h@@25)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@180| $h@@25)) :qid |unknown.0:0| :skolemid |1113| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@180| $h@@25)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@165| T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@165|) TyType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@26) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@181| T@U) ) (!  (and (= (type |#$T0@@181|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@181| |#$T1@@165|) $h@@26)) :qid |unknown.0:0| :skolemid |1114| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@181| |#$T1@@165|) $h@@26)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@165| $h@@26)) :qid |unknown.0:0| :skolemid |1115| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@165| $h@@26)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |1116| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |1117| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |1118| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |1119| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |1120| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |1121| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@182| T@U) (|#$T1@@166| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@182|) TyType) (= (type |#$T1@@166|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@182| |#$T1@@166|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |1122| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@182| |#$T1@@166|))) )))
(assert (forall ((a@@130 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@130) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@130 b@@61) (and (= (_System.Tuple2._0 a@@130) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@130) (_System.Tuple2._1 b@@61)))) (=> (and (= (_System.Tuple2._0 a@@130) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@130) (_System.Tuple2._1 b@@61))) (|_System.Tuple2#Equal| a@@130 b@@61)))) :qid |unknown.0:0| :skolemid |1123| :pattern ( (|_System.Tuple2#Equal| a@@130 b@@61)) )))
(assert (forall ((a@@131 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@131) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@131 b@@62) (= a@@131 b@@62)) (=> (= a@@131 b@@62) (|_System.Tuple2#Equal| a@@131 b@@62)))) :qid |unknown.0:0| :skolemid |1124| :pattern ( (|_System.Tuple2#Equal| a@@131 b@@62)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@6)))) :qid |unknown.0:0| :skolemid |1125| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |1126| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@109 T@U) ) (!  (=> (and (= (type bx@@109) BoxType) ($IsBox bx@@109 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@109)) bx@@109) ($Is ($Unbox DatatypeTypeType bx@@109) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |1127| :pattern ( ($IsBox bx@@109 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@27 T@U) ) (!  (=> (and (= (type $h@@27) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@27)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@27)) :qid |DafnyPre.521:12| :skolemid |1128| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@27)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |1129| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |1130| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@132 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@132 b@@63) true) (=> true (|_System.Tuple0#Equal| a@@132 b@@63)))) :qid |unknown.0:0| :skolemid |1131| :pattern ( (|_System.Tuple0#Equal| a@@132 b@@63)) )))
(assert (forall ((a@@133 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@133) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@133 b@@64) (= a@@133 b@@64)) (=> (= a@@133 b@@64) (|_System.Tuple0#Equal| a@@133 b@@64)))) :qid |unknown.0:0| :skolemid |1132| :pattern ( (|_System.Tuple0#Equal| a@@133 b@@64)) )))
(assert (forall ((arg0@@331 T@U) ) (! (= (type (|#TSJ.Constants.Constants| arg0@@331)) DatatypeTypeType) :qid |funType:#TSJ.Constants.Constants| :pattern ( (|#TSJ.Constants.Constants| arg0@@331)) )))
(assert (forall ((|a#14#0#0| T@U) ) (!  (=> (= (type |a#14#0#0|) BoxType) (= (DatatypeCtorId (|#TSJ.Constants.Constants| |a#14#0#0|)) |##TSJ.Constants.Constants|)) :qid |TSJidfy.21:34| :skolemid |1133| :pattern ( (|#TSJ.Constants.Constants| |a#14#0#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (and (=> (TSJ.Constants.Constants_q d@@10) (= (DatatypeCtorId d@@10) |##TSJ.Constants.Constants|)) (=> (= (DatatypeCtorId d@@10) |##TSJ.Constants.Constants|) (TSJ.Constants.Constants_q d@@10)))) :qid |unknown.0:0| :skolemid |1134| :pattern ( (TSJ.Constants.Constants_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (TSJ.Constants.Constants_q d@@11)) (exists ((|a#15#0#0| T@U) ) (!  (and (= (type |a#15#0#0|) BoxType) (= d@@11 (|#TSJ.Constants.Constants| |a#15#0#0|))) :qid |TSJidfy.21:34| :skolemid |1135| :no-pattern (type |a#15#0#0|) :no-pattern (U_2_int |a#15#0#0|) :no-pattern (U_2_bool |a#15#0#0|) ))) :qid |unknown.0:0| :skolemid |1136| :pattern ( (TSJ.Constants.Constants_q d@@11)) )))
(assert (= (type Tclass.TSJ.Constants) TyType))
(assert (= (Tag Tclass.TSJ.Constants) Tagclass.TSJ.Constants))
(assert (forall ((bx@@110 T@U) ) (!  (=> (and (= (type bx@@110) BoxType) ($IsBox bx@@110 Tclass.TSJ.Constants)) (and (= ($Box ($Unbox DatatypeTypeType bx@@110)) bx@@110) ($Is ($Unbox DatatypeTypeType bx@@110) Tclass.TSJ.Constants))) :qid |unknown.0:0| :skolemid |1137| :pattern ( ($IsBox bx@@110 Tclass.TSJ.Constants)) )))
(assert (= (type |#$Constants|) TyType))
(assert (forall ((|a#16#0#0| T@U) ) (!  (=> (= (type |a#16#0#0|) BoxType) (and (=> ($Is (|#TSJ.Constants.Constants| |a#16#0#0|) Tclass.TSJ.Constants) ($IsBox |a#16#0#0| |#$Constants|)) (=> ($IsBox |a#16#0#0| |#$Constants|) ($Is (|#TSJ.Constants.Constants| |a#16#0#0|) Tclass.TSJ.Constants)))) :qid |TSJidfy.21:34| :skolemid |1138| :pattern ( ($Is (|#TSJ.Constants.Constants| |a#16#0#0|) Tclass.TSJ.Constants)) )))
(assert (forall ((|a#17#0#0| T@U) ($h@@28 T@U) ) (!  (=> (and (and (= (type |a#17#0#0|) BoxType) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@28)) (and (=> ($IsAlloc (|#TSJ.Constants.Constants| |a#17#0#0|) Tclass.TSJ.Constants $h@@28) ($IsAllocBox |a#17#0#0| |#$Constants| $h@@28)) (=> ($IsAllocBox |a#17#0#0| |#$Constants| $h@@28) ($IsAlloc (|#TSJ.Constants.Constants| |a#17#0#0|) Tclass.TSJ.Constants $h@@28)))) :qid |TSJidfy.21:34| :skolemid |1139| :pattern ( ($IsAlloc (|#TSJ.Constants.Constants| |a#17#0#0|) Tclass.TSJ.Constants $h@@28)) )))
(assert (forall ((arg0@@332 T@U) ) (! (= (type (TSJ.Constants.k arg0@@332)) BoxType) :qid |funType:TSJ.Constants.k| :pattern ( (TSJ.Constants.k arg0@@332)) )))
(assert (forall ((d@@12 T@U) ($h@@29 T@U) ) (!  (=> (and (and (= (type d@@12) DatatypeTypeType) (= (type $h@@29) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@29) (and (TSJ.Constants.Constants_q d@@12) ($IsAlloc d@@12 Tclass.TSJ.Constants $h@@29)))) ($IsAllocBox (TSJ.Constants.k d@@12) |#$Constants| $h@@29)) :qid |unknown.0:0| :skolemid |1140| :pattern ( ($IsAllocBox (TSJ.Constants.k d@@12) |#$Constants| $h@@29)) )))
(assert (forall ((|a#18#0#0| T@U) ) (!  (=> (= (type |a#18#0#0|) BoxType) (= (|#TSJ.Constants.Constants| (Lit |a#18#0#0|)) (Lit (|#TSJ.Constants.Constants| |a#18#0#0|)))) :qid |TSJidfy.21:34| :skolemid |1141| :pattern ( (|#TSJ.Constants.Constants| (Lit |a#18#0#0|))) )))
(assert (forall ((|a#19#0#0| T@U) ) (!  (=> (= (type |a#19#0#0|) BoxType) (= (TSJ.Constants.k (|#TSJ.Constants.Constants| |a#19#0#0|)) |a#19#0#0|)) :qid |TSJidfy.21:34| :skolemid |1142| :pattern ( (|#TSJ.Constants.Constants| |a#19#0#0|)) )))
(assert (forall ((|a#20#0#0| T@U) ) (!  (=> (= (type |a#20#0#0|) BoxType) (< (BoxRank |a#20#0#0|) (DtRank (|#TSJ.Constants.Constants| |a#20#0#0|)))) :qid |TSJidfy.21:34| :skolemid |1143| :pattern ( (|#TSJ.Constants.Constants| |a#20#0#0|)) )))
(assert (forall ((d@@13 T@U) ) (!  (=> (and (= (type d@@13) DatatypeTypeType) (|$IsA#TSJ.Constants| d@@13)) (TSJ.Constants.Constants_q d@@13)) :qid |unknown.0:0| :skolemid |1144| :pattern ( (|$IsA#TSJ.Constants| d@@13)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) ($Is d@@14 Tclass.TSJ.Constants)) (TSJ.Constants.Constants_q d@@14)) :qid |unknown.0:0| :skolemid |1145| :pattern ( (TSJ.Constants.Constants_q d@@14) ($Is d@@14 Tclass.TSJ.Constants)) )))
(assert (forall ((a@@134 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (and (=> (|TSJ.Constants#Equal| a@@134 b@@65) (= (TSJ.Constants.k a@@134) (TSJ.Constants.k b@@65))) (=> (= (TSJ.Constants.k a@@134) (TSJ.Constants.k b@@65)) (|TSJ.Constants#Equal| a@@134 b@@65)))) :qid |unknown.0:0| :skolemid |1146| :pattern ( (|TSJ.Constants#Equal| a@@134 b@@65)) )))
(assert (forall ((a@@135 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@135) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (=> (|TSJ.Constants#Equal| a@@135 b@@66) (= a@@135 b@@66)) (=> (= a@@135 b@@66) (|TSJ.Constants#Equal| a@@135 b@@66)))) :qid |unknown.0:0| :skolemid |1147| :pattern ( (|TSJ.Constants#Equal| a@@135 b@@66)) )))
(assert (forall ((arg0@@333 T@U) (arg1@@156 T@U) (arg2@@112 T@U) (arg3@@87 T@U) (arg4@@76 T@U) (arg5@@63 T@U) (arg6@@51 T@U) (arg7@@36 T@U) (arg8@@22 T@U) ) (! (= (type (|#TSJ.Variables.Variables| arg0@@333 arg1@@156 arg2@@112 arg3@@87 arg4@@76 arg5@@63 arg6@@51 arg7@@36 arg8@@22)) DatatypeTypeType) :qid |funType:#TSJ.Variables.Variables| :pattern ( (|#TSJ.Variables.Variables| arg0@@333 arg1@@156 arg2@@112 arg3@@87 arg4@@76 arg5@@63 arg6@@51 arg7@@36 arg8@@22)) )))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) (|a#21#3#0| T@U) (|a#21#4#0| T@U) (|a#21#5#0| T@U) (|a#21#6#0| T@U) (|a#21#7#0| T@U) (|a#21#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#21#0#0|) BoxType) (= (type |a#21#1#0|) BoxType)) (= (type |a#21#2#0|) BoxType)) (= (type |a#21#3#0|) (SeqType BoxType))) (= (type |a#21#4#0|) (SeqType BoxType))) (= (type |a#21#5#0|) (SeqType BoxType))) (= (type |a#21#6#0|) (SeqType BoxType))) (= (type |a#21#7#0|) (SeqType BoxType))) (= (type |a#21#8#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#TSJ.Variables.Variables| |a#21#0#0| |a#21#1#0| |a#21#2#0| |a#21#3#0| |a#21#4#0| |a#21#5#0| |a#21#6#0| |a#21#7#0| |a#21#8#0|)) |##TSJ.Variables.Variables|)) :qid |TSJidfy.36:7| :skolemid |1148| :pattern ( (|#TSJ.Variables.Variables| |a#21#0#0| |a#21#1#0| |a#21#2#0| |a#21#3#0| |a#21#4#0| |a#21#5#0| |a#21#6#0| |a#21#7#0| |a#21#8#0|)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (= (type d@@15) DatatypeTypeType) (and (=> (TSJ.Variables.Variables_q d@@15) (= (DatatypeCtorId d@@15) |##TSJ.Variables.Variables|)) (=> (= (DatatypeCtorId d@@15) |##TSJ.Variables.Variables|) (TSJ.Variables.Variables_q d@@15)))) :qid |unknown.0:0| :skolemid |1149| :pattern ( (TSJ.Variables.Variables_q d@@15)) )))
(assert (forall ((d@@16 T@U) ) (!  (=> (and (= (type d@@16) DatatypeTypeType) (TSJ.Variables.Variables_q d@@16)) (exists ((|a#22#0#0| T@U) (|a#22#1#0| T@U) (|a#22#2#0| T@U) (|a#22#3#0| T@U) (|a#22#4#0| T@U) (|a#22#5#0| T@U) (|a#22#6#0| T@U) (|a#22#7#0| T@U) (|a#22#8#0| T@U) ) (!  (and (and (and (and (and (and (and (and (and (= (type |a#22#0#0|) BoxType) (= (type |a#22#1#0|) BoxType)) (= (type |a#22#2#0|) BoxType)) (= (type |a#22#3#0|) (SeqType BoxType))) (= (type |a#22#4#0|) (SeqType BoxType))) (= (type |a#22#5#0|) (SeqType BoxType))) (= (type |a#22#6#0|) (SeqType BoxType))) (= (type |a#22#7#0|) (SeqType BoxType))) (= (type |a#22#8#0|) (MapType BoxType BoxType))) (= d@@16 (|#TSJ.Variables.Variables| |a#22#0#0| |a#22#1#0| |a#22#2#0| |a#22#3#0| |a#22#4#0| |a#22#5#0| |a#22#6#0| |a#22#7#0| |a#22#8#0|))) :qid |TSJidfy.36:7| :skolemid |1150| :no-pattern (type |a#22#0#0|) :no-pattern (type |a#22#1#0|) :no-pattern (type |a#22#2#0|) :no-pattern (type |a#22#3#0|) :no-pattern (type |a#22#4#0|) :no-pattern (type |a#22#5#0|) :no-pattern (type |a#22#6#0|) :no-pattern (type |a#22#7#0|) :no-pattern (type |a#22#8#0|) :no-pattern (U_2_int |a#22#0#0|) :no-pattern (U_2_bool |a#22#0#0|) :no-pattern (U_2_int |a#22#1#0|) :no-pattern (U_2_bool |a#22#1#0|) :no-pattern (U_2_int |a#22#2#0|) :no-pattern (U_2_bool |a#22#2#0|) :no-pattern (U_2_int |a#22#3#0|) :no-pattern (U_2_bool |a#22#3#0|) :no-pattern (U_2_int |a#22#4#0|) :no-pattern (U_2_bool |a#22#4#0|) :no-pattern (U_2_int |a#22#5#0|) :no-pattern (U_2_bool |a#22#5#0|) :no-pattern (U_2_int |a#22#6#0|) :no-pattern (U_2_bool |a#22#6#0|) :no-pattern (U_2_int |a#22#7#0|) :no-pattern (U_2_bool |a#22#7#0|) :no-pattern (U_2_int |a#22#8#0|) :no-pattern (U_2_bool |a#22#8#0|) ))) :qid |unknown.0:0| :skolemid |1151| :pattern ( (TSJ.Variables.Variables_q d@@16)) )))
(assert (= (type Tclass.Journal.JournalEntry) TyType))
(assert (= (Tag Tclass.Journal.JournalEntry) Tagclass.Journal.JournalEntry))
(assert (forall ((bx@@111 T@U) ) (!  (=> (and (= (type bx@@111) BoxType) ($IsBox bx@@111 Tclass.Journal.JournalEntry)) (and (= ($Box ($Unbox DatatypeTypeType bx@@111)) bx@@111) ($Is ($Unbox DatatypeTypeType bx@@111) Tclass.Journal.JournalEntry))) :qid |unknown.0:0| :skolemid |1152| :pattern ( ($IsBox bx@@111 Tclass.Journal.JournalEntry)) )))
(assert (= (type Tclass.ThreeStateTypes.SyncReqStatus) TyType))
(assert (= (Tag Tclass.ThreeStateTypes.SyncReqStatus) Tagclass.ThreeStateTypes.SyncReqStatus))
(assert (forall ((bx@@112 T@U) ) (!  (=> (and (= (type bx@@112) BoxType) ($IsBox bx@@112 Tclass.ThreeStateTypes.SyncReqStatus)) (and (= ($Box ($Unbox DatatypeTypeType bx@@112)) bx@@112) ($Is ($Unbox DatatypeTypeType bx@@112) Tclass.ThreeStateTypes.SyncReqStatus))) :qid |unknown.0:0| :skolemid |1153| :pattern ( ($IsBox bx@@112 Tclass.ThreeStateTypes.SyncReqStatus)) )))
(assert (= (type Tclass.TSJ.Variables) TyType))
(assert (= (Tag Tclass.TSJ.Variables) Tagclass.TSJ.Variables))
(assert (forall ((bx@@113 T@U) ) (!  (=> (and (= (type bx@@113) BoxType) ($IsBox bx@@113 Tclass.TSJ.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@113)) bx@@113) ($Is ($Unbox DatatypeTypeType bx@@113) Tclass.TSJ.Variables))) :qid |unknown.0:0| :skolemid |1154| :pattern ( ($IsBox bx@@113 Tclass.TSJ.Variables)) )))
(assert (= (type |#$Variables|) TyType))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| T@U) (|a#23#2#0| T@U) (|a#23#3#0| T@U) (|a#23#4#0| T@U) (|a#23#5#0| T@U) (|a#23#6#0| T@U) (|a#23#7#0| T@U) (|a#23#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#23#0#0|) BoxType) (= (type |a#23#1#0|) BoxType)) (= (type |a#23#2#0|) BoxType)) (= (type |a#23#3#0|) (SeqType BoxType))) (= (type |a#23#4#0|) (SeqType BoxType))) (= (type |a#23#5#0|) (SeqType BoxType))) (= (type |a#23#6#0|) (SeqType BoxType))) (= (type |a#23#7#0|) (SeqType BoxType))) (= (type |a#23#8#0|) (MapType BoxType BoxType))) (and (=> ($Is (|#TSJ.Variables.Variables| |a#23#0#0| |a#23#1#0| |a#23#2#0| |a#23#3#0| |a#23#4#0| |a#23#5#0| |a#23#6#0| |a#23#7#0| |a#23#8#0|) Tclass.TSJ.Variables) (and (and (and (and (and (and (and (and ($IsBox |a#23#0#0| |#$Variables|) ($IsBox |a#23#1#0| |#$Variables|)) ($IsBox |a#23#2#0| |#$Variables|)) ($Is |a#23#3#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#4#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#5#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#6#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#7#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#8#0| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) (=> (and (and (and (and (and (and (and (and ($IsBox |a#23#0#0| |#$Variables|) ($IsBox |a#23#1#0| |#$Variables|)) ($IsBox |a#23#2#0| |#$Variables|)) ($Is |a#23#3#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#4#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#5#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#6#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#7#0| (TSeq Tclass.Journal.JournalEntry))) ($Is |a#23#8#0| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus))) ($Is (|#TSJ.Variables.Variables| |a#23#0#0| |a#23#1#0| |a#23#2#0| |a#23#3#0| |a#23#4#0| |a#23#5#0| |a#23#6#0| |a#23#7#0| |a#23#8#0|) Tclass.TSJ.Variables)))) :qid |TSJidfy.36:7| :skolemid |1155| :pattern ( ($Is (|#TSJ.Variables.Variables| |a#23#0#0| |a#23#1#0| |a#23#2#0| |a#23#3#0| |a#23#4#0| |a#23#5#0| |a#23#6#0| |a#23#7#0| |a#23#8#0|) Tclass.TSJ.Variables)) )))
(assert (forall ((|a#24#0#0| T@U) (|a#24#1#0| T@U) (|a#24#2#0| T@U) (|a#24#3#0| T@U) (|a#24#4#0| T@U) (|a#24#5#0| T@U) (|a#24#6#0| T@U) (|a#24#7#0| T@U) (|a#24#8#0| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |a#24#0#0|) BoxType) (= (type |a#24#1#0|) BoxType)) (= (type |a#24#2#0|) BoxType)) (= (type |a#24#3#0|) (SeqType BoxType))) (= (type |a#24#4#0|) (SeqType BoxType))) (= (type |a#24#5#0|) (SeqType BoxType))) (= (type |a#24#6#0|) (SeqType BoxType))) (= (type |a#24#7#0|) (SeqType BoxType))) (= (type |a#24#8#0|) (MapType BoxType BoxType))) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@30)) (and (=> ($IsAlloc (|#TSJ.Variables.Variables| |a#24#0#0| |a#24#1#0| |a#24#2#0| |a#24#3#0| |a#24#4#0| |a#24#5#0| |a#24#6#0| |a#24#7#0| |a#24#8#0|) Tclass.TSJ.Variables $h@@30) (and (and (and (and (and (and (and (and ($IsAllocBox |a#24#0#0| |#$Variables| $h@@30) ($IsAllocBox |a#24#1#0| |#$Variables| $h@@30)) ($IsAllocBox |a#24#2#0| |#$Variables| $h@@30)) ($IsAlloc |a#24#3#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#4#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#5#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#6#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#7#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#8#0| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus) $h@@30))) (=> (and (and (and (and (and (and (and (and ($IsAllocBox |a#24#0#0| |#$Variables| $h@@30) ($IsAllocBox |a#24#1#0| |#$Variables| $h@@30)) ($IsAllocBox |a#24#2#0| |#$Variables| $h@@30)) ($IsAlloc |a#24#3#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#4#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#5#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#6#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#7#0| (TSeq Tclass.Journal.JournalEntry) $h@@30)) ($IsAlloc |a#24#8#0| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus) $h@@30)) ($IsAlloc (|#TSJ.Variables.Variables| |a#24#0#0| |a#24#1#0| |a#24#2#0| |a#24#3#0| |a#24#4#0| |a#24#5#0| |a#24#6#0| |a#24#7#0| |a#24#8#0|) Tclass.TSJ.Variables $h@@30)))) :qid |TSJidfy.36:7| :skolemid |1156| :pattern ( ($IsAlloc (|#TSJ.Variables.Variables| |a#24#0#0| |a#24#1#0| |a#24#2#0| |a#24#3#0| |a#24#4#0| |a#24#5#0| |a#24#6#0| |a#24#7#0| |a#24#8#0|) Tclass.TSJ.Variables $h@@30)) )))
(assert (forall ((arg0@@334 T@U) ) (! (= (type (TSJ.Variables.s1 arg0@@334)) BoxType) :qid |funType:TSJ.Variables.s1| :pattern ( (TSJ.Variables.s1 arg0@@334)) )))
(assert (forall ((d@@17 T@U) ($h@@31 T@U) ) (!  (=> (and (and (= (type d@@17) DatatypeTypeType) (= (type $h@@31) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@31) (and (TSJ.Variables.Variables_q d@@17) ($IsAlloc d@@17 Tclass.TSJ.Variables $h@@31)))) ($IsAllocBox (TSJ.Variables.s1 d@@17) |#$Variables| $h@@31)) :qid |unknown.0:0| :skolemid |1157| :pattern ( ($IsAllocBox (TSJ.Variables.s1 d@@17) |#$Variables| $h@@31)) )))
(assert (forall ((arg0@@335 T@U) ) (! (= (type (TSJ.Variables.s2 arg0@@335)) BoxType) :qid |funType:TSJ.Variables.s2| :pattern ( (TSJ.Variables.s2 arg0@@335)) )))
(assert (forall ((d@@18 T@U) ($h@@32 T@U) ) (!  (=> (and (and (= (type d@@18) DatatypeTypeType) (= (type $h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@32) (and (TSJ.Variables.Variables_q d@@18) ($IsAlloc d@@18 Tclass.TSJ.Variables $h@@32)))) ($IsAllocBox (TSJ.Variables.s2 d@@18) |#$Variables| $h@@32)) :qid |unknown.0:0| :skolemid |1158| :pattern ( ($IsAllocBox (TSJ.Variables.s2 d@@18) |#$Variables| $h@@32)) )))
(assert (forall ((arg0@@336 T@U) ) (! (= (type (TSJ.Variables.s3 arg0@@336)) BoxType) :qid |funType:TSJ.Variables.s3| :pattern ( (TSJ.Variables.s3 arg0@@336)) )))
(assert (forall ((d@@19 T@U) ($h@@33 T@U) ) (!  (=> (and (and (= (type d@@19) DatatypeTypeType) (= (type $h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@33) (and (TSJ.Variables.Variables_q d@@19) ($IsAlloc d@@19 Tclass.TSJ.Variables $h@@33)))) ($IsAllocBox (TSJ.Variables.s3 d@@19) |#$Variables| $h@@33)) :qid |unknown.0:0| :skolemid |1159| :pattern ( ($IsAllocBox (TSJ.Variables.s3 d@@19) |#$Variables| $h@@33)) )))
(assert (forall ((arg0@@337 T@U) ) (! (= (type (TSJ.Variables.j1 arg0@@337)) (SeqType BoxType)) :qid |funType:TSJ.Variables.j1| :pattern ( (TSJ.Variables.j1 arg0@@337)) )))
(assert (forall ((d@@20 T@U) ($h@@34 T@U) ) (!  (=> (and (and (= (type d@@20) DatatypeTypeType) (= (type $h@@34) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@34) (and (TSJ.Variables.Variables_q d@@20) ($IsAlloc d@@20 Tclass.TSJ.Variables $h@@34)))) ($IsAlloc (TSJ.Variables.j1 d@@20) (TSeq Tclass.Journal.JournalEntry) $h@@34)) :qid |unknown.0:0| :skolemid |1160| :pattern ( ($IsAlloc (TSJ.Variables.j1 d@@20) (TSeq Tclass.Journal.JournalEntry) $h@@34)) )))
(assert (forall ((arg0@@338 T@U) ) (! (= (type (TSJ.Variables.j2 arg0@@338)) (SeqType BoxType)) :qid |funType:TSJ.Variables.j2| :pattern ( (TSJ.Variables.j2 arg0@@338)) )))
(assert (forall ((d@@21 T@U) ($h@@35 T@U) ) (!  (=> (and (and (= (type d@@21) DatatypeTypeType) (= (type $h@@35) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@35) (and (TSJ.Variables.Variables_q d@@21) ($IsAlloc d@@21 Tclass.TSJ.Variables $h@@35)))) ($IsAlloc (TSJ.Variables.j2 d@@21) (TSeq Tclass.Journal.JournalEntry) $h@@35)) :qid |unknown.0:0| :skolemid |1161| :pattern ( ($IsAlloc (TSJ.Variables.j2 d@@21) (TSeq Tclass.Journal.JournalEntry) $h@@35)) )))
(assert (forall ((arg0@@339 T@U) ) (! (= (type (TSJ.Variables.j3 arg0@@339)) (SeqType BoxType)) :qid |funType:TSJ.Variables.j3| :pattern ( (TSJ.Variables.j3 arg0@@339)) )))
(assert (forall ((d@@22 T@U) ($h@@36 T@U) ) (!  (=> (and (and (= (type d@@22) DatatypeTypeType) (= (type $h@@36) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@36) (and (TSJ.Variables.Variables_q d@@22) ($IsAlloc d@@22 Tclass.TSJ.Variables $h@@36)))) ($IsAlloc (TSJ.Variables.j3 d@@22) (TSeq Tclass.Journal.JournalEntry) $h@@36)) :qid |unknown.0:0| :skolemid |1162| :pattern ( ($IsAlloc (TSJ.Variables.j3 d@@22) (TSeq Tclass.Journal.JournalEntry) $h@@36)) )))
(assert (forall ((arg0@@340 T@U) ) (! (= (type (TSJ.Variables.j__gamma arg0@@340)) (SeqType BoxType)) :qid |funType:TSJ.Variables.j__gamma| :pattern ( (TSJ.Variables.j__gamma arg0@@340)) )))
(assert (forall ((d@@23 T@U) ($h@@37 T@U) ) (!  (=> (and (and (= (type d@@23) DatatypeTypeType) (= (type $h@@37) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@37) (and (TSJ.Variables.Variables_q d@@23) ($IsAlloc d@@23 Tclass.TSJ.Variables $h@@37)))) ($IsAlloc (TSJ.Variables.j__gamma d@@23) (TSeq Tclass.Journal.JournalEntry) $h@@37)) :qid |unknown.0:0| :skolemid |1163| :pattern ( ($IsAlloc (TSJ.Variables.j__gamma d@@23) (TSeq Tclass.Journal.JournalEntry) $h@@37)) )))
(assert (forall ((arg0@@341 T@U) ) (! (= (type (TSJ.Variables.j__delta arg0@@341)) (SeqType BoxType)) :qid |funType:TSJ.Variables.j__delta| :pattern ( (TSJ.Variables.j__delta arg0@@341)) )))
(assert (forall ((d@@24 T@U) ($h@@38 T@U) ) (!  (=> (and (and (= (type d@@24) DatatypeTypeType) (= (type $h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@38) (and (TSJ.Variables.Variables_q d@@24) ($IsAlloc d@@24 Tclass.TSJ.Variables $h@@38)))) ($IsAlloc (TSJ.Variables.j__delta d@@24) (TSeq Tclass.Journal.JournalEntry) $h@@38)) :qid |unknown.0:0| :skolemid |1164| :pattern ( ($IsAlloc (TSJ.Variables.j__delta d@@24) (TSeq Tclass.Journal.JournalEntry) $h@@38)) )))
(assert (forall ((arg0@@342 T@U) ) (! (= (type (TSJ.Variables.outstandingSyncReqs arg0@@342)) (MapType BoxType BoxType)) :qid |funType:TSJ.Variables.outstandingSyncReqs| :pattern ( (TSJ.Variables.outstandingSyncReqs arg0@@342)) )))
(assert (forall ((d@@25 T@U) ($h@@39 T@U) ) (!  (=> (and (and (= (type d@@25) DatatypeTypeType) (= (type $h@@39) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@39) (and (TSJ.Variables.Variables_q d@@25) ($IsAlloc d@@25 Tclass.TSJ.Variables $h@@39)))) ($IsAlloc (TSJ.Variables.outstandingSyncReqs d@@25) (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus) $h@@39)) :qid |unknown.0:0| :skolemid |1165| :pattern ( ($IsAlloc (TSJ.Variables.outstandingSyncReqs d@@25) (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus) $h@@39)) )))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| T@U) (|a#25#2#0| T@U) (|a#25#3#0| T@U) (|a#25#4#0| T@U) (|a#25#5#0| T@U) (|a#25#6#0| T@U) (|a#25#7#0| T@U) (|a#25#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#25#0#0|) BoxType) (= (type |a#25#1#0|) BoxType)) (= (type |a#25#2#0|) BoxType)) (= (type |a#25#3#0|) (SeqType BoxType))) (= (type |a#25#4#0|) (SeqType BoxType))) (= (type |a#25#5#0|) (SeqType BoxType))) (= (type |a#25#6#0|) (SeqType BoxType))) (= (type |a#25#7#0|) (SeqType BoxType))) (= (type |a#25#8#0|) (MapType BoxType BoxType))) (= (|#TSJ.Variables.Variables| (Lit |a#25#0#0|) (Lit |a#25#1#0|) (Lit |a#25#2#0|) (Lit |a#25#3#0|) (Lit |a#25#4#0|) (Lit |a#25#5#0|) (Lit |a#25#6#0|) (Lit |a#25#7#0|) (Lit |a#25#8#0|)) (Lit (|#TSJ.Variables.Variables| |a#25#0#0| |a#25#1#0| |a#25#2#0| |a#25#3#0| |a#25#4#0| |a#25#5#0| |a#25#6#0| |a#25#7#0| |a#25#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1166| :pattern ( (|#TSJ.Variables.Variables| (Lit |a#25#0#0|) (Lit |a#25#1#0|) (Lit |a#25#2#0|) (Lit |a#25#3#0|) (Lit |a#25#4#0|) (Lit |a#25#5#0|) (Lit |a#25#6#0|) (Lit |a#25#7#0|) (Lit |a#25#8#0|))) )))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) (|a#26#2#0| T@U) (|a#26#3#0| T@U) (|a#26#4#0| T@U) (|a#26#5#0| T@U) (|a#26#6#0| T@U) (|a#26#7#0| T@U) (|a#26#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#26#0#0|) BoxType) (= (type |a#26#1#0|) BoxType)) (= (type |a#26#2#0|) BoxType)) (= (type |a#26#3#0|) (SeqType BoxType))) (= (type |a#26#4#0|) (SeqType BoxType))) (= (type |a#26#5#0|) (SeqType BoxType))) (= (type |a#26#6#0|) (SeqType BoxType))) (= (type |a#26#7#0|) (SeqType BoxType))) (= (type |a#26#8#0|) (MapType BoxType BoxType))) (= (TSJ.Variables.s1 (|#TSJ.Variables.Variables| |a#26#0#0| |a#26#1#0| |a#26#2#0| |a#26#3#0| |a#26#4#0| |a#26#5#0| |a#26#6#0| |a#26#7#0| |a#26#8#0|)) |a#26#0#0|)) :qid |TSJidfy.36:7| :skolemid |1167| :pattern ( (|#TSJ.Variables.Variables| |a#26#0#0| |a#26#1#0| |a#26#2#0| |a#26#3#0| |a#26#4#0| |a#26#5#0| |a#26#6#0| |a#26#7#0| |a#26#8#0|)) )))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| T@U) (|a#27#2#0| T@U) (|a#27#3#0| T@U) (|a#27#4#0| T@U) (|a#27#5#0| T@U) (|a#27#6#0| T@U) (|a#27#7#0| T@U) (|a#27#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#27#0#0|) BoxType) (= (type |a#27#1#0|) BoxType)) (= (type |a#27#2#0|) BoxType)) (= (type |a#27#3#0|) (SeqType BoxType))) (= (type |a#27#4#0|) (SeqType BoxType))) (= (type |a#27#5#0|) (SeqType BoxType))) (= (type |a#27#6#0|) (SeqType BoxType))) (= (type |a#27#7#0|) (SeqType BoxType))) (= (type |a#27#8#0|) (MapType BoxType BoxType))) (< (BoxRank |a#27#0#0|) (DtRank (|#TSJ.Variables.Variables| |a#27#0#0| |a#27#1#0| |a#27#2#0| |a#27#3#0| |a#27#4#0| |a#27#5#0| |a#27#6#0| |a#27#7#0| |a#27#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1168| :pattern ( (|#TSJ.Variables.Variables| |a#27#0#0| |a#27#1#0| |a#27#2#0| |a#27#3#0| |a#27#4#0| |a#27#5#0| |a#27#6#0| |a#27#7#0| |a#27#8#0|)) )))
(assert (forall ((|a#28#0#0| T@U) (|a#28#1#0| T@U) (|a#28#2#0| T@U) (|a#28#3#0| T@U) (|a#28#4#0| T@U) (|a#28#5#0| T@U) (|a#28#6#0| T@U) (|a#28#7#0| T@U) (|a#28#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#28#0#0|) BoxType) (= (type |a#28#1#0|) BoxType)) (= (type |a#28#2#0|) BoxType)) (= (type |a#28#3#0|) (SeqType BoxType))) (= (type |a#28#4#0|) (SeqType BoxType))) (= (type |a#28#5#0|) (SeqType BoxType))) (= (type |a#28#6#0|) (SeqType BoxType))) (= (type |a#28#7#0|) (SeqType BoxType))) (= (type |a#28#8#0|) (MapType BoxType BoxType))) (= (TSJ.Variables.s2 (|#TSJ.Variables.Variables| |a#28#0#0| |a#28#1#0| |a#28#2#0| |a#28#3#0| |a#28#4#0| |a#28#5#0| |a#28#6#0| |a#28#7#0| |a#28#8#0|)) |a#28#1#0|)) :qid |TSJidfy.36:7| :skolemid |1169| :pattern ( (|#TSJ.Variables.Variables| |a#28#0#0| |a#28#1#0| |a#28#2#0| |a#28#3#0| |a#28#4#0| |a#28#5#0| |a#28#6#0| |a#28#7#0| |a#28#8#0|)) )))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) (|a#29#2#0| T@U) (|a#29#3#0| T@U) (|a#29#4#0| T@U) (|a#29#5#0| T@U) (|a#29#6#0| T@U) (|a#29#7#0| T@U) (|a#29#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#29#0#0|) BoxType) (= (type |a#29#1#0|) BoxType)) (= (type |a#29#2#0|) BoxType)) (= (type |a#29#3#0|) (SeqType BoxType))) (= (type |a#29#4#0|) (SeqType BoxType))) (= (type |a#29#5#0|) (SeqType BoxType))) (= (type |a#29#6#0|) (SeqType BoxType))) (= (type |a#29#7#0|) (SeqType BoxType))) (= (type |a#29#8#0|) (MapType BoxType BoxType))) (< (BoxRank |a#29#1#0|) (DtRank (|#TSJ.Variables.Variables| |a#29#0#0| |a#29#1#0| |a#29#2#0| |a#29#3#0| |a#29#4#0| |a#29#5#0| |a#29#6#0| |a#29#7#0| |a#29#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1170| :pattern ( (|#TSJ.Variables.Variables| |a#29#0#0| |a#29#1#0| |a#29#2#0| |a#29#3#0| |a#29#4#0| |a#29#5#0| |a#29#6#0| |a#29#7#0| |a#29#8#0|)) )))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| T@U) (|a#30#2#0| T@U) (|a#30#3#0| T@U) (|a#30#4#0| T@U) (|a#30#5#0| T@U) (|a#30#6#0| T@U) (|a#30#7#0| T@U) (|a#30#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#30#0#0|) BoxType) (= (type |a#30#1#0|) BoxType)) (= (type |a#30#2#0|) BoxType)) (= (type |a#30#3#0|) (SeqType BoxType))) (= (type |a#30#4#0|) (SeqType BoxType))) (= (type |a#30#5#0|) (SeqType BoxType))) (= (type |a#30#6#0|) (SeqType BoxType))) (= (type |a#30#7#0|) (SeqType BoxType))) (= (type |a#30#8#0|) (MapType BoxType BoxType))) (= (TSJ.Variables.s3 (|#TSJ.Variables.Variables| |a#30#0#0| |a#30#1#0| |a#30#2#0| |a#30#3#0| |a#30#4#0| |a#30#5#0| |a#30#6#0| |a#30#7#0| |a#30#8#0|)) |a#30#2#0|)) :qid |TSJidfy.36:7| :skolemid |1171| :pattern ( (|#TSJ.Variables.Variables| |a#30#0#0| |a#30#1#0| |a#30#2#0| |a#30#3#0| |a#30#4#0| |a#30#5#0| |a#30#6#0| |a#30#7#0| |a#30#8#0|)) )))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| T@U) (|a#31#2#0| T@U) (|a#31#3#0| T@U) (|a#31#4#0| T@U) (|a#31#5#0| T@U) (|a#31#6#0| T@U) (|a#31#7#0| T@U) (|a#31#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#31#0#0|) BoxType) (= (type |a#31#1#0|) BoxType)) (= (type |a#31#2#0|) BoxType)) (= (type |a#31#3#0|) (SeqType BoxType))) (= (type |a#31#4#0|) (SeqType BoxType))) (= (type |a#31#5#0|) (SeqType BoxType))) (= (type |a#31#6#0|) (SeqType BoxType))) (= (type |a#31#7#0|) (SeqType BoxType))) (= (type |a#31#8#0|) (MapType BoxType BoxType))) (< (BoxRank |a#31#2#0|) (DtRank (|#TSJ.Variables.Variables| |a#31#0#0| |a#31#1#0| |a#31#2#0| |a#31#3#0| |a#31#4#0| |a#31#5#0| |a#31#6#0| |a#31#7#0| |a#31#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1172| :pattern ( (|#TSJ.Variables.Variables| |a#31#0#0| |a#31#1#0| |a#31#2#0| |a#31#3#0| |a#31#4#0| |a#31#5#0| |a#31#6#0| |a#31#7#0| |a#31#8#0|)) )))
(assert (forall ((|a#32#0#0| T@U) (|a#32#1#0| T@U) (|a#32#2#0| T@U) (|a#32#3#0| T@U) (|a#32#4#0| T@U) (|a#32#5#0| T@U) (|a#32#6#0| T@U) (|a#32#7#0| T@U) (|a#32#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#32#0#0|) BoxType) (= (type |a#32#1#0|) BoxType)) (= (type |a#32#2#0|) BoxType)) (= (type |a#32#3#0|) (SeqType BoxType))) (= (type |a#32#4#0|) (SeqType BoxType))) (= (type |a#32#5#0|) (SeqType BoxType))) (= (type |a#32#6#0|) (SeqType BoxType))) (= (type |a#32#7#0|) (SeqType BoxType))) (= (type |a#32#8#0|) (MapType BoxType BoxType))) (= (TSJ.Variables.j1 (|#TSJ.Variables.Variables| |a#32#0#0| |a#32#1#0| |a#32#2#0| |a#32#3#0| |a#32#4#0| |a#32#5#0| |a#32#6#0| |a#32#7#0| |a#32#8#0|)) |a#32#3#0|)) :qid |TSJidfy.36:7| :skolemid |1173| :pattern ( (|#TSJ.Variables.Variables| |a#32#0#0| |a#32#1#0| |a#32#2#0| |a#32#3#0| |a#32#4#0| |a#32#5#0| |a#32#6#0| |a#32#7#0| |a#32#8#0|)) )))
(assert (forall ((|a#33#0#0| T@U) (|a#33#1#0| T@U) (|a#33#2#0| T@U) (|a#33#3#0| T@U) (|a#33#4#0| T@U) (|a#33#5#0| T@U) (|a#33#6#0| T@U) (|a#33#7#0| T@U) (|a#33#8#0| T@U) (i@@31 Int) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#33#0#0|) BoxType) (= (type |a#33#1#0|) BoxType)) (= (type |a#33#2#0|) BoxType)) (= (type |a#33#3#0|) (SeqType BoxType))) (= (type |a#33#4#0|) (SeqType BoxType))) (= (type |a#33#5#0|) (SeqType BoxType))) (= (type |a#33#6#0|) (SeqType BoxType))) (= (type |a#33#7#0|) (SeqType BoxType))) (= (type |a#33#8#0|) (MapType BoxType BoxType))) (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#33#3#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#33#3#0| i@@31))) (DtRank (|#TSJ.Variables.Variables| |a#33#0#0| |a#33#1#0| |a#33#2#0| |a#33#3#0| |a#33#4#0| |a#33#5#0| |a#33#6#0| |a#33#7#0| |a#33#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1174| :pattern ( (|Seq#Index| |a#33#3#0| i@@31) (|#TSJ.Variables.Variables| |a#33#0#0| |a#33#1#0| |a#33#2#0| |a#33#3#0| |a#33#4#0| |a#33#5#0| |a#33#6#0| |a#33#7#0| |a#33#8#0|)) )))
(assert (forall ((|a#34#0#0| T@U) (|a#34#1#0| T@U) (|a#34#2#0| T@U) (|a#34#3#0| T@U) (|a#34#4#0| T@U) (|a#34#5#0| T@U) (|a#34#6#0| T@U) (|a#34#7#0| T@U) (|a#34#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#34#0#0|) BoxType) (= (type |a#34#1#0|) BoxType)) (= (type |a#34#2#0|) BoxType)) (= (type |a#34#3#0|) (SeqType BoxType))) (= (type |a#34#4#0|) (SeqType BoxType))) (= (type |a#34#5#0|) (SeqType BoxType))) (= (type |a#34#6#0|) (SeqType BoxType))) (= (type |a#34#7#0|) (SeqType BoxType))) (= (type |a#34#8#0|) (MapType BoxType BoxType))) (< (|Seq#Rank| |a#34#3#0|) (DtRank (|#TSJ.Variables.Variables| |a#34#0#0| |a#34#1#0| |a#34#2#0| |a#34#3#0| |a#34#4#0| |a#34#5#0| |a#34#6#0| |a#34#7#0| |a#34#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1175| :pattern ( (|#TSJ.Variables.Variables| |a#34#0#0| |a#34#1#0| |a#34#2#0| |a#34#3#0| |a#34#4#0| |a#34#5#0| |a#34#6#0| |a#34#7#0| |a#34#8#0|)) )))
(assert (forall ((|a#35#0#0| T@U) (|a#35#1#0| T@U) (|a#35#2#0| T@U) (|a#35#3#0| T@U) (|a#35#4#0| T@U) (|a#35#5#0| T@U) (|a#35#6#0| T@U) (|a#35#7#0| T@U) (|a#35#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#35#0#0|) BoxType) (= (type |a#35#1#0|) BoxType)) (= (type |a#35#2#0|) BoxType)) (= (type |a#35#3#0|) (SeqType BoxType))) (= (type |a#35#4#0|) (SeqType BoxType))) (= (type |a#35#5#0|) (SeqType BoxType))) (= (type |a#35#6#0|) (SeqType BoxType))) (= (type |a#35#7#0|) (SeqType BoxType))) (= (type |a#35#8#0|) (MapType BoxType BoxType))) (= (TSJ.Variables.j2 (|#TSJ.Variables.Variables| |a#35#0#0| |a#35#1#0| |a#35#2#0| |a#35#3#0| |a#35#4#0| |a#35#5#0| |a#35#6#0| |a#35#7#0| |a#35#8#0|)) |a#35#4#0|)) :qid |TSJidfy.36:7| :skolemid |1176| :pattern ( (|#TSJ.Variables.Variables| |a#35#0#0| |a#35#1#0| |a#35#2#0| |a#35#3#0| |a#35#4#0| |a#35#5#0| |a#35#6#0| |a#35#7#0| |a#35#8#0|)) )))
(assert (forall ((|a#36#0#0| T@U) (|a#36#1#0| T@U) (|a#36#2#0| T@U) (|a#36#3#0| T@U) (|a#36#4#0| T@U) (|a#36#5#0| T@U) (|a#36#6#0| T@U) (|a#36#7#0| T@U) (|a#36#8#0| T@U) (i@@32 Int) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#36#0#0|) BoxType) (= (type |a#36#1#0|) BoxType)) (= (type |a#36#2#0|) BoxType)) (= (type |a#36#3#0|) (SeqType BoxType))) (= (type |a#36#4#0|) (SeqType BoxType))) (= (type |a#36#5#0|) (SeqType BoxType))) (= (type |a#36#6#0|) (SeqType BoxType))) (= (type |a#36#7#0|) (SeqType BoxType))) (= (type |a#36#8#0|) (MapType BoxType BoxType))) (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#36#4#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#36#4#0| i@@32))) (DtRank (|#TSJ.Variables.Variables| |a#36#0#0| |a#36#1#0| |a#36#2#0| |a#36#3#0| |a#36#4#0| |a#36#5#0| |a#36#6#0| |a#36#7#0| |a#36#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1177| :pattern ( (|Seq#Index| |a#36#4#0| i@@32) (|#TSJ.Variables.Variables| |a#36#0#0| |a#36#1#0| |a#36#2#0| |a#36#3#0| |a#36#4#0| |a#36#5#0| |a#36#6#0| |a#36#7#0| |a#36#8#0|)) )))
(assert (forall ((|a#37#0#0| T@U) (|a#37#1#0| T@U) (|a#37#2#0| T@U) (|a#37#3#0| T@U) (|a#37#4#0| T@U) (|a#37#5#0| T@U) (|a#37#6#0| T@U) (|a#37#7#0| T@U) (|a#37#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#37#0#0|) BoxType) (= (type |a#37#1#0|) BoxType)) (= (type |a#37#2#0|) BoxType)) (= (type |a#37#3#0|) (SeqType BoxType))) (= (type |a#37#4#0|) (SeqType BoxType))) (= (type |a#37#5#0|) (SeqType BoxType))) (= (type |a#37#6#0|) (SeqType BoxType))) (= (type |a#37#7#0|) (SeqType BoxType))) (= (type |a#37#8#0|) (MapType BoxType BoxType))) (< (|Seq#Rank| |a#37#4#0|) (DtRank (|#TSJ.Variables.Variables| |a#37#0#0| |a#37#1#0| |a#37#2#0| |a#37#3#0| |a#37#4#0| |a#37#5#0| |a#37#6#0| |a#37#7#0| |a#37#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1178| :pattern ( (|#TSJ.Variables.Variables| |a#37#0#0| |a#37#1#0| |a#37#2#0| |a#37#3#0| |a#37#4#0| |a#37#5#0| |a#37#6#0| |a#37#7#0| |a#37#8#0|)) )))
(assert (forall ((|a#38#0#0| T@U) (|a#38#1#0| T@U) (|a#38#2#0| T@U) (|a#38#3#0| T@U) (|a#38#4#0| T@U) (|a#38#5#0| T@U) (|a#38#6#0| T@U) (|a#38#7#0| T@U) (|a#38#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#38#0#0|) BoxType) (= (type |a#38#1#0|) BoxType)) (= (type |a#38#2#0|) BoxType)) (= (type |a#38#3#0|) (SeqType BoxType))) (= (type |a#38#4#0|) (SeqType BoxType))) (= (type |a#38#5#0|) (SeqType BoxType))) (= (type |a#38#6#0|) (SeqType BoxType))) (= (type |a#38#7#0|) (SeqType BoxType))) (= (type |a#38#8#0|) (MapType BoxType BoxType))) (= (TSJ.Variables.j3 (|#TSJ.Variables.Variables| |a#38#0#0| |a#38#1#0| |a#38#2#0| |a#38#3#0| |a#38#4#0| |a#38#5#0| |a#38#6#0| |a#38#7#0| |a#38#8#0|)) |a#38#5#0|)) :qid |TSJidfy.36:7| :skolemid |1179| :pattern ( (|#TSJ.Variables.Variables| |a#38#0#0| |a#38#1#0| |a#38#2#0| |a#38#3#0| |a#38#4#0| |a#38#5#0| |a#38#6#0| |a#38#7#0| |a#38#8#0|)) )))
(assert (forall ((|a#39#0#0| T@U) (|a#39#1#0| T@U) (|a#39#2#0| T@U) (|a#39#3#0| T@U) (|a#39#4#0| T@U) (|a#39#5#0| T@U) (|a#39#6#0| T@U) (|a#39#7#0| T@U) (|a#39#8#0| T@U) (i@@33 Int) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#39#0#0|) BoxType) (= (type |a#39#1#0|) BoxType)) (= (type |a#39#2#0|) BoxType)) (= (type |a#39#3#0|) (SeqType BoxType))) (= (type |a#39#4#0|) (SeqType BoxType))) (= (type |a#39#5#0|) (SeqType BoxType))) (= (type |a#39#6#0|) (SeqType BoxType))) (= (type |a#39#7#0|) (SeqType BoxType))) (= (type |a#39#8#0|) (MapType BoxType BoxType))) (and (<= 0 i@@33) (< i@@33 (|Seq#Length| |a#39#5#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#39#5#0| i@@33))) (DtRank (|#TSJ.Variables.Variables| |a#39#0#0| |a#39#1#0| |a#39#2#0| |a#39#3#0| |a#39#4#0| |a#39#5#0| |a#39#6#0| |a#39#7#0| |a#39#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1180| :pattern ( (|Seq#Index| |a#39#5#0| i@@33) (|#TSJ.Variables.Variables| |a#39#0#0| |a#39#1#0| |a#39#2#0| |a#39#3#0| |a#39#4#0| |a#39#5#0| |a#39#6#0| |a#39#7#0| |a#39#8#0|)) )))
(assert (forall ((|a#40#0#0| T@U) (|a#40#1#0| T@U) (|a#40#2#0| T@U) (|a#40#3#0| T@U) (|a#40#4#0| T@U) (|a#40#5#0| T@U) (|a#40#6#0| T@U) (|a#40#7#0| T@U) (|a#40#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#40#0#0|) BoxType) (= (type |a#40#1#0|) BoxType)) (= (type |a#40#2#0|) BoxType)) (= (type |a#40#3#0|) (SeqType BoxType))) (= (type |a#40#4#0|) (SeqType BoxType))) (= (type |a#40#5#0|) (SeqType BoxType))) (= (type |a#40#6#0|) (SeqType BoxType))) (= (type |a#40#7#0|) (SeqType BoxType))) (= (type |a#40#8#0|) (MapType BoxType BoxType))) (< (|Seq#Rank| |a#40#5#0|) (DtRank (|#TSJ.Variables.Variables| |a#40#0#0| |a#40#1#0| |a#40#2#0| |a#40#3#0| |a#40#4#0| |a#40#5#0| |a#40#6#0| |a#40#7#0| |a#40#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1181| :pattern ( (|#TSJ.Variables.Variables| |a#40#0#0| |a#40#1#0| |a#40#2#0| |a#40#3#0| |a#40#4#0| |a#40#5#0| |a#40#6#0| |a#40#7#0| |a#40#8#0|)) )))
(assert (forall ((|a#41#0#0| T@U) (|a#41#1#0| T@U) (|a#41#2#0| T@U) (|a#41#3#0| T@U) (|a#41#4#0| T@U) (|a#41#5#0| T@U) (|a#41#6#0| T@U) (|a#41#7#0| T@U) (|a#41#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#41#0#0|) BoxType) (= (type |a#41#1#0|) BoxType)) (= (type |a#41#2#0|) BoxType)) (= (type |a#41#3#0|) (SeqType BoxType))) (= (type |a#41#4#0|) (SeqType BoxType))) (= (type |a#41#5#0|) (SeqType BoxType))) (= (type |a#41#6#0|) (SeqType BoxType))) (= (type |a#41#7#0|) (SeqType BoxType))) (= (type |a#41#8#0|) (MapType BoxType BoxType))) (= (TSJ.Variables.j__gamma (|#TSJ.Variables.Variables| |a#41#0#0| |a#41#1#0| |a#41#2#0| |a#41#3#0| |a#41#4#0| |a#41#5#0| |a#41#6#0| |a#41#7#0| |a#41#8#0|)) |a#41#6#0|)) :qid |TSJidfy.36:7| :skolemid |1182| :pattern ( (|#TSJ.Variables.Variables| |a#41#0#0| |a#41#1#0| |a#41#2#0| |a#41#3#0| |a#41#4#0| |a#41#5#0| |a#41#6#0| |a#41#7#0| |a#41#8#0|)) )))
(assert (forall ((|a#42#0#0| T@U) (|a#42#1#0| T@U) (|a#42#2#0| T@U) (|a#42#3#0| T@U) (|a#42#4#0| T@U) (|a#42#5#0| T@U) (|a#42#6#0| T@U) (|a#42#7#0| T@U) (|a#42#8#0| T@U) (i@@34 Int) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#42#0#0|) BoxType) (= (type |a#42#1#0|) BoxType)) (= (type |a#42#2#0|) BoxType)) (= (type |a#42#3#0|) (SeqType BoxType))) (= (type |a#42#4#0|) (SeqType BoxType))) (= (type |a#42#5#0|) (SeqType BoxType))) (= (type |a#42#6#0|) (SeqType BoxType))) (= (type |a#42#7#0|) (SeqType BoxType))) (= (type |a#42#8#0|) (MapType BoxType BoxType))) (and (<= 0 i@@34) (< i@@34 (|Seq#Length| |a#42#6#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#42#6#0| i@@34))) (DtRank (|#TSJ.Variables.Variables| |a#42#0#0| |a#42#1#0| |a#42#2#0| |a#42#3#0| |a#42#4#0| |a#42#5#0| |a#42#6#0| |a#42#7#0| |a#42#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1183| :pattern ( (|Seq#Index| |a#42#6#0| i@@34) (|#TSJ.Variables.Variables| |a#42#0#0| |a#42#1#0| |a#42#2#0| |a#42#3#0| |a#42#4#0| |a#42#5#0| |a#42#6#0| |a#42#7#0| |a#42#8#0|)) )))
(assert (forall ((|a#43#0#0| T@U) (|a#43#1#0| T@U) (|a#43#2#0| T@U) (|a#43#3#0| T@U) (|a#43#4#0| T@U) (|a#43#5#0| T@U) (|a#43#6#0| T@U) (|a#43#7#0| T@U) (|a#43#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#43#0#0|) BoxType) (= (type |a#43#1#0|) BoxType)) (= (type |a#43#2#0|) BoxType)) (= (type |a#43#3#0|) (SeqType BoxType))) (= (type |a#43#4#0|) (SeqType BoxType))) (= (type |a#43#5#0|) (SeqType BoxType))) (= (type |a#43#6#0|) (SeqType BoxType))) (= (type |a#43#7#0|) (SeqType BoxType))) (= (type |a#43#8#0|) (MapType BoxType BoxType))) (< (|Seq#Rank| |a#43#6#0|) (DtRank (|#TSJ.Variables.Variables| |a#43#0#0| |a#43#1#0| |a#43#2#0| |a#43#3#0| |a#43#4#0| |a#43#5#0| |a#43#6#0| |a#43#7#0| |a#43#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1184| :pattern ( (|#TSJ.Variables.Variables| |a#43#0#0| |a#43#1#0| |a#43#2#0| |a#43#3#0| |a#43#4#0| |a#43#5#0| |a#43#6#0| |a#43#7#0| |a#43#8#0|)) )))
(assert (forall ((|a#44#0#0| T@U) (|a#44#1#0| T@U) (|a#44#2#0| T@U) (|a#44#3#0| T@U) (|a#44#4#0| T@U) (|a#44#5#0| T@U) (|a#44#6#0| T@U) (|a#44#7#0| T@U) (|a#44#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#44#0#0|) BoxType) (= (type |a#44#1#0|) BoxType)) (= (type |a#44#2#0|) BoxType)) (= (type |a#44#3#0|) (SeqType BoxType))) (= (type |a#44#4#0|) (SeqType BoxType))) (= (type |a#44#5#0|) (SeqType BoxType))) (= (type |a#44#6#0|) (SeqType BoxType))) (= (type |a#44#7#0|) (SeqType BoxType))) (= (type |a#44#8#0|) (MapType BoxType BoxType))) (= (TSJ.Variables.j__delta (|#TSJ.Variables.Variables| |a#44#0#0| |a#44#1#0| |a#44#2#0| |a#44#3#0| |a#44#4#0| |a#44#5#0| |a#44#6#0| |a#44#7#0| |a#44#8#0|)) |a#44#7#0|)) :qid |TSJidfy.36:7| :skolemid |1185| :pattern ( (|#TSJ.Variables.Variables| |a#44#0#0| |a#44#1#0| |a#44#2#0| |a#44#3#0| |a#44#4#0| |a#44#5#0| |a#44#6#0| |a#44#7#0| |a#44#8#0|)) )))
(assert (forall ((|a#45#0#0| T@U) (|a#45#1#0| T@U) (|a#45#2#0| T@U) (|a#45#3#0| T@U) (|a#45#4#0| T@U) (|a#45#5#0| T@U) (|a#45#6#0| T@U) (|a#45#7#0| T@U) (|a#45#8#0| T@U) (i@@35 Int) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |a#45#0#0|) BoxType) (= (type |a#45#1#0|) BoxType)) (= (type |a#45#2#0|) BoxType)) (= (type |a#45#3#0|) (SeqType BoxType))) (= (type |a#45#4#0|) (SeqType BoxType))) (= (type |a#45#5#0|) (SeqType BoxType))) (= (type |a#45#6#0|) (SeqType BoxType))) (= (type |a#45#7#0|) (SeqType BoxType))) (= (type |a#45#8#0|) (MapType BoxType BoxType))) (and (<= 0 i@@35) (< i@@35 (|Seq#Length| |a#45#7#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#45#7#0| i@@35))) (DtRank (|#TSJ.Variables.Variables| |a#45#0#0| |a#45#1#0| |a#45#2#0| |a#45#3#0| |a#45#4#0| |a#45#5#0| |a#45#6#0| |a#45#7#0| |a#45#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1186| :pattern ( (|Seq#Index| |a#45#7#0| i@@35) (|#TSJ.Variables.Variables| |a#45#0#0| |a#45#1#0| |a#45#2#0| |a#45#3#0| |a#45#4#0| |a#45#5#0| |a#45#6#0| |a#45#7#0| |a#45#8#0|)) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) (|a#46#2#0| T@U) (|a#46#3#0| T@U) (|a#46#4#0| T@U) (|a#46#5#0| T@U) (|a#46#6#0| T@U) (|a#46#7#0| T@U) (|a#46#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#46#0#0|) BoxType) (= (type |a#46#1#0|) BoxType)) (= (type |a#46#2#0|) BoxType)) (= (type |a#46#3#0|) (SeqType BoxType))) (= (type |a#46#4#0|) (SeqType BoxType))) (= (type |a#46#5#0|) (SeqType BoxType))) (= (type |a#46#6#0|) (SeqType BoxType))) (= (type |a#46#7#0|) (SeqType BoxType))) (= (type |a#46#8#0|) (MapType BoxType BoxType))) (< (|Seq#Rank| |a#46#7#0|) (DtRank (|#TSJ.Variables.Variables| |a#46#0#0| |a#46#1#0| |a#46#2#0| |a#46#3#0| |a#46#4#0| |a#46#5#0| |a#46#6#0| |a#46#7#0| |a#46#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1187| :pattern ( (|#TSJ.Variables.Variables| |a#46#0#0| |a#46#1#0| |a#46#2#0| |a#46#3#0| |a#46#4#0| |a#46#5#0| |a#46#6#0| |a#46#7#0| |a#46#8#0|)) )))
(assert (forall ((|a#47#0#0| T@U) (|a#47#1#0| T@U) (|a#47#2#0| T@U) (|a#47#3#0| T@U) (|a#47#4#0| T@U) (|a#47#5#0| T@U) (|a#47#6#0| T@U) (|a#47#7#0| T@U) (|a#47#8#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |a#47#0#0|) BoxType) (= (type |a#47#1#0|) BoxType)) (= (type |a#47#2#0|) BoxType)) (= (type |a#47#3#0|) (SeqType BoxType))) (= (type |a#47#4#0|) (SeqType BoxType))) (= (type |a#47#5#0|) (SeqType BoxType))) (= (type |a#47#6#0|) (SeqType BoxType))) (= (type |a#47#7#0|) (SeqType BoxType))) (= (type |a#47#8#0|) (MapType BoxType BoxType))) (= (TSJ.Variables.outstandingSyncReqs (|#TSJ.Variables.Variables| |a#47#0#0| |a#47#1#0| |a#47#2#0| |a#47#3#0| |a#47#4#0| |a#47#5#0| |a#47#6#0| |a#47#7#0| |a#47#8#0|)) |a#47#8#0|)) :qid |TSJidfy.36:7| :skolemid |1188| :pattern ( (|#TSJ.Variables.Variables| |a#47#0#0| |a#47#1#0| |a#47#2#0| |a#47#3#0| |a#47#4#0| |a#47#5#0| |a#47#6#0| |a#47#7#0| |a#47#8#0|)) )))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| T@U) (|a#48#2#0| T@U) (|a#48#3#0| T@U) (|a#48#4#0| T@U) (|a#48#5#0| T@U) (|a#48#6#0| T@U) (|a#48#7#0| T@U) (|a#48#8#0| T@U) (d@@26 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |a#48#0#0|) BoxType) (= (type |a#48#1#0|) BoxType)) (= (type |a#48#2#0|) BoxType)) (= (type |a#48#3#0|) (SeqType BoxType))) (= (type |a#48#4#0|) (SeqType BoxType))) (= (type |a#48#5#0|) (SeqType BoxType))) (= (type |a#48#6#0|) (SeqType BoxType))) (= (type |a#48#7#0|) (SeqType BoxType))) (= (type |a#48#8#0|) (MapType BoxType BoxType))) (= (type d@@26) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#48#8#0|) ($Box d@@26)))) (< (DtRank d@@26) (DtRank (|#TSJ.Variables.Variables| |a#48#0#0| |a#48#1#0| |a#48#2#0| |a#48#3#0| |a#48#4#0| |a#48#5#0| |a#48#6#0| |a#48#7#0| |a#48#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1189| :pattern ( (MapType0Select (|Map#Domain| |a#48#8#0|) ($Box d@@26)) (|#TSJ.Variables.Variables| |a#48#0#0| |a#48#1#0| |a#48#2#0| |a#48#3#0| |a#48#4#0| |a#48#5#0| |a#48#6#0| |a#48#7#0| |a#48#8#0|)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) (|a#49#2#0| T@U) (|a#49#3#0| T@U) (|a#49#4#0| T@U) (|a#49#5#0| T@U) (|a#49#6#0| T@U) (|a#49#7#0| T@U) (|a#49#8#0| T@U) (bx@@114 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |a#49#0#0|) BoxType) (= (type |a#49#1#0|) BoxType)) (= (type |a#49#2#0|) BoxType)) (= (type |a#49#3#0|) (SeqType BoxType))) (= (type |a#49#4#0|) (SeqType BoxType))) (= (type |a#49#5#0|) (SeqType BoxType))) (= (type |a#49#6#0|) (SeqType BoxType))) (= (type |a#49#7#0|) (SeqType BoxType))) (= (type |a#49#8#0|) (MapType BoxType BoxType))) (= (type bx@@114) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#49#8#0|) bx@@114))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#49#8#0|) bx@@114))) (DtRank (|#TSJ.Variables.Variables| |a#49#0#0| |a#49#1#0| |a#49#2#0| |a#49#3#0| |a#49#4#0| |a#49#5#0| |a#49#6#0| |a#49#7#0| |a#49#8#0|)))) :qid |TSJidfy.36:7| :skolemid |1190| :pattern ( (MapType0Select (|Map#Domain| |a#49#8#0|) bx@@114) (|#TSJ.Variables.Variables| |a#49#0#0| |a#49#1#0| |a#49#2#0| |a#49#3#0| |a#49#4#0| |a#49#5#0| |a#49#6#0| |a#49#7#0| |a#49#8#0|)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (and (= (type d@@27) DatatypeTypeType) (|$IsA#TSJ.Variables| d@@27)) (TSJ.Variables.Variables_q d@@27)) :qid |unknown.0:0| :skolemid |1191| :pattern ( (|$IsA#TSJ.Variables| d@@27)) )))
(assert (forall ((d@@28 T@U) ) (!  (=> (and (= (type d@@28) DatatypeTypeType) ($Is d@@28 Tclass.TSJ.Variables)) (TSJ.Variables.Variables_q d@@28)) :qid |unknown.0:0| :skolemid |1192| :pattern ( (TSJ.Variables.Variables_q d@@28) ($Is d@@28 Tclass.TSJ.Variables)) )))
(assert (forall ((a@@136 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) true) (and (=> (|TSJ.Variables#Equal| a@@136 b@@67) (and (and (and (and (and (and (and (and (= (TSJ.Variables.s1 a@@136) (TSJ.Variables.s1 b@@67)) (= (TSJ.Variables.s2 a@@136) (TSJ.Variables.s2 b@@67))) (= (TSJ.Variables.s3 a@@136) (TSJ.Variables.s3 b@@67))) (|Seq#Equal| (TSJ.Variables.j1 a@@136) (TSJ.Variables.j1 b@@67))) (|Seq#Equal| (TSJ.Variables.j2 a@@136) (TSJ.Variables.j2 b@@67))) (|Seq#Equal| (TSJ.Variables.j3 a@@136) (TSJ.Variables.j3 b@@67))) (|Seq#Equal| (TSJ.Variables.j__gamma a@@136) (TSJ.Variables.j__gamma b@@67))) (|Seq#Equal| (TSJ.Variables.j__delta a@@136) (TSJ.Variables.j__delta b@@67))) (|Map#Equal| (TSJ.Variables.outstandingSyncReqs a@@136) (TSJ.Variables.outstandingSyncReqs b@@67)))) (=> (and (and (and (and (and (and (and (and (= (TSJ.Variables.s1 a@@136) (TSJ.Variables.s1 b@@67)) (= (TSJ.Variables.s2 a@@136) (TSJ.Variables.s2 b@@67))) (= (TSJ.Variables.s3 a@@136) (TSJ.Variables.s3 b@@67))) (|Seq#Equal| (TSJ.Variables.j1 a@@136) (TSJ.Variables.j1 b@@67))) (|Seq#Equal| (TSJ.Variables.j2 a@@136) (TSJ.Variables.j2 b@@67))) (|Seq#Equal| (TSJ.Variables.j3 a@@136) (TSJ.Variables.j3 b@@67))) (|Seq#Equal| (TSJ.Variables.j__gamma a@@136) (TSJ.Variables.j__gamma b@@67))) (|Seq#Equal| (TSJ.Variables.j__delta a@@136) (TSJ.Variables.j__delta b@@67))) (|Map#Equal| (TSJ.Variables.outstandingSyncReqs a@@136) (TSJ.Variables.outstandingSyncReqs b@@67))) (|TSJ.Variables#Equal| a@@136 b@@67)))) :qid |unknown.0:0| :skolemid |1193| :pattern ( (|TSJ.Variables#Equal| a@@136 b@@67)) )))
(assert (forall ((a@@137 T@U) (b@@68 T@U) ) (!  (=> (and (= (type a@@137) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (=> (|TSJ.Variables#Equal| a@@137 b@@68) (= a@@137 b@@68)) (=> (= a@@137 b@@68) (|TSJ.Variables#Equal| a@@137 b@@68)))) :qid |unknown.0:0| :skolemid |1194| :pattern ( (|TSJ.Variables#Equal| a@@137 b@@68)) )))
(assert (= (type |#TSJ.Step.CrashStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#TSJ.Step.CrashStep|) |##TSJ.Step.CrashStep|))
(assert (forall ((d@@29 T@U) ) (!  (=> (= (type d@@29) DatatypeTypeType) (and (=> (TSJ.Step.CrashStep_q d@@29) (= (DatatypeCtorId d@@29) |##TSJ.Step.CrashStep|)) (=> (= (DatatypeCtorId d@@29) |##TSJ.Step.CrashStep|) (TSJ.Step.CrashStep_q d@@29)))) :qid |unknown.0:0| :skolemid |1195| :pattern ( (TSJ.Step.CrashStep_q d@@29)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (and (= (type d@@30) DatatypeTypeType) (TSJ.Step.CrashStep_q d@@30)) (= d@@30 |#TSJ.Step.CrashStep|)) :qid |unknown.0:0| :skolemid |1196| :pattern ( (TSJ.Step.CrashStep_q d@@30)) )))
(assert (= (type Tclass.TSJ.Step) TyType))
(assert (= (Tag Tclass.TSJ.Step) Tagclass.TSJ.Step))
(assert (forall ((bx@@115 T@U) ) (!  (=> (and (= (type bx@@115) BoxType) ($IsBox bx@@115 Tclass.TSJ.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@115)) bx@@115) ($Is ($Unbox DatatypeTypeType bx@@115) Tclass.TSJ.Step))) :qid |unknown.0:0| :skolemid |1197| :pattern ( ($IsBox bx@@115 Tclass.TSJ.Step)) )))
(assert ($Is |#TSJ.Step.CrashStep| Tclass.TSJ.Step))
(assert (forall (($h@@40 T@U) ) (!  (=> (and (= (type $h@@40) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@40)) ($IsAlloc |#TSJ.Step.CrashStep| Tclass.TSJ.Step $h@@40)) :qid |DafnyPre.521:12| :skolemid |1198| :pattern ( ($IsAlloc |#TSJ.Step.CrashStep| Tclass.TSJ.Step $h@@40)) )))
(assert (= |#TSJ.Step.CrashStep| (Lit |#TSJ.Step.CrashStep|)))
(assert (= (type |#TSJ.Step.Move1to2Step|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#TSJ.Step.Move1to2Step|) |##TSJ.Step.Move1to2Step|))
(assert (forall ((d@@31 T@U) ) (!  (=> (= (type d@@31) DatatypeTypeType) (and (=> (TSJ.Step.Move1to2Step_q d@@31) (= (DatatypeCtorId d@@31) |##TSJ.Step.Move1to2Step|)) (=> (= (DatatypeCtorId d@@31) |##TSJ.Step.Move1to2Step|) (TSJ.Step.Move1to2Step_q d@@31)))) :qid |unknown.0:0| :skolemid |1199| :pattern ( (TSJ.Step.Move1to2Step_q d@@31)) )))
(assert (forall ((d@@32 T@U) ) (!  (=> (and (= (type d@@32) DatatypeTypeType) (TSJ.Step.Move1to2Step_q d@@32)) (= d@@32 |#TSJ.Step.Move1to2Step|)) :qid |unknown.0:0| :skolemid |1200| :pattern ( (TSJ.Step.Move1to2Step_q d@@32)) )))
(assert ($Is |#TSJ.Step.Move1to2Step| Tclass.TSJ.Step))
(assert (forall (($h@@41 T@U) ) (!  (=> (and (= (type $h@@41) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@41)) ($IsAlloc |#TSJ.Step.Move1to2Step| Tclass.TSJ.Step $h@@41)) :qid |DafnyPre.521:12| :skolemid |1201| :pattern ( ($IsAlloc |#TSJ.Step.Move1to2Step| Tclass.TSJ.Step $h@@41)) )))
(assert (= |#TSJ.Step.Move1to2Step| (Lit |#TSJ.Step.Move1to2Step|)))
(assert (= (type |#TSJ.Step.Move2to3Step|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#TSJ.Step.Move2to3Step|) |##TSJ.Step.Move2to3Step|))
(assert (forall ((d@@33 T@U) ) (!  (=> (= (type d@@33) DatatypeTypeType) (and (=> (TSJ.Step.Move2to3Step_q d@@33) (= (DatatypeCtorId d@@33) |##TSJ.Step.Move2to3Step|)) (=> (= (DatatypeCtorId d@@33) |##TSJ.Step.Move2to3Step|) (TSJ.Step.Move2to3Step_q d@@33)))) :qid |unknown.0:0| :skolemid |1202| :pattern ( (TSJ.Step.Move2to3Step_q d@@33)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (and (= (type d@@34) DatatypeTypeType) (TSJ.Step.Move2to3Step_q d@@34)) (= d@@34 |#TSJ.Step.Move2to3Step|)) :qid |unknown.0:0| :skolemid |1203| :pattern ( (TSJ.Step.Move2to3Step_q d@@34)) )))
(assert ($Is |#TSJ.Step.Move2to3Step| Tclass.TSJ.Step))
(assert (forall (($h@@42 T@U) ) (!  (=> (and (= (type $h@@42) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@42)) ($IsAlloc |#TSJ.Step.Move2to3Step| Tclass.TSJ.Step $h@@42)) :qid |DafnyPre.521:12| :skolemid |1204| :pattern ( ($IsAlloc |#TSJ.Step.Move2to3Step| Tclass.TSJ.Step $h@@42)) )))
(assert (= |#TSJ.Step.Move2to3Step| (Lit |#TSJ.Step.Move2to3Step|)))
(assert (= (type |#TSJ.Step.ExtendLog1Step|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#TSJ.Step.ExtendLog1Step|) |##TSJ.Step.ExtendLog1Step|))
(assert (forall ((d@@35 T@U) ) (!  (=> (= (type d@@35) DatatypeTypeType) (and (=> (TSJ.Step.ExtendLog1Step_q d@@35) (= (DatatypeCtorId d@@35) |##TSJ.Step.ExtendLog1Step|)) (=> (= (DatatypeCtorId d@@35) |##TSJ.Step.ExtendLog1Step|) (TSJ.Step.ExtendLog1Step_q d@@35)))) :qid |unknown.0:0| :skolemid |1205| :pattern ( (TSJ.Step.ExtendLog1Step_q d@@35)) )))
(assert (forall ((d@@36 T@U) ) (!  (=> (and (= (type d@@36) DatatypeTypeType) (TSJ.Step.ExtendLog1Step_q d@@36)) (= d@@36 |#TSJ.Step.ExtendLog1Step|)) :qid |unknown.0:0| :skolemid |1206| :pattern ( (TSJ.Step.ExtendLog1Step_q d@@36)) )))
(assert ($Is |#TSJ.Step.ExtendLog1Step| Tclass.TSJ.Step))
(assert (forall (($h@@43 T@U) ) (!  (=> (and (= (type $h@@43) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@43)) ($IsAlloc |#TSJ.Step.ExtendLog1Step| Tclass.TSJ.Step $h@@43)) :qid |DafnyPre.521:12| :skolemid |1207| :pattern ( ($IsAlloc |#TSJ.Step.ExtendLog1Step| Tclass.TSJ.Step $h@@43)) )))
(assert (= |#TSJ.Step.ExtendLog1Step| (Lit |#TSJ.Step.ExtendLog1Step|)))
(assert (= (type |#TSJ.Step.ExtendLog2Step|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#TSJ.Step.ExtendLog2Step|) |##TSJ.Step.ExtendLog2Step|))
(assert (forall ((d@@37 T@U) ) (!  (=> (= (type d@@37) DatatypeTypeType) (and (=> (TSJ.Step.ExtendLog2Step_q d@@37) (= (DatatypeCtorId d@@37) |##TSJ.Step.ExtendLog2Step|)) (=> (= (DatatypeCtorId d@@37) |##TSJ.Step.ExtendLog2Step|) (TSJ.Step.ExtendLog2Step_q d@@37)))) :qid |unknown.0:0| :skolemid |1208| :pattern ( (TSJ.Step.ExtendLog2Step_q d@@37)) )))
(assert (forall ((d@@38 T@U) ) (!  (=> (and (= (type d@@38) DatatypeTypeType) (TSJ.Step.ExtendLog2Step_q d@@38)) (= d@@38 |#TSJ.Step.ExtendLog2Step|)) :qid |unknown.0:0| :skolemid |1209| :pattern ( (TSJ.Step.ExtendLog2Step_q d@@38)) )))
(assert ($Is |#TSJ.Step.ExtendLog2Step| Tclass.TSJ.Step))
(assert (forall (($h@@44 T@U) ) (!  (=> (and (= (type $h@@44) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@44)) ($IsAlloc |#TSJ.Step.ExtendLog2Step| Tclass.TSJ.Step $h@@44)) :qid |DafnyPre.521:12| :skolemid |1210| :pattern ( ($IsAlloc |#TSJ.Step.ExtendLog2Step| Tclass.TSJ.Step $h@@44)) )))
(assert (= |#TSJ.Step.ExtendLog2Step| (Lit |#TSJ.Step.ExtendLog2Step|)))
(assert (= (type |#TSJ.Step.Move3Step|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#TSJ.Step.Move3Step|) |##TSJ.Step.Move3Step|))
(assert (forall ((d@@39 T@U) ) (!  (=> (= (type d@@39) DatatypeTypeType) (and (=> (TSJ.Step.Move3Step_q d@@39) (= (DatatypeCtorId d@@39) |##TSJ.Step.Move3Step|)) (=> (= (DatatypeCtorId d@@39) |##TSJ.Step.Move3Step|) (TSJ.Step.Move3Step_q d@@39)))) :qid |unknown.0:0| :skolemid |1211| :pattern ( (TSJ.Step.Move3Step_q d@@39)) )))
(assert (forall ((d@@40 T@U) ) (!  (=> (and (= (type d@@40) DatatypeTypeType) (TSJ.Step.Move3Step_q d@@40)) (= d@@40 |#TSJ.Step.Move3Step|)) :qid |unknown.0:0| :skolemid |1212| :pattern ( (TSJ.Step.Move3Step_q d@@40)) )))
(assert ($Is |#TSJ.Step.Move3Step| Tclass.TSJ.Step))
(assert (forall (($h@@45 T@U) ) (!  (=> (and (= (type $h@@45) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@45)) ($IsAlloc |#TSJ.Step.Move3Step| Tclass.TSJ.Step $h@@45)) :qid |DafnyPre.521:12| :skolemid |1213| :pattern ( ($IsAlloc |#TSJ.Step.Move3Step| Tclass.TSJ.Step $h@@45)) )))
(assert (= |#TSJ.Step.Move3Step| (Lit |#TSJ.Step.Move3Step|)))
(assert (forall ((arg0@@343 T@U) ) (! (= (type (|#TSJ.Step.ReplayStep| arg0@@343)) DatatypeTypeType) :qid |funType:#TSJ.Step.ReplayStep| :pattern ( (|#TSJ.Step.ReplayStep| arg0@@343)) )))
(assert (forall ((|a#80#0#0| T@U) ) (!  (=> (= (type |a#80#0#0|) DatatypeTypeType) (= (DatatypeCtorId (|#TSJ.Step.ReplayStep| |a#80#0#0|)) |##TSJ.Step.ReplayStep|)) :qid |TSJidfy.67:18| :skolemid |1214| :pattern ( (|#TSJ.Step.ReplayStep| |a#80#0#0|)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (= (type d@@41) DatatypeTypeType) (and (=> (TSJ.Step.ReplayStep_q d@@41) (= (DatatypeCtorId d@@41) |##TSJ.Step.ReplayStep|)) (=> (= (DatatypeCtorId d@@41) |##TSJ.Step.ReplayStep|) (TSJ.Step.ReplayStep_q d@@41)))) :qid |unknown.0:0| :skolemid |1215| :pattern ( (TSJ.Step.ReplayStep_q d@@41)) )))
(assert (forall ((d@@42 T@U) ) (!  (=> (and (= (type d@@42) DatatypeTypeType) (TSJ.Step.ReplayStep_q d@@42)) (exists ((|a#81#0#0| T@U) ) (!  (and (= (type |a#81#0#0|) DatatypeTypeType) (= d@@42 (|#TSJ.Step.ReplayStep| |a#81#0#0|))) :qid |TSJidfy.67:18| :skolemid |1216| :no-pattern (type |a#81#0#0|) :no-pattern (U_2_int |a#81#0#0|) :no-pattern (U_2_bool |a#81#0#0|) ))) :qid |unknown.0:0| :skolemid |1217| :pattern ( (TSJ.Step.ReplayStep_q d@@42)) )))
(assert (= (type Tclass.UI.Op) TyType))
(assert (= (Tag Tclass.UI.Op) Tagclass.UI.Op))
(assert (forall ((bx@@116 T@U) ) (!  (=> (and (= (type bx@@116) BoxType) ($IsBox bx@@116 Tclass.UI.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@116)) bx@@116) ($Is ($Unbox DatatypeTypeType bx@@116) Tclass.UI.Op))) :qid |unknown.0:0| :skolemid |1218| :pattern ( ($IsBox bx@@116 Tclass.UI.Op)) )))
(assert (forall ((|a#82#0#0| T@U) ) (!  (=> (= (type |a#82#0#0|) DatatypeTypeType) (and (=> ($Is (|#TSJ.Step.ReplayStep| |a#82#0#0|) Tclass.TSJ.Step) ($Is |a#82#0#0| Tclass.UI.Op)) (=> ($Is |a#82#0#0| Tclass.UI.Op) ($Is (|#TSJ.Step.ReplayStep| |a#82#0#0|) Tclass.TSJ.Step)))) :qid |TSJidfy.67:18| :skolemid |1219| :pattern ( ($Is (|#TSJ.Step.ReplayStep| |a#82#0#0|) Tclass.TSJ.Step)) )))
(assert (forall ((|a#83#0#0| T@U) ($h@@46 T@U) ) (!  (=> (and (and (= (type |a#83#0#0|) DatatypeTypeType) (= (type $h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@46)) (and (=> ($IsAlloc (|#TSJ.Step.ReplayStep| |a#83#0#0|) Tclass.TSJ.Step $h@@46) ($IsAlloc |a#83#0#0| Tclass.UI.Op $h@@46)) (=> ($IsAlloc |a#83#0#0| Tclass.UI.Op $h@@46) ($IsAlloc (|#TSJ.Step.ReplayStep| |a#83#0#0|) Tclass.TSJ.Step $h@@46)))) :qid |TSJidfy.67:18| :skolemid |1220| :pattern ( ($IsAlloc (|#TSJ.Step.ReplayStep| |a#83#0#0|) Tclass.TSJ.Step $h@@46)) )))
(assert (forall ((arg0@@344 T@U) ) (! (= (type (TSJ.Step.replayedUIOp arg0@@344)) DatatypeTypeType) :qid |funType:TSJ.Step.replayedUIOp| :pattern ( (TSJ.Step.replayedUIOp arg0@@344)) )))
(assert (forall ((d@@43 T@U) ($h@@47 T@U) ) (!  (=> (and (and (= (type d@@43) DatatypeTypeType) (= (type $h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@47) (and (TSJ.Step.ReplayStep_q d@@43) ($IsAlloc d@@43 Tclass.TSJ.Step $h@@47)))) ($IsAlloc (TSJ.Step.replayedUIOp d@@43) Tclass.UI.Op $h@@47)) :qid |unknown.0:0| :skolemid |1221| :pattern ( ($IsAlloc (TSJ.Step.replayedUIOp d@@43) Tclass.UI.Op $h@@47)) )))
(assert (forall ((|a#84#0#0| T@U) ) (!  (=> (= (type |a#84#0#0|) DatatypeTypeType) (= (|#TSJ.Step.ReplayStep| (Lit |a#84#0#0|)) (Lit (|#TSJ.Step.ReplayStep| |a#84#0#0|)))) :qid |TSJidfy.67:18| :skolemid |1222| :pattern ( (|#TSJ.Step.ReplayStep| (Lit |a#84#0#0|))) )))
(assert (forall ((|a#85#0#0| T@U) ) (!  (=> (= (type |a#85#0#0|) DatatypeTypeType) (= (TSJ.Step.replayedUIOp (|#TSJ.Step.ReplayStep| |a#85#0#0|)) |a#85#0#0|)) :qid |TSJidfy.67:18| :skolemid |1223| :pattern ( (|#TSJ.Step.ReplayStep| |a#85#0#0|)) )))
(assert (forall ((|a#86#0#0| T@U) ) (!  (=> (= (type |a#86#0#0|) DatatypeTypeType) (< (DtRank |a#86#0#0|) (DtRank (|#TSJ.Step.ReplayStep| |a#86#0#0|)))) :qid |TSJidfy.67:18| :skolemid |1224| :pattern ( (|#TSJ.Step.ReplayStep| |a#86#0#0|)) )))
(assert (forall ((arg0@@345 Int) ) (! (= (type (|#TSJ.Step.PushSyncStep| arg0@@345)) DatatypeTypeType) :qid |funType:#TSJ.Step.PushSyncStep| :pattern ( (|#TSJ.Step.PushSyncStep| arg0@@345)) )))
(assert (forall ((|a#87#0#0| Int) ) (! (= (DatatypeCtorId (|#TSJ.Step.PushSyncStep| |a#87#0#0|)) |##TSJ.Step.PushSyncStep|) :qid |TSJidfy.68:26| :skolemid |1225| :pattern ( (|#TSJ.Step.PushSyncStep| |a#87#0#0|)) )))
(assert (forall ((d@@44 T@U) ) (!  (=> (= (type d@@44) DatatypeTypeType) (and (=> (TSJ.Step.PushSyncStep_q d@@44) (= (DatatypeCtorId d@@44) |##TSJ.Step.PushSyncStep|)) (=> (= (DatatypeCtorId d@@44) |##TSJ.Step.PushSyncStep|) (TSJ.Step.PushSyncStep_q d@@44)))) :qid |unknown.0:0| :skolemid |1226| :pattern ( (TSJ.Step.PushSyncStep_q d@@44)) )))
(assert (forall ((d@@45 T@U) ) (!  (=> (and (= (type d@@45) DatatypeTypeType) (TSJ.Step.PushSyncStep_q d@@45)) (exists ((|a#88#0#0| Int) ) (! (= d@@45 (|#TSJ.Step.PushSyncStep| |a#88#0#0|)) :qid |TSJidfy.68:26| :skolemid |1227| ))) :qid |unknown.0:0| :skolemid |1228| :pattern ( (TSJ.Step.PushSyncStep_q d@@45)) )))
(assert (forall ((|a#89#0#0| Int) ) (!  (and (=> ($Is (|#TSJ.Step.PushSyncStep| |a#89#0#0|) Tclass.TSJ.Step) ($Is (int_2_U |a#89#0#0|) TInt)) (=> ($Is (int_2_U |a#89#0#0|) TInt) ($Is (|#TSJ.Step.PushSyncStep| |a#89#0#0|) Tclass.TSJ.Step))) :qid |TSJidfy.68:26| :skolemid |1229| :pattern ( ($Is (|#TSJ.Step.PushSyncStep| |a#89#0#0|) Tclass.TSJ.Step)) )))
(assert (forall ((|a#90#0#0| Int) ($h@@48 T@U) ) (!  (=> (and (= (type $h@@48) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@48)) (and (=> ($IsAlloc (|#TSJ.Step.PushSyncStep| |a#90#0#0|) Tclass.TSJ.Step $h@@48) ($IsAlloc (int_2_U |a#90#0#0|) TInt $h@@48)) (=> ($IsAlloc (int_2_U |a#90#0#0|) TInt $h@@48) ($IsAlloc (|#TSJ.Step.PushSyncStep| |a#90#0#0|) Tclass.TSJ.Step $h@@48)))) :qid |TSJidfy.68:26| :skolemid |1230| :pattern ( ($IsAlloc (|#TSJ.Step.PushSyncStep| |a#90#0#0|) Tclass.TSJ.Step $h@@48)) )))
(assert (forall ((d@@46 T@U) ($h@@49 T@U) ) (!  (=> (and (and (= (type d@@46) DatatypeTypeType) (= (type $h@@49) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@49) (and (TSJ.Step.PushSyncStep_q d@@46) ($IsAlloc d@@46 Tclass.TSJ.Step $h@@49)))) ($IsAlloc (int_2_U (TSJ.Step.id d@@46)) TInt $h@@49)) :qid |unknown.0:0| :skolemid |1231| :pattern ( ($IsAlloc (int_2_U (TSJ.Step.id d@@46)) TInt $h@@49)) )))
(assert (forall ((|a#91#0#0| Int) ) (! (= (|#TSJ.Step.PushSyncStep| (LitInt |a#91#0#0|)) (Lit (|#TSJ.Step.PushSyncStep| |a#91#0#0|))) :qid |TSJidfy.68:26| :skolemid |1232| :pattern ( (|#TSJ.Step.PushSyncStep| (LitInt |a#91#0#0|))) )))
(assert (forall ((|a#92#0#0| Int) ) (! (= (TSJ.Step.id (|#TSJ.Step.PushSyncStep| |a#92#0#0|)) |a#92#0#0|) :qid |TSJidfy.68:26| :skolemid |1233| :pattern ( (|#TSJ.Step.PushSyncStep| |a#92#0#0|)) )))
(assert (forall ((arg0@@346 Int) ) (! (= (type (|#TSJ.Step.PopSyncStep| arg0@@346)) DatatypeTypeType) :qid |funType:#TSJ.Step.PopSyncStep| :pattern ( (|#TSJ.Step.PopSyncStep| arg0@@346)) )))
(assert (forall ((|a#93#0#0| Int) ) (! (= (DatatypeCtorId (|#TSJ.Step.PopSyncStep| |a#93#0#0|)) |##TSJ.Step.PopSyncStep|) :qid |TSJidfy.69:25| :skolemid |1234| :pattern ( (|#TSJ.Step.PopSyncStep| |a#93#0#0|)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (= (type d@@47) DatatypeTypeType) (and (=> (TSJ.Step.PopSyncStep_q d@@47) (= (DatatypeCtorId d@@47) |##TSJ.Step.PopSyncStep|)) (=> (= (DatatypeCtorId d@@47) |##TSJ.Step.PopSyncStep|) (TSJ.Step.PopSyncStep_q d@@47)))) :qid |unknown.0:0| :skolemid |1235| :pattern ( (TSJ.Step.PopSyncStep_q d@@47)) )))
(assert (forall ((d@@48 T@U) ) (!  (=> (and (= (type d@@48) DatatypeTypeType) (TSJ.Step.PopSyncStep_q d@@48)) (exists ((|a#94#0#0| Int) ) (! (= d@@48 (|#TSJ.Step.PopSyncStep| |a#94#0#0|)) :qid |TSJidfy.69:25| :skolemid |1236| ))) :qid |unknown.0:0| :skolemid |1237| :pattern ( (TSJ.Step.PopSyncStep_q d@@48)) )))
(assert (forall ((|a#95#0#0| Int) ) (!  (and (=> ($Is (|#TSJ.Step.PopSyncStep| |a#95#0#0|) Tclass.TSJ.Step) ($Is (int_2_U |a#95#0#0|) TInt)) (=> ($Is (int_2_U |a#95#0#0|) TInt) ($Is (|#TSJ.Step.PopSyncStep| |a#95#0#0|) Tclass.TSJ.Step))) :qid |TSJidfy.69:25| :skolemid |1238| :pattern ( ($Is (|#TSJ.Step.PopSyncStep| |a#95#0#0|) Tclass.TSJ.Step)) )))
(assert (forall ((|a#96#0#0| Int) ($h@@50 T@U) ) (!  (=> (and (= (type $h@@50) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@50)) (and (=> ($IsAlloc (|#TSJ.Step.PopSyncStep| |a#96#0#0|) Tclass.TSJ.Step $h@@50) ($IsAlloc (int_2_U |a#96#0#0|) TInt $h@@50)) (=> ($IsAlloc (int_2_U |a#96#0#0|) TInt $h@@50) ($IsAlloc (|#TSJ.Step.PopSyncStep| |a#96#0#0|) Tclass.TSJ.Step $h@@50)))) :qid |TSJidfy.69:25| :skolemid |1239| :pattern ( ($IsAlloc (|#TSJ.Step.PopSyncStep| |a#96#0#0|) Tclass.TSJ.Step $h@@50)) )))
(assert (forall ((d@@49 T@U) ($h@@51 T@U) ) (!  (=> (and (and (= (type d@@49) DatatypeTypeType) (= (type $h@@51) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@51) (and (TSJ.Step.PopSyncStep_q d@@49) ($IsAlloc d@@49 Tclass.TSJ.Step $h@@51)))) ($IsAlloc (int_2_U (TSJ.Step.id d@@49)) TInt $h@@51)) :qid |unknown.0:0| :skolemid |1240| :pattern ( ($IsAlloc (int_2_U (TSJ.Step.id d@@49)) TInt $h@@51)) )))
(assert (forall ((|a#97#0#0| Int) ) (! (= (|#TSJ.Step.PopSyncStep| (LitInt |a#97#0#0|)) (Lit (|#TSJ.Step.PopSyncStep| |a#97#0#0|))) :qid |TSJidfy.69:25| :skolemid |1241| :pattern ( (|#TSJ.Step.PopSyncStep| (LitInt |a#97#0#0|))) )))
(assert (forall ((|a#98#0#0| Int) ) (! (= (TSJ.Step.id (|#TSJ.Step.PopSyncStep| |a#98#0#0|)) |a#98#0#0|) :qid |TSJidfy.69:25| :skolemid |1242| :pattern ( (|#TSJ.Step.PopSyncStep| |a#98#0#0|)) )))
(assert (= (type |#TSJ.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#TSJ.Step.StutterStep|) |##TSJ.Step.StutterStep|))
(assert (forall ((d@@50 T@U) ) (!  (=> (= (type d@@50) DatatypeTypeType) (and (=> (TSJ.Step.StutterStep_q d@@50) (= (DatatypeCtorId d@@50) |##TSJ.Step.StutterStep|)) (=> (= (DatatypeCtorId d@@50) |##TSJ.Step.StutterStep|) (TSJ.Step.StutterStep_q d@@50)))) :qid |unknown.0:0| :skolemid |1243| :pattern ( (TSJ.Step.StutterStep_q d@@50)) )))
(assert (forall ((d@@51 T@U) ) (!  (=> (and (= (type d@@51) DatatypeTypeType) (TSJ.Step.StutterStep_q d@@51)) (= d@@51 |#TSJ.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |1244| :pattern ( (TSJ.Step.StutterStep_q d@@51)) )))
(assert ($Is |#TSJ.Step.StutterStep| Tclass.TSJ.Step))
(assert (forall (($h@@52 T@U) ) (!  (=> (and (= (type $h@@52) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@52)) ($IsAlloc |#TSJ.Step.StutterStep| Tclass.TSJ.Step $h@@52)) :qid |DafnyPre.521:12| :skolemid |1245| :pattern ( ($IsAlloc |#TSJ.Step.StutterStep| Tclass.TSJ.Step $h@@52)) )))
(assert (= |#TSJ.Step.StutterStep| (Lit |#TSJ.Step.StutterStep|)))
(assert (forall ((d@@52 T@U) ) (!  (=> (and (= (type d@@52) DatatypeTypeType) (|$IsA#TSJ.Step| d@@52)) (or (or (or (or (or (or (or (or (or (TSJ.Step.CrashStep_q d@@52) (TSJ.Step.Move1to2Step_q d@@52)) (TSJ.Step.Move2to3Step_q d@@52)) (TSJ.Step.ExtendLog1Step_q d@@52)) (TSJ.Step.ExtendLog2Step_q d@@52)) (TSJ.Step.Move3Step_q d@@52)) (TSJ.Step.ReplayStep_q d@@52)) (TSJ.Step.PushSyncStep_q d@@52)) (TSJ.Step.PopSyncStep_q d@@52)) (TSJ.Step.StutterStep_q d@@52))) :qid |unknown.0:0| :skolemid |1246| :pattern ( (|$IsA#TSJ.Step| d@@52)) )))
(assert (forall ((d@@53 T@U) ) (!  (=> (and (= (type d@@53) DatatypeTypeType) ($Is d@@53 Tclass.TSJ.Step)) (or (or (or (or (or (or (or (or (or (TSJ.Step.CrashStep_q d@@53) (TSJ.Step.Move1to2Step_q d@@53)) (TSJ.Step.Move2to3Step_q d@@53)) (TSJ.Step.ExtendLog1Step_q d@@53)) (TSJ.Step.ExtendLog2Step_q d@@53)) (TSJ.Step.Move3Step_q d@@53)) (TSJ.Step.ReplayStep_q d@@53)) (TSJ.Step.PushSyncStep_q d@@53)) (TSJ.Step.PopSyncStep_q d@@53)) (TSJ.Step.StutterStep_q d@@53))) :qid |unknown.0:0| :skolemid |1247| :pattern ( (TSJ.Step.StutterStep_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) :pattern ( (TSJ.Step.PopSyncStep_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) :pattern ( (TSJ.Step.PushSyncStep_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) :pattern ( (TSJ.Step.ReplayStep_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) :pattern ( (TSJ.Step.Move3Step_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) :pattern ( (TSJ.Step.ExtendLog2Step_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) :pattern ( (TSJ.Step.ExtendLog1Step_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) :pattern ( (TSJ.Step.Move2to3Step_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) :pattern ( (TSJ.Step.Move1to2Step_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) :pattern ( (TSJ.Step.CrashStep_q d@@53) ($Is d@@53 Tclass.TSJ.Step)) )))
(assert (forall ((a@@138 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@138) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (TSJ.Step.CrashStep_q a@@138) (TSJ.Step.CrashStep_q b@@69))) (and (=> (|TSJ.Step#Equal| a@@138 b@@69) true) (=> true (|TSJ.Step#Equal| a@@138 b@@69)))) :qid |unknown.0:0| :skolemid |1248| :pattern ( (|TSJ.Step#Equal| a@@138 b@@69) (TSJ.Step.CrashStep_q a@@138)) :pattern ( (|TSJ.Step#Equal| a@@138 b@@69) (TSJ.Step.CrashStep_q b@@69)) )))
(assert (forall ((a@@139 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@139) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (TSJ.Step.Move1to2Step_q a@@139) (TSJ.Step.Move1to2Step_q b@@70))) (and (=> (|TSJ.Step#Equal| a@@139 b@@70) true) (=> true (|TSJ.Step#Equal| a@@139 b@@70)))) :qid |unknown.0:0| :skolemid |1249| :pattern ( (|TSJ.Step#Equal| a@@139 b@@70) (TSJ.Step.Move1to2Step_q a@@139)) :pattern ( (|TSJ.Step#Equal| a@@139 b@@70) (TSJ.Step.Move1to2Step_q b@@70)) )))
(assert (forall ((a@@140 T@U) (b@@71 T@U) ) (!  (=> (and (and (= (type a@@140) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (TSJ.Step.Move2to3Step_q a@@140) (TSJ.Step.Move2to3Step_q b@@71))) (and (=> (|TSJ.Step#Equal| a@@140 b@@71) true) (=> true (|TSJ.Step#Equal| a@@140 b@@71)))) :qid |unknown.0:0| :skolemid |1250| :pattern ( (|TSJ.Step#Equal| a@@140 b@@71) (TSJ.Step.Move2to3Step_q a@@140)) :pattern ( (|TSJ.Step#Equal| a@@140 b@@71) (TSJ.Step.Move2to3Step_q b@@71)) )))
(assert (forall ((a@@141 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@141) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (TSJ.Step.ExtendLog1Step_q a@@141) (TSJ.Step.ExtendLog1Step_q b@@72))) (and (=> (|TSJ.Step#Equal| a@@141 b@@72) true) (=> true (|TSJ.Step#Equal| a@@141 b@@72)))) :qid |unknown.0:0| :skolemid |1251| :pattern ( (|TSJ.Step#Equal| a@@141 b@@72) (TSJ.Step.ExtendLog1Step_q a@@141)) :pattern ( (|TSJ.Step#Equal| a@@141 b@@72) (TSJ.Step.ExtendLog1Step_q b@@72)) )))
(assert (forall ((a@@142 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@142) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (TSJ.Step.ExtendLog2Step_q a@@142) (TSJ.Step.ExtendLog2Step_q b@@73))) (and (=> (|TSJ.Step#Equal| a@@142 b@@73) true) (=> true (|TSJ.Step#Equal| a@@142 b@@73)))) :qid |unknown.0:0| :skolemid |1252| :pattern ( (|TSJ.Step#Equal| a@@142 b@@73) (TSJ.Step.ExtendLog2Step_q a@@142)) :pattern ( (|TSJ.Step#Equal| a@@142 b@@73) (TSJ.Step.ExtendLog2Step_q b@@73)) )))
(assert (forall ((a@@143 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@143) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (TSJ.Step.Move3Step_q a@@143) (TSJ.Step.Move3Step_q b@@74))) (and (=> (|TSJ.Step#Equal| a@@143 b@@74) true) (=> true (|TSJ.Step#Equal| a@@143 b@@74)))) :qid |unknown.0:0| :skolemid |1253| :pattern ( (|TSJ.Step#Equal| a@@143 b@@74) (TSJ.Step.Move3Step_q a@@143)) :pattern ( (|TSJ.Step#Equal| a@@143 b@@74) (TSJ.Step.Move3Step_q b@@74)) )))
(assert (forall ((a@@144 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@144) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (TSJ.Step.ReplayStep_q a@@144) (TSJ.Step.ReplayStep_q b@@75))) (and (=> (|TSJ.Step#Equal| a@@144 b@@75) (|UI.Op#Equal| (TSJ.Step.replayedUIOp a@@144) (TSJ.Step.replayedUIOp b@@75))) (=> (|UI.Op#Equal| (TSJ.Step.replayedUIOp a@@144) (TSJ.Step.replayedUIOp b@@75)) (|TSJ.Step#Equal| a@@144 b@@75)))) :qid |unknown.0:0| :skolemid |1254| :pattern ( (|TSJ.Step#Equal| a@@144 b@@75) (TSJ.Step.ReplayStep_q a@@144)) :pattern ( (|TSJ.Step#Equal| a@@144 b@@75) (TSJ.Step.ReplayStep_q b@@75)) )))
(assert (forall ((a@@145 T@U) (b@@76 T@U) ) (!  (=> (and (and (= (type a@@145) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (and (TSJ.Step.PushSyncStep_q a@@145) (TSJ.Step.PushSyncStep_q b@@76))) (and (=> (|TSJ.Step#Equal| a@@145 b@@76) (= (TSJ.Step.id a@@145) (TSJ.Step.id b@@76))) (=> (= (TSJ.Step.id a@@145) (TSJ.Step.id b@@76)) (|TSJ.Step#Equal| a@@145 b@@76)))) :qid |unknown.0:0| :skolemid |1255| :pattern ( (|TSJ.Step#Equal| a@@145 b@@76) (TSJ.Step.PushSyncStep_q a@@145)) :pattern ( (|TSJ.Step#Equal| a@@145 b@@76) (TSJ.Step.PushSyncStep_q b@@76)) )))
(assert (forall ((a@@146 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@146) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (TSJ.Step.PopSyncStep_q a@@146) (TSJ.Step.PopSyncStep_q b@@77))) (and (=> (|TSJ.Step#Equal| a@@146 b@@77) (= (TSJ.Step.id a@@146) (TSJ.Step.id b@@77))) (=> (= (TSJ.Step.id a@@146) (TSJ.Step.id b@@77)) (|TSJ.Step#Equal| a@@146 b@@77)))) :qid |unknown.0:0| :skolemid |1256| :pattern ( (|TSJ.Step#Equal| a@@146 b@@77) (TSJ.Step.PopSyncStep_q a@@146)) :pattern ( (|TSJ.Step#Equal| a@@146 b@@77) (TSJ.Step.PopSyncStep_q b@@77)) )))
(assert (forall ((a@@147 T@U) (b@@78 T@U) ) (!  (=> (and (and (= (type a@@147) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (TSJ.Step.StutterStep_q a@@147) (TSJ.Step.StutterStep_q b@@78))) (and (=> (|TSJ.Step#Equal| a@@147 b@@78) true) (=> true (|TSJ.Step#Equal| a@@147 b@@78)))) :qid |unknown.0:0| :skolemid |1257| :pattern ( (|TSJ.Step#Equal| a@@147 b@@78) (TSJ.Step.StutterStep_q a@@147)) :pattern ( (|TSJ.Step#Equal| a@@147 b@@78) (TSJ.Step.StutterStep_q b@@78)) )))
(assert (forall ((a@@148 T@U) (b@@79 T@U) ) (!  (=> (and (= (type a@@148) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (=> (|TSJ.Step#Equal| a@@148 b@@79) (= a@@148 b@@79)) (=> (= a@@148 b@@79) (|TSJ.Step#Equal| a@@148 b@@79)))) :qid |unknown.0:0| :skolemid |1258| :pattern ( (|TSJ.Step#Equal| a@@148 b@@79)) )))
(assert (= (type Tclass.TSJ.__default) TyType))
(assert (= (Tag Tclass.TSJ.__default) Tagclass.TSJ.__default))
(assert (forall ((bx@@117 T@U) ) (!  (=> (and (= (type bx@@117) BoxType) ($IsBox bx@@117 Tclass.TSJ.__default)) (and (= ($Box ($Unbox refType bx@@117)) bx@@117) ($Is ($Unbox refType bx@@117) Tclass.TSJ.__default))) :qid |unknown.0:0| :skolemid |1259| :pattern ( ($IsBox bx@@117 Tclass.TSJ.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.TSJ.__default) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.TSJ.__default))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.TSJ.__default)) ($Is $o@@9 Tclass.TSJ.__default)))) :qid |unknown.0:0| :skolemid |1260| :pattern ( ($Is $o@@9 Tclass.TSJ.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@53 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@53) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.TSJ.__default $h@@53) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.TSJ.__default $h@@53)))) :qid |unknown.0:0| :skolemid |1261| :pattern ( ($IsAlloc $o@@10 Tclass.TSJ.__default $h@@53)) )))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|k#0| T@U) (|s#0| T@U) ) (!  (=> (and (and (= (type |k#0|) DatatypeTypeType) (= (type |s#0|) DatatypeTypeType)) (or (|TSJ.__default.Init#canCall| |k#0| |s#0|) (and (not (= 4 $FunctionContextHeight)) (and ($Is |k#0| Tclass.TSJ.Constants) ($Is |s#0| Tclass.TSJ.Variables))))) true) :qid |TSJidfy.47:18| :skolemid |1262| :pattern ( (TSJ.__default.Init |k#0| |s#0|)) ))))
(assert (forall ((|k#0@@0| T@U) (|s#0@@0| T@U) ) (!  (=> (and (and (= (type |k#0@@0|) DatatypeTypeType) (= (type |s#0@@0|) DatatypeTypeType)) (and ($Is |k#0@@0| Tclass.TSJ.Constants) ($Is |s#0@@0| Tclass.TSJ.Variables))) (and (=> (|TSJ.__default.Init#requires| |k#0@@0| |s#0@@0|) true) (=> true (|TSJ.__default.Init#requires| |k#0@@0| |s#0@@0|)))) :qid |TSJidfy.47:18| :skolemid |1263| :pattern ( (|TSJ.__default.Init#requires| |k#0@@0| |s#0@@0|)) )))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|k#0@@1| T@U) (|s#0@@1| T@U) ) (!  (=> (and (and (= (type |k#0@@1|) DatatypeTypeType) (= (type |s#0@@1|) DatatypeTypeType)) (or (|TSJ.__default.Init#canCall| |k#0@@1| |s#0@@1|) (and (not (= 4 $FunctionContextHeight)) (and ($Is |k#0@@1| Tclass.TSJ.Constants) ($Is |s#0@@1| Tclass.TSJ.Variables))))) (and (and (and (and (and (and (and (and (and (and (and (TSJ.Constants.Constants_q |k#0@@1|) (TSJ.Variables.Variables_q |s#0@@1|)) (|TSJ.SM.Abs.__default.Init#canCall| (TSJ.Constants.k |k#0@@1|) (TSJ.Variables.s1 |s#0@@1|))) (=> (TSJ.SM.Abs.__default.Init (TSJ.Constants.k |k#0@@1|) (TSJ.Variables.s1 |s#0@@1|)) (and (TSJ.Variables.Variables_q |s#0@@1|) (TSJ.Variables.Variables_q |s#0@@1|)))) (=> (and (and (TSJ.Variables.Variables_q |s#0@@1|) (TSJ.Variables.Variables_q |s#0@@1|)) (= (TSJ.Variables.s2 |s#0@@1|) (TSJ.Variables.s1 |s#0@@1|))) (and (TSJ.Variables.Variables_q |s#0@@1|) (TSJ.Variables.Variables_q |s#0@@1|)))) (=> (and (and (TSJ.Variables.Variables_q |s#0@@1|) (TSJ.Variables.Variables_q |s#0@@1|)) (= (TSJ.Variables.s3 |s#0@@1|) (TSJ.Variables.s1 |s#0@@1|))) (TSJ.Variables.Variables_q |s#0@@1|))) (=> (and (TSJ.Variables.Variables_q |s#0@@1|) (|Seq#Equal| (TSJ.Variables.j1 |s#0@@1|) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q |s#0@@1|))) (=> (and (TSJ.Variables.Variables_q |s#0@@1|) (|Seq#Equal| (TSJ.Variables.j2 |s#0@@1|) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q |s#0@@1|))) (=> (and (TSJ.Variables.Variables_q |s#0@@1|) (|Seq#Equal| (TSJ.Variables.j3 |s#0@@1|) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q |s#0@@1|))) (=> (and (TSJ.Variables.Variables_q |s#0@@1|) (|Seq#Equal| (TSJ.Variables.j__gamma |s#0@@1|) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q |s#0@@1|))) (=> (and (TSJ.Variables.Variables_q |s#0@@1|) (|Seq#Equal| (TSJ.Variables.j__delta |s#0@@1|) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q |s#0@@1|))) (and (=> (TSJ.__default.Init |k#0@@1| |s#0@@1|) (and (and (and (and (and (and (and (and (TSJ.SM.Abs.__default.Init (TSJ.Constants.k |k#0@@1|) (TSJ.Variables.s1 |s#0@@1|)) (= (TSJ.Variables.s2 |s#0@@1|) (TSJ.Variables.s1 |s#0@@1|))) (= (TSJ.Variables.s3 |s#0@@1|) (TSJ.Variables.s1 |s#0@@1|))) (|Seq#Equal| (TSJ.Variables.j1 |s#0@@1|) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j2 |s#0@@1|) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j3 |s#0@@1|) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j__gamma |s#0@@1|) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j__delta |s#0@@1|) (|Seq#Empty| BoxType))) (|Map#Equal| (TSJ.Variables.outstandingSyncReqs |s#0@@1|) (|Map#Empty| BoxType BoxType)))) (=> (and (and (and (and (and (and (and (and (TSJ.SM.Abs.__default.Init (TSJ.Constants.k |k#0@@1|) (TSJ.Variables.s1 |s#0@@1|)) (= (TSJ.Variables.s2 |s#0@@1|) (TSJ.Variables.s1 |s#0@@1|))) (= (TSJ.Variables.s3 |s#0@@1|) (TSJ.Variables.s1 |s#0@@1|))) (|Seq#Equal| (TSJ.Variables.j1 |s#0@@1|) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j2 |s#0@@1|) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j3 |s#0@@1|) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j__gamma |s#0@@1|) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j__delta |s#0@@1|) (|Seq#Empty| BoxType))) (|Map#Equal| (TSJ.Variables.outstandingSyncReqs |s#0@@1|) (|Map#Empty| BoxType BoxType))) (TSJ.__default.Init |k#0@@1| |s#0@@1|))))) :qid |TSJidfy.47:18| :skolemid |1264| :pattern ( (TSJ.__default.Init |k#0@@1| |s#0@@1|)) ))))
(assert  (=> (<= 4 $FunctionContextHeight) (forall ((|k#0@@2| T@U) (|s#0@@2| T@U) ) (!  (=> (and (and (= (type |k#0@@2|) DatatypeTypeType) (= (type |s#0@@2|) DatatypeTypeType)) (or (|TSJ.__default.Init#canCall| (Lit |k#0@@2|) (Lit |s#0@@2|)) (and (not (= 4 $FunctionContextHeight)) (and ($Is |k#0@@2| Tclass.TSJ.Constants) ($Is |s#0@@2| Tclass.TSJ.Variables))))) (and (and (and (and (and (and (and (and (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@2|)) (TSJ.Variables.Variables_q (Lit |s#0@@2|))) (|TSJ.SM.Abs.__default.Init#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|))))) (=> (TSJ.SM.Abs.__default.Init (Lit (TSJ.Constants.k (Lit |k#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|)))) (and (TSJ.Variables.Variables_q (Lit |s#0@@2|)) (TSJ.Variables.Variables_q (Lit |s#0@@2|))))) (=> (and (and (TSJ.Variables.Variables_q (Lit |s#0@@2|)) (TSJ.Variables.Variables_q (Lit |s#0@@2|))) (= (Lit (TSJ.Variables.s2 (Lit |s#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|))))) (and (TSJ.Variables.Variables_q (Lit |s#0@@2|)) (TSJ.Variables.Variables_q (Lit |s#0@@2|))))) (=> (and (and (TSJ.Variables.Variables_q (Lit |s#0@@2|)) (TSJ.Variables.Variables_q (Lit |s#0@@2|))) (= (Lit (TSJ.Variables.s3 (Lit |s#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|))))) (TSJ.Variables.Variables_q (Lit |s#0@@2|)))) (=> (and (TSJ.Variables.Variables_q (Lit |s#0@@2|)) (|Seq#Equal| (TSJ.Variables.j1 (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q (Lit |s#0@@2|)))) (=> (and (TSJ.Variables.Variables_q (Lit |s#0@@2|)) (|Seq#Equal| (TSJ.Variables.j2 (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q (Lit |s#0@@2|)))) (=> (and (TSJ.Variables.Variables_q (Lit |s#0@@2|)) (|Seq#Equal| (TSJ.Variables.j3 (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q (Lit |s#0@@2|)))) (=> (and (TSJ.Variables.Variables_q (Lit |s#0@@2|)) (|Seq#Equal| (TSJ.Variables.j__gamma (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q (Lit |s#0@@2|)))) (=> (and (TSJ.Variables.Variables_q (Lit |s#0@@2|)) (|Seq#Equal| (TSJ.Variables.j__delta (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (TSJ.Variables.Variables_q (Lit |s#0@@2|)))) (and (=> (TSJ.__default.Init (Lit |k#0@@2|) (Lit |s#0@@2|)) (and (and (and (and (and (and (and (and (TSJ.SM.Abs.__default.Init (Lit (TSJ.Constants.k (Lit |k#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|)))) (= (Lit (TSJ.Variables.s2 (Lit |s#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|))))) (= (Lit (TSJ.Variables.s3 (Lit |s#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|))))) (|Seq#Equal| (TSJ.Variables.j1 (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j2 (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j3 (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j__gamma (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j__delta (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Map#Equal| (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@2|)) (|Map#Empty| BoxType BoxType)))) (=> (and (and (and (and (and (and (and (and (TSJ.SM.Abs.__default.Init (Lit (TSJ.Constants.k (Lit |k#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|)))) (= (Lit (TSJ.Variables.s2 (Lit |s#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|))))) (= (Lit (TSJ.Variables.s3 (Lit |s#0@@2|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@2|))))) (|Seq#Equal| (TSJ.Variables.j1 (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j2 (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j3 (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j__gamma (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Seq#Equal| (TSJ.Variables.j__delta (Lit |s#0@@2|)) (|Seq#Empty| BoxType))) (|Map#Equal| (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@2|)) (|Map#Empty| BoxType BoxType))) (TSJ.__default.Init (Lit |k#0@@2|) (Lit |s#0@@2|)))))) :qid |TSJidfy.47:18| :weight 3 :skolemid |1265| :pattern ( (TSJ.__default.Init (Lit |k#0@@2|) (Lit |s#0@@2|))) ))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((|k#0@@3| T@U) (|s#0@@3| T@U) (|s'#0| T@U) (|uiop#0| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@3|) DatatypeTypeType) (= (type |s#0@@3|) DatatypeTypeType)) (= (type |s'#0|) DatatypeTypeType)) (= (type |uiop#0|) DatatypeTypeType)) (or (|TSJ.__default.Crash#canCall| |k#0@@3| |s#0@@3| |s'#0| |uiop#0|) (and (not (= 6 $FunctionContextHeight)) (and (and (and ($Is |k#0@@3| Tclass.TSJ.Constants) ($Is |s#0@@3| Tclass.TSJ.Variables)) ($Is |s'#0| Tclass.TSJ.Variables)) ($Is |uiop#0| Tclass.UI.Op))))) true) :qid |TSJidfy.72:19| :skolemid |1267| :pattern ( (TSJ.__default.Crash |k#0@@3| |s#0@@3| |s'#0| |uiop#0|)) ))))
(assert (forall ((|k#0@@4| T@U) (|s#0@@4| T@U) (|s'#0@@0| T@U) (|uiop#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@4|) DatatypeTypeType) (= (type |s#0@@4|) DatatypeTypeType)) (= (type |s'#0@@0|) DatatypeTypeType)) (= (type |uiop#0@@0|) DatatypeTypeType)) (and (and (and ($Is |k#0@@4| Tclass.TSJ.Constants) ($Is |s#0@@4| Tclass.TSJ.Variables)) ($Is |s'#0@@0| Tclass.TSJ.Variables)) ($Is |uiop#0@@0| Tclass.UI.Op))) (and (=> (|TSJ.__default.Crash#requires| |k#0@@4| |s#0@@4| |s'#0@@0| |uiop#0@@0|) true) (=> true (|TSJ.__default.Crash#requires| |k#0@@4| |s#0@@4| |s'#0@@0| |uiop#0@@0|)))) :qid |TSJidfy.72:19| :skolemid |1268| :pattern ( (|TSJ.__default.Crash#requires| |k#0@@4| |s#0@@4| |s'#0@@0| |uiop#0@@0|)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((|k#0@@5| T@U) (|s#0@@5| T@U) (|s'#0@@1| T@U) (|uiop#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@5|) DatatypeTypeType) (= (type |s#0@@5|) DatatypeTypeType)) (= (type |s'#0@@1|) DatatypeTypeType)) (= (type |uiop#0@@1|) DatatypeTypeType)) (or (|TSJ.__default.Crash#canCall| |k#0@@5| |s#0@@5| |s'#0@@1| |uiop#0@@1|) (and (not (= 6 $FunctionContextHeight)) (and (and (and ($Is |k#0@@5| Tclass.TSJ.Constants) ($Is |s#0@@5| Tclass.TSJ.Variables)) ($Is |s'#0@@1| Tclass.TSJ.Variables)) ($Is |uiop#0@@1| Tclass.UI.Op))))) (and (=> (UI.Op.CrashOp_q |uiop#0@@1|) (and (|$IsA#TSJ.Variables| |s'#0@@1|) (and (and (and (and (and (and (TSJ.Variables.Variables_q |s#0@@5|) (TSJ.Variables.Variables_q |s#0@@5|)) (TSJ.Variables.Variables_q |s#0@@5|)) (TSJ.Variables.Variables_q |s#0@@5|)) (TSJ.Variables.Variables_q |s#0@@5|)) (TSJ.Variables.Variables_q |s#0@@5|)) (TSJ.Variables.Variables_q |s#0@@5|)))) (and (=> (TSJ.__default.Crash |k#0@@5| |s#0@@5| |s'#0@@1| |uiop#0@@1|) (and (UI.Op.CrashOp_q |uiop#0@@1|) (|TSJ.Variables#Equal| |s'#0@@1| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@5|) (TSJ.Variables.s1 |s#0@@5|) (TSJ.Variables.s1 |s#0@@5|) (TSJ.Variables.j1 |s#0@@5|) (TSJ.Variables.j1 |s#0@@5|) (TSJ.Variables.j1 |s#0@@5|) (TSJ.Variables.j1 |s#0@@5|) (Lit (|Seq#Empty| BoxType)) (Lit (|Map#Empty| BoxType BoxType)))))) (=> (and (UI.Op.CrashOp_q |uiop#0@@1|) (|TSJ.Variables#Equal| |s'#0@@1| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@5|) (TSJ.Variables.s1 |s#0@@5|) (TSJ.Variables.s1 |s#0@@5|) (TSJ.Variables.j1 |s#0@@5|) (TSJ.Variables.j1 |s#0@@5|) (TSJ.Variables.j1 |s#0@@5|) (TSJ.Variables.j1 |s#0@@5|) (Lit (|Seq#Empty| BoxType)) (Lit (|Map#Empty| BoxType BoxType))))) (TSJ.__default.Crash |k#0@@5| |s#0@@5| |s'#0@@1| |uiop#0@@1|))))) :qid |TSJidfy.72:19| :skolemid |1269| :pattern ( (TSJ.__default.Crash |k#0@@5| |s#0@@5| |s'#0@@1| |uiop#0@@1|)) ))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((|k#0@@6| T@U) (|s#0@@6| T@U) (|s'#0@@2| T@U) (|uiop#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@6|) DatatypeTypeType) (= (type |s#0@@6|) DatatypeTypeType)) (= (type |s'#0@@2|) DatatypeTypeType)) (= (type |uiop#0@@2|) DatatypeTypeType)) (or (|TSJ.__default.Crash#canCall| (Lit |k#0@@6|) (Lit |s#0@@6|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|)) (and (not (= 6 $FunctionContextHeight)) (and (and (and ($Is |k#0@@6| Tclass.TSJ.Constants) ($Is |s#0@@6| Tclass.TSJ.Variables)) ($Is |s'#0@@2| Tclass.TSJ.Variables)) ($Is |uiop#0@@2| Tclass.UI.Op))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.CrashOp_q (Lit |uiop#0@@2|))))) (and (|$IsA#TSJ.Variables| (Lit |s'#0@@2|)) (and (and (and (and (and (and (TSJ.Variables.Variables_q (Lit |s#0@@6|)) (TSJ.Variables.Variables_q (Lit |s#0@@6|))) (TSJ.Variables.Variables_q (Lit |s#0@@6|))) (TSJ.Variables.Variables_q (Lit |s#0@@6|))) (TSJ.Variables.Variables_q (Lit |s#0@@6|))) (TSJ.Variables.Variables_q (Lit |s#0@@6|))) (TSJ.Variables.Variables_q (Lit |s#0@@6|))))) (and (=> (TSJ.__default.Crash (Lit |k#0@@6|) (Lit |s#0@@6|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|)) (and (UI.Op.CrashOp_q (Lit |uiop#0@@2|)) (|TSJ.Variables#Equal| |s'#0@@2| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@6|))) (Lit (|Seq#Empty| BoxType)) (Lit (|Map#Empty| BoxType BoxType)))))) (=> (and (UI.Op.CrashOp_q (Lit |uiop#0@@2|)) (|TSJ.Variables#Equal| |s'#0@@2| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@6|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@6|))) (Lit (|Seq#Empty| BoxType)) (Lit (|Map#Empty| BoxType BoxType))))) (TSJ.__default.Crash (Lit |k#0@@6|) (Lit |s#0@@6|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|)))))) :qid |TSJidfy.72:19| :weight 3 :skolemid |1270| :pattern ( (TSJ.__default.Crash (Lit |k#0@@6|) (Lit |s#0@@6|) (Lit |s'#0@@2|) (Lit |uiop#0@@2|))) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|k#0@@7| T@U) (|s#0@@7| T@U) (|s'#0@@3| T@U) (|uiop#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@7|) DatatypeTypeType) (= (type |s#0@@7|) DatatypeTypeType)) (= (type |s'#0@@3|) DatatypeTypeType)) (= (type |uiop#0@@3|) DatatypeTypeType)) (or (|TSJ.__default.Move1to2#canCall| |k#0@@7| |s#0@@7| |s'#0@@3| |uiop#0@@3|) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($Is |k#0@@7| Tclass.TSJ.Constants) ($Is |s#0@@7| Tclass.TSJ.Variables)) ($Is |s'#0@@3| Tclass.TSJ.Variables)) ($Is |uiop#0@@3| Tclass.UI.Op))))) true) :qid |TSJidfy.87:22| :skolemid |1271| :pattern ( (TSJ.__default.Move1to2 |k#0@@7| |s#0@@7| |s'#0@@3| |uiop#0@@3|)) ))))
(assert (forall ((|k#0@@8| T@U) (|s#0@@8| T@U) (|s'#0@@4| T@U) (|uiop#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@8|) DatatypeTypeType) (= (type |s#0@@8|) DatatypeTypeType)) (= (type |s'#0@@4|) DatatypeTypeType)) (= (type |uiop#0@@4|) DatatypeTypeType)) (and (and (and ($Is |k#0@@8| Tclass.TSJ.Constants) ($Is |s#0@@8| Tclass.TSJ.Variables)) ($Is |s'#0@@4| Tclass.TSJ.Variables)) ($Is |uiop#0@@4| Tclass.UI.Op))) (and (=> (|TSJ.__default.Move1to2#requires| |k#0@@8| |s#0@@8| |s'#0@@4| |uiop#0@@4|) true) (=> true (|TSJ.__default.Move1to2#requires| |k#0@@8| |s#0@@8| |s'#0@@4| |uiop#0@@4|)))) :qid |TSJidfy.87:22| :skolemid |1272| :pattern ( (|TSJ.__default.Move1to2#requires| |k#0@@8| |s#0@@8| |s'#0@@4| |uiop#0@@4|)) )))
(assert (forall ((arg0@@347 T@U) ) (! (= (type (ThreeStateTypes.__default.SyncReqs2to1 arg0@@347)) (MapType BoxType BoxType)) :qid |funType:ThreeStateTypes.__default.SyncReqs2to1| :pattern ( (ThreeStateTypes.__default.SyncReqs2to1 arg0@@347)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|k#0@@9| T@U) (|s#0@@9| T@U) (|s'#0@@5| T@U) (|uiop#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@9|) DatatypeTypeType) (= (type |s#0@@9|) DatatypeTypeType)) (= (type |s'#0@@5|) DatatypeTypeType)) (= (type |uiop#0@@5|) DatatypeTypeType)) (or (|TSJ.__default.Move1to2#canCall| |k#0@@9| |s#0@@9| |s'#0@@5| |uiop#0@@5|) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($Is |k#0@@9| Tclass.TSJ.Constants) ($Is |s#0@@9| Tclass.TSJ.Variables)) ($Is |s'#0@@5| Tclass.TSJ.Variables)) ($Is |uiop#0@@5| Tclass.UI.Op))))) (and (=> (UI.Op.NoOp_q |uiop#0@@5|) (and (|$IsA#TSJ.Variables| |s'#0@@5|) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q |s#0@@9|) (TSJ.Variables.Variables_q |s#0@@9|)) (TSJ.Variables.Variables_q |s#0@@9|)) (TSJ.Variables.Variables_q |s#0@@9|)) (TSJ.Variables.Variables_q |s#0@@9|)) (TSJ.Variables.Variables_q |s#0@@9|)) (TSJ.Variables.Variables_q |s#0@@9|)) (TSJ.Variables.Variables_q |s#0@@9|)) (and (TSJ.Variables.Variables_q |s#0@@9|) (|ThreeStateTypes.__default.SyncReqs2to1#canCall| (TSJ.Variables.outstandingSyncReqs |s#0@@9|)))))) (and (=> (TSJ.__default.Move1to2 |k#0@@9| |s#0@@9| |s'#0@@5| |uiop#0@@5|) (and (UI.Op.NoOp_q |uiop#0@@5|) (|TSJ.Variables#Equal| |s'#0@@5| (|#TSJ.Variables.Variables| (TSJ.Variables.s2 |s#0@@9|) (TSJ.Variables.s2 |s#0@@9|) (TSJ.Variables.s3 |s#0@@9|) (TSJ.Variables.j2 |s#0@@9|) (TSJ.Variables.j2 |s#0@@9|) (TSJ.Variables.j3 |s#0@@9|) (TSJ.Variables.j2 |s#0@@9|) (TSJ.Variables.j__delta |s#0@@9|) (ThreeStateTypes.__default.SyncReqs2to1 (TSJ.Variables.outstandingSyncReqs |s#0@@9|)))))) (=> (and (UI.Op.NoOp_q |uiop#0@@5|) (|TSJ.Variables#Equal| |s'#0@@5| (|#TSJ.Variables.Variables| (TSJ.Variables.s2 |s#0@@9|) (TSJ.Variables.s2 |s#0@@9|) (TSJ.Variables.s3 |s#0@@9|) (TSJ.Variables.j2 |s#0@@9|) (TSJ.Variables.j2 |s#0@@9|) (TSJ.Variables.j3 |s#0@@9|) (TSJ.Variables.j2 |s#0@@9|) (TSJ.Variables.j__delta |s#0@@9|) (ThreeStateTypes.__default.SyncReqs2to1 (TSJ.Variables.outstandingSyncReqs |s#0@@9|))))) (TSJ.__default.Move1to2 |k#0@@9| |s#0@@9| |s'#0@@5| |uiop#0@@5|))))) :qid |TSJidfy.87:22| :skolemid |1273| :pattern ( (TSJ.__default.Move1to2 |k#0@@9| |s#0@@9| |s'#0@@5| |uiop#0@@5|)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((|k#0@@10| T@U) (|s#0@@10| T@U) (|s'#0@@6| T@U) (|uiop#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@10|) DatatypeTypeType) (= (type |s#0@@10|) DatatypeTypeType)) (= (type |s'#0@@6|) DatatypeTypeType)) (= (type |uiop#0@@6|) DatatypeTypeType)) (or (|TSJ.__default.Move1to2#canCall| (Lit |k#0@@10|) (Lit |s#0@@10|) (Lit |s'#0@@6|) (Lit |uiop#0@@6|)) (and (not (= 7 $FunctionContextHeight)) (and (and (and ($Is |k#0@@10| Tclass.TSJ.Constants) ($Is |s#0@@10| Tclass.TSJ.Variables)) ($Is |s'#0@@6| Tclass.TSJ.Variables)) ($Is |uiop#0@@6| Tclass.UI.Op))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@6|))))) (and (|$IsA#TSJ.Variables| (Lit |s'#0@@6|)) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q (Lit |s#0@@10|)) (TSJ.Variables.Variables_q (Lit |s#0@@10|))) (TSJ.Variables.Variables_q (Lit |s#0@@10|))) (TSJ.Variables.Variables_q (Lit |s#0@@10|))) (TSJ.Variables.Variables_q (Lit |s#0@@10|))) (TSJ.Variables.Variables_q (Lit |s#0@@10|))) (TSJ.Variables.Variables_q (Lit |s#0@@10|))) (TSJ.Variables.Variables_q (Lit |s#0@@10|))) (and (TSJ.Variables.Variables_q (Lit |s#0@@10|)) (|ThreeStateTypes.__default.SyncReqs2to1#canCall| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@10|)))))))) (and (=> (TSJ.__default.Move1to2 (Lit |k#0@@10|) (Lit |s#0@@10|) (Lit |s'#0@@6|) (Lit |uiop#0@@6|)) (and (UI.Op.NoOp_q (Lit |uiop#0@@6|)) (|TSJ.Variables#Equal| |s'#0@@6| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@10|))) (Lit (ThreeStateTypes.__default.SyncReqs2to1 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@10|))))))))) (=> (and (UI.Op.NoOp_q (Lit |uiop#0@@6|)) (|TSJ.Variables#Equal| |s'#0@@6| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@10|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@10|))) (Lit (ThreeStateTypes.__default.SyncReqs2to1 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@10|)))))))) (TSJ.__default.Move1to2 (Lit |k#0@@10|) (Lit |s#0@@10|) (Lit |s'#0@@6|) (Lit |uiop#0@@6|)))))) :qid |TSJidfy.87:22| :weight 3 :skolemid |1274| :pattern ( (TSJ.__default.Move1to2 (Lit |k#0@@10|) (Lit |s#0@@10|) (Lit |s'#0@@6|) (Lit |uiop#0@@6|))) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|k#0@@11| T@U) (|s#0@@11| T@U) (|s'#0@@7| T@U) (|uiop#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@11|) DatatypeTypeType) (= (type |s#0@@11|) DatatypeTypeType)) (= (type |s'#0@@7|) DatatypeTypeType)) (= (type |uiop#0@@7|) DatatypeTypeType)) (or (|TSJ.__default.Move2to3#canCall| |k#0@@11| |s#0@@11| |s'#0@@7| |uiop#0@@7|) (and (not (= 8 $FunctionContextHeight)) (and (and (and ($Is |k#0@@11| Tclass.TSJ.Constants) ($Is |s#0@@11| Tclass.TSJ.Variables)) ($Is |s'#0@@7| Tclass.TSJ.Variables)) ($Is |uiop#0@@7| Tclass.UI.Op))))) true) :qid |TSJidfy.102:22| :skolemid |1276| :pattern ( (TSJ.__default.Move2to3 |k#0@@11| |s#0@@11| |s'#0@@7| |uiop#0@@7|)) ))))
(assert (forall ((|k#0@@12| T@U) (|s#0@@12| T@U) (|s'#0@@8| T@U) (|uiop#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@12|) DatatypeTypeType) (= (type |s#0@@12|) DatatypeTypeType)) (= (type |s'#0@@8|) DatatypeTypeType)) (= (type |uiop#0@@8|) DatatypeTypeType)) (and (and (and ($Is |k#0@@12| Tclass.TSJ.Constants) ($Is |s#0@@12| Tclass.TSJ.Variables)) ($Is |s'#0@@8| Tclass.TSJ.Variables)) ($Is |uiop#0@@8| Tclass.UI.Op))) (and (=> (|TSJ.__default.Move2to3#requires| |k#0@@12| |s#0@@12| |s'#0@@8| |uiop#0@@8|) true) (=> true (|TSJ.__default.Move2to3#requires| |k#0@@12| |s#0@@12| |s'#0@@8| |uiop#0@@8|)))) :qid |TSJidfy.102:22| :skolemid |1277| :pattern ( (|TSJ.__default.Move2to3#requires| |k#0@@12| |s#0@@12| |s'#0@@8| |uiop#0@@8|)) )))
(assert (forall ((arg0@@348 T@U) ) (! (= (type (ThreeStateTypes.__default.SyncReqs3to2 arg0@@348)) (MapType BoxType BoxType)) :qid |funType:ThreeStateTypes.__default.SyncReqs3to2| :pattern ( (ThreeStateTypes.__default.SyncReqs3to2 arg0@@348)) )))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|k#0@@13| T@U) (|s#0@@13| T@U) (|s'#0@@9| T@U) (|uiop#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@13|) DatatypeTypeType) (= (type |s#0@@13|) DatatypeTypeType)) (= (type |s'#0@@9|) DatatypeTypeType)) (= (type |uiop#0@@9|) DatatypeTypeType)) (or (|TSJ.__default.Move2to3#canCall| |k#0@@13| |s#0@@13| |s'#0@@9| |uiop#0@@9|) (and (not (= 8 $FunctionContextHeight)) (and (and (and ($Is |k#0@@13| Tclass.TSJ.Constants) ($Is |s#0@@13| Tclass.TSJ.Variables)) ($Is |s'#0@@9| Tclass.TSJ.Variables)) ($Is |uiop#0@@9| Tclass.UI.Op))))) (and (=> (UI.Op.NoOp_q |uiop#0@@9|) (and (|$IsA#TSJ.Variables| |s'#0@@9|) (and (and (and (and (and (and (and (TSJ.Variables.Variables_q |s#0@@13|) (TSJ.Variables.Variables_q |s#0@@13|)) (TSJ.Variables.Variables_q |s#0@@13|)) (TSJ.Variables.Variables_q |s#0@@13|)) (TSJ.Variables.Variables_q |s#0@@13|)) (TSJ.Variables.Variables_q |s#0@@13|)) (and (TSJ.Variables.Variables_q |s#0@@13|) (TSJ.Variables.Variables_q |s#0@@13|))) (and (TSJ.Variables.Variables_q |s#0@@13|) (|ThreeStateTypes.__default.SyncReqs3to2#canCall| (TSJ.Variables.outstandingSyncReqs |s#0@@13|)))))) (and (=> (TSJ.__default.Move2to3 |k#0@@13| |s#0@@13| |s'#0@@9| |uiop#0@@9|) (and (UI.Op.NoOp_q |uiop#0@@9|) (|TSJ.Variables#Equal| |s'#0@@9| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@13|) (TSJ.Variables.s3 |s#0@@13|) (TSJ.Variables.s3 |s#0@@13|) (TSJ.Variables.j1 |s#0@@13|) (TSJ.Variables.j3 |s#0@@13|) (TSJ.Variables.j3 |s#0@@13|) (|Seq#Append| (TSJ.Variables.j__gamma |s#0@@13|) (TSJ.Variables.j__delta |s#0@@13|)) (Lit (|Seq#Empty| BoxType)) (ThreeStateTypes.__default.SyncReqs3to2 (TSJ.Variables.outstandingSyncReqs |s#0@@13|)))))) (=> (and (UI.Op.NoOp_q |uiop#0@@9|) (|TSJ.Variables#Equal| |s'#0@@9| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@13|) (TSJ.Variables.s3 |s#0@@13|) (TSJ.Variables.s3 |s#0@@13|) (TSJ.Variables.j1 |s#0@@13|) (TSJ.Variables.j3 |s#0@@13|) (TSJ.Variables.j3 |s#0@@13|) (|Seq#Append| (TSJ.Variables.j__gamma |s#0@@13|) (TSJ.Variables.j__delta |s#0@@13|)) (Lit (|Seq#Empty| BoxType)) (ThreeStateTypes.__default.SyncReqs3to2 (TSJ.Variables.outstandingSyncReqs |s#0@@13|))))) (TSJ.__default.Move2to3 |k#0@@13| |s#0@@13| |s'#0@@9| |uiop#0@@9|))))) :qid |TSJidfy.102:22| :skolemid |1278| :pattern ( (TSJ.__default.Move2to3 |k#0@@13| |s#0@@13| |s'#0@@9| |uiop#0@@9|)) ))))
(assert  (=> (<= 8 $FunctionContextHeight) (forall ((|k#0@@14| T@U) (|s#0@@14| T@U) (|s'#0@@10| T@U) (|uiop#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@14|) DatatypeTypeType) (= (type |s#0@@14|) DatatypeTypeType)) (= (type |s'#0@@10|) DatatypeTypeType)) (= (type |uiop#0@@10|) DatatypeTypeType)) (or (|TSJ.__default.Move2to3#canCall| (Lit |k#0@@14|) (Lit |s#0@@14|) (Lit |s'#0@@10|) (Lit |uiop#0@@10|)) (and (not (= 8 $FunctionContextHeight)) (and (and (and ($Is |k#0@@14| Tclass.TSJ.Constants) ($Is |s#0@@14| Tclass.TSJ.Variables)) ($Is |s'#0@@10| Tclass.TSJ.Variables)) ($Is |uiop#0@@10| Tclass.UI.Op))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@10|))))) (and (|$IsA#TSJ.Variables| (Lit |s'#0@@10|)) (and (and (and (and (and (and (and (TSJ.Variables.Variables_q (Lit |s#0@@14|)) (TSJ.Variables.Variables_q (Lit |s#0@@14|))) (TSJ.Variables.Variables_q (Lit |s#0@@14|))) (TSJ.Variables.Variables_q (Lit |s#0@@14|))) (TSJ.Variables.Variables_q (Lit |s#0@@14|))) (TSJ.Variables.Variables_q (Lit |s#0@@14|))) (and (TSJ.Variables.Variables_q (Lit |s#0@@14|)) (TSJ.Variables.Variables_q (Lit |s#0@@14|)))) (and (TSJ.Variables.Variables_q (Lit |s#0@@14|)) (|ThreeStateTypes.__default.SyncReqs3to2#canCall| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@14|)))))))) (and (=> (TSJ.__default.Move2to3 (Lit |k#0@@14|) (Lit |s#0@@14|) (Lit |s'#0@@10|) (Lit |uiop#0@@10|)) (and (UI.Op.NoOp_q (Lit |uiop#0@@10|)) (|TSJ.Variables#Equal| |s'#0@@10| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@14|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@14|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@14|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@14|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@14|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@14|))) (|Seq#Append| (TSJ.Variables.j__gamma (Lit |s#0@@14|)) (TSJ.Variables.j__delta (Lit |s#0@@14|))) (Lit (|Seq#Empty| BoxType)) (Lit (ThreeStateTypes.__default.SyncReqs3to2 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@14|))))))))) (=> (and (UI.Op.NoOp_q (Lit |uiop#0@@10|)) (|TSJ.Variables#Equal| |s'#0@@10| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@14|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@14|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@14|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@14|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@14|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@14|))) (|Seq#Append| (TSJ.Variables.j__gamma (Lit |s#0@@14|)) (TSJ.Variables.j__delta (Lit |s#0@@14|))) (Lit (|Seq#Empty| BoxType)) (Lit (ThreeStateTypes.__default.SyncReqs3to2 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@14|)))))))) (TSJ.__default.Move2to3 (Lit |k#0@@14|) (Lit |s#0@@14|) (Lit |s'#0@@10|) (Lit |uiop#0@@10|)))))) :qid |TSJidfy.102:22| :weight 3 :skolemid |1279| :pattern ( (TSJ.__default.Move2to3 (Lit |k#0@@14|) (Lit |s#0@@14|) (Lit |s'#0@@10|) (Lit |uiop#0@@10|))) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|k#0@@15| T@U) (|s#0@@15| T@U) (|s'#0@@11| T@U) (|uiop#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@15|) DatatypeTypeType) (= (type |s#0@@15|) DatatypeTypeType)) (= (type |s'#0@@11|) DatatypeTypeType)) (= (type |uiop#0@@11|) DatatypeTypeType)) (or (|TSJ.__default.ExtendLog1#canCall| |k#0@@15| |s#0@@15| |s'#0@@11| |uiop#0@@11|) (and (not (= 9 $FunctionContextHeight)) (and (and (and ($Is |k#0@@15| Tclass.TSJ.Constants) ($Is |s#0@@15| Tclass.TSJ.Variables)) ($Is |s'#0@@11| Tclass.TSJ.Variables)) ($Is |uiop#0@@11| Tclass.UI.Op))))) true) :qid |TSJidfy.117:24| :skolemid |1281| :pattern ( (TSJ.__default.ExtendLog1 |k#0@@15| |s#0@@15| |s'#0@@11| |uiop#0@@11|)) ))))
(assert (forall ((|k#0@@16| T@U) (|s#0@@16| T@U) (|s'#0@@12| T@U) (|uiop#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@16|) DatatypeTypeType) (= (type |s#0@@16|) DatatypeTypeType)) (= (type |s'#0@@12|) DatatypeTypeType)) (= (type |uiop#0@@12|) DatatypeTypeType)) (and (and (and ($Is |k#0@@16| Tclass.TSJ.Constants) ($Is |s#0@@16| Tclass.TSJ.Variables)) ($Is |s'#0@@12| Tclass.TSJ.Variables)) ($Is |uiop#0@@12| Tclass.UI.Op))) (and (=> (|TSJ.__default.ExtendLog1#requires| |k#0@@16| |s#0@@16| |s'#0@@12| |uiop#0@@12|) true) (=> true (|TSJ.__default.ExtendLog1#requires| |k#0@@16| |s#0@@16| |s'#0@@12| |uiop#0@@12|)))) :qid |TSJidfy.117:24| :skolemid |1282| :pattern ( (|TSJ.__default.ExtendLog1#requires| |k#0@@16| |s#0@@16| |s'#0@@12| |uiop#0@@12|)) )))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|k#0@@17| T@U) (|s#0@@17| T@U) (|s'#0@@13| T@U) (|uiop#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@17|) DatatypeTypeType) (= (type |s#0@@17|) DatatypeTypeType)) (= (type |s'#0@@13|) DatatypeTypeType)) (= (type |uiop#0@@13|) DatatypeTypeType)) (or (|TSJ.__default.ExtendLog1#canCall| |k#0@@17| |s#0@@17| |s'#0@@13| |uiop#0@@13|) (and (not (= 9 $FunctionContextHeight)) (and (and (and ($Is |k#0@@17| Tclass.TSJ.Constants) ($Is |s#0@@17| Tclass.TSJ.Variables)) ($Is |s'#0@@13| Tclass.TSJ.Variables)) ($Is |uiop#0@@13| Tclass.UI.Op))))) (and (=> (UI.Op.NoOp_q |uiop#0@@13|) (and (|$IsA#TSJ.Variables| |s'#0@@13|) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q |s#0@@17|) (TSJ.Variables.Variables_q |s#0@@17|)) (TSJ.Variables.Variables_q |s#0@@17|)) (TSJ.Variables.Variables_q |s#0@@17|)) (TSJ.Variables.Variables_q |s#0@@17|)) (TSJ.Variables.Variables_q |s#0@@17|)) (TSJ.Variables.Variables_q |s#0@@17|)) (TSJ.Variables.Variables_q |s#0@@17|)) (and (TSJ.Variables.Variables_q |s#0@@17|) (|ThreeStateTypes.__default.SyncReqs2to1#canCall| (TSJ.Variables.outstandingSyncReqs |s#0@@17|)))))) (and (=> (TSJ.__default.ExtendLog1 |k#0@@17| |s#0@@17| |s'#0@@13| |uiop#0@@13|) (and (UI.Op.NoOp_q |uiop#0@@13|) (|TSJ.Variables#Equal| |s'#0@@13| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@17|) (TSJ.Variables.s2 |s#0@@17|) (TSJ.Variables.s3 |s#0@@17|) (TSJ.Variables.j__gamma |s#0@@17|) (TSJ.Variables.j2 |s#0@@17|) (TSJ.Variables.j3 |s#0@@17|) (TSJ.Variables.j__gamma |s#0@@17|) (TSJ.Variables.j__delta |s#0@@17|) (ThreeStateTypes.__default.SyncReqs2to1 (TSJ.Variables.outstandingSyncReqs |s#0@@17|)))))) (=> (and (UI.Op.NoOp_q |uiop#0@@13|) (|TSJ.Variables#Equal| |s'#0@@13| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@17|) (TSJ.Variables.s2 |s#0@@17|) (TSJ.Variables.s3 |s#0@@17|) (TSJ.Variables.j__gamma |s#0@@17|) (TSJ.Variables.j2 |s#0@@17|) (TSJ.Variables.j3 |s#0@@17|) (TSJ.Variables.j__gamma |s#0@@17|) (TSJ.Variables.j__delta |s#0@@17|) (ThreeStateTypes.__default.SyncReqs2to1 (TSJ.Variables.outstandingSyncReqs |s#0@@17|))))) (TSJ.__default.ExtendLog1 |k#0@@17| |s#0@@17| |s'#0@@13| |uiop#0@@13|))))) :qid |TSJidfy.117:24| :skolemid |1283| :pattern ( (TSJ.__default.ExtendLog1 |k#0@@17| |s#0@@17| |s'#0@@13| |uiop#0@@13|)) ))))
(assert  (=> (<= 9 $FunctionContextHeight) (forall ((|k#0@@18| T@U) (|s#0@@18| T@U) (|s'#0@@14| T@U) (|uiop#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@18|) DatatypeTypeType) (= (type |s#0@@18|) DatatypeTypeType)) (= (type |s'#0@@14|) DatatypeTypeType)) (= (type |uiop#0@@14|) DatatypeTypeType)) (or (|TSJ.__default.ExtendLog1#canCall| (Lit |k#0@@18|) (Lit |s#0@@18|) (Lit |s'#0@@14|) (Lit |uiop#0@@14|)) (and (not (= 9 $FunctionContextHeight)) (and (and (and ($Is |k#0@@18| Tclass.TSJ.Constants) ($Is |s#0@@18| Tclass.TSJ.Variables)) ($Is |s'#0@@14| Tclass.TSJ.Variables)) ($Is |uiop#0@@14| Tclass.UI.Op))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@14|))))) (and (|$IsA#TSJ.Variables| (Lit |s'#0@@14|)) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q (Lit |s#0@@18|)) (TSJ.Variables.Variables_q (Lit |s#0@@18|))) (TSJ.Variables.Variables_q (Lit |s#0@@18|))) (TSJ.Variables.Variables_q (Lit |s#0@@18|))) (TSJ.Variables.Variables_q (Lit |s#0@@18|))) (TSJ.Variables.Variables_q (Lit |s#0@@18|))) (TSJ.Variables.Variables_q (Lit |s#0@@18|))) (TSJ.Variables.Variables_q (Lit |s#0@@18|))) (and (TSJ.Variables.Variables_q (Lit |s#0@@18|)) (|ThreeStateTypes.__default.SyncReqs2to1#canCall| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@18|)))))))) (and (=> (TSJ.__default.ExtendLog1 (Lit |k#0@@18|) (Lit |s#0@@18|) (Lit |s'#0@@14|) (Lit |uiop#0@@14|)) (and (UI.Op.NoOp_q (Lit |uiop#0@@14|)) (|TSJ.Variables#Equal| |s'#0@@14| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@18|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@18|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@18|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@18|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@18|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@18|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@18|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@18|))) (Lit (ThreeStateTypes.__default.SyncReqs2to1 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@18|))))))))) (=> (and (UI.Op.NoOp_q (Lit |uiop#0@@14|)) (|TSJ.Variables#Equal| |s'#0@@14| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@18|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@18|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@18|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@18|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@18|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@18|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@18|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@18|))) (Lit (ThreeStateTypes.__default.SyncReqs2to1 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@18|)))))))) (TSJ.__default.ExtendLog1 (Lit |k#0@@18|) (Lit |s#0@@18|) (Lit |s'#0@@14|) (Lit |uiop#0@@14|)))))) :qid |TSJidfy.117:24| :weight 3 :skolemid |1284| :pattern ( (TSJ.__default.ExtendLog1 (Lit |k#0@@18|) (Lit |s#0@@18|) (Lit |s'#0@@14|) (Lit |uiop#0@@14|))) ))))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((|k#0@@19| T@U) (|s#0@@19| T@U) (|s'#0@@15| T@U) (|uiop#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@19|) DatatypeTypeType) (= (type |s#0@@19|) DatatypeTypeType)) (= (type |s'#0@@15|) DatatypeTypeType)) (= (type |uiop#0@@15|) DatatypeTypeType)) (or (|TSJ.__default.ExtendLog2#canCall| |k#0@@19| |s#0@@19| |s'#0@@15| |uiop#0@@15|) (and (not (= 10 $FunctionContextHeight)) (and (and (and ($Is |k#0@@19| Tclass.TSJ.Constants) ($Is |s#0@@19| Tclass.TSJ.Variables)) ($Is |s'#0@@15| Tclass.TSJ.Variables)) ($Is |uiop#0@@15| Tclass.UI.Op))))) true) :qid |TSJidfy.132:24| :skolemid |1286| :pattern ( (TSJ.__default.ExtendLog2 |k#0@@19| |s#0@@19| |s'#0@@15| |uiop#0@@15|)) ))))
(assert (forall ((|k#0@@20| T@U) (|s#0@@20| T@U) (|s'#0@@16| T@U) (|uiop#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@20|) DatatypeTypeType) (= (type |s#0@@20|) DatatypeTypeType)) (= (type |s'#0@@16|) DatatypeTypeType)) (= (type |uiop#0@@16|) DatatypeTypeType)) (and (and (and ($Is |k#0@@20| Tclass.TSJ.Constants) ($Is |s#0@@20| Tclass.TSJ.Variables)) ($Is |s'#0@@16| Tclass.TSJ.Variables)) ($Is |uiop#0@@16| Tclass.UI.Op))) (and (=> (|TSJ.__default.ExtendLog2#requires| |k#0@@20| |s#0@@20| |s'#0@@16| |uiop#0@@16|) true) (=> true (|TSJ.__default.ExtendLog2#requires| |k#0@@20| |s#0@@20| |s'#0@@16| |uiop#0@@16|)))) :qid |TSJidfy.132:24| :skolemid |1287| :pattern ( (|TSJ.__default.ExtendLog2#requires| |k#0@@20| |s#0@@20| |s'#0@@16| |uiop#0@@16|)) )))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((|k#0@@21| T@U) (|s#0@@21| T@U) (|s'#0@@17| T@U) (|uiop#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@21|) DatatypeTypeType) (= (type |s#0@@21|) DatatypeTypeType)) (= (type |s'#0@@17|) DatatypeTypeType)) (= (type |uiop#0@@17|) DatatypeTypeType)) (or (|TSJ.__default.ExtendLog2#canCall| |k#0@@21| |s#0@@21| |s'#0@@17| |uiop#0@@17|) (and (not (= 10 $FunctionContextHeight)) (and (and (and ($Is |k#0@@21| Tclass.TSJ.Constants) ($Is |s#0@@21| Tclass.TSJ.Variables)) ($Is |s'#0@@17| Tclass.TSJ.Variables)) ($Is |uiop#0@@17| Tclass.UI.Op))))) (and (=> (UI.Op.NoOp_q |uiop#0@@17|) (and (|$IsA#TSJ.Variables| |s'#0@@17|) (and (and (and (and (and (and (and (TSJ.Variables.Variables_q |s#0@@21|) (TSJ.Variables.Variables_q |s#0@@21|)) (TSJ.Variables.Variables_q |s#0@@21|)) (TSJ.Variables.Variables_q |s#0@@21|)) (and (TSJ.Variables.Variables_q |s#0@@21|) (TSJ.Variables.Variables_q |s#0@@21|))) (TSJ.Variables.Variables_q |s#0@@21|)) (and (TSJ.Variables.Variables_q |s#0@@21|) (TSJ.Variables.Variables_q |s#0@@21|))) (and (TSJ.Variables.Variables_q |s#0@@21|) (|ThreeStateTypes.__default.SyncReqs3to2#canCall| (TSJ.Variables.outstandingSyncReqs |s#0@@21|)))))) (and (=> (TSJ.__default.ExtendLog2 |k#0@@21| |s#0@@21| |s'#0@@17| |uiop#0@@17|) (and (UI.Op.NoOp_q |uiop#0@@17|) (|TSJ.Variables#Equal| |s'#0@@17| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@21|) (TSJ.Variables.s2 |s#0@@21|) (TSJ.Variables.s3 |s#0@@21|) (TSJ.Variables.j1 |s#0@@21|) (|Seq#Append| (TSJ.Variables.j2 |s#0@@21|) (TSJ.Variables.j__delta |s#0@@21|)) (TSJ.Variables.j3 |s#0@@21|) (|Seq#Append| (TSJ.Variables.j__gamma |s#0@@21|) (TSJ.Variables.j__delta |s#0@@21|)) (Lit (|Seq#Empty| BoxType)) (ThreeStateTypes.__default.SyncReqs3to2 (TSJ.Variables.outstandingSyncReqs |s#0@@21|)))))) (=> (and (UI.Op.NoOp_q |uiop#0@@17|) (|TSJ.Variables#Equal| |s'#0@@17| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@21|) (TSJ.Variables.s2 |s#0@@21|) (TSJ.Variables.s3 |s#0@@21|) (TSJ.Variables.j1 |s#0@@21|) (|Seq#Append| (TSJ.Variables.j2 |s#0@@21|) (TSJ.Variables.j__delta |s#0@@21|)) (TSJ.Variables.j3 |s#0@@21|) (|Seq#Append| (TSJ.Variables.j__gamma |s#0@@21|) (TSJ.Variables.j__delta |s#0@@21|)) (Lit (|Seq#Empty| BoxType)) (ThreeStateTypes.__default.SyncReqs3to2 (TSJ.Variables.outstandingSyncReqs |s#0@@21|))))) (TSJ.__default.ExtendLog2 |k#0@@21| |s#0@@21| |s'#0@@17| |uiop#0@@17|))))) :qid |TSJidfy.132:24| :skolemid |1288| :pattern ( (TSJ.__default.ExtendLog2 |k#0@@21| |s#0@@21| |s'#0@@17| |uiop#0@@17|)) ))))
(assert  (=> (<= 10 $FunctionContextHeight) (forall ((|k#0@@22| T@U) (|s#0@@22| T@U) (|s'#0@@18| T@U) (|uiop#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@22|) DatatypeTypeType) (= (type |s#0@@22|) DatatypeTypeType)) (= (type |s'#0@@18|) DatatypeTypeType)) (= (type |uiop#0@@18|) DatatypeTypeType)) (or (|TSJ.__default.ExtendLog2#canCall| (Lit |k#0@@22|) (Lit |s#0@@22|) (Lit |s'#0@@18|) (Lit |uiop#0@@18|)) (and (not (= 10 $FunctionContextHeight)) (and (and (and ($Is |k#0@@22| Tclass.TSJ.Constants) ($Is |s#0@@22| Tclass.TSJ.Variables)) ($Is |s'#0@@18| Tclass.TSJ.Variables)) ($Is |uiop#0@@18| Tclass.UI.Op))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@18|))))) (and (|$IsA#TSJ.Variables| (Lit |s'#0@@18|)) (and (and (and (and (and (and (and (TSJ.Variables.Variables_q (Lit |s#0@@22|)) (TSJ.Variables.Variables_q (Lit |s#0@@22|))) (TSJ.Variables.Variables_q (Lit |s#0@@22|))) (TSJ.Variables.Variables_q (Lit |s#0@@22|))) (and (TSJ.Variables.Variables_q (Lit |s#0@@22|)) (TSJ.Variables.Variables_q (Lit |s#0@@22|)))) (TSJ.Variables.Variables_q (Lit |s#0@@22|))) (and (TSJ.Variables.Variables_q (Lit |s#0@@22|)) (TSJ.Variables.Variables_q (Lit |s#0@@22|)))) (and (TSJ.Variables.Variables_q (Lit |s#0@@22|)) (|ThreeStateTypes.__default.SyncReqs3to2#canCall| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@22|)))))))) (and (=> (TSJ.__default.ExtendLog2 (Lit |k#0@@22|) (Lit |s#0@@22|) (Lit |s'#0@@18|) (Lit |uiop#0@@18|)) (and (UI.Op.NoOp_q (Lit |uiop#0@@18|)) (|TSJ.Variables#Equal| |s'#0@@18| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@22|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@22|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@22|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@22|))) (|Seq#Append| (TSJ.Variables.j2 (Lit |s#0@@22|)) (TSJ.Variables.j__delta (Lit |s#0@@22|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@22|))) (|Seq#Append| (TSJ.Variables.j__gamma (Lit |s#0@@22|)) (TSJ.Variables.j__delta (Lit |s#0@@22|))) (Lit (|Seq#Empty| BoxType)) (Lit (ThreeStateTypes.__default.SyncReqs3to2 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@22|))))))))) (=> (and (UI.Op.NoOp_q (Lit |uiop#0@@18|)) (|TSJ.Variables#Equal| |s'#0@@18| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@22|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@22|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@22|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@22|))) (|Seq#Append| (TSJ.Variables.j2 (Lit |s#0@@22|)) (TSJ.Variables.j__delta (Lit |s#0@@22|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@22|))) (|Seq#Append| (TSJ.Variables.j__gamma (Lit |s#0@@22|)) (TSJ.Variables.j__delta (Lit |s#0@@22|))) (Lit (|Seq#Empty| BoxType)) (Lit (ThreeStateTypes.__default.SyncReqs3to2 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@22|)))))))) (TSJ.__default.ExtendLog2 (Lit |k#0@@22|) (Lit |s#0@@22|) (Lit |s'#0@@18|) (Lit |uiop#0@@18|)))))) :qid |TSJidfy.132:24| :weight 3 :skolemid |1289| :pattern ( (TSJ.__default.ExtendLog2 (Lit |k#0@@22|) (Lit |s#0@@22|) (Lit |s'#0@@18|) (Lit |uiop#0@@18|))) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((|k#0@@23| T@U) (|s#0@@23| T@U) (|s'#0@@19| T@U) (|uiop#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@23|) DatatypeTypeType) (= (type |s#0@@23|) DatatypeTypeType)) (= (type |s'#0@@19|) DatatypeTypeType)) (= (type |uiop#0@@19|) DatatypeTypeType)) (or (|TSJ.__default.Move3#canCall| |k#0@@23| |s#0@@23| |s'#0@@19| |uiop#0@@19|) (and (not (= 11 $FunctionContextHeight)) (and (and (and ($Is |k#0@@23| Tclass.TSJ.Constants) ($Is |s#0@@23| Tclass.TSJ.Variables)) ($Is |s'#0@@19| Tclass.TSJ.Variables)) ($Is |uiop#0@@19| Tclass.UI.Op))))) true) :qid |TSJidfy.147:19| :skolemid |1291| :pattern ( (TSJ.__default.Move3 |k#0@@23| |s#0@@23| |s'#0@@19| |uiop#0@@19|)) ))))
(assert (forall ((|k#0@@24| T@U) (|s#0@@24| T@U) (|s'#0@@20| T@U) (|uiop#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@24|) DatatypeTypeType) (= (type |s#0@@24|) DatatypeTypeType)) (= (type |s'#0@@20|) DatatypeTypeType)) (= (type |uiop#0@@20|) DatatypeTypeType)) (and (and (and ($Is |k#0@@24| Tclass.TSJ.Constants) ($Is |s#0@@24| Tclass.TSJ.Variables)) ($Is |s'#0@@20| Tclass.TSJ.Variables)) ($Is |uiop#0@@20| Tclass.UI.Op))) (and (=> (|TSJ.__default.Move3#requires| |k#0@@24| |s#0@@24| |s'#0@@20| |uiop#0@@20|) true) (=> true (|TSJ.__default.Move3#requires| |k#0@@24| |s#0@@24| |s'#0@@20| |uiop#0@@20|)))) :qid |TSJidfy.147:19| :skolemid |1292| :pattern ( (|TSJ.__default.Move3#requires| |k#0@@24| |s#0@@24| |s'#0@@20| |uiop#0@@20|)) )))
(assert (forall ((arg0@@349 T@U) ) (! (= (type (Journal.__default.JournalEntriesForUIOp arg0@@349)) (SeqType BoxType)) :qid |funType:Journal.__default.JournalEntriesForUIOp| :pattern ( (Journal.__default.JournalEntriesForUIOp arg0@@349)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((|k#0@@25| T@U) (|s#0@@25| T@U) (|s'#0@@21| T@U) (|uiop#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@25|) DatatypeTypeType) (= (type |s#0@@25|) DatatypeTypeType)) (= (type |s'#0@@21|) DatatypeTypeType)) (= (type |uiop#0@@21|) DatatypeTypeType)) (or (|TSJ.__default.Move3#canCall| |k#0@@25| |s#0@@25| |s'#0@@21| |uiop#0@@21|) (and (not (= 11 $FunctionContextHeight)) (and (and (and ($Is |k#0@@25| Tclass.TSJ.Constants) ($Is |s#0@@25| Tclass.TSJ.Variables)) ($Is |s'#0@@21| Tclass.TSJ.Variables)) ($Is |uiop#0@@21| Tclass.UI.Op))))) (and (and (and (and (and (TSJ.Constants.Constants_q |k#0@@25|) (TSJ.Variables.Variables_q |s#0@@25|)) (TSJ.Variables.Variables_q |s'#0@@21|)) (|TSJ.SM.Abs.__default.Next#canCall| (TSJ.Constants.k |k#0@@25|) (TSJ.Variables.s3 |s#0@@25|) (TSJ.Variables.s3 |s'#0@@21|) |uiop#0@@21|)) (=> (TSJ.SM.Abs.__default.Next (TSJ.Constants.k |k#0@@25|) (TSJ.Variables.s3 |s#0@@25|) (TSJ.Variables.s3 |s'#0@@21|) |uiop#0@@21|) (and (|Journal.__default.JournalEntriesForUIOp#canCall| |uiop#0@@21|) (and (TSJ.Variables.Variables_q |s#0@@25|) (=> (|Seq#Equal| (TSJ.Variables.j3 |s#0@@25|) (|Seq#Empty| BoxType)) (and (|$IsA#TSJ.Variables| |s'#0@@21|) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q |s#0@@25|) (TSJ.Variables.Variables_q |s#0@@25|)) (TSJ.Variables.Variables_q |s'#0@@21|)) (TSJ.Variables.Variables_q |s#0@@25|)) (TSJ.Variables.Variables_q |s#0@@25|)) (TSJ.Variables.Variables_q |s#0@@25|)) (TSJ.Variables.Variables_q |s#0@@25|)) (TSJ.Variables.Variables_q |s#0@@25|)) (TSJ.Variables.Variables_q |s#0@@25|)))))))) (and (=> (TSJ.__default.Move3 |k#0@@25| |s#0@@25| |s'#0@@21| |uiop#0@@21|) (and (TSJ.SM.Abs.__default.Next (TSJ.Constants.k |k#0@@25|) (TSJ.Variables.s3 |s#0@@25|) (TSJ.Variables.s3 |s'#0@@21|) |uiop#0@@21|) (let ((|new_je#0| (Journal.__default.JournalEntriesForUIOp |uiop#0@@21|))) (and (|Seq#Equal| (TSJ.Variables.j3 |s#0@@25|) (|Seq#Empty| BoxType)) (|TSJ.Variables#Equal| |s'#0@@21| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@25|) (TSJ.Variables.s2 |s#0@@25|) (TSJ.Variables.s3 |s'#0@@21|) (TSJ.Variables.j1 |s#0@@25|) (TSJ.Variables.j2 |s#0@@25|) (TSJ.Variables.j3 |s#0@@25|) (TSJ.Variables.j__gamma |s#0@@25|) (|Seq#Append| (TSJ.Variables.j__delta |s#0@@25|) |new_je#0|) (TSJ.Variables.outstandingSyncReqs |s#0@@25|))))))) (=> (and (TSJ.SM.Abs.__default.Next (TSJ.Constants.k |k#0@@25|) (TSJ.Variables.s3 |s#0@@25|) (TSJ.Variables.s3 |s'#0@@21|) |uiop#0@@21|) (let ((|new_je#0@@0| (Journal.__default.JournalEntriesForUIOp |uiop#0@@21|))) (and (|Seq#Equal| (TSJ.Variables.j3 |s#0@@25|) (|Seq#Empty| BoxType)) (|TSJ.Variables#Equal| |s'#0@@21| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@25|) (TSJ.Variables.s2 |s#0@@25|) (TSJ.Variables.s3 |s'#0@@21|) (TSJ.Variables.j1 |s#0@@25|) (TSJ.Variables.j2 |s#0@@25|) (TSJ.Variables.j3 |s#0@@25|) (TSJ.Variables.j__gamma |s#0@@25|) (|Seq#Append| (TSJ.Variables.j__delta |s#0@@25|) |new_je#0@@0|) (TSJ.Variables.outstandingSyncReqs |s#0@@25|)))))) (TSJ.__default.Move3 |k#0@@25| |s#0@@25| |s'#0@@21| |uiop#0@@21|))))) :qid |TSJidfy.147:19| :skolemid |1293| :pattern ( (TSJ.__default.Move3 |k#0@@25| |s#0@@25| |s'#0@@21| |uiop#0@@21|)) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall ((|k#0@@26| T@U) (|s#0@@26| T@U) (|s'#0@@22| T@U) (|uiop#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@26|) DatatypeTypeType) (= (type |s#0@@26|) DatatypeTypeType)) (= (type |s'#0@@22|) DatatypeTypeType)) (= (type |uiop#0@@22|) DatatypeTypeType)) (or (|TSJ.__default.Move3#canCall| (Lit |k#0@@26|) (Lit |s#0@@26|) (Lit |s'#0@@22|) (Lit |uiop#0@@22|)) (and (not (= 11 $FunctionContextHeight)) (and (and (and ($Is |k#0@@26| Tclass.TSJ.Constants) ($Is |s#0@@26| Tclass.TSJ.Variables)) ($Is |s'#0@@22| Tclass.TSJ.Variables)) ($Is |uiop#0@@22| Tclass.UI.Op))))) (and (and (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@26|)) (TSJ.Variables.Variables_q (Lit |s#0@@26|))) (TSJ.Variables.Variables_q (Lit |s'#0@@22|))) (|TSJ.SM.Abs.__default.Next#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@22|))) (Lit |uiop#0@@22|))) (=> (TSJ.SM.Abs.__default.Next (Lit (TSJ.Constants.k (Lit |k#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@22|))) (Lit |uiop#0@@22|)) (and (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit |uiop#0@@22|)) (and (TSJ.Variables.Variables_q (Lit |s#0@@26|)) (=> (|Seq#Equal| (TSJ.Variables.j3 (Lit |s#0@@26|)) (|Seq#Empty| BoxType)) (and (|$IsA#TSJ.Variables| (Lit |s'#0@@22|)) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q (Lit |s#0@@26|)) (TSJ.Variables.Variables_q (Lit |s#0@@26|))) (TSJ.Variables.Variables_q (Lit |s'#0@@22|))) (TSJ.Variables.Variables_q (Lit |s#0@@26|))) (TSJ.Variables.Variables_q (Lit |s#0@@26|))) (TSJ.Variables.Variables_q (Lit |s#0@@26|))) (TSJ.Variables.Variables_q (Lit |s#0@@26|))) (TSJ.Variables.Variables_q (Lit |s#0@@26|))) (TSJ.Variables.Variables_q (Lit |s#0@@26|))))))))) (and (=> (TSJ.__default.Move3 (Lit |k#0@@26|) (Lit |s#0@@26|) (Lit |s'#0@@22|) (Lit |uiop#0@@22|)) (and (TSJ.SM.Abs.__default.Next (Lit (TSJ.Constants.k (Lit |k#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@22|))) (Lit |uiop#0@@22|)) (let ((|new_je#1| (Lit (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@22|))))) (and (|Seq#Equal| (TSJ.Variables.j3 (Lit |s#0@@26|)) (|Seq#Empty| BoxType)) (|TSJ.Variables#Equal| |s'#0@@22| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@26|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@22|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@26|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@26|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@26|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@26|))) (|Seq#Append| (TSJ.Variables.j__delta (Lit |s#0@@26|)) |new_je#1|) (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@26|))))))))) (=> (and (TSJ.SM.Abs.__default.Next (Lit (TSJ.Constants.k (Lit |k#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@22|))) (Lit |uiop#0@@22|)) (let ((|new_je#1@@0| (Lit (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@22|))))) (and (|Seq#Equal| (TSJ.Variables.j3 (Lit |s#0@@26|)) (|Seq#Empty| BoxType)) (|TSJ.Variables#Equal| |s'#0@@22| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@26|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@26|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@22|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@26|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@26|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@26|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@26|))) (|Seq#Append| (TSJ.Variables.j__delta (Lit |s#0@@26|)) |new_je#1@@0|) (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@26|)))))))) (TSJ.__default.Move3 (Lit |k#0@@26|) (Lit |s#0@@26|) (Lit |s'#0@@22|) (Lit |uiop#0@@22|)))))) :qid |TSJidfy.147:19| :weight 3 :skolemid |1294| :pattern ( (TSJ.__default.Move3 (Lit |k#0@@26|) (Lit |s#0@@26|) (Lit |s'#0@@22|) (Lit |uiop#0@@22|))) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|k#0@@27| T@U) (|s#0@@27| T@U) (|s'#0@@23| T@U) (|uiop#0@@23| T@U) (|replayedUIOp#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@27|) DatatypeTypeType) (= (type |s#0@@27|) DatatypeTypeType)) (= (type |s'#0@@23|) DatatypeTypeType)) (= (type |uiop#0@@23|) DatatypeTypeType)) (= (type |replayedUIOp#0|) DatatypeTypeType)) (or (|TSJ.__default.Replay#canCall| |k#0@@27| |s#0@@27| |s'#0@@23| |uiop#0@@23| |replayedUIOp#0|) (and (not (= 12 $FunctionContextHeight)) (and (and (and (and ($Is |k#0@@27| Tclass.TSJ.Constants) ($Is |s#0@@27| Tclass.TSJ.Variables)) ($Is |s'#0@@23| Tclass.TSJ.Variables)) ($Is |uiop#0@@23| Tclass.UI.Op)) ($Is |replayedUIOp#0| Tclass.UI.Op))))) true) :qid |TSJidfy.164:20| :skolemid |1297| :pattern ( (TSJ.__default.Replay |k#0@@27| |s#0@@27| |s'#0@@23| |uiop#0@@23| |replayedUIOp#0|)) ))))
(assert (forall ((|k#0@@28| T@U) (|s#0@@28| T@U) (|s'#0@@24| T@U) (|uiop#0@@24| T@U) (|replayedUIOp#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@28|) DatatypeTypeType) (= (type |s#0@@28|) DatatypeTypeType)) (= (type |s'#0@@24|) DatatypeTypeType)) (= (type |uiop#0@@24|) DatatypeTypeType)) (= (type |replayedUIOp#0@@0|) DatatypeTypeType)) (and (and (and (and ($Is |k#0@@28| Tclass.TSJ.Constants) ($Is |s#0@@28| Tclass.TSJ.Variables)) ($Is |s'#0@@24| Tclass.TSJ.Variables)) ($Is |uiop#0@@24| Tclass.UI.Op)) ($Is |replayedUIOp#0@@0| Tclass.UI.Op))) (and (=> (|TSJ.__default.Replay#requires| |k#0@@28| |s#0@@28| |s'#0@@24| |uiop#0@@24| |replayedUIOp#0@@0|) true) (=> true (|TSJ.__default.Replay#requires| |k#0@@28| |s#0@@28| |s'#0@@24| |uiop#0@@24| |replayedUIOp#0@@0|)))) :qid |TSJidfy.164:20| :skolemid |1298| :pattern ( (|TSJ.__default.Replay#requires| |k#0@@28| |s#0@@28| |s'#0@@24| |uiop#0@@24| |replayedUIOp#0@@0|)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|k#0@@29| T@U) (|s#0@@29| T@U) (|s'#0@@25| T@U) (|uiop#0@@25| T@U) (|replayedUIOp#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@29|) DatatypeTypeType) (= (type |s#0@@29|) DatatypeTypeType)) (= (type |s'#0@@25|) DatatypeTypeType)) (= (type |uiop#0@@25|) DatatypeTypeType)) (= (type |replayedUIOp#0@@1|) DatatypeTypeType)) (or (|TSJ.__default.Replay#canCall| |k#0@@29| |s#0@@29| |s'#0@@25| |uiop#0@@25| |replayedUIOp#0@@1|) (and (not (= 12 $FunctionContextHeight)) (and (and (and (and ($Is |k#0@@29| Tclass.TSJ.Constants) ($Is |s#0@@29| Tclass.TSJ.Variables)) ($Is |s'#0@@25| Tclass.TSJ.Variables)) ($Is |uiop#0@@25| Tclass.UI.Op)) ($Is |replayedUIOp#0@@1| Tclass.UI.Op))))) (and (and (and (=> (UI.Op.NoOp_q |uiop#0@@25|) (and (and (and (TSJ.Constants.Constants_q |k#0@@29|) (TSJ.Variables.Variables_q |s#0@@29|)) (TSJ.Variables.Variables_q |s'#0@@25|)) (|TSJ.SM.Abs.__default.Next#canCall| (TSJ.Constants.k |k#0@@29|) (TSJ.Variables.s3 |s#0@@29|) (TSJ.Variables.s3 |s'#0@@25|) |replayedUIOp#0@@1|))) (=> (and (and (and (and (TSJ.Constants.Constants_q |k#0@@29|) (TSJ.Variables.Variables_q |s#0@@29|)) (TSJ.Variables.Variables_q |s'#0@@25|)) (|TSJ.SM.Abs.__default.Next#canCall| (TSJ.Constants.k |k#0@@29|) (TSJ.Variables.s3 |s#0@@29|) (TSJ.Variables.s3 |s'#0@@25|) |replayedUIOp#0@@1|)) (TSJ.SM.Abs.__default.Next (TSJ.Constants.k |k#0@@29|) (TSJ.Variables.s3 |s#0@@29|) (TSJ.Variables.s3 |s'#0@@25|) |replayedUIOp#0@@1|)) (and (TSJ.Variables.Variables_q |s#0@@29|) (and (|Journal.__default.JournalEntriesForUIOp#canCall| |replayedUIOp#0@@1|) (TSJ.Variables.Variables_q |s'#0@@25|))))) (=> (and (and (TSJ.Variables.Variables_q |s#0@@29|) (and (|Journal.__default.JournalEntriesForUIOp#canCall| |replayedUIOp#0@@1|) (TSJ.Variables.Variables_q |s'#0@@25|))) (|Seq#Equal| (TSJ.Variables.j3 |s#0@@29|) (|Seq#Append| (Journal.__default.JournalEntriesForUIOp |replayedUIOp#0@@1|) (TSJ.Variables.j3 |s'#0@@25|)))) (and (|$IsA#TSJ.Variables| |s'#0@@25|) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q |s#0@@29|) (TSJ.Variables.Variables_q |s#0@@29|)) (TSJ.Variables.Variables_q |s'#0@@25|)) (TSJ.Variables.Variables_q |s#0@@29|)) (TSJ.Variables.Variables_q |s#0@@29|)) (TSJ.Variables.Variables_q |s'#0@@25|)) (TSJ.Variables.Variables_q |s#0@@29|)) (TSJ.Variables.Variables_q |s#0@@29|)) (TSJ.Variables.Variables_q |s#0@@29|))))) (and (=> (TSJ.__default.Replay |k#0@@29| |s#0@@29| |s'#0@@25| |uiop#0@@25| |replayedUIOp#0@@1|) (and (and (and (UI.Op.NoOp_q |uiop#0@@25|) (TSJ.SM.Abs.__default.Next (TSJ.Constants.k |k#0@@29|) (TSJ.Variables.s3 |s#0@@29|) (TSJ.Variables.s3 |s'#0@@25|) |replayedUIOp#0@@1|)) (|Seq#Equal| (TSJ.Variables.j3 |s#0@@29|) (|Seq#Append| (Journal.__default.JournalEntriesForUIOp |replayedUIOp#0@@1|) (TSJ.Variables.j3 |s'#0@@25|)))) (|TSJ.Variables#Equal| |s'#0@@25| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@29|) (TSJ.Variables.s2 |s#0@@29|) (TSJ.Variables.s3 |s'#0@@25|) (TSJ.Variables.j1 |s#0@@29|) (TSJ.Variables.j2 |s#0@@29|) (TSJ.Variables.j3 |s'#0@@25|) (TSJ.Variables.j__gamma |s#0@@29|) (TSJ.Variables.j__delta |s#0@@29|) (TSJ.Variables.outstandingSyncReqs |s#0@@29|))))) (=> (and (and (and (UI.Op.NoOp_q |uiop#0@@25|) (TSJ.SM.Abs.__default.Next (TSJ.Constants.k |k#0@@29|) (TSJ.Variables.s3 |s#0@@29|) (TSJ.Variables.s3 |s'#0@@25|) |replayedUIOp#0@@1|)) (|Seq#Equal| (TSJ.Variables.j3 |s#0@@29|) (|Seq#Append| (Journal.__default.JournalEntriesForUIOp |replayedUIOp#0@@1|) (TSJ.Variables.j3 |s'#0@@25|)))) (|TSJ.Variables#Equal| |s'#0@@25| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@29|) (TSJ.Variables.s2 |s#0@@29|) (TSJ.Variables.s3 |s'#0@@25|) (TSJ.Variables.j1 |s#0@@29|) (TSJ.Variables.j2 |s#0@@29|) (TSJ.Variables.j3 |s'#0@@25|) (TSJ.Variables.j__gamma |s#0@@29|) (TSJ.Variables.j__delta |s#0@@29|) (TSJ.Variables.outstandingSyncReqs |s#0@@29|)))) (TSJ.__default.Replay |k#0@@29| |s#0@@29| |s'#0@@25| |uiop#0@@25| |replayedUIOp#0@@1|))))) :qid |TSJidfy.164:20| :skolemid |1299| :pattern ( (TSJ.__default.Replay |k#0@@29| |s#0@@29| |s'#0@@25| |uiop#0@@25| |replayedUIOp#0@@1|)) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|k#0@@30| T@U) (|s#0@@30| T@U) (|s'#0@@26| T@U) (|uiop#0@@26| T@U) (|replayedUIOp#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@30|) DatatypeTypeType) (= (type |s#0@@30|) DatatypeTypeType)) (= (type |s'#0@@26|) DatatypeTypeType)) (= (type |uiop#0@@26|) DatatypeTypeType)) (= (type |replayedUIOp#0@@2|) DatatypeTypeType)) (or (|TSJ.__default.Replay#canCall| (Lit |k#0@@30|) (Lit |s#0@@30|) (Lit |s'#0@@26|) (Lit |uiop#0@@26|) (Lit |replayedUIOp#0@@2|)) (and (not (= 12 $FunctionContextHeight)) (and (and (and (and ($Is |k#0@@30| Tclass.TSJ.Constants) ($Is |s#0@@30| Tclass.TSJ.Variables)) ($Is |s'#0@@26| Tclass.TSJ.Variables)) ($Is |uiop#0@@26| Tclass.UI.Op)) ($Is |replayedUIOp#0@@2| Tclass.UI.Op))))) (and (and (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@26|))))) (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@30|)) (TSJ.Variables.Variables_q (Lit |s#0@@30|))) (TSJ.Variables.Variables_q (Lit |s'#0@@26|))) (|TSJ.SM.Abs.__default.Next#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@26|))) (Lit |replayedUIOp#0@@2|)))) (=> (and (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@30|)) (TSJ.Variables.Variables_q (Lit |s#0@@30|))) (TSJ.Variables.Variables_q (Lit |s'#0@@26|))) (|TSJ.SM.Abs.__default.Next#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@26|))) (Lit |replayedUIOp#0@@2|))) (TSJ.SM.Abs.__default.Next (Lit (TSJ.Constants.k (Lit |k#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@26|))) (Lit |replayedUIOp#0@@2|))) (and (TSJ.Variables.Variables_q (Lit |s#0@@30|)) (and (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit |replayedUIOp#0@@2|)) (TSJ.Variables.Variables_q (Lit |s'#0@@26|)))))) (=> (and (and (TSJ.Variables.Variables_q (Lit |s#0@@30|)) (and (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit |replayedUIOp#0@@2|)) (TSJ.Variables.Variables_q (Lit |s'#0@@26|)))) (|Seq#Equal| (TSJ.Variables.j3 (Lit |s#0@@30|)) (|Seq#Append| (Journal.__default.JournalEntriesForUIOp (Lit |replayedUIOp#0@@2|)) (TSJ.Variables.j3 (Lit |s'#0@@26|))))) (and (|$IsA#TSJ.Variables| (Lit |s'#0@@26|)) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q (Lit |s#0@@30|)) (TSJ.Variables.Variables_q (Lit |s#0@@30|))) (TSJ.Variables.Variables_q (Lit |s'#0@@26|))) (TSJ.Variables.Variables_q (Lit |s#0@@30|))) (TSJ.Variables.Variables_q (Lit |s#0@@30|))) (TSJ.Variables.Variables_q (Lit |s'#0@@26|))) (TSJ.Variables.Variables_q (Lit |s#0@@30|))) (TSJ.Variables.Variables_q (Lit |s#0@@30|))) (TSJ.Variables.Variables_q (Lit |s#0@@30|)))))) (and (=> (TSJ.__default.Replay (Lit |k#0@@30|) (Lit |s#0@@30|) (Lit |s'#0@@26|) (Lit |uiop#0@@26|) (Lit |replayedUIOp#0@@2|)) (and (and (and (UI.Op.NoOp_q (Lit |uiop#0@@26|)) (TSJ.SM.Abs.__default.Next (Lit (TSJ.Constants.k (Lit |k#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@26|))) (Lit |replayedUIOp#0@@2|))) (|Seq#Equal| (TSJ.Variables.j3 (Lit |s#0@@30|)) (|Seq#Append| (Journal.__default.JournalEntriesForUIOp (Lit |replayedUIOp#0@@2|)) (TSJ.Variables.j3 (Lit |s'#0@@26|))))) (|TSJ.Variables#Equal| |s'#0@@26| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@30|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@26|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@30|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@30|))) (Lit (TSJ.Variables.j3 (Lit |s'#0@@26|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@30|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@30|))) (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@30|))))))) (=> (and (and (and (UI.Op.NoOp_q (Lit |uiop#0@@26|)) (TSJ.SM.Abs.__default.Next (Lit (TSJ.Constants.k (Lit |k#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@26|))) (Lit |replayedUIOp#0@@2|))) (|Seq#Equal| (TSJ.Variables.j3 (Lit |s#0@@30|)) (|Seq#Append| (Journal.__default.JournalEntriesForUIOp (Lit |replayedUIOp#0@@2|)) (TSJ.Variables.j3 (Lit |s'#0@@26|))))) (|TSJ.Variables#Equal| |s'#0@@26| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@30|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@30|))) (Lit (TSJ.Variables.s3 (Lit |s'#0@@26|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@30|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@30|))) (Lit (TSJ.Variables.j3 (Lit |s'#0@@26|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@30|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@30|))) (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@30|)))))) (TSJ.__default.Replay (Lit |k#0@@30|) (Lit |s#0@@30|) (Lit |s'#0@@26|) (Lit |uiop#0@@26|) (Lit |replayedUIOp#0@@2|)))))) :qid |TSJidfy.164:20| :weight 3 :skolemid |1300| :pattern ( (TSJ.__default.Replay (Lit |k#0@@30|) (Lit |s#0@@30|) (Lit |s'#0@@26|) (Lit |uiop#0@@26|) (Lit |replayedUIOp#0@@2|))) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|k#0@@31| T@U) (|s#0@@31| T@U) (|s'#0@@27| T@U) (|uiop#0@@27| T@U) (|id#0| Int) ) (!  (=> (and (and (and (and (= (type |k#0@@31|) DatatypeTypeType) (= (type |s#0@@31|) DatatypeTypeType)) (= (type |s'#0@@27|) DatatypeTypeType)) (= (type |uiop#0@@27|) DatatypeTypeType)) (or (|TSJ.__default.PushSync#canCall| |k#0@@31| |s#0@@31| |s'#0@@27| |uiop#0@@27| |id#0|) (and (not (= 13 $FunctionContextHeight)) (and (and (and ($Is |k#0@@31| Tclass.TSJ.Constants) ($Is |s#0@@31| Tclass.TSJ.Variables)) ($Is |s'#0@@27| Tclass.TSJ.Variables)) ($Is |uiop#0@@27| Tclass.UI.Op))))) true) :qid |TSJidfy.181:22| :skolemid |1303| :pattern ( (TSJ.__default.PushSync |k#0@@31| |s#0@@31| |s'#0@@27| |uiop#0@@27| |id#0|)) ))))
(assert (forall ((|k#0@@32| T@U) (|s#0@@32| T@U) (|s'#0@@28| T@U) (|uiop#0@@28| T@U) (|id#0@@0| Int) ) (!  (=> (and (and (and (and (= (type |k#0@@32|) DatatypeTypeType) (= (type |s#0@@32|) DatatypeTypeType)) (= (type |s'#0@@28|) DatatypeTypeType)) (= (type |uiop#0@@28|) DatatypeTypeType)) (and (and (and ($Is |k#0@@32| Tclass.TSJ.Constants) ($Is |s#0@@32| Tclass.TSJ.Variables)) ($Is |s'#0@@28| Tclass.TSJ.Variables)) ($Is |uiop#0@@28| Tclass.UI.Op))) (and (=> (|TSJ.__default.PushSync#requires| |k#0@@32| |s#0@@32| |s'#0@@28| |uiop#0@@28| |id#0@@0|) true) (=> true (|TSJ.__default.PushSync#requires| |k#0@@32| |s#0@@32| |s'#0@@28| |uiop#0@@28| |id#0@@0|)))) :qid |TSJidfy.181:22| :skolemid |1304| :pattern ( (|TSJ.__default.PushSync#requires| |k#0@@32| |s#0@@32| |s'#0@@28| |uiop#0@@28| |id#0@@0|)) )))
(assert  (and (forall ((arg0@@350 Int) ) (! (= (type (|#UI.Op.PushSyncOp| arg0@@350)) DatatypeTypeType) :qid |funType:#UI.Op.PushSyncOp| :pattern ( (|#UI.Op.PushSyncOp| arg0@@350)) )) (= (type |#ThreeStateTypes.SyncReqStatus.State3|) DatatypeTypeType)))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|k#0@@33| T@U) (|s#0@@33| T@U) (|s'#0@@29| T@U) (|uiop#0@@29| T@U) (|id#0@@1| Int) ) (!  (=> (and (and (and (and (= (type |k#0@@33|) DatatypeTypeType) (= (type |s#0@@33|) DatatypeTypeType)) (= (type |s'#0@@29|) DatatypeTypeType)) (= (type |uiop#0@@29|) DatatypeTypeType)) (or (|TSJ.__default.PushSync#canCall| |k#0@@33| |s#0@@33| |s'#0@@29| |uiop#0@@29| |id#0@@1|) (and (not (= 13 $FunctionContextHeight)) (and (and (and ($Is |k#0@@33| Tclass.TSJ.Constants) ($Is |s#0@@33| Tclass.TSJ.Variables)) ($Is |s'#0@@29| Tclass.TSJ.Variables)) ($Is |uiop#0@@29| Tclass.UI.Op))))) (and (and (and (|$IsA#UI.Op| |uiop#0@@29|) (=> (|UI.Op#Equal| |uiop#0@@29| (|#UI.Op.PushSyncOp| |id#0@@1|)) (TSJ.Variables.Variables_q |s#0@@33|))) (=> (and (TSJ.Variables.Variables_q |s#0@@33|) (not (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs |s#0@@33|)) ($Box (int_2_U |id#0@@1|)))))) (and (|$IsA#TSJ.Variables| |s'#0@@29|) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q |s#0@@33|) (TSJ.Variables.Variables_q |s#0@@33|)) (TSJ.Variables.Variables_q |s#0@@33|)) (TSJ.Variables.Variables_q |s#0@@33|)) (TSJ.Variables.Variables_q |s#0@@33|)) (TSJ.Variables.Variables_q |s#0@@33|)) (TSJ.Variables.Variables_q |s#0@@33|)) (TSJ.Variables.Variables_q |s#0@@33|)) (TSJ.Variables.Variables_q |s#0@@33|))))) (and (=> (TSJ.__default.PushSync |k#0@@33| |s#0@@33| |s'#0@@29| |uiop#0@@29| |id#0@@1|) (and (and (|UI.Op#Equal| |uiop#0@@29| (|#UI.Op.PushSyncOp| |id#0@@1|)) (not (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs |s#0@@33|)) ($Box (int_2_U |id#0@@1|)))))) (|TSJ.Variables#Equal| |s'#0@@29| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@33|) (TSJ.Variables.s2 |s#0@@33|) (TSJ.Variables.s3 |s#0@@33|) (TSJ.Variables.j1 |s#0@@33|) (TSJ.Variables.j2 |s#0@@33|) (TSJ.Variables.j3 |s#0@@33|) (TSJ.Variables.j__gamma |s#0@@33|) (TSJ.Variables.j__delta |s#0@@33|) (|Map#Build| (TSJ.Variables.outstandingSyncReqs |s#0@@33|) ($Box (int_2_U |id#0@@1|)) ($Box (Lit |#ThreeStateTypes.SyncReqStatus.State3|))))))) (=> (and (and (|UI.Op#Equal| |uiop#0@@29| (|#UI.Op.PushSyncOp| |id#0@@1|)) (not (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs |s#0@@33|)) ($Box (int_2_U |id#0@@1|)))))) (|TSJ.Variables#Equal| |s'#0@@29| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@33|) (TSJ.Variables.s2 |s#0@@33|) (TSJ.Variables.s3 |s#0@@33|) (TSJ.Variables.j1 |s#0@@33|) (TSJ.Variables.j2 |s#0@@33|) (TSJ.Variables.j3 |s#0@@33|) (TSJ.Variables.j__gamma |s#0@@33|) (TSJ.Variables.j__delta |s#0@@33|) (|Map#Build| (TSJ.Variables.outstandingSyncReqs |s#0@@33|) ($Box (int_2_U |id#0@@1|)) ($Box (Lit |#ThreeStateTypes.SyncReqStatus.State3|)))))) (TSJ.__default.PushSync |k#0@@33| |s#0@@33| |s'#0@@29| |uiop#0@@29| |id#0@@1|))))) :qid |TSJidfy.181:22| :skolemid |1305| :pattern ( (TSJ.__default.PushSync |k#0@@33| |s#0@@33| |s'#0@@29| |uiop#0@@29| |id#0@@1|)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|k#0@@34| T@U) (|s#0@@34| T@U) (|s'#0@@30| T@U) (|uiop#0@@30| T@U) (|id#0@@2| Int) ) (!  (=> (and (and (and (and (= (type |k#0@@34|) DatatypeTypeType) (= (type |s#0@@34|) DatatypeTypeType)) (= (type |s'#0@@30|) DatatypeTypeType)) (= (type |uiop#0@@30|) DatatypeTypeType)) (or (|TSJ.__default.PushSync#canCall| (Lit |k#0@@34|) (Lit |s#0@@34|) (Lit |s'#0@@30|) (Lit |uiop#0@@30|) (LitInt |id#0@@2|)) (and (not (= 13 $FunctionContextHeight)) (and (and (and ($Is |k#0@@34| Tclass.TSJ.Constants) ($Is |s#0@@34| Tclass.TSJ.Variables)) ($Is |s'#0@@30| Tclass.TSJ.Variables)) ($Is |uiop#0@@30| Tclass.UI.Op))))) (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@30|)) (=> (|UI.Op#Equal| |uiop#0@@30| (|#UI.Op.PushSyncOp| (LitInt |id#0@@2|))) (TSJ.Variables.Variables_q (Lit |s#0@@34|)))) (=> (and (TSJ.Variables.Variables_q (Lit |s#0@@34|)) (not (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@34|))) ($Box (int_2_U |id#0@@2|)))))) (and (|$IsA#TSJ.Variables| (Lit |s'#0@@30|)) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q (Lit |s#0@@34|)) (TSJ.Variables.Variables_q (Lit |s#0@@34|))) (TSJ.Variables.Variables_q (Lit |s#0@@34|))) (TSJ.Variables.Variables_q (Lit |s#0@@34|))) (TSJ.Variables.Variables_q (Lit |s#0@@34|))) (TSJ.Variables.Variables_q (Lit |s#0@@34|))) (TSJ.Variables.Variables_q (Lit |s#0@@34|))) (TSJ.Variables.Variables_q (Lit |s#0@@34|))) (TSJ.Variables.Variables_q (Lit |s#0@@34|)))))) (and (=> (TSJ.__default.PushSync (Lit |k#0@@34|) (Lit |s#0@@34|) (Lit |s'#0@@30|) (Lit |uiop#0@@30|) (LitInt |id#0@@2|)) (and (and (|UI.Op#Equal| |uiop#0@@30| (|#UI.Op.PushSyncOp| (LitInt |id#0@@2|))) (not (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@34|))) ($Box (int_2_U |id#0@@2|)))))) (|TSJ.Variables#Equal| |s'#0@@30| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@34|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@34|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@34|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@34|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@34|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@34|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@34|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@34|))) (|Map#Build| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@34|))) ($Box (int_2_U (LitInt |id#0@@2|))) ($Box (Lit |#ThreeStateTypes.SyncReqStatus.State3|))))))) (=> (and (and (|UI.Op#Equal| |uiop#0@@30| (|#UI.Op.PushSyncOp| (LitInt |id#0@@2|))) (not (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@34|))) ($Box (int_2_U |id#0@@2|)))))) (|TSJ.Variables#Equal| |s'#0@@30| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@34|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@34|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@34|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@34|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@34|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@34|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@34|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@34|))) (|Map#Build| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@34|))) ($Box (int_2_U (LitInt |id#0@@2|))) ($Box (Lit |#ThreeStateTypes.SyncReqStatus.State3|)))))) (TSJ.__default.PushSync (Lit |k#0@@34|) (Lit |s#0@@34|) (Lit |s'#0@@30|) (Lit |uiop#0@@30|) (LitInt |id#0@@2|)))))) :qid |TSJidfy.181:22| :weight 3 :skolemid |1306| :pattern ( (TSJ.__default.PushSync (Lit |k#0@@34|) (Lit |s#0@@34|) (Lit |s'#0@@30|) (Lit |uiop#0@@30|) (LitInt |id#0@@2|))) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((|k#0@@35| T@U) (|s#0@@35| T@U) (|s'#0@@31| T@U) (|uiop#0@@31| T@U) (|id#0@@3| Int) ) (!  (=> (and (and (and (and (= (type |k#0@@35|) DatatypeTypeType) (= (type |s#0@@35|) DatatypeTypeType)) (= (type |s'#0@@31|) DatatypeTypeType)) (= (type |uiop#0@@31|) DatatypeTypeType)) (or (|TSJ.__default.PopSync#canCall| |k#0@@35| |s#0@@35| |s'#0@@31| |uiop#0@@31| |id#0@@3|) (and (not (= 14 $FunctionContextHeight)) (and (and (and ($Is |k#0@@35| Tclass.TSJ.Constants) ($Is |s#0@@35| Tclass.TSJ.Variables)) ($Is |s'#0@@31| Tclass.TSJ.Variables)) ($Is |uiop#0@@31| Tclass.UI.Op))))) true) :qid |TSJidfy.188:21| :skolemid |1307| :pattern ( (TSJ.__default.PopSync |k#0@@35| |s#0@@35| |s'#0@@31| |uiop#0@@31| |id#0@@3|)) ))))
(assert (forall ((|k#0@@36| T@U) (|s#0@@36| T@U) (|s'#0@@32| T@U) (|uiop#0@@32| T@U) (|id#0@@4| Int) ) (!  (=> (and (and (and (and (= (type |k#0@@36|) DatatypeTypeType) (= (type |s#0@@36|) DatatypeTypeType)) (= (type |s'#0@@32|) DatatypeTypeType)) (= (type |uiop#0@@32|) DatatypeTypeType)) (and (and (and ($Is |k#0@@36| Tclass.TSJ.Constants) ($Is |s#0@@36| Tclass.TSJ.Variables)) ($Is |s'#0@@32| Tclass.TSJ.Variables)) ($Is |uiop#0@@32| Tclass.UI.Op))) (and (=> (|TSJ.__default.PopSync#requires| |k#0@@36| |s#0@@36| |s'#0@@32| |uiop#0@@32| |id#0@@4|) true) (=> true (|TSJ.__default.PopSync#requires| |k#0@@36| |s#0@@36| |s'#0@@32| |uiop#0@@32| |id#0@@4|)))) :qid |TSJidfy.188:21| :skolemid |1308| :pattern ( (|TSJ.__default.PopSync#requires| |k#0@@36| |s#0@@36| |s'#0@@32| |uiop#0@@32| |id#0@@4|)) )))
(assert  (and (and (and (forall ((arg0@@351 Int) ) (! (= (type (|#UI.Op.PopSyncOp| arg0@@351)) DatatypeTypeType) :qid |funType:#UI.Op.PopSyncOp| :pattern ( (|#UI.Op.PopSyncOp| arg0@@351)) )) (= (type |#ThreeStateTypes.SyncReqStatus.State1|) DatatypeTypeType)) (forall ((arg0@@352 T@U) (arg1@@157 T@U) (arg2@@113 T@U) (arg3@@88 T@U) (arg4@@77 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@352 arg1@@157 arg2@@113 arg3@@88 arg4@@77)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@352 arg1@@157 arg2@@113 arg3@@88 arg4@@77)) ))) (= (type StartFuel_Maps._default.MapRemove1) LayerTypeType)))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((|k#0@@37| T@U) (|s#0@@37| T@U) (|s'#0@@33| T@U) (|uiop#0@@33| T@U) (|id#0@@5| Int) ) (!  (=> (and (and (and (and (= (type |k#0@@37|) DatatypeTypeType) (= (type |s#0@@37|) DatatypeTypeType)) (= (type |s'#0@@33|) DatatypeTypeType)) (= (type |uiop#0@@33|) DatatypeTypeType)) (or (|TSJ.__default.PopSync#canCall| |k#0@@37| |s#0@@37| |s'#0@@33| |uiop#0@@33| |id#0@@5|) (and (not (= 14 $FunctionContextHeight)) (and (and (and ($Is |k#0@@37| Tclass.TSJ.Constants) ($Is |s#0@@37| Tclass.TSJ.Variables)) ($Is |s'#0@@33| Tclass.TSJ.Variables)) ($Is |uiop#0@@33| Tclass.UI.Op))))) (and (and (and (and (|$IsA#UI.Op| |uiop#0@@33|) (=> (|UI.Op#Equal| |uiop#0@@33| (|#UI.Op.PopSyncOp| |id#0@@5|)) (TSJ.Variables.Variables_q |s#0@@37|))) (=> (and (TSJ.Variables.Variables_q |s#0@@37|) (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs |s#0@@37|)) ($Box (int_2_U |id#0@@5|))))) (and (|$IsA#ThreeStateTypes.SyncReqStatus| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (TSJ.Variables.outstandingSyncReqs |s#0@@37|)) ($Box (int_2_U |id#0@@5|))))) (TSJ.Variables.Variables_q |s#0@@37|)))) (=> (and (and (|$IsA#ThreeStateTypes.SyncReqStatus| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (TSJ.Variables.outstandingSyncReqs |s#0@@37|)) ($Box (int_2_U |id#0@@5|))))) (TSJ.Variables.Variables_q |s#0@@37|)) (|ThreeStateTypes.SyncReqStatus#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (TSJ.Variables.outstandingSyncReqs |s#0@@37|)) ($Box (int_2_U |id#0@@5|)))) |#ThreeStateTypes.SyncReqStatus.State1|)) (and (|$IsA#TSJ.Variables| |s'#0@@33|) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q |s#0@@37|) (TSJ.Variables.Variables_q |s#0@@37|)) (TSJ.Variables.Variables_q |s#0@@37|)) (TSJ.Variables.Variables_q |s#0@@37|)) (TSJ.Variables.Variables_q |s#0@@37|)) (TSJ.Variables.Variables_q |s#0@@37|)) (TSJ.Variables.Variables_q |s#0@@37|)) (TSJ.Variables.Variables_q |s#0@@37|)) (and (TSJ.Variables.Variables_q |s#0@@37|) (|Maps.__default.MapRemove1#canCall| TInt Tclass.ThreeStateTypes.SyncReqStatus (TSJ.Variables.outstandingSyncReqs |s#0@@37|) ($Box (int_2_U |id#0@@5|)))))))) (and (=> (TSJ.__default.PopSync |k#0@@37| |s#0@@37| |s'#0@@33| |uiop#0@@33| |id#0@@5|) (and (and (and (|UI.Op#Equal| |uiop#0@@33| (|#UI.Op.PopSyncOp| |id#0@@5|)) (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs |s#0@@37|)) ($Box (int_2_U |id#0@@5|))))) (|ThreeStateTypes.SyncReqStatus#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (TSJ.Variables.outstandingSyncReqs |s#0@@37|)) ($Box (int_2_U |id#0@@5|)))) |#ThreeStateTypes.SyncReqStatus.State1|)) (|TSJ.Variables#Equal| |s'#0@@33| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@37|) (TSJ.Variables.s2 |s#0@@37|) (TSJ.Variables.s3 |s#0@@37|) (TSJ.Variables.j1 |s#0@@37|) (TSJ.Variables.j2 |s#0@@37|) (TSJ.Variables.j3 |s#0@@37|) (TSJ.Variables.j__gamma |s#0@@37|) (TSJ.Variables.j__delta |s#0@@37|) (Maps.__default.MapRemove1 TInt Tclass.ThreeStateTypes.SyncReqStatus StartFuel_Maps._default.MapRemove1 (TSJ.Variables.outstandingSyncReqs |s#0@@37|) ($Box (int_2_U |id#0@@5|))))))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@33| (|#UI.Op.PopSyncOp| |id#0@@5|)) (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs |s#0@@37|)) ($Box (int_2_U |id#0@@5|))))) (|ThreeStateTypes.SyncReqStatus#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (TSJ.Variables.outstandingSyncReqs |s#0@@37|)) ($Box (int_2_U |id#0@@5|)))) |#ThreeStateTypes.SyncReqStatus.State1|)) (|TSJ.Variables#Equal| |s'#0@@33| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@37|) (TSJ.Variables.s2 |s#0@@37|) (TSJ.Variables.s3 |s#0@@37|) (TSJ.Variables.j1 |s#0@@37|) (TSJ.Variables.j2 |s#0@@37|) (TSJ.Variables.j3 |s#0@@37|) (TSJ.Variables.j__gamma |s#0@@37|) (TSJ.Variables.j__delta |s#0@@37|) (Maps.__default.MapRemove1 TInt Tclass.ThreeStateTypes.SyncReqStatus StartFuel_Maps._default.MapRemove1 (TSJ.Variables.outstandingSyncReqs |s#0@@37|) ($Box (int_2_U |id#0@@5|)))))) (TSJ.__default.PopSync |k#0@@37| |s#0@@37| |s'#0@@33| |uiop#0@@33| |id#0@@5|))))) :qid |TSJidfy.188:21| :skolemid |1309| :pattern ( (TSJ.__default.PopSync |k#0@@37| |s#0@@37| |s'#0@@33| |uiop#0@@33| |id#0@@5|)) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall ((|k#0@@38| T@U) (|s#0@@38| T@U) (|s'#0@@34| T@U) (|uiop#0@@34| T@U) (|id#0@@6| Int) ) (!  (=> (and (and (and (and (= (type |k#0@@38|) DatatypeTypeType) (= (type |s#0@@38|) DatatypeTypeType)) (= (type |s'#0@@34|) DatatypeTypeType)) (= (type |uiop#0@@34|) DatatypeTypeType)) (or (|TSJ.__default.PopSync#canCall| (Lit |k#0@@38|) (Lit |s#0@@38|) (Lit |s'#0@@34|) (Lit |uiop#0@@34|) (LitInt |id#0@@6|)) (and (not (= 14 $FunctionContextHeight)) (and (and (and ($Is |k#0@@38| Tclass.TSJ.Constants) ($Is |s#0@@38| Tclass.TSJ.Variables)) ($Is |s'#0@@34| Tclass.TSJ.Variables)) ($Is |uiop#0@@34| Tclass.UI.Op))))) (and (and (and (and (|$IsA#UI.Op| (Lit |uiop#0@@34|)) (=> (|UI.Op#Equal| |uiop#0@@34| (|#UI.Op.PopSyncOp| (LitInt |id#0@@6|))) (TSJ.Variables.Variables_q (Lit |s#0@@38|)))) (=> (and (TSJ.Variables.Variables_q (Lit |s#0@@38|)) (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|))) ($Box (int_2_U |id#0@@6|))))) (and (|$IsA#ThreeStateTypes.SyncReqStatus| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|)))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (TSJ.Variables.Variables_q (Lit |s#0@@38|))))) (=> (and (and (|$IsA#ThreeStateTypes.SyncReqStatus| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|)))) ($Box (int_2_U (LitInt |id#0@@6|)))))) (TSJ.Variables.Variables_q (Lit |s#0@@38|))) (|ThreeStateTypes.SyncReqStatus#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|)))) ($Box (int_2_U (LitInt |id#0@@6|))))) |#ThreeStateTypes.SyncReqStatus.State1|)) (and (|$IsA#TSJ.Variables| (Lit |s'#0@@34|)) (and (and (and (and (and (and (and (and (TSJ.Variables.Variables_q (Lit |s#0@@38|)) (TSJ.Variables.Variables_q (Lit |s#0@@38|))) (TSJ.Variables.Variables_q (Lit |s#0@@38|))) (TSJ.Variables.Variables_q (Lit |s#0@@38|))) (TSJ.Variables.Variables_q (Lit |s#0@@38|))) (TSJ.Variables.Variables_q (Lit |s#0@@38|))) (TSJ.Variables.Variables_q (Lit |s#0@@38|))) (TSJ.Variables.Variables_q (Lit |s#0@@38|))) (and (TSJ.Variables.Variables_q (Lit |s#0@@38|)) (|Maps.__default.MapRemove1#canCall| TInt Tclass.ThreeStateTypes.SyncReqStatus (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|))) ($Box (int_2_U (LitInt |id#0@@6|))))))))) (and (=> (TSJ.__default.PopSync (Lit |k#0@@38|) (Lit |s#0@@38|) (Lit |s'#0@@34|) (Lit |uiop#0@@34|) (LitInt |id#0@@6|)) (and (and (and (|UI.Op#Equal| |uiop#0@@34| (|#UI.Op.PopSyncOp| (LitInt |id#0@@6|))) (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|))) ($Box (int_2_U |id#0@@6|))))) (|ThreeStateTypes.SyncReqStatus#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|)))) ($Box (int_2_U (LitInt |id#0@@6|))))) |#ThreeStateTypes.SyncReqStatus.State1|)) (|TSJ.Variables#Equal| |s'#0@@34| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@38|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@38|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@38|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@38|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@38|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@38|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@38|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@38|))) (Maps.__default.MapRemove1 TInt Tclass.ThreeStateTypes.SyncReqStatus StartFuel_Maps._default.MapRemove1 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|))) ($Box (int_2_U (LitInt |id#0@@6|)))))))) (=> (and (and (and (|UI.Op#Equal| |uiop#0@@34| (|#UI.Op.PopSyncOp| (LitInt |id#0@@6|))) (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|))) ($Box (int_2_U |id#0@@6|))))) (|ThreeStateTypes.SyncReqStatus#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|)))) ($Box (int_2_U (LitInt |id#0@@6|))))) |#ThreeStateTypes.SyncReqStatus.State1|)) (|TSJ.Variables#Equal| |s'#0@@34| (|#TSJ.Variables.Variables| (Lit (TSJ.Variables.s1 (Lit |s#0@@38|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@38|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@38|))) (Lit (TSJ.Variables.j1 (Lit |s#0@@38|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@38|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@38|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@38|))) (Lit (TSJ.Variables.j__delta (Lit |s#0@@38|))) (Maps.__default.MapRemove1 TInt Tclass.ThreeStateTypes.SyncReqStatus StartFuel_Maps._default.MapRemove1 (Lit (TSJ.Variables.outstandingSyncReqs (Lit |s#0@@38|))) ($Box (int_2_U (LitInt |id#0@@6|))))))) (TSJ.__default.PopSync (Lit |k#0@@38|) (Lit |s#0@@38|) (Lit |s'#0@@34|) (Lit |uiop#0@@34|) (LitInt |id#0@@6|)))))) :qid |TSJidfy.188:21| :weight 3 :skolemid |1310| :pattern ( (TSJ.__default.PopSync (Lit |k#0@@38|) (Lit |s#0@@38|) (Lit |s'#0@@34|) (Lit |uiop#0@@34|) (LitInt |id#0@@6|))) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|k#0@@39| T@U) (|s#0@@39| T@U) (|s'#0@@35| T@U) (|uiop#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@39|) DatatypeTypeType) (= (type |s#0@@39|) DatatypeTypeType)) (= (type |s'#0@@35|) DatatypeTypeType)) (= (type |uiop#0@@35|) DatatypeTypeType)) (or (|TSJ.__default.Stutter#canCall| |k#0@@39| |s#0@@39| |s'#0@@35| |uiop#0@@35|) (and (not (= 15 $FunctionContextHeight)) (and (and (and ($Is |k#0@@39| Tclass.TSJ.Constants) ($Is |s#0@@39| Tclass.TSJ.Variables)) ($Is |s'#0@@35| Tclass.TSJ.Variables)) ($Is |uiop#0@@35| Tclass.UI.Op))))) true) :qid |TSJidfy.196:21| :skolemid |1312| :pattern ( (TSJ.__default.Stutter |k#0@@39| |s#0@@39| |s'#0@@35| |uiop#0@@35|)) ))))
(assert (forall ((|k#0@@40| T@U) (|s#0@@40| T@U) (|s'#0@@36| T@U) (|uiop#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@40|) DatatypeTypeType) (= (type |s#0@@40|) DatatypeTypeType)) (= (type |s'#0@@36|) DatatypeTypeType)) (= (type |uiop#0@@36|) DatatypeTypeType)) (and (and (and ($Is |k#0@@40| Tclass.TSJ.Constants) ($Is |s#0@@40| Tclass.TSJ.Variables)) ($Is |s'#0@@36| Tclass.TSJ.Variables)) ($Is |uiop#0@@36| Tclass.UI.Op))) (and (=> (|TSJ.__default.Stutter#requires| |k#0@@40| |s#0@@40| |s'#0@@36| |uiop#0@@36|) true) (=> true (|TSJ.__default.Stutter#requires| |k#0@@40| |s#0@@40| |s'#0@@36| |uiop#0@@36|)))) :qid |TSJidfy.196:21| :skolemid |1313| :pattern ( (|TSJ.__default.Stutter#requires| |k#0@@40| |s#0@@40| |s'#0@@36| |uiop#0@@36|)) )))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|k#0@@41| T@U) (|s#0@@41| T@U) (|s'#0@@37| T@U) (|uiop#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@41|) DatatypeTypeType) (= (type |s#0@@41|) DatatypeTypeType)) (= (type |s'#0@@37|) DatatypeTypeType)) (= (type |uiop#0@@37|) DatatypeTypeType)) (or (|TSJ.__default.Stutter#canCall| |k#0@@41| |s#0@@41| |s'#0@@37| |uiop#0@@37|) (and (not (= 15 $FunctionContextHeight)) (and (and (and ($Is |k#0@@41| Tclass.TSJ.Constants) ($Is |s#0@@41| Tclass.TSJ.Variables)) ($Is |s'#0@@37| Tclass.TSJ.Variables)) ($Is |uiop#0@@37| Tclass.UI.Op))))) (and (=> (UI.Op.NoOp_q |uiop#0@@37|) (and (|$IsA#TSJ.Variables| |s#0@@41|) (|$IsA#TSJ.Variables| |s'#0@@37|))) (and (=> (TSJ.__default.Stutter |k#0@@41| |s#0@@41| |s'#0@@37| |uiop#0@@37|) (and (UI.Op.NoOp_q |uiop#0@@37|) (|TSJ.Variables#Equal| |s#0@@41| |s'#0@@37|))) (=> (and (UI.Op.NoOp_q |uiop#0@@37|) (|TSJ.Variables#Equal| |s#0@@41| |s'#0@@37|)) (TSJ.__default.Stutter |k#0@@41| |s#0@@41| |s'#0@@37| |uiop#0@@37|))))) :qid |TSJidfy.196:21| :skolemid |1314| :pattern ( (TSJ.__default.Stutter |k#0@@41| |s#0@@41| |s'#0@@37| |uiop#0@@37|)) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|k#0@@42| T@U) (|s#0@@42| T@U) (|s'#0@@38| T@U) (|uiop#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@42|) DatatypeTypeType) (= (type |s#0@@42|) DatatypeTypeType)) (= (type |s'#0@@38|) DatatypeTypeType)) (= (type |uiop#0@@38|) DatatypeTypeType)) (or (|TSJ.__default.Stutter#canCall| (Lit |k#0@@42|) (Lit |s#0@@42|) (Lit |s'#0@@38|) (Lit |uiop#0@@38|)) (and (not (= 15 $FunctionContextHeight)) (and (and (and ($Is |k#0@@42| Tclass.TSJ.Constants) ($Is |s#0@@42| Tclass.TSJ.Variables)) ($Is |s'#0@@38| Tclass.TSJ.Variables)) ($Is |uiop#0@@38| Tclass.UI.Op))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@38|))))) (and (|$IsA#TSJ.Variables| (Lit |s#0@@42|)) (|$IsA#TSJ.Variables| (Lit |s'#0@@38|)))) (and (=> (TSJ.__default.Stutter (Lit |k#0@@42|) (Lit |s#0@@42|) (Lit |s'#0@@38|) (Lit |uiop#0@@38|)) (and (UI.Op.NoOp_q (Lit |uiop#0@@38|)) (|TSJ.Variables#Equal| |s#0@@42| |s'#0@@38|))) (=> (and (UI.Op.NoOp_q (Lit |uiop#0@@38|)) (|TSJ.Variables#Equal| |s#0@@42| |s'#0@@38|)) (TSJ.__default.Stutter (Lit |k#0@@42|) (Lit |s#0@@42|) (Lit |s'#0@@38|) (Lit |uiop#0@@38|)))))) :qid |TSJidfy.196:21| :weight 3 :skolemid |1315| :pattern ( (TSJ.__default.Stutter (Lit |k#0@@42|) (Lit |s#0@@42|) (Lit |s'#0@@38|) (Lit |uiop#0@@38|))) ))))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|k#0@@43| T@U) (|s#0@@43| T@U) (|s'#0@@39| T@U) (|uiop#0@@39| T@U) (|step#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@43|) DatatypeTypeType) (= (type |s#0@@43|) DatatypeTypeType)) (= (type |s'#0@@39|) DatatypeTypeType)) (= (type |uiop#0@@39|) DatatypeTypeType)) (= (type |step#0|) DatatypeTypeType)) (or (|TSJ.__default.NextStep#canCall| |k#0@@43| |s#0@@43| |s'#0@@39| |uiop#0@@39| |step#0|) (and (not (= 17 $FunctionContextHeight)) (and (and (and (and ($Is |k#0@@43| Tclass.TSJ.Constants) ($Is |s#0@@43| Tclass.TSJ.Variables)) ($Is |s'#0@@39| Tclass.TSJ.Variables)) ($Is |uiop#0@@39| Tclass.UI.Op)) ($Is |step#0| Tclass.TSJ.Step))))) true) :qid |TSJidfy.202:22| :skolemid |1316| :pattern ( (TSJ.__default.NextStep |k#0@@43| |s#0@@43| |s'#0@@39| |uiop#0@@39| |step#0|)) ))))
(assert (forall ((|k#0@@44| T@U) (|s#0@@44| T@U) (|s'#0@@40| T@U) (|uiop#0@@40| T@U) (|step#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@44|) DatatypeTypeType) (= (type |s#0@@44|) DatatypeTypeType)) (= (type |s'#0@@40|) DatatypeTypeType)) (= (type |uiop#0@@40|) DatatypeTypeType)) (= (type |step#0@@0|) DatatypeTypeType)) (and (and (and (and ($Is |k#0@@44| Tclass.TSJ.Constants) ($Is |s#0@@44| Tclass.TSJ.Variables)) ($Is |s'#0@@40| Tclass.TSJ.Variables)) ($Is |uiop#0@@40| Tclass.UI.Op)) ($Is |step#0@@0| Tclass.TSJ.Step))) (and (=> (|TSJ.__default.NextStep#requires| |k#0@@44| |s#0@@44| |s'#0@@40| |uiop#0@@40| |step#0@@0|) true) (=> true (|TSJ.__default.NextStep#requires| |k#0@@44| |s#0@@44| |s'#0@@40| |uiop#0@@40| |step#0@@0|)))) :qid |TSJidfy.202:22| :skolemid |1317| :pattern ( (|TSJ.__default.NextStep#requires| |k#0@@44| |s#0@@44| |s'#0@@40| |uiop#0@@40| |step#0@@0|)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|k#0@@45| T@U) (|s#0@@45| T@U) (|s'#0@@41| T@U) (|uiop#0@@41| T@U) (|step#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@45|) DatatypeTypeType) (= (type |s#0@@45|) DatatypeTypeType)) (= (type |s'#0@@41|) DatatypeTypeType)) (= (type |uiop#0@@41|) DatatypeTypeType)) (= (type |step#0@@1|) DatatypeTypeType)) (or (|TSJ.__default.NextStep#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |step#0@@1|) (and (not (= 17 $FunctionContextHeight)) (and (and (and (and ($Is |k#0@@45| Tclass.TSJ.Constants) ($Is |s#0@@45| Tclass.TSJ.Variables)) ($Is |s'#0@@41| Tclass.TSJ.Variables)) ($Is |uiop#0@@41| Tclass.UI.Op)) ($Is |step#0@@1| Tclass.TSJ.Step))))) (and (and (=> (TSJ.Step.CrashStep_q |step#0@@1|) (|TSJ.__default.Crash#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|)) (=> (not (TSJ.Step.CrashStep_q |step#0@@1|)) (and (=> (TSJ.Step.Move1to2Step_q |step#0@@1|) (|TSJ.__default.Move1to2#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|)) (=> (not (TSJ.Step.Move1to2Step_q |step#0@@1|)) (and (=> (TSJ.Step.Move2to3Step_q |step#0@@1|) (|TSJ.__default.Move2to3#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|)) (=> (not (TSJ.Step.Move2to3Step_q |step#0@@1|)) (and (=> (TSJ.Step.ExtendLog1Step_q |step#0@@1|) (|TSJ.__default.ExtendLog1#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|)) (=> (not (TSJ.Step.ExtendLog1Step_q |step#0@@1|)) (and (=> (TSJ.Step.ExtendLog2Step_q |step#0@@1|) (|TSJ.__default.ExtendLog2#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|)) (=> (not (TSJ.Step.ExtendLog2Step_q |step#0@@1|)) (and (=> (TSJ.Step.Move3Step_q |step#0@@1|) (|TSJ.__default.Move3#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|)) (=> (not (TSJ.Step.Move3Step_q |step#0@@1|)) (and (=> (TSJ.Step.ReplayStep_q |step#0@@1|) (let ((|replayedUIOp#0@@3| (TSJ.Step.replayedUIOp |step#0@@1|))) (|TSJ.__default.Replay#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |replayedUIOp#0@@3|))) (=> (not (TSJ.Step.ReplayStep_q |step#0@@1|)) (and (=> (TSJ.Step.PushSyncStep_q |step#0@@1|) (let ((|id#0@@7| (TSJ.Step.id |step#0@@1|))) (|TSJ.__default.PushSync#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |id#0@@7|))) (=> (not (TSJ.Step.PushSyncStep_q |step#0@@1|)) (and (=> (TSJ.Step.PopSyncStep_q |step#0@@1|) (let ((|id#1| (TSJ.Step.id |step#0@@1|))) (|TSJ.__default.PopSync#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |id#1|))) (=> (not (TSJ.Step.PopSyncStep_q |step#0@@1|)) (|TSJ.__default.Stutter#canCall| |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|))))))))))))))))))) (and (=> (TSJ.__default.NextStep |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |step#0@@1|) (ite (TSJ.Step.CrashStep_q |step#0@@1|) (TSJ.__default.Crash |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.Move1to2Step_q |step#0@@1|) (TSJ.__default.Move1to2 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.Move2to3Step_q |step#0@@1|) (TSJ.__default.Move2to3 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.ExtendLog1Step_q |step#0@@1|) (TSJ.__default.ExtendLog1 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.ExtendLog2Step_q |step#0@@1|) (TSJ.__default.ExtendLog2 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.Move3Step_q |step#0@@1|) (TSJ.__default.Move3 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.ReplayStep_q |step#0@@1|) (let ((|replayedUIOp#1| (TSJ.Step.replayedUIOp |step#0@@1|))) (TSJ.__default.Replay |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |replayedUIOp#1|)) (ite (TSJ.Step.PushSyncStep_q |step#0@@1|) (let ((|id#2| (TSJ.Step.id |step#0@@1|))) (TSJ.__default.PushSync |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |id#2|)) (ite (TSJ.Step.PopSyncStep_q |step#0@@1|) (let ((|id#3| (TSJ.Step.id |step#0@@1|))) (TSJ.__default.PopSync |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |id#3|)) (TSJ.__default.Stutter |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|))))))))))) (=> (ite (TSJ.Step.CrashStep_q |step#0@@1|) (TSJ.__default.Crash |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.Move1to2Step_q |step#0@@1|) (TSJ.__default.Move1to2 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.Move2to3Step_q |step#0@@1|) (TSJ.__default.Move2to3 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.ExtendLog1Step_q |step#0@@1|) (TSJ.__default.ExtendLog1 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.ExtendLog2Step_q |step#0@@1|) (TSJ.__default.ExtendLog2 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.Move3Step_q |step#0@@1|) (TSJ.__default.Move3 |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|) (ite (TSJ.Step.ReplayStep_q |step#0@@1|) (let ((|replayedUIOp#1@@0| (TSJ.Step.replayedUIOp |step#0@@1|))) (TSJ.__default.Replay |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |replayedUIOp#1@@0|)) (ite (TSJ.Step.PushSyncStep_q |step#0@@1|) (let ((|id#2@@0| (TSJ.Step.id |step#0@@1|))) (TSJ.__default.PushSync |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |id#2@@0|)) (ite (TSJ.Step.PopSyncStep_q |step#0@@1|) (let ((|id#3@@0| (TSJ.Step.id |step#0@@1|))) (TSJ.__default.PopSync |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |id#3@@0|)) (TSJ.__default.Stutter |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41|)))))))))) (TSJ.__default.NextStep |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |step#0@@1|))))) :qid |TSJidfy.202:22| :skolemid |1318| :pattern ( (TSJ.__default.NextStep |k#0@@45| |s#0@@45| |s'#0@@41| |uiop#0@@41| |step#0@@1|)) ))))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|k#0@@46| T@U) (|s#0@@46| T@U) (|s'#0@@42| T@U) (|uiop#0@@42| T@U) (|step#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@46|) DatatypeTypeType) (= (type |s#0@@46|) DatatypeTypeType)) (= (type |s'#0@@42|) DatatypeTypeType)) (= (type |uiop#0@@42|) DatatypeTypeType)) (= (type |step#0@@2|) DatatypeTypeType)) (or (|TSJ.__default.NextStep#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) (Lit |step#0@@2|)) (and (not (= 17 $FunctionContextHeight)) (and (and (and (and ($Is |k#0@@46| Tclass.TSJ.Constants) ($Is |s#0@@46| Tclass.TSJ.Variables)) ($Is |s'#0@@42| Tclass.TSJ.Variables)) ($Is |uiop#0@@42| Tclass.UI.Op)) ($Is |step#0@@2| Tclass.TSJ.Step))))) (and (and (=> (U_2_bool (Lit (bool_2_U (TSJ.Step.CrashStep_q (Lit |step#0@@2|))))) (|TSJ.__default.Crash#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|))) (=> (not (U_2_bool (Lit (bool_2_U (TSJ.Step.CrashStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (TSJ.Step.Move1to2Step_q (Lit |step#0@@2|))))) (|TSJ.__default.Move1to2#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|))) (=> (not (U_2_bool (Lit (bool_2_U (TSJ.Step.Move1to2Step_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (TSJ.Step.Move2to3Step_q (Lit |step#0@@2|))))) (|TSJ.__default.Move2to3#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|))) (=> (not (U_2_bool (Lit (bool_2_U (TSJ.Step.Move2to3Step_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (TSJ.Step.ExtendLog1Step_q (Lit |step#0@@2|))))) (|TSJ.__default.ExtendLog1#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|))) (=> (not (U_2_bool (Lit (bool_2_U (TSJ.Step.ExtendLog1Step_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (TSJ.Step.ExtendLog2Step_q (Lit |step#0@@2|))))) (|TSJ.__default.ExtendLog2#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|))) (=> (not (U_2_bool (Lit (bool_2_U (TSJ.Step.ExtendLog2Step_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (TSJ.Step.Move3Step_q (Lit |step#0@@2|))))) (|TSJ.__default.Move3#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|))) (=> (not (U_2_bool (Lit (bool_2_U (TSJ.Step.Move3Step_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (TSJ.Step.ReplayStep_q (Lit |step#0@@2|))))) (let ((|replayedUIOp#2| (Lit (TSJ.Step.replayedUIOp (Lit |step#0@@2|))))) (|TSJ.__default.Replay#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) |replayedUIOp#2|))) (=> (not (U_2_bool (Lit (bool_2_U (TSJ.Step.ReplayStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (TSJ.Step.PushSyncStep_q (Lit |step#0@@2|))))) (let ((|id#4| (LitInt (TSJ.Step.id (Lit |step#0@@2|))))) (|TSJ.__default.PushSync#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) |id#4|))) (=> (not (U_2_bool (Lit (bool_2_U (TSJ.Step.PushSyncStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (TSJ.Step.PopSyncStep_q (Lit |step#0@@2|))))) (let ((|id#5| (LitInt (TSJ.Step.id (Lit |step#0@@2|))))) (|TSJ.__default.PopSync#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) |id#5|))) (=> (not (U_2_bool (Lit (bool_2_U (TSJ.Step.PopSyncStep_q (Lit |step#0@@2|)))))) (|TSJ.__default.Stutter#canCall| (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)))))))))))))))))))) (and (=> (TSJ.__default.NextStep (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) (Lit |step#0@@2|)) (ite (TSJ.Step.CrashStep_q (Lit |step#0@@2|)) (TSJ.__default.Crash (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.Move1to2Step_q (Lit |step#0@@2|)) (TSJ.__default.Move1to2 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.Move2to3Step_q (Lit |step#0@@2|)) (TSJ.__default.Move2to3 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.ExtendLog1Step_q (Lit |step#0@@2|)) (TSJ.__default.ExtendLog1 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.ExtendLog2Step_q (Lit |step#0@@2|)) (TSJ.__default.ExtendLog2 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.Move3Step_q (Lit |step#0@@2|)) (TSJ.__default.Move3 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.ReplayStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|replayedUIOp#3| (Lit (TSJ.Step.replayedUIOp (Lit |step#0@@2|))))) (Lit (bool_2_U (TSJ.__default.Replay (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) |replayedUIOp#3|))))) (ite (TSJ.Step.PushSyncStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|id#6| (LitInt (TSJ.Step.id (Lit |step#0@@2|))))) (Lit (bool_2_U (TSJ.__default.PushSync (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) |id#6|))))) (ite (TSJ.Step.PopSyncStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|id#7| (LitInt (TSJ.Step.id (Lit |step#0@@2|))))) (Lit (bool_2_U (TSJ.__default.PopSync (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) |id#7|))))) (TSJ.__default.Stutter (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)))))))))))) (=> (ite (TSJ.Step.CrashStep_q (Lit |step#0@@2|)) (TSJ.__default.Crash (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.Move1to2Step_q (Lit |step#0@@2|)) (TSJ.__default.Move1to2 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.Move2to3Step_q (Lit |step#0@@2|)) (TSJ.__default.Move2to3 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.ExtendLog1Step_q (Lit |step#0@@2|)) (TSJ.__default.ExtendLog1 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.ExtendLog2Step_q (Lit |step#0@@2|)) (TSJ.__default.ExtendLog2 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.Move3Step_q (Lit |step#0@@2|)) (TSJ.__default.Move3 (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|)) (ite (TSJ.Step.ReplayStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|replayedUIOp#3@@0| (Lit (TSJ.Step.replayedUIOp (Lit |step#0@@2|))))) (Lit (bool_2_U (TSJ.__default.Replay (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) |replayedUIOp#3@@0|))))) (ite (TSJ.Step.PushSyncStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|id#6@@0| (LitInt (TSJ.Step.id (Lit |step#0@@2|))))) (Lit (bool_2_U (TSJ.__default.PushSync (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) |id#6@@0|))))) (ite (TSJ.Step.PopSyncStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|id#7@@0| (LitInt (TSJ.Step.id (Lit |step#0@@2|))))) (Lit (bool_2_U (TSJ.__default.PopSync (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) |id#7@@0|))))) (TSJ.__default.Stutter (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|))))))))))) (TSJ.__default.NextStep (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) (Lit |step#0@@2|)))))) :qid |TSJidfy.202:22| :weight 3 :skolemid |1319| :pattern ( (TSJ.__default.NextStep (Lit |k#0@@46|) (Lit |s#0@@46|) (Lit |s'#0@@42|) (Lit |uiop#0@@42|) (Lit |step#0@@2|))) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|k#0@@47| T@U) (|s#0@@47| T@U) (|s'#0@@43| T@U) (|uiop#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@47|) DatatypeTypeType) (= (type |s#0@@47|) DatatypeTypeType)) (= (type |s'#0@@43|) DatatypeTypeType)) (= (type |uiop#0@@43|) DatatypeTypeType)) (or (|TSJ.__default.Next#canCall| |k#0@@47| |s#0@@47| |s'#0@@43| |uiop#0@@43|) (and (not (= 18 $FunctionContextHeight)) (and (and (and ($Is |k#0@@47| Tclass.TSJ.Constants) ($Is |s#0@@47| Tclass.TSJ.Variables)) ($Is |s'#0@@43| Tclass.TSJ.Variables)) ($Is |uiop#0@@43| Tclass.UI.Op))))) true) :qid |TSJidfy.218:18| :skolemid |1330| :pattern ( (TSJ.__default.Next |k#0@@47| |s#0@@47| |s'#0@@43| |uiop#0@@43|)) ))))
(assert (forall ((|k#0@@48| T@U) (|s#0@@48| T@U) (|s'#0@@44| T@U) (|uiop#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@48|) DatatypeTypeType) (= (type |s#0@@48|) DatatypeTypeType)) (= (type |s'#0@@44|) DatatypeTypeType)) (= (type |uiop#0@@44|) DatatypeTypeType)) (and (and (and ($Is |k#0@@48| Tclass.TSJ.Constants) ($Is |s#0@@48| Tclass.TSJ.Variables)) ($Is |s'#0@@44| Tclass.TSJ.Variables)) ($Is |uiop#0@@44| Tclass.UI.Op))) (and (=> (|TSJ.__default.Next#requires| |k#0@@48| |s#0@@48| |s'#0@@44| |uiop#0@@44|) true) (=> true (|TSJ.__default.Next#requires| |k#0@@48| |s#0@@48| |s'#0@@44| |uiop#0@@44|)))) :qid |TSJidfy.218:18| :skolemid |1331| :pattern ( (|TSJ.__default.Next#requires| |k#0@@48| |s#0@@48| |s'#0@@44| |uiop#0@@44|)) )))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|k#0@@49| T@U) (|s#0@@49| T@U) (|s'#0@@45| T@U) (|uiop#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@49|) DatatypeTypeType) (= (type |s#0@@49|) DatatypeTypeType)) (= (type |s'#0@@45|) DatatypeTypeType)) (= (type |uiop#0@@45|) DatatypeTypeType)) (or (|TSJ.__default.Next#canCall| |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45|) (and (not (= 18 $FunctionContextHeight)) (and (and (and ($Is |k#0@@49| Tclass.TSJ.Constants) ($Is |s#0@@49| Tclass.TSJ.Variables)) ($Is |s'#0@@45| Tclass.TSJ.Variables)) ($Is |uiop#0@@45| Tclass.UI.Op))))) (and (forall ((|step#0@@3| T@U) ) (!  (=> (and (= (type |step#0@@3|) DatatypeTypeType) ($Is |step#0@@3| Tclass.TSJ.Step)) (|TSJ.__default.NextStep#canCall| |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45| |step#0@@3|)) :qid |TSJidfy.219:12| :skolemid |1332| :pattern ( (TSJ.__default.NextStep |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45| |step#0@@3|)) )) (and (=> (TSJ.__default.Next |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45|) (exists ((|step#0@@4| T@U) ) (!  (and (= (type |step#0@@4|) DatatypeTypeType) (and ($Is |step#0@@4| Tclass.TSJ.Step) (TSJ.__default.NextStep |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45| |step#0@@4|))) :qid |TSJidfy.219:12| :skolemid |1333| :pattern ( (TSJ.__default.NextStep |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45| |step#0@@4|)) ))) (=> (exists ((|step#0@@5| T@U) ) (!  (and (= (type |step#0@@5|) DatatypeTypeType) (and ($Is |step#0@@5| Tclass.TSJ.Step) (TSJ.__default.NextStep |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45| |step#0@@5|))) :qid |TSJidfy.219:12| :skolemid |1333| :pattern ( (TSJ.__default.NextStep |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45| |step#0@@5|)) )) (TSJ.__default.Next |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45|))))) :qid |TSJidfy.218:18| :skolemid |1334| :pattern ( (TSJ.__default.Next |k#0@@49| |s#0@@49| |s'#0@@45| |uiop#0@@45|)) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((|k#0@@50| T@U) (|s#0@@50| T@U) (|s'#0@@46| T@U) (|uiop#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@50|) DatatypeTypeType) (= (type |s#0@@50|) DatatypeTypeType)) (= (type |s'#0@@46|) DatatypeTypeType)) (= (type |uiop#0@@46|) DatatypeTypeType)) (or (|TSJ.__default.Next#canCall| (Lit |k#0@@50|) (Lit |s#0@@50|) (Lit |s'#0@@46|) (Lit |uiop#0@@46|)) (and (not (= 18 $FunctionContextHeight)) (and (and (and ($Is |k#0@@50| Tclass.TSJ.Constants) ($Is |s#0@@50| Tclass.TSJ.Variables)) ($Is |s'#0@@46| Tclass.TSJ.Variables)) ($Is |uiop#0@@46| Tclass.UI.Op))))) (and (forall ((|step#1| T@U) ) (!  (=> (and (= (type |step#1|) DatatypeTypeType) ($Is |step#1| Tclass.TSJ.Step)) (|TSJ.__default.NextStep#canCall| (Lit |k#0@@50|) (Lit |s#0@@50|) (Lit |s'#0@@46|) (Lit |uiop#0@@46|) |step#1|)) :qid |TSJidfy.219:12| :skolemid |1335| :pattern ( (TSJ.__default.NextStep |k#0@@50| |s#0@@50| |s'#0@@46| |uiop#0@@46| |step#1|)) )) (and (=> (TSJ.__default.Next (Lit |k#0@@50|) (Lit |s#0@@50|) (Lit |s'#0@@46|) (Lit |uiop#0@@46|)) (exists ((|step#1@@0| T@U) ) (!  (and (= (type |step#1@@0|) DatatypeTypeType) (and ($Is |step#1@@0| Tclass.TSJ.Step) (TSJ.__default.NextStep (Lit |k#0@@50|) (Lit |s#0@@50|) (Lit |s'#0@@46|) (Lit |uiop#0@@46|) |step#1@@0|))) :qid |TSJidfy.219:12| :skolemid |1336| :pattern ( (TSJ.__default.NextStep |k#0@@50| |s#0@@50| |s'#0@@46| |uiop#0@@46| |step#1@@0|)) ))) (=> (exists ((|step#1@@1| T@U) ) (!  (and (= (type |step#1@@1|) DatatypeTypeType) (and ($Is |step#1@@1| Tclass.TSJ.Step) (TSJ.__default.NextStep (Lit |k#0@@50|) (Lit |s#0@@50|) (Lit |s'#0@@46|) (Lit |uiop#0@@46|) |step#1@@1|))) :qid |TSJidfy.219:12| :skolemid |1336| :pattern ( (TSJ.__default.NextStep |k#0@@50| |s#0@@50| |s'#0@@46| |uiop#0@@46| |step#1@@1|)) )) (TSJ.__default.Next (Lit |k#0@@50|) (Lit |s#0@@50|) (Lit |s'#0@@46|) (Lit |uiop#0@@46|)))))) :qid |TSJidfy.218:18| :weight 3 :skolemid |1337| :pattern ( (TSJ.__default.Next (Lit |k#0@@50|) (Lit |s#0@@50|) (Lit |s'#0@@46|) (Lit |uiop#0@@46|))) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|k#0@@51| T@U) (|s#0@@51| T@U) (|uiops#0| T@U) (|s'#0@@47| T@U) (|states#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@51|) BoxType) (= (type |s#0@@51|) BoxType)) (= (type |uiops#0|) (SeqType BoxType))) (= (type |s'#0@@47|) BoxType)) (= (type |states#0|) (SeqType BoxType))) (or (|TSJ.__default.IsPath#canCall| |k#0@@51| |s#0@@51| |uiops#0| |s'#0@@47| |states#0|) (and (not (= 19 $FunctionContextHeight)) (and (and (and (and ($IsBox |k#0@@51| |#$Constants|) ($IsBox |s#0@@51| |#$Variables|)) ($Is |uiops#0| (TSeq Tclass.UI.Op))) ($IsBox |s'#0@@47| |#$Variables|)) ($Is |states#0| (TSeq |#$Variables|)))))) true) :qid |TSJidfy.225:7| :skolemid |1341| :pattern ( (TSJ.__default.IsPath |k#0@@51| |s#0@@51| |uiops#0| |s'#0@@47| |states#0|)) ))))
(assert (forall ((|k#0@@52| T@U) (|s#0@@52| T@U) (|uiops#0@@0| T@U) (|s'#0@@48| T@U) (|states#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@52|) BoxType) (= (type |s#0@@52|) BoxType)) (= (type |uiops#0@@0|) (SeqType BoxType))) (= (type |s'#0@@48|) BoxType)) (= (type |states#0@@0|) (SeqType BoxType))) (and (and (and (and ($IsBox |k#0@@52| |#$Constants|) ($IsBox |s#0@@52| |#$Variables|)) ($Is |uiops#0@@0| (TSeq Tclass.UI.Op))) ($IsBox |s'#0@@48| |#$Variables|)) ($Is |states#0@@0| (TSeq |#$Variables|)))) (and (=> (|TSJ.__default.IsPath#requires| |k#0@@52| |s#0@@52| |uiops#0@@0| |s'#0@@48| |states#0@@0|) true) (=> true (|TSJ.__default.IsPath#requires| |k#0@@52| |s#0@@52| |uiops#0@@0| |s'#0@@48| |states#0@@0|)))) :qid |TSJidfy.225:7| :skolemid |1342| :pattern ( (|TSJ.__default.IsPath#requires| |k#0@@52| |s#0@@52| |uiops#0@@0| |s'#0@@48| |states#0@@0|)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|k#0@@53| T@U) (|s#0@@53| T@U) (|uiops#0@@1| T@U) (|s'#0@@49| T@U) (|states#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@53|) BoxType) (= (type |s#0@@53|) BoxType)) (= (type |uiops#0@@1|) (SeqType BoxType))) (= (type |s'#0@@49|) BoxType)) (= (type |states#0@@1|) (SeqType BoxType))) (or (|TSJ.__default.IsPath#canCall| |k#0@@53| |s#0@@53| |uiops#0@@1| |s'#0@@49| |states#0@@1|) (and (not (= 19 $FunctionContextHeight)) (and (and (and (and ($IsBox |k#0@@53| |#$Constants|) ($IsBox |s#0@@53| |#$Variables|)) ($Is |uiops#0@@1| (TSeq Tclass.UI.Op))) ($IsBox |s'#0@@49| |#$Variables|)) ($Is |states#0@@1| (TSeq |#$Variables|)))))) (and (=> (= (|Seq#Index| |states#0@@1| (- (|Seq#Length| |states#0@@1|) 1)) |s'#0@@49|) (forall ((|i#0| Int) (|_t#0#0| Int) ) (!  (=> (= |_t#0#0| (+ |i#0| 1)) (=> (< |i#0| (|Seq#Length| |uiops#0@@1|)) (|TSJ.SM.Abs.__default.Next#canCall| |k#0@@53| (|Seq#Index| |states#0@@1| |i#0|) (|Seq#Index| |states#0@@1| |_t#0#0|) ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@1| |i#0|))))) :qid |TSJidfy.234:15| :skolemid |1343| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@1| |i#0|)) (|Seq#Index| |states#0@@1| |_t#0#0|)) :pattern ( (|Seq#Index| |states#0@@1| |_t#0#0|) (|Seq#Index| |states#0@@1| |i#0|)) ))) (and (=> (TSJ.__default.IsPath |k#0@@53| |s#0@@53| |uiops#0@@1| |s'#0@@49| |states#0@@1|) (and (and (and (= (|Seq#Length| |states#0@@1|) (+ (|Seq#Length| |uiops#0@@1|) 1)) (= (|Seq#Index| |states#0@@1| (LitInt 0)) |s#0@@53|)) (= (|Seq#Index| |states#0@@1| (- (|Seq#Length| |states#0@@1|) 1)) |s'#0@@49|)) (forall ((|i#0@@0| Int) (|_t#0#0@@0| Int) ) (!  (=> (= |_t#0#0@@0| (+ |i#0@@0| 1)) (=> (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| |uiops#0@@1|))) (TSJ.SM.Abs.__default.Next |k#0@@53| (|Seq#Index| |states#0@@1| |i#0@@0|) (|Seq#Index| |states#0@@1| |_t#0#0@@0|) ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@1| |i#0@@0|))))) :qid |TSJidfy.234:15| :skolemid |1344| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@1| |i#0@@0|)) (|Seq#Index| |states#0@@1| |_t#0#0@@0|)) :pattern ( (|Seq#Index| |states#0@@1| |_t#0#0@@0|) (|Seq#Index| |states#0@@1| |i#0@@0|)) )))) (=> (and (and (and (= (|Seq#Length| |states#0@@1|) (+ (|Seq#Length| |uiops#0@@1|) 1)) (= (|Seq#Index| |states#0@@1| (LitInt 0)) |s#0@@53|)) (= (|Seq#Index| |states#0@@1| (- (|Seq#Length| |states#0@@1|) 1)) |s'#0@@49|)) (forall ((|i#0@@1| Int) (|_t#0#0@@1| Int) ) (!  (=> (= |_t#0#0@@1| (+ |i#0@@1| 1)) (=> (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| (|Seq#Length| |uiops#0@@1|))) (TSJ.SM.Abs.__default.Next |k#0@@53| (|Seq#Index| |states#0@@1| |i#0@@1|) (|Seq#Index| |states#0@@1| |_t#0#0@@1|) ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@1| |i#0@@1|))))) :qid |TSJidfy.234:15| :skolemid |1344| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@1| |i#0@@1|)) (|Seq#Index| |states#0@@1| |_t#0#0@@1|)) :pattern ( (|Seq#Index| |states#0@@1| |_t#0#0@@1|) (|Seq#Index| |states#0@@1| |i#0@@1|)) ))) (TSJ.__default.IsPath |k#0@@53| |s#0@@53| |uiops#0@@1| |s'#0@@49| |states#0@@1|))))) :qid |TSJidfy.225:7| :skolemid |1345| :pattern ( (TSJ.__default.IsPath |k#0@@53| |s#0@@53| |uiops#0@@1| |s'#0@@49| |states#0@@1|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|k#0@@54| T@U) (|s#0@@54| T@U) (|uiops#0@@2| T@U) (|s'#0@@50| T@U) (|states#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@54|) BoxType) (= (type |s#0@@54|) BoxType)) (= (type |uiops#0@@2|) (SeqType BoxType))) (= (type |s'#0@@50|) BoxType)) (= (type |states#0@@2|) (SeqType BoxType))) (or (|TSJ.__default.IsPath#canCall| |k#0@@54| |s#0@@54| (Lit |uiops#0@@2|) |s'#0@@50| (Lit |states#0@@2|)) (and (not (= 19 $FunctionContextHeight)) (and (and (and (and ($IsBox |k#0@@54| |#$Constants|) ($IsBox |s#0@@54| |#$Variables|)) ($Is |uiops#0@@2| (TSeq Tclass.UI.Op))) ($IsBox |s'#0@@50| |#$Variables|)) ($Is |states#0@@2| (TSeq |#$Variables|)))))) (and (=> (= (|Seq#Index| (Lit |states#0@@2|) (- (|Seq#Length| (Lit |states#0@@2|)) 1)) |s'#0@@50|) (forall ((|i#1| Int) (|_t#0#1| Int) ) (!  (=> (= |_t#0#1| (+ |i#1| 1)) (=> (< |i#1| (|Seq#Length| (Lit |uiops#0@@2|))) (|TSJ.SM.Abs.__default.Next#canCall| |k#0@@54| (|Seq#Index| (Lit |states#0@@2|) |i#1|) (|Seq#Index| (Lit |states#0@@2|) |_t#0#1|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |uiops#0@@2|) |i#1|))))) :qid |TSJidfy.234:15| :skolemid |1346| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@2| |i#1|)) (|Seq#Index| |states#0@@2| |_t#0#1|)) :pattern ( (|Seq#Index| |states#0@@2| |_t#0#1|) (|Seq#Index| |states#0@@2| |i#1|)) ))) (and (=> (TSJ.__default.IsPath |k#0@@54| |s#0@@54| (Lit |uiops#0@@2|) |s'#0@@50| (Lit |states#0@@2|)) (and (and (and (= (|Seq#Length| (Lit |states#0@@2|)) (+ (|Seq#Length| (Lit |uiops#0@@2|)) 1)) (= (|Seq#Index| (Lit |states#0@@2|) (LitInt 0)) |s#0@@54|)) (= (|Seq#Index| (Lit |states#0@@2|) (- (|Seq#Length| (Lit |states#0@@2|)) 1)) |s'#0@@50|)) (forall ((|i#1@@0| Int) (|_t#0#1@@0| Int) ) (!  (=> (= |_t#0#1@@0| (+ |i#1@@0| 1)) (=> (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| (Lit |uiops#0@@2|)))) (TSJ.SM.Abs.__default.Next |k#0@@54| (|Seq#Index| (Lit |states#0@@2|) |i#1@@0|) (|Seq#Index| (Lit |states#0@@2|) |_t#0#1@@0|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |uiops#0@@2|) |i#1@@0|))))) :qid |TSJidfy.234:15| :skolemid |1347| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@2| |i#1@@0|)) (|Seq#Index| |states#0@@2| |_t#0#1@@0|)) :pattern ( (|Seq#Index| |states#0@@2| |_t#0#1@@0|) (|Seq#Index| |states#0@@2| |i#1@@0|)) )))) (=> (and (and (and (= (|Seq#Length| (Lit |states#0@@2|)) (+ (|Seq#Length| (Lit |uiops#0@@2|)) 1)) (= (|Seq#Index| (Lit |states#0@@2|) (LitInt 0)) |s#0@@54|)) (= (|Seq#Index| (Lit |states#0@@2|) (- (|Seq#Length| (Lit |states#0@@2|)) 1)) |s'#0@@50|)) (forall ((|i#1@@1| Int) (|_t#0#1@@1| Int) ) (!  (=> (= |_t#0#1@@1| (+ |i#1@@1| 1)) (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| (Lit |uiops#0@@2|)))) (TSJ.SM.Abs.__default.Next |k#0@@54| (|Seq#Index| (Lit |states#0@@2|) |i#1@@1|) (|Seq#Index| (Lit |states#0@@2|) |_t#0#1@@1|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |uiops#0@@2|) |i#1@@1|))))) :qid |TSJidfy.234:15| :skolemid |1347| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@2| |i#1@@1|)) (|Seq#Index| |states#0@@2| |_t#0#1@@1|)) :pattern ( (|Seq#Index| |states#0@@2| |_t#0#1@@1|) (|Seq#Index| |states#0@@2| |i#1@@1|)) ))) (TSJ.__default.IsPath |k#0@@54| |s#0@@54| (Lit |uiops#0@@2|) |s'#0@@50| (Lit |states#0@@2|)))))) :qid |TSJidfy.225:7| :weight 3 :skolemid |1348| :pattern ( (TSJ.__default.IsPath |k#0@@54| |s#0@@54| (Lit |uiops#0@@2|) |s'#0@@50| (Lit |states#0@@2|))) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|k#0@@55| T@U) (|s#0@@55| T@U) (|uiops#0@@3| T@U) (|s'#0@@51| T@U) (|states#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@55|) BoxType) (= (type |s#0@@55|) BoxType)) (= (type |uiops#0@@3|) (SeqType BoxType))) (= (type |s'#0@@51|) BoxType)) (= (type |states#0@@3|) (SeqType BoxType))) (or (|TSJ.__default.IsPath#canCall| (Lit |k#0@@55|) (Lit |s#0@@55|) (Lit |uiops#0@@3|) (Lit |s'#0@@51|) (Lit |states#0@@3|)) (and (not (= 19 $FunctionContextHeight)) (and (and (and (and ($IsBox |k#0@@55| |#$Constants|) ($IsBox |s#0@@55| |#$Variables|)) ($Is |uiops#0@@3| (TSeq Tclass.UI.Op))) ($IsBox |s'#0@@51| |#$Variables|)) ($Is |states#0@@3| (TSeq |#$Variables|)))))) (and (=> (= (|Seq#Index| (Lit |states#0@@3|) (- (|Seq#Length| (Lit |states#0@@3|)) 1)) (Lit |s'#0@@51|)) (forall ((|i#2| Int) (|_t#0#2| Int) ) (!  (=> (= |_t#0#2| (+ |i#2| 1)) (=> (< |i#2| (|Seq#Length| (Lit |uiops#0@@3|))) (|TSJ.SM.Abs.__default.Next#canCall| (Lit |k#0@@55|) (|Seq#Index| (Lit |states#0@@3|) |i#2|) (|Seq#Index| (Lit |states#0@@3|) |_t#0#2|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |uiops#0@@3|) |i#2|))))) :qid |TSJidfy.234:15| :skolemid |1349| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@3| |i#2|)) (|Seq#Index| |states#0@@3| |_t#0#2|)) :pattern ( (|Seq#Index| |states#0@@3| |_t#0#2|) (|Seq#Index| |states#0@@3| |i#2|)) ))) (and (=> (TSJ.__default.IsPath (Lit |k#0@@55|) (Lit |s#0@@55|) (Lit |uiops#0@@3|) (Lit |s'#0@@51|) (Lit |states#0@@3|)) (and (and (and (= (|Seq#Length| (Lit |states#0@@3|)) (+ (|Seq#Length| (Lit |uiops#0@@3|)) 1)) (= (|Seq#Index| (Lit |states#0@@3|) (LitInt 0)) (Lit |s#0@@55|))) (= (|Seq#Index| (Lit |states#0@@3|) (- (|Seq#Length| (Lit |states#0@@3|)) 1)) (Lit |s'#0@@51|))) (forall ((|i#2@@0| Int) (|_t#0#2@@0| Int) ) (!  (=> (= |_t#0#2@@0| (+ |i#2@@0| 1)) (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| (Lit |uiops#0@@3|)))) (TSJ.SM.Abs.__default.Next (Lit |k#0@@55|) (|Seq#Index| (Lit |states#0@@3|) |i#2@@0|) (|Seq#Index| (Lit |states#0@@3|) |_t#0#2@@0|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |uiops#0@@3|) |i#2@@0|))))) :qid |TSJidfy.234:15| :skolemid |1350| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@3| |i#2@@0|)) (|Seq#Index| |states#0@@3| |_t#0#2@@0|)) :pattern ( (|Seq#Index| |states#0@@3| |_t#0#2@@0|) (|Seq#Index| |states#0@@3| |i#2@@0|)) )))) (=> (and (and (and (= (|Seq#Length| (Lit |states#0@@3|)) (+ (|Seq#Length| (Lit |uiops#0@@3|)) 1)) (= (|Seq#Index| (Lit |states#0@@3|) (LitInt 0)) (Lit |s#0@@55|))) (= (|Seq#Index| (Lit |states#0@@3|) (- (|Seq#Length| (Lit |states#0@@3|)) 1)) (Lit |s'#0@@51|))) (forall ((|i#2@@1| Int) (|_t#0#2@@1| Int) ) (!  (=> (= |_t#0#2@@1| (+ |i#2@@1| 1)) (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| (Lit |uiops#0@@3|)))) (TSJ.SM.Abs.__default.Next (Lit |k#0@@55|) (|Seq#Index| (Lit |states#0@@3|) |i#2@@1|) (|Seq#Index| (Lit |states#0@@3|) |_t#0#2@@1|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |uiops#0@@3|) |i#2@@1|))))) :qid |TSJidfy.234:15| :skolemid |1350| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |uiops#0@@3| |i#2@@1|)) (|Seq#Index| |states#0@@3| |_t#0#2@@1|)) :pattern ( (|Seq#Index| |states#0@@3| |_t#0#2@@1|) (|Seq#Index| |states#0@@3| |i#2@@1|)) ))) (TSJ.__default.IsPath (Lit |k#0@@55|) (Lit |s#0@@55|) (Lit |uiops#0@@3|) (Lit |s'#0@@51|) (Lit |states#0@@3|)))))) :qid |TSJidfy.225:7| :weight 3 :skolemid |1351| :pattern ( (TSJ.__default.IsPath (Lit |k#0@@55|) (Lit |s#0@@55|) (Lit |uiops#0@@3|) (Lit |s'#0@@51|) (Lit |states#0@@3|))) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|k#0@@56| T@U) (|s#0@@56| T@U) (|jes#0| T@U) (|s'#0@@52| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@56|) BoxType) (= (type |s#0@@56|) BoxType)) (= (type |jes#0|) (SeqType BoxType))) (= (type |s'#0@@52|) BoxType)) (or (|TSJ.__default.path#canCall| |k#0@@56| |s#0@@56| |jes#0| |s'#0@@52|) (and (not (= 20 $FunctionContextHeight)) (and (and (and ($IsBox |k#0@@56| |#$Constants|) ($IsBox |s#0@@56| |#$Variables|)) ($Is |jes#0| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@52| |#$Variables|))))) true) :qid |TSJidfy.239:7| :skolemid |1355| :pattern ( (TSJ.__default.path |k#0@@56| |s#0@@56| |jes#0| |s'#0@@52|)) ))))
(assert (forall ((|k#0@@57| T@U) (|s#0@@57| T@U) (|jes#0@@0| T@U) (|s'#0@@53| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@57|) BoxType) (= (type |s#0@@57|) BoxType)) (= (type |jes#0@@0|) (SeqType BoxType))) (= (type |s'#0@@53|) BoxType)) (and (and (and ($IsBox |k#0@@57| |#$Constants|) ($IsBox |s#0@@57| |#$Variables|)) ($Is |jes#0@@0| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@53| |#$Variables|))) (and (=> (|TSJ.__default.path#requires| |k#0@@57| |s#0@@57| |jes#0@@0| |s'#0@@53|) true) (=> true (|TSJ.__default.path#requires| |k#0@@57| |s#0@@57| |jes#0@@0| |s'#0@@53|)))) :qid |TSJidfy.239:7| :skolemid |1356| :pattern ( (|TSJ.__default.path#requires| |k#0@@57| |s#0@@57| |jes#0@@0| |s'#0@@53|)) )))
(assert  (and (forall ((arg0@@353 T@U) (arg1@@158 T@U) ) (! (= (type (Journal.__default.JournalEntriesForUIOps arg0@@353 arg1@@158)) (SeqType BoxType)) :qid |funType:Journal.__default.JournalEntriesForUIOps| :pattern ( (Journal.__default.JournalEntriesForUIOps arg0@@353 arg1@@158)) )) (= (type $LZ) LayerTypeType)))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|k#0@@58| T@U) (|s#0@@58| T@U) (|jes#0@@1| T@U) (|s'#0@@54| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@58|) BoxType) (= (type |s#0@@58|) BoxType)) (= (type |jes#0@@1|) (SeqType BoxType))) (= (type |s'#0@@54|) BoxType)) (or (|TSJ.__default.path#canCall| |k#0@@58| |s#0@@58| |jes#0@@1| |s'#0@@54|) (and (not (= 20 $FunctionContextHeight)) (and (and (and ($IsBox |k#0@@58| |#$Constants|) ($IsBox |s#0@@58| |#$Variables|)) ($Is |jes#0@@1| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@54| |#$Variables|))))) (and (forall ((|states#0@@4| T@U) (|uiops#0@@4| T@U) ) (!  (=> (and (and (= (type |states#0@@4|) (SeqType BoxType)) (= (type |uiops#0@@4|) (SeqType BoxType))) (and ($Is |states#0@@4| (TSeq |#$Variables|)) ($Is |uiops#0@@4| (TSeq Tclass.UI.Op)))) (and (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#0@@4|) (=> (|Seq#Equal| |jes#0@@1| (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#0@@4|)) (|TSJ.__default.IsPath#canCall| |k#0@@58| |s#0@@58| |uiops#0@@4| |s'#0@@54| |states#0@@4|)))) :qid |TSJidfy.244:12| :skolemid |1357| :pattern ( (TSJ.__default.IsPath |k#0@@58| |s#0@@58| |uiops#0@@4| |s'#0@@54| |states#0@@4|)) )) (and (=> (TSJ.__default.path |k#0@@58| |s#0@@58| |jes#0@@1| |s'#0@@54|) (exists ((|states#0@@5| T@U) (|uiops#0@@5| T@U) ) (!  (and (and (= (type |states#0@@5|) (SeqType BoxType)) (= (type |uiops#0@@5|) (SeqType BoxType))) (and (and ($Is |states#0@@5| (TSeq |#$Variables|)) ($Is |uiops#0@@5| (TSeq Tclass.UI.Op))) (and (|Seq#Equal| |jes#0@@1| (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#0@@5|)) (TSJ.__default.IsPath |k#0@@58| |s#0@@58| |uiops#0@@5| |s'#0@@54| |states#0@@5|)))) :qid |TSJidfy.244:12| :skolemid |1358| :pattern ( (TSJ.__default.IsPath |k#0@@58| |s#0@@58| |uiops#0@@5| |s'#0@@54| |states#0@@5|)) ))) (=> (exists ((|states#0@@6| T@U) (|uiops#0@@6| T@U) ) (!  (and (and (= (type |states#0@@6|) (SeqType BoxType)) (= (type |uiops#0@@6|) (SeqType BoxType))) (and (and ($Is |states#0@@6| (TSeq |#$Variables|)) ($Is |uiops#0@@6| (TSeq Tclass.UI.Op))) (and (|Seq#Equal| |jes#0@@1| (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#0@@6|)) (TSJ.__default.IsPath |k#0@@58| |s#0@@58| |uiops#0@@6| |s'#0@@54| |states#0@@6|)))) :qid |TSJidfy.244:12| :skolemid |1358| :pattern ( (TSJ.__default.IsPath |k#0@@58| |s#0@@58| |uiops#0@@6| |s'#0@@54| |states#0@@6|)) )) (TSJ.__default.path |k#0@@58| |s#0@@58| |jes#0@@1| |s'#0@@54|))))) :qid |TSJidfy.239:7| :skolemid |1359| :pattern ( (TSJ.__default.path |k#0@@58| |s#0@@58| |jes#0@@1| |s'#0@@54|)) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|k#0@@59| T@U) (|s#0@@59| T@U) (|jes#0@@2| T@U) (|s'#0@@55| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@59|) BoxType) (= (type |s#0@@59|) BoxType)) (= (type |jes#0@@2|) (SeqType BoxType))) (= (type |s'#0@@55|) BoxType)) (or (|TSJ.__default.path#canCall| |k#0@@59| |s#0@@59| (Lit |jes#0@@2|) |s'#0@@55|) (and (not (= 20 $FunctionContextHeight)) (and (and (and ($IsBox |k#0@@59| |#$Constants|) ($IsBox |s#0@@59| |#$Variables|)) ($Is |jes#0@@2| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@55| |#$Variables|))))) (and (forall ((|states#1| T@U) (|uiops#1| T@U) ) (!  (=> (and (and (= (type |states#1|) (SeqType BoxType)) (= (type |uiops#1|) (SeqType BoxType))) (and ($Is |states#1| (TSeq |#$Variables|)) ($Is |uiops#1| (TSeq Tclass.UI.Op)))) (and (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#1|) (=> (|Seq#Equal| |jes#0@@2| (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#1|)) (|TSJ.__default.IsPath#canCall| |k#0@@59| |s#0@@59| |uiops#1| |s'#0@@55| |states#1|)))) :qid |TSJidfy.244:12| :skolemid |1360| :pattern ( (TSJ.__default.IsPath |k#0@@59| |s#0@@59| |uiops#1| |s'#0@@55| |states#1|)) )) (and (=> (TSJ.__default.path |k#0@@59| |s#0@@59| (Lit |jes#0@@2|) |s'#0@@55|) (exists ((|states#1@@0| T@U) (|uiops#1@@0| T@U) ) (!  (and (and (= (type |states#1@@0|) (SeqType BoxType)) (= (type |uiops#1@@0|) (SeqType BoxType))) (and (and ($Is |states#1@@0| (TSeq |#$Variables|)) ($Is |uiops#1@@0| (TSeq Tclass.UI.Op))) (and (|Seq#Equal| |jes#0@@2| (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#1@@0|)) (TSJ.__default.IsPath |k#0@@59| |s#0@@59| |uiops#1@@0| |s'#0@@55| |states#1@@0|)))) :qid |TSJidfy.244:12| :skolemid |1361| :pattern ( (TSJ.__default.IsPath |k#0@@59| |s#0@@59| |uiops#1@@0| |s'#0@@55| |states#1@@0|)) ))) (=> (exists ((|states#1@@1| T@U) (|uiops#1@@1| T@U) ) (!  (and (and (= (type |states#1@@1|) (SeqType BoxType)) (= (type |uiops#1@@1|) (SeqType BoxType))) (and (and ($Is |states#1@@1| (TSeq |#$Variables|)) ($Is |uiops#1@@1| (TSeq Tclass.UI.Op))) (and (|Seq#Equal| |jes#0@@2| (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#1@@1|)) (TSJ.__default.IsPath |k#0@@59| |s#0@@59| |uiops#1@@1| |s'#0@@55| |states#1@@1|)))) :qid |TSJidfy.244:12| :skolemid |1361| :pattern ( (TSJ.__default.IsPath |k#0@@59| |s#0@@59| |uiops#1@@1| |s'#0@@55| |states#1@@1|)) )) (TSJ.__default.path |k#0@@59| |s#0@@59| (Lit |jes#0@@2|) |s'#0@@55|))))) :qid |TSJidfy.239:7| :weight 3 :skolemid |1362| :pattern ( (TSJ.__default.path |k#0@@59| |s#0@@59| (Lit |jes#0@@2|) |s'#0@@55|)) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|k#0@@60| T@U) (|s#0@@60| T@U) (|jes#0@@3| T@U) (|s'#0@@56| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@60|) BoxType) (= (type |s#0@@60|) BoxType)) (= (type |jes#0@@3|) (SeqType BoxType))) (= (type |s'#0@@56|) BoxType)) (or (|TSJ.__default.path#canCall| (Lit |k#0@@60|) (Lit |s#0@@60|) (Lit |jes#0@@3|) (Lit |s'#0@@56|)) (and (not (= 20 $FunctionContextHeight)) (and (and (and ($IsBox |k#0@@60| |#$Constants|) ($IsBox |s#0@@60| |#$Variables|)) ($Is |jes#0@@3| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@56| |#$Variables|))))) (and (forall ((|states#2| T@U) (|uiops#2| T@U) ) (!  (=> (and (and (= (type |states#2|) (SeqType BoxType)) (= (type |uiops#2|) (SeqType BoxType))) (and ($Is |states#2| (TSeq |#$Variables|)) ($Is |uiops#2| (TSeq Tclass.UI.Op)))) (and (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#2|) (=> (|Seq#Equal| |jes#0@@3| (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#2|)) (|TSJ.__default.IsPath#canCall| (Lit |k#0@@60|) (Lit |s#0@@60|) |uiops#2| (Lit |s'#0@@56|) |states#2|)))) :qid |TSJidfy.244:12| :skolemid |1363| :pattern ( (TSJ.__default.IsPath |k#0@@60| |s#0@@60| |uiops#2| |s'#0@@56| |states#2|)) )) (and (=> (TSJ.__default.path (Lit |k#0@@60|) (Lit |s#0@@60|) (Lit |jes#0@@3|) (Lit |s'#0@@56|)) (exists ((|states#2@@0| T@U) (|uiops#2@@0| T@U) ) (!  (and (and (= (type |states#2@@0|) (SeqType BoxType)) (= (type |uiops#2@@0|) (SeqType BoxType))) (and (and ($Is |states#2@@0| (TSeq |#$Variables|)) ($Is |uiops#2@@0| (TSeq Tclass.UI.Op))) (and (|Seq#Equal| |jes#0@@3| (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#2@@0|)) (TSJ.__default.IsPath (Lit |k#0@@60|) (Lit |s#0@@60|) |uiops#2@@0| (Lit |s'#0@@56|) |states#2@@0|)))) :qid |TSJidfy.244:12| :skolemid |1364| :pattern ( (TSJ.__default.IsPath |k#0@@60| |s#0@@60| |uiops#2@@0| |s'#0@@56| |states#2@@0|)) ))) (=> (exists ((|states#2@@1| T@U) (|uiops#2@@1| T@U) ) (!  (and (and (= (type |states#2@@1|) (SeqType BoxType)) (= (type |uiops#2@@1|) (SeqType BoxType))) (and (and ($Is |states#2@@1| (TSeq |#$Variables|)) ($Is |uiops#2@@1| (TSeq Tclass.UI.Op))) (and (|Seq#Equal| |jes#0@@3| (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#2@@1|)) (TSJ.__default.IsPath (Lit |k#0@@60|) (Lit |s#0@@60|) |uiops#2@@1| (Lit |s'#0@@56|) |states#2@@1|)))) :qid |TSJidfy.244:12| :skolemid |1364| :pattern ( (TSJ.__default.IsPath |k#0@@60| |s#0@@60| |uiops#2@@1| |s'#0@@56| |states#2@@1|)) )) (TSJ.__default.path (Lit |k#0@@60|) (Lit |s#0@@60|) (Lit |jes#0@@3|) (Lit |s'#0@@56|)))))) :qid |TSJidfy.239:7| :weight 3 :skolemid |1365| :pattern ( (TSJ.__default.path (Lit |k#0@@60|) (Lit |s#0@@60|) (Lit |jes#0@@3|) (Lit |s'#0@@56|))) ))))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((TSJ._default.IsSuffix$T T@U) (|s#0@@61| T@U) (|t#0| T@U) ) (!  (=> (and (and (and (= (type TSJ._default.IsSuffix$T) TyType) (= (type |s#0@@61|) (SeqType BoxType))) (= (type |t#0|) (SeqType BoxType))) (or (|TSJ.__default.IsSuffix#canCall| TSJ._default.IsSuffix$T |s#0@@61| |t#0|) (and (not (= 21 $FunctionContextHeight)) (and ($Is |s#0@@61| (TSeq TSJ._default.IsSuffix$T)) ($Is |t#0| (TSeq TSJ._default.IsSuffix$T)))))) true) :qid |unknown.0:0| :skolemid |1370| :pattern ( (TSJ.__default.IsSuffix TSJ._default.IsSuffix$T |s#0@@61| |t#0|)) ))))
(assert (forall ((TSJ._default.IsSuffix$T@@0 T@U) (|s#0@@62| T@U) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type TSJ._default.IsSuffix$T@@0) TyType) (= (type |s#0@@62|) (SeqType BoxType))) (= (type |t#0@@0|) (SeqType BoxType))) (and ($Is |s#0@@62| (TSeq TSJ._default.IsSuffix$T@@0)) ($Is |t#0@@0| (TSeq TSJ._default.IsSuffix$T@@0)))) (and (=> (|TSJ.__default.IsSuffix#requires| TSJ._default.IsSuffix$T@@0 |s#0@@62| |t#0@@0|) true) (=> true (|TSJ.__default.IsSuffix#requires| TSJ._default.IsSuffix$T@@0 |s#0@@62| |t#0@@0|)))) :qid |unknown.0:0| :skolemid |1371| :pattern ( (|TSJ.__default.IsSuffix#requires| TSJ._default.IsSuffix$T@@0 |s#0@@62| |t#0@@0|)) )))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((TSJ._default.IsSuffix$T@@1 T@U) (|s#0@@63| T@U) (|t#0@@1| T@U) ) (!  (=> (and (and (and (= (type TSJ._default.IsSuffix$T@@1) TyType) (= (type |s#0@@63|) (SeqType BoxType))) (= (type |t#0@@1|) (SeqType BoxType))) (or (|TSJ.__default.IsSuffix#canCall| TSJ._default.IsSuffix$T@@1 |s#0@@63| |t#0@@1|) (and (not (= 21 $FunctionContextHeight)) (and ($Is |s#0@@63| (TSeq TSJ._default.IsSuffix$T@@1)) ($Is |t#0@@1| (TSeq TSJ._default.IsSuffix$T@@1)))))) (and (=> (TSJ.__default.IsSuffix TSJ._default.IsSuffix$T@@1 |s#0@@63| |t#0@@1|) (and (<= (|Seq#Length| |t#0@@1|) (|Seq#Length| |s#0@@63|)) (|Seq#Equal| (|Seq#Drop| |s#0@@63| (- (|Seq#Length| |s#0@@63|) (|Seq#Length| |t#0@@1|))) |t#0@@1|))) (=> (and (<= (|Seq#Length| |t#0@@1|) (|Seq#Length| |s#0@@63|)) (|Seq#Equal| (|Seq#Drop| |s#0@@63| (- (|Seq#Length| |s#0@@63|) (|Seq#Length| |t#0@@1|))) |t#0@@1|)) (TSJ.__default.IsSuffix TSJ._default.IsSuffix$T@@1 |s#0@@63| |t#0@@1|)))) :qid |unknown.0:0| :skolemid |1372| :pattern ( (TSJ.__default.IsSuffix TSJ._default.IsSuffix$T@@1 |s#0@@63| |t#0@@1|)) ))))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((TSJ._default.IsSuffix$T@@2 T@U) (|s#0@@64| T@U) (|t#0@@2| T@U) ) (!  (=> (and (and (and (= (type TSJ._default.IsSuffix$T@@2) TyType) (= (type |s#0@@64|) (SeqType BoxType))) (= (type |t#0@@2|) (SeqType BoxType))) (or (|TSJ.__default.IsSuffix#canCall| TSJ._default.IsSuffix$T@@2 (Lit |s#0@@64|) (Lit |t#0@@2|)) (and (not (= 21 $FunctionContextHeight)) (and ($Is |s#0@@64| (TSeq TSJ._default.IsSuffix$T@@2)) ($Is |t#0@@2| (TSeq TSJ._default.IsSuffix$T@@2)))))) (and (=> (TSJ.__default.IsSuffix TSJ._default.IsSuffix$T@@2 (Lit |s#0@@64|) (Lit |t#0@@2|)) (and (<= (|Seq#Length| (Lit |t#0@@2|)) (|Seq#Length| (Lit |s#0@@64|))) (|Seq#Equal| (|Seq#Drop| (Lit |s#0@@64|) (- (|Seq#Length| (Lit |s#0@@64|)) (|Seq#Length| (Lit |t#0@@2|)))) |t#0@@2|))) (=> (and (<= (|Seq#Length| (Lit |t#0@@2|)) (|Seq#Length| (Lit |s#0@@64|))) (|Seq#Equal| (|Seq#Drop| (Lit |s#0@@64|) (- (|Seq#Length| (Lit |s#0@@64|)) (|Seq#Length| (Lit |t#0@@2|)))) |t#0@@2|)) (TSJ.__default.IsSuffix TSJ._default.IsSuffix$T@@2 (Lit |s#0@@64|) (Lit |t#0@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |1373| :pattern ( (TSJ.__default.IsSuffix TSJ._default.IsSuffix$T@@2 (Lit |s#0@@64|) (Lit |t#0@@2|))) ))))
(assert (forall ((arg0@@354 T@U) (arg1@@159 T@U) (arg2@@114 T@U) (arg3@@89 T@U) ) (! (= (type (TSJ.__default.SeqSub arg0@@354 arg1@@159 arg2@@114 arg3@@89)) (SeqType BoxType)) :qid |funType:TSJ.__default.SeqSub| :pattern ( (TSJ.__default.SeqSub arg0@@354 arg1@@159 arg2@@114 arg3@@89)) )))
(assert (forall ((TSJ._default.SeqSub$T T@U) ($ly T@U) (|s#0@@65| T@U) (|t#0@@3| T@U) ) (!  (=> (and (and (and (= (type TSJ._default.SeqSub$T) TyType) (= (type $ly) LayerTypeType)) (= (type |s#0@@65|) (SeqType BoxType))) (= (type |t#0@@3|) (SeqType BoxType))) (= (TSJ.__default.SeqSub TSJ._default.SeqSub$T ($LS $ly) |s#0@@65| |t#0@@3|) (TSJ.__default.SeqSub TSJ._default.SeqSub$T $ly |s#0@@65| |t#0@@3|))) :qid |unknown.0:0| :skolemid |1374| :pattern ( (TSJ.__default.SeqSub TSJ._default.SeqSub$T ($LS $ly) |s#0@@65| |t#0@@3|)) )))
(assert (forall ((arg0@@355 T@U) ) (! (= (type (AsFuelBottom arg0@@355)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@355)) )))
(assert (forall ((TSJ._default.SeqSub$T@@0 T@U) ($ly@@0 T@U) (|s#0@@66| T@U) (|t#0@@4| T@U) ) (!  (=> (and (and (and (= (type TSJ._default.SeqSub$T@@0) TyType) (= (type $ly@@0) LayerTypeType)) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |t#0@@4|) (SeqType BoxType))) (= (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@0 $ly@@0 |s#0@@66| |t#0@@4|) (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@0 $LZ |s#0@@66| |t#0@@4|))) :qid |unknown.0:0| :skolemid |1375| :pattern ( (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@0 (AsFuelBottom $ly@@0) |s#0@@66| |t#0@@4|)) )))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((TSJ._default.SeqSub$T@@1 T@U) ($ly@@1 T@U) (|s#0@@67| T@U) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type TSJ._default.SeqSub$T@@1) TyType) (= (type $ly@@1) LayerTypeType)) (= (type |s#0@@67|) (SeqType BoxType))) (= (type |t#0@@5|) (SeqType BoxType))) (or (|TSJ.__default.SeqSub#canCall| TSJ._default.SeqSub$T@@1 |s#0@@67| |t#0@@5|) (and (not (= 22 $FunctionContextHeight)) (and (and ($Is |s#0@@67| (TSeq TSJ._default.SeqSub$T@@1)) ($Is |t#0@@5| (TSeq TSJ._default.SeqSub$T@@1))) (TSJ.__default.IsSuffix TSJ._default.SeqSub$T@@1 |s#0@@67| |t#0@@5|))))) (and (|Seq#Equal| (|Seq#Append| (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@1 $ly@@1 |s#0@@67| |t#0@@5|) |t#0@@5|) |s#0@@67|) ($Is (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@1 $ly@@1 |s#0@@67| |t#0@@5|) (TSeq TSJ._default.SeqSub$T@@1)))) :qid |unknown.0:0| :skolemid |1376| :pattern ( (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@1 $ly@@1 |s#0@@67| |t#0@@5|)) ))))
(assert (forall ((TSJ._default.SeqSub$T@@2 T@U) ($ly@@2 T@U) (|s#0@@68| T@U) (|t#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type TSJ._default.SeqSub$T@@2) TyType) (= (type $ly@@2) LayerTypeType)) (= (type |s#0@@68|) (SeqType BoxType))) (= (type |t#0@@6|) (SeqType BoxType))) (and ($Is |s#0@@68| (TSeq TSJ._default.SeqSub$T@@2)) ($Is |t#0@@6| (TSeq TSJ._default.SeqSub$T@@2)))) (and (=> (|TSJ.__default.SeqSub#requires| TSJ._default.SeqSub$T@@2 $ly@@2 |s#0@@68| |t#0@@6|) (TSJ.__default.IsSuffix TSJ._default.SeqSub$T@@2 |s#0@@68| |t#0@@6|)) (=> (TSJ.__default.IsSuffix TSJ._default.SeqSub$T@@2 |s#0@@68| |t#0@@6|) (|TSJ.__default.SeqSub#requires| TSJ._default.SeqSub$T@@2 $ly@@2 |s#0@@68| |t#0@@6|)))) :qid |unknown.0:0| :skolemid |1377| :pattern ( (|TSJ.__default.SeqSub#requires| TSJ._default.SeqSub$T@@2 $ly@@2 |s#0@@68| |t#0@@6|)) )))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((TSJ._default.SeqSub$T@@3 T@U) ($ly@@3 T@U) (|s#0@@69| T@U) (|t#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type TSJ._default.SeqSub$T@@3) TyType) (= (type $ly@@3) LayerTypeType)) (= (type |s#0@@69|) (SeqType BoxType))) (= (type |t#0@@7|) (SeqType BoxType))) (or (|TSJ.__default.SeqSub#canCall| TSJ._default.SeqSub$T@@3 |s#0@@69| |t#0@@7|) (and (not (= 22 $FunctionContextHeight)) (and (and ($Is |s#0@@69| (TSeq TSJ._default.SeqSub$T@@3)) ($Is |t#0@@7| (TSeq TSJ._default.SeqSub$T@@3))) (TSJ.__default.IsSuffix TSJ._default.SeqSub$T@@3 |s#0@@69| |t#0@@7|))))) (= (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@3 ($LS $ly@@3) |s#0@@69| |t#0@@7|) (|Seq#Take| |s#0@@69| (- (|Seq#Length| |s#0@@69|) (|Seq#Length| |t#0@@7|))))) :qid |unknown.0:0| :skolemid |1378| :pattern ( (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@3 ($LS $ly@@3) |s#0@@69| |t#0@@7|)) ))))
(assert  (=> (<= 22 $FunctionContextHeight) (forall ((TSJ._default.SeqSub$T@@4 T@U) ($ly@@4 T@U) (|s#0@@70| T@U) (|t#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type TSJ._default.SeqSub$T@@4) TyType) (= (type $ly@@4) LayerTypeType)) (= (type |s#0@@70|) (SeqType BoxType))) (= (type |t#0@@8|) (SeqType BoxType))) (or (|TSJ.__default.SeqSub#canCall| TSJ._default.SeqSub$T@@4 (Lit |s#0@@70|) (Lit |t#0@@8|)) (and (not (= 22 $FunctionContextHeight)) (and (and ($Is |s#0@@70| (TSeq TSJ._default.SeqSub$T@@4)) ($Is |t#0@@8| (TSeq TSJ._default.SeqSub$T@@4))) (U_2_bool (Lit (bool_2_U (TSJ.__default.IsSuffix TSJ._default.SeqSub$T@@4 (Lit |s#0@@70|) (Lit |t#0@@8|))))))))) (= (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@4 ($LS $ly@@4) (Lit |s#0@@70|) (Lit |t#0@@8|)) (|Seq#Take| (Lit |s#0@@70|) (- (|Seq#Length| (Lit |s#0@@70|)) (|Seq#Length| (Lit |t#0@@8|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1379| :pattern ( (TSJ.__default.SeqSub TSJ._default.SeqSub$T@@4 ($LS $ly@@4) (Lit |s#0@@70|) (Lit |t#0@@8|))) ))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|k#0@@61| T@U) (|s#0@@71| T@U) (|jes#0@@4| T@U) (|s'#0@@57| T@U) (|jes2#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@61|) BoxType) (= (type |s#0@@71|) BoxType)) (= (type |jes#0@@4|) (SeqType BoxType))) (= (type |s'#0@@57|) BoxType)) (= (type |jes2#0|) (SeqType BoxType))) (or (|TSJ.__default.advances#canCall| |k#0@@61| |s#0@@71| |jes#0@@4| |s'#0@@57| |jes2#0|) (and (not (= 23 $FunctionContextHeight)) (and (and (and (and ($IsBox |k#0@@61| |#$Constants|) ($IsBox |s#0@@71| |#$Variables|)) ($Is |jes#0@@4| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@57| |#$Variables|)) ($Is |jes2#0| (TSeq Tclass.Journal.JournalEntry)))))) true) :qid |TSJidfy.275:22| :skolemid |1382| :pattern ( (TSJ.__default.advances |k#0@@61| |s#0@@71| |jes#0@@4| |s'#0@@57| |jes2#0|)) ))))
(assert (forall ((|k#0@@62| T@U) (|s#0@@72| T@U) (|jes#0@@5| T@U) (|s'#0@@58| T@U) (|jes2#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@62|) BoxType) (= (type |s#0@@72|) BoxType)) (= (type |jes#0@@5|) (SeqType BoxType))) (= (type |s'#0@@58|) BoxType)) (= (type |jes2#0@@0|) (SeqType BoxType))) (and (and (and (and ($IsBox |k#0@@62| |#$Constants|) ($IsBox |s#0@@72| |#$Variables|)) ($Is |jes#0@@5| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@58| |#$Variables|)) ($Is |jes2#0@@0| (TSeq Tclass.Journal.JournalEntry)))) (and (=> (|TSJ.__default.advances#requires| |k#0@@62| |s#0@@72| |jes#0@@5| |s'#0@@58| |jes2#0@@0|) true) (=> true (|TSJ.__default.advances#requires| |k#0@@62| |s#0@@72| |jes#0@@5| |s'#0@@58| |jes2#0@@0|)))) :qid |TSJidfy.275:22| :skolemid |1383| :pattern ( (|TSJ.__default.advances#requires| |k#0@@62| |s#0@@72| |jes#0@@5| |s'#0@@58| |jes2#0@@0|)) )))
(assert (= (type StartFuel_TSJ._default.SeqSub) LayerTypeType))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|k#0@@63| T@U) (|s#0@@73| T@U) (|jes#0@@6| T@U) (|s'#0@@59| T@U) (|jes2#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@63|) BoxType) (= (type |s#0@@73|) BoxType)) (= (type |jes#0@@6|) (SeqType BoxType))) (= (type |s'#0@@59|) BoxType)) (= (type |jes2#0@@1|) (SeqType BoxType))) (or (|TSJ.__default.advances#canCall| |k#0@@63| |s#0@@73| |jes#0@@6| |s'#0@@59| |jes2#0@@1|) (and (not (= 23 $FunctionContextHeight)) (and (and (and (and ($IsBox |k#0@@63| |#$Constants|) ($IsBox |s#0@@73| |#$Variables|)) ($Is |jes#0@@6| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@59| |#$Variables|)) ($Is |jes2#0@@1| (TSeq Tclass.Journal.JournalEntry)))))) (and (and (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry |jes#0@@6| |jes2#0@@1|) (=> (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry |jes#0@@6| |jes2#0@@1|) (and (|TSJ.__default.SeqSub#canCall| Tclass.Journal.JournalEntry |jes#0@@6| |jes2#0@@1|) (|TSJ.__default.path#canCall| |k#0@@63| |s#0@@73| (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub |jes#0@@6| |jes2#0@@1|) |s'#0@@59|)))) (and (=> (TSJ.__default.advances |k#0@@63| |s#0@@73| |jes#0@@6| |s'#0@@59| |jes2#0@@1|) (and (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry |jes#0@@6| |jes2#0@@1|) (TSJ.__default.path |k#0@@63| |s#0@@73| (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub |jes#0@@6| |jes2#0@@1|) |s'#0@@59|))) (=> (and (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry |jes#0@@6| |jes2#0@@1|) (TSJ.__default.path |k#0@@63| |s#0@@73| (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub |jes#0@@6| |jes2#0@@1|) |s'#0@@59|)) (TSJ.__default.advances |k#0@@63| |s#0@@73| |jes#0@@6| |s'#0@@59| |jes2#0@@1|))))) :qid |TSJidfy.275:22| :skolemid |1384| :pattern ( (TSJ.__default.advances |k#0@@63| |s#0@@73| |jes#0@@6| |s'#0@@59| |jes2#0@@1|)) ))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|k#0@@64| T@U) (|s#0@@74| T@U) (|jes#0@@7| T@U) (|s'#0@@60| T@U) (|jes2#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@64|) BoxType) (= (type |s#0@@74|) BoxType)) (= (type |jes#0@@7|) (SeqType BoxType))) (= (type |s'#0@@60|) BoxType)) (= (type |jes2#0@@2|) (SeqType BoxType))) (or (|TSJ.__default.advances#canCall| |k#0@@64| |s#0@@74| (Lit |jes#0@@7|) |s'#0@@60| (Lit |jes2#0@@2|)) (and (not (= 23 $FunctionContextHeight)) (and (and (and (and ($IsBox |k#0@@64| |#$Constants|) ($IsBox |s#0@@74| |#$Variables|)) ($Is |jes#0@@7| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@60| |#$Variables|)) ($Is |jes2#0@@2| (TSeq Tclass.Journal.JournalEntry)))))) (and (and (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (Lit |jes#0@@7|) (Lit |jes2#0@@2|)) (=> (U_2_bool (Lit (bool_2_U (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (Lit |jes#0@@7|) (Lit |jes2#0@@2|))))) (and (|TSJ.__default.SeqSub#canCall| Tclass.Journal.JournalEntry (Lit |jes#0@@7|) (Lit |jes2#0@@2|)) (|TSJ.__default.path#canCall| |k#0@@64| |s#0@@74| (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (Lit |jes#0@@7|) (Lit |jes2#0@@2|)) |s'#0@@60|)))) (and (=> (TSJ.__default.advances |k#0@@64| |s#0@@74| (Lit |jes#0@@7|) |s'#0@@60| (Lit |jes2#0@@2|)) (and (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (Lit |jes#0@@7|) (Lit |jes2#0@@2|)) (TSJ.__default.path |k#0@@64| |s#0@@74| (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (Lit |jes#0@@7|) (Lit |jes2#0@@2|)) |s'#0@@60|))) (=> (and (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (Lit |jes#0@@7|) (Lit |jes2#0@@2|)) (TSJ.__default.path |k#0@@64| |s#0@@74| (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (Lit |jes#0@@7|) (Lit |jes2#0@@2|)) |s'#0@@60|)) (TSJ.__default.advances |k#0@@64| |s#0@@74| (Lit |jes#0@@7|) |s'#0@@60| (Lit |jes2#0@@2|)))))) :qid |TSJidfy.275:22| :weight 3 :skolemid |1385| :pattern ( (TSJ.__default.advances |k#0@@64| |s#0@@74| (Lit |jes#0@@7|) |s'#0@@60| (Lit |jes2#0@@2|))) ))))
(assert  (=> (<= 23 $FunctionContextHeight) (forall ((|k#0@@65| T@U) (|s#0@@75| T@U) (|jes#0@@8| T@U) (|s'#0@@61| T@U) (|jes2#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |k#0@@65|) BoxType) (= (type |s#0@@75|) BoxType)) (= (type |jes#0@@8|) (SeqType BoxType))) (= (type |s'#0@@61|) BoxType)) (= (type |jes2#0@@3|) (SeqType BoxType))) (or (|TSJ.__default.advances#canCall| (Lit |k#0@@65|) (Lit |s#0@@75|) (Lit |jes#0@@8|) (Lit |s'#0@@61|) (Lit |jes2#0@@3|)) (and (not (= 23 $FunctionContextHeight)) (and (and (and (and ($IsBox |k#0@@65| |#$Constants|) ($IsBox |s#0@@75| |#$Variables|)) ($Is |jes#0@@8| (TSeq Tclass.Journal.JournalEntry))) ($IsBox |s'#0@@61| |#$Variables|)) ($Is |jes2#0@@3| (TSeq Tclass.Journal.JournalEntry)))))) (and (and (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (Lit |jes#0@@8|) (Lit |jes2#0@@3|)) (=> (U_2_bool (Lit (bool_2_U (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (Lit |jes#0@@8|) (Lit |jes2#0@@3|))))) (and (|TSJ.__default.SeqSub#canCall| Tclass.Journal.JournalEntry (Lit |jes#0@@8|) (Lit |jes2#0@@3|)) (|TSJ.__default.path#canCall| (Lit |k#0@@65|) (Lit |s#0@@75|) (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (Lit |jes#0@@8|) (Lit |jes2#0@@3|)) (Lit |s'#0@@61|))))) (and (=> (TSJ.__default.advances (Lit |k#0@@65|) (Lit |s#0@@75|) (Lit |jes#0@@8|) (Lit |s'#0@@61|) (Lit |jes2#0@@3|)) (and (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (Lit |jes#0@@8|) (Lit |jes2#0@@3|)) (TSJ.__default.path (Lit |k#0@@65|) (Lit |s#0@@75|) (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (Lit |jes#0@@8|) (Lit |jes2#0@@3|)) (Lit |s'#0@@61|)))) (=> (and (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (Lit |jes#0@@8|) (Lit |jes2#0@@3|)) (TSJ.__default.path (Lit |k#0@@65|) (Lit |s#0@@75|) (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (Lit |jes#0@@8|) (Lit |jes2#0@@3|)) (Lit |s'#0@@61|))) (TSJ.__default.advances (Lit |k#0@@65|) (Lit |s#0@@75|) (Lit |jes#0@@8|) (Lit |s'#0@@61|) (Lit |jes2#0@@3|)))))) :qid |TSJidfy.275:22| :weight 3 :skolemid |1386| :pattern ( (TSJ.__default.advances (Lit |k#0@@65|) (Lit |s#0@@75|) (Lit |jes#0@@8|) (Lit |s'#0@@61|) (Lit |jes2#0@@3|))) ))))
(assert  (=> (<= 24 $FunctionContextHeight) (forall ((|k#0@@66| T@U) (|s#0@@76| T@U) ) (!  (=> (and (and (= (type |k#0@@66|) DatatypeTypeType) (= (type |s#0@@76|) DatatypeTypeType)) (or (|TSJ.__default.Inv#canCall| |k#0@@66| |s#0@@76|) (and (not (= 24 $FunctionContextHeight)) (and ($Is |k#0@@66| Tclass.TSJ.Constants) ($Is |s#0@@76| Tclass.TSJ.Variables))))) true) :qid |TSJidfy.285:17| :skolemid |1390| :pattern ( (TSJ.__default.Inv |k#0@@66| |s#0@@76|)) ))))
(assert (forall ((|k#0@@67| T@U) (|s#0@@77| T@U) ) (!  (=> (and (and (= (type |k#0@@67|) DatatypeTypeType) (= (type |s#0@@77|) DatatypeTypeType)) (and ($Is |k#0@@67| Tclass.TSJ.Constants) ($Is |s#0@@77| Tclass.TSJ.Variables))) (and (=> (|TSJ.__default.Inv#requires| |k#0@@67| |s#0@@77|) true) (=> true (|TSJ.__default.Inv#requires| |k#0@@67| |s#0@@77|)))) :qid |TSJidfy.285:17| :skolemid |1391| :pattern ( (|TSJ.__default.Inv#requires| |k#0@@67| |s#0@@77|)) )))
(assert  (=> (<= 24 $FunctionContextHeight) (forall ((|k#0@@68| T@U) (|s#0@@78| T@U) ) (!  (=> (and (and (= (type |k#0@@68|) DatatypeTypeType) (= (type |s#0@@78|) DatatypeTypeType)) (or (|TSJ.__default.Inv#canCall| |k#0@@68| |s#0@@78|) (and (not (= 24 $FunctionContextHeight)) (and ($Is |k#0@@68| Tclass.TSJ.Constants) ($Is |s#0@@78| Tclass.TSJ.Variables))))) (and (and (and (and (and (and (and (TSJ.Constants.Constants_q |k#0@@68|) (TSJ.Variables.Variables_q |s#0@@78|)) (|TSJ.SM.Abs.__default.Inv#canCall| (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s1 |s#0@@78|))) (=> (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s1 |s#0@@78|)) (and (and (TSJ.Constants.Constants_q |k#0@@68|) (TSJ.Variables.Variables_q |s#0@@78|)) (|TSJ.SM.Abs.__default.Inv#canCall| (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s2 |s#0@@78|))))) (=> (and (and (and (TSJ.Constants.Constants_q |k#0@@68|) (TSJ.Variables.Variables_q |s#0@@78|)) (|TSJ.SM.Abs.__default.Inv#canCall| (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s2 |s#0@@78|))) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s2 |s#0@@78|))) (and (and (TSJ.Constants.Constants_q |k#0@@68|) (TSJ.Variables.Variables_q |s#0@@78|)) (|TSJ.SM.Abs.__default.Inv#canCall| (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s3 |s#0@@78|))))) (=> (and (and (and (TSJ.Constants.Constants_q |k#0@@68|) (TSJ.Variables.Variables_q |s#0@@78|)) (|TSJ.SM.Abs.__default.Inv#canCall| (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s3 |s#0@@78|))) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s3 |s#0@@78|))) (and (and (and (and (and (TSJ.Constants.Constants_q |k#0@@68|) (TSJ.Variables.Variables_q |s#0@@78|)) (TSJ.Variables.Variables_q |s#0@@78|)) (TSJ.Variables.Variables_q |s#0@@78|)) (TSJ.Variables.Variables_q |s#0@@78|)) (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s1 |s#0@@78|) (TSJ.Variables.j__gamma |s#0@@78|) (TSJ.Variables.s2 |s#0@@78|) (TSJ.Variables.j2 |s#0@@78|))))) (=> (and (and (and (and (and (and (TSJ.Constants.Constants_q |k#0@@68|) (TSJ.Variables.Variables_q |s#0@@78|)) (TSJ.Variables.Variables_q |s#0@@78|)) (TSJ.Variables.Variables_q |s#0@@78|)) (TSJ.Variables.Variables_q |s#0@@78|)) (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s1 |s#0@@78|) (TSJ.Variables.j__gamma |s#0@@78|) (TSJ.Variables.s2 |s#0@@78|) (TSJ.Variables.j2 |s#0@@78|))) (TSJ.__default.advances (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s1 |s#0@@78|) (TSJ.Variables.j__gamma |s#0@@78|) (TSJ.Variables.s2 |s#0@@78|) (TSJ.Variables.j2 |s#0@@78|))) (and (and (and (and (and (TSJ.Constants.Constants_q |k#0@@68|) (TSJ.Variables.Variables_q |s#0@@78|)) (and (TSJ.Variables.Variables_q |s#0@@78|) (TSJ.Variables.Variables_q |s#0@@78|))) (TSJ.Variables.Variables_q |s#0@@78|)) (TSJ.Variables.Variables_q |s#0@@78|)) (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s2 |s#0@@78|) (|Seq#Append| (TSJ.Variables.j2 |s#0@@78|) (TSJ.Variables.j__delta |s#0@@78|)) (TSJ.Variables.s3 |s#0@@78|) (TSJ.Variables.j3 |s#0@@78|))))) (and (=> (TSJ.__default.Inv |k#0@@68| |s#0@@78|) (and (and (and (and (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s1 |s#0@@78|)) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s2 |s#0@@78|))) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s3 |s#0@@78|))) (TSJ.__default.advances (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s1 |s#0@@78|) (TSJ.Variables.j__gamma |s#0@@78|) (TSJ.Variables.s2 |s#0@@78|) (TSJ.Variables.j2 |s#0@@78|))) (TSJ.__default.advances (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s2 |s#0@@78|) (|Seq#Append| (TSJ.Variables.j2 |s#0@@78|) (TSJ.Variables.j__delta |s#0@@78|)) (TSJ.Variables.s3 |s#0@@78|) (TSJ.Variables.j3 |s#0@@78|)))) (=> (and (and (and (and (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s1 |s#0@@78|)) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s2 |s#0@@78|))) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s3 |s#0@@78|))) (TSJ.__default.advances (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s1 |s#0@@78|) (TSJ.Variables.j__gamma |s#0@@78|) (TSJ.Variables.s2 |s#0@@78|) (TSJ.Variables.j2 |s#0@@78|))) (TSJ.__default.advances (TSJ.Constants.k |k#0@@68|) (TSJ.Variables.s2 |s#0@@78|) (|Seq#Append| (TSJ.Variables.j2 |s#0@@78|) (TSJ.Variables.j__delta |s#0@@78|)) (TSJ.Variables.s3 |s#0@@78|) (TSJ.Variables.j3 |s#0@@78|))) (TSJ.__default.Inv |k#0@@68| |s#0@@78|))))) :qid |TSJidfy.285:17| :skolemid |1392| :pattern ( (TSJ.__default.Inv |k#0@@68| |s#0@@78|)) ))))
(assert  (=> (<= 24 $FunctionContextHeight) (forall ((|k#0@@69| T@U) (|s#0@@79| T@U) ) (!  (=> (and (and (= (type |k#0@@69|) DatatypeTypeType) (= (type |s#0@@79|) DatatypeTypeType)) (or (|TSJ.__default.Inv#canCall| (Lit |k#0@@69|) (Lit |s#0@@79|)) (and (not (= 24 $FunctionContextHeight)) (and ($Is |k#0@@69| Tclass.TSJ.Constants) ($Is |s#0@@79| Tclass.TSJ.Variables))))) (and (and (and (and (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@69|)) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (|TSJ.SM.Abs.__default.Inv#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@79|))))) (=> (TSJ.SM.Abs.__default.Inv (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@79|)))) (and (and (TSJ.Constants.Constants_q (Lit |k#0@@69|)) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (|TSJ.SM.Abs.__default.Inv#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))))))) (=> (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@69|)) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (|TSJ.SM.Abs.__default.Inv#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))))) (TSJ.SM.Abs.__default.Inv (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))))) (and (and (TSJ.Constants.Constants_q (Lit |k#0@@69|)) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (|TSJ.SM.Abs.__default.Inv#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@79|))))))) (=> (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@69|)) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (|TSJ.SM.Abs.__default.Inv#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@79|))))) (TSJ.SM.Abs.__default.Inv (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@79|))))) (and (and (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@69|)) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (|TSJ.__default.advances#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@79|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@79|))))))) (=> (and (and (and (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@69|)) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (|TSJ.__default.advances#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@79|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@79|))))) (U_2_bool (Lit (bool_2_U (TSJ.__default.advances (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@79|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@79|)))))))) (and (and (and (and (and (TSJ.Constants.Constants_q (Lit |k#0@@69|)) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (and (TSJ.Variables.Variables_q (Lit |s#0@@79|)) (TSJ.Variables.Variables_q (Lit |s#0@@79|)))) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (TSJ.Variables.Variables_q (Lit |s#0@@79|))) (|TSJ.__default.advances#canCall| (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))) (|Seq#Append| (TSJ.Variables.j2 (Lit |s#0@@79|)) (TSJ.Variables.j__delta (Lit |s#0@@79|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@79|))))))) (and (=> (TSJ.__default.Inv (Lit |k#0@@69|) (Lit |s#0@@79|)) (and (and (and (and (TSJ.SM.Abs.__default.Inv (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@79|)))) (TSJ.SM.Abs.__default.Inv (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))))) (TSJ.SM.Abs.__default.Inv (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@79|))))) (TSJ.__default.advances (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@79|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@79|))))) (TSJ.__default.advances (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))) (|Seq#Append| (TSJ.Variables.j2 (Lit |s#0@@79|)) (TSJ.Variables.j__delta (Lit |s#0@@79|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@79|)))))) (=> (and (and (and (and (TSJ.SM.Abs.__default.Inv (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@79|)))) (TSJ.SM.Abs.__default.Inv (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))))) (TSJ.SM.Abs.__default.Inv (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@79|))))) (TSJ.__default.advances (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s1 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j__gamma (Lit |s#0@@79|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j2 (Lit |s#0@@79|))))) (TSJ.__default.advances (Lit (TSJ.Constants.k (Lit |k#0@@69|))) (Lit (TSJ.Variables.s2 (Lit |s#0@@79|))) (|Seq#Append| (TSJ.Variables.j2 (Lit |s#0@@79|)) (TSJ.Variables.j__delta (Lit |s#0@@79|))) (Lit (TSJ.Variables.s3 (Lit |s#0@@79|))) (Lit (TSJ.Variables.j3 (Lit |s#0@@79|))))) (TSJ.__default.Inv (Lit |k#0@@69|) (Lit |s#0@@79|)))))) :qid |TSJidfy.285:17| :weight 3 :skolemid |1393| :pattern ( (TSJ.__default.Inv (Lit |k#0@@69|) (Lit |s#0@@79|))) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@118 T@U) ) (!  (=> (and (= (type bx@@118) BoxType) ($IsBox bx@@118 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@118)) bx@@118) ($Is ($Unbox intType bx@@118) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1767| :pattern ( ($IsBox bx@@118 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@2| T@U) ) (!  (=> (= (type |i#0@@2|) intType) (and (=> ($Is |i#0@@2| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@2|)) (< (U_2_int |i#0@@2|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@2|)) (< (U_2_int |i#0@@2|) 128)) ($Is |i#0@@2| Tclass.NativeTypes.sbyte)))) :qid |unknown.0:0| :skolemid |1768| :pattern ( ($Is |i#0@@2| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@3| T@U) ($h@@54 T@U) ) (!  (=> (and (= (type |i#0@@3|) intType) (= (type $h@@54) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@3| Tclass.NativeTypes.sbyte $h@@54)) :qid |unknown.0:0| :skolemid |1769| :pattern ( ($IsAlloc |i#0@@3| Tclass.NativeTypes.sbyte $h@@54)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@119 T@U) ) (!  (=> (and (= (type bx@@119) BoxType) ($IsBox bx@@119 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@119)) bx@@119) ($Is ($Unbox intType bx@@119) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1770| :pattern ( ($IsBox bx@@119 Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@4| T@U) ) (!  (=> (= (type |i#0@@4|) intType) (and (=> ($Is |i#0@@4| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@4|)) (< (U_2_int |i#0@@4|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@4|)) (< (U_2_int |i#0@@4|) 256)) ($Is |i#0@@4| Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |1771| :pattern ( ($Is |i#0@@4| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@5| T@U) ($h@@55 T@U) ) (!  (=> (and (= (type |i#0@@5|) intType) (= (type $h@@55) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@5| Tclass.NativeTypes.byte $h@@55)) :qid |unknown.0:0| :skolemid |1772| :pattern ( ($IsAlloc |i#0@@5| Tclass.NativeTypes.byte $h@@55)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@120 T@U) ) (!  (=> (and (= (type bx@@120) BoxType) ($IsBox bx@@120 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@120)) bx@@120) ($Is ($Unbox intType bx@@120) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1773| :pattern ( ($IsBox bx@@120 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@6| T@U) ) (!  (=> (= (type |i#0@@6|) intType) (and (=> ($Is |i#0@@6| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@6|)) (< (U_2_int |i#0@@6|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@6|)) (< (U_2_int |i#0@@6|) 32768)) ($Is |i#0@@6| Tclass.NativeTypes.int16)))) :qid |unknown.0:0| :skolemid |1774| :pattern ( ($Is |i#0@@6| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@7| T@U) ($h@@56 T@U) ) (!  (=> (and (= (type |i#0@@7|) intType) (= (type $h@@56) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@7| Tclass.NativeTypes.int16 $h@@56)) :qid |unknown.0:0| :skolemid |1775| :pattern ( ($IsAlloc |i#0@@7| Tclass.NativeTypes.int16 $h@@56)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@121 T@U) ) (!  (=> (and (= (type bx@@121) BoxType) ($IsBox bx@@121 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@121)) bx@@121) ($Is ($Unbox intType bx@@121) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1776| :pattern ( ($IsBox bx@@121 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@8| T@U) ) (!  (=> (= (type |i#0@@8|) intType) (and (=> ($Is |i#0@@8| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@8|)) (< (U_2_int |i#0@@8|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@8|)) (< (U_2_int |i#0@@8|) 65536)) ($Is |i#0@@8| Tclass.NativeTypes.uint16)))) :qid |unknown.0:0| :skolemid |1777| :pattern ( ($Is |i#0@@8| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@9| T@U) ($h@@57 T@U) ) (!  (=> (and (= (type |i#0@@9|) intType) (= (type $h@@57) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@9| Tclass.NativeTypes.uint16 $h@@57)) :qid |unknown.0:0| :skolemid |1778| :pattern ( ($IsAlloc |i#0@@9| Tclass.NativeTypes.uint16 $h@@57)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@122 T@U) ) (!  (=> (and (= (type bx@@122) BoxType) ($IsBox bx@@122 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@122)) bx@@122) ($Is ($Unbox intType bx@@122) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1779| :pattern ( ($IsBox bx@@122 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@10| T@U) ) (!  (=> (= (type |i#0@@10|) intType) (and (=> ($Is |i#0@@10| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@10|)) (< (U_2_int |i#0@@10|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@10|)) (< (U_2_int |i#0@@10|) 2147483648)) ($Is |i#0@@10| Tclass.NativeTypes.int32)))) :qid |unknown.0:0| :skolemid |1780| :pattern ( ($Is |i#0@@10| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@11| T@U) ($h@@58 T@U) ) (!  (=> (and (= (type |i#0@@11|) intType) (= (type $h@@58) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@11| Tclass.NativeTypes.int32 $h@@58)) :qid |unknown.0:0| :skolemid |1781| :pattern ( ($IsAlloc |i#0@@11| Tclass.NativeTypes.int32 $h@@58)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@123 T@U) ) (!  (=> (and (= (type bx@@123) BoxType) ($IsBox bx@@123 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@123)) bx@@123) ($Is ($Unbox intType bx@@123) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1782| :pattern ( ($IsBox bx@@123 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@12| T@U) ) (!  (=> (= (type |i#0@@12|) intType) (and (=> ($Is |i#0@@12| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@12|)) (< (U_2_int |i#0@@12|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@12|)) (< (U_2_int |i#0@@12|) 4294967296)) ($Is |i#0@@12| Tclass.NativeTypes.uint32)))) :qid |unknown.0:0| :skolemid |1783| :pattern ( ($Is |i#0@@12| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@13| T@U) ($h@@59 T@U) ) (!  (=> (and (= (type |i#0@@13|) intType) (= (type $h@@59) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@13| Tclass.NativeTypes.uint32 $h@@59)) :qid |unknown.0:0| :skolemid |1784| :pattern ( ($IsAlloc |i#0@@13| Tclass.NativeTypes.uint32 $h@@59)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@124 T@U) ) (!  (=> (and (= (type bx@@124) BoxType) ($IsBox bx@@124 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@124)) bx@@124) ($Is ($Unbox intType bx@@124) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1785| :pattern ( ($IsBox bx@@124 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@14| T@U) ) (!  (=> (= (type |i#0@@14|) intType) (and (=> ($Is |i#0@@14| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@14|)) (< (U_2_int |i#0@@14|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@14|)) (< (U_2_int |i#0@@14|) 9223372036854775808)) ($Is |i#0@@14| Tclass.NativeTypes.int64)))) :qid |unknown.0:0| :skolemid |1786| :pattern ( ($Is |i#0@@14| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@15| T@U) ($h@@60 T@U) ) (!  (=> (and (= (type |i#0@@15|) intType) (= (type $h@@60) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@15| Tclass.NativeTypes.int64 $h@@60)) :qid |unknown.0:0| :skolemid |1787| :pattern ( ($IsAlloc |i#0@@15| Tclass.NativeTypes.int64 $h@@60)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@125 T@U) ) (!  (=> (and (= (type bx@@125) BoxType) ($IsBox bx@@125 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@125)) bx@@125) ($Is ($Unbox intType bx@@125) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1788| :pattern ( ($IsBox bx@@125 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@16| T@U) ) (!  (=> (= (type |i#0@@16|) intType) (and (=> ($Is |i#0@@16| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@16|)) (< (U_2_int |i#0@@16|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@16|)) (< (U_2_int |i#0@@16|) 18446744073709551616)) ($Is |i#0@@16| Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |1789| :pattern ( ($Is |i#0@@16| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@17| T@U) ($h@@61 T@U) ) (!  (=> (and (= (type |i#0@@17|) intType) (= (type $h@@61) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@17| Tclass.NativeTypes.uint64 $h@@61)) :qid |unknown.0:0| :skolemid |1790| :pattern ( ($IsAlloc |i#0@@17| Tclass.NativeTypes.uint64 $h@@61)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@126 T@U) ) (!  (=> (and (= (type bx@@126) BoxType) ($IsBox bx@@126 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@126)) bx@@126) ($Is ($Unbox intType bx@@126) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1791| :pattern ( ($IsBox bx@@126 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@18| T@U) ) (!  (=> (= (type |i#0@@18|) intType) (and (=> ($Is |i#0@@18| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@18|)) (< (U_2_int |i#0@@18|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@18|)) (< (U_2_int |i#0@@18|) 128)) ($Is |i#0@@18| Tclass.NativeTypes.nat8)))) :qid |unknown.0:0| :skolemid |1792| :pattern ( ($Is |i#0@@18| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@19| T@U) ($h@@62 T@U) ) (!  (=> (and (= (type |i#0@@19|) intType) (= (type $h@@62) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@19| Tclass.NativeTypes.nat8 $h@@62)) :qid |unknown.0:0| :skolemid |1793| :pattern ( ($IsAlloc |i#0@@19| Tclass.NativeTypes.nat8 $h@@62)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@127 T@U) ) (!  (=> (and (= (type bx@@127) BoxType) ($IsBox bx@@127 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@127)) bx@@127) ($Is ($Unbox intType bx@@127) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1794| :pattern ( ($IsBox bx@@127 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@20| T@U) ) (!  (=> (= (type |i#0@@20|) intType) (and (=> ($Is |i#0@@20| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@20|)) (< (U_2_int |i#0@@20|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@20|)) (< (U_2_int |i#0@@20|) 32768)) ($Is |i#0@@20| Tclass.NativeTypes.nat16)))) :qid |unknown.0:0| :skolemid |1795| :pattern ( ($Is |i#0@@20| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@21| T@U) ($h@@63 T@U) ) (!  (=> (and (= (type |i#0@@21|) intType) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@21| Tclass.NativeTypes.nat16 $h@@63)) :qid |unknown.0:0| :skolemid |1796| :pattern ( ($IsAlloc |i#0@@21| Tclass.NativeTypes.nat16 $h@@63)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@128 T@U) ) (!  (=> (and (= (type bx@@128) BoxType) ($IsBox bx@@128 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@128)) bx@@128) ($Is ($Unbox intType bx@@128) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1797| :pattern ( ($IsBox bx@@128 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@22| T@U) ) (!  (=> (= (type |i#0@@22|) intType) (and (=> ($Is |i#0@@22| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@22|)) (< (U_2_int |i#0@@22|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@22|)) (< (U_2_int |i#0@@22|) 2147483648)) ($Is |i#0@@22| Tclass.NativeTypes.nat32)))) :qid |unknown.0:0| :skolemid |1798| :pattern ( ($Is |i#0@@22| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@23| T@U) ($h@@64 T@U) ) (!  (=> (and (= (type |i#0@@23|) intType) (= (type $h@@64) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@23| Tclass.NativeTypes.nat32 $h@@64)) :qid |unknown.0:0| :skolemid |1799| :pattern ( ($IsAlloc |i#0@@23| Tclass.NativeTypes.nat32 $h@@64)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@129 T@U) ) (!  (=> (and (= (type bx@@129) BoxType) ($IsBox bx@@129 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@129)) bx@@129) ($Is ($Unbox intType bx@@129) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1800| :pattern ( ($IsBox bx@@129 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@24| T@U) ) (!  (=> (= (type |i#0@@24|) intType) (and (=> ($Is |i#0@@24| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@24|)) (< (U_2_int |i#0@@24|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@24|)) (< (U_2_int |i#0@@24|) 9223372036854775808)) ($Is |i#0@@24| Tclass.NativeTypes.nat64)))) :qid |unknown.0:0| :skolemid |1801| :pattern ( ($Is |i#0@@24| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@25| T@U) ($h@@65 T@U) ) (!  (=> (and (= (type |i#0@@25|) intType) (= (type $h@@65) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@25| Tclass.NativeTypes.nat64 $h@@65)) :qid |unknown.0:0| :skolemid |1802| :pattern ( ($IsAlloc |i#0@@25| Tclass.NativeTypes.nat64 $h@@65)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@130 T@U) ) (!  (=> (and (= (type bx@@130) BoxType) ($IsBox bx@@130 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@130)) bx@@130) ($Is ($Unbox refType bx@@130) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1803| :pattern ( ($IsBox bx@@130 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (and (=> ($Is $o@@11 Tclass.NativeTypes.__default) (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default))) (=> (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)) ($Is $o@@11 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1804| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@66 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@66) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@66) (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@66 $o@@12) alloc)))) (=> (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@66 $o@@12) alloc))) ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@66)))) :qid |unknown.0:0| :skolemid |1805| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@66)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (forall ((bx@@131 T@U) ) (!  (=> (and (= (type bx@@131) BoxType) ($IsBox bx@@131 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@131)) bx@@131) ($Is ($Unbox (SeqType BoxType) bx@@131) Tclass.ValueType.Value))) :qid |unknown.0:0| :skolemid |1806| :pattern ( ($IsBox bx@@131 Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@80| T@U) ) (!  (=> (= (type |s#0@@80|) (SeqType BoxType)) (and (=> ($Is |s#0@@80| Tclass.ValueType.Value) (and ($Is |s#0@@80| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@80|) (LitInt 1024)))) (=> (and ($Is |s#0@@80| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@80|) (LitInt 1024))) ($Is |s#0@@80| Tclass.ValueType.Value)))) :qid |unknown.0:0| :skolemid |1807| :pattern ( ($Is |s#0@@80| Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@81| T@U) ($h@@67 T@U) ) (!  (=> (and (= (type |s#0@@81|) (SeqType BoxType)) (= (type $h@@67) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |s#0@@81| Tclass.ValueType.Value $h@@67) ($IsAlloc |s#0@@81| (TSeq Tclass.NativeTypes.byte) $h@@67)) (=> ($IsAlloc |s#0@@81| (TSeq Tclass.NativeTypes.byte) $h@@67) ($IsAlloc |s#0@@81| Tclass.ValueType.Value $h@@67)))) :qid |unknown.0:0| :skolemid |1808| :pattern ( ($IsAlloc |s#0@@81| Tclass.ValueType.Value $h@@67)) )))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (forall ((bx@@132 T@U) ) (!  (=> (and (= (type bx@@132) BoxType) ($IsBox bx@@132 Tclass.ValueType.__default)) (and (= ($Box ($Unbox refType bx@@132)) bx@@132) ($Is ($Unbox refType bx@@132) Tclass.ValueType.__default))) :qid |unknown.0:0| :skolemid |1809| :pattern ( ($IsBox bx@@132 Tclass.ValueType.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (and (=> ($Is $o@@13 Tclass.ValueType.__default) (or (= $o@@13 null) (= (dtype $o@@13) Tclass.ValueType.__default))) (=> (or (= $o@@13 null) (= (dtype $o@@13) Tclass.ValueType.__default)) ($Is $o@@13 Tclass.ValueType.__default)))) :qid |unknown.0:0| :skolemid |1810| :pattern ( ($Is $o@@13 Tclass.ValueType.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@68 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@68) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@14 Tclass.ValueType.__default $h@@68) (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@68 $o@@14) alloc)))) (=> (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@68 $o@@14) alloc))) ($IsAlloc $o@@14 Tclass.ValueType.__default $h@@68)))) :qid |unknown.0:0| :skolemid |1811| :pattern ( ($IsAlloc $o@@14 Tclass.ValueType.__default $h@@68)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) ValueType.__default.MaxLen) (< ValueType.__default.MaxLen 18446744073709551616)))))
(assert  (=> |ValueType.__default.MaxLen#requires| true))
(assert  (=> true |ValueType.__default.MaxLen#requires|))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true |ValueType.__default.DefaultValue#requires|))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0| T@U) ) (!  (=> (and (= (type |v#0|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0|) ($Is |v#0| Tclass.ValueType.Value))) (<= (LitInt 0) (ValueType.__default.Len |v#0|))) :qid |KeyTypes.17:15| :skolemid |1812| :pattern ( (ValueType.__default.Len |v#0|)) ))))
(assert (forall ((|v#0@@0| T@U) ) (!  (=> (and (= (type |v#0@@0|) (SeqType BoxType)) ($Is |v#0@@0| Tclass.ValueType.Value)) (and (=> (|ValueType.__default.Len#requires| |v#0@@0|) true) (=> true (|ValueType.__default.Len#requires| |v#0@@0|)))) :qid |KeyTypes.17:15| :skolemid |1813| :pattern ( (|ValueType.__default.Len#requires| |v#0@@0|)) )))
(assert  (=> true (forall ((|v#0@@1| T@U) ) (!  (=> (and (= (type |v#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@1|) ($Is |v#0@@1| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@1|) (|Seq#Length| |v#0@@1|))) :qid |KeyTypes.17:15| :skolemid |1814| :pattern ( (ValueType.__default.Len |v#0@@1|)) ))))
(assert  (=> true (forall ((|v#0@@2| T@U) ) (!  (=> (and (= (type |v#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@2|)) ($Is |v#0@@2| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@2|)) (|Seq#Length| (Lit |v#0@@2|)))) :qid |KeyTypes.17:15| :weight 3 :skolemid |1815| :pattern ( (ValueType.__default.Len (Lit |v#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@82| T@U) ) (!  (=> (and (= (type |s#0@@82|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@82|) ($Is |s#0@@82| (TSeq Tclass.NativeTypes.byte)))) true) :qid |KeyTypes.19:36| :skolemid |1816| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@82|)) ))))
(assert (forall ((|s#0@@83| T@U) ) (!  (=> (and (= (type |s#0@@83|) (SeqType BoxType)) ($Is |s#0@@83| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@83|) true) (=> true (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@83|)))) :qid |KeyTypes.19:36| :skolemid |1817| :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@83|)) )))
(assert  (=> true (forall ((|s#0@@84| T@U) ) (!  (=> (and (= (type |s#0@@84|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@84|) ($Is |s#0@@84| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring |s#0@@84|) (<= (|Seq#Length| |s#0@@84|) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| |s#0@@84|) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring |s#0@@84|))))) :qid |KeyTypes.19:36| :skolemid |1818| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@84|)) ))))
(assert  (=> true (forall ((|s#0@@85| T@U) ) (!  (=> (and (= (type |s#0@@85|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@85|)) ($Is |s#0@@85| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (and (=> (ValueType.__default.ValidMessageBytestring (Lit |s#0@@85|)) (<= (|Seq#Length| (Lit |s#0@@85|)) (LitInt ValueType.__default.MaxLen))) (=> (<= (|Seq#Length| (Lit |s#0@@85|)) (LitInt ValueType.__default.MaxLen)) (ValueType.__default.ValidMessageBytestring (Lit |s#0@@85|)))))) :qid |KeyTypes.19:36| :weight 3 :skolemid |1819| :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@85|))) ))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |KeyTypes.24:37| :skolemid |1820| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|)) ))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true) (=> true (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)))) :qid |KeyTypes.24:37| :skolemid |1821| :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)) )))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@26|) (< |i#0@@26| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@26|)))) :qid |KeyTypes.26:12| :skolemid |1822| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@26|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#0@@27| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@27|)))) :qid |KeyTypes.26:12| :skolemid |1823| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@27|))) ))) (=> (forall ((|i#0@@28| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@28|)))) :qid |KeyTypes.26:12| :skolemid |1823| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@28|))) )) (ValueType.__default.ValidMessageBytestrings |strs#0@@1|))))) :qid |KeyTypes.24:37| :skolemid |1824| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|)) ))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@2|)))) :qid |KeyTypes.26:12| :skolemid |1825| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@2|))) )) (and (=> (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#1@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@3|)))) :qid |KeyTypes.26:12| :skolemid |1826| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@3|))) ))) (=> (forall ((|i#1@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@4|)))) :qid |KeyTypes.26:12| :skolemid |1826| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@4|))) )) (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)))))) :qid |KeyTypes.24:37| :weight 3 :skolemid |1827| :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|))) ))))
(assert (= (type Tclass.KeyType.Key) TyType))
(assert (= (Tag Tclass.KeyType.Key) Tagclass.KeyType.Key))
(assert (forall ((bx@@133 T@U) ) (!  (=> (and (= (type bx@@133) BoxType) ($IsBox bx@@133 Tclass.KeyType.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@133)) bx@@133) ($Is ($Unbox (SeqType BoxType) bx@@133) Tclass.KeyType.Key))) :qid |unknown.0:0| :skolemid |1828| :pattern ( ($IsBox bx@@133 Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@86| T@U) ) (!  (=> (= (type |s#0@@86|) (SeqType BoxType)) (and (=> ($Is |s#0@@86| Tclass.KeyType.Key) (and ($Is |s#0@@86| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@86|) (LitInt 1024)))) (=> (and ($Is |s#0@@86| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@86|) (LitInt 1024))) ($Is |s#0@@86| Tclass.KeyType.Key)))) :qid |unknown.0:0| :skolemid |1829| :pattern ( ($Is |s#0@@86| Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@87| T@U) ($h@@69 T@U) ) (!  (=> (and (= (type |s#0@@87|) (SeqType BoxType)) (= (type $h@@69) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |s#0@@87| Tclass.KeyType.Key $h@@69) ($IsAlloc |s#0@@87| (TSeq Tclass.NativeTypes.byte) $h@@69)) (=> ($IsAlloc |s#0@@87| (TSeq Tclass.NativeTypes.byte) $h@@69) ($IsAlloc |s#0@@87| Tclass.KeyType.Key $h@@69)))) :qid |unknown.0:0| :skolemid |1830| :pattern ( ($IsAlloc |s#0@@87| Tclass.KeyType.Key $h@@69)) )))
(assert (= (type Tclass.KeyType.__default) TyType))
(assert (= (Tag Tclass.KeyType.__default) Tagclass.KeyType.__default))
(assert (forall ((bx@@134 T@U) ) (!  (=> (and (= (type bx@@134) BoxType) ($IsBox bx@@134 Tclass.KeyType.__default)) (and (= ($Box ($Unbox refType bx@@134)) bx@@134) ($Is ($Unbox refType bx@@134) Tclass.KeyType.__default))) :qid |unknown.0:0| :skolemid |1831| :pattern ( ($IsBox bx@@134 Tclass.KeyType.__default)) )))
(assert (forall (($o@@15 T@U) ) (!  (=> (= (type $o@@15) refType) (and (=> ($Is $o@@15 Tclass.KeyType.__default) (or (= $o@@15 null) (= (dtype $o@@15) Tclass.KeyType.__default))) (=> (or (= $o@@15 null) (= (dtype $o@@15) Tclass.KeyType.__default)) ($Is $o@@15 Tclass.KeyType.__default)))) :qid |unknown.0:0| :skolemid |1832| :pattern ( ($Is $o@@15 Tclass.KeyType.__default)) )))
(assert (forall (($o@@16 T@U) ($h@@70 T@U) ) (!  (=> (and (= (type $o@@16) refType) (= (type $h@@70) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@16 Tclass.KeyType.__default $h@@70) (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@70 $o@@16) alloc)))) (=> (or (= $o@@16 null) (U_2_bool (MapType1Select (MapType0Select $h@@70 $o@@16) alloc))) ($IsAlloc $o@@16 Tclass.KeyType.__default $h@@70)))) :qid |unknown.0:0| :skolemid |1833| :pattern ( ($IsAlloc $o@@16 Tclass.KeyType.__default $h@@70)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) KeyType.__default.MaxLen) (< KeyType.__default.MaxLen 18446744073709551616)))))
(assert  (=> |KeyType.__default.MaxLen#requires| true))
(assert  (=> true |KeyType.__default.MaxLen#requires|))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert (forall ((arg0@@356 T@U) ) (! (= (type (|#UI.RangeStart.SInclusive| arg0@@356)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SInclusive| :pattern ( (|#UI.RangeStart.SInclusive| arg0@@356)) )))
(assert (forall ((|a#0#0#0@@0| T@U) ) (!  (=> (= (type |a#0#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SInclusive| |a#0#0#0@@0|)) |##UI.RangeStart.SInclusive|)) :qid |UIsdfy.10:36| :skolemid |1834| :pattern ( (|#UI.RangeStart.SInclusive| |a#0#0#0@@0|)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (= (type d@@54) DatatypeTypeType) (and (=> (UI.RangeStart.SInclusive_q d@@54) (= (DatatypeCtorId d@@54) |##UI.RangeStart.SInclusive|)) (=> (= (DatatypeCtorId d@@54) |##UI.RangeStart.SInclusive|) (UI.RangeStart.SInclusive_q d@@54)))) :qid |unknown.0:0| :skolemid |1835| :pattern ( (UI.RangeStart.SInclusive_q d@@54)) )))
(assert (forall ((d@@55 T@U) ) (!  (=> (and (= (type d@@55) DatatypeTypeType) (UI.RangeStart.SInclusive_q d@@55)) (exists ((|a#1#0#0@@0| T@U) ) (!  (and (= (type |a#1#0#0@@0|) (SeqType BoxType)) (= d@@55 (|#UI.RangeStart.SInclusive| |a#1#0#0@@0|))) :qid |UIsdfy.10:36| :skolemid |1836| :no-pattern (type |a#1#0#0@@0|) :no-pattern (U_2_int |a#1#0#0@@0|) :no-pattern (U_2_bool |a#1#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1837| :pattern ( (UI.RangeStart.SInclusive_q d@@55)) )))
(assert (= (type Tclass.UI.RangeStart) TyType))
(assert (= (Tag Tclass.UI.RangeStart) Tagclass.UI.RangeStart))
(assert (forall ((bx@@135 T@U) ) (!  (=> (and (= (type bx@@135) BoxType) ($IsBox bx@@135 Tclass.UI.RangeStart)) (and (= ($Box ($Unbox DatatypeTypeType bx@@135)) bx@@135) ($Is ($Unbox DatatypeTypeType bx@@135) Tclass.UI.RangeStart))) :qid |unknown.0:0| :skolemid |1838| :pattern ( ($IsBox bx@@135 Tclass.UI.RangeStart)) )))
(assert (forall ((|a#2#0#0@@0| T@U) ) (!  (=> (= (type |a#2#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeStart.SInclusive| |a#2#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#2#0#0@@0| Tclass.KeyType.Key)) (=> ($Is |a#2#0#0@@0| Tclass.KeyType.Key) ($Is (|#UI.RangeStart.SInclusive| |a#2#0#0@@0|) Tclass.UI.RangeStart)))) :qid |UIsdfy.10:36| :skolemid |1839| :pattern ( ($Is (|#UI.RangeStart.SInclusive| |a#2#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#3#0#0@@0| T@U) ($h@@71 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@0|) (SeqType BoxType)) (= (type $h@@71) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@71)) (and (=> ($IsAlloc (|#UI.RangeStart.SInclusive| |a#3#0#0@@0|) Tclass.UI.RangeStart $h@@71) ($IsAlloc |a#3#0#0@@0| Tclass.KeyType.Key $h@@71)) (=> ($IsAlloc |a#3#0#0@@0| Tclass.KeyType.Key $h@@71) ($IsAlloc (|#UI.RangeStart.SInclusive| |a#3#0#0@@0|) Tclass.UI.RangeStart $h@@71)))) :qid |UIsdfy.10:36| :skolemid |1840| :pattern ( ($IsAlloc (|#UI.RangeStart.SInclusive| |a#3#0#0@@0|) Tclass.UI.RangeStart $h@@71)) )))
(assert (forall ((arg0@@357 T@U) ) (! (= (type (UI.RangeStart.key arg0@@357)) (SeqType BoxType)) :qid |funType:UI.RangeStart.key| :pattern ( (UI.RangeStart.key arg0@@357)) )))
(assert (forall ((d@@56 T@U) ($h@@72 T@U) ) (!  (=> (and (and (= (type d@@56) DatatypeTypeType) (= (type $h@@72) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@72) (and (UI.RangeStart.SInclusive_q d@@56) ($IsAlloc d@@56 Tclass.UI.RangeStart $h@@72)))) ($IsAlloc (UI.RangeStart.key d@@56) Tclass.KeyType.Key $h@@72)) :qid |unknown.0:0| :skolemid |1841| :pattern ( ($IsAlloc (UI.RangeStart.key d@@56) Tclass.KeyType.Key $h@@72)) )))
(assert (forall ((|a#4#0#0@@0| T@U) ) (!  (=> (= (type |a#4#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SInclusive| (Lit |a#4#0#0@@0|)) (Lit (|#UI.RangeStart.SInclusive| |a#4#0#0@@0|)))) :qid |UIsdfy.10:36| :skolemid |1842| :pattern ( (|#UI.RangeStart.SInclusive| (Lit |a#4#0#0@@0|))) )))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SInclusive| |a#5#0#0@@0|)) |a#5#0#0@@0|)) :qid |UIsdfy.10:36| :skolemid |1843| :pattern ( (|#UI.RangeStart.SInclusive| |a#5#0#0@@0|)) )))
(assert (forall ((arg0@@358 T@U) ) (! (= (type (|#UI.RangeStart.SExclusive| arg0@@358)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SExclusive| :pattern ( (|#UI.RangeStart.SExclusive| arg0@@358)) )))
(assert (forall ((|a#6#0#0@@0| T@U) ) (!  (=> (= (type |a#6#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SExclusive| |a#6#0#0@@0|)) |##UI.RangeStart.SExclusive|)) :qid |UIsdfy.10:59| :skolemid |1844| :pattern ( (|#UI.RangeStart.SExclusive| |a#6#0#0@@0|)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (= (type d@@57) DatatypeTypeType) (and (=> (UI.RangeStart.SExclusive_q d@@57) (= (DatatypeCtorId d@@57) |##UI.RangeStart.SExclusive|)) (=> (= (DatatypeCtorId d@@57) |##UI.RangeStart.SExclusive|) (UI.RangeStart.SExclusive_q d@@57)))) :qid |unknown.0:0| :skolemid |1845| :pattern ( (UI.RangeStart.SExclusive_q d@@57)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (and (= (type d@@58) DatatypeTypeType) (UI.RangeStart.SExclusive_q d@@58)) (exists ((|a#7#0#0@@0| T@U) ) (!  (and (= (type |a#7#0#0@@0|) (SeqType BoxType)) (= d@@58 (|#UI.RangeStart.SExclusive| |a#7#0#0@@0|))) :qid |UIsdfy.10:59| :skolemid |1846| :no-pattern (type |a#7#0#0@@0|) :no-pattern (U_2_int |a#7#0#0@@0|) :no-pattern (U_2_bool |a#7#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1847| :pattern ( (UI.RangeStart.SExclusive_q d@@58)) )))
(assert (forall ((|a#8#0#0@@0| T@U) ) (!  (=> (= (type |a#8#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeStart.SExclusive| |a#8#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#8#0#0@@0| Tclass.KeyType.Key)) (=> ($Is |a#8#0#0@@0| Tclass.KeyType.Key) ($Is (|#UI.RangeStart.SExclusive| |a#8#0#0@@0|) Tclass.UI.RangeStart)))) :qid |UIsdfy.10:59| :skolemid |1848| :pattern ( ($Is (|#UI.RangeStart.SExclusive| |a#8#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#9#0#0| T@U) ($h@@73 T@U) ) (!  (=> (and (and (= (type |a#9#0#0|) (SeqType BoxType)) (= (type $h@@73) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@73)) (and (=> ($IsAlloc (|#UI.RangeStart.SExclusive| |a#9#0#0|) Tclass.UI.RangeStart $h@@73) ($IsAlloc |a#9#0#0| Tclass.KeyType.Key $h@@73)) (=> ($IsAlloc |a#9#0#0| Tclass.KeyType.Key $h@@73) ($IsAlloc (|#UI.RangeStart.SExclusive| |a#9#0#0|) Tclass.UI.RangeStart $h@@73)))) :qid |UIsdfy.10:59| :skolemid |1849| :pattern ( ($IsAlloc (|#UI.RangeStart.SExclusive| |a#9#0#0|) Tclass.UI.RangeStart $h@@73)) )))
(assert (forall ((d@@59 T@U) ($h@@74 T@U) ) (!  (=> (and (and (= (type d@@59) DatatypeTypeType) (= (type $h@@74) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@74) (and (UI.RangeStart.SExclusive_q d@@59) ($IsAlloc d@@59 Tclass.UI.RangeStart $h@@74)))) ($IsAlloc (UI.RangeStart.key d@@59) Tclass.KeyType.Key $h@@74)) :qid |unknown.0:0| :skolemid |1850| :pattern ( ($IsAlloc (UI.RangeStart.key d@@59) Tclass.KeyType.Key $h@@74)) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) (SeqType BoxType)) (= (|#UI.RangeStart.SExclusive| (Lit |a#10#0#0|)) (Lit (|#UI.RangeStart.SExclusive| |a#10#0#0|)))) :qid |UIsdfy.10:59| :skolemid |1851| :pattern ( (|#UI.RangeStart.SExclusive| (Lit |a#10#0#0|))) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SExclusive| |a#11#0#0|)) |a#11#0#0|)) :qid |UIsdfy.10:59| :skolemid |1852| :pattern ( (|#UI.RangeStart.SExclusive| |a#11#0#0|)) )))
(assert (= (type |#UI.RangeStart.NegativeInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeStart.NegativeInf|) |##UI.RangeStart.NegativeInf|))
(assert (forall ((d@@60 T@U) ) (!  (=> (= (type d@@60) DatatypeTypeType) (and (=> (UI.RangeStart.NegativeInf_q d@@60) (= (DatatypeCtorId d@@60) |##UI.RangeStart.NegativeInf|)) (=> (= (DatatypeCtorId d@@60) |##UI.RangeStart.NegativeInf|) (UI.RangeStart.NegativeInf_q d@@60)))) :qid |unknown.0:0| :skolemid |1853| :pattern ( (UI.RangeStart.NegativeInf_q d@@60)) )))
(assert (forall ((d@@61 T@U) ) (!  (=> (and (= (type d@@61) DatatypeTypeType) (UI.RangeStart.NegativeInf_q d@@61)) (= d@@61 |#UI.RangeStart.NegativeInf|)) :qid |unknown.0:0| :skolemid |1854| :pattern ( (UI.RangeStart.NegativeInf_q d@@61)) )))
(assert ($Is |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart))
(assert (forall (($h@@75 T@U) ) (!  (=> (and (= (type $h@@75) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@75)) ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@75)) :qid |DafnyPre.521:12| :skolemid |1855| :pattern ( ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@75)) )))
(assert (= |#UI.RangeStart.NegativeInf| (Lit |#UI.RangeStart.NegativeInf|)))
(assert (forall ((d@@62 T@U) ) (!  (=> (and (= (type d@@62) DatatypeTypeType) (|$IsA#UI.RangeStart| d@@62)) (or (or (UI.RangeStart.SInclusive_q d@@62) (UI.RangeStart.SExclusive_q d@@62)) (UI.RangeStart.NegativeInf_q d@@62))) :qid |unknown.0:0| :skolemid |1856| :pattern ( (|$IsA#UI.RangeStart| d@@62)) )))
(assert (forall ((d@@63 T@U) ) (!  (=> (and (= (type d@@63) DatatypeTypeType) ($Is d@@63 Tclass.UI.RangeStart)) (or (or (UI.RangeStart.SInclusive_q d@@63) (UI.RangeStart.SExclusive_q d@@63)) (UI.RangeStart.NegativeInf_q d@@63))) :qid |unknown.0:0| :skolemid |1857| :pattern ( (UI.RangeStart.NegativeInf_q d@@63) ($Is d@@63 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SExclusive_q d@@63) ($Is d@@63 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SInclusive_q d@@63) ($Is d@@63 Tclass.UI.RangeStart)) )))
(assert (forall ((a@@149 T@U) (b@@80 T@U) ) (!  (=> (and (and (= (type a@@149) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (and (UI.RangeStart.SInclusive_q a@@149) (UI.RangeStart.SInclusive_q b@@80))) (and (=> (|UI.RangeStart#Equal| a@@149 b@@80) (|Seq#Equal| (UI.RangeStart.key a@@149) (UI.RangeStart.key b@@80))) (=> (|Seq#Equal| (UI.RangeStart.key a@@149) (UI.RangeStart.key b@@80)) (|UI.RangeStart#Equal| a@@149 b@@80)))) :qid |unknown.0:0| :skolemid |1858| :pattern ( (|UI.RangeStart#Equal| a@@149 b@@80) (UI.RangeStart.SInclusive_q a@@149)) :pattern ( (|UI.RangeStart#Equal| a@@149 b@@80) (UI.RangeStart.SInclusive_q b@@80)) )))
(assert (forall ((a@@150 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@150) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (and (UI.RangeStart.SExclusive_q a@@150) (UI.RangeStart.SExclusive_q b@@81))) (and (=> (|UI.RangeStart#Equal| a@@150 b@@81) (|Seq#Equal| (UI.RangeStart.key a@@150) (UI.RangeStart.key b@@81))) (=> (|Seq#Equal| (UI.RangeStart.key a@@150) (UI.RangeStart.key b@@81)) (|UI.RangeStart#Equal| a@@150 b@@81)))) :qid |unknown.0:0| :skolemid |1859| :pattern ( (|UI.RangeStart#Equal| a@@150 b@@81) (UI.RangeStart.SExclusive_q a@@150)) :pattern ( (|UI.RangeStart#Equal| a@@150 b@@81) (UI.RangeStart.SExclusive_q b@@81)) )))
(assert (forall ((a@@151 T@U) (b@@82 T@U) ) (!  (=> (and (and (= (type a@@151) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (UI.RangeStart.NegativeInf_q a@@151) (UI.RangeStart.NegativeInf_q b@@82))) (and (=> (|UI.RangeStart#Equal| a@@151 b@@82) true) (=> true (|UI.RangeStart#Equal| a@@151 b@@82)))) :qid |unknown.0:0| :skolemid |1860| :pattern ( (|UI.RangeStart#Equal| a@@151 b@@82) (UI.RangeStart.NegativeInf_q a@@151)) :pattern ( (|UI.RangeStart#Equal| a@@151 b@@82) (UI.RangeStart.NegativeInf_q b@@82)) )))
(assert (forall ((a@@152 T@U) (b@@83 T@U) ) (!  (=> (and (= (type a@@152) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) (and (=> (|UI.RangeStart#Equal| a@@152 b@@83) (= a@@152 b@@83)) (=> (= a@@152 b@@83) (|UI.RangeStart#Equal| a@@152 b@@83)))) :qid |unknown.0:0| :skolemid |1861| :pattern ( (|UI.RangeStart#Equal| a@@152 b@@83)) )))
(assert (forall ((arg0@@359 T@U) ) (! (= (type (|#UI.RangeEnd.EInclusive| arg0@@359)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EInclusive| :pattern ( (|#UI.RangeEnd.EInclusive| arg0@@359)) )))
(assert (forall ((|a#17#0#0@@0| T@U) ) (!  (=> (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EInclusive| |a#17#0#0@@0|)) |##UI.RangeEnd.EInclusive|)) :qid |UIsdfy.11:34| :skolemid |1862| :pattern ( (|#UI.RangeEnd.EInclusive| |a#17#0#0@@0|)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (= (type d@@64) DatatypeTypeType) (and (=> (UI.RangeEnd.EInclusive_q d@@64) (= (DatatypeCtorId d@@64) |##UI.RangeEnd.EInclusive|)) (=> (= (DatatypeCtorId d@@64) |##UI.RangeEnd.EInclusive|) (UI.RangeEnd.EInclusive_q d@@64)))) :qid |unknown.0:0| :skolemid |1863| :pattern ( (UI.RangeEnd.EInclusive_q d@@64)) )))
(assert (forall ((d@@65 T@U) ) (!  (=> (and (= (type d@@65) DatatypeTypeType) (UI.RangeEnd.EInclusive_q d@@65)) (exists ((|a#18#0#0@@0| T@U) ) (!  (and (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= d@@65 (|#UI.RangeEnd.EInclusive| |a#18#0#0@@0|))) :qid |UIsdfy.11:34| :skolemid |1864| :no-pattern (type |a#18#0#0@@0|) :no-pattern (U_2_int |a#18#0#0@@0|) :no-pattern (U_2_bool |a#18#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1865| :pattern ( (UI.RangeEnd.EInclusive_q d@@65)) )))
(assert (= (type Tclass.UI.RangeEnd) TyType))
(assert (= (Tag Tclass.UI.RangeEnd) Tagclass.UI.RangeEnd))
(assert (forall ((bx@@136 T@U) ) (!  (=> (and (= (type bx@@136) BoxType) ($IsBox bx@@136 Tclass.UI.RangeEnd)) (and (= ($Box ($Unbox DatatypeTypeType bx@@136)) bx@@136) ($Is ($Unbox DatatypeTypeType bx@@136) Tclass.UI.RangeEnd))) :qid |unknown.0:0| :skolemid |1866| :pattern ( ($IsBox bx@@136 Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#19#0#0@@0| T@U) ) (!  (=> (= (type |a#19#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeEnd.EInclusive| |a#19#0#0@@0|) Tclass.UI.RangeEnd) ($Is |a#19#0#0@@0| Tclass.KeyType.Key)) (=> ($Is |a#19#0#0@@0| Tclass.KeyType.Key) ($Is (|#UI.RangeEnd.EInclusive| |a#19#0#0@@0|) Tclass.UI.RangeEnd)))) :qid |UIsdfy.11:34| :skolemid |1867| :pattern ( ($Is (|#UI.RangeEnd.EInclusive| |a#19#0#0@@0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#20#0#0@@0| T@U) ($h@@76 T@U) ) (!  (=> (and (and (= (type |a#20#0#0@@0|) (SeqType BoxType)) (= (type $h@@76) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@76)) (and (=> ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#20#0#0@@0|) Tclass.UI.RangeEnd $h@@76) ($IsAlloc |a#20#0#0@@0| Tclass.KeyType.Key $h@@76)) (=> ($IsAlloc |a#20#0#0@@0| Tclass.KeyType.Key $h@@76) ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#20#0#0@@0|) Tclass.UI.RangeEnd $h@@76)))) :qid |UIsdfy.11:34| :skolemid |1868| :pattern ( ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#20#0#0@@0|) Tclass.UI.RangeEnd $h@@76)) )))
(assert (forall ((arg0@@360 T@U) ) (! (= (type (UI.RangeEnd.key arg0@@360)) (SeqType BoxType)) :qid |funType:UI.RangeEnd.key| :pattern ( (UI.RangeEnd.key arg0@@360)) )))
(assert (forall ((d@@66 T@U) ($h@@77 T@U) ) (!  (=> (and (and (= (type d@@66) DatatypeTypeType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@77) (and (UI.RangeEnd.EInclusive_q d@@66) ($IsAlloc d@@66 Tclass.UI.RangeEnd $h@@77)))) ($IsAlloc (UI.RangeEnd.key d@@66) Tclass.KeyType.Key $h@@77)) :qid |unknown.0:0| :skolemid |1869| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@66) Tclass.KeyType.Key $h@@77)) )))
(assert (forall ((|a#21#0#0@@0| T@U) ) (!  (=> (= (type |a#21#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EInclusive| (Lit |a#21#0#0@@0|)) (Lit (|#UI.RangeEnd.EInclusive| |a#21#0#0@@0|)))) :qid |UIsdfy.11:34| :skolemid |1870| :pattern ( (|#UI.RangeEnd.EInclusive| (Lit |a#21#0#0@@0|))) )))
(assert (forall ((|a#22#0#0@@0| T@U) ) (!  (=> (= (type |a#22#0#0@@0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EInclusive| |a#22#0#0@@0|)) |a#22#0#0@@0|)) :qid |UIsdfy.11:34| :skolemid |1871| :pattern ( (|#UI.RangeEnd.EInclusive| |a#22#0#0@@0|)) )))
(assert (forall ((arg0@@361 T@U) ) (! (= (type (|#UI.RangeEnd.EExclusive| arg0@@361)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EExclusive| :pattern ( (|#UI.RangeEnd.EExclusive| arg0@@361)) )))
(assert (forall ((|a#23#0#0@@0| T@U) ) (!  (=> (= (type |a#23#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EExclusive| |a#23#0#0@@0|)) |##UI.RangeEnd.EExclusive|)) :qid |UIsdfy.11:57| :skolemid |1872| :pattern ( (|#UI.RangeEnd.EExclusive| |a#23#0#0@@0|)) )))
(assert (forall ((d@@67 T@U) ) (!  (=> (= (type d@@67) DatatypeTypeType) (and (=> (UI.RangeEnd.EExclusive_q d@@67) (= (DatatypeCtorId d@@67) |##UI.RangeEnd.EExclusive|)) (=> (= (DatatypeCtorId d@@67) |##UI.RangeEnd.EExclusive|) (UI.RangeEnd.EExclusive_q d@@67)))) :qid |unknown.0:0| :skolemid |1873| :pattern ( (UI.RangeEnd.EExclusive_q d@@67)) )))
(assert (forall ((d@@68 T@U) ) (!  (=> (and (= (type d@@68) DatatypeTypeType) (UI.RangeEnd.EExclusive_q d@@68)) (exists ((|a#24#0#0@@0| T@U) ) (!  (and (= (type |a#24#0#0@@0|) (SeqType BoxType)) (= d@@68 (|#UI.RangeEnd.EExclusive| |a#24#0#0@@0|))) :qid |UIsdfy.11:57| :skolemid |1874| :no-pattern (type |a#24#0#0@@0|) :no-pattern (U_2_int |a#24#0#0@@0|) :no-pattern (U_2_bool |a#24#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1875| :pattern ( (UI.RangeEnd.EExclusive_q d@@68)) )))
(assert (forall ((|a#25#0#0@@0| T@U) ) (!  (=> (= (type |a#25#0#0@@0|) (SeqType BoxType)) (and (=> ($Is (|#UI.RangeEnd.EExclusive| |a#25#0#0@@0|) Tclass.UI.RangeEnd) ($Is |a#25#0#0@@0| Tclass.KeyType.Key)) (=> ($Is |a#25#0#0@@0| Tclass.KeyType.Key) ($Is (|#UI.RangeEnd.EExclusive| |a#25#0#0@@0|) Tclass.UI.RangeEnd)))) :qid |UIsdfy.11:57| :skolemid |1876| :pattern ( ($Is (|#UI.RangeEnd.EExclusive| |a#25#0#0@@0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#26#0#0@@0| T@U) ($h@@78 T@U) ) (!  (=> (and (and (= (type |a#26#0#0@@0|) (SeqType BoxType)) (= (type $h@@78) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@78)) (and (=> ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#26#0#0@@0|) Tclass.UI.RangeEnd $h@@78) ($IsAlloc |a#26#0#0@@0| Tclass.KeyType.Key $h@@78)) (=> ($IsAlloc |a#26#0#0@@0| Tclass.KeyType.Key $h@@78) ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#26#0#0@@0|) Tclass.UI.RangeEnd $h@@78)))) :qid |UIsdfy.11:57| :skolemid |1877| :pattern ( ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#26#0#0@@0|) Tclass.UI.RangeEnd $h@@78)) )))
(assert (forall ((d@@69 T@U) ($h@@79 T@U) ) (!  (=> (and (and (= (type d@@69) DatatypeTypeType) (= (type $h@@79) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@79) (and (UI.RangeEnd.EExclusive_q d@@69) ($IsAlloc d@@69 Tclass.UI.RangeEnd $h@@79)))) ($IsAlloc (UI.RangeEnd.key d@@69) Tclass.KeyType.Key $h@@79)) :qid |unknown.0:0| :skolemid |1878| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@69) Tclass.KeyType.Key $h@@79)) )))
(assert (forall ((|a#27#0#0@@0| T@U) ) (!  (=> (= (type |a#27#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EExclusive| (Lit |a#27#0#0@@0|)) (Lit (|#UI.RangeEnd.EExclusive| |a#27#0#0@@0|)))) :qid |UIsdfy.11:57| :skolemid |1879| :pattern ( (|#UI.RangeEnd.EExclusive| (Lit |a#27#0#0@@0|))) )))
(assert (forall ((|a#28#0#0@@0| T@U) ) (!  (=> (= (type |a#28#0#0@@0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EExclusive| |a#28#0#0@@0|)) |a#28#0#0@@0|)) :qid |UIsdfy.11:57| :skolemid |1880| :pattern ( (|#UI.RangeEnd.EExclusive| |a#28#0#0@@0|)) )))
(assert (= (type |#UI.RangeEnd.PositiveInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeEnd.PositiveInf|) |##UI.RangeEnd.PositiveInf|))
(assert (forall ((d@@70 T@U) ) (!  (=> (= (type d@@70) DatatypeTypeType) (and (=> (UI.RangeEnd.PositiveInf_q d@@70) (= (DatatypeCtorId d@@70) |##UI.RangeEnd.PositiveInf|)) (=> (= (DatatypeCtorId d@@70) |##UI.RangeEnd.PositiveInf|) (UI.RangeEnd.PositiveInf_q d@@70)))) :qid |unknown.0:0| :skolemid |1881| :pattern ( (UI.RangeEnd.PositiveInf_q d@@70)) )))
(assert (forall ((d@@71 T@U) ) (!  (=> (and (= (type d@@71) DatatypeTypeType) (UI.RangeEnd.PositiveInf_q d@@71)) (= d@@71 |#UI.RangeEnd.PositiveInf|)) :qid |unknown.0:0| :skolemid |1882| :pattern ( (UI.RangeEnd.PositiveInf_q d@@71)) )))
(assert ($Is |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd))
(assert (forall (($h@@80 T@U) ) (!  (=> (and (= (type $h@@80) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@80)) ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@80)) :qid |DafnyPre.521:12| :skolemid |1883| :pattern ( ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@80)) )))
(assert (= |#UI.RangeEnd.PositiveInf| (Lit |#UI.RangeEnd.PositiveInf|)))
(assert (forall ((d@@72 T@U) ) (!  (=> (and (= (type d@@72) DatatypeTypeType) (|$IsA#UI.RangeEnd| d@@72)) (or (or (UI.RangeEnd.EInclusive_q d@@72) (UI.RangeEnd.EExclusive_q d@@72)) (UI.RangeEnd.PositiveInf_q d@@72))) :qid |unknown.0:0| :skolemid |1884| :pattern ( (|$IsA#UI.RangeEnd| d@@72)) )))
(assert (forall ((d@@73 T@U) ) (!  (=> (and (= (type d@@73) DatatypeTypeType) ($Is d@@73 Tclass.UI.RangeEnd)) (or (or (UI.RangeEnd.EInclusive_q d@@73) (UI.RangeEnd.EExclusive_q d@@73)) (UI.RangeEnd.PositiveInf_q d@@73))) :qid |unknown.0:0| :skolemid |1885| :pattern ( (UI.RangeEnd.PositiveInf_q d@@73) ($Is d@@73 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EExclusive_q d@@73) ($Is d@@73 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EInclusive_q d@@73) ($Is d@@73 Tclass.UI.RangeEnd)) )))
(assert (forall ((a@@153 T@U) (b@@84 T@U) ) (!  (=> (and (and (= (type a@@153) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (and (UI.RangeEnd.EInclusive_q a@@153) (UI.RangeEnd.EInclusive_q b@@84))) (and (=> (|UI.RangeEnd#Equal| a@@153 b@@84) (|Seq#Equal| (UI.RangeEnd.key a@@153) (UI.RangeEnd.key b@@84))) (=> (|Seq#Equal| (UI.RangeEnd.key a@@153) (UI.RangeEnd.key b@@84)) (|UI.RangeEnd#Equal| a@@153 b@@84)))) :qid |unknown.0:0| :skolemid |1886| :pattern ( (|UI.RangeEnd#Equal| a@@153 b@@84) (UI.RangeEnd.EInclusive_q a@@153)) :pattern ( (|UI.RangeEnd#Equal| a@@153 b@@84) (UI.RangeEnd.EInclusive_q b@@84)) )))
(assert (forall ((a@@154 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@154) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (and (UI.RangeEnd.EExclusive_q a@@154) (UI.RangeEnd.EExclusive_q b@@85))) (and (=> (|UI.RangeEnd#Equal| a@@154 b@@85) (|Seq#Equal| (UI.RangeEnd.key a@@154) (UI.RangeEnd.key b@@85))) (=> (|Seq#Equal| (UI.RangeEnd.key a@@154) (UI.RangeEnd.key b@@85)) (|UI.RangeEnd#Equal| a@@154 b@@85)))) :qid |unknown.0:0| :skolemid |1887| :pattern ( (|UI.RangeEnd#Equal| a@@154 b@@85) (UI.RangeEnd.EExclusive_q a@@154)) :pattern ( (|UI.RangeEnd#Equal| a@@154 b@@85) (UI.RangeEnd.EExclusive_q b@@85)) )))
(assert (forall ((a@@155 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@155) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (UI.RangeEnd.PositiveInf_q a@@155) (UI.RangeEnd.PositiveInf_q b@@86))) (and (=> (|UI.RangeEnd#Equal| a@@155 b@@86) true) (=> true (|UI.RangeEnd#Equal| a@@155 b@@86)))) :qid |unknown.0:0| :skolemid |1888| :pattern ( (|UI.RangeEnd#Equal| a@@155 b@@86) (UI.RangeEnd.PositiveInf_q a@@155)) :pattern ( (|UI.RangeEnd#Equal| a@@155 b@@86) (UI.RangeEnd.PositiveInf_q b@@86)) )))
(assert (forall ((a@@156 T@U) (b@@87 T@U) ) (!  (=> (and (= (type a@@156) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (=> (|UI.RangeEnd#Equal| a@@156 b@@87) (= a@@156 b@@87)) (=> (= a@@156 b@@87) (|UI.RangeEnd#Equal| a@@156 b@@87)))) :qid |unknown.0:0| :skolemid |1889| :pattern ( (|UI.RangeEnd#Equal| a@@156 b@@87)) )))
(assert (forall ((arg0@@362 T@U) (arg1@@160 T@U) ) (! (= (type (|#UI.SuccResult.SuccResult| arg0@@362 arg1@@160)) DatatypeTypeType) :qid |funType:#UI.SuccResult.SuccResult| :pattern ( (|#UI.SuccResult.SuccResult| arg0@@362 arg1@@160)) )))
(assert (forall ((|a#34#0#0@@0| T@U) (|a#34#1#0@@0| T@U) ) (!  (=> (and (= (type |a#34#0#0@@0|) (SeqType BoxType)) (= (type |a#34#1#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.SuccResult.SuccResult| |a#34#0#0@@0| |a#34#1#0@@0|)) |##UI.SuccResult.SuccResult|)) :qid |UIsdfy.13:36| :skolemid |1890| :pattern ( (|#UI.SuccResult.SuccResult| |a#34#0#0@@0| |a#34#1#0@@0|)) )))
(assert (forall ((d@@74 T@U) ) (!  (=> (= (type d@@74) DatatypeTypeType) (and (=> (UI.SuccResult.SuccResult_q d@@74) (= (DatatypeCtorId d@@74) |##UI.SuccResult.SuccResult|)) (=> (= (DatatypeCtorId d@@74) |##UI.SuccResult.SuccResult|) (UI.SuccResult.SuccResult_q d@@74)))) :qid |unknown.0:0| :skolemid |1891| :pattern ( (UI.SuccResult.SuccResult_q d@@74)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (and (= (type d@@75) DatatypeTypeType) (UI.SuccResult.SuccResult_q d@@75)) (exists ((|a#35#0#0@@0| T@U) (|a#35#1#0@@0| T@U) ) (!  (and (and (= (type |a#35#0#0@@0|) (SeqType BoxType)) (= (type |a#35#1#0@@0|) (SeqType BoxType))) (= d@@75 (|#UI.SuccResult.SuccResult| |a#35#0#0@@0| |a#35#1#0@@0|))) :qid |UIsdfy.13:36| :skolemid |1892| :no-pattern (type |a#35#0#0@@0|) :no-pattern (type |a#35#1#0@@0|) :no-pattern (U_2_int |a#35#0#0@@0|) :no-pattern (U_2_bool |a#35#0#0@@0|) :no-pattern (U_2_int |a#35#1#0@@0|) :no-pattern (U_2_bool |a#35#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |1893| :pattern ( (UI.SuccResult.SuccResult_q d@@75)) )))
(assert (= (type Tclass.UI.SuccResult) TyType))
(assert (= (Tag Tclass.UI.SuccResult) Tagclass.UI.SuccResult))
(assert (forall ((bx@@137 T@U) ) (!  (=> (and (= (type bx@@137) BoxType) ($IsBox bx@@137 Tclass.UI.SuccResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@137)) bx@@137) ($Is ($Unbox DatatypeTypeType bx@@137) Tclass.UI.SuccResult))) :qid |unknown.0:0| :skolemid |1894| :pattern ( ($IsBox bx@@137 Tclass.UI.SuccResult)) )))
(assert (forall ((|a#36#0#0@@0| T@U) (|a#36#1#0@@0| T@U) ) (!  (=> (and (= (type |a#36#0#0@@0|) (SeqType BoxType)) (= (type |a#36#1#0@@0|) (SeqType BoxType))) (and (=> ($Is (|#UI.SuccResult.SuccResult| |a#36#0#0@@0| |a#36#1#0@@0|) Tclass.UI.SuccResult) (and ($Is |a#36#0#0@@0| Tclass.KeyType.Key) ($Is |a#36#1#0@@0| Tclass.ValueType.Value))) (=> (and ($Is |a#36#0#0@@0| Tclass.KeyType.Key) ($Is |a#36#1#0@@0| Tclass.ValueType.Value)) ($Is (|#UI.SuccResult.SuccResult| |a#36#0#0@@0| |a#36#1#0@@0|) Tclass.UI.SuccResult)))) :qid |UIsdfy.13:36| :skolemid |1895| :pattern ( ($Is (|#UI.SuccResult.SuccResult| |a#36#0#0@@0| |a#36#1#0@@0|) Tclass.UI.SuccResult)) )))
(assert (forall ((|a#37#0#0@@0| T@U) (|a#37#1#0@@0| T@U) ($h@@81 T@U) ) (!  (=> (and (and (and (= (type |a#37#0#0@@0|) (SeqType BoxType)) (= (type |a#37#1#0@@0|) (SeqType BoxType))) (= (type $h@@81) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@81)) (and (=> ($IsAlloc (|#UI.SuccResult.SuccResult| |a#37#0#0@@0| |a#37#1#0@@0|) Tclass.UI.SuccResult $h@@81) (and ($IsAlloc |a#37#0#0@@0| Tclass.KeyType.Key $h@@81) ($IsAlloc |a#37#1#0@@0| Tclass.ValueType.Value $h@@81))) (=> (and ($IsAlloc |a#37#0#0@@0| Tclass.KeyType.Key $h@@81) ($IsAlloc |a#37#1#0@@0| Tclass.ValueType.Value $h@@81)) ($IsAlloc (|#UI.SuccResult.SuccResult| |a#37#0#0@@0| |a#37#1#0@@0|) Tclass.UI.SuccResult $h@@81)))) :qid |UIsdfy.13:36| :skolemid |1896| :pattern ( ($IsAlloc (|#UI.SuccResult.SuccResult| |a#37#0#0@@0| |a#37#1#0@@0|) Tclass.UI.SuccResult $h@@81)) )))
(assert (forall ((arg0@@363 T@U) ) (! (= (type (UI.SuccResult.key arg0@@363)) (SeqType BoxType)) :qid |funType:UI.SuccResult.key| :pattern ( (UI.SuccResult.key arg0@@363)) )))
(assert (forall ((d@@76 T@U) ($h@@82 T@U) ) (!  (=> (and (and (= (type d@@76) DatatypeTypeType) (= (type $h@@82) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@82) (and (UI.SuccResult.SuccResult_q d@@76) ($IsAlloc d@@76 Tclass.UI.SuccResult $h@@82)))) ($IsAlloc (UI.SuccResult.key d@@76) Tclass.KeyType.Key $h@@82)) :qid |unknown.0:0| :skolemid |1897| :pattern ( ($IsAlloc (UI.SuccResult.key d@@76) Tclass.KeyType.Key $h@@82)) )))
(assert (forall ((arg0@@364 T@U) ) (! (= (type (UI.SuccResult.value arg0@@364)) (SeqType BoxType)) :qid |funType:UI.SuccResult.value| :pattern ( (UI.SuccResult.value arg0@@364)) )))
(assert (forall ((d@@77 T@U) ($h@@83 T@U) ) (!  (=> (and (and (= (type d@@77) DatatypeTypeType) (= (type $h@@83) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@83) (and (UI.SuccResult.SuccResult_q d@@77) ($IsAlloc d@@77 Tclass.UI.SuccResult $h@@83)))) ($IsAlloc (UI.SuccResult.value d@@77) Tclass.ValueType.Value $h@@83)) :qid |unknown.0:0| :skolemid |1898| :pattern ( ($IsAlloc (UI.SuccResult.value d@@77) Tclass.ValueType.Value $h@@83)) )))
(assert (forall ((|a#38#0#0@@0| T@U) (|a#38#1#0@@0| T@U) ) (!  (=> (and (= (type |a#38#0#0@@0|) (SeqType BoxType)) (= (type |a#38#1#0@@0|) (SeqType BoxType))) (= (|#UI.SuccResult.SuccResult| (Lit |a#38#0#0@@0|) (Lit |a#38#1#0@@0|)) (Lit (|#UI.SuccResult.SuccResult| |a#38#0#0@@0| |a#38#1#0@@0|)))) :qid |UIsdfy.13:36| :skolemid |1899| :pattern ( (|#UI.SuccResult.SuccResult| (Lit |a#38#0#0@@0|) (Lit |a#38#1#0@@0|))) )))
(assert (forall ((|a#39#0#0@@0| T@U) (|a#39#1#0@@0| T@U) ) (!  (=> (and (= (type |a#39#0#0@@0|) (SeqType BoxType)) (= (type |a#39#1#0@@0|) (SeqType BoxType))) (= (UI.SuccResult.key (|#UI.SuccResult.SuccResult| |a#39#0#0@@0| |a#39#1#0@@0|)) |a#39#0#0@@0|)) :qid |UIsdfy.13:36| :skolemid |1900| :pattern ( (|#UI.SuccResult.SuccResult| |a#39#0#0@@0| |a#39#1#0@@0|)) )))
(assert (forall ((|a#40#0#0@@0| T@U) (|a#40#1#0@@0| T@U) ) (!  (=> (and (= (type |a#40#0#0@@0|) (SeqType BoxType)) (= (type |a#40#1#0@@0|) (SeqType BoxType))) (= (UI.SuccResult.value (|#UI.SuccResult.SuccResult| |a#40#0#0@@0| |a#40#1#0@@0|)) |a#40#1#0@@0|)) :qid |UIsdfy.13:36| :skolemid |1901| :pattern ( (|#UI.SuccResult.SuccResult| |a#40#0#0@@0| |a#40#1#0@@0|)) )))
(assert (forall ((d@@78 T@U) ) (!  (=> (and (= (type d@@78) DatatypeTypeType) (|$IsA#UI.SuccResult| d@@78)) (UI.SuccResult.SuccResult_q d@@78)) :qid |unknown.0:0| :skolemid |1902| :pattern ( (|$IsA#UI.SuccResult| d@@78)) )))
(assert (forall ((d@@79 T@U) ) (!  (=> (and (= (type d@@79) DatatypeTypeType) ($Is d@@79 Tclass.UI.SuccResult)) (UI.SuccResult.SuccResult_q d@@79)) :qid |unknown.0:0| :skolemid |1903| :pattern ( (UI.SuccResult.SuccResult_q d@@79) ($Is d@@79 Tclass.UI.SuccResult)) )))
(assert (forall ((a@@157 T@U) (b@@88 T@U) ) (!  (=> (and (and (= (type a@@157) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) true) (and (=> (|UI.SuccResult#Equal| a@@157 b@@88) (and (|Seq#Equal| (UI.SuccResult.key a@@157) (UI.SuccResult.key b@@88)) (|Seq#Equal| (UI.SuccResult.value a@@157) (UI.SuccResult.value b@@88)))) (=> (and (|Seq#Equal| (UI.SuccResult.key a@@157) (UI.SuccResult.key b@@88)) (|Seq#Equal| (UI.SuccResult.value a@@157) (UI.SuccResult.value b@@88))) (|UI.SuccResult#Equal| a@@157 b@@88)))) :qid |unknown.0:0| :skolemid |1904| :pattern ( (|UI.SuccResult#Equal| a@@157 b@@88)) )))
(assert (forall ((a@@158 T@U) (b@@89 T@U) ) (!  (=> (and (= (type a@@158) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) (and (=> (|UI.SuccResult#Equal| a@@158 b@@89) (= a@@158 b@@89)) (=> (= a@@158 b@@89) (|UI.SuccResult#Equal| a@@158 b@@89)))) :qid |unknown.0:0| :skolemid |1905| :pattern ( (|UI.SuccResult#Equal| a@@158 b@@89)) )))
(assert (forall ((arg0@@365 T@U) (arg1@@161 T@U) ) (! (= (type (|#UI.SuccResultList.SuccResultList| arg0@@365 arg1@@161)) DatatypeTypeType) :qid |funType:#UI.SuccResultList.SuccResultList| :pattern ( (|#UI.SuccResultList.SuccResultList| arg0@@365 arg1@@161)) )))
(assert (forall ((|a#41#0#0@@0| T@U) (|a#41#1#0@@0| T@U) ) (!  (=> (and (= (type |a#41#0#0@@0|) (SeqType BoxType)) (= (type |a#41#1#0@@0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.SuccResultList.SuccResultList| |a#41#0#0@@0| |a#41#1#0@@0|)) |##UI.SuccResultList.SuccResultList|)) :qid |UIsdfy.14:44| :skolemid |1906| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#41#0#0@@0| |a#41#1#0@@0|)) )))
(assert (forall ((d@@80 T@U) ) (!  (=> (= (type d@@80) DatatypeTypeType) (and (=> (UI.SuccResultList.SuccResultList_q d@@80) (= (DatatypeCtorId d@@80) |##UI.SuccResultList.SuccResultList|)) (=> (= (DatatypeCtorId d@@80) |##UI.SuccResultList.SuccResultList|) (UI.SuccResultList.SuccResultList_q d@@80)))) :qid |unknown.0:0| :skolemid |1907| :pattern ( (UI.SuccResultList.SuccResultList_q d@@80)) )))
(assert (forall ((d@@81 T@U) ) (!  (=> (and (= (type d@@81) DatatypeTypeType) (UI.SuccResultList.SuccResultList_q d@@81)) (exists ((|a#42#0#0@@0| T@U) (|a#42#1#0@@0| T@U) ) (!  (and (and (= (type |a#42#0#0@@0|) (SeqType BoxType)) (= (type |a#42#1#0@@0|) DatatypeTypeType)) (= d@@81 (|#UI.SuccResultList.SuccResultList| |a#42#0#0@@0| |a#42#1#0@@0|))) :qid |UIsdfy.14:44| :skolemid |1908| :no-pattern (type |a#42#0#0@@0|) :no-pattern (type |a#42#1#0@@0|) :no-pattern (U_2_int |a#42#0#0@@0|) :no-pattern (U_2_bool |a#42#0#0@@0|) :no-pattern (U_2_int |a#42#1#0@@0|) :no-pattern (U_2_bool |a#42#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |1909| :pattern ( (UI.SuccResultList.SuccResultList_q d@@81)) )))
(assert (= (type Tclass.UI.SuccResultList) TyType))
(assert (= (Tag Tclass.UI.SuccResultList) Tagclass.UI.SuccResultList))
(assert (forall ((bx@@138 T@U) ) (!  (=> (and (= (type bx@@138) BoxType) ($IsBox bx@@138 Tclass.UI.SuccResultList)) (and (= ($Box ($Unbox DatatypeTypeType bx@@138)) bx@@138) ($Is ($Unbox DatatypeTypeType bx@@138) Tclass.UI.SuccResultList))) :qid |unknown.0:0| :skolemid |1910| :pattern ( ($IsBox bx@@138 Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#43#0#0@@0| T@U) (|a#43#1#0@@0| T@U) ) (!  (=> (and (= (type |a#43#0#0@@0|) (SeqType BoxType)) (= (type |a#43#1#0@@0|) DatatypeTypeType)) (and (=> ($Is (|#UI.SuccResultList.SuccResultList| |a#43#0#0@@0| |a#43#1#0@@0|) Tclass.UI.SuccResultList) (and ($Is |a#43#0#0@@0| (TSeq Tclass.UI.SuccResult)) ($Is |a#43#1#0@@0| Tclass.UI.RangeEnd))) (=> (and ($Is |a#43#0#0@@0| (TSeq Tclass.UI.SuccResult)) ($Is |a#43#1#0@@0| Tclass.UI.RangeEnd)) ($Is (|#UI.SuccResultList.SuccResultList| |a#43#0#0@@0| |a#43#1#0@@0|) Tclass.UI.SuccResultList)))) :qid |UIsdfy.14:44| :skolemid |1911| :pattern ( ($Is (|#UI.SuccResultList.SuccResultList| |a#43#0#0@@0| |a#43#1#0@@0|) Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#44#0#0@@0| T@U) (|a#44#1#0@@0| T@U) ($h@@84 T@U) ) (!  (=> (and (and (and (= (type |a#44#0#0@@0|) (SeqType BoxType)) (= (type |a#44#1#0@@0|) DatatypeTypeType)) (= (type $h@@84) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@84)) (and (=> ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#44#0#0@@0| |a#44#1#0@@0|) Tclass.UI.SuccResultList $h@@84) (and ($IsAlloc |a#44#0#0@@0| (TSeq Tclass.UI.SuccResult) $h@@84) ($IsAlloc |a#44#1#0@@0| Tclass.UI.RangeEnd $h@@84))) (=> (and ($IsAlloc |a#44#0#0@@0| (TSeq Tclass.UI.SuccResult) $h@@84) ($IsAlloc |a#44#1#0@@0| Tclass.UI.RangeEnd $h@@84)) ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#44#0#0@@0| |a#44#1#0@@0|) Tclass.UI.SuccResultList $h@@84)))) :qid |UIsdfy.14:44| :skolemid |1912| :pattern ( ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#44#0#0@@0| |a#44#1#0@@0|) Tclass.UI.SuccResultList $h@@84)) )))
(assert (forall ((arg0@@366 T@U) ) (! (= (type (UI.SuccResultList.results arg0@@366)) (SeqType BoxType)) :qid |funType:UI.SuccResultList.results| :pattern ( (UI.SuccResultList.results arg0@@366)) )))
(assert (forall ((d@@82 T@U) ($h@@85 T@U) ) (!  (=> (and (and (= (type d@@82) DatatypeTypeType) (= (type $h@@85) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@85) (and (UI.SuccResultList.SuccResultList_q d@@82) ($IsAlloc d@@82 Tclass.UI.SuccResultList $h@@85)))) ($IsAlloc (UI.SuccResultList.results d@@82) (TSeq Tclass.UI.SuccResult) $h@@85)) :qid |unknown.0:0| :skolemid |1913| :pattern ( ($IsAlloc (UI.SuccResultList.results d@@82) (TSeq Tclass.UI.SuccResult) $h@@85)) )))
(assert (forall ((arg0@@367 T@U) ) (! (= (type (UI.SuccResultList.end arg0@@367)) DatatypeTypeType) :qid |funType:UI.SuccResultList.end| :pattern ( (UI.SuccResultList.end arg0@@367)) )))
(assert (forall ((d@@83 T@U) ($h@@86 T@U) ) (!  (=> (and (and (= (type d@@83) DatatypeTypeType) (= (type $h@@86) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@86) (and (UI.SuccResultList.SuccResultList_q d@@83) ($IsAlloc d@@83 Tclass.UI.SuccResultList $h@@86)))) ($IsAlloc (UI.SuccResultList.end d@@83) Tclass.UI.RangeEnd $h@@86)) :qid |unknown.0:0| :skolemid |1914| :pattern ( ($IsAlloc (UI.SuccResultList.end d@@83) Tclass.UI.RangeEnd $h@@86)) )))
(assert (forall ((|a#45#0#0@@0| T@U) (|a#45#1#0@@0| T@U) ) (!  (=> (and (= (type |a#45#0#0@@0|) (SeqType BoxType)) (= (type |a#45#1#0@@0|) DatatypeTypeType)) (= (|#UI.SuccResultList.SuccResultList| (Lit |a#45#0#0@@0|) (Lit |a#45#1#0@@0|)) (Lit (|#UI.SuccResultList.SuccResultList| |a#45#0#0@@0| |a#45#1#0@@0|)))) :qid |UIsdfy.14:44| :skolemid |1915| :pattern ( (|#UI.SuccResultList.SuccResultList| (Lit |a#45#0#0@@0|) (Lit |a#45#1#0@@0|))) )))
(assert (forall ((|a#46#0#0@@0| T@U) (|a#46#1#0@@0| T@U) ) (!  (=> (and (= (type |a#46#0#0@@0|) (SeqType BoxType)) (= (type |a#46#1#0@@0|) DatatypeTypeType)) (= (UI.SuccResultList.results (|#UI.SuccResultList.SuccResultList| |a#46#0#0@@0| |a#46#1#0@@0|)) |a#46#0#0@@0|)) :qid |UIsdfy.14:44| :skolemid |1916| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#46#0#0@@0| |a#46#1#0@@0|)) )))
(assert (forall ((|a#47#0#0@@0| T@U) (|a#47#1#0@@0| T@U) (i@@36 Int) ) (!  (=> (and (and (= (type |a#47#0#0@@0|) (SeqType BoxType)) (= (type |a#47#1#0@@0|) DatatypeTypeType)) (and (<= 0 i@@36) (< i@@36 (|Seq#Length| |a#47#0#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#47#0#0@@0| i@@36))) (DtRank (|#UI.SuccResultList.SuccResultList| |a#47#0#0@@0| |a#47#1#0@@0|)))) :qid |UIsdfy.14:44| :skolemid |1917| :pattern ( (|Seq#Index| |a#47#0#0@@0| i@@36) (|#UI.SuccResultList.SuccResultList| |a#47#0#0@@0| |a#47#1#0@@0|)) )))
(assert (forall ((|a#48#0#0@@0| T@U) (|a#48#1#0@@0| T@U) ) (!  (=> (and (= (type |a#48#0#0@@0|) (SeqType BoxType)) (= (type |a#48#1#0@@0|) DatatypeTypeType)) (< (|Seq#Rank| |a#48#0#0@@0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#48#0#0@@0| |a#48#1#0@@0|)))) :qid |UIsdfy.14:44| :skolemid |1918| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#48#0#0@@0| |a#48#1#0@@0|)) )))
(assert (forall ((|a#49#0#0@@0| T@U) (|a#49#1#0@@0| T@U) ) (!  (=> (and (= (type |a#49#0#0@@0|) (SeqType BoxType)) (= (type |a#49#1#0@@0|) DatatypeTypeType)) (= (UI.SuccResultList.end (|#UI.SuccResultList.SuccResultList| |a#49#0#0@@0| |a#49#1#0@@0|)) |a#49#1#0@@0|)) :qid |UIsdfy.14:44| :skolemid |1919| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#49#0#0@@0| |a#49#1#0@@0|)) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ) (!  (=> (and (= (type |a#50#0#0|) (SeqType BoxType)) (= (type |a#50#1#0|) DatatypeTypeType)) (< (DtRank |a#50#1#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#50#0#0| |a#50#1#0|)))) :qid |UIsdfy.14:44| :skolemid |1920| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#50#0#0| |a#50#1#0|)) )))
(assert (forall ((d@@84 T@U) ) (!  (=> (and (= (type d@@84) DatatypeTypeType) (|$IsA#UI.SuccResultList| d@@84)) (UI.SuccResultList.SuccResultList_q d@@84)) :qid |unknown.0:0| :skolemid |1921| :pattern ( (|$IsA#UI.SuccResultList| d@@84)) )))
(assert (forall ((d@@85 T@U) ) (!  (=> (and (= (type d@@85) DatatypeTypeType) ($Is d@@85 Tclass.UI.SuccResultList)) (UI.SuccResultList.SuccResultList_q d@@85)) :qid |unknown.0:0| :skolemid |1922| :pattern ( (UI.SuccResultList.SuccResultList_q d@@85) ($Is d@@85 Tclass.UI.SuccResultList)) )))
(assert (forall ((a@@159 T@U) (b@@90 T@U) ) (!  (=> (and (and (= (type a@@159) DatatypeTypeType) (= (type b@@90) DatatypeTypeType)) true) (and (=> (|UI.SuccResultList#Equal| a@@159 b@@90) (and (|Seq#Equal| (UI.SuccResultList.results a@@159) (UI.SuccResultList.results b@@90)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@159) (UI.SuccResultList.end b@@90)))) (=> (and (|Seq#Equal| (UI.SuccResultList.results a@@159) (UI.SuccResultList.results b@@90)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@159) (UI.SuccResultList.end b@@90))) (|UI.SuccResultList#Equal| a@@159 b@@90)))) :qid |unknown.0:0| :skolemid |1923| :pattern ( (|UI.SuccResultList#Equal| a@@159 b@@90)) )))
(assert (forall ((a@@160 T@U) (b@@91 T@U) ) (!  (=> (and (= (type a@@160) DatatypeTypeType) (= (type b@@91) DatatypeTypeType)) (and (=> (|UI.SuccResultList#Equal| a@@160 b@@91) (= a@@160 b@@91)) (=> (= a@@160 b@@91) (|UI.SuccResultList#Equal| a@@160 b@@91)))) :qid |unknown.0:0| :skolemid |1924| :pattern ( (|UI.SuccResultList#Equal| a@@160 b@@91)) )))
(assert (= (type |#UI.Op.NoOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.NoOp|) |##UI.Op.NoOp|))
(assert (forall ((d@@86 T@U) ) (!  (=> (= (type d@@86) DatatypeTypeType) (and (=> (UI.Op.NoOp_q d@@86) (= (DatatypeCtorId d@@86) |##UI.Op.NoOp|)) (=> (= (DatatypeCtorId d@@86) |##UI.Op.NoOp|) (UI.Op.NoOp_q d@@86)))) :qid |unknown.0:0| :skolemid |1925| :pattern ( (UI.Op.NoOp_q d@@86)) )))
(assert (forall ((d@@87 T@U) ) (!  (=> (and (= (type d@@87) DatatypeTypeType) (UI.Op.NoOp_q d@@87)) (= d@@87 |#UI.Op.NoOp|)) :qid |unknown.0:0| :skolemid |1926| :pattern ( (UI.Op.NoOp_q d@@87)) )))
(assert ($Is |#UI.Op.NoOp| Tclass.UI.Op))
(assert (forall (($h@@87 T@U) ) (!  (=> (and (= (type $h@@87) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@87)) ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@87)) :qid |DafnyPre.521:12| :skolemid |1927| :pattern ( ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@87)) )))
(assert (= |#UI.Op.NoOp| (Lit |#UI.Op.NoOp|)))
(assert (= (type |#UI.Op.SyncOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.SyncOp|) |##UI.Op.SyncOp|))
(assert (forall ((d@@88 T@U) ) (!  (=> (= (type d@@88) DatatypeTypeType) (and (=> (UI.Op.SyncOp_q d@@88) (= (DatatypeCtorId d@@88) |##UI.Op.SyncOp|)) (=> (= (DatatypeCtorId d@@88) |##UI.Op.SyncOp|) (UI.Op.SyncOp_q d@@88)))) :qid |unknown.0:0| :skolemid |1928| :pattern ( (UI.Op.SyncOp_q d@@88)) )))
(assert (forall ((d@@89 T@U) ) (!  (=> (and (= (type d@@89) DatatypeTypeType) (UI.Op.SyncOp_q d@@89)) (= d@@89 |#UI.Op.SyncOp|)) :qid |unknown.0:0| :skolemid |1929| :pattern ( (UI.Op.SyncOp_q d@@89)) )))
(assert ($Is |#UI.Op.SyncOp| Tclass.UI.Op))
(assert (forall (($h@@88 T@U) ) (!  (=> (and (= (type $h@@88) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@88)) ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@88)) :qid |DafnyPre.521:12| :skolemid |1930| :pattern ( ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@88)) )))
(assert (= |#UI.Op.SyncOp| (Lit |#UI.Op.SyncOp|)))
(assert (= (type |#UI.Op.CrashOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.CrashOp|) |##UI.Op.CrashOp|))
(assert (forall ((d@@90 T@U) ) (!  (=> (= (type d@@90) DatatypeTypeType) (and (=> (UI.Op.CrashOp_q d@@90) (= (DatatypeCtorId d@@90) |##UI.Op.CrashOp|)) (=> (= (DatatypeCtorId d@@90) |##UI.Op.CrashOp|) (UI.Op.CrashOp_q d@@90)))) :qid |unknown.0:0| :skolemid |1931| :pattern ( (UI.Op.CrashOp_q d@@90)) )))
(assert (forall ((d@@91 T@U) ) (!  (=> (and (= (type d@@91) DatatypeTypeType) (UI.Op.CrashOp_q d@@91)) (= d@@91 |#UI.Op.CrashOp|)) :qid |unknown.0:0| :skolemid |1932| :pattern ( (UI.Op.CrashOp_q d@@91)) )))
(assert ($Is |#UI.Op.CrashOp| Tclass.UI.Op))
(assert (forall (($h@@89 T@U) ) (!  (=> (and (= (type $h@@89) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@89)) ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@89)) :qid |DafnyPre.521:12| :skolemid |1933| :pattern ( ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@89)) )))
(assert (= |#UI.Op.CrashOp| (Lit |#UI.Op.CrashOp|)))
(assert (forall ((|a#66#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PushSyncOp| |a#66#0#0|)) |##UI.Op.PushSyncOp|) :qid |UIsdfy.20:24| :skolemid |1934| :pattern ( (|#UI.Op.PushSyncOp| |a#66#0#0|)) )))
(assert (forall ((d@@92 T@U) ) (!  (=> (= (type d@@92) DatatypeTypeType) (and (=> (UI.Op.PushSyncOp_q d@@92) (= (DatatypeCtorId d@@92) |##UI.Op.PushSyncOp|)) (=> (= (DatatypeCtorId d@@92) |##UI.Op.PushSyncOp|) (UI.Op.PushSyncOp_q d@@92)))) :qid |unknown.0:0| :skolemid |1935| :pattern ( (UI.Op.PushSyncOp_q d@@92)) )))
(assert (forall ((d@@93 T@U) ) (!  (=> (and (= (type d@@93) DatatypeTypeType) (UI.Op.PushSyncOp_q d@@93)) (exists ((|a#67#0#0| Int) ) (! (= d@@93 (|#UI.Op.PushSyncOp| |a#67#0#0|)) :qid |UIsdfy.20:24| :skolemid |1936| ))) :qid |unknown.0:0| :skolemid |1937| :pattern ( (UI.Op.PushSyncOp_q d@@93)) )))
(assert (forall ((|a#68#0#0| Int) ) (!  (and (=> ($Is (|#UI.Op.PushSyncOp| |a#68#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#68#0#0|) TInt)) (=> ($Is (int_2_U |a#68#0#0|) TInt) ($Is (|#UI.Op.PushSyncOp| |a#68#0#0|) Tclass.UI.Op))) :qid |UIsdfy.20:24| :skolemid |1938| :pattern ( ($Is (|#UI.Op.PushSyncOp| |a#68#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#69#0#0| Int) ($h@@90 T@U) ) (!  (=> (and (= (type $h@@90) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@90)) (and (=> ($IsAlloc (|#UI.Op.PushSyncOp| |a#69#0#0|) Tclass.UI.Op $h@@90) ($IsAlloc (int_2_U |a#69#0#0|) TInt $h@@90)) (=> ($IsAlloc (int_2_U |a#69#0#0|) TInt $h@@90) ($IsAlloc (|#UI.Op.PushSyncOp| |a#69#0#0|) Tclass.UI.Op $h@@90)))) :qid |UIsdfy.20:24| :skolemid |1939| :pattern ( ($IsAlloc (|#UI.Op.PushSyncOp| |a#69#0#0|) Tclass.UI.Op $h@@90)) )))
(assert (forall ((d@@94 T@U) ($h@@91 T@U) ) (!  (=> (and (and (= (type d@@94) DatatypeTypeType) (= (type $h@@91) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@91) (and (UI.Op.PushSyncOp_q d@@94) ($IsAlloc d@@94 Tclass.UI.Op $h@@91)))) ($IsAlloc (int_2_U (UI.Op.id d@@94)) TInt $h@@91)) :qid |unknown.0:0| :skolemid |1940| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@94)) TInt $h@@91)) )))
(assert (forall ((|a#70#0#0| Int) ) (! (= (|#UI.Op.PushSyncOp| (LitInt |a#70#0#0|)) (Lit (|#UI.Op.PushSyncOp| |a#70#0#0|))) :qid |UIsdfy.20:24| :skolemid |1941| :pattern ( (|#UI.Op.PushSyncOp| (LitInt |a#70#0#0|))) )))
(assert (forall ((|a#71#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PushSyncOp| |a#71#0#0|)) |a#71#0#0|) :qid |UIsdfy.20:24| :skolemid |1942| :pattern ( (|#UI.Op.PushSyncOp| |a#71#0#0|)) )))
(assert (forall ((|a#72#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PopSyncOp| |a#72#0#0|)) |##UI.Op.PopSyncOp|) :qid |UIsdfy.21:23| :skolemid |1943| :pattern ( (|#UI.Op.PopSyncOp| |a#72#0#0|)) )))
(assert (forall ((d@@95 T@U) ) (!  (=> (= (type d@@95) DatatypeTypeType) (and (=> (UI.Op.PopSyncOp_q d@@95) (= (DatatypeCtorId d@@95) |##UI.Op.PopSyncOp|)) (=> (= (DatatypeCtorId d@@95) |##UI.Op.PopSyncOp|) (UI.Op.PopSyncOp_q d@@95)))) :qid |unknown.0:0| :skolemid |1944| :pattern ( (UI.Op.PopSyncOp_q d@@95)) )))
(assert (forall ((d@@96 T@U) ) (!  (=> (and (= (type d@@96) DatatypeTypeType) (UI.Op.PopSyncOp_q d@@96)) (exists ((|a#73#0#0| Int) ) (! (= d@@96 (|#UI.Op.PopSyncOp| |a#73#0#0|)) :qid |UIsdfy.21:23| :skolemid |1945| ))) :qid |unknown.0:0| :skolemid |1946| :pattern ( (UI.Op.PopSyncOp_q d@@96)) )))
(assert (forall ((|a#74#0#0| Int) ) (!  (and (=> ($Is (|#UI.Op.PopSyncOp| |a#74#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#74#0#0|) TInt)) (=> ($Is (int_2_U |a#74#0#0|) TInt) ($Is (|#UI.Op.PopSyncOp| |a#74#0#0|) Tclass.UI.Op))) :qid |UIsdfy.21:23| :skolemid |1947| :pattern ( ($Is (|#UI.Op.PopSyncOp| |a#74#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#75#0#0| Int) ($h@@92 T@U) ) (!  (=> (and (= (type $h@@92) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@92)) (and (=> ($IsAlloc (|#UI.Op.PopSyncOp| |a#75#0#0|) Tclass.UI.Op $h@@92) ($IsAlloc (int_2_U |a#75#0#0|) TInt $h@@92)) (=> ($IsAlloc (int_2_U |a#75#0#0|) TInt $h@@92) ($IsAlloc (|#UI.Op.PopSyncOp| |a#75#0#0|) Tclass.UI.Op $h@@92)))) :qid |UIsdfy.21:23| :skolemid |1948| :pattern ( ($IsAlloc (|#UI.Op.PopSyncOp| |a#75#0#0|) Tclass.UI.Op $h@@92)) )))
(assert (forall ((d@@97 T@U) ($h@@93 T@U) ) (!  (=> (and (and (= (type d@@97) DatatypeTypeType) (= (type $h@@93) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@93) (and (UI.Op.PopSyncOp_q d@@97) ($IsAlloc d@@97 Tclass.UI.Op $h@@93)))) ($IsAlloc (int_2_U (UI.Op.id d@@97)) TInt $h@@93)) :qid |unknown.0:0| :skolemid |1949| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@97)) TInt $h@@93)) )))
(assert (forall ((|a#76#0#0| Int) ) (! (= (|#UI.Op.PopSyncOp| (LitInt |a#76#0#0|)) (Lit (|#UI.Op.PopSyncOp| |a#76#0#0|))) :qid |UIsdfy.21:23| :skolemid |1950| :pattern ( (|#UI.Op.PopSyncOp| (LitInt |a#76#0#0|))) )))
(assert (forall ((|a#77#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PopSyncOp| |a#77#0#0|)) |a#77#0#0|) :qid |UIsdfy.21:23| :skolemid |1951| :pattern ( (|#UI.Op.PopSyncOp| |a#77#0#0|)) )))
(assert (forall ((arg0@@368 T@U) (arg1@@162 T@U) ) (! (= (type (|#UI.Op.GetOp| arg0@@368 arg1@@162)) DatatypeTypeType) :qid |funType:#UI.Op.GetOp| :pattern ( (|#UI.Op.GetOp| arg0@@368 arg1@@162)) )))
(assert (forall ((|a#78#0#0| T@U) (|a#78#1#0| T@U) ) (!  (=> (and (= (type |a#78#0#0|) (SeqType BoxType)) (= (type |a#78#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.GetOp| |a#78#0#0| |a#78#1#0|)) |##UI.Op.GetOp|)) :qid |UIsdfy.24:13| :skolemid |1952| :pattern ( (|#UI.Op.GetOp| |a#78#0#0| |a#78#1#0|)) )))
(assert (forall ((d@@98 T@U) ) (!  (=> (= (type d@@98) DatatypeTypeType) (and (=> (UI.Op.GetOp_q d@@98) (= (DatatypeCtorId d@@98) |##UI.Op.GetOp|)) (=> (= (DatatypeCtorId d@@98) |##UI.Op.GetOp|) (UI.Op.GetOp_q d@@98)))) :qid |unknown.0:0| :skolemid |1953| :pattern ( (UI.Op.GetOp_q d@@98)) )))
(assert (forall ((d@@99 T@U) ) (!  (=> (and (= (type d@@99) DatatypeTypeType) (UI.Op.GetOp_q d@@99)) (exists ((|a#79#0#0| T@U) (|a#79#1#0| T@U) ) (!  (and (and (= (type |a#79#0#0|) (SeqType BoxType)) (= (type |a#79#1#0|) (SeqType BoxType))) (= d@@99 (|#UI.Op.GetOp| |a#79#0#0| |a#79#1#0|))) :qid |UIsdfy.24:13| :skolemid |1954| :no-pattern (type |a#79#0#0|) :no-pattern (type |a#79#1#0|) :no-pattern (U_2_int |a#79#0#0|) :no-pattern (U_2_bool |a#79#0#0|) :no-pattern (U_2_int |a#79#1#0|) :no-pattern (U_2_bool |a#79#1#0|) ))) :qid |unknown.0:0| :skolemid |1955| :pattern ( (UI.Op.GetOp_q d@@99)) )))
(assert (forall ((|a#80#0#0@@0| T@U) (|a#80#1#0| T@U) ) (!  (=> (and (= (type |a#80#0#0@@0|) (SeqType BoxType)) (= (type |a#80#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.Op.GetOp| |a#80#0#0@@0| |a#80#1#0|) Tclass.UI.Op) (and ($Is |a#80#0#0@@0| Tclass.KeyType.Key) ($Is |a#80#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#80#0#0@@0| Tclass.KeyType.Key) ($Is |a#80#1#0| Tclass.ValueType.Value)) ($Is (|#UI.Op.GetOp| |a#80#0#0@@0| |a#80#1#0|) Tclass.UI.Op)))) :qid |UIsdfy.24:13| :skolemid |1956| :pattern ( ($Is (|#UI.Op.GetOp| |a#80#0#0@@0| |a#80#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#81#0#0@@0| T@U) (|a#81#1#0| T@U) ($h@@94 T@U) ) (!  (=> (and (and (and (= (type |a#81#0#0@@0|) (SeqType BoxType)) (= (type |a#81#1#0|) (SeqType BoxType))) (= (type $h@@94) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@94)) (and (=> ($IsAlloc (|#UI.Op.GetOp| |a#81#0#0@@0| |a#81#1#0|) Tclass.UI.Op $h@@94) (and ($IsAlloc |a#81#0#0@@0| Tclass.KeyType.Key $h@@94) ($IsAlloc |a#81#1#0| Tclass.ValueType.Value $h@@94))) (=> (and ($IsAlloc |a#81#0#0@@0| Tclass.KeyType.Key $h@@94) ($IsAlloc |a#81#1#0| Tclass.ValueType.Value $h@@94)) ($IsAlloc (|#UI.Op.GetOp| |a#81#0#0@@0| |a#81#1#0|) Tclass.UI.Op $h@@94)))) :qid |UIsdfy.24:13| :skolemid |1957| :pattern ( ($IsAlloc (|#UI.Op.GetOp| |a#81#0#0@@0| |a#81#1#0|) Tclass.UI.Op $h@@94)) )))
(assert (forall ((arg0@@369 T@U) ) (! (= (type (UI.Op.key arg0@@369)) (SeqType BoxType)) :qid |funType:UI.Op.key| :pattern ( (UI.Op.key arg0@@369)) )))
(assert (forall ((d@@100 T@U) ($h@@95 T@U) ) (!  (=> (and (and (= (type d@@100) DatatypeTypeType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@95) (and (UI.Op.GetOp_q d@@100) ($IsAlloc d@@100 Tclass.UI.Op $h@@95)))) ($IsAlloc (UI.Op.key d@@100) Tclass.KeyType.Key $h@@95)) :qid |unknown.0:0| :skolemid |1958| :pattern ( ($IsAlloc (UI.Op.key d@@100) Tclass.KeyType.Key $h@@95)) )))
(assert (forall ((arg0@@370 T@U) ) (! (= (type (UI.Op.value arg0@@370)) (SeqType BoxType)) :qid |funType:UI.Op.value| :pattern ( (UI.Op.value arg0@@370)) )))
(assert (forall ((d@@101 T@U) ($h@@96 T@U) ) (!  (=> (and (and (= (type d@@101) DatatypeTypeType) (= (type $h@@96) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@96) (and (UI.Op.GetOp_q d@@101) ($IsAlloc d@@101 Tclass.UI.Op $h@@96)))) ($IsAlloc (UI.Op.value d@@101) Tclass.ValueType.Value $h@@96)) :qid |unknown.0:0| :skolemid |1959| :pattern ( ($IsAlloc (UI.Op.value d@@101) Tclass.ValueType.Value $h@@96)) )))
(assert (forall ((|a#82#0#0@@0| T@U) (|a#82#1#0| T@U) ) (!  (=> (and (= (type |a#82#0#0@@0|) (SeqType BoxType)) (= (type |a#82#1#0|) (SeqType BoxType))) (= (|#UI.Op.GetOp| (Lit |a#82#0#0@@0|) (Lit |a#82#1#0|)) (Lit (|#UI.Op.GetOp| |a#82#0#0@@0| |a#82#1#0|)))) :qid |UIsdfy.24:13| :skolemid |1960| :pattern ( (|#UI.Op.GetOp| (Lit |a#82#0#0@@0|) (Lit |a#82#1#0|))) )))
(assert (forall ((|a#83#0#0@@0| T@U) (|a#83#1#0| T@U) ) (!  (=> (and (= (type |a#83#0#0@@0|) (SeqType BoxType)) (= (type |a#83#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.GetOp| |a#83#0#0@@0| |a#83#1#0|)) |a#83#0#0@@0|)) :qid |UIsdfy.24:13| :skolemid |1961| :pattern ( (|#UI.Op.GetOp| |a#83#0#0@@0| |a#83#1#0|)) )))
(assert (forall ((|a#84#0#0@@0| T@U) (|a#84#1#0| T@U) ) (!  (=> (and (= (type |a#84#0#0@@0|) (SeqType BoxType)) (= (type |a#84#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.GetOp| |a#84#0#0@@0| |a#84#1#0|)) |a#84#1#0|)) :qid |UIsdfy.24:13| :skolemid |1962| :pattern ( (|#UI.Op.GetOp| |a#84#0#0@@0| |a#84#1#0|)) )))
(assert (forall ((arg0@@371 T@U) (arg1@@163 T@U) ) (! (= (type (|#UI.Op.PutOp| arg0@@371 arg1@@163)) DatatypeTypeType) :qid |funType:#UI.Op.PutOp| :pattern ( (|#UI.Op.PutOp| arg0@@371 arg1@@163)) )))
(assert (forall ((|a#85#0#0@@0| T@U) (|a#85#1#0| T@U) ) (!  (=> (and (= (type |a#85#0#0@@0|) (SeqType BoxType)) (= (type |a#85#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.PutOp| |a#85#0#0@@0| |a#85#1#0|)) |##UI.Op.PutOp|)) :qid |UIsdfy.25:13| :skolemid |1963| :pattern ( (|#UI.Op.PutOp| |a#85#0#0@@0| |a#85#1#0|)) )))
(assert (forall ((d@@102 T@U) ) (!  (=> (= (type d@@102) DatatypeTypeType) (and (=> (UI.Op.PutOp_q d@@102) (= (DatatypeCtorId d@@102) |##UI.Op.PutOp|)) (=> (= (DatatypeCtorId d@@102) |##UI.Op.PutOp|) (UI.Op.PutOp_q d@@102)))) :qid |unknown.0:0| :skolemid |1964| :pattern ( (UI.Op.PutOp_q d@@102)) )))
(assert (forall ((d@@103 T@U) ) (!  (=> (and (= (type d@@103) DatatypeTypeType) (UI.Op.PutOp_q d@@103)) (exists ((|a#86#0#0@@0| T@U) (|a#86#1#0| T@U) ) (!  (and (and (= (type |a#86#0#0@@0|) (SeqType BoxType)) (= (type |a#86#1#0|) (SeqType BoxType))) (= d@@103 (|#UI.Op.PutOp| |a#86#0#0@@0| |a#86#1#0|))) :qid |UIsdfy.25:13| :skolemid |1965| :no-pattern (type |a#86#0#0@@0|) :no-pattern (type |a#86#1#0|) :no-pattern (U_2_int |a#86#0#0@@0|) :no-pattern (U_2_bool |a#86#0#0@@0|) :no-pattern (U_2_int |a#86#1#0|) :no-pattern (U_2_bool |a#86#1#0|) ))) :qid |unknown.0:0| :skolemid |1966| :pattern ( (UI.Op.PutOp_q d@@103)) )))
(assert (forall ((|a#87#0#0@@0| T@U) (|a#87#1#0| T@U) ) (!  (=> (and (= (type |a#87#0#0@@0|) (SeqType BoxType)) (= (type |a#87#1#0|) (SeqType BoxType))) (and (=> ($Is (|#UI.Op.PutOp| |a#87#0#0@@0| |a#87#1#0|) Tclass.UI.Op) (and ($Is |a#87#0#0@@0| Tclass.KeyType.Key) ($Is |a#87#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#87#0#0@@0| Tclass.KeyType.Key) ($Is |a#87#1#0| Tclass.ValueType.Value)) ($Is (|#UI.Op.PutOp| |a#87#0#0@@0| |a#87#1#0|) Tclass.UI.Op)))) :qid |UIsdfy.25:13| :skolemid |1967| :pattern ( ($Is (|#UI.Op.PutOp| |a#87#0#0@@0| |a#87#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#88#0#0@@0| T@U) (|a#88#1#0| T@U) ($h@@97 T@U) ) (!  (=> (and (and (and (= (type |a#88#0#0@@0|) (SeqType BoxType)) (= (type |a#88#1#0|) (SeqType BoxType))) (= (type $h@@97) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@97)) (and (=> ($IsAlloc (|#UI.Op.PutOp| |a#88#0#0@@0| |a#88#1#0|) Tclass.UI.Op $h@@97) (and ($IsAlloc |a#88#0#0@@0| Tclass.KeyType.Key $h@@97) ($IsAlloc |a#88#1#0| Tclass.ValueType.Value $h@@97))) (=> (and ($IsAlloc |a#88#0#0@@0| Tclass.KeyType.Key $h@@97) ($IsAlloc |a#88#1#0| Tclass.ValueType.Value $h@@97)) ($IsAlloc (|#UI.Op.PutOp| |a#88#0#0@@0| |a#88#1#0|) Tclass.UI.Op $h@@97)))) :qid |UIsdfy.25:13| :skolemid |1968| :pattern ( ($IsAlloc (|#UI.Op.PutOp| |a#88#0#0@@0| |a#88#1#0|) Tclass.UI.Op $h@@97)) )))
(assert (forall ((d@@104 T@U) ($h@@98 T@U) ) (!  (=> (and (and (= (type d@@104) DatatypeTypeType) (= (type $h@@98) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@98) (and (UI.Op.PutOp_q d@@104) ($IsAlloc d@@104 Tclass.UI.Op $h@@98)))) ($IsAlloc (UI.Op.key d@@104) Tclass.KeyType.Key $h@@98)) :qid |unknown.0:0| :skolemid |1969| :pattern ( ($IsAlloc (UI.Op.key d@@104) Tclass.KeyType.Key $h@@98)) )))
(assert (forall ((d@@105 T@U) ($h@@99 T@U) ) (!  (=> (and (and (= (type d@@105) DatatypeTypeType) (= (type $h@@99) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@99) (and (UI.Op.PutOp_q d@@105) ($IsAlloc d@@105 Tclass.UI.Op $h@@99)))) ($IsAlloc (UI.Op.value d@@105) Tclass.ValueType.Value $h@@99)) :qid |unknown.0:0| :skolemid |1970| :pattern ( ($IsAlloc (UI.Op.value d@@105) Tclass.ValueType.Value $h@@99)) )))
(assert (forall ((|a#89#0#0@@0| T@U) (|a#89#1#0| T@U) ) (!  (=> (and (= (type |a#89#0#0@@0|) (SeqType BoxType)) (= (type |a#89#1#0|) (SeqType BoxType))) (= (|#UI.Op.PutOp| (Lit |a#89#0#0@@0|) (Lit |a#89#1#0|)) (Lit (|#UI.Op.PutOp| |a#89#0#0@@0| |a#89#1#0|)))) :qid |UIsdfy.25:13| :skolemid |1971| :pattern ( (|#UI.Op.PutOp| (Lit |a#89#0#0@@0|) (Lit |a#89#1#0|))) )))
(assert (forall ((|a#90#0#0@@0| T@U) (|a#90#1#0| T@U) ) (!  (=> (and (= (type |a#90#0#0@@0|) (SeqType BoxType)) (= (type |a#90#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.PutOp| |a#90#0#0@@0| |a#90#1#0|)) |a#90#0#0@@0|)) :qid |UIsdfy.25:13| :skolemid |1972| :pattern ( (|#UI.Op.PutOp| |a#90#0#0@@0| |a#90#1#0|)) )))
(assert (forall ((|a#91#0#0@@0| T@U) (|a#91#1#0| T@U) ) (!  (=> (and (= (type |a#91#0#0@@0|) (SeqType BoxType)) (= (type |a#91#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.PutOp| |a#91#0#0@@0| |a#91#1#0|)) |a#91#1#0|)) :qid |UIsdfy.25:13| :skolemid |1973| :pattern ( (|#UI.Op.PutOp| |a#91#0#0@@0| |a#91#1#0|)) )))
(assert (forall ((arg0@@372 T@U) (arg1@@164 T@U) (arg2@@115 T@U) ) (! (= (type (|#UI.Op.SuccOp| arg0@@372 arg1@@164 arg2@@115)) DatatypeTypeType) :qid |funType:#UI.Op.SuccOp| :pattern ( (|#UI.Op.SuccOp| arg0@@372 arg1@@164 arg2@@115)) )))
(assert (forall ((|a#92#0#0@@0| T@U) (|a#92#1#0| T@U) (|a#92#2#0| T@U) ) (!  (=> (and (and (= (type |a#92#0#0@@0|) DatatypeTypeType) (= (type |a#92#1#0|) (SeqType BoxType))) (= (type |a#92#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.Op.SuccOp| |a#92#0#0@@0| |a#92#1#0| |a#92#2#0|)) |##UI.Op.SuccOp|)) :qid |UIsdfy.27:14| :skolemid |1974| :pattern ( (|#UI.Op.SuccOp| |a#92#0#0@@0| |a#92#1#0| |a#92#2#0|)) )))
(assert (forall ((d@@106 T@U) ) (!  (=> (= (type d@@106) DatatypeTypeType) (and (=> (UI.Op.SuccOp_q d@@106) (= (DatatypeCtorId d@@106) |##UI.Op.SuccOp|)) (=> (= (DatatypeCtorId d@@106) |##UI.Op.SuccOp|) (UI.Op.SuccOp_q d@@106)))) :qid |unknown.0:0| :skolemid |1975| :pattern ( (UI.Op.SuccOp_q d@@106)) )))
(assert (forall ((d@@107 T@U) ) (!  (=> (and (= (type d@@107) DatatypeTypeType) (UI.Op.SuccOp_q d@@107)) (exists ((|a#93#0#0@@0| T@U) (|a#93#1#0| T@U) (|a#93#2#0| T@U) ) (!  (and (and (and (= (type |a#93#0#0@@0|) DatatypeTypeType) (= (type |a#93#1#0|) (SeqType BoxType))) (= (type |a#93#2#0|) DatatypeTypeType)) (= d@@107 (|#UI.Op.SuccOp| |a#93#0#0@@0| |a#93#1#0| |a#93#2#0|))) :qid |UIsdfy.27:14| :skolemid |1976| :no-pattern (type |a#93#0#0@@0|) :no-pattern (type |a#93#1#0|) :no-pattern (type |a#93#2#0|) :no-pattern (U_2_int |a#93#0#0@@0|) :no-pattern (U_2_bool |a#93#0#0@@0|) :no-pattern (U_2_int |a#93#1#0|) :no-pattern (U_2_bool |a#93#1#0|) :no-pattern (U_2_int |a#93#2#0|) :no-pattern (U_2_bool |a#93#2#0|) ))) :qid |unknown.0:0| :skolemid |1977| :pattern ( (UI.Op.SuccOp_q d@@107)) )))
(assert (forall ((|a#94#0#0@@0| T@U) (|a#94#1#0| T@U) (|a#94#2#0| T@U) ) (!  (=> (and (and (= (type |a#94#0#0@@0|) DatatypeTypeType) (= (type |a#94#1#0|) (SeqType BoxType))) (= (type |a#94#2#0|) DatatypeTypeType)) (and (=> ($Is (|#UI.Op.SuccOp| |a#94#0#0@@0| |a#94#1#0| |a#94#2#0|) Tclass.UI.Op) (and (and ($Is |a#94#0#0@@0| Tclass.UI.RangeStart) ($Is |a#94#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#94#2#0| Tclass.UI.RangeEnd))) (=> (and (and ($Is |a#94#0#0@@0| Tclass.UI.RangeStart) ($Is |a#94#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#94#2#0| Tclass.UI.RangeEnd)) ($Is (|#UI.Op.SuccOp| |a#94#0#0@@0| |a#94#1#0| |a#94#2#0|) Tclass.UI.Op)))) :qid |UIsdfy.27:14| :skolemid |1978| :pattern ( ($Is (|#UI.Op.SuccOp| |a#94#0#0@@0| |a#94#1#0| |a#94#2#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#95#0#0@@0| T@U) (|a#95#1#0| T@U) (|a#95#2#0| T@U) ($h@@100 T@U) ) (!  (=> (and (and (and (and (= (type |a#95#0#0@@0|) DatatypeTypeType) (= (type |a#95#1#0|) (SeqType BoxType))) (= (type |a#95#2#0|) DatatypeTypeType)) (= (type $h@@100) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@100)) (and (=> ($IsAlloc (|#UI.Op.SuccOp| |a#95#0#0@@0| |a#95#1#0| |a#95#2#0|) Tclass.UI.Op $h@@100) (and (and ($IsAlloc |a#95#0#0@@0| Tclass.UI.RangeStart $h@@100) ($IsAlloc |a#95#1#0| (TSeq Tclass.UI.SuccResult) $h@@100)) ($IsAlloc |a#95#2#0| Tclass.UI.RangeEnd $h@@100))) (=> (and (and ($IsAlloc |a#95#0#0@@0| Tclass.UI.RangeStart $h@@100) ($IsAlloc |a#95#1#0| (TSeq Tclass.UI.SuccResult) $h@@100)) ($IsAlloc |a#95#2#0| Tclass.UI.RangeEnd $h@@100)) ($IsAlloc (|#UI.Op.SuccOp| |a#95#0#0@@0| |a#95#1#0| |a#95#2#0|) Tclass.UI.Op $h@@100)))) :qid |UIsdfy.27:14| :skolemid |1979| :pattern ( ($IsAlloc (|#UI.Op.SuccOp| |a#95#0#0@@0| |a#95#1#0| |a#95#2#0|) Tclass.UI.Op $h@@100)) )))
(assert (forall ((arg0@@373 T@U) ) (! (= (type (UI.Op.start arg0@@373)) DatatypeTypeType) :qid |funType:UI.Op.start| :pattern ( (UI.Op.start arg0@@373)) )))
(assert (forall ((d@@108 T@U) ($h@@101 T@U) ) (!  (=> (and (and (= (type d@@108) DatatypeTypeType) (= (type $h@@101) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@101) (and (UI.Op.SuccOp_q d@@108) ($IsAlloc d@@108 Tclass.UI.Op $h@@101)))) ($IsAlloc (UI.Op.start d@@108) Tclass.UI.RangeStart $h@@101)) :qid |unknown.0:0| :skolemid |1980| :pattern ( ($IsAlloc (UI.Op.start d@@108) Tclass.UI.RangeStart $h@@101)) )))
(assert (forall ((arg0@@374 T@U) ) (! (= (type (UI.Op.results arg0@@374)) (SeqType BoxType)) :qid |funType:UI.Op.results| :pattern ( (UI.Op.results arg0@@374)) )))
(assert (forall ((d@@109 T@U) ($h@@102 T@U) ) (!  (=> (and (and (= (type d@@109) DatatypeTypeType) (= (type $h@@102) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@102) (and (UI.Op.SuccOp_q d@@109) ($IsAlloc d@@109 Tclass.UI.Op $h@@102)))) ($IsAlloc (UI.Op.results d@@109) (TSeq Tclass.UI.SuccResult) $h@@102)) :qid |unknown.0:0| :skolemid |1981| :pattern ( ($IsAlloc (UI.Op.results d@@109) (TSeq Tclass.UI.SuccResult) $h@@102)) )))
(assert (forall ((arg0@@375 T@U) ) (! (= (type (UI.Op.end arg0@@375)) DatatypeTypeType) :qid |funType:UI.Op.end| :pattern ( (UI.Op.end arg0@@375)) )))
(assert (forall ((d@@110 T@U) ($h@@103 T@U) ) (!  (=> (and (and (= (type d@@110) DatatypeTypeType) (= (type $h@@103) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@103) (and (UI.Op.SuccOp_q d@@110) ($IsAlloc d@@110 Tclass.UI.Op $h@@103)))) ($IsAlloc (UI.Op.end d@@110) Tclass.UI.RangeEnd $h@@103)) :qid |unknown.0:0| :skolemid |1982| :pattern ( ($IsAlloc (UI.Op.end d@@110) Tclass.UI.RangeEnd $h@@103)) )))
(assert (forall ((|a#96#0#0@@0| T@U) (|a#96#1#0| T@U) (|a#96#2#0| T@U) ) (!  (=> (and (and (= (type |a#96#0#0@@0|) DatatypeTypeType) (= (type |a#96#1#0|) (SeqType BoxType))) (= (type |a#96#2#0|) DatatypeTypeType)) (= (|#UI.Op.SuccOp| (Lit |a#96#0#0@@0|) (Lit |a#96#1#0|) (Lit |a#96#2#0|)) (Lit (|#UI.Op.SuccOp| |a#96#0#0@@0| |a#96#1#0| |a#96#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1983| :pattern ( (|#UI.Op.SuccOp| (Lit |a#96#0#0@@0|) (Lit |a#96#1#0|) (Lit |a#96#2#0|))) )))
(assert (forall ((|a#97#0#0@@0| T@U) (|a#97#1#0| T@U) (|a#97#2#0| T@U) ) (!  (=> (and (and (= (type |a#97#0#0@@0|) DatatypeTypeType) (= (type |a#97#1#0|) (SeqType BoxType))) (= (type |a#97#2#0|) DatatypeTypeType)) (= (UI.Op.start (|#UI.Op.SuccOp| |a#97#0#0@@0| |a#97#1#0| |a#97#2#0|)) |a#97#0#0@@0|)) :qid |UIsdfy.27:14| :skolemid |1984| :pattern ( (|#UI.Op.SuccOp| |a#97#0#0@@0| |a#97#1#0| |a#97#2#0|)) )))
(assert (forall ((|a#98#0#0@@0| T@U) (|a#98#1#0| T@U) (|a#98#2#0| T@U) ) (!  (=> (and (and (= (type |a#98#0#0@@0|) DatatypeTypeType) (= (type |a#98#1#0|) (SeqType BoxType))) (= (type |a#98#2#0|) DatatypeTypeType)) (< (DtRank |a#98#0#0@@0|) (DtRank (|#UI.Op.SuccOp| |a#98#0#0@@0| |a#98#1#0| |a#98#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1985| :pattern ( (|#UI.Op.SuccOp| |a#98#0#0@@0| |a#98#1#0| |a#98#2#0|)) )))
(assert (forall ((|a#99#0#0| T@U) (|a#99#1#0| T@U) (|a#99#2#0| T@U) ) (!  (=> (and (and (= (type |a#99#0#0|) DatatypeTypeType) (= (type |a#99#1#0|) (SeqType BoxType))) (= (type |a#99#2#0|) DatatypeTypeType)) (= (UI.Op.results (|#UI.Op.SuccOp| |a#99#0#0| |a#99#1#0| |a#99#2#0|)) |a#99#1#0|)) :qid |UIsdfy.27:14| :skolemid |1986| :pattern ( (|#UI.Op.SuccOp| |a#99#0#0| |a#99#1#0| |a#99#2#0|)) )))
(assert (forall ((|a#100#0#0| T@U) (|a#100#1#0| T@U) (|a#100#2#0| T@U) (i@@37 Int) ) (!  (=> (and (and (and (= (type |a#100#0#0|) DatatypeTypeType) (= (type |a#100#1#0|) (SeqType BoxType))) (= (type |a#100#2#0|) DatatypeTypeType)) (and (<= 0 i@@37) (< i@@37 (|Seq#Length| |a#100#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#100#1#0| i@@37))) (DtRank (|#UI.Op.SuccOp| |a#100#0#0| |a#100#1#0| |a#100#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1987| :pattern ( (|Seq#Index| |a#100#1#0| i@@37) (|#UI.Op.SuccOp| |a#100#0#0| |a#100#1#0| |a#100#2#0|)) )))
(assert (forall ((|a#101#0#0| T@U) (|a#101#1#0| T@U) (|a#101#2#0| T@U) ) (!  (=> (and (and (= (type |a#101#0#0|) DatatypeTypeType) (= (type |a#101#1#0|) (SeqType BoxType))) (= (type |a#101#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#101#1#0|) (DtRank (|#UI.Op.SuccOp| |a#101#0#0| |a#101#1#0| |a#101#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1988| :pattern ( (|#UI.Op.SuccOp| |a#101#0#0| |a#101#1#0| |a#101#2#0|)) )))
(assert (forall ((|a#102#0#0| T@U) (|a#102#1#0| T@U) (|a#102#2#0| T@U) ) (!  (=> (and (and (= (type |a#102#0#0|) DatatypeTypeType) (= (type |a#102#1#0|) (SeqType BoxType))) (= (type |a#102#2#0|) DatatypeTypeType)) (= (UI.Op.end (|#UI.Op.SuccOp| |a#102#0#0| |a#102#1#0| |a#102#2#0|)) |a#102#2#0|)) :qid |UIsdfy.27:14| :skolemid |1989| :pattern ( (|#UI.Op.SuccOp| |a#102#0#0| |a#102#1#0| |a#102#2#0|)) )))
(assert (forall ((|a#103#0#0| T@U) (|a#103#1#0| T@U) (|a#103#2#0| T@U) ) (!  (=> (and (and (= (type |a#103#0#0|) DatatypeTypeType) (= (type |a#103#1#0|) (SeqType BoxType))) (= (type |a#103#2#0|) DatatypeTypeType)) (< (DtRank |a#103#2#0|) (DtRank (|#UI.Op.SuccOp| |a#103#0#0| |a#103#1#0| |a#103#2#0|)))) :qid |UIsdfy.27:14| :skolemid |1990| :pattern ( (|#UI.Op.SuccOp| |a#103#0#0| |a#103#1#0| |a#103#2#0|)) )))
(assert (forall ((d@@111 T@U) ) (!  (=> (and (= (type d@@111) DatatypeTypeType) (|$IsA#UI.Op| d@@111)) (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@111) (UI.Op.SyncOp_q d@@111)) (UI.Op.CrashOp_q d@@111)) (UI.Op.PushSyncOp_q d@@111)) (UI.Op.PopSyncOp_q d@@111)) (UI.Op.GetOp_q d@@111)) (UI.Op.PutOp_q d@@111)) (UI.Op.SuccOp_q d@@111))) :qid |unknown.0:0| :skolemid |1991| :pattern ( (|$IsA#UI.Op| d@@111)) )))
(assert (forall ((d@@112 T@U) ) (!  (=> (and (= (type d@@112) DatatypeTypeType) ($Is d@@112 Tclass.UI.Op)) (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@112) (UI.Op.SyncOp_q d@@112)) (UI.Op.CrashOp_q d@@112)) (UI.Op.PushSyncOp_q d@@112)) (UI.Op.PopSyncOp_q d@@112)) (UI.Op.GetOp_q d@@112)) (UI.Op.PutOp_q d@@112)) (UI.Op.SuccOp_q d@@112))) :qid |unknown.0:0| :skolemid |1992| :pattern ( (UI.Op.SuccOp_q d@@112) ($Is d@@112 Tclass.UI.Op)) :pattern ( (UI.Op.PutOp_q d@@112) ($Is d@@112 Tclass.UI.Op)) :pattern ( (UI.Op.GetOp_q d@@112) ($Is d@@112 Tclass.UI.Op)) :pattern ( (UI.Op.PopSyncOp_q d@@112) ($Is d@@112 Tclass.UI.Op)) :pattern ( (UI.Op.PushSyncOp_q d@@112) ($Is d@@112 Tclass.UI.Op)) :pattern ( (UI.Op.CrashOp_q d@@112) ($Is d@@112 Tclass.UI.Op)) :pattern ( (UI.Op.SyncOp_q d@@112) ($Is d@@112 Tclass.UI.Op)) :pattern ( (UI.Op.NoOp_q d@@112) ($Is d@@112 Tclass.UI.Op)) )))
(assert (forall ((a@@161 T@U) (b@@92 T@U) ) (!  (=> (and (and (= (type a@@161) DatatypeTypeType) (= (type b@@92) DatatypeTypeType)) (and (UI.Op.NoOp_q a@@161) (UI.Op.NoOp_q b@@92))) (and (=> (|UI.Op#Equal| a@@161 b@@92) true) (=> true (|UI.Op#Equal| a@@161 b@@92)))) :qid |unknown.0:0| :skolemid |1993| :pattern ( (|UI.Op#Equal| a@@161 b@@92) (UI.Op.NoOp_q a@@161)) :pattern ( (|UI.Op#Equal| a@@161 b@@92) (UI.Op.NoOp_q b@@92)) )))
(assert (forall ((a@@162 T@U) (b@@93 T@U) ) (!  (=> (and (and (= (type a@@162) DatatypeTypeType) (= (type b@@93) DatatypeTypeType)) (and (UI.Op.SyncOp_q a@@162) (UI.Op.SyncOp_q b@@93))) (and (=> (|UI.Op#Equal| a@@162 b@@93) true) (=> true (|UI.Op#Equal| a@@162 b@@93)))) :qid |unknown.0:0| :skolemid |1994| :pattern ( (|UI.Op#Equal| a@@162 b@@93) (UI.Op.SyncOp_q a@@162)) :pattern ( (|UI.Op#Equal| a@@162 b@@93) (UI.Op.SyncOp_q b@@93)) )))
(assert (forall ((a@@163 T@U) (b@@94 T@U) ) (!  (=> (and (and (= (type a@@163) DatatypeTypeType) (= (type b@@94) DatatypeTypeType)) (and (UI.Op.CrashOp_q a@@163) (UI.Op.CrashOp_q b@@94))) (and (=> (|UI.Op#Equal| a@@163 b@@94) true) (=> true (|UI.Op#Equal| a@@163 b@@94)))) :qid |unknown.0:0| :skolemid |1995| :pattern ( (|UI.Op#Equal| a@@163 b@@94) (UI.Op.CrashOp_q a@@163)) :pattern ( (|UI.Op#Equal| a@@163 b@@94) (UI.Op.CrashOp_q b@@94)) )))
(assert (forall ((a@@164 T@U) (b@@95 T@U) ) (!  (=> (and (and (= (type a@@164) DatatypeTypeType) (= (type b@@95) DatatypeTypeType)) (and (UI.Op.PushSyncOp_q a@@164) (UI.Op.PushSyncOp_q b@@95))) (and (=> (|UI.Op#Equal| a@@164 b@@95) (= (UI.Op.id a@@164) (UI.Op.id b@@95))) (=> (= (UI.Op.id a@@164) (UI.Op.id b@@95)) (|UI.Op#Equal| a@@164 b@@95)))) :qid |unknown.0:0| :skolemid |1996| :pattern ( (|UI.Op#Equal| a@@164 b@@95) (UI.Op.PushSyncOp_q a@@164)) :pattern ( (|UI.Op#Equal| a@@164 b@@95) (UI.Op.PushSyncOp_q b@@95)) )))
(assert (forall ((a@@165 T@U) (b@@96 T@U) ) (!  (=> (and (and (= (type a@@165) DatatypeTypeType) (= (type b@@96) DatatypeTypeType)) (and (UI.Op.PopSyncOp_q a@@165) (UI.Op.PopSyncOp_q b@@96))) (and (=> (|UI.Op#Equal| a@@165 b@@96) (= (UI.Op.id a@@165) (UI.Op.id b@@96))) (=> (= (UI.Op.id a@@165) (UI.Op.id b@@96)) (|UI.Op#Equal| a@@165 b@@96)))) :qid |unknown.0:0| :skolemid |1997| :pattern ( (|UI.Op#Equal| a@@165 b@@96) (UI.Op.PopSyncOp_q a@@165)) :pattern ( (|UI.Op#Equal| a@@165 b@@96) (UI.Op.PopSyncOp_q b@@96)) )))
(assert (forall ((a@@166 T@U) (b@@97 T@U) ) (!  (=> (and (and (= (type a@@166) DatatypeTypeType) (= (type b@@97) DatatypeTypeType)) (and (UI.Op.GetOp_q a@@166) (UI.Op.GetOp_q b@@97))) (and (=> (|UI.Op#Equal| a@@166 b@@97) (and (|Seq#Equal| (UI.Op.key a@@166) (UI.Op.key b@@97)) (|Seq#Equal| (UI.Op.value a@@166) (UI.Op.value b@@97)))) (=> (and (|Seq#Equal| (UI.Op.key a@@166) (UI.Op.key b@@97)) (|Seq#Equal| (UI.Op.value a@@166) (UI.Op.value b@@97))) (|UI.Op#Equal| a@@166 b@@97)))) :qid |unknown.0:0| :skolemid |1998| :pattern ( (|UI.Op#Equal| a@@166 b@@97) (UI.Op.GetOp_q a@@166)) :pattern ( (|UI.Op#Equal| a@@166 b@@97) (UI.Op.GetOp_q b@@97)) )))
(assert (forall ((a@@167 T@U) (b@@98 T@U) ) (!  (=> (and (and (= (type a@@167) DatatypeTypeType) (= (type b@@98) DatatypeTypeType)) (and (UI.Op.PutOp_q a@@167) (UI.Op.PutOp_q b@@98))) (and (=> (|UI.Op#Equal| a@@167 b@@98) (and (|Seq#Equal| (UI.Op.key a@@167) (UI.Op.key b@@98)) (|Seq#Equal| (UI.Op.value a@@167) (UI.Op.value b@@98)))) (=> (and (|Seq#Equal| (UI.Op.key a@@167) (UI.Op.key b@@98)) (|Seq#Equal| (UI.Op.value a@@167) (UI.Op.value b@@98))) (|UI.Op#Equal| a@@167 b@@98)))) :qid |unknown.0:0| :skolemid |1999| :pattern ( (|UI.Op#Equal| a@@167 b@@98) (UI.Op.PutOp_q a@@167)) :pattern ( (|UI.Op#Equal| a@@167 b@@98) (UI.Op.PutOp_q b@@98)) )))
(assert (forall ((a@@168 T@U) (b@@99 T@U) ) (!  (=> (and (and (= (type a@@168) DatatypeTypeType) (= (type b@@99) DatatypeTypeType)) (and (UI.Op.SuccOp_q a@@168) (UI.Op.SuccOp_q b@@99))) (and (=> (|UI.Op#Equal| a@@168 b@@99) (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@168) (UI.Op.start b@@99)) (|Seq#Equal| (UI.Op.results a@@168) (UI.Op.results b@@99))) (|UI.RangeEnd#Equal| (UI.Op.end a@@168) (UI.Op.end b@@99)))) (=> (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@168) (UI.Op.start b@@99)) (|Seq#Equal| (UI.Op.results a@@168) (UI.Op.results b@@99))) (|UI.RangeEnd#Equal| (UI.Op.end a@@168) (UI.Op.end b@@99))) (|UI.Op#Equal| a@@168 b@@99)))) :qid |unknown.0:0| :skolemid |2000| :pattern ( (|UI.Op#Equal| a@@168 b@@99) (UI.Op.SuccOp_q a@@168)) :pattern ( (|UI.Op#Equal| a@@168 b@@99) (UI.Op.SuccOp_q b@@99)) )))
(assert (forall ((a@@169 T@U) (b@@100 T@U) ) (!  (=> (and (= (type a@@169) DatatypeTypeType) (= (type b@@100) DatatypeTypeType)) (and (=> (|UI.Op#Equal| a@@169 b@@100) (= a@@169 b@@100)) (=> (= a@@169 b@@100) (|UI.Op#Equal| a@@169 b@@100)))) :qid |unknown.0:0| :skolemid |2001| :pattern ( (|UI.Op#Equal| a@@169 b@@100)) )))
(assert (= (type Tclass.UI.__default) TyType))
(assert (= (Tag Tclass.UI.__default) Tagclass.UI.__default))
(assert (forall ((bx@@139 T@U) ) (!  (=> (and (= (type bx@@139) BoxType) ($IsBox bx@@139 Tclass.UI.__default)) (and (= ($Box ($Unbox refType bx@@139)) bx@@139) ($Is ($Unbox refType bx@@139) Tclass.UI.__default))) :qid |unknown.0:0| :skolemid |2002| :pattern ( ($IsBox bx@@139 Tclass.UI.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (and (=> ($Is $o@@17 Tclass.UI.__default) (or (= $o@@17 null) (= (dtype $o@@17) Tclass.UI.__default))) (=> (or (= $o@@17 null) (= (dtype $o@@17) Tclass.UI.__default)) ($Is $o@@17 Tclass.UI.__default)))) :qid |unknown.0:0| :skolemid |2003| :pattern ( ($Is $o@@17 Tclass.UI.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@104 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@104) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@18 Tclass.UI.__default $h@@104) (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@104 $o@@18) alloc)))) (=> (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@104 $o@@18) alloc))) ($IsAlloc $o@@18 Tclass.UI.__default $h@@104)))) :qid |unknown.0:0| :skolemid |2004| :pattern ( ($IsAlloc $o@@18 Tclass.UI.__default $h@@104)) )))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@113 T@U) ) (!  (=> (= (type d@@113) DatatypeTypeType) (and (=> (Options.Option.None_q d@@113) (= (DatatypeCtorId d@@113) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@113) |##Options.Option.None|) (Options.Option.None_q d@@113)))) :qid |unknown.0:0| :skolemid |2005| :pattern ( (Options.Option.None_q d@@113)) )))
(assert (forall ((d@@114 T@U) ) (!  (=> (and (= (type d@@114) DatatypeTypeType) (Options.Option.None_q d@@114)) (= d@@114 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |2006| :pattern ( (Options.Option.None_q d@@114)) )))
(assert (forall ((arg0@@376 T@U) ) (! (= (type (Tclass.Options.Option arg0@@376)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@376)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |2007| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@377 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@377)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@377)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |2008| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@140 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@140) BoxType)) ($IsBox bx@@140 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@140)) bx@@140) ($Is ($Unbox DatatypeTypeType bx@@140) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |2009| :pattern ( ($IsBox bx@@140 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |2010| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@105 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@105) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@105)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@105)) :qid |unknown.0:0| :skolemid |2011| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@105)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@378 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@378)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@378)) )))
(assert (forall ((|a#109#0#0| T@U) ) (!  (=> (= (type |a#109#0#0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#109#0#0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |2012| :pattern ( (|#Options.Option.Some| |a#109#0#0|)) )))
(assert (forall ((d@@115 T@U) ) (!  (=> (= (type d@@115) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@115) (= (DatatypeCtorId d@@115) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@115) |##Options.Option.Some|) (Options.Option.Some_q d@@115)))) :qid |unknown.0:0| :skolemid |2013| :pattern ( (Options.Option.Some_q d@@115)) )))
(assert (forall ((d@@116 T@U) ) (!  (=> (and (= (type d@@116) DatatypeTypeType) (Options.Option.Some_q d@@116)) (exists ((|a#110#0#0| T@U) ) (!  (and (= (type |a#110#0#0|) BoxType) (= d@@116 (|#Options.Option.Some| |a#110#0#0|))) :qid |Optionsd.2:36| :skolemid |2014| :no-pattern (type |a#110#0#0|) :no-pattern (U_2_int |a#110#0#0|) :no-pattern (U_2_bool |a#110#0#0|) ))) :qid |unknown.0:0| :skolemid |2015| :pattern ( (Options.Option.Some_q d@@116)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#111#0#0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#111#0#0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#111#0#0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#111#0#0| Options.Option$V@@4)) (=> ($IsBox |a#111#0#0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#111#0#0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |2016| :pattern ( ($Is (|#Options.Option.Some| |a#111#0#0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#112#0#0| T@U) ($h@@106 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#112#0#0|) BoxType)) (= (type $h@@106) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@106)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#112#0#0|) (Tclass.Options.Option Options.Option$V@@5) $h@@106) ($IsAllocBox |a#112#0#0| Options.Option$V@@5 $h@@106)) (=> ($IsAllocBox |a#112#0#0| Options.Option$V@@5 $h@@106) ($IsAlloc (|#Options.Option.Some| |a#112#0#0|) (Tclass.Options.Option Options.Option$V@@5) $h@@106)))) :qid |unknown.0:0| :skolemid |2017| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#112#0#0|) (Tclass.Options.Option Options.Option$V@@5) $h@@106)) )))
(assert (forall ((arg0@@379 T@U) ) (! (= (type (Options.Option.value arg0@@379)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@379)) )))
(assert (forall ((d@@117 T@U) (Options.Option$V@@6 T@U) ($h@@107 T@U) ) (!  (=> (and (and (and (= (type d@@117) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@107) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@107) (and (Options.Option.Some_q d@@117) ($IsAlloc d@@117 (Tclass.Options.Option Options.Option$V@@6) $h@@107)))) ($IsAllocBox (Options.Option.value d@@117) Options.Option$V@@6 $h@@107)) :qid |unknown.0:0| :skolemid |2018| :pattern ( ($IsAllocBox (Options.Option.value d@@117) Options.Option$V@@6 $h@@107)) )))
(assert (forall ((|a#113#0#0| T@U) ) (!  (=> (= (type |a#113#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#113#0#0|)) (Lit (|#Options.Option.Some| |a#113#0#0|)))) :qid |Optionsd.2:36| :skolemid |2019| :pattern ( (|#Options.Option.Some| (Lit |a#113#0#0|))) )))
(assert (forall ((|a#114#0#0| T@U) ) (!  (=> (= (type |a#114#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#114#0#0|)) |a#114#0#0|)) :qid |Optionsd.2:36| :skolemid |2020| :pattern ( (|#Options.Option.Some| |a#114#0#0|)) )))
(assert (forall ((|a#115#0#0| T@U) ) (!  (=> (= (type |a#115#0#0|) BoxType) (< (BoxRank |a#115#0#0|) (DtRank (|#Options.Option.Some| |a#115#0#0|)))) :qid |Optionsd.2:36| :skolemid |2021| :pattern ( (|#Options.Option.Some| |a#115#0#0|)) )))
(assert (forall ((d@@118 T@U) ) (!  (=> (and (= (type d@@118) DatatypeTypeType) (|$IsA#Options.Option| d@@118)) (or (Options.Option.None_q d@@118) (Options.Option.Some_q d@@118))) :qid |unknown.0:0| :skolemid |2022| :pattern ( (|$IsA#Options.Option| d@@118)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@119 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@119) DatatypeTypeType)) ($Is d@@119 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@119) (Options.Option.Some_q d@@119))) :qid |unknown.0:0| :skolemid |2023| :pattern ( (Options.Option.Some_q d@@119) ($Is d@@119 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@119) ($Is d@@119 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@170 T@U) (b@@101 T@U) ) (!  (=> (and (and (= (type a@@170) DatatypeTypeType) (= (type b@@101) DatatypeTypeType)) (and (Options.Option.None_q a@@170) (Options.Option.None_q b@@101))) (and (=> (|Options.Option#Equal| a@@170 b@@101) true) (=> true (|Options.Option#Equal| a@@170 b@@101)))) :qid |unknown.0:0| :skolemid |2024| :pattern ( (|Options.Option#Equal| a@@170 b@@101) (Options.Option.None_q a@@170)) :pattern ( (|Options.Option#Equal| a@@170 b@@101) (Options.Option.None_q b@@101)) )))
(assert (forall ((a@@171 T@U) (b@@102 T@U) ) (!  (=> (and (and (= (type a@@171) DatatypeTypeType) (= (type b@@102) DatatypeTypeType)) (and (Options.Option.Some_q a@@171) (Options.Option.Some_q b@@102))) (and (=> (|Options.Option#Equal| a@@171 b@@102) (= (Options.Option.value a@@171) (Options.Option.value b@@102))) (=> (= (Options.Option.value a@@171) (Options.Option.value b@@102)) (|Options.Option#Equal| a@@171 b@@102)))) :qid |unknown.0:0| :skolemid |2025| :pattern ( (|Options.Option#Equal| a@@171 b@@102) (Options.Option.Some_q a@@171)) :pattern ( (|Options.Option#Equal| a@@171 b@@102) (Options.Option.Some_q b@@102)) )))
(assert (forall ((a@@172 T@U) (b@@103 T@U) ) (!  (=> (and (= (type a@@172) DatatypeTypeType) (= (type b@@103) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@172 b@@103) (= a@@172 b@@103)) (=> (= a@@172 b@@103) (|Options.Option#Equal| a@@172 b@@103)))) :qid |unknown.0:0| :skolemid |2026| :pattern ( (|Options.Option#Equal| a@@172 b@@103)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@141 T@U) ) (!  (=> (and (= (type bx@@141) BoxType) ($IsBox bx@@141 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@141)) bx@@141) ($Is ($Unbox refType bx@@141) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |2027| :pattern ( ($IsBox bx@@141 Tclass.Options.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (and (=> ($Is $o@@19 Tclass.Options.__default) (or (= $o@@19 null) (= (dtype $o@@19) Tclass.Options.__default))) (=> (or (= $o@@19 null) (= (dtype $o@@19) Tclass.Options.__default)) ($Is $o@@19 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |2028| :pattern ( ($Is $o@@19 Tclass.Options.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@108 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@108) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@20 Tclass.Options.__default $h@@108) (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@108 $o@@20) alloc)))) (=> (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@108 $o@@20) alloc))) ($IsAlloc $o@@20 Tclass.Options.__default $h@@108)))) :qid |unknown.0:0| :skolemid |2029| :pattern ( ($IsAlloc $o@@20 Tclass.Options.__default $h@@108)) )))
(assert (forall ((arg0@@380 T@U) (arg1@@165 T@U) (arg2@@116 T@U) (arg3@@90 T@U) (arg4@@78 T@U) ) (! (= (type (Options.__default.MapOption arg0@@380 arg1@@165 arg2@@116 arg3@@90 arg4@@78)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@380 arg1@@165 arg2@@116 arg3@@90 arg4@@78)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@31| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@31|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@31|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@31| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@21 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@21) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@21 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@31| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@21))))) (= (MapType1Select (MapType0Select $h0 $o@@21) $f) (MapType1Select (MapType0Select $h1 $o@@21) $f)))) :qid |unknown.0:0| :skolemid |2030| :no-pattern (type $o@@21) :no-pattern (type $f) :no-pattern (U_2_int $o@@21) :no-pattern (U_2_bool $o@@21) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@31|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@31|))) :qid |unknown.0:0| :skolemid |2031| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@31|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap T@U) (|opt#0@@0| T@U) (|f#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@32|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|) (and (and (and ($IsGoodHeap $Heap) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@32| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@32| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@32| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |2032| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@32|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@0 T@U) (|opt#0@@1| T@U) (|f#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@33|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@0) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@33| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@33|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@33| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@33| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@33|)))) :qid |unknown.0:0| :skolemid |2033| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@33|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@1 T@U) (|opt#0@@2| T@U) (|f#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@34|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@34|) (and (and (and ($IsGoodHeap $Heap@@1) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@34| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@34| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@34|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#1| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@34| |v#1|)))))) :qid |unknown.0:0| :skolemid |2034| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@34|)) ))))
(assert (forall ((arg0@@381 T@U) (arg1@@166 T@U) (arg2@@117 T@U) (arg3@@91 T@U) (arg4@@79 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@381 arg1@@166 arg2@@117 arg3@@91 arg4@@79)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@381 arg1@@166 arg2@@117 arg3@@91 arg4@@79)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@35|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@35|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@35| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@22 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@22) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@22 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@35| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@22))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@22) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@22) $f@@0)))) :qid |unknown.0:0| :skolemid |2035| :no-pattern (type $o@@22) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@22) :no-pattern (U_2_bool $o@@22) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@35|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@35|))) :qid |unknown.0:0| :skolemid |2036| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@35|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@4| T@U) (|f#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@36|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@36| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@36| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |2037| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@36|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@5| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@37|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@37| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@37|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@37| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@37| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@37|)))) :qid |unknown.0:0| :skolemid |2038| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@37|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@6| T@U) (|f#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@38|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@38|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@38| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@38| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@38|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#1@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@38| |v#1@@0|)))))) :qid |unknown.0:0| :skolemid |2039| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@38|)) ))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (forall ((bx@@142 T@U) ) (!  (=> (and (= (type bx@@142) BoxType) ($IsBox bx@@142 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@142)) bx@@142) ($Is ($Unbox refType bx@@142) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |2040| :pattern ( ($IsBox bx@@142 Tclass.Maps.__default)) )))
(assert (forall (($o@@23 T@U) ) (!  (=> (= (type $o@@23) refType) (and (=> ($Is $o@@23 Tclass.Maps.__default) (or (= $o@@23 null) (= (dtype $o@@23) Tclass.Maps.__default))) (=> (or (= $o@@23 null) (= (dtype $o@@23) Tclass.Maps.__default)) ($Is $o@@23 Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |2041| :pattern ( ($Is $o@@23 Tclass.Maps.__default)) )))
(assert (forall (($o@@24 T@U) ($h@@109 T@U) ) (!  (=> (and (= (type $o@@24) refType) (= (type $h@@109) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@24 Tclass.Maps.__default $h@@109) (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@109 $o@@24) alloc)))) (=> (or (= $o@@24 null) (U_2_bool (MapType1Select (MapType0Select $h@@109 $o@@24) alloc))) ($IsAlloc $o@@24 Tclass.Maps.__default $h@@109)))) :qid |unknown.0:0| :skolemid |2042| :pattern ( ($IsAlloc $o@@24 Tclass.Maps.__default $h@@109)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0| T@U) (|k#0@@70| T@U) (|v#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0|) (IMapType BoxType BoxType))) (= (type |k#0@@70|) BoxType)) (= (type |v#0@@3|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0@@70| |v#0@@3|) (and (and ($Is |m#0| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0@@70| Maps._default.IMapsTo$K)) ($IsBox |v#0@@3| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2043| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0@@70| |v#0@@3|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@0| T@U) (|k#0@@71| T@U) (|v#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@0|) (IMapType BoxType BoxType))) (= (type |k#0@@71|) BoxType)) (= (type |v#0@@4|) BoxType)) (and (and ($Is |m#0@@0| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@71| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@4| Maps._default.IMapsTo$V@@0))) (and (=> (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@71| |v#0@@4|) true) (=> true (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@71| |v#0@@4|)))) :qid |unknown.0:0| :skolemid |2044| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@71| |v#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@1| T@U) (|k#0@@72| T@U) (|v#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@1|) (IMapType BoxType BoxType))) (= (type |k#0@@72|) BoxType)) (= (type |v#0@@5|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@72| |v#0@@5|) (and (and ($Is |m#0@@1| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@72| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@5| Maps._default.IMapsTo$V@@1)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@72| |v#0@@5|) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@72|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@72|) |v#0@@5|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@72|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@72|) |v#0@@5|)) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@72| |v#0@@5|)))) :qid |unknown.0:0| :skolemid |2045| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@72| |v#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@2| T@U) (|k#0@@73| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@2|) (IMapType BoxType BoxType))) (= (type |k#0@@73|) BoxType)) (= (type |v#0@@6|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@73|) (Lit |v#0@@6|)) (and (and ($Is |m#0@@2| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@73| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@6| Maps._default.IMapsTo$V@@2)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@73|) (Lit |v#0@@6|)) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@73|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@73|)) (Lit |v#0@@6|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@73|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@73|)) (Lit |v#0@@6|))) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@73|) (Lit |v#0@@6|))))) :qid |unknown.0:0| :weight 3 :skolemid |2046| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@73|) (Lit |v#0@@6|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@3| T@U) (|k#0@@74| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@74|) BoxType)) (= (type |v#0@@7|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@74| |v#0@@7|) (and (and ($Is |m#0@@3| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@74| Maps._default.MapsTo$K)) ($IsBox |v#0@@7| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |2047| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@74| |v#0@@7|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@4| T@U) (|k#0@@75| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@75|) BoxType)) (= (type |v#0@@8|) BoxType)) (and (and ($Is |m#0@@4| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@75| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@8| Maps._default.MapsTo$V@@0))) (and (=> (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@75| |v#0@@8|) true) (=> true (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@75| |v#0@@8|)))) :qid |unknown.0:0| :skolemid |2048| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@75| |v#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@5| T@U) (|k#0@@76| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@76|) BoxType)) (= (type |v#0@@9|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@76| |v#0@@9|) (and (and ($Is |m#0@@5| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@76| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@9| Maps._default.MapsTo$V@@1)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@76| |v#0@@9|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@76|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@76|) |v#0@@9|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@76|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@76|) |v#0@@9|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@76| |v#0@@9|)))) :qid |unknown.0:0| :skolemid |2049| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@76| |v#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@6| T@U) (|k#0@@77| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@6|) (MapType BoxType BoxType))) (= (type |k#0@@77|) BoxType)) (= (type |v#0@@10|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@77| |v#0@@10|) (and (and ($Is |m#0@@6| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@77| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@10| Maps._default.MapsTo$V@@2)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@77| |v#0@@10|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@77|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@77|) |v#0@@10|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@77|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@77|) |v#0@@10|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@77| |v#0@@10|)))) :qid |unknown.0:0| :weight 3 :skolemid |2050| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@77| |v#0@@10|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@7| T@U) (|k#0@@78| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@7|) (MapType BoxType BoxType))) (= (type |k#0@@78|) BoxType)) (= (type |v#0@@11|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@78|) (Lit |v#0@@11|)) (and (and ($Is |m#0@@7| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@78| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@11| Maps._default.MapsTo$V@@3)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@78|) (Lit |v#0@@11|)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@78|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@78|)) (Lit |v#0@@11|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@78|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@78|)) (Lit |v#0@@11|))) (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@78|) (Lit |v#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |2051| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@78|) (Lit |v#0@@11|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@8| T@U) (|m'#0| T@U) (|k#0@@79| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@8|) (MapType BoxType BoxType))) (= (type |m'#0|) (MapType BoxType BoxType))) (= (type |k#0@@79|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@79|) (and (and ($Is |m#0@@8| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@79| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2052| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@79|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@9| T@U) (|m'#0@@0| T@U) (|k#0@@80| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@9|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@80|) BoxType)) (and (and ($Is |m#0@@9| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@80| Maps._default.MapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@80|) true) (=> true (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@80|)))) :qid |unknown.0:0| :skolemid |2053| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@80|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@10| T@U) (|m'#0@@1| T@U) (|k#0@@81| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@81|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@81|) (and (and ($Is |m#0@@10| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@81| Maps._default.MapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@81|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@81|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@81|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@81|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@81|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@81|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@81|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@81|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@81|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@81|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@81|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@81|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@81|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@81|)))) :qid |unknown.0:0| :skolemid |2054| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@81|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@11| T@U) (|m'#0@@2| T@U) (|k#0@@82| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@82|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@82|) (and (and ($Is |m#0@@11| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@82| Maps._default.MapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@82|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@82|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@82|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@82|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@82|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@82|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@82|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@82|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@82|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@82|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@82|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@82|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@82|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@82|)))) :qid |unknown.0:0| :weight 3 :skolemid |2055| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@82|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@12| T@U) (|m'#0@@3| T@U) (|k#0@@83| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@83|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@83|)) (and (and ($Is |m#0@@12| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@83| Maps._default.MapsAgreeOnKey$K@@3)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@83|)) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@83|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@83|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@83|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@83|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@83|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@83|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@83|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@83|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@83|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@83|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@83|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@83|))))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@83|))))) :qid |unknown.0:0| :weight 3 :skolemid |2056| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@83|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@13| T@U) (|m'#0@@4| T@U) (|k#0@@84| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@13|) (IMapType BoxType BoxType))) (= (type |m'#0@@4|) (IMapType BoxType BoxType))) (= (type |k#0@@84|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@84|) (and (and ($Is |m#0@@13| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@4| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@84| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |2057| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@84|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@14| T@U) (|m'#0@@5| T@U) (|k#0@@85| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@14|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@85|) BoxType)) (and (and ($Is |m#0@@14| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@85| Maps._default.IMapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@85|) true) (=> true (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@85|)))) :qid |unknown.0:0| :skolemid |2058| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@85|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@15| T@U) (|m'#0@@6| T@U) (|k#0@@86| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@15|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@86|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@86|) (and (and ($Is |m#0@@15| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@86| Maps._default.IMapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@86|) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@86|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@86|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@86|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@86|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@86|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@86|))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@86|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@86|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@86|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@86|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@86|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@86|)))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@86|)))) :qid |unknown.0:0| :skolemid |2059| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@86|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@16| T@U) (|m'#0@@7| T@U) (|k#0@@87| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@16|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@87|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@87|)) (and (and ($Is |m#0@@16| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@87| Maps._default.IMapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@87|)) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@87|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@87|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@87|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@87|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@87|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@87|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@87|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@87|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@87|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@87|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@87|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@87|))))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@87|))))) :qid |unknown.0:0| :weight 3 :skolemid |2060| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@87|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |2061| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (and (=> (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true) (=> true (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)))) :qid |unknown.0:0| :skolemid |2062| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0| T@U) ) (!  (=> (and (and (= (type |key#0|) BoxType) ($IsBox |key#0| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0|)) :qid |Mapssdfy.28:16| :skolemid |2063| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@0| T@U) ) (!  (=> (and (and (= (type |key#0@@0|) BoxType) ($IsBox |key#0@@0| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@0|)) :qid |Mapssdfy.28:16| :skolemid |2064| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@1| T@U) ) (!  (=> (and (and (= (type |key#0@@1|) BoxType) ($IsBox |key#0@@1| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@1|)) :qid |Mapssdfy.28:16| :skolemid |2064| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|))))) :qid |unknown.0:0| :skolemid |2065| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1| T@U) ) (!  (=> (and (and (= (type |key#1|) BoxType) ($IsBox |key#1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1|)) :qid |Mapssdfy.28:16| :skolemid |2066| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@0| T@U) ) (!  (=> (and (and (= (type |key#1@@0|) BoxType) ($IsBox |key#1@@0| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@0|)) :qid |Mapssdfy.28:16| :skolemid |2067| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@1| T@U) ) (!  (=> (and (and (= (type |key#1@@1|) BoxType) ($IsBox |key#1@@1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@1|)) :qid |Mapssdfy.28:16| :skolemid |2067| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2068| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |2069| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (and (=> (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true) (=> true (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)))) :qid |unknown.0:0| :skolemid |2070| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@2| T@U) ) (!  (=> (and (and (= (type |key#0@@2|) BoxType) ($IsBox |key#0@@2| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@2|)) :qid |Mapssdfy.33:16| :skolemid |2071| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@3| T@U) ) (!  (=> (and (and (= (type |key#0@@3|) BoxType) ($IsBox |key#0@@3| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@3|)) :qid |Mapssdfy.33:16| :skolemid |2072| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@4| T@U) ) (!  (=> (and (and (= (type |key#0@@4|) BoxType) ($IsBox |key#0@@4| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@4|)) :qid |Mapssdfy.33:16| :skolemid |2072| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|))))) :qid |unknown.0:0| :skolemid |2073| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@2| T@U) ) (!  (=> (and (and (= (type |key#1@@2|) BoxType) ($IsBox |key#1@@2| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@2|)) :qid |Mapssdfy.33:16| :skolemid |2074| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@3| T@U) ) (!  (=> (and (and (= (type |key#1@@3|) BoxType) ($IsBox |key#1@@3| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@3|)) :qid |Mapssdfy.33:16| :skolemid |2075| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@4| T@U) ) (!  (=> (and (and (= (type |key#1@@4|) BoxType) ($IsBox |key#1@@4| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@4|)) :qid |Mapssdfy.33:16| :skolemid |2075| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2076| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@382 T@U) (arg1@@167 T@U) (arg2@@118 T@U) (arg3@@92 T@U) (arg4@@80 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@382 arg1@@167 arg2@@118 arg3@@92 arg4@@80)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@382 arg1@@167 arg2@@118 arg3@@92 arg4@@80)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@5 T@U) (|m#0@@17| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@5) LayerTypeType)) (= (type |m#0@@17|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@5) |m#0@@17| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@5 |m#0@@17| |ks#0|))) :qid |unknown.0:0| :skolemid |2077| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@5) |m#0@@17| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@6 T@U) (|m#0@@18| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@6) LayerTypeType)) (= (type |m#0@@18|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@6 |m#0@@18| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@18| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |2078| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@6) |m#0@@18| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@7 T@U) (|m#0@@19| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@7) LayerTypeType)) (= (type |m#0@@19|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@19| |ks#0@@1|) (and ($Is |m#0@@19| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@88| T@U) ) (!  (=> (and (and (= (type |k#0@@88|) BoxType) ($IsBox |k#0@@88| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@88|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@88|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) |k#0@@88|))) :qid |Mapssdfy.37:20| :skolemid |2079| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) |k#0@@88|)) :pattern ( (MapType0Select |ks#0@@1| |k#0@@88|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@88|)) )) (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) BoxType) ($IsBox |k#1| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) |k#1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) |k#1|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1|)))))) :qid |Mapssdfy.38:20| :skolemid |2080| :pattern ( (MapType0Select |ks#0@@1| |k#1|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) |k#1|)) ))) (forall ((|j#0| T@U) ) (!  (=> (and (and (= (type |j#0|) BoxType) ($IsBox |j#0| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) |j#0|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) |j#0|) (MapType0Select (|Map#Elements| |m#0@@19|) |j#0|))) :qid |Mapssdfy.39:20| :skolemid |2081| :pattern ( (MapType0Select (|Map#Elements| |m#0@@19|) |j#0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) |j#0|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) |j#0|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@19|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) (|Map#Card| |m#0@@19|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2082| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@7 |m#0@@19| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@8 T@U) (|m#0@@20| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@8) LayerTypeType)) (= (type |m#0@@20|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@20| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (and (=> (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@8 |m#0@@20| |ks#0@@2|) true) (=> true (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@8 |m#0@@20| |ks#0@@2|)))) :qid |unknown.0:0| :skolemid |2083| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@8 |m#0@@20| |ks#0@@2|)) )))
(assert  (and (forall ((arg0@@383 T@U) (arg1@@168 T@U) (arg2@@119 T@U) ) (! (= (type (|lambda#49| arg0@@383 arg1@@168 arg2@@119)) (MapType0Type BoxType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@383 arg1@@168 arg2@@119)) )) (forall ((arg0@@384 T@U) ) (! (= (type (|lambda#50| arg0@@384)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@384)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@9 T@U) (|m#0@@21| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@9) LayerTypeType)) (= (type |m#0@@21|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@21| |ks#0@@3|) (and ($Is |m#0@@21| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@9) |m#0@@21| |ks#0@@3|) (let ((|m'#0@@8| (|Map#Glue| (|lambda#49| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@21|) |ks#0@@3|) (|lambda#50| (|Map#Elements| |m#0@@21|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#0@@8|))) :qid |unknown.0:0| :skolemid |2084| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@9) |m#0@@21| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@10 T@U) (|m#0@@22| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@10) LayerTypeType)) (= (type |m#0@@22|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@22|) (Lit |ks#0@@4|)) (and ($Is |m#0@@22| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@10) (Lit |m#0@@22|) (Lit |ks#0@@4|)) (let ((|m'#1| (|Map#Glue| (|lambda#49| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@22|) (Lit |ks#0@@4|)) (|lambda#50| (|Map#Elements| (Lit |m#0@@22|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |2085| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@10) (Lit |m#0@@22|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@385 T@U) (arg1@@169 T@U) (arg2@@120 T@U) (arg3@@93 T@U) (arg4@@81 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@385 arg1@@169 arg2@@120 arg3@@93 arg4@@81)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@385 arg1@@169 arg2@@120 arg3@@93 arg4@@81)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@11 T@U) (|m#0@@23| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@11) LayerTypeType)) (= (type |m#0@@23|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@11) |m#0@@23| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@11 |m#0@@23| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |2086| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@11) |m#0@@23| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@12 T@U) (|m#0@@24| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@12) LayerTypeType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@12 |m#0@@24| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@24| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |2087| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@12) |m#0@@24| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@13 T@U) (|m#0@@25| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@13) LayerTypeType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@25| |ks#0@@7|) (and ($Is |m#0@@25| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@13 |m#0@@25| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@25|) |ks#0@@7|)) (forall ((|j#0@@0| T@U) ) (!  (=> (and (and (= (type |j#0@@0|) BoxType) ($IsBox |j#0@@0| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@13 |m#0@@25| |ks#0@@7|)) |j#0@@0|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@13 |m#0@@25| |ks#0@@7|)) |j#0@@0|) (MapType0Select (|Map#Elements| |m#0@@25|) |j#0@@0|))) :qid |Mapssdfy.50:20| :skolemid |2088| :pattern ( (MapType0Select (|Map#Elements| |m#0@@25|) |j#0@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@13 |m#0@@25| |ks#0@@7|)) |j#0@@0|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@13 |m#0@@25| |ks#0@@7|)) |j#0@@0|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@13 |m#0@@25| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@25|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@13 |m#0@@25| |ks#0@@7|)) (|Map#Card| |m#0@@25|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@13 |m#0@@25| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |2089| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@13 |m#0@@25| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@14 T@U) (|m#0@@26| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@14) LayerTypeType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@26| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (and (=> (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@14 |m#0@@26| |ks#0@@8|) true) (=> true (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@14 |m#0@@26| |ks#0@@8|)))) :qid |unknown.0:0| :skolemid |2090| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@14 |m#0@@26| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@15 T@U) (|m#0@@27| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@15) LayerTypeType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and ($Is |m#0@@27| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@15) |m#0@@27| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@27| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |2091| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@15) |m#0@@27| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@16 T@U) (|m#0@@28| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@16) LayerTypeType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and ($Is |m#0@@28| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@16) (Lit |m#0@@28|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@28|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2092| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@16) (Lit |m#0@@28|) (Lit |ks#0@@10|))) ))))
(assert (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) ($ly@@17 T@U) (|m#0@@29| T@U) (|k#0@@89| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type $ly@@17) LayerTypeType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |k#0@@89|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@17) |m#0@@29| |k#0@@89|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V $ly@@17 |m#0@@29| |k#0@@89|))) :qid |unknown.0:0| :skolemid |2093| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@17) |m#0@@29| |k#0@@89|)) )))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) ($ly@@18 T@U) (|m#0@@30| T@U) (|k#0@@90| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type $ly@@18) LayerTypeType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |k#0@@90|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $ly@@18 |m#0@@30| |k#0@@90|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $LZ |m#0@@30| |k#0@@90|))) :qid |unknown.0:0| :skolemid |2094| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 (AsFuelBottom $ly@@18) |m#0@@30| |k#0@@90|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) ($ly@@19 T@U) (|m#0@@31| T@U) (|k#0@@91| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type $ly@@19) LayerTypeType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |k#0@@91|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@31| |k#0@@91|) (and ($Is |m#0@@31| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@91| Maps._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@1| T@U) ) (!  (=> (and (and (= (type |j#0@@1|) BoxType) ($IsBox |j#0@@1| Maps._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#0@@1|)) (not (= |j#0@@1| |k#0@@91|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) |j#0@@1|))) :qid |Mapssdfy.59:20| :skolemid |2095| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) |j#0@@1|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#0@@1|)) )) (forall ((|j#1| T@U) ) (!  (=> (and (= (type |j#1|) BoxType) ($IsBox |j#1| Maps._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) |j#1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) |j#1|)) (not (= |j#1| |k#0@@91|))))) :qid |Mapssdfy.60:20| :skolemid |2096| :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) |j#1|)) ))) (forall ((|j#2| T@U) ) (!  (=> (and (and (= (type |j#2|) BoxType) ($IsBox |j#2| Maps._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) |j#2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) |j#2|) (MapType0Select (|Map#Elements| |m#0@@31|) |j#2|))) :qid |Mapssdfy.61:20| :skolemid |2097| :pattern ( (MapType0Select (|Map#Elements| |m#0@@31|) |j#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) |j#2|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) |j#2|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|))) (|Set#Card| (|Map#Domain| |m#0@@31|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@91|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) (- (|Map#Card| |m#0@@31|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@91|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) (|Map#Card| |m#0@@31|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|) (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2098| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@19 |m#0@@31| |k#0@@91|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) ($ly@@20 T@U) (|m#0@@32| T@U) (|k#0@@92| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type $ly@@20) LayerTypeType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |k#0@@92|) BoxType)) (and ($Is |m#0@@32| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@92| Maps._default.MapRemove1$K@@2))) (and (=> (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@20 |m#0@@32| |k#0@@92|) true) (=> true (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@20 |m#0@@32| |k#0@@92|)))) :qid |unknown.0:0| :skolemid |2099| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@20 |m#0@@32| |k#0@@92|)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@170 T@U) (arg2@@121 T@U) ) (! (= (type (|lambda#53| arg0@@386 arg1@@170 arg2@@121)) (MapType0Type BoxType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@386 arg1@@170 arg2@@121)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) ($ly@@21 T@U) (|m#0@@33| T@U) (|k#0@@93| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type $ly@@21) LayerTypeType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |k#0@@93|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 |m#0@@33| |k#0@@93|) (and ($Is |m#0@@33| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@93| Maps._default.MapRemove1$K@@3)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@21) |m#0@@33| |k#0@@93|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#53| Maps._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@33|) |k#0@@93|) (|lambda#50| (|Map#Elements| |m#0@@33|)) (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)))) |m'#0@@9|))) :qid |unknown.0:0| :skolemid |2100| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@21) |m#0@@33| |k#0@@93|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@4 T@U) (Maps._default.MapRemove1$V@@4 T@U) ($ly@@22 T@U) (|m#0@@34| T@U) (|k#0@@94| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@4) TyType) (= (type Maps._default.MapRemove1$V@@4) TyType)) (= (type $ly@@22) LayerTypeType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |k#0@@94|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 (Lit |m#0@@34|) |k#0@@94|) (and ($Is |m#0@@34| (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)) ($IsBox |k#0@@94| Maps._default.MapRemove1$K@@4)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@22) (Lit |m#0@@34|) |k#0@@94|) (let ((|m'#1@@0| (|Map#Glue| (|lambda#53| Maps._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@34|) |k#0@@94|) (|lambda#50| (|Map#Elements| (Lit |m#0@@34|))) (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)))) |m'#1@@0|))) :qid |unknown.0:0| :weight 3 :skolemid |2101| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@22) (Lit |m#0@@34|) |k#0@@94|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@5 T@U) (Maps._default.MapRemove1$V@@5 T@U) ($ly@@23 T@U) (|m#0@@35| T@U) (|k#0@@95| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@5) TyType) (= (type Maps._default.MapRemove1$V@@5) TyType)) (= (type $ly@@23) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |k#0@@95|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 (Lit |m#0@@35|) (Lit |k#0@@95|)) (and ($Is |m#0@@35| (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)) ($IsBox |k#0@@95| Maps._default.MapRemove1$K@@5)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@23) (Lit |m#0@@35|) (Lit |k#0@@95|)) (let ((|m'#2| (|Map#Glue| (|lambda#53| Maps._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@35|) |k#0@@95|) (|lambda#50| (|Map#Elements| (Lit |m#0@@35|))) (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |2102| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@23) (Lit |m#0@@35|) (Lit |k#0@@95|))) ))))
(assert (forall ((arg0@@387 T@U) (arg1@@171 T@U) (arg2@@122 T@U) (arg3@@94 T@U) (arg4@@82 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@387 arg1@@171 arg2@@122 arg3@@94 arg4@@82)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@387 arg1@@171 arg2@@122 arg3@@94 arg4@@82)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@24 T@U) (|m#0@@36| T@U) (|k#0@@96| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@24) LayerTypeType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |k#0@@96|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@24) |m#0@@36| |k#0@@96|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@24 |m#0@@36| |k#0@@96|))) :qid |unknown.0:0| :skolemid |2103| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@24) |m#0@@36| |k#0@@96|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@25 T@U) (|m#0@@37| T@U) (|k#0@@97| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@25) LayerTypeType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |k#0@@97|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@25 |m#0@@37| |k#0@@97|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@37| |k#0@@97|))) :qid |unknown.0:0| :skolemid |2104| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@25) |m#0@@37| |k#0@@97|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@26 T@U) (|m#0@@38| T@U) (|k#0@@98| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@26) LayerTypeType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |k#0@@98|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@38| |k#0@@98|) (and ($Is |m#0@@38| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@98| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@26 |m#0@@38| |k#0@@98|)) (|Set#Difference| (|Map#Domain| |m#0@@38|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@98|))) (forall ((|j#0@@2| T@U) ) (!  (=> (and (and (= (type |j#0@@2|) BoxType) ($IsBox |j#0@@2| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@26 |m#0@@38| |k#0@@98|)) |j#0@@2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@26 |m#0@@38| |k#0@@98|)) |j#0@@2|) (MapType0Select (|Map#Elements| |m#0@@38|) |j#0@@2|))) :qid |Mapssdfy.76:20| :skolemid |2105| :pattern ( (MapType0Select (|Map#Elements| |m#0@@38|) |j#0@@2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@26 |m#0@@38| |k#0@@98|)) |j#0@@2|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@26 |m#0@@38| |k#0@@98|)) |j#0@@2|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@26 |m#0@@38| |k#0@@98|))) (|Set#Card| (|Map#Domain| |m#0@@38|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@26 |m#0@@38| |k#0@@98|)) (|Map#Card| |m#0@@38|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@26 |m#0@@38| |k#0@@98|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |2106| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@26 |m#0@@38| |k#0@@98|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@27 T@U) (|m#0@@39| T@U) (|k#0@@99| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@27) LayerTypeType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |k#0@@99|) BoxType)) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@99| Maps._default.MapRemove1Strong$K@@2))) (and (=> (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@27 |m#0@@39| |k#0@@99|) true) (=> true (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@27 |m#0@@39| |k#0@@99|)))) :qid |unknown.0:0| :skolemid |2107| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@27 |m#0@@39| |k#0@@99|)) )))
(assert  (and (= (type MoreFuel_Maps._default.MapRemove10) LayerTypeType) (= (type StartFuelAssert_Maps._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@28 T@U) (|m#0@@40| T@U) (|k#0@@100| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@28) LayerTypeType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |k#0@@100|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@100|) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@100| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@100|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove10)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove10) MoreFuel_Maps._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@28) |m#0@@40| |k#0@@100|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 StartFuel_Maps._default.MapRemove1 |m#0@@40| |k#0@@100|))))) :qid |unknown.0:0| :skolemid |2108| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@28) |m#0@@40| |k#0@@100|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@29 T@U) (|m#0@@41| T@U) (|k#0@@101| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@29) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |k#0@@101|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@101|) (and ($Is |m#0@@41| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@101| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@101|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove11)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove11) MoreFuel_Maps._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@29) (Lit |m#0@@41|) |k#0@@101|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@41|) |k#0@@101|))))) :qid |unknown.0:0| :weight 3 :skolemid |2109| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@29) (Lit |m#0@@41|) |k#0@@101|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@30 T@U) (|m#0@@42| T@U) (|k#0@@102| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@30) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |k#0@@102|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@102|)) (and ($Is |m#0@@42| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@102| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@102|)) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove12)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove12) MoreFuel_Maps._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@30) (Lit |m#0@@42|) (Lit |k#0@@102|)) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@42|) (Lit |k#0@@102|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2110| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@30) (Lit |m#0@@42|) (Lit |k#0@@102|))) ))))
(assert (forall ((arg0@@388 T@U) (arg1@@172 T@U) (arg2@@123 T@U) (arg3@@95 T@U) (arg4@@83 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@388 arg1@@172 arg2@@123 arg3@@95 arg4@@83)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@388 arg1@@172 arg2@@123 arg3@@95 arg4@@83)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@31 T@U) (|m#0@@43| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@31) LayerTypeType)) (= (type |m#0@@43|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@31) |m#0@@43| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@31 |m#0@@43| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |2111| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@31) |m#0@@43| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@32 T@U) (|m#0@@44| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@32) LayerTypeType)) (= (type |m#0@@44|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@32 |m#0@@44| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@44| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |2112| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@32) |m#0@@44| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@33 T@U) (|m#0@@45| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@33) LayerTypeType)) (= (type |m#0@@45|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@45| |ks#0@@13|) (and ($Is |m#0@@45| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@33 |m#0@@45| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@45|) |ks#0@@13|)) (forall ((|j#0@@3| T@U) ) (!  (=> (and (and (= (type |j#0@@3|) BoxType) ($IsBox |j#0@@3| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@33 |m#0@@45| |ks#0@@13|)) |j#0@@3|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@33 |m#0@@45| |ks#0@@13|)) |j#0@@3|) (MapType0Select (|IMap#Elements| |m#0@@45|) |j#0@@3|))) :qid |Mapssdfy.86:20| :skolemid |2113| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@45|) |j#0@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@33 |m#0@@45| |ks#0@@13|)) |j#0@@3|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@33 |m#0@@45| |ks#0@@13|)) |j#0@@3|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@33 |m#0@@45| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2114| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@33 |m#0@@45| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@34 T@U) (|m#0@@46| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@34) LayerTypeType)) (= (type |m#0@@46|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@46| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (and (=> (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@34 |m#0@@46| |ks#0@@14|) true) (=> true (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@34 |m#0@@46| |ks#0@@14|)))) :qid |unknown.0:0| :skolemid |2115| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@34 |m#0@@46| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@35 T@U) (|m#0@@47| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@35) LayerTypeType)) (= (type |m#0@@47|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@47| |ks#0@@15|) (and ($Is |m#0@@47| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@35) |m#0@@47| |ks#0@@15|) (|IMap#Glue| (|lambda#49| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@47|) |ks#0@@15|) (|lambda#50| (|IMap#Elements| |m#0@@47|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |2116| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@35) |m#0@@47| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@36 T@U) (|m#0@@48| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@36) LayerTypeType)) (= (type |m#0@@48|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@48|) (Lit |ks#0@@16|)) (and ($Is |m#0@@48| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@36) (Lit |m#0@@48|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#49| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@48|) (Lit |ks#0@@16|)) (|lambda#50| (|IMap#Elements| (Lit |m#0@@48|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2117| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@36) (Lit |m#0@@48|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@389 T@U) (arg1@@173 T@U) (arg2@@124 T@U) (arg3@@96 T@U) (arg4@@84 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@389 arg1@@173 arg2@@124 arg3@@96 arg4@@84)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@389 arg1@@173 arg2@@124 arg3@@96 arg4@@84)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@37 T@U) (|m#0@@49| T@U) (|k#0@@103| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@37) LayerTypeType)) (= (type |m#0@@49|) (IMapType BoxType BoxType))) (= (type |k#0@@103|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@37) |m#0@@49| |k#0@@103|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@37 |m#0@@49| |k#0@@103|))) :qid |unknown.0:0| :skolemid |2118| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@37) |m#0@@49| |k#0@@103|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@38 T@U) (|m#0@@50| T@U) (|k#0@@104| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@38) LayerTypeType)) (= (type |m#0@@50|) (IMapType BoxType BoxType))) (= (type |k#0@@104|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@38 |m#0@@50| |k#0@@104|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@50| |k#0@@104|))) :qid |unknown.0:0| :skolemid |2119| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@38) |m#0@@50| |k#0@@104|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@39 T@U) (|m#0@@51| T@U) (|k#0@@105| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@39) LayerTypeType)) (= (type |m#0@@51|) (IMapType BoxType BoxType))) (= (type |k#0@@105|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@51| |k#0@@105|) (and ($Is |m#0@@51| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@105| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@39 |m#0@@51| |k#0@@105|)) (|ISet#Difference| (|IMap#Domain| |m#0@@51|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@105|))) (forall ((|j#0@@4| T@U) ) (!  (=> (and (and (= (type |j#0@@4|) BoxType) ($IsBox |j#0@@4| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@39 |m#0@@51| |k#0@@105|)) |j#0@@4|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@39 |m#0@@51| |k#0@@105|)) |j#0@@4|) (MapType0Select (|IMap#Elements| |m#0@@51|) |j#0@@4|))) :qid |Mapssdfy.93:20| :skolemid |2120| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@51|) |j#0@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@39 |m#0@@51| |k#0@@105|)) |j#0@@4|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@39 |m#0@@51| |k#0@@105|)) |j#0@@4|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@39 |m#0@@51| |k#0@@105|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |2121| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@39 |m#0@@51| |k#0@@105|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@40 T@U) (|m#0@@52| T@U) (|k#0@@106| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@40) LayerTypeType)) (= (type |m#0@@52|) (IMapType BoxType BoxType))) (= (type |k#0@@106|) BoxType)) (and ($Is |m#0@@52| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@106| Maps._default.IMapRemove1$K@@2))) (and (=> (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@40 |m#0@@52| |k#0@@106|) true) (=> true (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@40 |m#0@@52| |k#0@@106|)))) :qid |unknown.0:0| :skolemid |2122| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@40 |m#0@@52| |k#0@@106|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@41 T@U) (|m#0@@53| T@U) (|k#0@@107| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@41) LayerTypeType)) (= (type |m#0@@53|) (IMapType BoxType BoxType))) (= (type |k#0@@107|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@53| |k#0@@107|) (and ($Is |m#0@@53| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@107| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@41) |m#0@@53| |k#0@@107|) (|IMap#Glue| (|lambda#53| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@53|) |k#0@@107|) (|lambda#50| (|IMap#Elements| |m#0@@53|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |2123| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@41) |m#0@@53| |k#0@@107|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@42 T@U) (|m#0@@54| T@U) (|k#0@@108| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@42) LayerTypeType)) (= (type |m#0@@54|) (IMapType BoxType BoxType))) (= (type |k#0@@108|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@54|) (Lit |k#0@@108|)) (and ($Is |m#0@@54| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@108| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@42) (Lit |m#0@@54|) (Lit |k#0@@108|)) (|IMap#Glue| (|lambda#53| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@54|) |k#0@@108|) (|lambda#50| (|IMap#Elements| (Lit |m#0@@54|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2124| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@42) (Lit |m#0@@54|) (Lit |k#0@@108|))) ))))
(assert (forall ((arg0@@390 T@U) (arg1@@174 T@U) (arg2@@125 T@U) (arg3@@97 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@390 arg1@@174 arg2@@125 arg3@@97)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@390 arg1@@174 arg2@@125 arg3@@97)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@55| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@55|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (and ($Is |m#0@@55| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |2125| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@56| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@56|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@56| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (and (=> (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|) true) (=> true (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)))) :qid |unknown.0:0| :skolemid |2126| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)) )))
(assert (forall ((arg0@@391 T@U) (arg1@@175 T@U) (arg2@@126 T@U) ) (! (= (type (|lambda#67| arg0@@391 arg1@@175 arg2@@126)) (MapType0Type BoxType boolType)) :qid |funType:lambda#67| :pattern ( (|lambda#67| arg0@@391 arg1@@175 arg2@@126)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@57| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@57|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (and ($Is |m#0@@57| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (|Map#Glue| (|lambda#67| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@57|)) (|lambda#50| (|Map#Elements| |m#0@@57|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2127| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@58| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@58|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (and ($Is |m#0@@58| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#67| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@58|)) (|lambda#50| (|Map#Elements| (Lit |m#0@@58|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2128| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@392 T@U) (arg1@@176 T@U) (arg2@@127 T@U) (arg3@@98 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@392 arg1@@176 arg2@@127 arg3@@98)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@392 arg1@@176 arg2@@127 arg3@@98)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@59| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@59|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (and ($Is |m#0@@59| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |2129| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@60| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@60| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (and (=> (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|) true) (=> true (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)))) :qid |unknown.0:0| :skolemid |2130| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@61| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (and ($Is |m#0@@61| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (|Map#Glue| (|lambda#67| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@61|) |ks#0@@23|) (|lambda#50| (|Map#Elements| |m#0@@61|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2131| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@62| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (and ($Is |m#0@@62| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (|Map#Glue| (|lambda#67| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@62|) |ks#0@@24|) (|lambda#50| (|Map#Elements| (Lit |m#0@@62|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2132| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@63| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@63|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (and ($Is |m#0@@63| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#67| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@63|) (Lit |ks#0@@25|)) (|lambda#50| (|Map#Elements| (Lit |m#0@@63|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |2133| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@393 T@U) (arg1@@177 T@U) (arg2@@128 T@U) (arg3@@99 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@393 arg1@@177 arg2@@128 arg3@@99)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@393 arg1@@177 arg2@@128 arg3@@99)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@64| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@64|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (and ($Is |m#0@@64| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |2134| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@65| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@65|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@65| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (and (=> (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|) true) (=> true (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)))) :qid |unknown.0:0| :skolemid |2135| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@66| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@66|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (and ($Is |m#0@@66| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (|IMap#Glue| (|lambda#67| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@66|)) (|lambda#50| (|IMap#Elements| |m#0@@66|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |2136| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@67| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@67|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (and ($Is |m#0@@67| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#67| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@67|)) (|lambda#50| (|IMap#Elements| (Lit |m#0@@67|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2137| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@394 T@U) (arg1@@178 T@U) (arg2@@129 T@U) (arg3@@100 T@U) (arg4@@85 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@394 arg1@@178 arg2@@129 arg3@@100 arg4@@85)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@394 arg1@@178 arg2@@129 arg3@@100 arg4@@85)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@43 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@43) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@43) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@43 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |2138| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@43) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@44 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@44 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |2139| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@44) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@45 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@45 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@109| T@U) ) (!  (=> (and (and (= (type |k#0@@109|) BoxType) ($IsBox |k#0@@109| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@109|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@109|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@45 |mapa#0@@1| |mapb#0@@1|)) |k#0@@109|))) :qid |Mapssdfy.114:18| :skolemid |2140| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@45 |mapa#0@@1| |mapb#0@@1|)) |k#0@@109|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@109|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@109|)) ))) (forall ((|k#1@@0| T@U) ) (!  (=> (and (and (= (type |k#1@@0|) BoxType) ($IsBox |k#1@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@45 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|))) :qid |Mapssdfy.115:18| :skolemid |2141| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@45 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@45 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2142| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@45 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@46 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@46 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)) (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@46 |mapa#0@@2| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |2143| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@46 |mapa#0@@2| |mapb#0@@2|)) )))
(assert  (and (forall ((arg0@@395 T@U) (arg1@@179 T@U) (arg2@@130 T@U) ) (! (= (type (|lambda#81| arg0@@395 arg1@@179 arg2@@130)) (MapType0Type BoxType boolType)) :qid |funType:lambda#81| :pattern ( (|lambda#81| arg0@@395 arg1@@179 arg2@@130)) )) (forall ((arg0@@396 T@U) (arg1@@180 T@U) (arg2@@131 T@U) ) (! (= (type (|lambda#82| arg0@@396 arg1@@180 arg2@@131)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#82| :pattern ( (|lambda#82| arg0@@396 arg1@@180 arg2@@131)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@47 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@47) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#81| Maps._default.MapDisjointUnion$U@@3 (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|)) (|lambda#82| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |2144| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@47) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@48 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@48) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#81| Maps._default.MapDisjointUnion$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@4|))) (Lit (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#82| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2145| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@48) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@397 T@U) (arg1@@181 T@U) (arg2@@132 T@U) (arg3@@101 T@U) (arg4@@86 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@397 arg1@@181 arg2@@132 arg3@@101 arg4@@86)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@397 arg1@@181 arg2@@132 arg3@@101 arg4@@86)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@49 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@49) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@49 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |2146| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@49) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@50 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@50) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@50 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |2147| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@50) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@51 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@51) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@51 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@110| T@U) ) (!  (=> (and (and (= (type |k#0@@110|) BoxType) ($IsBox |k#0@@110| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@110|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@51 |mapa#0@@7| |mapb#0@@7|)) |k#0@@110|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@110|))) :qid |Mapssdfy.124:20| :skolemid |2148| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@110|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@51 |mapa#0@@7| |mapb#0@@7|)) |k#0@@110|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@110|)) ))) (forall ((|k#1@@1| T@U) ) (!  (=> (and (and (= (type |k#1@@1|) BoxType) ($IsBox |k#1@@1| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#1@@1|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#1@@1|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@51 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|))) :qid |Mapssdfy.125:20| :skolemid |2149| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@51 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|)) ))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@51 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))) :qid |Mapssdfy.126:20| :skolemid |2150| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@51 |mapa#0@@7| |mapb#0@@7|)) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@51 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2151| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@51 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@52 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@52) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@52 |mapa#0@@8| |mapb#0@@8|) true) (=> true (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@52 |mapa#0@@8| |mapb#0@@8|)))) :qid |unknown.0:0| :skolemid |2152| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@52 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@53 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@53) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#81| Maps._default.MapUnionPreferA$U@@3 (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|)) (|lambda#82| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2153| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@53) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@54 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@54) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@54) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#81| Maps._default.MapUnionPreferA$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@10|))) (Lit (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#82| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2154| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@54) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@398 T@U) (arg1@@182 T@U) (arg2@@133 T@U) (arg3@@102 T@U) (arg4@@87 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@398 arg1@@182 arg2@@133 arg3@@102 arg4@@87)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@398 arg1@@182 arg2@@133 arg3@@102 arg4@@87)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@55 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@55) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@55) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@55 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |2155| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@55) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@56 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@56) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@56 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |2156| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@56) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@57 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@57) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@57 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@111| T@U) ) (!  (=> (and (and (= (type |k#0@@111|) BoxType) ($IsBox |k#0@@111| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@111|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@57 |mapa#0@@13| |mapb#0@@13|)) |k#0@@111|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@111|))) :qid |Mapssdfy.133:20| :skolemid |2157| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@111|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@57 |mapa#0@@13| |mapb#0@@13|)) |k#0@@111|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@111|)) ))) (forall ((|k#1@@2| T@U) ) (!  (=> (and (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#1@@2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#1@@2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@57 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|))) :qid |Mapssdfy.134:20| :skolemid |2158| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@57 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|)) ))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@57 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))) :qid |Mapssdfy.135:20| :skolemid |2159| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@57 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@57 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2160| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@57 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@58 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@58) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@58 |mapa#0@@14| |mapb#0@@14|) true) (=> true (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@58 |mapa#0@@14| |mapb#0@@14|)))) :qid |unknown.0:0| :skolemid |2161| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@58 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@59 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@59) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@59) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#81| Maps._default.MapUnionPreferB$U@@3 (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|)) (|lambda#82| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2162| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@59) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@60 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@60) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@60) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#81| Maps._default.MapUnionPreferB$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@16|))) (Lit (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#82| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2163| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@60) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@399 T@U) (arg1@@183 T@U) (arg2@@134 T@U) (arg3@@103 T@U) (arg4@@88 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@399 arg1@@183 arg2@@134 arg3@@103 arg4@@88)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@399 arg1@@183 arg2@@134 arg3@@103 arg4@@88)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@61 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@61) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@61) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@61 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |2164| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@61) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@62 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@62) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@62 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |2165| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@62) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@63 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@63) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@112| T@U) ) (!  (=> (and (and (= (type |k#0@@112|) BoxType) ($IsBox |k#0@@112| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#0@@112|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#0@@112|))))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@112|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|)) |k#0@@112|))) :qid |Mapssdfy.144:18| :skolemid |2166| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|)) |k#0@@112|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@112|)) ))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#1@@3|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#1@@3|))))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|))) :qid |Mapssdfy.145:18| :skolemid |2167| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|)) ))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#2@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#2@@1|)))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)))) :qid |Mapssdfy.146:18| :skolemid |2168| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2169| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@63 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@64 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@64) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (and (=> (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@64 |mapa#0@@20| |mapb#0@@20|) true) (=> true (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@64 |mapa#0@@20| |mapb#0@@20|)))) :qid |unknown.0:0| :skolemid |2170| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@64 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@65 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@65) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@65) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |2171| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@65) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@66 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@66) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@66) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |2172| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@66) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@400 T@U) (arg1@@184 T@U) (arg2@@135 T@U) (arg3@@104 T@U) (arg4@@89 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@400 arg1@@184 arg2@@135 arg3@@104 arg4@@89)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@400 arg1@@184 arg2@@135 arg3@@104 arg4@@89)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@67 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@67) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@67) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@67 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |2173| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@67) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@68 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@68) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@68 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |2174| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@68) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@69 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@69) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@69 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@113| T@U) ) (!  (=> (and (and (= (type |k#0@@113|) BoxType) ($IsBox |k#0@@113| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@113|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@69 |mapa#0@@25| |mapb#0@@25|)) |k#0@@113|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@113|))) :qid |Mapssdfy.153:20| :skolemid |2175| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@113|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@69 |mapa#0@@25| |mapb#0@@25|)) |k#0@@113|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@113|)) ))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#1@@4|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#1@@4|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@69 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|))) :qid |Mapssdfy.154:20| :skolemid |2176| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@69 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|)) ))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@69 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))) :qid |Mapssdfy.155:20| :skolemid |2177| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@69 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@69 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |2178| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@69 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@70 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@70) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@70 |mapa#0@@26| |mapb#0@@26|) true) (=> true (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@70 |mapa#0@@26| |mapb#0@@26|)))) :qid |unknown.0:0| :skolemid |2179| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@70 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@71 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@71) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@71) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#81| Maps._default.IMapUnionPreferA$U@@3 (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|)) (|lambda#82| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |2180| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@71) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@72 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@72) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@72) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#81| Maps._default.IMapUnionPreferA$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@28|))) (Lit (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#82| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2181| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@72) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@401 T@U) (arg1@@185 T@U) (arg2@@136 T@U) (arg3@@105 T@U) (arg4@@90 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@401 arg1@@185 arg2@@136 arg3@@105 arg4@@90)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@401 arg1@@185 arg2@@136 arg3@@105 arg4@@90)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@73 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@73) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@73) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@73 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |2182| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@73) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@74 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@74) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@74 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |2183| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@74) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@75 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@75) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@75 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@114| T@U) ) (!  (=> (and (and (= (type |k#0@@114|) BoxType) ($IsBox |k#0@@114| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@114|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@75 |mapa#0@@31| |mapb#0@@31|)) |k#0@@114|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@114|))) :qid |Mapssdfy.162:20| :skolemid |2184| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@114|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@75 |mapa#0@@31| |mapb#0@@31|)) |k#0@@114|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@114|)) ))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#1@@5|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#1@@5|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@75 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|))) :qid |Mapssdfy.163:20| :skolemid |2185| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@75 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|)) ))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@75 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))) :qid |Mapssdfy.164:20| :skolemid |2186| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@75 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@75 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |2187| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@75 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@76 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@76) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@76 |mapa#0@@32| |mapb#0@@32|) true) (=> true (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@76 |mapa#0@@32| |mapb#0@@32|)))) :qid |unknown.0:0| :skolemid |2188| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@76 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@77 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@77) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@77) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#81| Maps._default.IMapUnionPreferB$U@@3 (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|)) (|lambda#82| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |2189| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@77) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@78 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@78) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@78) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#81| Maps._default.IMapUnionPreferB$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@34|))) (Lit (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#82| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2190| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@78) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@402 T@U) (arg1@@186 T@U) (arg2@@137 T@U) (arg3@@106 T@U) (arg4@@91 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@402 arg1@@186 arg2@@137 arg3@@106 arg4@@91)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@402 arg1@@186 arg2@@137 arg3@@106 arg4@@91)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@79 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@79) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@79) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@79 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |2191| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@79) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@80 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@80) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@80 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |2192| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@80) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@81 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@81) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@115| T@U) ) (!  (=> (and (and (= (type |k#0@@115|) BoxType) ($IsBox |k#0@@115| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#0@@115|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#0@@115|))))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@115|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|)) |k#0@@115|))) :qid |Mapssdfy.173:18| :skolemid |2193| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|)) |k#0@@115|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@115|)) ))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#1@@6|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#1@@6|))))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|))) :qid |Mapssdfy.174:18| :skolemid |2194| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|)) ))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#2@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#2@@4|)))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)))) :qid |Mapssdfy.175:18| :skolemid |2195| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |2196| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@81 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@82 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@82) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (and (=> (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@82 |mapa#0@@38| |mapb#0@@38|) true) (=> true (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@82 |mapa#0@@38| |mapb#0@@38|)))) :qid |unknown.0:0| :skolemid |2197| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@82 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@83 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@83) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@83) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |2198| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@83) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@84 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@84) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@84) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |2199| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@84) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@403 T@U) (arg1@@187 T@U) (arg2@@138 T@U) (arg3@@107 T@U) (arg4@@92 T@U) (arg5@@64 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@403 arg1@@187 arg2@@138 arg3@@107 arg4@@92 arg5@@64)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@403 arg1@@187 arg2@@138 arg3@@107 arg4@@92 arg5@@64)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@85 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@85) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@85) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@85 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |2200| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@85) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@86 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@86) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@86 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |2201| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@86) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@87 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@87) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@116| T@U) ) (!  (=> (and (and (= (type |k#0@@116|) BoxType) ($IsBox |k#0@@116| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@116|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@116|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@116|))) :qid |Mapssdfy.185:18| :skolemid |2202| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@116|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@116|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@116|)) ))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|))) :qid |Mapssdfy.186:18| :skolemid |2203| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|)) ))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))) :qid |Mapssdfy.187:18| :skolemid |2204| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |2205| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@87 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@88 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@88) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@88 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|)))) (=> (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))) (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@88 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)))) :qid |unknown.0:0| :skolemid |2206| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@88 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert  (and (forall ((arg0@@404 T@U) (arg1@@188 T@U) (arg2@@139 T@U) (arg3@@108 T@U) ) (! (= (type (|lambda#101| arg0@@404 arg1@@188 arg2@@139 arg3@@108)) (MapType0Type BoxType boolType)) :qid |funType:lambda#101| :pattern ( (|lambda#101| arg0@@404 arg1@@188 arg2@@139 arg3@@108)) )) (forall ((arg0@@405 T@U) (arg1@@189 T@U) (arg2@@140 T@U) (arg3@@109 T@U) (arg4@@93 T@U) ) (! (= (type (|lambda#102| arg0@@405 arg1@@189 arg2@@140 arg3@@109 arg4@@93)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#102| :pattern ( (|lambda#102| arg0@@405 arg1@@189 arg2@@140 arg3@@109 arg4@@93)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@89 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@89) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@89) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#101| Maps._default.MapDisjointUnion3$U@@3 (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Domain| |mapc#0@@3|)) (|lambda#102| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |2207| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@89) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@90 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@90) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@90) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#101| Maps._default.MapDisjointUnion3$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@46|))) (Lit (|Map#Domain| (Lit |mapb#0@@46|))) (Lit (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#102| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |2208| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@90) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@406 T@U) (arg1@@190 T@U) (arg2@@141 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@406 arg1@@190 arg2@@141)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@406 arg1@@190 arg2@@141)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@68| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@68|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) ($Is |m#0@@68| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |2209| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@69| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@69|) (MapType BoxType BoxType))) ($Is |m#0@@69| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (and (=> (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|) true) (=> true (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)))) :qid |unknown.0:0| :skolemid |2210| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)) )))
(assert (forall ((arg0@@407 T@U) (arg1@@191 T@U) ) (! (= (type (|lambda#105| arg0@@407 arg1@@191)) (MapType0Type BoxType boolType)) :qid |funType:lambda#105| :pattern ( (|lambda#105| arg0@@407 arg1@@191)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@70| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@70|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) ($Is |m#0@@70| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) (|IMap#Glue| (|lambda#105| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@70|)) (|lambda#50| (|Map#Elements| |m#0@@70|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |2211| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@71| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@71|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) ($Is |m#0@@71| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) (|IMap#Glue| (|lambda#105| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@71|)) (|lambda#50| (|Map#Elements| (Lit |m#0@@71|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |2212| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|))) ))))
(assert (forall ((arg0@@408 T@U) (arg1@@192 T@U) (arg2@@142 T@U) (arg3@@110 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@408 arg1@@192 arg2@@142 arg3@@110)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@408 arg1@@192 arg2@@142 arg3@@110)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@72| T@U) (|key#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@72|) (MapType BoxType BoxType))) (= (type |key#0@@5|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@5|) (and ($Is |m#0@@72| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@5| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@5|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |2213| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@5|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@73| T@U) (|key#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (= (type |key#0@@6|) BoxType)) (and ($Is |m#0@@73| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@6| Maps._default.MapLookupOption$K@@0))) (and (=> (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@6|) true) (=> true (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@6|)))) :qid |unknown.0:0| :skolemid |2214| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@74| T@U) (|key#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) (= (type |key#0@@7|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@7|) (and ($Is |m#0@@74| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@7| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@7|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@74|) |key#0@@7|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@74|) |key#0@@7|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2215| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@7|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@75| T@U) (|key#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (= (type |key#0@@8|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@8|) (and ($Is |m#0@@75| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@8| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@8|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@75|) |key#0@@8|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@75|)) |key#0@@8|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2216| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@8|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@76| T@U) (|key#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (= (type |key#0@@9|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@9|)) (and ($Is |m#0@@76| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@9| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@9|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@76|) |key#0@@9|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@76|)) (Lit |key#0@@9|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2217| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@9|))) ))))
(assert (forall ((arg0@@409 T@U) (arg1@@193 T@U) (arg2@@143 T@U) (arg3@@111 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@409 arg1@@193 arg2@@143 arg3@@111)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@409 arg1@@193 arg2@@143 arg3@@111)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@77| T@U) (|key#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@77|) (IMapType BoxType BoxType))) (= (type |key#0@@10|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@10|) (and ($Is |m#0@@77| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@10| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@10|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |2218| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@10|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@78| T@U) (|key#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@78|) (IMapType BoxType BoxType))) (= (type |key#0@@11|) BoxType)) (and ($Is |m#0@@78| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@11| Maps._default.ImapLookupOption$K@@0))) (and (=> (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@11|) true) (=> true (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@11|)))) :qid |unknown.0:0| :skolemid |2219| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@79| T@U) (|key#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@79|) (IMapType BoxType BoxType))) (= (type |key#0@@12|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@12|) (and ($Is |m#0@@79| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@12| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@12|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@79|) |key#0@@12|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@79|) |key#0@@12|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |2220| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@80| T@U) (|key#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@80|) (IMapType BoxType BoxType))) (= (type |key#0@@13|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@13|)) (and ($Is |m#0@@80| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@13| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@13|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@80|) |key#0@@13|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@80|)) (Lit |key#0@@13|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |2221| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@13|))) ))))
(assert (= (DatatypeCtorId |#ThreeStateTypes.SyncReqStatus.State1|) |##ThreeStateTypes.SyncReqStatus.State1|))
(assert (forall ((d@@120 T@U) ) (!  (=> (= (type d@@120) DatatypeTypeType) (and (=> (ThreeStateTypes.SyncReqStatus.State1_q d@@120) (= (DatatypeCtorId d@@120) |##ThreeStateTypes.SyncReqStatus.State1|)) (=> (= (DatatypeCtorId d@@120) |##ThreeStateTypes.SyncReqStatus.State1|) (ThreeStateTypes.SyncReqStatus.State1_q d@@120)))) :qid |unknown.0:0| :skolemid |2222| :pattern ( (ThreeStateTypes.SyncReqStatus.State1_q d@@120)) )))
(assert (forall ((d@@121 T@U) ) (!  (=> (and (= (type d@@121) DatatypeTypeType) (ThreeStateTypes.SyncReqStatus.State1_q d@@121)) (= d@@121 |#ThreeStateTypes.SyncReqStatus.State1|)) :qid |unknown.0:0| :skolemid |2223| :pattern ( (ThreeStateTypes.SyncReqStatus.State1_q d@@121)) )))
(assert ($Is |#ThreeStateTypes.SyncReqStatus.State1| Tclass.ThreeStateTypes.SyncReqStatus))
(assert (forall (($h@@110 T@U) ) (!  (=> (and (= (type $h@@110) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@110)) ($IsAlloc |#ThreeStateTypes.SyncReqStatus.State1| Tclass.ThreeStateTypes.SyncReqStatus $h@@110)) :qid |DafnyPre.521:12| :skolemid |2224| :pattern ( ($IsAlloc |#ThreeStateTypes.SyncReqStatus.State1| Tclass.ThreeStateTypes.SyncReqStatus $h@@110)) )))
(assert (= |#ThreeStateTypes.SyncReqStatus.State1| (Lit |#ThreeStateTypes.SyncReqStatus.State1|)))
(assert (= (type |#ThreeStateTypes.SyncReqStatus.State2|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#ThreeStateTypes.SyncReqStatus.State2|) |##ThreeStateTypes.SyncReqStatus.State2|))
(assert (forall ((d@@122 T@U) ) (!  (=> (= (type d@@122) DatatypeTypeType) (and (=> (ThreeStateTypes.SyncReqStatus.State2_q d@@122) (= (DatatypeCtorId d@@122) |##ThreeStateTypes.SyncReqStatus.State2|)) (=> (= (DatatypeCtorId d@@122) |##ThreeStateTypes.SyncReqStatus.State2|) (ThreeStateTypes.SyncReqStatus.State2_q d@@122)))) :qid |unknown.0:0| :skolemid |2225| :pattern ( (ThreeStateTypes.SyncReqStatus.State2_q d@@122)) )))
(assert (forall ((d@@123 T@U) ) (!  (=> (and (= (type d@@123) DatatypeTypeType) (ThreeStateTypes.SyncReqStatus.State2_q d@@123)) (= d@@123 |#ThreeStateTypes.SyncReqStatus.State2|)) :qid |unknown.0:0| :skolemid |2226| :pattern ( (ThreeStateTypes.SyncReqStatus.State2_q d@@123)) )))
(assert ($Is |#ThreeStateTypes.SyncReqStatus.State2| Tclass.ThreeStateTypes.SyncReqStatus))
(assert (forall (($h@@111 T@U) ) (!  (=> (and (= (type $h@@111) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@111)) ($IsAlloc |#ThreeStateTypes.SyncReqStatus.State2| Tclass.ThreeStateTypes.SyncReqStatus $h@@111)) :qid |DafnyPre.521:12| :skolemid |2227| :pattern ( ($IsAlloc |#ThreeStateTypes.SyncReqStatus.State2| Tclass.ThreeStateTypes.SyncReqStatus $h@@111)) )))
(assert (= |#ThreeStateTypes.SyncReqStatus.State2| (Lit |#ThreeStateTypes.SyncReqStatus.State2|)))
(assert (= (DatatypeCtorId |#ThreeStateTypes.SyncReqStatus.State3|) |##ThreeStateTypes.SyncReqStatus.State3|))
(assert (forall ((d@@124 T@U) ) (!  (=> (= (type d@@124) DatatypeTypeType) (and (=> (ThreeStateTypes.SyncReqStatus.State3_q d@@124) (= (DatatypeCtorId d@@124) |##ThreeStateTypes.SyncReqStatus.State3|)) (=> (= (DatatypeCtorId d@@124) |##ThreeStateTypes.SyncReqStatus.State3|) (ThreeStateTypes.SyncReqStatus.State3_q d@@124)))) :qid |unknown.0:0| :skolemid |2228| :pattern ( (ThreeStateTypes.SyncReqStatus.State3_q d@@124)) )))
(assert (forall ((d@@125 T@U) ) (!  (=> (and (= (type d@@125) DatatypeTypeType) (ThreeStateTypes.SyncReqStatus.State3_q d@@125)) (= d@@125 |#ThreeStateTypes.SyncReqStatus.State3|)) :qid |unknown.0:0| :skolemid |2229| :pattern ( (ThreeStateTypes.SyncReqStatus.State3_q d@@125)) )))
(assert ($Is |#ThreeStateTypes.SyncReqStatus.State3| Tclass.ThreeStateTypes.SyncReqStatus))
(assert (forall (($h@@112 T@U) ) (!  (=> (and (= (type $h@@112) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@112)) ($IsAlloc |#ThreeStateTypes.SyncReqStatus.State3| Tclass.ThreeStateTypes.SyncReqStatus $h@@112)) :qid |DafnyPre.521:12| :skolemid |2230| :pattern ( ($IsAlloc |#ThreeStateTypes.SyncReqStatus.State3| Tclass.ThreeStateTypes.SyncReqStatus $h@@112)) )))
(assert (= |#ThreeStateTypes.SyncReqStatus.State3| (Lit |#ThreeStateTypes.SyncReqStatus.State3|)))
(assert (forall ((d@@126 T@U) ) (!  (=> (and (= (type d@@126) DatatypeTypeType) (|$IsA#ThreeStateTypes.SyncReqStatus| d@@126)) (or (or (ThreeStateTypes.SyncReqStatus.State1_q d@@126) (ThreeStateTypes.SyncReqStatus.State2_q d@@126)) (ThreeStateTypes.SyncReqStatus.State3_q d@@126))) :qid |unknown.0:0| :skolemid |2231| :pattern ( (|$IsA#ThreeStateTypes.SyncReqStatus| d@@126)) )))
(assert (forall ((d@@127 T@U) ) (!  (=> (and (= (type d@@127) DatatypeTypeType) ($Is d@@127 Tclass.ThreeStateTypes.SyncReqStatus)) (or (or (ThreeStateTypes.SyncReqStatus.State1_q d@@127) (ThreeStateTypes.SyncReqStatus.State2_q d@@127)) (ThreeStateTypes.SyncReqStatus.State3_q d@@127))) :qid |unknown.0:0| :skolemid |2232| :pattern ( (ThreeStateTypes.SyncReqStatus.State3_q d@@127) ($Is d@@127 Tclass.ThreeStateTypes.SyncReqStatus)) :pattern ( (ThreeStateTypes.SyncReqStatus.State2_q d@@127) ($Is d@@127 Tclass.ThreeStateTypes.SyncReqStatus)) :pattern ( (ThreeStateTypes.SyncReqStatus.State1_q d@@127) ($Is d@@127 Tclass.ThreeStateTypes.SyncReqStatus)) )))
(assert (forall ((a@@173 T@U) (b@@104 T@U) ) (!  (=> (and (and (= (type a@@173) DatatypeTypeType) (= (type b@@104) DatatypeTypeType)) (and (ThreeStateTypes.SyncReqStatus.State1_q a@@173) (ThreeStateTypes.SyncReqStatus.State1_q b@@104))) (and (=> (|ThreeStateTypes.SyncReqStatus#Equal| a@@173 b@@104) true) (=> true (|ThreeStateTypes.SyncReqStatus#Equal| a@@173 b@@104)))) :qid |unknown.0:0| :skolemid |2233| :pattern ( (|ThreeStateTypes.SyncReqStatus#Equal| a@@173 b@@104) (ThreeStateTypes.SyncReqStatus.State1_q a@@173)) :pattern ( (|ThreeStateTypes.SyncReqStatus#Equal| a@@173 b@@104) (ThreeStateTypes.SyncReqStatus.State1_q b@@104)) )))
(assert (forall ((a@@174 T@U) (b@@105 T@U) ) (!  (=> (and (and (= (type a@@174) DatatypeTypeType) (= (type b@@105) DatatypeTypeType)) (and (ThreeStateTypes.SyncReqStatus.State2_q a@@174) (ThreeStateTypes.SyncReqStatus.State2_q b@@105))) (and (=> (|ThreeStateTypes.SyncReqStatus#Equal| a@@174 b@@105) true) (=> true (|ThreeStateTypes.SyncReqStatus#Equal| a@@174 b@@105)))) :qid |unknown.0:0| :skolemid |2234| :pattern ( (|ThreeStateTypes.SyncReqStatus#Equal| a@@174 b@@105) (ThreeStateTypes.SyncReqStatus.State2_q a@@174)) :pattern ( (|ThreeStateTypes.SyncReqStatus#Equal| a@@174 b@@105) (ThreeStateTypes.SyncReqStatus.State2_q b@@105)) )))
(assert (forall ((a@@175 T@U) (b@@106 T@U) ) (!  (=> (and (and (= (type a@@175) DatatypeTypeType) (= (type b@@106) DatatypeTypeType)) (and (ThreeStateTypes.SyncReqStatus.State3_q a@@175) (ThreeStateTypes.SyncReqStatus.State3_q b@@106))) (and (=> (|ThreeStateTypes.SyncReqStatus#Equal| a@@175 b@@106) true) (=> true (|ThreeStateTypes.SyncReqStatus#Equal| a@@175 b@@106)))) :qid |unknown.0:0| :skolemid |2235| :pattern ( (|ThreeStateTypes.SyncReqStatus#Equal| a@@175 b@@106) (ThreeStateTypes.SyncReqStatus.State3_q a@@175)) :pattern ( (|ThreeStateTypes.SyncReqStatus#Equal| a@@175 b@@106) (ThreeStateTypes.SyncReqStatus.State3_q b@@106)) )))
(assert (forall ((a@@176 T@U) (b@@107 T@U) ) (!  (=> (and (= (type a@@176) DatatypeTypeType) (= (type b@@107) DatatypeTypeType)) (and (=> (|ThreeStateTypes.SyncReqStatus#Equal| a@@176 b@@107) (= a@@176 b@@107)) (=> (= a@@176 b@@107) (|ThreeStateTypes.SyncReqStatus#Equal| a@@176 b@@107)))) :qid |unknown.0:0| :skolemid |2236| :pattern ( (|ThreeStateTypes.SyncReqStatus#Equal| a@@176 b@@107)) )))
(assert (= (type Tclass.ThreeStateTypes.__default) TyType))
(assert (= (Tag Tclass.ThreeStateTypes.__default) Tagclass.ThreeStateTypes.__default))
(assert (forall ((bx@@143 T@U) ) (!  (=> (and (= (type bx@@143) BoxType) ($IsBox bx@@143 Tclass.ThreeStateTypes.__default)) (and (= ($Box ($Unbox refType bx@@143)) bx@@143) ($Is ($Unbox refType bx@@143) Tclass.ThreeStateTypes.__default))) :qid |unknown.0:0| :skolemid |2237| :pattern ( ($IsBox bx@@143 Tclass.ThreeStateTypes.__default)) )))
(assert (forall (($o@@25 T@U) ) (!  (=> (= (type $o@@25) refType) (and (=> ($Is $o@@25 Tclass.ThreeStateTypes.__default) (or (= $o@@25 null) (= (dtype $o@@25) Tclass.ThreeStateTypes.__default))) (=> (or (= $o@@25 null) (= (dtype $o@@25) Tclass.ThreeStateTypes.__default)) ($Is $o@@25 Tclass.ThreeStateTypes.__default)))) :qid |unknown.0:0| :skolemid |2238| :pattern ( ($Is $o@@25 Tclass.ThreeStateTypes.__default)) )))
(assert (forall (($o@@26 T@U) ($h@@113 T@U) ) (!  (=> (and (= (type $o@@26) refType) (= (type $h@@113) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@26 Tclass.ThreeStateTypes.__default $h@@113) (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@113 $o@@26) alloc)))) (=> (or (= $o@@26 null) (U_2_bool (MapType1Select (MapType0Select $h@@113 $o@@26) alloc))) ($IsAlloc $o@@26 Tclass.ThreeStateTypes.__default $h@@113)))) :qid |unknown.0:0| :skolemid |2239| :pattern ( ($IsAlloc $o@@26 Tclass.ThreeStateTypes.__default $h@@113)) )))
(assert  (=> true (forall ((|syncReqs#0| T@U) ) (!  (=> (and (= (type |syncReqs#0|) (MapType BoxType BoxType)) (or (|ThreeStateTypes.__default.SyncReqs2to1#canCall| |syncReqs#0|) ($Is |syncReqs#0| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) ($Is (ThreeStateTypes.__default.SyncReqs2to1 |syncReqs#0|) (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus))) :qid |ThreeSta.20:25| :skolemid |2240| :pattern ( (ThreeStateTypes.__default.SyncReqs2to1 |syncReqs#0|)) ))))
(assert (forall ((|syncReqs#0@@0| T@U) ) (!  (=> (and (= (type |syncReqs#0@@0|) (MapType BoxType BoxType)) ($Is |syncReqs#0@@0| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus))) (and (=> (|ThreeStateTypes.__default.SyncReqs2to1#requires| |syncReqs#0@@0|) true) (=> true (|ThreeStateTypes.__default.SyncReqs2to1#requires| |syncReqs#0@@0|)))) :qid |ThreeSta.20:25| :skolemid |2241| :pattern ( (|ThreeStateTypes.__default.SyncReqs2to1#requires| |syncReqs#0@@0|)) )))
(assert  (and (forall ((arg0@@410 T@U) ) (! (= (type (|lambda#109| arg0@@410)) (MapType0Type BoxType boolType)) :qid |funType:lambda#109| :pattern ( (|lambda#109| arg0@@410)) )) (forall ((arg0@@411 T@U) (arg1@@194 T@U) (arg2@@144 T@U) (arg3@@112 T@U) (arg4@@94 T@U) ) (! (= (type (|lambda#110| arg0@@411 arg1@@194 arg2@@144 arg3@@112 arg4@@94)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#110| :pattern ( (|lambda#110| arg0@@411 arg1@@194 arg2@@144 arg3@@112 arg4@@94)) ))))
(assert  (=> true (forall ((|syncReqs#0@@1| T@U) ) (!  (=> (and (= (type |syncReqs#0@@1|) (MapType BoxType BoxType)) (or (|ThreeStateTypes.__default.SyncReqs2to1#canCall| |syncReqs#0@@1|) ($Is |syncReqs#0@@1| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) (= (ThreeStateTypes.__default.SyncReqs2to1 |syncReqs#0@@1|) (|Map#Glue| (|lambda#109| (|Map#Domain| |syncReqs#0@@1|)) (|lambda#110| (|Map#Elements| |syncReqs#0@@1|) |#ThreeStateTypes.SyncReqStatus.State1| (|Map#Elements| |syncReqs#0@@1|) |#ThreeStateTypes.SyncReqStatus.State1| |#ThreeStateTypes.SyncReqStatus.State3|) (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) :qid |ThreeSta.20:25| :skolemid |2242| :pattern ( (ThreeStateTypes.__default.SyncReqs2to1 |syncReqs#0@@1|)) ))))
(assert  (=> true (forall ((|syncReqs#0@@2| T@U) ) (!  (=> (and (= (type |syncReqs#0@@2|) (MapType BoxType BoxType)) (or (|ThreeStateTypes.__default.SyncReqs2to1#canCall| (Lit |syncReqs#0@@2|)) ($Is |syncReqs#0@@2| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) (= (ThreeStateTypes.__default.SyncReqs2to1 (Lit |syncReqs#0@@2|)) (|Map#Glue| (|lambda#109| (|Map#Domain| |syncReqs#0@@2|)) (|lambda#110| (|Map#Elements| (Lit |syncReqs#0@@2|)) |#ThreeStateTypes.SyncReqStatus.State1| (|Map#Elements| (Lit |syncReqs#0@@2|)) |#ThreeStateTypes.SyncReqStatus.State1| |#ThreeStateTypes.SyncReqStatus.State3|) (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) :qid |ThreeSta.20:25| :weight 3 :skolemid |2243| :pattern ( (ThreeStateTypes.__default.SyncReqs2to1 (Lit |syncReqs#0@@2|))) ))))
(assert  (=> true (forall ((|syncReqs#0@@3| T@U) ) (!  (=> (and (= (type |syncReqs#0@@3|) (MapType BoxType BoxType)) (or (|ThreeStateTypes.__default.SyncReqs3to2#canCall| |syncReqs#0@@3|) ($Is |syncReqs#0@@3| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) ($Is (ThreeStateTypes.__default.SyncReqs3to2 |syncReqs#0@@3|) (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus))) :qid |ThreeSta.30:25| :skolemid |2244| :pattern ( (ThreeStateTypes.__default.SyncReqs3to2 |syncReqs#0@@3|)) ))))
(assert (forall ((|syncReqs#0@@4| T@U) ) (!  (=> (and (= (type |syncReqs#0@@4|) (MapType BoxType BoxType)) ($Is |syncReqs#0@@4| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus))) (and (=> (|ThreeStateTypes.__default.SyncReqs3to2#requires| |syncReqs#0@@4|) true) (=> true (|ThreeStateTypes.__default.SyncReqs3to2#requires| |syncReqs#0@@4|)))) :qid |ThreeSta.30:25| :skolemid |2245| :pattern ( (|ThreeStateTypes.__default.SyncReqs3to2#requires| |syncReqs#0@@4|)) )))
(assert  (=> true (forall ((|syncReqs#0@@5| T@U) ) (!  (=> (and (= (type |syncReqs#0@@5|) (MapType BoxType BoxType)) (or (|ThreeStateTypes.__default.SyncReqs3to2#canCall| |syncReqs#0@@5|) ($Is |syncReqs#0@@5| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) (= (ThreeStateTypes.__default.SyncReqs3to2 |syncReqs#0@@5|) (|Map#Glue| (|lambda#109| (|Map#Domain| |syncReqs#0@@5|)) (|lambda#110| (|Map#Elements| |syncReqs#0@@5|) |#ThreeStateTypes.SyncReqStatus.State1| (|Map#Elements| |syncReqs#0@@5|) |#ThreeStateTypes.SyncReqStatus.State2| |#ThreeStateTypes.SyncReqStatus.State2|) (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) :qid |ThreeSta.30:25| :skolemid |2246| :pattern ( (ThreeStateTypes.__default.SyncReqs3to2 |syncReqs#0@@5|)) ))))
(assert  (=> true (forall ((|syncReqs#0@@6| T@U) ) (!  (=> (and (= (type |syncReqs#0@@6|) (MapType BoxType BoxType)) (or (|ThreeStateTypes.__default.SyncReqs3to2#canCall| (Lit |syncReqs#0@@6|)) ($Is |syncReqs#0@@6| (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) (= (ThreeStateTypes.__default.SyncReqs3to2 (Lit |syncReqs#0@@6|)) (|Map#Glue| (|lambda#109| (|Map#Domain| |syncReqs#0@@6|)) (|lambda#110| (|Map#Elements| (Lit |syncReqs#0@@6|)) |#ThreeStateTypes.SyncReqStatus.State1| (|Map#Elements| (Lit |syncReqs#0@@6|)) |#ThreeStateTypes.SyncReqStatus.State2| |#ThreeStateTypes.SyncReqStatus.State2|) (TMap TInt Tclass.ThreeStateTypes.SyncReqStatus)))) :qid |ThreeSta.30:25| :weight 3 :skolemid |2247| :pattern ( (ThreeStateTypes.__default.SyncReqs3to2 (Lit |syncReqs#0@@6|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (forall ((bx@@144 T@U) ) (!  (=> (and (= (type bx@@144) BoxType) ($IsBox bx@@144 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@144)) bx@@144) ($Is ($Unbox refType bx@@144) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |2248| :pattern ( ($IsBox bx@@144 Tclass.Sequences.__default)) )))
(assert (forall (($o@@27 T@U) ) (!  (=> (= (type $o@@27) refType) (and (=> ($Is $o@@27 Tclass.Sequences.__default) (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Sequences.__default))) (=> (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Sequences.__default)) ($Is $o@@27 Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |2249| :pattern ( ($Is $o@@27 Tclass.Sequences.__default)) )))
(assert (forall (($o@@28 T@U) ($h@@114 T@U) ) (!  (=> (and (= (type $o@@28) refType) (= (type $h@@114) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@28 Tclass.Sequences.__default $h@@114) (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@114 $o@@28) alloc)))) (=> (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@114 $o@@28) alloc))) ($IsAlloc $o@@28 Tclass.Sequences.__default $h@@114)))) :qid |unknown.0:0| :skolemid |2250| :pattern ( ($IsAlloc $o@@28 Tclass.Sequences.__default $h@@114)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@195 T@U) ) (! (= (type (Sequences.__default.Last arg0@@412 arg1@@195)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@412 arg1@@195)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0|) (and ($Is |run#0| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |2251| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq Sequences._default.Last$E@@0))) (and (=> (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0)) (=> (> (|Seq#Length| |run#0@@0|) 0) (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)))) :qid |unknown.0:0| :skolemid |2252| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |2253| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2254| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@413 T@U) (arg1@@196 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@413 arg1@@196)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@413 arg1@@196)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |2255| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq Sequences._default.DropLast$E@@0))) (and (=> (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0)) (=> (> (|Seq#Length| |run#0@@4|) 0) (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)))) :qid |unknown.0:0| :skolemid |2256| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |2257| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2258| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (forall ((arg0@@414 T@U) (arg1@@197 T@U) ) (! (= (type (Sequences.__default.Set arg0@@414 arg1@@197)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@414 arg1@@197)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@7|) ($Is |run#0@@7| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |2259| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Set$T@@0))) (and (=> (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|) true) (=> true (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)))) :qid |unknown.0:0| :skolemid |2260| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)) )))
(assert (forall ((arg0@@415 T@U) (arg1@@198 T@U) (arg2@@145 Int) ) (! (= (type (|lambda#117| arg0@@415 arg1@@198 arg2@@145)) (MapType0Type BoxType boolType)) :qid |funType:lambda#117| :pattern ( (|lambda#117| arg0@@415 arg1@@198 arg2@@145)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@9|) ($Is |run#0@@9| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|) (|lambda#117| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@9|) 0))) :qid |unknown.0:0| :skolemid |2261| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@10|)) ($Is |run#0@@10| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|)) (|lambda#117| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@10|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2262| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@416 T@U) (arg1@@199 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@416 arg1@@199)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@416 arg1@@199)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |2263| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.ISet$T@@0))) (and (=> (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|) true) (=> true (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)))) :qid |unknown.0:0| :skolemid |2264| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|) (|lambda#117| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@13|) 0))) :qid |unknown.0:0| :skolemid |2265| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) (|lambda#117| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@14|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2266| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@91 T@U) (|a#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |a#0@@1|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@91) |a#0@@1|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@91 |a#0@@1|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@91 |a#0@@1|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@91) |a#0@@1|)))) :qid |unknown.0:0| :skolemid |2267| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@91) |a#0@@1|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@92 T@U) (|a#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |a#0@@2|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@92 |a#0@@2|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@2|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@2|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@92 |a#0@@2|)))) :qid |unknown.0:0| :skolemid |2268| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@92) |a#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@93 T@U) (|a#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |a#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@3|) ($Is |a#0@@3| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |2269| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@93 |a#0@@3|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@94 T@U) (|a#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |a#0@@4|) (SeqType BoxType))) ($Is |a#0@@4| (TSeq Sequences._default.NoDupes$T@@2))) (and (=> (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@94 |a#0@@4|) true) (=> true (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@94 |a#0@@4|)))) :qid |unknown.0:0| :skolemid |2270| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@94 |a#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@95 T@U) (|a#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |a#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@5|) ($Is |a#0@@5| (TSeq Sequences._default.NoDupes$T@@3)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@95) |a#0@@5|) (forall ((|i#0@@29| Int) (|j#0@@5| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| (|Seq#Length| |a#0@@5|))) (and (<= (LitInt 0) |j#0@@5|) (< |j#0@@5| (|Seq#Length| |a#0@@5|)))) (not (= |i#0@@29| |j#0@@5|))) (not (= (|Seq#Index| |a#0@@5| |i#0@@29|) (|Seq#Index| |a#0@@5| |j#0@@5|))))) :qid |sequence.54:13| :skolemid |2271| :pattern ( (|Seq#Index| |a#0@@5| |j#0@@5|) (|Seq#Index| |a#0@@5| |i#0@@29|)) ))) (=> (forall ((|i#0@@30| Int) (|j#0@@6| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@30|) (< |i#0@@30| (|Seq#Length| |a#0@@5|))) (and (<= (LitInt 0) |j#0@@6|) (< |j#0@@6| (|Seq#Length| |a#0@@5|)))) (not (= |i#0@@30| |j#0@@6|))) (not (= (|Seq#Index| |a#0@@5| |i#0@@30|) (|Seq#Index| |a#0@@5| |j#0@@6|))))) :qid |sequence.54:13| :skolemid |2271| :pattern ( (|Seq#Index| |a#0@@5| |j#0@@6|) (|Seq#Index| |a#0@@5| |i#0@@30|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@95) |a#0@@5|)))) :qid |unknown.0:0| :skolemid |2272| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@95) |a#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@96 T@U) (|a#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |a#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@6|)) ($Is |a#0@@6| (TSeq Sequences._default.NoDupes$T@@4)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@96) (Lit |a#0@@6|)) (forall ((|i#1@@5| Int) (|j#1@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| (Lit |a#0@@6|)))) (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| (|Seq#Length| (Lit |a#0@@6|))))) (not (= |i#1@@5| |j#1@@0|))) (not (= (|Seq#Index| (Lit |a#0@@6|) |i#1@@5|) (|Seq#Index| (Lit |a#0@@6|) |j#1@@0|))))) :qid |sequence.54:13| :skolemid |2273| :pattern ( (|Seq#Index| |a#0@@6| |j#1@@0|) (|Seq#Index| |a#0@@6| |i#1@@5|)) ))) (=> (forall ((|i#1@@6| Int) (|j#1@@1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| (|Seq#Length| (Lit |a#0@@6|)))) (and (<= (LitInt 0) |j#1@@1|) (< |j#1@@1| (|Seq#Length| (Lit |a#0@@6|))))) (not (= |i#1@@6| |j#1@@1|))) (not (= (|Seq#Index| (Lit |a#0@@6|) |i#1@@6|) (|Seq#Index| (Lit |a#0@@6|) |j#1@@1|))))) :qid |sequence.54:13| :skolemid |2273| :pattern ( (|Seq#Index| |a#0@@6| |j#1@@1|) (|Seq#Index| |a#0@@6| |i#1@@6|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@96) (Lit |a#0@@6|))))) :qid |unknown.0:0| :weight 3 :skolemid |2274| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@96) (Lit |a#0@@6|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@88| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@88|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@88| |e#0|) (and (and ($Is |s#0@@88| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@88| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@88| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@88| |e#0|) (|Seq#Length| |s#0@@88|))) (= (|Seq#Index| |s#0@@88| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@88| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |2275| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@88| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@5 T@U) (|s#0@@89| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |s#0@@89|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@5) ($Is |s#0@@89| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (and (=> (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@89| |e#0@@0|) (|Seq#Contains| |s#0@@89| |e#0@@0|)) (=> (|Seq#Contains| |s#0@@89| |e#0@@0|) (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@89| |e#0@@0|)))) :qid |unknown.0:0| :skolemid |2276| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@89| |e#0@@0|) ($IsGoodHeap $Heap@@5)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@45 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@45) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@45 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e) (|Seq#Length| s@@45))) (= (|Seq#Index| s@@45 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) e))) :qid |sequence.105:5| :skolemid |2277| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@6 T@U) (|s#0@@90| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |s#0@@90|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@6) ($Is |s#0@@90| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@90| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|) (let ((|i#0@@31| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|))) |i#0@@31|)))) :qid |unknown.0:0| :skolemid |2278| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@90| |e#0@@1|) ($IsGoodHeap $Heap@@6)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@7 T@U) (|s#0@@91| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |s#0@@91|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |s#0@@91| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@91| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|) (let ((|i#1@@7| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|))) |i#1@@7|)))) :qid |unknown.0:0| :weight 3 :skolemid |2279| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@91|) |e#0@@2|) ($IsGoodHeap $Heap@@7)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@8 T@U) (|s#0@@92| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@92|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@92| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@92| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)) (let ((|i#2@@2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)))) |i#2@@2|)))) :qid |unknown.0:0| :weight 3 :skolemid |2280| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@92|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@8)) ))))
(assert (forall ((arg0@@417 T@U) (arg1@@200 Int) ) (! (= (type (Sequences.__default.Range arg0@@417 arg1@@200)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@417 arg1@@200)) )))
(assert (forall (($ly@@97 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@97) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@97) |n#0|) (Sequences.__default.Range $ly@@97 |n#0|))) :qid |sequence.109:22| :skolemid |2281| :pattern ( (Sequences.__default.Range ($LS $ly@@97) |n#0|)) )))
(assert (forall (($ly@@98 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@98) LayerTypeType) (= (Sequences.__default.Range $ly@@98 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |sequence.109:22| :skolemid |2282| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@98) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@99 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@99) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@99 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@32| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@32|) (< |i#0@@32| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@99 |n#0@@1|) |i#0@@32|))) |i#0@@32|)) :qid |sequence.112:20| :skolemid |2283| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@99 |n#0@@1|) |i#0@@32|))) ))) ($Is (Sequences.__default.Range $ly@@99 |n#0@@1|) (TSeq TInt)))) :qid |sequence.109:22| :skolemid |2284| :pattern ( (Sequences.__default.Range $ly@@99 |n#0@@1|)) ))))
(assert (forall (($ly@@100 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@100) LayerTypeType) (and (=> (|Sequences.__default.Range#requires| $ly@@100 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|Sequences.__default.Range#requires| $ly@@100 |n#0@@2|)))) :qid |sequence.109:22| :skolemid |2285| :pattern ( (|Sequences.__default.Range#requires| $ly@@100 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@101 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@101) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@101) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@101 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |sequence.109:22| :skolemid |2286| :pattern ( (Sequences.__default.Range ($LS $ly@@101) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@102 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@102) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@102) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@102) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |sequence.109:22| :weight 3 :skolemid |2287| :pattern ( (Sequences.__default.Range ($LS $ly@@102) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@418 T@U) (arg1@@201 T@U) (arg2@@146 T@U) (arg3@@113 T@U) (arg4@@95 T@U) (arg5@@65 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@418 arg1@@201 arg2@@146 arg3@@113 arg4@@95 arg5@@65)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@418 arg1@@201 arg2@@146 arg3@@113 arg4@@95 arg5@@65)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@103 T@U) ($Heap@@9 T@U) (|f#0@@39| T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@103) LayerTypeType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@15|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@103) $Heap@@9 |f#0@@39| |run#0@@15|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@103 $Heap@@9 |f#0@@39| |run#0@@15|))) :qid |unknown.0:0| :skolemid |2288| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@103) $Heap@@9 |f#0@@39| |run#0@@15|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@104 T@U) ($Heap@@10 T@U) (|f#0@@40| T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@104) LayerTypeType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@16|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@104 $Heap@@10 |f#0@@40| |run#0@@16|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@10 |f#0@@40| |run#0@@16|))) :qid |unknown.0:0| :skolemid |2289| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@104) $Heap@@10 |f#0@@40| |run#0@@16|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@105 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@41| T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@105) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@17|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@41| |run#0@@17|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@17| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@29 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@29) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@29 null)) (exists ((|i#0@@33| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@33|) (< |i#0@@33| (|Seq#Length| |run#0@@17|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@41| (|Seq#Index| |run#0@@17| |i#0@@33|)) ($Box |o#0|))))) (= ($Box $o@@29) ($Box |o#0|)))) :qid |sequence.121:15| :skolemid |2290| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@41| (|Seq#Index| |run#0@@17| |i#0@@33|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@29) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@29) $f@@1)))) :qid |unknown.0:0| :skolemid |2291| :no-pattern (type $o@@29) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@29) :no-pattern (U_2_bool $o@@29) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@105 $h0@@1 |f#0@@41| |run#0@@17|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@105 $h1@@1 |f#0@@41| |run#0@@17|))) :qid |unknown.0:0| :skolemid |2292| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@105 $h1@@1 |f#0@@41| |run#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@106 T@U) ($Heap@@11 T@U) (|f#0@@42| T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@106) LayerTypeType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@42| |run#0@@18|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@18| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| (|Seq#Length| |run#0@@18|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@42| (|Seq#Index| |run#0@@18| |i#1@@8|)))) :qid |sequence.118:21| :skolemid |2293| :pattern ( (|Seq#Index| |run#0@@18| |i#1@@8|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@106 $Heap@@11 |f#0@@42| |run#0@@18|)) (|Seq#Length| |run#0@@18|)) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@18|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@106 $Heap@@11 |f#0@@42| |run#0@@18|) |i#2@@3|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@42| (|Seq#Index| |run#0@@18| |i#2@@3|))))) :qid |sequence.120:20| :skolemid |2294| :pattern ( (|Seq#Index| |run#0@@18| |i#2@@3|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@106 $Heap@@11 |f#0@@42| |run#0@@18|) |i#2@@3|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@106 $Heap@@11 |f#0@@42| |run#0@@18|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |2295| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@106 $Heap@@11 |f#0@@42| |run#0@@18|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@107 T@U) ($Heap@@12 T@U) (|f#0@@43| T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@107) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@12) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@19| (TSeq Sequences._default.Apply$E@@3)))) (and (=> (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@107 $Heap@@12 |f#0@@43| |run#0@@19|) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@43| (|Seq#Index| |run#0@@19| |i#3|)))) :qid |sequence.118:21| :skolemid |2296| :pattern ( (|Seq#Index| |run#0@@19| |i#3|)) ))) (=> (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@43| (|Seq#Index| |run#0@@19| |i#3@@0|)))) :qid |sequence.118:21| :skolemid |2296| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@0|)) )) (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@107 $Heap@@12 |f#0@@43| |run#0@@19|)))) :qid |unknown.0:0| :skolemid |2297| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@107 $Heap@@12 |f#0@@43| |run#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@108 T@U) ($Heap@@13 T@U) (|f#0@@44| T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@108) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| |run#0@@20|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@20| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@20|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| (|Seq#Index| |run#0@@20| |i#3@@1|)))) :qid |sequence.118:21| :skolemid |2296| :pattern ( (|Seq#Index| |run#0@@20| |i#3@@1|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@20|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| (|Seq#Drop| |run#0@@20| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@108) $Heap@@13 |f#0@@44| |run#0@@20|) (ite (= (|Seq#Length| |run#0@@20|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@44| (|Seq#Index| |run#0@@20| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@108 $Heap@@13 |f#0@@44| (|Seq#Drop| |run#0@@20| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2298| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@108) $Heap@@13 |f#0@@44| |run#0@@20|)) ))))
(assert (forall ((arg0@@419 T@U) (arg1@@202 T@U) (arg2@@147 T@U) (arg3@@114 T@U) (arg4@@96 T@U) (arg5@@66 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@419 arg1@@202 arg2@@147 arg3@@114 arg4@@96 arg5@@66)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@419 arg1@@202 arg2@@147 arg3@@114 arg4@@96 arg5@@66)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@109 T@U) ($Heap@@14 T@U) (|f#0@@45| T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@109) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@45|) HandleTypeType)) (= (type |run#0@@21|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@109) $Heap@@14 |f#0@@45| |run#0@@21|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@109 $Heap@@14 |f#0@@45| |run#0@@21|))) :qid |unknown.0:0| :skolemid |2299| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@109) $Heap@@14 |f#0@@45| |run#0@@21|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@110 T@U) ($Heap@@15 T@U) (|f#0@@46| T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@110) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@46|) HandleTypeType)) (= (type |run#0@@22|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@110 $Heap@@15 |f#0@@46| |run#0@@22|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@15 |f#0@@46| |run#0@@22|))) :qid |unknown.0:0| :skolemid |2300| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@110) $Heap@@15 |f#0@@46| |run#0@@22|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@111 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@47| T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@111) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@47|) HandleTypeType)) (= (type |run#0@@23|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@47| |run#0@@23|) (and ($Is |f#0@@47| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@23| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@30 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@30) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@30 null)) (exists ((|i#0@@34| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| (|Seq#Length| |run#0@@23|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@47| (|Seq#Index| |run#0@@23| |i#0@@34|)) ($Box |o#0@@0|))))) (= ($Box $o@@30) ($Box |o#0@@0|)))) :qid |sequence.132:15| :skolemid |2301| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@47| (|Seq#Index| |run#0@@23| |i#0@@34|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@30) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@30) $f@@2)))) :qid |unknown.0:0| :skolemid |2302| :no-pattern (type $o@@30) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@30) :no-pattern (U_2_bool $o@@30) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@111 $h0@@2 |f#0@@47| |run#0@@23|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@111 $h1@@2 |f#0@@47| |run#0@@23|))) :qid |unknown.0:0| :skolemid |2303| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@111 $h1@@2 |f#0@@47| |run#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@112 T@U) ($Heap@@16 T@U) (|f#0@@48| T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@112) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |run#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@48| |run#0@@24|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@48| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@24| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@9|) (< |i#1@@9| (|Seq#Length| |run#0@@24|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@48| (|Seq#Index| |run#0@@24| |i#1@@9|)))) :qid |sequence.129:21| :skolemid |2304| :pattern ( (|Seq#Index| |run#0@@24| |i#1@@9|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@112 $Heap@@16 |f#0@@48| |run#0@@24|)) (|Seq#Length| |run#0@@24|)) (forall ((|i#2@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@4|) (< |i#2@@4| (|Seq#Length| |run#0@@24|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@112 $Heap@@16 |f#0@@48| |run#0@@24|) |i#2@@4|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@48| (|Seq#Index| |run#0@@24| |i#2@@4|))))) :qid |sequence.131:20| :skolemid |2305| :pattern ( (|Seq#Index| |run#0@@24| |i#2@@4|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@112 $Heap@@16 |f#0@@48| |run#0@@24|) |i#2@@4|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@112 $Heap@@16 |f#0@@48| |run#0@@24|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |2306| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@112 $Heap@@16 |f#0@@48| |run#0@@24|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@113 T@U) ($Heap@@17 T@U) (|f#0@@49| T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@113) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |run#0@@25|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@49| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@25| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (and (=> (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@113 $Heap@@17 |f#0@@49| |run#0@@25|) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@49| (|Seq#Index| |run#0@@25| |i#3@@2|)))) :qid |sequence.129:21| :skolemid |2307| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@2|)) ))) (=> (forall ((|i#3@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@49| (|Seq#Index| |run#0@@25| |i#3@@3|)))) :qid |sequence.129:21| :skolemid |2307| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@3|)) )) (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@113 $Heap@@17 |f#0@@49| |run#0@@25|)))) :qid |unknown.0:0| :skolemid |2308| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@113 $Heap@@17 |f#0@@49| |run#0@@25|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@114 T@U) ($Heap@@18 T@U) (|f#0@@50| T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@114) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@50| |run#0@@26|) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@50| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@26| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |run#0@@26|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@50| (|Seq#Index| |run#0@@26| |i#3@@4|)))) :qid |sequence.129:21| :skolemid |2307| :pattern ( (|Seq#Index| |run#0@@26| |i#3@@4|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@50| |run#0@@26|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@114) $Heap@@18 |f#0@@50| |run#0@@26|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@18 |f#0@@50| |run#0@@26|)))) :qid |unknown.0:0| :skolemid |2309| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@114) $Heap@@18 |f#0@@50| |run#0@@26|)) ))))
(assert (forall ((arg0@@420 T@U) (arg1@@203 T@U) (arg2@@148 T@U) (arg3@@115 T@U) (arg4@@97 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@420 arg1@@203 arg2@@148 arg3@@115 arg4@@97)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@420 arg1@@203 arg2@@148 arg3@@115 arg4@@97)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@115 T@U) ($Heap@@19 T@U) (|f#0@@51| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@115) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@115) $Heap@@19 |f#0@@51| |run#0@@27|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@115 $Heap@@19 |f#0@@51| |run#0@@27|))) :qid |unknown.0:0| :skolemid |2310| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@115) $Heap@@19 |f#0@@51| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@116 T@U) ($Heap@@20 T@U) (|f#0@@52| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@116) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@52|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@116 $Heap@@20 |f#0@@52| |run#0@@28|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@20 |f#0@@52| |run#0@@28|))) :qid |unknown.0:0| :skolemid |2311| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@116) $Heap@@20 |f#0@@52| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@117 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@53| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@117) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@53|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@53| |run#0@@29|) (and ($Is |f#0@@53| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@29| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@31 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@31) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@31 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@53| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@31) ($Box |_o0#0|)))) :qid |sequence.141:13| :skolemid |2312| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@31) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@31) $f@@3)))) :qid |unknown.0:0| :skolemid |2313| :no-pattern (type $o@@31) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@31) :no-pattern (U_2_bool $o@@31) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@117 $h0@@3 |f#0@@53| |run#0@@29|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@117 $h1@@3 |f#0@@53| |run#0@@29|))) :qid |unknown.0:0| :skolemid |2314| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@117 $h1@@3 |f#0@@53| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@118 T@U) ($Heap@@21 T@U) (|f#0@@54| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@118) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@54|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@21 |f#0@@54| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@54| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@30| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@35| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@54| (|Seq#Index| |run#0@@30| |i#0@@35|)))) :qid |sequence.138:21| :skolemid |2315| :pattern ( (|Seq#Index| |run#0@@30| |i#0@@35|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@118 $Heap@@21 |f#0@@54| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#1@@10| Int) ) (!  (=> (<= (LitInt 0) |i#1@@10|) (=> (and (< |i#1@@10| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@118 $Heap@@21 |f#0@@54| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@54| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@118 $Heap@@21 |f#0@@54| |run#0@@30|) |i#1@@10|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@54| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@118 $Heap@@21 |f#0@@54| |run#0@@30|) |i#1@@10|)))))) :qid |sequence.140:20| :skolemid |2316| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@118 $Heap@@21 |f#0@@54| |run#0@@30|) |i#1@@10|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@118 $Heap@@21 |f#0@@54| |run#0@@30|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |2317| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@118 $Heap@@21 |f#0@@54| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@119 T@U) ($Heap@@22 T@U) (|f#0@@55| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@119) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@55| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@31| (TSeq Sequences._default.Filter$E@@3)))) (and (=> (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@119 $Heap@@22 |f#0@@55| |run#0@@31|) (forall ((|i#2@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@55| (|Seq#Index| |run#0@@31| |i#2@@5|)))) :qid |sequence.138:21| :skolemid |2318| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@5|)) ))) (=> (forall ((|i#2@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@6|) (< |i#2@@6| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@55| (|Seq#Index| |run#0@@31| |i#2@@6|)))) :qid |sequence.138:21| :skolemid |2318| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@6|)) )) (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@119 $Heap@@22 |f#0@@55| |run#0@@31|)))) :qid |unknown.0:0| :skolemid |2319| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@119 $Heap@@22 |f#0@@55| |run#0@@31|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@120 T@U) ($Heap@@23 T@U) (|f#0@@56| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@120) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@56| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@56| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@32| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@7|) (< |i#2@@7| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@56| (|Seq#Index| |run#0@@32| |i#2@@7|)))) :qid |sequence.138:21| :skolemid |2318| :pattern ( (|Seq#Index| |run#0@@32| |i#2@@7|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@56| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@120) $Heap@@23 |f#0@@56| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@56| (|Seq#Index| |run#0@@32| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@32| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@120 $Heap@@23 |f#0@@56| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2320| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@120) $Heap@@23 |f#0@@56| |run#0@@32|)) ))))
(assert (forall ((arg0@@421 T@U) (arg1@@204 T@U) (arg2@@149 T@U) (arg3@@116 T@U) (arg4@@98 T@U) (arg5@@67 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@421 arg1@@204 arg2@@149 arg3@@116 arg4@@98 arg5@@67)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@421 arg1@@204 arg2@@149 arg3@@116 arg4@@98 arg5@@67)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@121 T@U) (|f#0@@57| T@U) (|init#0| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@121) LayerTypeType)) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@121) |f#0@@57| |init#0| |run#0@@33|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@121 |f#0@@57| |init#0| |run#0@@33|))) :qid |unknown.0:0| :skolemid |2321| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@121) |f#0@@57| |init#0| |run#0@@33|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@122 T@U) (|f#0@@58| T@U) (|init#0@@0| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@122) LayerTypeType)) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@122 |f#0@@58| |init#0@@0| |run#0@@34|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@58| |init#0@@0| |run#0@@34|))) :qid |unknown.0:0| :skolemid |2322| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@122) |f#0@@58| |init#0@@0| |run#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@123 T@U) (|f#0@@59| T@U) (|init#0@@1| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@123) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@59| |init#0@@1| |run#0@@35|) (and (and ($Is |f#0@@59| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@35| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@123 |f#0@@59| |init#0@@1| |run#0@@35|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |2323| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@123 |f#0@@59| |init#0@@1| |run#0@@35|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@124 T@U) ($Heap@@24 T@U) (|f#0@@60| T@U) (|init#0@@2| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@124) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@36|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@60| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@36| (TSeq Sequences._default.FoldLeft$E@@2)))) (and (=> (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@124 |f#0@@60| |init#0@@2| |run#0@@36|) true) (=> true (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@124 |f#0@@60| |init#0@@2| |run#0@@36|)))) :qid |unknown.0:0| :skolemid |2324| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@124 |f#0@@60| |init#0@@2| |run#0@@36|) ($IsGoodHeap $Heap@@24)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@125 T@U) ($Heap@@25 T@U) (|f#0@@61| T@U) (|init#0@@3| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@125) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@61| |init#0@@3| |run#0@@37|) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@37| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@37|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@61| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@61| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@125) |f#0@@61| |init#0@@3| |run#0@@37|) (ite (= (|Seq#Length| |run#0@@37|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@125 |f#0@@61| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@61| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |2325| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@125) |f#0@@61| |init#0@@3| |run#0@@37|) ($IsGoodHeap $Heap@@25)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@126 T@U) ($Heap@@26 T@U) (|f#0@@62| T@U) (|init#0@@4| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@126) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@62| |init#0@@4| (Lit |run#0@@38|)) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@38| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@62| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@62| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@126) |f#0@@62| |init#0@@4| (Lit |run#0@@38|)) (ite (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@126) |f#0@@62| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@62| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2326| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@126) |f#0@@62| |init#0@@4| (Lit |run#0@@38|)) ($IsGoodHeap $Heap@@26)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@127 T@U) ($Heap@@27 T@U) (|f#0@@63| T@U) (|init#0@@5| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@127) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@63|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@39| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@63|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@63|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@127) (Lit |f#0@@63|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (ite (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@127) (Lit |f#0@@63|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@63|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2327| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@127) (Lit |f#0@@63|) (Lit |init#0@@5|) (Lit |run#0@@39|)) ($IsGoodHeap $Heap@@27)) ))))
(assert (forall ((arg0@@422 T@U) (arg1@@205 T@U) (arg2@@150 T@U) (arg3@@117 T@U) (arg4@@99 T@U) (arg5@@68 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@422 arg1@@205 arg2@@150 arg3@@117 arg4@@99 arg5@@68)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@422 arg1@@205 arg2@@150 arg3@@117 arg4@@99 arg5@@68)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@128 T@U) (|f#0@@64| T@U) (|init#0@@6| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@128) LayerTypeType)) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@128) |f#0@@64| |init#0@@6| |run#0@@40|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@128 |f#0@@64| |init#0@@6| |run#0@@40|))) :qid |unknown.0:0| :skolemid |2328| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@128) |f#0@@64| |init#0@@6| |run#0@@40|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@129 T@U) (|f#0@@65| T@U) (|init#0@@7| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@129) LayerTypeType)) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@41|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@129 |f#0@@65| |init#0@@7| |run#0@@41|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@65| |init#0@@7| |run#0@@41|))) :qid |unknown.0:0| :skolemid |2329| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@129) |f#0@@65| |init#0@@7| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@130 T@U) (|f#0@@66| T@U) (|init#0@@8| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@130) LayerTypeType)) (= (type |f#0@@66|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@66| |init#0@@8| |run#0@@42|) (and (and ($Is |f#0@@66| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@42| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@130 |f#0@@66| |init#0@@8| |run#0@@42|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |2330| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@130 |f#0@@66| |init#0@@8| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@131 T@U) ($Heap@@28 T@U) (|f#0@@67| T@U) (|init#0@@9| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@131) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@67|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@67| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@43| (TSeq Sequences._default.FoldRight$E@@2)))) (and (=> (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@131 |f#0@@67| |init#0@@9| |run#0@@43|) true) (=> true (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@131 |f#0@@67| |init#0@@9| |run#0@@43|)))) :qid |unknown.0:0| :skolemid |2331| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@131 |f#0@@67| |init#0@@9| |run#0@@43|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@132 T@U) ($Heap@@29 T@U) (|f#0@@68| T@U) (|init#0@@10| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@132) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@68|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@68| |init#0@@10| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@68| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@44| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@68| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@132) |f#0@@68| |init#0@@10| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@29 |f#0@@68| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@132 |f#0@@68| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1))) (|Seq#Index| |run#0@@44| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |2332| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@132) |f#0@@68| |init#0@@10| |run#0@@44|) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@133 T@U) ($Heap@@30 T@U) (|f#0@@69| T@U) (|init#0@@11| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@133) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@69|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@69| |init#0@@11| (Lit |run#0@@45|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@69| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@45| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@69| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@133) |f#0@@69| |init#0@@11| (Lit |run#0@@45|)) (ite (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@30 |f#0@@69| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@133) |f#0@@69| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@45|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2333| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@133) |f#0@@69| |init#0@@11| (Lit |run#0@@45|)) ($IsGoodHeap $Heap@@30)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@134 T@U) ($Heap@@31 T@U) (|f#0@@70| T@U) (|init#0@@12| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@134) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@70|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@70| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@46| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@134) (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (ite (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@31 (Lit |f#0@@70|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@134) (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@46|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2334| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@134) (Lit |f#0@@70|) (Lit |init#0@@12|) (Lit |run#0@@46|)) ($IsGoodHeap $Heap@@31)) ))))
(assert (forall ((arg0@@423 T@U) (arg1@@206 T@U) (arg2@@151 T@U) (arg3@@118 T@U) (arg4@@100 T@U) (arg5@@69 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@423 arg1@@206 arg2@@151 arg3@@118 arg4@@100 arg5@@69)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@423 arg1@@206 arg2@@151 arg3@@118 arg4@@100 arg5@@69)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@135 T@U) (|f#0@@71| T@U) (|init#0@@13| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@135) LayerTypeType)) (= (type |f#0@@71|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@135) |f#0@@71| |init#0@@13| |run#0@@47|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@135 |f#0@@71| |init#0@@13| |run#0@@47|))) :qid |unknown.0:0| :skolemid |2335| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@135) |f#0@@71| |init#0@@13| |run#0@@47|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@136 T@U) (|f#0@@72| T@U) (|init#0@@14| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@136) LayerTypeType)) (= (type |f#0@@72|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@136 |f#0@@72| |init#0@@14| |run#0@@48|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@72| |init#0@@14| |run#0@@48|))) :qid |unknown.0:0| :skolemid |2336| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@136) |f#0@@72| |init#0@@14| |run#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@137 T@U) (|f#0@@73| T@U) (|init#0@@15| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@137) LayerTypeType)) (= (type |f#0@@73|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@73| |init#0@@15| |run#0@@49|) (and (and ($Is |f#0@@73| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@49| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@137 |f#0@@73| |init#0@@15| |run#0@@49|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |2337| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@137 |f#0@@73| |init#0@@15| |run#0@@49|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@138 T@U) ($Heap@@32 T@U) (|f#0@@74| T@U) (|init#0@@16| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@138) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@74|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@74| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@50| (TSeq Sequences._default.FoldFromRight$E@@2)))) (and (=> (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@138 |f#0@@74| |init#0@@16| |run#0@@50|) true) (=> true (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@138 |f#0@@74| |init#0@@16| |run#0@@50|)))) :qid |unknown.0:0| :skolemid |2338| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@138 |f#0@@74| |init#0@@16| |run#0@@50|) ($IsGoodHeap $Heap@@32)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@139 T@U) ($Heap@@33 T@U) (|f#0@@75| T@U) (|init#0@@17| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@139) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@75|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@75| |init#0@@17| |run#0@@51|) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@75| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@51| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@51|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@75| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@139) |f#0@@75| |init#0@@17| |run#0@@51|) (ite (= (|Seq#Length| |run#0@@51|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@33 |f#0@@75| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@139 |f#0@@75| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@51|)))))) :qid |unknown.0:0| :skolemid |2339| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@139) |f#0@@75| |init#0@@17| |run#0@@51|) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@140 T@U) ($Heap@@34 T@U) (|f#0@@76| T@U) (|init#0@@18| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@140) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@76|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@76| |init#0@@18| (Lit |run#0@@52|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@76| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@52| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@76| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@140) |f#0@@76| |init#0@@18| (Lit |run#0@@52|)) (ite (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@34 |f#0@@76| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@140) |f#0@@76| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2340| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@140) |f#0@@76| |init#0@@18| (Lit |run#0@@52|)) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@141 T@U) ($Heap@@35 T@U) (|f#0@@77| T@U) (|init#0@@19| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@141) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@77|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@77| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@53| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@141) (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (ite (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@35 (Lit |f#0@@77|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@141) (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2341| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@141) (Lit |f#0@@77|) (Lit |init#0@@19|) (Lit |run#0@@53|)) ($IsGoodHeap $Heap@@35)) ))))
(assert (forall ((arg0@@424 T@U) (arg1@@207 T@U) (arg2@@152 T@U) (arg3@@119 Int) ) (! (= (type (Sequences.__default.remove arg0@@424 arg1@@207 arg2@@152 arg3@@119)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@424 arg1@@207 arg2@@152 arg3@@119)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@142 T@U) (|s#0@@93| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |s#0@@93|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@142) |s#0@@93| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@142 |s#0@@93| |pos#0|))) :qid |unknown.0:0| :skolemid |2342| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@142) |s#0@@93| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@143 T@U) (|s#0@@94| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |s#0@@94|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@143 |s#0@@94| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@94| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |2343| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@143) |s#0@@94| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@144 T@U) (|s#0@@95| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |s#0@@95|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@95| |pos#0@@1|) (and ($Is |s#0@@95| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@95|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@144 |s#0@@95| |pos#0@@1|)) (- (|Seq#Length| |s#0@@95|) 1)) (forall ((|i#0@@36| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@36|) (< |i#0@@36| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@144 |s#0@@95| |pos#0@@1|) |i#0@@36|) (|Seq#Index| |s#0@@95| |i#0@@36|))) :qid |sequence.168:18| :skolemid |2344| :pattern ( (|Seq#Index| |s#0@@95| |i#0@@36|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@144 |s#0@@95| |pos#0@@1|) |i#0@@36|)) ))) (forall ((|i#1@@11| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@11|) (< |i#1@@11| (- (|Seq#Length| |s#0@@95|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@144 |s#0@@95| |pos#0@@1|) |i#1@@11|) (|Seq#Index| |s#0@@95| (+ |i#1@@11| 1)))) :qid |sequence.169:18| :skolemid |2345| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@144 |s#0@@95| |pos#0@@1|) |i#1@@11|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@144 |s#0@@95| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |2346| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@144 |s#0@@95| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@145 T@U) (|s#0@@96| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |s#0@@96|) (SeqType BoxType))) ($Is |s#0@@96| (TSeq Sequences._default.remove$A@@2))) (and (=> (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@145 |s#0@@96| |pos#0@@2|) (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@96|)))) (=> (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@96|))) (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@145 |s#0@@96| |pos#0@@2|)))) :qid |unknown.0:0| :skolemid |2347| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@145 |s#0@@96| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@146 T@U) (|s#0@@97| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |s#0@@97|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@97| |pos#0@@3|) (and ($Is |s#0@@97| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@97|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@146) |s#0@@97| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@97| |pos#0@@3|) (|Seq#Drop| |s#0@@97| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |2348| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@146) |s#0@@97| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@147 T@U) (|s#0@@98| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |s#0@@98|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@98|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@98| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@98|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@147) (Lit |s#0@@98|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@98|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@98|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2349| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@147) (Lit |s#0@@98|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@425 T@U) (arg1@@208 T@U) (arg2@@153 T@U) (arg3@@120 T@U) (arg4@@101 Int) ) (! (= (type (Sequences.__default.insert arg0@@425 arg1@@208 arg2@@153 arg3@@120 arg4@@101)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@425 arg1@@208 arg2@@153 arg3@@120 arg4@@101)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@148 T@U) (|s#0@@99| T@U) (|a#0@@7| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |s#0@@99|) (SeqType BoxType))) (= (type |a#0@@7|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@148) |s#0@@99| |a#0@@7| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@148 |s#0@@99| |a#0@@7| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |2350| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@148) |s#0@@99| |a#0@@7| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@149 T@U) (|s#0@@100| T@U) (|a#0@@8| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |s#0@@100|) (SeqType BoxType))) (= (type |a#0@@8|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@149 |s#0@@100| |a#0@@8| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@100| |a#0@@8| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |2351| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@149) |s#0@@100| |a#0@@8| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@150 T@U) (|s#0@@101| T@U) (|a#0@@9| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |s#0@@101|) (SeqType BoxType))) (= (type |a#0@@9|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@101| |a#0@@9| |pos#0@@7|) (and (and ($Is |s#0@@101| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@9| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@101|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@150 |s#0@@101| |a#0@@9| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@101|) 1)) (forall ((|i#0@@37| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@37|) (< |i#0@@37| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@150 |s#0@@101| |a#0@@9| |pos#0@@7|) |i#0@@37|) (|Seq#Index| |s#0@@101| |i#0@@37|)))) :qid |sequence.177:18| :skolemid |2352| :pattern ( (|Seq#Index| |s#0@@101| |i#0@@37|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@150 |s#0@@101| |a#0@@9| |pos#0@@7|) |i#0@@37|)) ))) (forall ((|i#1@@12| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@12|) (< |i#1@@12| (|Seq#Length| |s#0@@101|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@150 |s#0@@101| |a#0@@9| |pos#0@@7|) (+ |i#1@@12| 1)) (|Seq#Index| |s#0@@101| |i#1@@12|)))) :qid |sequence.178:18| :skolemid |2353| :pattern ( (|Seq#Index| |s#0@@101| |i#1@@12|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@150 |s#0@@101| |a#0@@9| |pos#0@@7|) |pos#0@@7|) |a#0@@9|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@150 |s#0@@101| |a#0@@9| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |2354| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@150 |s#0@@101| |a#0@@9| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@151 T@U) (|s#0@@102| T@U) (|a#0@@10| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |s#0@@102|) (SeqType BoxType))) (= (type |a#0@@10|) BoxType)) (and ($Is |s#0@@102| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@10| Sequences._default.insert$A@@2))) (and (=> (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@151 |s#0@@102| |a#0@@10| |pos#0@@8|) (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@102|)))) (=> (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@102|))) (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@151 |s#0@@102| |a#0@@10| |pos#0@@8|)))) :qid |unknown.0:0| :skolemid |2355| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@151 |s#0@@102| |a#0@@10| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@152 T@U) (|s#0@@103| T@U) (|a#0@@11| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@152) LayerTypeType)) (= (type |s#0@@103|) (SeqType BoxType))) (= (type |a#0@@11|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@103| |a#0@@11| |pos#0@@9|) (and (and ($Is |s#0@@103| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@11| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@103|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@152) |s#0@@103| |a#0@@11| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@103| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@11|)) (|Seq#Drop| |s#0@@103| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |2356| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@152) |s#0@@103| |a#0@@11| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@153 T@U) (|s#0@@104| T@U) (|a#0@@12| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@153) LayerTypeType)) (= (type |s#0@@104|) (SeqType BoxType))) (= (type |a#0@@12|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@104|) |a#0@@12| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@104| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@12| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@104|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@153) (Lit |s#0@@104|) |a#0@@12| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@104|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@12|)) (|Seq#Drop| (Lit |s#0@@104|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |2357| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@153) (Lit |s#0@@104|) |a#0@@12| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@154 T@U) (|s#0@@105| T@U) (|a#0@@13| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@154) LayerTypeType)) (= (type |s#0@@105|) (SeqType BoxType))) (= (type |a#0@@13|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@105|) (Lit |a#0@@13|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@105| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@13| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@105|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@154) (Lit |s#0@@105|) (Lit |a#0@@13|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@105|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@13|))) (|Seq#Drop| (Lit |s#0@@105|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |2358| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@154) (Lit |s#0@@105|) (Lit |a#0@@13|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@426 T@U) (arg1@@209 T@U) (arg2@@154 T@U) (arg3@@121 T@U) (arg4@@102 T@U) (arg5@@70 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@426 arg1@@209 arg2@@154 arg3@@121 arg4@@102 arg5@@70)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@426 arg1@@209 arg2@@154 arg3@@121 arg4@@102 arg5@@70)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@155 T@U) (|s#0@@106| T@U) (|a#0@@14| T@U) (|b#0@@1| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |s#0@@106|) (SeqType BoxType))) (= (type |a#0@@14|) BoxType)) (= (type |b#0@@1|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@155) |s#0@@106| |a#0@@14| |b#0@@1| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@155 |s#0@@106| |a#0@@14| |b#0@@1| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |2359| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@155) |s#0@@106| |a#0@@14| |b#0@@1| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@156 T@U) (|s#0@@107| T@U) (|a#0@@15| T@U) (|b#0@@2| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |s#0@@107|) (SeqType BoxType))) (= (type |a#0@@15|) BoxType)) (= (type |b#0@@2|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@156 |s#0@@107| |a#0@@15| |b#0@@2| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@107| |a#0@@15| |b#0@@2| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |2360| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@156) |s#0@@107| |a#0@@15| |b#0@@2| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@157 T@U) (|s#0@@108| T@U) (|a#0@@16| T@U) (|b#0@@3| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |s#0@@108|) (SeqType BoxType))) (= (type |a#0@@16|) BoxType)) (= (type |b#0@@3|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@108| |a#0@@16| |b#0@@3| |pos#0@@14|) (and (and (and ($Is |s#0@@108| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@16| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@3| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@108|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@157 |s#0@@108| |a#0@@16| |b#0@@3| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@108|) 1)) (forall ((|i#0@@38| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@157 |s#0@@108| |a#0@@16| |b#0@@3| |pos#0@@14|) |i#0@@38|) (|Seq#Index| |s#0@@108| |i#0@@38|)))) :qid |sequence.202:18| :skolemid |2361| :pattern ( (|Seq#Index| |s#0@@108| |i#0@@38|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@157 |s#0@@108| |a#0@@16| |b#0@@3| |pos#0@@14|) |i#0@@38|)) ))) (forall ((|i#1@@13| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@13|) (< |i#1@@13| (|Seq#Length| |s#0@@108|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@157 |s#0@@108| |a#0@@16| |b#0@@3| |pos#0@@14|) (+ |i#1@@13| 1)) (|Seq#Index| |s#0@@108| |i#1@@13|)))) :qid |sequence.203:18| :skolemid |2362| :pattern ( (|Seq#Index| |s#0@@108| |i#1@@13|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@157 |s#0@@108| |a#0@@16| |b#0@@3| |pos#0@@14|) |pos#0@@14|) |a#0@@16|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@157 |s#0@@108| |a#0@@16| |b#0@@3| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@3|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@157 |s#0@@108| |a#0@@16| |b#0@@3| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |2363| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@157 |s#0@@108| |a#0@@16| |b#0@@3| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@158 T@U) (|s#0@@109| T@U) (|a#0@@17| T@U) (|b#0@@4| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |s#0@@109|) (SeqType BoxType))) (= (type |a#0@@17|) BoxType)) (= (type |b#0@@4|) BoxType)) (and (and ($Is |s#0@@109| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@17| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@4| Sequences._default.replace1with2$A@@2))) (and (=> (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@158 |s#0@@109| |a#0@@17| |b#0@@4| |pos#0@@15|) (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@109|)))) (=> (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@109|))) (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@158 |s#0@@109| |a#0@@17| |b#0@@4| |pos#0@@15|)))) :qid |unknown.0:0| :skolemid |2364| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@158 |s#0@@109| |a#0@@17| |b#0@@4| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@159 T@U) (|s#0@@110| T@U) (|a#0@@18| T@U) (|b#0@@5| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |s#0@@110|) (SeqType BoxType))) (= (type |a#0@@18|) BoxType)) (= (type |b#0@@5|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@110| |a#0@@18| |b#0@@5| |pos#0@@16|) (and (and (and ($Is |s#0@@110| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@18| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@5| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@110|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@159) |s#0@@110| |a#0@@18| |b#0@@5| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@110| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@18|) |b#0@@5|)) (|Seq#Drop| |s#0@@110| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |2365| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@159) |s#0@@110| |a#0@@18| |b#0@@5| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@160 T@U) (|s#0@@111| T@U) (|a#0@@19| T@U) (|b#0@@6| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |s#0@@111|) (SeqType BoxType))) (= (type |a#0@@19|) BoxType)) (= (type |b#0@@6|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@111|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@111| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@19| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@6| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@111|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@160) (Lit |s#0@@111|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@111|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@19|) |b#0@@6|)) (|Seq#Drop| (Lit |s#0@@111|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2366| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@160) (Lit |s#0@@111|) |a#0@@19| |b#0@@6| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@161 T@U) (|s#0@@112| T@U) (|a#0@@20| T@U) (|b#0@@7| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |s#0@@112|) (SeqType BoxType))) (= (type |a#0@@20|) BoxType)) (= (type |b#0@@7|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@112|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@112| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@20| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@7| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@112|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@161) (Lit |s#0@@112|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@112|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@20|)) (Lit |b#0@@7|))) (|Seq#Drop| (Lit |s#0@@112|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2367| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@161) (Lit |s#0@@112|) (Lit |a#0@@20|) (Lit |b#0@@7|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@427 T@U) (arg1@@210 T@U) (arg2@@155 T@U) (arg3@@122 T@U) (arg4@@103 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@427 arg1@@210 arg2@@155 arg3@@122 arg4@@103)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@427 arg1@@210 arg2@@155 arg3@@122 arg4@@103)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@162 T@U) (|s#0@@113| T@U) (|a#0@@21| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |s#0@@113|) (SeqType BoxType))) (= (type |a#0@@21|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@162) |s#0@@113| |a#0@@21| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@162 |s#0@@113| |a#0@@21| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |2368| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@162) |s#0@@113| |a#0@@21| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@163 T@U) (|s#0@@114| T@U) (|a#0@@22| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |s#0@@114|) (SeqType BoxType))) (= (type |a#0@@22|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@163 |s#0@@114| |a#0@@22| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@114| |a#0@@22| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |2369| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@163) |s#0@@114| |a#0@@22| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@164 T@U) (|s#0@@115| T@U) (|a#0@@23| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |s#0@@115|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@115| |a#0@@23| |pos#0@@21|) (and (and ($Is |s#0@@115| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@23| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@115|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@164 |s#0@@115| |a#0@@23| |pos#0@@21|)) (- (|Seq#Length| |s#0@@115|) 1)) (forall ((|i#0@@39| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@39|) (< |i#0@@39| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@164 |s#0@@115| |a#0@@23| |pos#0@@21|) |i#0@@39|) (|Seq#Index| |s#0@@115| |i#0@@39|)))) :qid |sequence.221:18| :skolemid |2370| :pattern ( (|Seq#Index| |s#0@@115| |i#0@@39|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@164 |s#0@@115| |a#0@@23| |pos#0@@21|) |i#0@@39|)) ))) (forall ((|i#1@@14| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@14|) (< |i#1@@14| (- (|Seq#Length| |s#0@@115|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@164 |s#0@@115| |a#0@@23| |pos#0@@21|) |i#1@@14|) (|Seq#Index| |s#0@@115| (+ |i#1@@14| 1))))) :qid |sequence.222:18| :skolemid |2371| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@164 |s#0@@115| |a#0@@23| |pos#0@@21|) |i#1@@14|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@164 |s#0@@115| |a#0@@23| |pos#0@@21|) |pos#0@@21|) |a#0@@23|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@164 |s#0@@115| |a#0@@23| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |2372| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@164 |s#0@@115| |a#0@@23| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@165 T@U) (|s#0@@116| T@U) (|a#0@@24| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |s#0@@116|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (and ($Is |s#0@@116| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@24| Sequences._default.replace2with1$A@@2))) (and (=> (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@165 |s#0@@116| |a#0@@24| |pos#0@@22|) (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@116|) 1)))) (=> (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@116|) 1))) (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@165 |s#0@@116| |a#0@@24| |pos#0@@22|)))) :qid |unknown.0:0| :skolemid |2373| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@165 |s#0@@116| |a#0@@24| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@166 T@U) (|s#0@@117| T@U) (|a#0@@25| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@166) LayerTypeType)) (= (type |s#0@@117|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@117| |a#0@@25| |pos#0@@23|) (and (and ($Is |s#0@@117| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@25| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@117|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@166) |s#0@@117| |a#0@@25| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@117| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@25|)) (|Seq#Drop| |s#0@@117| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |2374| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@166) |s#0@@117| |a#0@@25| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@167 T@U) (|s#0@@118| T@U) (|a#0@@26| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |s#0@@118|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@118|) |a#0@@26| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@118| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@26| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@118|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@167) (Lit |s#0@@118|) |a#0@@26| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@118|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@26|)) (|Seq#Drop| (Lit |s#0@@118|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2375| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@167) (Lit |s#0@@118|) |a#0@@26| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@168 T@U) (|s#0@@119| T@U) (|a#0@@27| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |s#0@@119|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@119|) (Lit |a#0@@27|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@119| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@27| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@119|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@168) (Lit |s#0@@119|) (Lit |a#0@@27|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@119|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@27|))) (|Seq#Drop| (Lit |s#0@@119|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2376| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@168) (Lit |s#0@@119|) (Lit |a#0@@27|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@428 T@U) (arg1@@211 T@U) (arg2@@156 T@U) (arg3@@123 T@U) ) (! (= (type (Sequences.__default.concat arg0@@428 arg1@@211 arg2@@156 arg3@@123)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@428 arg1@@211 arg2@@156 arg3@@123)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@169 T@U) (|a#0@@28| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |a#0@@28|) (SeqType BoxType))) (= (type |b#0@@8|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@169) |a#0@@28| |b#0@@8|) (Sequences.__default.concat Sequences._default.concat$A $ly@@169 |a#0@@28| |b#0@@8|))) :qid |unknown.0:0| :skolemid |2377| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@169) |a#0@@28| |b#0@@8|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@170 T@U) (|a#0@@29| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |a#0@@29|) (SeqType BoxType))) (= (type |b#0@@9|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@170 |a#0@@29| |b#0@@9|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@29| |b#0@@9|))) :qid |unknown.0:0| :skolemid |2378| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@170) |a#0@@29| |b#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@171 T@U) (|a#0@@30| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |a#0@@30|) (SeqType BoxType))) (= (type |b#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@30| |b#0@@10|) (and ($Is |a#0@@30| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@10| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@171 |a#0@@30| |b#0@@10|)) (+ (|Seq#Length| |a#0@@30|) (|Seq#Length| |b#0@@10|))) (forall ((|i#0@@40| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| (|Seq#Length| |a#0@@30|))) (= (|Seq#Index| |a#0@@30| |i#0@@40|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@171 |a#0@@30| |b#0@@10|) |i#0@@40|)))) :qid |sequence.230:18| :skolemid |2379| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@171 |a#0@@30| |b#0@@10|) |i#0@@40|)) :pattern ( (|Seq#Index| |a#0@@30| |i#0@@40|)) ))) (forall ((|i#1@@15| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@15|) (< |i#1@@15| (|Seq#Length| |b#0@@10|))) (= (|Seq#Index| |b#0@@10| |i#1@@15|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@171 |a#0@@30| |b#0@@10|) (+ (|Seq#Length| |a#0@@30|) |i#1@@15|))))) :qid |sequence.231:18| :skolemid |2380| :pattern ( (|Seq#Index| |b#0@@10| |i#1@@15|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@171 |a#0@@30| |b#0@@10|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |2381| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@171 |a#0@@30| |b#0@@10|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@172 T@U) (|a#0@@31| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |a#0@@31|) (SeqType BoxType))) (= (type |b#0@@11|) (SeqType BoxType))) (and ($Is |a#0@@31| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@11| (TSeq Sequences._default.concat$A@@2)))) (and (=> (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@172 |a#0@@31| |b#0@@11|) true) (=> true (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@172 |a#0@@31| |b#0@@11|)))) :qid |unknown.0:0| :skolemid |2382| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@172 |a#0@@31| |b#0@@11|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@173 T@U) (|a#0@@32| T@U) (|b#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |a#0@@32|) (SeqType BoxType))) (= (type |b#0@@12|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@32| |b#0@@12|) (and ($Is |a#0@@32| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@12| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@173) |a#0@@32| |b#0@@12|) (|Seq#Append| |a#0@@32| |b#0@@12|))) :qid |unknown.0:0| :skolemid |2383| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@173) |a#0@@32| |b#0@@12|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@174 T@U) (|a#0@@33| T@U) (|b#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@174) LayerTypeType)) (= (type |a#0@@33|) (SeqType BoxType))) (= (type |b#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@33|) (Lit |b#0@@13|)) (and ($Is |a#0@@33| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@13| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@174) (Lit |a#0@@33|) (Lit |b#0@@13|)) (|Seq#Append| |a#0@@33| |b#0@@13|))) :qid |unknown.0:0| :weight 3 :skolemid |2384| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@174) (Lit |a#0@@33|) (Lit |b#0@@13|))) ))))
(assert (forall ((arg0@@429 T@U) (arg1@@212 T@U) (arg2@@157 T@U) (arg3@@124 T@U) (arg4@@104 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@429 arg1@@212 arg2@@157 arg3@@124 arg4@@104)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@429 arg1@@212 arg2@@157 arg3@@124 arg4@@104)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@175 T@U) (|a#0@@34| T@U) (|b#0@@14| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@175) LayerTypeType)) (= (type |a#0@@34|) (SeqType BoxType))) (= (type |b#0@@14|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@175) |a#0@@34| |b#0@@14| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@175 |a#0@@34| |b#0@@14| |c#0@@3|))) :qid |unknown.0:0| :skolemid |2385| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@175) |a#0@@34| |b#0@@14| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@176 T@U) (|a#0@@35| T@U) (|b#0@@15| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@176) LayerTypeType)) (= (type |a#0@@35|) (SeqType BoxType))) (= (type |b#0@@15|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@176 |a#0@@35| |b#0@@15| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@35| |b#0@@15| |c#0@@4|))) :qid |unknown.0:0| :skolemid |2386| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@176) |a#0@@35| |b#0@@15| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@177 T@U) (|a#0@@36| T@U) (|b#0@@16| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@177) LayerTypeType)) (= (type |a#0@@36|) (SeqType BoxType))) (= (type |b#0@@16|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@36| |b#0@@16| |c#0@@5|) (and (and ($Is |a#0@@36| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@16| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@177 |a#0@@36| |b#0@@16| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@36|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@41| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| (|Seq#Length| |a#0@@36|))) (= (|Seq#Index| |a#0@@36| |i#0@@41|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@177 |a#0@@36| |b#0@@16| |c#0@@5|) |i#0@@41|)))) :qid |sequence.238:18| :skolemid |2387| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@177 |a#0@@36| |b#0@@16| |c#0@@5|) |i#0@@41|)) :pattern ( (|Seq#Index| |a#0@@36| |i#0@@41|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@177 |a#0@@36| |b#0@@16| |c#0@@5|) (|Seq#Length| |a#0@@36|)) |b#0@@16|)) (forall ((|i#1@@16| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@16|) (< |i#1@@16| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@16|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@177 |a#0@@36| |b#0@@16| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@36|) 1) |i#1@@16|))))) :qid |sequence.240:18| :skolemid |2388| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@16|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@177 |a#0@@36| |b#0@@16| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |2389| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@177 |a#0@@36| |b#0@@16| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@178 T@U) (|a#0@@37| T@U) (|b#0@@17| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@178) LayerTypeType)) (= (type |a#0@@37|) (SeqType BoxType))) (= (type |b#0@@17|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@37| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@17| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (and (=> (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@178 |a#0@@37| |b#0@@17| |c#0@@6|) true) (=> true (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@178 |a#0@@37| |b#0@@17| |c#0@@6|)))) :qid |unknown.0:0| :skolemid |2390| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@178 |a#0@@37| |b#0@@17| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@179 T@U) (|a#0@@38| T@U) (|b#0@@18| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@179) LayerTypeType)) (= (type |a#0@@38|) (SeqType BoxType))) (= (type |b#0@@18|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@38| |b#0@@18| |c#0@@7|) (and (and ($Is |a#0@@38| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@18| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@179) |a#0@@38| |b#0@@18| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@38| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@18|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |2391| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@179) |a#0@@38| |b#0@@18| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@180 T@U) (|a#0@@39| T@U) (|b#0@@19| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@180) LayerTypeType)) (= (type |a#0@@39|) (SeqType BoxType))) (= (type |b#0@@19|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@8|)) (and (and ($Is |a#0@@39| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@19| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@180) (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@39| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@19|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |2392| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@180) (Lit |a#0@@39|) |b#0@@19| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@181 T@U) (|a#0@@40| T@U) (|b#0@@20| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@181) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) (= (type |b#0@@20|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@40| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@20| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@181) (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@40| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@20|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |2393| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@181) (Lit |a#0@@40|) (Lit |b#0@@20|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@430 T@U) (arg1@@213 T@U) (arg2@@158 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@430 arg1@@213 arg2@@158)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@430 arg1@@213 arg2@@158)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@182 T@U) (|a#0@@41| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@182) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@182) |a#0@@41|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@182 |a#0@@41|))) :qid |unknown.0:0| :skolemid |2394| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@182) |a#0@@41|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@183 T@U) (|a#0@@42| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@183) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@183 |a#0@@42|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@42|))) :qid |unknown.0:0| :skolemid |2395| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@183) |a#0@@42|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@184 T@U) (|a#0@@43| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |a#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@43|) ($Is |a#0@@43| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@184 |a#0@@43|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |2396| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@184 |a#0@@43|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@185 T@U) (|a#0@@44| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) ($Is |a#0@@44| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (and (=> (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@185 |a#0@@44|) true) (=> true (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@185 |a#0@@44|)))) :qid |unknown.0:0| :skolemid |2397| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@185 |a#0@@44|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@186 T@U) (|a#0@@45| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@186) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@45|) ($Is |a#0@@45| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@45|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@186) |a#0@@45|) (ite (= (|Seq#Length| |a#0@@45|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@186 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@45|))))))) :qid |unknown.0:0| :skolemid |2398| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@186) |a#0@@45|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@187 T@U) (|a#0@@46| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@187) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@46|)) ($Is |a#0@@46| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@46|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@187) (Lit |a#0@@46|)) (ite (= (|Seq#Length| (Lit |a#0@@46|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@187) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@46|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2399| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@187) (Lit |a#0@@46|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@188 T@U) (|a#0@@47| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@188) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@188) |a#0@@47| |b#0@@21|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@188 |a#0@@47| |b#0@@21|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@188 |a#0@@47| |b#0@@21|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@188) |a#0@@47| |b#0@@21|)))) :qid |unknown.0:0| :skolemid |2400| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@188) |a#0@@47| |b#0@@21|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@189 T@U) (|a#0@@48| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@189 |a#0@@48| |b#0@@22|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@48| |b#0@@22|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@48| |b#0@@22|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@189 |a#0@@48| |b#0@@22|)))) :qid |unknown.0:0| :skolemid |2401| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@189) |a#0@@48| |b#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@190 T@U) (|a#0@@49| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@49| |b#0@@23|) (and ($Is |a#0@@49| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@23| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@190 |a#0@@49| |b#0@@23|)) (<= (|Seq#Length| |a#0@@49|) (|Seq#Length| |b#0@@23|))) :qid |unknown.0:0| :skolemid |2402| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@190 |a#0@@49| |b#0@@23|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@191 T@U) (|a#0@@50| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (and ($Is |a#0@@50| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@24| (TSeq Sequences._default.IsPrefix$A@@2)))) (and (=> (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@191 |a#0@@50| |b#0@@24|) true) (=> true (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@191 |a#0@@50| |b#0@@24|)))) :qid |unknown.0:0| :skolemid |2403| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@191 |a#0@@50| |b#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@192 T@U) (|a#0@@51| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@51| |b#0@@25|) (and ($Is |a#0@@51| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@25| (TSeq Sequences._default.IsPrefix$A@@3))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@192) |a#0@@51| |b#0@@25|) (and (<= (|Seq#Length| |a#0@@51|) (|Seq#Length| |b#0@@25|)) (|Seq#Equal| |a#0@@51| (|Seq#Take| |b#0@@25| (|Seq#Length| |a#0@@51|))))) (=> (and (<= (|Seq#Length| |a#0@@51|) (|Seq#Length| |b#0@@25|)) (|Seq#Equal| |a#0@@51| (|Seq#Take| |b#0@@25| (|Seq#Length| |a#0@@51|)))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@192) |a#0@@51| |b#0@@25|)))) :qid |unknown.0:0| :skolemid |2404| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@192) |a#0@@51| |b#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@193 T@U) (|a#0@@52| T@U) (|b#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@52|) (Lit |b#0@@26|)) (and ($Is |a#0@@52| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@26| (TSeq Sequences._default.IsPrefix$A@@4))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@193) (Lit |a#0@@52|) (Lit |b#0@@26|)) (and (<= (|Seq#Length| (Lit |a#0@@52|)) (|Seq#Length| (Lit |b#0@@26|))) (|Seq#Equal| |a#0@@52| (|Seq#Take| (Lit |b#0@@26|) (|Seq#Length| (Lit |a#0@@52|)))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@52|)) (|Seq#Length| (Lit |b#0@@26|))) (|Seq#Equal| |a#0@@52| (|Seq#Take| (Lit |b#0@@26|) (|Seq#Length| (Lit |a#0@@52|))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@193) (Lit |a#0@@52|) (Lit |b#0@@26|))))) :qid |unknown.0:0| :weight 3 :skolemid |2405| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@193) (Lit |a#0@@52|) (Lit |b#0@@26|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@194 T@U) (|a#0@@53| T@U) (|b#0@@27| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@194) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (type |b#0@@27|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@194) |a#0@@53| |b#0@@27|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@194 |a#0@@53| |b#0@@27|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@194 |a#0@@53| |b#0@@27|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@194) |a#0@@53| |b#0@@27|)))) :qid |unknown.0:0| :skolemid |2406| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@194) |a#0@@53| |b#0@@27|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@195 T@U) (|a#0@@54| T@U) (|b#0@@28| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@195) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (type |b#0@@28|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@195 |a#0@@54| |b#0@@28|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@54| |b#0@@28|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@54| |b#0@@28|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@195 |a#0@@54| |b#0@@28|)))) :qid |unknown.0:0| :skolemid |2407| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@195) |a#0@@54| |b#0@@28|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@196 T@U) (|a#0@@55| T@U) (|b#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@196) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (= (type |b#0@@29|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@55| |b#0@@29|) (and ($Is |a#0@@55| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@29| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |2408| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@196 |a#0@@55| |b#0@@29|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@197 T@U) (|a#0@@56| T@U) (|b#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@197) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (= (type |b#0@@30|) (SeqType BoxType))) (and ($Is |a#0@@56| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@30| (TSeq Sequences._default.IsSuffix$A@@2)))) (and (=> (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@197 |a#0@@56| |b#0@@30|) true) (=> true (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@197 |a#0@@56| |b#0@@30|)))) :qid |unknown.0:0| :skolemid |2409| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@197 |a#0@@56| |b#0@@30|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@198 T@U) (|a#0@@57| T@U) (|b#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@198) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (= (type |b#0@@31|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@57| |b#0@@31|) (and ($Is |a#0@@57| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@31| (TSeq Sequences._default.IsSuffix$A@@3))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@198) |a#0@@57| |b#0@@31|) (and (<= (|Seq#Length| |a#0@@57|) (|Seq#Length| |b#0@@31|)) (|Seq#Equal| |a#0@@57| (|Seq#Drop| |b#0@@31| (- (|Seq#Length| |b#0@@31|) (|Seq#Length| |a#0@@57|)))))) (=> (and (<= (|Seq#Length| |a#0@@57|) (|Seq#Length| |b#0@@31|)) (|Seq#Equal| |a#0@@57| (|Seq#Drop| |b#0@@31| (- (|Seq#Length| |b#0@@31|) (|Seq#Length| |a#0@@57|))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@198) |a#0@@57| |b#0@@31|)))) :qid |unknown.0:0| :skolemid |2410| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@198) |a#0@@57| |b#0@@31|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@199 T@U) (|a#0@@58| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@199) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@58|) (Lit |b#0@@32|)) (and ($Is |a#0@@58| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@32| (TSeq Sequences._default.IsSuffix$A@@4))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@199) (Lit |a#0@@58|) (Lit |b#0@@32|)) (and (<= (|Seq#Length| (Lit |a#0@@58|)) (|Seq#Length| (Lit |b#0@@32|))) (|Seq#Equal| |a#0@@58| (|Seq#Drop| (Lit |b#0@@32|) (- (|Seq#Length| (Lit |b#0@@32|)) (|Seq#Length| (Lit |a#0@@58|))))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@58|)) (|Seq#Length| (Lit |b#0@@32|))) (|Seq#Equal| |a#0@@58| (|Seq#Drop| (Lit |b#0@@32|) (- (|Seq#Length| (Lit |b#0@@32|)) (|Seq#Length| (Lit |a#0@@58|)))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@199) (Lit |a#0@@58|) (Lit |b#0@@32|))))) :qid |unknown.0:0| :weight 3 :skolemid |2411| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@199) (Lit |a#0@@58|) (Lit |b#0@@32|))) ))))
(assert (forall ((arg0@@431 T@U) (arg1@@214 T@U) (arg2@@159 T@U) (arg3@@125 T@U) (arg4@@105 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@431 arg1@@214 arg2@@159 arg3@@125 arg4@@105)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@431 arg1@@214 arg2@@159 arg3@@125 arg4@@105)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@200 T@U) (|run#0@@54| T@U) (|needle#0| T@U) (|i#0@@42| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@200) LayerTypeType)) (= (type |run#0@@54|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@200) |run#0@@54| |needle#0| |i#0@@42|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@200 |run#0@@54| |needle#0| |i#0@@42|))) :qid |unknown.0:0| :skolemid |2412| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@200) |run#0@@54| |needle#0| |i#0@@42|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@201 T@U) (|run#0@@55| T@U) (|needle#0@@0| T@U) (|i#0@@43| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@201) LayerTypeType)) (= (type |run#0@@55|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@201 |run#0@@55| |needle#0@@0| |i#0@@43|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@55| |needle#0@@0| |i#0@@43|))) :qid |unknown.0:0| :skolemid |2413| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@201) |run#0@@55| |needle#0@@0| |i#0@@43|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@202 T@U) (|run#0@@56| T@U) (|needle#0@@1| T@U) (|i#0@@44| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@202) LayerTypeType)) (= (type |run#0@@56|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@56| |needle#0@@1| |i#0@@44|) (and (and ($Is |run#0@@56| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@44|) (<= |i#0@@44| (|Seq#Length| |run#0@@56|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@202 |run#0@@56| |needle#0@@1| |i#0@@44|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@202 |run#0@@56| |needle#0@@1| |i#0@@44|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@202 |run#0@@56| |needle#0@@1| |i#0@@44|)))) (|Seq#Length| |run#0@@56|))) (= (|Seq#Index| |run#0@@56| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@202 |run#0@@56| |needle#0@@1| |i#0@@44|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@202 |run#0@@56| |needle#0@@1| |i#0@@44|)) (forall ((|j#0@@7| Int) ) (!  (=> (and (<= |i#0@@44| |j#0@@7|) (< |j#0@@7| (|Seq#Length| |run#0@@56|))) (not (= (|Seq#Index| |run#0@@56| |j#0@@7|) |needle#0@@1|))) :qid |sequence.340:32| :skolemid |2414| :pattern ( (|Seq#Index| |run#0@@56| |j#0@@7|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@202 |run#0@@56| |needle#0@@1| |i#0@@44|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2415| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@202 |run#0@@56| |needle#0@@1| |i#0@@44|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@203 T@U) (|run#0@@57| T@U) (|needle#0@@2| T@U) (|i#0@@45| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@203) LayerTypeType)) (= (type |run#0@@57|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@57| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (and (=> (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@203 |run#0@@57| |needle#0@@2| |i#0@@45|) (and (<= (LitInt 0) |i#0@@45|) (<= |i#0@@45| (|Seq#Length| |run#0@@57|)))) (=> (and (<= (LitInt 0) |i#0@@45|) (<= |i#0@@45| (|Seq#Length| |run#0@@57|))) (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@203 |run#0@@57| |needle#0@@2| |i#0@@45|)))) :qid |unknown.0:0| :skolemid |2416| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@203 |run#0@@57| |needle#0@@2| |i#0@@45|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@204 T@U) (|run#0@@58| T@U) (|needle#0@@3| T@U) (|i#0@@46| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@204) LayerTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| |i#0@@46|) (and (and ($Is |run#0@@58| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@46|) (<= |i#0@@46| (|Seq#Length| |run#0@@58|)))))) (and (=> (not (= |i#0@@46| (|Seq#Length| |run#0@@58|))) (=> (not (= (|Seq#Index| |run#0@@58| |i#0@@46|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| (+ |i#0@@46| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@204) |run#0@@58| |needle#0@@3| |i#0@@46|) (ite (= |i#0@@46| (|Seq#Length| |run#0@@58|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@58| |i#0@@46|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@46|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@204 |run#0@@58| |needle#0@@3| (+ |i#0@@46| 1))))))) :qid |unknown.0:0| :skolemid |2417| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@204) |run#0@@58| |needle#0@@3| |i#0@@46|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@205 T@U) (|run#0@@59| T@U) (|needle#0@@4| T@U) (|i#0@@47| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@205) LayerTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@47|)) (and (and ($Is |run#0@@59| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@47|)) (<= (LitInt |i#0@@47|) (|Seq#Length| (Lit |run#0@@59|))))))) (and (=> (not (= (LitInt |i#0@@47|) (|Seq#Length| (Lit |run#0@@59|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@47|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@47| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@205) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@47|)) (ite (= (LitInt |i#0@@47|) (|Seq#Length| (Lit |run#0@@59|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@47|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@47|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@205) (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@47| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2418| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@205) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@47|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@206 T@U) (|run#0@@60| T@U) (|needle#0@@5| T@U) (|i#0@@48| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@206) LayerTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@48|)) (and (and ($Is |run#0@@60| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@48|)) (<= (LitInt |i#0@@48|) (|Seq#Length| (Lit |run#0@@60|))))))) (and (=> (not (= (LitInt |i#0@@48|) (|Seq#Length| (Lit |run#0@@60|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@48|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@48| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@206) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@48|)) (ite (= (LitInt |i#0@@48|) (|Seq#Length| (Lit |run#0@@60|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@48|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@48|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@206) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@48| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2419| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@206) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@48|))) ))))
(assert (forall ((arg0@@432 T@U) (arg1@@215 T@U) (arg2@@160 T@U) (arg3@@126 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@432 arg1@@215 arg2@@160 arg3@@126)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@432 arg1@@215 arg2@@160 arg3@@126)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@207 T@U) (|run#0@@61| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@207) LayerTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@207) |run#0@@61| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@207 |run#0@@61| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |2420| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@207) |run#0@@61| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@208 T@U) (|run#0@@62| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@208) LayerTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@208 |run#0@@62| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@62| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |2421| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@208) |run#0@@62| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@209 T@U) (|run#0@@63| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@209) LayerTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@63| |needle#0@@8|) (and ($Is |run#0@@63| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@209 |run#0@@63| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@209 |run#0@@63| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@209 |run#0@@63| |needle#0@@8|)))) (|Seq#Length| |run#0@@63|))) (= (|Seq#Index| |run#0@@63| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@209 |run#0@@63| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@209 |run#0@@63| |needle#0@@8|)) (forall ((|i#0@@49| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| (|Seq#Length| |run#0@@63|))) (not (= (|Seq#Index| |run#0@@63| |i#0@@49|) |needle#0@@8|))) :qid |sequence.350:32| :skolemid |2422| :pattern ( (|Seq#Index| |run#0@@63| |i#0@@49|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@209 |run#0@@63| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2423| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@209 |run#0@@63| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@210 T@U) (|run#0@@64| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@210) LayerTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@64| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (and (=> (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@210 |run#0@@64| |needle#0@@9|) true) (=> true (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@210 |run#0@@64| |needle#0@@9|)))) :qid |unknown.0:0| :skolemid |2424| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@210 |run#0@@64| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@211 T@U) (|run#0@@65| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@211) LayerTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10|) (and ($Is |run#0@@65| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@211) |run#0@@65| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@65| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |2425| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@211) |run#0@@65| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@212 T@U) (|run#0@@66| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@212) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11|) (and ($Is |run#0@@66| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@212) (Lit |run#0@@66|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@66|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2426| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@212) (Lit |run#0@@66|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@213 T@U) (|run#0@@67| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@213) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|)) (and ($Is |run#0@@67| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@213) (Lit |run#0@@67|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2427| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@213) (Lit |run#0@@67|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@433 T@U) (arg1@@216 T@U) (arg2@@161 Int) (arg3@@127 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@433 arg1@@216 arg2@@161 arg3@@127)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@433 arg1@@216 arg2@@161 arg3@@127)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@214 T@U) (|length#0| Int) (|v#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@214) LayerTypeType)) (= (type |v#0@@12|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@214) |length#0| |v#0@@12|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@214 |length#0| |v#0@@12|))) :qid |unknown.0:0| :skolemid |2428| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@214) |length#0| |v#0@@12|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@215 T@U) (|length#0@@0| Int) (|v#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@215) LayerTypeType)) (= (type |v#0@@13|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@215 |length#0@@0| |v#0@@13|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@13|))) :qid |unknown.0:0| :skolemid |2429| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@215) |length#0@@0| |v#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@216 T@U) (|length#0@@1| Int) (|v#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@216) LayerTypeType)) (= (type |v#0@@14|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@14|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@14| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@216 |length#0@@1| |v#0@@14|)) |length#0@@1|) (forall ((|i#0@@50| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@216 |length#0@@1| |v#0@@14|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@216 |length#0@@1| |v#0@@14|) |i#0@@50|) |v#0@@14|)) :qid |sequence.357:18| :skolemid |2430| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@216 |length#0@@1| |v#0@@14|) |i#0@@50|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@216 |length#0@@1| |v#0@@14|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |2431| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@216 |length#0@@1| |v#0@@14|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@217 T@U) (|length#0@@2| Int) (|v#0@@15| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@217) LayerTypeType)) (= (type |v#0@@15|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@15| Sequences._default.SeqOfLength$V@@2))) (and (=> (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@217 |length#0@@2| |v#0@@15|) true) (=> true (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@217 |length#0@@2| |v#0@@15|)))) :qid |unknown.0:0| :skolemid |2432| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@217 |length#0@@2| |v#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@218 T@U) (|length#0@@3| Int) (|v#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@218) LayerTypeType)) (= (type |v#0@@16|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@16|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@16| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@16|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@218) |length#0@@3| |v#0@@16|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@16|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@218 (- |length#0@@3| 1) |v#0@@16|)))))) :qid |unknown.0:0| :skolemid |2433| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@218) |length#0@@3| |v#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@219 T@U) (|length#0@@4| Int) (|v#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@219) LayerTypeType)) (= (type |v#0@@17|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@17|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@17| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@17|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@219) (LitInt |length#0@@4|) |v#0@@17|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@17|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@219) (LitInt (- |length#0@@4| 1)) |v#0@@17|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2434| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@219) (LitInt |length#0@@4|) |v#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@220 T@U) (|length#0@@5| Int) (|v#0@@18| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@220) LayerTypeType)) (= (type |v#0@@18|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@18|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@18| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@18|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@220) (LitInt |length#0@@5|) (Lit |v#0@@18|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@18|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@220) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@18|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2435| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@220) (LitInt |length#0@@5|) (Lit |v#0@@18|))) ))))
(assert (forall ((arg0@@434 T@U) (arg1@@217 T@U) (arg2@@162 T@U) (arg3@@128 Int) (arg4@@106 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@434 arg1@@217 arg2@@162 arg3@@128 arg4@@106)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@434 arg1@@217 arg2@@162 arg3@@128 arg4@@106)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@221 T@U) (|s#0@@120| T@U) (|i#0@@51| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@221) LayerTypeType)) (= (type |s#0@@120|) (SeqType BoxType))) (= (type |t#0@@9|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@221) |s#0@@120| |i#0@@51| |t#0@@9|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@221 |s#0@@120| |i#0@@51| |t#0@@9|))) :qid |unknown.0:0| :skolemid |2436| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@221) |s#0@@120| |i#0@@51| |t#0@@9|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@222 T@U) (|s#0@@121| T@U) (|i#0@@52| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@222) LayerTypeType)) (= (type |s#0@@121|) (SeqType BoxType))) (= (type |t#0@@10|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@222 |s#0@@121| |i#0@@52| |t#0@@10|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@121| |i#0@@52| |t#0@@10|))) :qid |unknown.0:0| :skolemid |2437| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@222) |s#0@@121| |i#0@@52| |t#0@@10|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@223 T@U) (|s#0@@122| T@U) (|i#0@@53| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@223) LayerTypeType)) (= (type |s#0@@122|) (SeqType BoxType))) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@122| |i#0@@53| |t#0@@11|) (and (and (and ($Is |s#0@@122| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@53|) (< |i#0@@53| 18446744073709551616))) ($IsBox |t#0@@11| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@53| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@53|) (< |i#0@@53| (|Seq#Length| |s#0@@122|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@223 |s#0@@122| |i#0@@53| |t#0@@11|) (|Seq#Update| |s#0@@122| |i#0@@53| |t#0@@11|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@223 |s#0@@122| |i#0@@53| |t#0@@11|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |2438| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@223 |s#0@@122| |i#0@@53| |t#0@@11|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@224 T@U) (|s#0@@123| T@U) (|i#0@@54| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@224) LayerTypeType)) (= (type |s#0@@123|) (SeqType BoxType))) (= (type |t#0@@12|) BoxType)) (and (and ($Is |s#0@@123| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| 18446744073709551616))) ($IsBox |t#0@@12| Sequences._default.SeqIndexUpdate$T@@2))) (and (=> (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@224 |s#0@@123| |i#0@@54| |t#0@@12|) (and (< (+ |i#0@@54| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| (|Seq#Length| |s#0@@123|))))) (=> (and (< (+ |i#0@@54| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| (|Seq#Length| |s#0@@123|)))) (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@224 |s#0@@123| |i#0@@54| |t#0@@12|)))) :qid |unknown.0:0| :skolemid |2439| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@224 |s#0@@123| |i#0@@54| |t#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@225 T@U) (|s#0@@124| T@U) (|i#0@@55| Int) (|t#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@225) LayerTypeType)) (= (type |s#0@@124|) (SeqType BoxType))) (= (type |t#0@@13|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@124| |i#0@@55| |t#0@@13|) (and (and (and ($Is |s#0@@124| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| 18446744073709551616))) ($IsBox |t#0@@13| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@55| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@55|) (< |i#0@@55| (|Seq#Length| |s#0@@124|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@225) |s#0@@124| |i#0@@55| |t#0@@13|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@124| |i#0@@55|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@13|)) (|Seq#Drop| |s#0@@124| (+ |i#0@@55| 1))))) :qid |unknown.0:0| :skolemid |2440| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@225) |s#0@@124| |i#0@@55| |t#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@226 T@U) (|s#0@@125| T@U) (|i#0@@56| Int) (|t#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@226) LayerTypeType)) (= (type |s#0@@125|) (SeqType BoxType))) (= (type |t#0@@14|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@125|) (LitInt |i#0@@56|) |t#0@@14|) (and (and (and ($Is |s#0@@125| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@56|) (< |i#0@@56| 18446744073709551616))) ($IsBox |t#0@@14| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@56| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@56|)) (< |i#0@@56| (|Seq#Length| (Lit |s#0@@125|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@226) (Lit |s#0@@125|) (LitInt |i#0@@56|) |t#0@@14|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@125|) (LitInt |i#0@@56|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@14|)) (|Seq#Drop| (Lit |s#0@@125|) (LitInt (+ |i#0@@56| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2441| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@226) (Lit |s#0@@125|) (LitInt |i#0@@56|) |t#0@@14|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@227 T@U) (|s#0@@126| T@U) (|i#0@@57| Int) (|t#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@227) LayerTypeType)) (= (type |s#0@@126|) (SeqType BoxType))) (= (type |t#0@@15|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@126|) (LitInt |i#0@@57|) (Lit |t#0@@15|)) (and (and (and ($Is |s#0@@126| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@57|) (< |i#0@@57| 18446744073709551616))) ($IsBox |t#0@@15| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@57| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@57|)) (< |i#0@@57| (|Seq#Length| (Lit |s#0@@126|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@227) (Lit |s#0@@126|) (LitInt |i#0@@57|) (Lit |t#0@@15|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@126|) (LitInt |i#0@@57|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@15|))) (|Seq#Drop| (Lit |s#0@@126|) (LitInt (+ |i#0@@57| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2442| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@227) (Lit |s#0@@126|) (LitInt |i#0@@57|) (Lit |t#0@@15|))) ))))
(assert (forall ((arg0@@435 T@U) (arg1@@218 T@U) (arg2@@163 T@U) (arg3@@129 T@U) (arg4@@107 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@435 arg1@@218 arg2@@163 arg3@@129 arg4@@107)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@435 arg1@@218 arg2@@163 arg3@@129 arg4@@107)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@228 T@U) (|a#0@@59| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@228) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@228) |a#0@@59| |b#0@@33|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@228 |a#0@@59| |b#0@@33|))) :qid |unknown.0:0| :skolemid |2443| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@228) |a#0@@59| |b#0@@33|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@229 T@U) (|a#0@@60| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@229) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@229 |a#0@@60| |b#0@@34|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@60| |b#0@@34|))) :qid |unknown.0:0| :skolemid |2444| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@229) |a#0@@60| |b#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@230 T@U) (|a#0@@61| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@230) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@61| |b#0@@35|) (and (and ($Is |a#0@@61| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@35| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@61|) (|Seq#Length| |b#0@@35|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@230 |a#0@@61| |b#0@@35|)) (|Seq#Length| |a#0@@61|)) (forall ((|i#0@@58| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@230 |a#0@@61| |b#0@@35|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@230 |a#0@@61| |b#0@@35|) |i#0@@58|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@61| |i#0@@58|) (|Seq#Index| |b#0@@35| |i#0@@58|))))) :qid |sequence.378:20| :skolemid |2445| :pattern ( (|Seq#Index| |b#0@@35| |i#0@@58|)) :pattern ( (|Seq#Index| |a#0@@61| |i#0@@58|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@230 |a#0@@61| |b#0@@35|) |i#0@@58|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@230 |a#0@@61| |b#0@@35|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |2446| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@230 |a#0@@61| |b#0@@35|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@231 T@U) (|a#0@@62| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@231) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (and ($Is |a#0@@62| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@36| (TSeq Sequences._default.Zip$B@@2)))) (and (=> (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@231 |a#0@@62| |b#0@@36|) (= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|))) (=> (= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|)) (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@231 |a#0@@62| |b#0@@36|)))) :qid |unknown.0:0| :skolemid |2447| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@231 |a#0@@62| |b#0@@36|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@232 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@232) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@63| |b#0@@37|) (and (and ($Is |a#0@@63| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@37| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@63|) (|Seq#Length| |b#0@@37|))))) (and (=> (not (= (|Seq#Length| |a#0@@63|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@63|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@37|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@37|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@63|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@37|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@232) |a#0@@63| |b#0@@37|) (ite (= (|Seq#Length| |a#0@@63|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@232 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@37|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@63|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@37|))))))))) :qid |unknown.0:0| :skolemid |2448| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@232) |a#0@@63| |b#0@@37|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@233 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@233) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@64|) (Lit |b#0@@38|)) (and (and ($Is |a#0@@64| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@38| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@64|)) (|Seq#Length| (Lit |b#0@@38|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@64|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@38|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@38|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@64|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@38|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@233) (Lit |a#0@@64|) (Lit |b#0@@38|)) (ite (= (|Seq#Length| (Lit |a#0@@64|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@233) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@38|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@64|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@38|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2449| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@233) (Lit |a#0@@64|) (Lit |b#0@@38|))) ))))
(assert (forall ((arg0@@436 T@U) (arg1@@219 T@U) (arg2@@164 T@U) (arg3@@130 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@436 arg1@@219 arg2@@164 arg3@@130)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@436 arg1@@219 arg2@@164 arg3@@130)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@234 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@234) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@234 |z#0|))) :qid |unknown.0:0| :skolemid |2450| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@234) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@235 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@235) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@235 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |2451| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@235) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@236 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@236 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@236 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@236 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@59| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@236 |z#0@@1|))) |i#0@@59|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@236 |z#0@@1|))) |i#0@@59|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@59|))))) :qid |sequence.386:20| :skolemid |2452| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@59|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@236 |z#0@@1|))) |i#0@@59|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@236 |z#0@@1|))) |i#0@@59|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@236 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |2453| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@236 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@237 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (and (=> (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@237 |z#0@@2|) true) (=> true (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@237 |z#0@@2|)))) :qid |unknown.0:0| :skolemid |2454| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@237 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@238 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@238) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@39| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@238 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@65| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@238 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@65| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@39| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |2455| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@238) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@239 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@239) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@239) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@239) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2456| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@239) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@437 T@U) (arg1@@220 T@U) (arg2@@165 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@437 arg1@@220 arg2@@165)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@437 arg1@@220 arg2@@165)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@240 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@240) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@240) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@240 |seqs#0|))) :qid |unknown.0:0| :skolemid |2457| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@240) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@241 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@241) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@241 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |2458| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@241) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@242 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@242) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@242 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@60| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@60|) (< |i#0@@60| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@242 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@242 |seqs#0@@1|) |i#0@@60|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@60|)))))) :qid |sequence.408:20| :skolemid |2459| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@60|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@242 |seqs#0@@1|) |i#0@@60|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@242 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |2460| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@242 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@243 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@243) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (and (=> (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@243 |seqs#0@@2|) true) (=> true (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@243 |seqs#0@@2|)))) :qid |unknown.0:0| :skolemid |2461| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@243 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@244 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@244) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@244) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@244 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |2462| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@244) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@245 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@245) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@245) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@245) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2463| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@245) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@246 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@246) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@246) |shape#0|) (Sequences.__default.FlattenLength $ly@@246 |shape#0|))) :qid |sequence.419:22| :skolemid |2464| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@246) |shape#0|)) )))
(assert (forall (($ly@@247 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@247) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@247 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |sequence.419:22| :skolemid |2465| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@247) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@248 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@248) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@248 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@248 |shape#0@@1|)))) :qid |sequence.419:22| :skolemid |2466| :pattern ( (Sequences.__default.FlattenLength $ly@@248 |shape#0@@1|)) ))))
(assert (forall (($ly@@249 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@249) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (and (=> (|Sequences.__default.FlattenLength#requires| $ly@@249 |shape#0@@2|) true) (=> true (|Sequences.__default.FlattenLength#requires| $ly@@249 |shape#0@@2|)))) :qid |sequence.419:22| :skolemid |2467| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@249 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@250 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@250) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@250) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@250 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |sequence.419:22| :skolemid |2468| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@250) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@251 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@251) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@251) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@251) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |sequence.419:22| :weight 3 :skolemid |2469| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@251) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@438 T@U) (arg1@@221 T@U) (arg2@@166 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@438 arg1@@221 arg2@@166)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@438 arg1@@221 arg2@@166)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@252 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@252) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@252) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@252 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |2470| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@252) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@253 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@253) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@253 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |2471| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@253) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@254 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@254) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@254 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@254 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@254 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |2472| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@254 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@255 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@255) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (and (=> (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@255 |seqs#0@@8|) true) (=> true (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@255 |seqs#0@@8|)))) :qid |unknown.0:0| :skolemid |2473| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@255 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@256 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@256) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@256) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@256 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |2474| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@256) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@257 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@257) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@257) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@257) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2475| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@257) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@61| Int) (|j#0@@8| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@61| |j#0@@8|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@61|)) (<= (LitInt 0) |j#0@@8|)) (and (< |i#0@@61| (|Seq#Length| |shape#0@@5|)) (< |j#0@@8| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@61|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@61| |j#0@@8|))) :qid |sequence.488:25| :skolemid |2476| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@61| |j#0@@8|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@62| Int) (|j#0@@9| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@62|)) (<= (LitInt 0) |j#0@@9|)) (and (=> (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@62| |j#0@@9|) (and (< |i#0@@62| (|Seq#Length| |shape#0@@6|)) (< |j#0@@9| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@62|)))))) (=> (and (< |i#0@@62| (|Seq#Length| |shape#0@@6|)) (< |j#0@@9| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@62|))))) (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@62| |j#0@@9|))))) :qid |sequence.488:25| :skolemid |2477| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@62| |j#0@@9|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@63| Int) (|j#0@@10| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@63| |j#0@@10|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@63|)) (<= (LitInt 0) |j#0@@10|)) (and (< |i#0@@63| (|Seq#Length| |shape#0@@7|)) (< |j#0@@10| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@63|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@63|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@63| |j#0@@10|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@63|)) |j#0@@10|)))) :qid |sequence.488:25| :skolemid |2478| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@63| |j#0@@10|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@64| Int) (|j#0@@11| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@64|) (LitInt |j#0@@11|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@64|)) (<= (LitInt 0) |j#0@@11|)) (and (< |i#0@@64| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@11| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@64|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@64|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@64|) (LitInt |j#0@@11|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@64|)))) |j#0@@11|)))) :qid |sequence.488:25| :weight 3 :skolemid |2479| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@64|) (LitInt |j#0@@11|))) ))))
(assert (forall ((arg0@@439 T@U) (arg1@@222 T@U) (arg2@@167 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@439 arg1@@222 arg2@@167)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@439 arg1@@222 arg2@@167)) )))
(assert (forall (($ly@@258 T@U) (|shape#0@@9| T@U) (|i#0@@65| Int) ) (!  (=> (and (= (type $ly@@258) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@258) |shape#0@@9| |i#0@@65|) (Sequences.__default.UnflattenIndex $ly@@258 |shape#0@@9| |i#0@@65|))) :qid |sequence.495:12| :skolemid |2480| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@258) |shape#0@@9| |i#0@@65|)) )))
(assert (forall (($ly@@259 T@U) (|shape#0@@10| T@U) (|i#0@@66| Int) ) (!  (=> (and (= (type $ly@@259) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@259 |shape#0@@10| |i#0@@66|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@66|))) :qid |sequence.495:12| :skolemid |2481| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@259) |shape#0@@10| |i#0@@66|)) )))
(assert  (=> true (forall (($ly@@260 T@U) (|shape#0@@11| T@U) (|i#0@@67| Int) ) (!  (=> (and (and (= (type $ly@@260) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@67|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@67|)) (< |i#0@@67| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@260 |shape#0@@11| |i#0@@67|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |sequence.495:12| :skolemid |2482| :pattern ( (Sequences.__default.UnflattenIndex $ly@@260 |shape#0@@11| |i#0@@67|)) ))))
(assert (forall (($ly@@261 T@U) (|shape#0@@12| T@U) (|i#0@@68| Int) ) (!  (=> (and (and (= (type $ly@@261) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@68|))) (and (=> (|Sequences.__default.UnflattenIndex#requires| $ly@@261 |shape#0@@12| |i#0@@68|) (< |i#0@@68| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))) (=> (< |i#0@@68| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)) (|Sequences.__default.UnflattenIndex#requires| $ly@@261 |shape#0@@12| |i#0@@68|)))) :qid |sequence.495:12| :skolemid |2483| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@261 |shape#0@@12| |i#0@@68|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@262 T@U) (|shape#0@@13| T@U) (|i#0@@69| Int) ) (!  (=> (and (and (= (type $ly@@262) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@69|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@69|)) (< |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@69|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@69|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@262) |shape#0@@13| |i#0@@69|) (ite (< |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@262 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@69|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@69| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |sequence.495:12| :skolemid |2484| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@262) |shape#0@@13| |i#0@@69|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@263 T@U) (|shape#0@@14| T@U) (|i#0@@70| Int) ) (!  (=> (and (and (= (type $ly@@263) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@70|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@70|)) (< |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@70|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@70|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@263) (Lit |shape#0@@14|) (LitInt |i#0@@70|)) (ite (< |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@263) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@70|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@70| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |sequence.495:12| :weight 3 :skolemid |2485| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@263) (Lit |shape#0@@14|) (LitInt |i#0@@70|))) ))))
(assert (forall ((arg0@@440 T@U) (arg1@@223 T@U) (arg2@@168 Int) (arg3@@131 T@U) ) (! (= (type (Sequences.__default.fill arg0@@440 arg1@@223 arg2@@168 arg3@@131)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@440 arg1@@223 arg2@@168 arg3@@131)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@264 T@U) (|n#0@@5| Int) (|t#0@@16| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@264) LayerTypeType)) (= (type |t#0@@16|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@264) |n#0@@5| |t#0@@16|) (Sequences.__default.fill Sequences._default.fill$T $ly@@264 |n#0@@5| |t#0@@16|))) :qid |unknown.0:0| :skolemid |2486| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@264) |n#0@@5| |t#0@@16|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@265 T@U) (|n#0@@6| Int) (|t#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@265) LayerTypeType)) (= (type |t#0@@17|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@265 |n#0@@6| |t#0@@17|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@17|))) :qid |unknown.0:0| :skolemid |2487| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@265) |n#0@@6| |t#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@266 T@U) (|n#0@@7| Int) (|t#0@@18| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@266) LayerTypeType)) (= (type |t#0@@18|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@18|) (and ($IsBox |t#0@@18| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@266 |n#0@@7| |t#0@@18|)) |n#0@@7|) (forall ((|i#0@@71| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@71|) (< |i#0@@71| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@266 |n#0@@7| |t#0@@18|) |i#0@@71|) |t#0@@18|)) :qid |sequence.680:18| :skolemid |2488| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@266 |n#0@@7| |t#0@@18|) |i#0@@71|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@266 |n#0@@7| |t#0@@18|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |2489| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@266 |n#0@@7| |t#0@@18|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@267 T@U) (|n#0@@8| Int) (|t#0@@19| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@267) LayerTypeType)) (= (type |t#0@@19|) BoxType)) ($IsBox |t#0@@19| Sequences._default.fill$T@@2)) (and (=> (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@267 |n#0@@8| |t#0@@19|) (>= |n#0@@8| (LitInt 0))) (=> (>= |n#0@@8| (LitInt 0)) (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@267 |n#0@@8| |t#0@@19|)))) :qid |unknown.0:0| :skolemid |2490| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@267 |n#0@@8| |t#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@268 T@U) (|n#0@@9| Int) (|t#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@268) LayerTypeType)) (= (type |t#0@@20|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@20|) (and ($IsBox |t#0@@20| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@20|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@268) |n#0@@9| |t#0@@20|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@268 (- |n#0@@9| 1) |t#0@@20|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@20|)))))) :qid |unknown.0:0| :skolemid |2491| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@268) |n#0@@9| |t#0@@20|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@269 T@U) (|n#0@@10| Int) (|t#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@269) LayerTypeType)) (= (type |t#0@@21|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@21|) (and ($IsBox |t#0@@21| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@21|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@269) (LitInt |n#0@@10|) |t#0@@21|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@269) (LitInt (- |n#0@@10| 1)) |t#0@@21|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@21|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2492| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@269) (LitInt |n#0@@10|) |t#0@@21|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@270 T@U) (|n#0@@11| Int) (|t#0@@22| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@270) LayerTypeType)) (= (type |t#0@@22|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@22|)) (and ($IsBox |t#0@@22| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@22|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@270) (LitInt |n#0@@11|) (Lit |t#0@@22|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@270) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@22|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@22|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2493| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@270) (LitInt |n#0@@11|) (Lit |t#0@@22|))) ))))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (forall ((bx@@145 T@U) ) (!  (=> (and (= (type bx@@145) BoxType) ($IsBox bx@@145 Tclass.ValueMessage.__default)) (and (= ($Box ($Unbox refType bx@@145)) bx@@145) ($Is ($Unbox refType bx@@145) Tclass.ValueMessage.__default))) :qid |unknown.0:0| :skolemid |2494| :pattern ( ($IsBox bx@@145 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@32 T@U) ) (!  (=> (= (type $o@@32) refType) (and (=> ($Is $o@@32 Tclass.ValueMessage.__default) (or (= $o@@32 null) (= (dtype $o@@32) Tclass.ValueMessage.__default))) (=> (or (= $o@@32 null) (= (dtype $o@@32) Tclass.ValueMessage.__default)) ($Is $o@@32 Tclass.ValueMessage.__default)))) :qid |unknown.0:0| :skolemid |2495| :pattern ( ($Is $o@@32 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@33 T@U) ($h@@115 T@U) ) (!  (=> (and (= (type $o@@33) refType) (= (type $h@@115) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@33 Tclass.ValueMessage.__default $h@@115) (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@115 $o@@33) alloc)))) (=> (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@115 $o@@33) alloc))) ($IsAlloc $o@@33 Tclass.ValueMessage.__default $h@@115)))) :qid |unknown.0:0| :skolemid |2496| :pattern ( ($IsAlloc $o@@33 Tclass.ValueMessage.__default $h@@115)) )))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert (= (type ValueMessage.__default.NopDelta) BoxType))
(assert  (=> true (=> true ($IsBox ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert  (=> |ValueMessage.__default.NopDelta#requires| true))
(assert  (=> true |ValueMessage.__default.NopDelta#requires|))
(assert (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert  (=> |ValueMessage.__default.DefaultValue#requires| true))
(assert  (=> true |ValueMessage.__default.DefaultValue#requires|))
(assert (forall ((arg0@@441 T@U) (arg1@@224 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@441 arg1@@224)) BoxType) :qid |funType:ValueMessage.__default.CombineDeltas| :pattern ( (ValueMessage.__default.CombineDeltas arg0@@441 arg1@@224)) )))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) BoxType) (= (type |olddelta#0|) BoxType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($IsBox |newdelta#0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (= |newdelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (= |olddelta#0| ValueMessage.__default.NopDelta) (= (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($IsBox (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta))) :qid |Messagei.25:32| :skolemid |2497| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|)) ))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) BoxType) (= (type |olddelta#0@@0|) BoxType)) (and ($IsBox |newdelta#0@@0| Tclass.ValueMessage.Delta) ($IsBox |olddelta#0@@0| Tclass.ValueMessage.Delta))) (and (=> (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true) (=> true (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)))) :qid |Messagei.25:32| :skolemid |2498| :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)) )))
(assert (forall ((arg0@@442 T@U) (arg1@@225 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@442 arg1@@225)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.ApplyDelta| :pattern ( (ValueMessage.__default.ApplyDelta arg0@@442 arg1@@225)) )))
(assert  (=> true (forall ((|delta#0| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0|) BoxType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0| |value#0|) (and ($IsBox |delta#0| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (= |delta#0| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0| |value#0|) Tclass.ValueType.Value))) :qid |Messagei.29:29| :skolemid |2499| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0| |value#0|)) ))))
(assert (forall ((|delta#0@@0| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@0|) BoxType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($IsBox |delta#0@@0| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (and (=> (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|) true) (=> true (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)))) :qid |Messagei.29:29| :skolemid |2500| :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@0| |value#0@@0|)) )))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (forall ((bx@@146 T@U) ) (!  (=> (and (= (type bx@@146) BoxType) ($IsBox bx@@146 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@146)) bx@@146) ($Is ($Unbox DatatypeTypeType bx@@146) Tclass.ValueMessage.Message))) :qid |unknown.0:0| :skolemid |2501| :pattern ( ($IsBox bx@@146 Tclass.ValueMessage.Message)) )))
(assert (forall ((arg0@@443 T@U) ) (! (= (type (ValueMessage.__default.bytestring__to__Message arg0@@443)) DatatypeTypeType) :qid |funType:ValueMessage.__default.bytestring__to__Message| :pattern ( (ValueMessage.__default.bytestring__to__Message arg0@@443)) )))
(assert  (=> true (forall ((|s#0@@127| T@U) ) (!  (=> (and (= (type |s#0@@127|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@127|) (and ($Is |s#0@@127| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@127|) 4294967296)))) ($Is (ValueMessage.__default.bytestring__to__Message |s#0@@127|) Tclass.ValueMessage.Message)) :qid |Messagei.100:41| :skolemid |2502| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@127|)) ))))
(assert (forall ((|s#0@@128| T@U) ) (!  (=> (and (= (type |s#0@@128|) (SeqType BoxType)) ($Is |s#0@@128| (TSeq Tclass.NativeTypes.byte))) (and (=> (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@128|) (< (|Seq#Length| |s#0@@128|) 4294967296)) (=> (< (|Seq#Length| |s#0@@128|) 4294967296) (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@128|)))) :qid |Messagei.100:41| :skolemid |2503| :pattern ( (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@128|)) )))
(assert  (=> true (forall ((|msg#0| T@U) ) (!  (=> (and (= (type |msg#0|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0|) ($Is |msg#0| Tclass.ValueMessage.Message))) true) :qid |Messagei.113:30| :skolemid |2504| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0|)) ))))
(assert (forall ((|msg#0@@0| T@U) ) (!  (=> (and (= (type |msg#0@@0|) DatatypeTypeType) ($Is |msg#0@@0| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|) true) (=> true (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)))) :qid |Messagei.113:30| :skolemid |2505| :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@0|)) )))
(assert  (=> true (forall ((|msgs#0| T@U) ) (!  (=> (and (= (type |msgs#0|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0|) ($Is |msgs#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |Messagei.118:33| :skolemid |2506| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0|)) ))))
(assert (forall ((|msgs#0@@0| T@U) ) (!  (=> (and (= (type |msgs#0@@0|) (SeqType BoxType)) ($Is |msgs#0@@0| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|) true) (=> true (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)))) :qid |Messagei.118:33| :skolemid |2507| :pattern ( (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)) )))
(assert (forall ((arg0@@444 T@U) ) (! (= (type (ValueMessage.__default.Message__to__bytestring arg0@@444)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.Message__to__bytestring| :pattern ( (ValueMessage.__default.Message__to__bytestring arg0@@444)) )))
(assert  (=> true (forall ((|msg#0@@1| T@U) ) (!  (=> (and (= (type |msg#0@@1|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@1|) (and ($Is |msg#0@@1| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@1|)))) ($Is (ValueMessage.__default.Message__to__bytestring |msg#0@@1|) (TSeq Tclass.NativeTypes.byte))) :qid |Messagei.123:41| :skolemid |2508| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@1|)) ))))
(assert (forall ((|msg#0@@2| T@U) ) (!  (=> (and (= (type |msg#0@@2|) DatatypeTypeType) ($Is |msg#0@@2| Tclass.ValueMessage.Message)) (and (=> (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|) (ValueMessage.Message.Define_q |msg#0@@2|)) (=> (ValueMessage.Message.Define_q |msg#0@@2|) (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|)))) :qid |Messagei.123:41| :skolemid |2509| :pattern ( (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@2|)) )))
(assert (forall ((arg0@@445 T@U) (arg1@@226 T@U) ) (! (= (type (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@445 arg1@@226)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.messageSeq__to__bytestringSeq| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@445 arg1@@226)) )))
(assert (forall (($ly@@271 T@U) (|msgs#0@@1| T@U) ) (!  (=> (and (= (type $ly@@271) LayerTypeType) (= (type |msgs#0@@1|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@271) |msgs#0@@1|) (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@271 |msgs#0@@1|))) :qid |Messagei.129:12| :skolemid |2510| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@271) |msgs#0@@1|)) )))
(assert (forall (($ly@@272 T@U) (|msgs#0@@2| T@U) ) (!  (=> (and (= (type $ly@@272) LayerTypeType) (= (type |msgs#0@@2|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@272 |msgs#0@@2|) (ValueMessage.__default.messageSeq__to__bytestringSeq $LZ |msgs#0@@2|))) :qid |Messagei.129:12| :skolemid |2511| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq (AsFuelBottom $ly@@272) |msgs#0@@2|)) )))
(assert  (=> true (forall (($ly@@273 T@U) (|msgs#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@273) LayerTypeType) (= (type |msgs#0@@3|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@3|) (and ($Is |msgs#0@@3| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@3|)))) (and (and (= (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@273 |msgs#0@@3|)) (|Seq#Length| |msgs#0@@3|)) (forall ((|i#0@@72| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@72|) (< |i#0@@72| (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@273 |msgs#0@@3|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@273 |msgs#0@@3|) |i#0@@72|)) (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@3| |i#0@@72|))))) :qid |Messagei.132:20| :skolemid |2512| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@3| |i#0@@72|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@273 |msgs#0@@3|) |i#0@@72|))) ))) ($Is (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@273 |msgs#0@@3|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |Messagei.129:12| :skolemid |2513| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@273 |msgs#0@@3|)) ))))
(assert (forall (($ly@@274 T@U) (|msgs#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@274) LayerTypeType) (= (type |msgs#0@@4|) (SeqType BoxType))) ($Is |msgs#0@@4| (TSeq Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@274 |msgs#0@@4|) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@4|)) (=> (ValueMessage.__default.EncodableMessageSeq |msgs#0@@4|) (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@274 |msgs#0@@4|)))) :qid |Messagei.129:12| :skolemid |2514| :pattern ( (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@274 |msgs#0@@4|)) )))
(assert (forall ((arg0@@446 T@U) (arg1@@227 T@U) ) (! (= (type (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@446 arg1@@227)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.bytestringSeq__to__MessageSeq| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@446 arg1@@227)) )))
(assert (forall (($ly@@275 T@U) (|strings#0| T@U) ) (!  (=> (and (= (type $ly@@275) LayerTypeType) (= (type |strings#0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@275) |strings#0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@275 |strings#0|))) :qid |Messagei.140:12| :skolemid |2515| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@275) |strings#0|)) )))
(assert (forall (($ly@@276 T@U) (|strings#0@@0| T@U) ) (!  (=> (and (= (type $ly@@276) LayerTypeType) (= (type |strings#0@@0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@276 |strings#0@@0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $LZ |strings#0@@0|))) :qid |Messagei.140:12| :skolemid |2516| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq (AsFuelBottom $ly@@276) |strings#0@@0|)) )))
(assert  (=> true (forall (($ly@@277 T@U) (|strings#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@277) LayerTypeType) (= (type |strings#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@1|) (and ($Is |strings#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#0@@73| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@73|) (< |i#0@@73| (|Seq#Length| |strings#0@@1|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@73|))) 4294967296)) :qid |Messagei.141:21| :skolemid |2517| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@73|))) ))))) (and (and (= (|Seq#Length| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@277 |strings#0@@1|)) (|Seq#Length| |strings#0@@1|)) (forall ((|i#1@@17| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@17|) (< |i#1@@17| (|Seq#Length| |strings#0@@1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@277 |strings#0@@1|) |i#1@@17|)) (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@17|))))) :qid |Messagei.143:20| :skolemid |2518| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@17|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@277 |strings#0@@1|) |i#1@@17|))) ))) ($Is (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@277 |strings#0@@1|) (TSeq Tclass.ValueMessage.Message)))) :qid |Messagei.140:12| :skolemid |2519| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@277 |strings#0@@1|)) ))))
(assert (forall (($ly@@278 T@U) (|strings#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@278) LayerTypeType) (= (type |strings#0@@2|) (SeqType BoxType))) ($Is |strings#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@278 |strings#0@@2|) (forall ((|i#2@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@8|) (< |i#2@@8| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@8|))) 4294967296)) :qid |Messagei.141:21| :skolemid |2520| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@8|))) ))) (=> (forall ((|i#2@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@9|))) 4294967296)) :qid |Messagei.141:21| :skolemid |2520| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@9|))) )) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@278 |strings#0@@2|)))) :qid |Messagei.140:12| :skolemid |2521| :pattern ( (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@278 |strings#0@@2|)) )))
(assert (forall ((arg0@@447 T@U) (arg1@@228 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@447 arg1@@228)) DatatypeTypeType) :qid |funType:ValueMessage.__default.Merge| :pattern ( (ValueMessage.__default.Merge arg0@@447 arg1@@228)) )))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message)) :qid |Messagei.32:24| :skolemid |2522| :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|)) ))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (and (=> (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true) (=> true (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)))) :qid |Messagei.32:24| :skolemid |2523| :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)) )))
(assert  (and (and (and (forall ((arg0@@448 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@448)) (SeqType BoxType)) :qid |funType:ValueMessage.Message.value| :pattern ( (ValueMessage.Message.value arg0@@448)) )) (forall ((arg0@@449 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@449)) BoxType) :qid |funType:ValueMessage.Message.delta| :pattern ( (ValueMessage.Message.delta arg0@@449)) ))) (forall ((arg0@@450 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@450)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Define| :pattern ( (|#ValueMessage.Message.Define| arg0@@450)) ))) (forall ((arg0@@451 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@451)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Update| :pattern ( (|#ValueMessage.Message.Update| arg0@@451)) ))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#0@@1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@1| |value#0@@1|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#0@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0@@1| |olddelta#0@@1|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| |newvalue#1|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|delta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#1| |value#1|)))) (let ((|olddelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|newdelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#1| |olddelta#1|))))))))) :qid |Messagei.32:24| :skolemid |2524| :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|)) ))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#2| |value#2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#2| |olddelta#2|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| |newvalue#3|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|delta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#3| |value#3|)))) (let ((|olddelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|newdelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#3| |olddelta#3|))))))))) :qid |Messagei.32:24| :weight 3 :skolemid |2525| :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|))) ))))
(assert (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true |ValueMessage.__default.IdentityMessage#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (|#ValueMessage.Message.Update| ValueMessage.__default.NopDelta))))))
(assert (= (type ValueMessage.__default.DefineDefault) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefineDefault Tclass.ValueMessage.Message))))
(assert  (=> |ValueMessage.__default.DefineDefault#requires| true))
(assert  (=> true |ValueMessage.__default.DefineDefault#requires|))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (|#ValueMessage.Message.Define| ValueMessage.__default.DefaultValue))))))
(assert (forall ((|a#0#0#0@@1| T@U) ) (!  (=> (= (type |a#0#0#0@@1|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@1|)) |##ValueMessage.Message.Define|)) :qid |Messagei.22:13| :skolemid |2526| :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@1|)) )))
(assert (forall ((d@@128 T@U) ) (!  (=> (= (type d@@128) DatatypeTypeType) (and (=> (ValueMessage.Message.Define_q d@@128) (= (DatatypeCtorId d@@128) |##ValueMessage.Message.Define|)) (=> (= (DatatypeCtorId d@@128) |##ValueMessage.Message.Define|) (ValueMessage.Message.Define_q d@@128)))) :qid |unknown.0:0| :skolemid |2527| :pattern ( (ValueMessage.Message.Define_q d@@128)) )))
(assert (forall ((d@@129 T@U) ) (!  (=> (and (= (type d@@129) DatatypeTypeType) (ValueMessage.Message.Define_q d@@129)) (exists ((|a#1#0#0@@1| T@U) ) (!  (and (= (type |a#1#0#0@@1|) (SeqType BoxType)) (= d@@129 (|#ValueMessage.Message.Define| |a#1#0#0@@1|))) :qid |Messagei.22:13| :skolemid |2528| :no-pattern (type |a#1#0#0@@1|) :no-pattern (U_2_int |a#1#0#0@@1|) :no-pattern (U_2_bool |a#1#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |2529| :pattern ( (ValueMessage.Message.Define_q d@@129)) )))
(assert (forall ((|a#2#0#0@@1| T@U) ) (!  (=> (= (type |a#2#0#0@@1|) (SeqType BoxType)) (and (=> ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@1| Tclass.ValueType.Value)) (=> ($Is |a#2#0#0@@1| Tclass.ValueType.Value) ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message)))) :qid |Messagei.22:13| :skolemid |2530| :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#3#0#0@@1| T@U) ($h@@116 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@1|) (SeqType BoxType)) (= (type $h@@116) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@116)) (and (=> ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@116) ($IsAlloc |a#3#0#0@@1| Tclass.ValueType.Value $h@@116)) (=> ($IsAlloc |a#3#0#0@@1| Tclass.ValueType.Value $h@@116) ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@116)))) :qid |Messagei.22:13| :skolemid |2531| :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@1|) Tclass.ValueMessage.Message $h@@116)) )))
(assert (forall ((d@@130 T@U) ($h@@117 T@U) ) (!  (=> (and (and (= (type d@@130) DatatypeTypeType) (= (type $h@@117) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@117) (and (ValueMessage.Message.Define_q d@@130) ($IsAlloc d@@130 Tclass.ValueMessage.Message $h@@117)))) ($IsAlloc (ValueMessage.Message.value d@@130) Tclass.ValueType.Value $h@@117)) :qid |unknown.0:0| :skolemid |2532| :pattern ( ($IsAlloc (ValueMessage.Message.value d@@130) Tclass.ValueType.Value $h@@117)) )))
(assert (forall ((|a#4#0#0@@1| T@U) ) (!  (=> (= (type |a#4#0#0@@1|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@1|)))) :qid |Messagei.22:13| :skolemid |2533| :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@1|))) )))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) |a#5#0#0@@1|)) :qid |Messagei.22:13| :skolemid |2534| :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@1|)) )))
(assert (forall ((|a#6#0#0@@1| T@U) ) (!  (=> (= (type |a#6#0#0@@1|) BoxType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) |##ValueMessage.Message.Update|)) :qid |Messagei.23:13| :skolemid |2535| :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@1|)) )))
(assert (forall ((d@@131 T@U) ) (!  (=> (= (type d@@131) DatatypeTypeType) (and (=> (ValueMessage.Message.Update_q d@@131) (= (DatatypeCtorId d@@131) |##ValueMessage.Message.Update|)) (=> (= (DatatypeCtorId d@@131) |##ValueMessage.Message.Update|) (ValueMessage.Message.Update_q d@@131)))) :qid |unknown.0:0| :skolemid |2536| :pattern ( (ValueMessage.Message.Update_q d@@131)) )))
(assert (forall ((d@@132 T@U) ) (!  (=> (and (= (type d@@132) DatatypeTypeType) (ValueMessage.Message.Update_q d@@132)) (exists ((|a#7#0#0@@1| T@U) ) (!  (and (= (type |a#7#0#0@@1|) BoxType) (= d@@132 (|#ValueMessage.Message.Update| |a#7#0#0@@1|))) :qid |Messagei.23:13| :skolemid |2537| :no-pattern (type |a#7#0#0@@1|) :no-pattern (U_2_int |a#7#0#0@@1|) :no-pattern (U_2_bool |a#7#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |2538| :pattern ( (ValueMessage.Message.Update_q d@@132)) )))
(assert (forall ((|a#8#0#0@@1| T@U) ) (!  (=> (= (type |a#8#0#0@@1|) BoxType) (and (=> ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message) ($IsBox |a#8#0#0@@1| Tclass.ValueMessage.Delta)) (=> ($IsBox |a#8#0#0@@1| Tclass.ValueMessage.Delta) ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)))) :qid |Messagei.23:13| :skolemid |2539| :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@1|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ($h@@118 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@0|) BoxType) (= (type $h@@118) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@118)) (and (=> ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@118) ($IsAllocBox |a#9#0#0@@0| Tclass.ValueMessage.Delta $h@@118)) (=> ($IsAllocBox |a#9#0#0@@0| Tclass.ValueMessage.Delta $h@@118) ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@118)))) :qid |Messagei.23:13| :skolemid |2540| :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@0|) Tclass.ValueMessage.Message $h@@118)) )))
(assert (forall ((d@@133 T@U) ($h@@119 T@U) ) (!  (=> (and (and (= (type d@@133) DatatypeTypeType) (= (type $h@@119) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@119) (and (ValueMessage.Message.Update_q d@@133) ($IsAlloc d@@133 Tclass.ValueMessage.Message $h@@119)))) ($IsAllocBox (ValueMessage.Message.delta d@@133) Tclass.ValueMessage.Delta $h@@119)) :qid |unknown.0:0| :skolemid |2541| :pattern ( ($IsAllocBox (ValueMessage.Message.delta d@@133) Tclass.ValueMessage.Delta $h@@119)) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) BoxType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@0|)))) :qid |Messagei.23:13| :skolemid |2542| :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@0|))) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) BoxType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@0|)) |a#11#0#0@@0|)) :qid |Messagei.23:13| :skolemid |2543| :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@0|)) )))
(assert (forall ((d@@134 T@U) ) (!  (=> (and (= (type d@@134) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@134)) (or (ValueMessage.Message.Define_q d@@134) (ValueMessage.Message.Update_q d@@134))) :qid |unknown.0:0| :skolemid |2544| :pattern ( (|$IsA#ValueMessage.Message| d@@134)) )))
(assert (forall ((d@@135 T@U) ) (!  (=> (and (= (type d@@135) DatatypeTypeType) ($Is d@@135 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@135) (ValueMessage.Message.Update_q d@@135))) :qid |unknown.0:0| :skolemid |2545| :pattern ( (ValueMessage.Message.Update_q d@@135) ($Is d@@135 Tclass.ValueMessage.Message)) :pattern ( (ValueMessage.Message.Define_q d@@135) ($Is d@@135 Tclass.ValueMessage.Message)) )))
(assert (forall ((a@@177 T@U) (b@@108 T@U) ) (!  (=> (and (and (= (type a@@177) DatatypeTypeType) (= (type b@@108) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@177) (ValueMessage.Message.Define_q b@@108))) (and (=> (|ValueMessage.Message#Equal| a@@177 b@@108) (|Seq#Equal| (ValueMessage.Message.value a@@177) (ValueMessage.Message.value b@@108))) (=> (|Seq#Equal| (ValueMessage.Message.value a@@177) (ValueMessage.Message.value b@@108)) (|ValueMessage.Message#Equal| a@@177 b@@108)))) :qid |unknown.0:0| :skolemid |2546| :pattern ( (|ValueMessage.Message#Equal| a@@177 b@@108) (ValueMessage.Message.Define_q a@@177)) :pattern ( (|ValueMessage.Message#Equal| a@@177 b@@108) (ValueMessage.Message.Define_q b@@108)) )))
(assert (forall ((a@@178 T@U) (b@@109 T@U) ) (!  (=> (and (and (= (type a@@178) DatatypeTypeType) (= (type b@@109) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@178) (ValueMessage.Message.Update_q b@@109))) (and (=> (|ValueMessage.Message#Equal| a@@178 b@@109) (= (ValueMessage.Message.delta a@@178) (ValueMessage.Message.delta b@@109))) (=> (= (ValueMessage.Message.delta a@@178) (ValueMessage.Message.delta b@@109)) (|ValueMessage.Message#Equal| a@@178 b@@109)))) :qid |unknown.0:0| :skolemid |2547| :pattern ( (|ValueMessage.Message#Equal| a@@178 b@@109) (ValueMessage.Message.Update_q a@@178)) :pattern ( (|ValueMessage.Message#Equal| a@@178 b@@109) (ValueMessage.Message.Update_q b@@109)) )))
(assert (forall ((a@@179 T@U) (b@@110 T@U) ) (!  (=> (and (= (type a@@179) DatatypeTypeType) (= (type b@@110) DatatypeTypeType)) (and (=> (|ValueMessage.Message#Equal| a@@179 b@@110) (= a@@179 b@@110)) (=> (= a@@179 b@@110) (|ValueMessage.Message#Equal| a@@179 b@@110)))) :qid |unknown.0:0| :skolemid |2548| :pattern ( (|ValueMessage.Message#Equal| a@@179 b@@110)) )))
(assert (forall ((arg0@@452 T@U) (arg1@@229 T@U) ) (! (= (type (|#Journal.JournalEntry.JournalInsert| arg0@@452 arg1@@229)) DatatypeTypeType) :qid |funType:#Journal.JournalEntry.JournalInsert| :pattern ( (|#Journal.JournalEntry.JournalInsert| arg0@@452 arg1@@229)) )))
(assert (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (!  (=> (and (= (type |a#12#0#0|) (SeqType BoxType)) (= (type |a#12#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#Journal.JournalEntry.JournalInsert| |a#12#0#0| |a#12#1#0|)) |##Journal.JournalEntry.JournalInsert|)) :qid |Journali.12:41| :skolemid |2549| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#12#0#0| |a#12#1#0|)) )))
(assert (forall ((d@@136 T@U) ) (!  (=> (= (type d@@136) DatatypeTypeType) (and (=> (Journal.JournalEntry.JournalInsert_q d@@136) (= (DatatypeCtorId d@@136) |##Journal.JournalEntry.JournalInsert|)) (=> (= (DatatypeCtorId d@@136) |##Journal.JournalEntry.JournalInsert|) (Journal.JournalEntry.JournalInsert_q d@@136)))) :qid |unknown.0:0| :skolemid |2550| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@136)) )))
(assert (forall ((d@@137 T@U) ) (!  (=> (and (= (type d@@137) DatatypeTypeType) (Journal.JournalEntry.JournalInsert_q d@@137)) (exists ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (!  (and (and (= (type |a#13#0#0|) (SeqType BoxType)) (= (type |a#13#1#0|) (SeqType BoxType))) (= d@@137 (|#Journal.JournalEntry.JournalInsert| |a#13#0#0| |a#13#1#0|))) :qid |Journali.12:41| :skolemid |2551| :no-pattern (type |a#13#0#0|) :no-pattern (type |a#13#1#0|) :no-pattern (U_2_int |a#13#0#0|) :no-pattern (U_2_bool |a#13#0#0|) :no-pattern (U_2_int |a#13#1#0|) :no-pattern (U_2_bool |a#13#1#0|) ))) :qid |unknown.0:0| :skolemid |2552| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@137)) )))
(assert (forall ((|a#14#0#0@@0| T@U) (|a#14#1#0| T@U) ) (!  (=> (and (= (type |a#14#0#0@@0|) (SeqType BoxType)) (= (type |a#14#1#0|) (SeqType BoxType))) (and (=> ($Is (|#Journal.JournalEntry.JournalInsert| |a#14#0#0@@0| |a#14#1#0|) Tclass.Journal.JournalEntry) (and ($Is |a#14#0#0@@0| Tclass.KeyType.Key) ($Is |a#14#1#0| Tclass.ValueType.Value))) (=> (and ($Is |a#14#0#0@@0| Tclass.KeyType.Key) ($Is |a#14#1#0| Tclass.ValueType.Value)) ($Is (|#Journal.JournalEntry.JournalInsert| |a#14#0#0@@0| |a#14#1#0|) Tclass.Journal.JournalEntry)))) :qid |Journali.12:41| :skolemid |2553| :pattern ( ($Is (|#Journal.JournalEntry.JournalInsert| |a#14#0#0@@0| |a#14#1#0|) Tclass.Journal.JournalEntry)) )))
(assert (forall ((|a#15#0#0@@0| T@U) (|a#15#1#0| T@U) ($h@@120 T@U) ) (!  (=> (and (and (and (= (type |a#15#0#0@@0|) (SeqType BoxType)) (= (type |a#15#1#0|) (SeqType BoxType))) (= (type $h@@120) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@120)) (and (=> ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#15#0#0@@0| |a#15#1#0|) Tclass.Journal.JournalEntry $h@@120) (and ($IsAlloc |a#15#0#0@@0| Tclass.KeyType.Key $h@@120) ($IsAlloc |a#15#1#0| Tclass.ValueType.Value $h@@120))) (=> (and ($IsAlloc |a#15#0#0@@0| Tclass.KeyType.Key $h@@120) ($IsAlloc |a#15#1#0| Tclass.ValueType.Value $h@@120)) ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#15#0#0@@0| |a#15#1#0|) Tclass.Journal.JournalEntry $h@@120)))) :qid |Journali.12:41| :skolemid |2554| :pattern ( ($IsAlloc (|#Journal.JournalEntry.JournalInsert| |a#15#0#0@@0| |a#15#1#0|) Tclass.Journal.JournalEntry $h@@120)) )))
(assert (forall ((arg0@@453 T@U) ) (! (= (type (Journal.JournalEntry.key arg0@@453)) (SeqType BoxType)) :qid |funType:Journal.JournalEntry.key| :pattern ( (Journal.JournalEntry.key arg0@@453)) )))
(assert (forall ((d@@138 T@U) ($h@@121 T@U) ) (!  (=> (and (and (= (type d@@138) DatatypeTypeType) (= (type $h@@121) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@121) (and (Journal.JournalEntry.JournalInsert_q d@@138) ($IsAlloc d@@138 Tclass.Journal.JournalEntry $h@@121)))) ($IsAlloc (Journal.JournalEntry.key d@@138) Tclass.KeyType.Key $h@@121)) :qid |unknown.0:0| :skolemid |2555| :pattern ( ($IsAlloc (Journal.JournalEntry.key d@@138) Tclass.KeyType.Key $h@@121)) )))
(assert (forall ((arg0@@454 T@U) ) (! (= (type (Journal.JournalEntry.value arg0@@454)) (SeqType BoxType)) :qid |funType:Journal.JournalEntry.value| :pattern ( (Journal.JournalEntry.value arg0@@454)) )))
(assert (forall ((d@@139 T@U) ($h@@122 T@U) ) (!  (=> (and (and (= (type d@@139) DatatypeTypeType) (= (type $h@@122) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@122) (and (Journal.JournalEntry.JournalInsert_q d@@139) ($IsAlloc d@@139 Tclass.Journal.JournalEntry $h@@122)))) ($IsAlloc (Journal.JournalEntry.value d@@139) Tclass.ValueType.Value $h@@122)) :qid |unknown.0:0| :skolemid |2556| :pattern ( ($IsAlloc (Journal.JournalEntry.value d@@139) Tclass.ValueType.Value $h@@122)) )))
(assert (forall ((|a#16#0#0@@0| T@U) (|a#16#1#0| T@U) ) (!  (=> (and (= (type |a#16#0#0@@0|) (SeqType BoxType)) (= (type |a#16#1#0|) (SeqType BoxType))) (= (|#Journal.JournalEntry.JournalInsert| (Lit |a#16#0#0@@0|) (Lit |a#16#1#0|)) (Lit (|#Journal.JournalEntry.JournalInsert| |a#16#0#0@@0| |a#16#1#0|)))) :qid |Journali.12:41| :skolemid |2557| :pattern ( (|#Journal.JournalEntry.JournalInsert| (Lit |a#16#0#0@@0|) (Lit |a#16#1#0|))) )))
(assert (forall ((|a#17#0#0@@1| T@U) (|a#17#1#0| T@U) ) (!  (=> (and (= (type |a#17#0#0@@1|) (SeqType BoxType)) (= (type |a#17#1#0|) (SeqType BoxType))) (= (Journal.JournalEntry.key (|#Journal.JournalEntry.JournalInsert| |a#17#0#0@@1| |a#17#1#0|)) |a#17#0#0@@1|)) :qid |Journali.12:41| :skolemid |2558| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#17#0#0@@1| |a#17#1#0|)) )))
(assert (forall ((|a#18#0#0@@1| T@U) (|a#18#1#0| T@U) ) (!  (=> (and (= (type |a#18#0#0@@1|) (SeqType BoxType)) (= (type |a#18#1#0|) (SeqType BoxType))) (= (Journal.JournalEntry.value (|#Journal.JournalEntry.JournalInsert| |a#18#0#0@@1| |a#18#1#0|)) |a#18#1#0|)) :qid |Journali.12:41| :skolemid |2559| :pattern ( (|#Journal.JournalEntry.JournalInsert| |a#18#0#0@@1| |a#18#1#0|)) )))
(assert (forall ((d@@140 T@U) ) (!  (=> (and (= (type d@@140) DatatypeTypeType) (|$IsA#Journal.JournalEntry| d@@140)) (Journal.JournalEntry.JournalInsert_q d@@140)) :qid |unknown.0:0| :skolemid |2560| :pattern ( (|$IsA#Journal.JournalEntry| d@@140)) )))
(assert (forall ((d@@141 T@U) ) (!  (=> (and (= (type d@@141) DatatypeTypeType) ($Is d@@141 Tclass.Journal.JournalEntry)) (Journal.JournalEntry.JournalInsert_q d@@141)) :qid |unknown.0:0| :skolemid |2561| :pattern ( (Journal.JournalEntry.JournalInsert_q d@@141) ($Is d@@141 Tclass.Journal.JournalEntry)) )))
(assert (forall ((a@@180 T@U) (b@@111 T@U) ) (!  (=> (and (and (= (type a@@180) DatatypeTypeType) (= (type b@@111) DatatypeTypeType)) true) (and (=> (|Journal.JournalEntry#Equal| a@@180 b@@111) (and (|Seq#Equal| (Journal.JournalEntry.key a@@180) (Journal.JournalEntry.key b@@111)) (|Seq#Equal| (Journal.JournalEntry.value a@@180) (Journal.JournalEntry.value b@@111)))) (=> (and (|Seq#Equal| (Journal.JournalEntry.key a@@180) (Journal.JournalEntry.key b@@111)) (|Seq#Equal| (Journal.JournalEntry.value a@@180) (Journal.JournalEntry.value b@@111))) (|Journal.JournalEntry#Equal| a@@180 b@@111)))) :qid |unknown.0:0| :skolemid |2562| :pattern ( (|Journal.JournalEntry#Equal| a@@180 b@@111)) )))
(assert (forall ((a@@181 T@U) (b@@112 T@U) ) (!  (=> (and (= (type a@@181) DatatypeTypeType) (= (type b@@112) DatatypeTypeType)) (and (=> (|Journal.JournalEntry#Equal| a@@181 b@@112) (= a@@181 b@@112)) (=> (= a@@181 b@@112) (|Journal.JournalEntry#Equal| a@@181 b@@112)))) :qid |unknown.0:0| :skolemid |2563| :pattern ( (|Journal.JournalEntry#Equal| a@@181 b@@112)) )))
(assert (= (type Tclass.Journal.__default) TyType))
(assert (= (Tag Tclass.Journal.__default) Tagclass.Journal.__default))
(assert (forall ((bx@@147 T@U) ) (!  (=> (and (= (type bx@@147) BoxType) ($IsBox bx@@147 Tclass.Journal.__default)) (and (= ($Box ($Unbox refType bx@@147)) bx@@147) ($Is ($Unbox refType bx@@147) Tclass.Journal.__default))) :qid |unknown.0:0| :skolemid |2564| :pattern ( ($IsBox bx@@147 Tclass.Journal.__default)) )))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (and (=> ($Is $o@@34 Tclass.Journal.__default) (or (= $o@@34 null) (= (dtype $o@@34) Tclass.Journal.__default))) (=> (or (= $o@@34 null) (= (dtype $o@@34) Tclass.Journal.__default)) ($Is $o@@34 Tclass.Journal.__default)))) :qid |unknown.0:0| :skolemid |2565| :pattern ( ($Is $o@@34 Tclass.Journal.__default)) )))
(assert (forall (($o@@35 T@U) ($h@@123 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@123) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@35 Tclass.Journal.__default $h@@123) (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@123 $o@@35) alloc)))) (=> (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@123 $o@@35) alloc))) ($IsAlloc $o@@35 Tclass.Journal.__default $h@@123)))) :qid |unknown.0:0| :skolemid |2566| :pattern ( ($IsAlloc $o@@35 Tclass.Journal.__default $h@@123)) )))
(assert  (=> true (forall ((|uiop#0@@47| T@U) ) (!  (=> (and (= (type |uiop#0@@47|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| |uiop#0@@47|) ($Is |uiop#0@@47| Tclass.UI.Op))) ($Is (Journal.__default.JournalEntriesForUIOp |uiop#0@@47|) (TSeq Tclass.Journal.JournalEntry))) :qid |Journali.14:34| :skolemid |2567| :pattern ( (Journal.__default.JournalEntriesForUIOp |uiop#0@@47|)) ))))
(assert (forall ((|uiop#0@@48| T@U) ) (!  (=> (and (= (type |uiop#0@@48|) DatatypeTypeType) ($Is |uiop#0@@48| Tclass.UI.Op)) (and (=> (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@48|) true) (=> true (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@48|)))) :qid |Journali.14:34| :skolemid |2568| :pattern ( (|Journal.__default.JournalEntriesForUIOp#requires| |uiop#0@@48|)) )))
(assert  (=> true (forall ((|uiop#0@@49| T@U) ) (!  (=> (and (= (type |uiop#0@@49|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| |uiop#0@@49|) ($Is |uiop#0@@49| Tclass.UI.Op))) (= (Journal.__default.JournalEntriesForUIOp |uiop#0@@49|) (ite (UI.Op.PutOp_q |uiop#0@@49|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#Journal.JournalEntry.JournalInsert| (UI.Op.key |uiop#0@@49|) (UI.Op.value |uiop#0@@49|)))) (|Seq#Empty| BoxType)))) :qid |Journali.14:34| :skolemid |2569| :pattern ( (Journal.__default.JournalEntriesForUIOp |uiop#0@@49|)) ))))
(assert  (=> true (forall ((|uiop#0@@50| T@U) ) (!  (=> (and (= (type |uiop#0@@50|) DatatypeTypeType) (or (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit |uiop#0@@50|)) ($Is |uiop#0@@50| Tclass.UI.Op))) (= (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@50|)) (ite (UI.Op.PutOp_q (Lit |uiop#0@@50|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#Journal.JournalEntry.JournalInsert| (Lit (UI.Op.key (Lit |uiop#0@@50|))) (Lit (UI.Op.value (Lit |uiop#0@@50|))))))) (|Seq#Empty| BoxType)))) :qid |Journali.14:34| :weight 3 :skolemid |2570| :pattern ( (Journal.__default.JournalEntriesForUIOp (Lit |uiop#0@@50|))) ))))
(assert (forall (($ly@@279 T@U) (|uiops#0@@7| T@U) ) (!  (=> (and (= (type $ly@@279) LayerTypeType) (= (type |uiops#0@@7|) (SeqType BoxType))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@279) |uiops#0@@7|) (Journal.__default.JournalEntriesForUIOps $ly@@279 |uiops#0@@7|))) :qid |Journali.22:12| :skolemid |2571| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@279) |uiops#0@@7|)) )))
(assert (forall (($ly@@280 T@U) (|uiops#0@@8| T@U) ) (!  (=> (and (= (type $ly@@280) LayerTypeType) (= (type |uiops#0@@8|) (SeqType BoxType))) (= (Journal.__default.JournalEntriesForUIOps $ly@@280 |uiops#0@@8|) (Journal.__default.JournalEntriesForUIOps $LZ |uiops#0@@8|))) :qid |Journali.22:12| :skolemid |2572| :pattern ( (Journal.__default.JournalEntriesForUIOps (AsFuelBottom $ly@@280) |uiops#0@@8|)) )))
(assert  (=> true (forall (($ly@@281 T@U) (|uiops#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@281) LayerTypeType) (= (type |uiops#0@@9|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#0@@9|) ($Is |uiops#0@@9| (TSeq Tclass.UI.Op)))) ($Is (Journal.__default.JournalEntriesForUIOps $ly@@281 |uiops#0@@9|) (TSeq Tclass.Journal.JournalEntry))) :qid |Journali.22:12| :skolemid |2573| :pattern ( (Journal.__default.JournalEntriesForUIOps $ly@@281 |uiops#0@@9|)) ))))
(assert (forall (($ly@@282 T@U) (|uiops#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@282) LayerTypeType) (= (type |uiops#0@@10|) (SeqType BoxType))) ($Is |uiops#0@@10| (TSeq Tclass.UI.Op))) (and (=> (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@282 |uiops#0@@10|) true) (=> true (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@282 |uiops#0@@10|)))) :qid |Journali.22:12| :skolemid |2574| :pattern ( (|Journal.__default.JournalEntriesForUIOps#requires| $ly@@282 |uiops#0@@10|)) )))
(assert  (=> true (forall (($ly@@283 T@U) (|uiops#0@@11| T@U) ) (!  (=> (and (and (= (type $ly@@283) LayerTypeType) (= (type |uiops#0@@11|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| |uiops#0@@11|) ($Is |uiops#0@@11| (TSeq Tclass.UI.Op)))) (and (=> (not (|Seq#Equal| |uiops#0@@11| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.UI.Op |uiops#0@@11|) (|Journal.__default.JournalEntriesForUIOps#canCall| (Sequences.__default.DropLast Tclass.UI.Op |uiops#0@@11|))) (and (|Sequences.__default.Last#canCall| Tclass.UI.Op |uiops#0@@11|) (|Journal.__default.JournalEntriesForUIOp#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op |uiops#0@@11|)))))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@283) |uiops#0@@11|) (ite (|Seq#Equal| |uiops#0@@11| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (Journal.__default.JournalEntriesForUIOps $ly@@283 (Sequences.__default.DropLast Tclass.UI.Op |uiops#0@@11|)) (Journal.__default.JournalEntriesForUIOp ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op |uiops#0@@11|)))))))) :qid |Journali.22:12| :skolemid |2575| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@283) |uiops#0@@11|)) ))))
(assert  (=> true (forall (($ly@@284 T@U) (|uiops#0@@12| T@U) ) (!  (=> (and (and (= (type $ly@@284) LayerTypeType) (= (type |uiops#0@@12|) (SeqType BoxType))) (or (|Journal.__default.JournalEntriesForUIOps#canCall| (Lit |uiops#0@@12|)) ($Is |uiops#0@@12| (TSeq Tclass.UI.Op)))) (and (=> (not (|Seq#Equal| |uiops#0@@12| (|Seq#Empty| BoxType))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.UI.Op (Lit |uiops#0@@12|)) (|Journal.__default.JournalEntriesForUIOps#canCall| (Lit (Sequences.__default.DropLast Tclass.UI.Op (Lit |uiops#0@@12|))))) (and (|Sequences.__default.Last#canCall| Tclass.UI.Op (Lit |uiops#0@@12|)) (|Journal.__default.JournalEntriesForUIOp#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op (Lit |uiops#0@@12|)))))))) (= (Journal.__default.JournalEntriesForUIOps ($LS $ly@@284) (Lit |uiops#0@@12|)) (ite (|Seq#Equal| |uiops#0@@12| (|Seq#Empty| BoxType)) (|Seq#Empty| BoxType) (|Seq#Append| (Journal.__default.JournalEntriesForUIOps ($LS $ly@@284) (Lit (Sequences.__default.DropLast Tclass.UI.Op (Lit |uiops#0@@12|)))) (Journal.__default.JournalEntriesForUIOp (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.UI.Op (Lit |uiops#0@@12|)))))))))) :qid |Journali.22:12| :weight 3 :skolemid |2576| :pattern ( (Journal.__default.JournalEntriesForUIOps ($LS $ly@@284) (Lit |uiops#0@@12|))) ))))
(assert (= (type Tclass.TSJ.SM.Abs.__default) TyType))
(assert (= (Tag Tclass.TSJ.SM.Abs.__default) Tagclass.TSJ.SM.Abs.__default))
(assert (forall ((bx@@148 T@U) ) (!  (=> (and (= (type bx@@148) BoxType) ($IsBox bx@@148 Tclass.TSJ.SM.Abs.__default)) (and (= ($Box ($Unbox refType bx@@148)) bx@@148) ($Is ($Unbox refType bx@@148) Tclass.TSJ.SM.Abs.__default))) :qid |unknown.0:0| :skolemid |2577| :pattern ( ($IsBox bx@@148 Tclass.TSJ.SM.Abs.__default)) )))
(assert (forall (($o@@36 T@U) ) (!  (=> (= (type $o@@36) refType) (and (=> ($Is $o@@36 Tclass.TSJ.SM.Abs.__default) (or (= $o@@36 null) (= (dtype $o@@36) Tclass.TSJ.SM.Abs.__default))) (=> (or (= $o@@36 null) (= (dtype $o@@36) Tclass.TSJ.SM.Abs.__default)) ($Is $o@@36 Tclass.TSJ.SM.Abs.__default)))) :qid |unknown.0:0| :skolemid |2578| :pattern ( ($Is $o@@36 Tclass.TSJ.SM.Abs.__default)) )))
(assert (forall (($o@@37 T@U) ($h@@124 T@U) ) (!  (=> (and (= (type $o@@37) refType) (= (type $h@@124) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@37 Tclass.TSJ.SM.Abs.__default $h@@124) (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@124 $o@@37) alloc)))) (=> (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@124 $o@@37) alloc))) ($IsAlloc $o@@37 Tclass.TSJ.SM.Abs.__default $h@@124)))) :qid |unknown.0:0| :skolemid |2579| :pattern ( ($IsAlloc $o@@37 Tclass.TSJ.SM.Abs.__default $h@@124)) )))
(assert  (=> true (forall ((|k#0@@117| T@U) (|s#0@@129| T@U) ) (!  (=> (and (and (= (type |k#0@@117|) BoxType) (= (type |s#0@@129|) BoxType)) (or (|TSJ.SM.Abs.__default.Init#canCall| |k#0@@117| |s#0@@129|) (and ($IsBox |k#0@@117| |#$Constants|) ($IsBox |s#0@@129| |#$Variables|)))) true) :qid |UIStateM.9:18| :skolemid |2580| :pattern ( (TSJ.SM.Abs.__default.Init |k#0@@117| |s#0@@129|)) ))))
(assert (forall ((|k#0@@118| T@U) (|s#0@@130| T@U) ) (!  (=> (and (and (= (type |k#0@@118|) BoxType) (= (type |s#0@@130|) BoxType)) (and ($IsBox |k#0@@118| |#$Constants|) ($IsBox |s#0@@130| |#$Variables|))) (and (=> (|TSJ.SM.Abs.__default.Init#requires| |k#0@@118| |s#0@@130|) true) (=> true (|TSJ.SM.Abs.__default.Init#requires| |k#0@@118| |s#0@@130|)))) :qid |UIStateM.9:18| :skolemid |2581| :pattern ( (|TSJ.SM.Abs.__default.Init#requires| |k#0@@118| |s#0@@130|)) )))
(assert  (=> true (forall ((|k#0@@119| T@U) (|s#0@@131| T@U) (|s'#0@@62| T@U) (|uiop#0@@51| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@119|) BoxType) (= (type |s#0@@131|) BoxType)) (= (type |s'#0@@62|) BoxType)) (= (type |uiop#0@@51|) DatatypeTypeType)) (or (|TSJ.SM.Abs.__default.Next#canCall| |k#0@@119| |s#0@@131| |s'#0@@62| |uiop#0@@51|) (and (and (and ($IsBox |k#0@@119| |#$Constants|) ($IsBox |s#0@@131| |#$Variables|)) ($IsBox |s'#0@@62| |#$Variables|)) ($Is |uiop#0@@51| Tclass.UI.Op)))) true) :qid |UIStateM.10:18| :skolemid |2582| :pattern ( (TSJ.SM.Abs.__default.Next |k#0@@119| |s#0@@131| |s'#0@@62| |uiop#0@@51|)) ))))
(assert (forall ((|k#0@@120| T@U) (|s#0@@132| T@U) (|s'#0@@63| T@U) (|uiop#0@@52| T@U) ) (!  (=> (and (and (and (and (= (type |k#0@@120|) BoxType) (= (type |s#0@@132|) BoxType)) (= (type |s'#0@@63|) BoxType)) (= (type |uiop#0@@52|) DatatypeTypeType)) (and (and (and ($IsBox |k#0@@120| |#$Constants|) ($IsBox |s#0@@132| |#$Variables|)) ($IsBox |s'#0@@63| |#$Variables|)) ($Is |uiop#0@@52| Tclass.UI.Op))) (and (=> (|TSJ.SM.Abs.__default.Next#requires| |k#0@@120| |s#0@@132| |s'#0@@63| |uiop#0@@52|) true) (=> true (|TSJ.SM.Abs.__default.Next#requires| |k#0@@120| |s#0@@132| |s'#0@@63| |uiop#0@@52|)))) :qid |UIStateM.10:18| :skolemid |2583| :pattern ( (|TSJ.SM.Abs.__default.Next#requires| |k#0@@120| |s#0@@132| |s'#0@@63| |uiop#0@@52|)) )))
(assert  (=> true (forall ((|k#0@@121| T@U) (|s#0@@133| T@U) ) (!  (=> (and (and (= (type |k#0@@121|) BoxType) (= (type |s#0@@133|) BoxType)) (or (|TSJ.SM.Abs.__default.Inv#canCall| |k#0@@121| |s#0@@133|) (and ($IsBox |k#0@@121| |#$Constants|) ($IsBox |s#0@@133| |#$Variables|)))) true) :qid |UIStateM.12:17| :skolemid |2584| :pattern ( (TSJ.SM.Abs.__default.Inv |k#0@@121| |s#0@@133|)) ))))
(assert (forall ((|k#0@@122| T@U) (|s#0@@134| T@U) ) (!  (=> (and (and (= (type |k#0@@122|) BoxType) (= (type |s#0@@134|) BoxType)) (and ($IsBox |k#0@@122| |#$Constants|) ($IsBox |s#0@@134| |#$Variables|))) (and (=> (|TSJ.SM.Abs.__default.Inv#requires| |k#0@@122| |s#0@@134|) true) (=> true (|TSJ.SM.Abs.__default.Inv#requires| |k#0@@122| |s#0@@134|)))) :qid |UIStateM.12:17| :skolemid |2585| :pattern ( (|TSJ.SM.Abs.__default.Inv#requires| |k#0@@122| |s#0@@134|)) )))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@455 T@T) (arg1@@230 T@T) ) (! (= (Ctor (MapType9Type arg0@@455 arg1@@230)) 28) :qid |ctor:MapType9Type| )) (forall ((arg0@@456 T@T) (arg1@@231 T@T) ) (! (= (MapType9TypeInv0 (MapType9Type arg0@@456 arg1@@231)) arg0@@456) :qid |typeInv:MapType9TypeInv0| :pattern ( (MapType9Type arg0@@456 arg1@@231)) ))) (forall ((arg0@@457 T@T) (arg1@@232 T@T) ) (! (= (MapType9TypeInv1 (MapType9Type arg0@@457 arg1@@232)) arg1@@232) :qid |typeInv:MapType9TypeInv1| :pattern ( (MapType9Type arg0@@457 arg1@@232)) ))) (forall ((arg0@@458 T@U) (arg1@@233 T@U) (arg2@@169 T@U) ) (! (let ((aVar1@@9 (MapType9TypeInv1 (type arg0@@458)))) (= (type (MapType9Select arg0@@458 arg1@@233 arg2@@169)) aVar1@@9)) :qid |funType:MapType9Select| :pattern ( (MapType9Select arg0@@458 arg1@@233 arg2@@169)) ))) (forall ((arg0@@459 T@U) (arg1@@234 T@U) (arg2@@170 T@U) (arg3@@132 T@U) ) (! (let ((aVar1@@10 (type arg3@@132))) (let ((aVar0@@7 (type arg1@@234))) (= (type (MapType9Store arg0@@459 arg1@@234 arg2@@170 arg3@@132)) (MapType9Type aVar0@@7 aVar1@@10)))) :qid |funType:MapType9Store| :pattern ( (MapType9Store arg0@@459 arg1@@234 arg2@@170 arg3@@132)) ))) (forall ((m@@76 T@U) (x0@@54 T@U) (x1@@48 T@U) (val@@55 T@U) ) (! (let ((aVar1@@11 (MapType9TypeInv1 (type m@@76)))) (=> (= (type val@@55) aVar1@@11) (= (MapType9Select (MapType9Store m@@76 x0@@54 x1@@48 val@@55) x0@@54 x1@@48) val@@55))) :qid |mapAx0:MapType9Select| :weight 0 ))) (and (and (forall ((val@@56 T@U) (m@@77 T@U) (x0@@55 T@U) (x1@@49 T@U) (y0@@45 T@U) (y1@@41 T@U) ) (!  (or (= x0@@55 y0@@45) (= (MapType9Select (MapType9Store m@@77 x0@@55 x1@@49 val@@56) y0@@45 y1@@41) (MapType9Select m@@77 y0@@45 y1@@41))) :qid |mapAx1:MapType9Select:0| :weight 0 )) (forall ((val@@57 T@U) (m@@78 T@U) (x0@@56 T@U) (x1@@50 T@U) (y0@@46 T@U) (y1@@42 T@U) ) (!  (or (= x1@@50 y1@@42) (= (MapType9Select (MapType9Store m@@78 x0@@56 x1@@50 val@@57) y0@@46 y1@@42) (MapType9Select m@@78 y0@@46 y1@@42))) :qid |mapAx1:MapType9Select:1| :weight 0 ))) (forall ((val@@58 T@U) (m@@79 T@U) (x0@@57 T@U) (x1@@51 T@U) (y0@@47 T@U) (y1@@43 T@U) ) (!  (or true (= (MapType9Select (MapType9Store m@@79 x0@@57 x1@@51 val@@58) y0@@47 y1@@43) (MapType9Select m@@79 y0@@47 y1@@43))) :qid |mapAx2:MapType9Select| :weight 0 )))) (forall ((arg0@@460 T@U) (arg1@@235 T@U) (arg2@@171 T@U) (arg3@@133 Bool) ) (! (= (type (|lambda#0| arg0@@460 arg1@@235 arg2@@171 arg3@@133)) (MapType9Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@460 arg1@@235 arg2@@171 arg3@@133)) ))))
(assert (forall (($o@@38 T@U) ($f@@4 T@U) (|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type $o@@38) refType) (= (type $f@@4) (FieldType alpha@@11))) (= (type |l#0|) refType)) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@38 $f@@4))  (=> (and (not (= $o@@38 |l#0|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@38) |l#2|))) |l#3|)))) :qid |TSJidfy.47:13| :skolemid |2586| :pattern ( (MapType9Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@38 $f@@4)) )))
(assert (forall ((arg0@@461 T@U) (arg1@@236 T@U) (arg2@@172 T@U) (arg3@@134 Bool) ) (! (= (type (|lambda#1| arg0@@461 arg1@@236 arg2@@172 arg3@@134)) (MapType9Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@461 arg1@@236 arg2@@172 arg3@@134)) )))
(assert (forall (($o@@39 T@U) ($f@@5 T@U) (|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type $o@@39) refType) (= (type $f@@5) (FieldType alpha@@12))) (= (type |l#0@@0|) refType)) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@39 $f@@5))  (=> (and (not (= $o@@39 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@39) |l#2@@0|))) |l#3@@0|)))) :qid |TSJidfy.47:13| :skolemid |2587| :pattern ( (MapType9Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@39 $f@@5)) )))
(assert (forall ((arg0@@462 T@U) (arg1@@237 T@U) (arg2@@173 T@U) (arg3@@135 Bool) ) (! (= (type (|lambda#2| arg0@@462 arg1@@237 arg2@@173 arg3@@135)) (MapType9Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@462 arg1@@237 arg2@@173 arg3@@135)) )))
(assert (forall (($o@@40 T@U) ($f@@6 T@U) (|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type $o@@40) refType) (= (type $f@@6) (FieldType alpha@@13))) (= (type |l#0@@1|) refType)) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@40 $f@@6))  (=> (and (not (= $o@@40 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@40) |l#2@@1|))) |l#3@@1|)))) :qid |TSJidfy.87:13| :skolemid |2588| :pattern ( (MapType9Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@40 $f@@6)) )))
(assert (forall ((arg0@@463 T@U) (arg1@@238 T@U) (arg2@@174 T@U) (arg3@@136 Bool) ) (! (= (type (|lambda#3| arg0@@463 arg1@@238 arg2@@174 arg3@@136)) (MapType9Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@463 arg1@@238 arg2@@174 arg3@@136)) )))
(assert (forall (($o@@41 T@U) ($f@@7 T@U) (|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type $o@@41) refType) (= (type $f@@7) (FieldType alpha@@14))) (= (type |l#0@@2|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@41 $f@@7))  (=> (and (not (= $o@@41 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@41) |l#2@@2|))) |l#3@@2|)))) :qid |TSJidfy.87:13| :skolemid |2589| :pattern ( (MapType9Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@41 $f@@7)) )))
(assert (forall ((arg0@@464 T@U) (arg1@@239 T@U) (arg2@@175 T@U) (arg3@@137 Bool) ) (! (= (type (|lambda#4| arg0@@464 arg1@@239 arg2@@175 arg3@@137)) (MapType9Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@464 arg1@@239 arg2@@175 arg3@@137)) )))
(assert (forall (($o@@42 T@U) ($f@@8 T@U) (|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type $o@@42) refType) (= (type $f@@8) (FieldType alpha@@15))) (= (type |l#0@@3|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@42 $f@@8))  (=> (and (not (= $o@@42 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@42) |l#2@@3|))) |l#3@@3|)))) :qid |TSJidfy.102:13| :skolemid |2590| :pattern ( (MapType9Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@42 $f@@8)) )))
(assert (forall ((arg0@@465 T@U) (arg1@@240 T@U) (arg2@@176 T@U) (arg3@@138 Bool) ) (! (= (type (|lambda#5| arg0@@465 arg1@@240 arg2@@176 arg3@@138)) (MapType9Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@465 arg1@@240 arg2@@176 arg3@@138)) )))
(assert (forall (($o@@43 T@U) ($f@@9 T@U) (|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type $o@@43) refType) (= (type $f@@9) (FieldType alpha@@16))) (= (type |l#0@@4|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@43 $f@@9))  (=> (and (not (= $o@@43 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@43) |l#2@@4|))) |l#3@@4|)))) :qid |TSJidfy.102:13| :skolemid |2591| :pattern ( (MapType9Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@43 $f@@9)) )))
(assert (forall ((arg0@@466 T@U) (arg1@@241 T@U) (arg2@@177 T@U) (arg3@@139 Bool) ) (! (= (type (|lambda#6| arg0@@466 arg1@@241 arg2@@177 arg3@@139)) (MapType9Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@466 arg1@@241 arg2@@177 arg3@@139)) )))
(assert (forall (($o@@44 T@U) ($f@@10 T@U) (|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type $o@@44) refType) (= (type $f@@10) (FieldType alpha@@17))) (= (type |l#0@@5|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@44 $f@@10))  (=> (and (not (= $o@@44 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@44) |l#2@@5|))) |l#3@@5|)))) :qid |TSJidfy.117:13| :skolemid |2592| :pattern ( (MapType9Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@44 $f@@10)) )))
(assert (forall ((arg0@@467 T@U) (arg1@@242 T@U) (arg2@@178 T@U) (arg3@@140 Bool) ) (! (= (type (|lambda#7| arg0@@467 arg1@@242 arg2@@178 arg3@@140)) (MapType9Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@467 arg1@@242 arg2@@178 arg3@@140)) )))
(assert (forall (($o@@45 T@U) ($f@@11 T@U) (|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type $o@@45) refType) (= (type $f@@11) (FieldType alpha@@18))) (= (type |l#0@@6|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@45 $f@@11))  (=> (and (not (= $o@@45 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@45) |l#2@@6|))) |l#3@@6|)))) :qid |TSJidfy.117:13| :skolemid |2593| :pattern ( (MapType9Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@45 $f@@11)) )))
(assert (forall ((arg0@@468 T@U) (arg1@@243 T@U) (arg2@@179 T@U) (arg3@@141 Bool) ) (! (= (type (|lambda#8| arg0@@468 arg1@@243 arg2@@179 arg3@@141)) (MapType9Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@468 arg1@@243 arg2@@179 arg3@@141)) )))
(assert (forall (($o@@46 T@U) ($f@@12 T@U) (|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type $o@@46) refType) (= (type $f@@12) (FieldType alpha@@19))) (= (type |l#0@@7|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@46 $f@@12))  (=> (and (not (= $o@@46 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@46) |l#2@@7|))) |l#3@@7|)))) :qid |TSJidfy.132:13| :skolemid |2594| :pattern ( (MapType9Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@46 $f@@12)) )))
(assert (forall ((arg0@@469 T@U) (arg1@@244 T@U) (arg2@@180 T@U) (arg3@@142 Bool) ) (! (= (type (|lambda#9| arg0@@469 arg1@@244 arg2@@180 arg3@@142)) (MapType9Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@469 arg1@@244 arg2@@180 arg3@@142)) )))
(assert (forall (($o@@47 T@U) ($f@@13 T@U) (|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type $o@@47) refType) (= (type $f@@13) (FieldType alpha@@20))) (= (type |l#0@@8|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@47 $f@@13))  (=> (and (not (= $o@@47 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@47) |l#2@@8|))) |l#3@@8|)))) :qid |TSJidfy.132:13| :skolemid |2595| :pattern ( (MapType9Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@47 $f@@13)) )))
(assert (forall ((arg0@@470 T@U) (arg1@@245 T@U) (arg2@@181 T@U) (arg3@@143 Bool) ) (! (= (type (|lambda#10| arg0@@470 arg1@@245 arg2@@181 arg3@@143)) (MapType9Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@470 arg1@@245 arg2@@181 arg3@@143)) )))
(assert (forall (($o@@48 T@U) ($f@@14 T@U) (|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type $o@@48) refType) (= (type $f@@14) (FieldType alpha@@21))) (= (type |l#0@@9|) refType)) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@48 $f@@14))  (=> (and (not (= $o@@48 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@48) |l#2@@9|))) |l#3@@9|)))) :qid |TSJidfy.147:13| :skolemid |2596| :pattern ( (MapType9Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@48 $f@@14)) )))
(assert (forall ((arg0@@471 T@U) (arg1@@246 T@U) (arg2@@182 T@U) (arg3@@144 Bool) ) (! (= (type (|lambda#11| arg0@@471 arg1@@246 arg2@@182 arg3@@144)) (MapType9Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@471 arg1@@246 arg2@@182 arg3@@144)) )))
(assert (forall (($o@@49 T@U) ($f@@15 T@U) (|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type $o@@49) refType) (= (type $f@@15) (FieldType alpha@@22))) (= (type |l#0@@10|) refType)) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@49 $f@@15))  (=> (and (not (= $o@@49 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@49) |l#2@@10|))) |l#3@@10|)))) :qid |TSJidfy.147:13| :skolemid |2597| :pattern ( (MapType9Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@49 $f@@15)) )))
(assert (forall ((arg0@@472 T@U) (arg1@@247 T@U) (arg2@@183 T@U) (arg3@@145 Bool) ) (! (= (type (|lambda#12| arg0@@472 arg1@@247 arg2@@183 arg3@@145)) (MapType9Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@472 arg1@@247 arg2@@183 arg3@@145)) )))
(assert (forall (($o@@50 T@U) ($f@@16 T@U) (|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type $o@@50) refType) (= (type $f@@16) (FieldType alpha@@23))) (= (type |l#0@@11|) refType)) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@50 $f@@16))  (=> (and (not (= $o@@50 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@50) |l#2@@11|))) |l#3@@11|)))) :qid |TSJidfy.164:13| :skolemid |2598| :pattern ( (MapType9Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@50 $f@@16)) )))
(assert (forall ((arg0@@473 T@U) (arg1@@248 T@U) (arg2@@184 T@U) (arg3@@146 Bool) ) (! (= (type (|lambda#13| arg0@@473 arg1@@248 arg2@@184 arg3@@146)) (MapType9Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@473 arg1@@248 arg2@@184 arg3@@146)) )))
(assert (forall (($o@@51 T@U) ($f@@17 T@U) (|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type $o@@51) refType) (= (type $f@@17) (FieldType alpha@@24))) (= (type |l#0@@12|) refType)) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@51 $f@@17))  (=> (and (not (= $o@@51 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@51) |l#2@@12|))) |l#3@@12|)))) :qid |TSJidfy.164:13| :skolemid |2599| :pattern ( (MapType9Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@51 $f@@17)) )))
(assert (forall ((arg0@@474 T@U) (arg1@@249 T@U) (arg2@@185 T@U) (arg3@@147 Bool) ) (! (= (type (|lambda#14| arg0@@474 arg1@@249 arg2@@185 arg3@@147)) (MapType9Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@474 arg1@@249 arg2@@185 arg3@@147)) )))
(assert (forall (($o@@52 T@U) ($f@@18 T@U) (|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type $o@@52) refType) (= (type $f@@18) (FieldType alpha@@25))) (= (type |l#0@@13|) refType)) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@52 $f@@18))  (=> (and (not (= $o@@52 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@52) |l#2@@13|))) |l#3@@13|)))) :qid |TSJidfy.188:13| :skolemid |2600| :pattern ( (MapType9Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@52 $f@@18)) )))
(assert (forall ((arg0@@475 T@U) (arg1@@250 T@U) (arg2@@186 T@U) (arg3@@148 Bool) ) (! (= (type (|lambda#15| arg0@@475 arg1@@250 arg2@@186 arg3@@148)) (MapType9Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@475 arg1@@250 arg2@@186 arg3@@148)) )))
(assert (forall (($o@@53 T@U) ($f@@19 T@U) (|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type $o@@53) refType) (= (type $f@@19) (FieldType alpha@@26))) (= (type |l#0@@14|) refType)) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@53 $f@@19))  (=> (and (not (= $o@@53 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@53) |l#2@@14|))) |l#3@@14|)))) :qid |TSJidfy.188:13| :skolemid |2601| :pattern ( (MapType9Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@53 $f@@19)) )))
(assert (forall ((arg0@@476 T@U) (arg1@@251 T@U) (arg2@@187 T@U) (arg3@@149 Bool) ) (! (= (type (|lambda#16| arg0@@476 arg1@@251 arg2@@187 arg3@@149)) (MapType9Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@476 arg1@@251 arg2@@187 arg3@@149)) )))
(assert (forall (($o@@54 T@U) ($f@@20 T@U) (|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type $o@@54) refType) (= (type $f@@20) (FieldType alpha@@27))) (= (type |l#0@@15|) refType)) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@54 $f@@20))  (=> (and (not (= $o@@54 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@54) |l#2@@15|))) |l#3@@15|)))) :qid |TSJidfy.202:13| :skolemid |2602| :pattern ( (MapType9Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@54 $f@@20)) )))
(assert (forall ((arg0@@477 T@U) (arg1@@252 T@U) (arg2@@188 T@U) (arg3@@150 Bool) ) (! (= (type (|lambda#17| arg0@@477 arg1@@252 arg2@@188 arg3@@150)) (MapType9Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@477 arg1@@252 arg2@@188 arg3@@150)) )))
(assert (forall (($o@@55 T@U) ($f@@21 T@U) (|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type $o@@55) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@16|) refType)) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@55 $f@@21))  (=> (and (not (= $o@@55 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@55) |l#2@@16|))) |l#3@@16|)))) :qid |TSJidfy.202:13| :skolemid |2603| :pattern ( (MapType9Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@55 $f@@21)) )))
(assert (forall ((arg0@@478 T@U) (arg1@@253 T@U) (arg2@@189 T@U) (arg3@@151 Bool) ) (! (= (type (|lambda#18| arg0@@478 arg1@@253 arg2@@189 arg3@@151)) (MapType9Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@478 arg1@@253 arg2@@189 arg3@@151)) )))
(assert (forall (($o@@56 T@U) ($f@@22 T@U) (|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type $o@@56) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@17|) refType)) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@56 $f@@22))  (=> (and (not (= $o@@56 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@56) |l#2@@17|))) |l#3@@17|)))) :qid |TSJidfy.218:13| :skolemid |2604| :pattern ( (MapType9Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@56 $f@@22)) )))
(assert (forall ((arg0@@479 T@U) (arg1@@254 T@U) (arg2@@190 T@U) (arg3@@152 Bool) ) (! (= (type (|lambda#19| arg0@@479 arg1@@254 arg2@@190 arg3@@152)) (MapType9Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@479 arg1@@254 arg2@@190 arg3@@152)) )))
(assert (forall (($o@@57 T@U) ($f@@23 T@U) (|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@57) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@18|) refType)) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@57 $f@@23))  (=> (and (not (= $o@@57 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@57) |l#2@@18|))) |l#3@@18|)))) :qid |TSJidfy.218:13| :skolemid |2605| :pattern ( (MapType9Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@57 $f@@23)) )))
(assert (forall ((arg0@@480 T@U) (arg1@@255 T@U) (arg2@@191 T@U) (arg3@@153 Bool) ) (! (= (type (|lambda#20| arg0@@480 arg1@@255 arg2@@191 arg3@@153)) (MapType9Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@480 arg1@@255 arg2@@191 arg3@@153)) )))
(assert (forall (($o@@58 T@U) ($f@@24 T@U) (|l#0@@19| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@58) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@19|) refType)) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@58 $f@@24))  (=> (and (not (= $o@@58 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@58) |l#2@@19|))) |l#3@@19|)))) :qid |TSJidfy.224:13| :skolemid |2606| :pattern ( (MapType9Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@58 $f@@24)) )))
(assert (forall ((arg0@@481 T@U) (arg1@@256 T@U) (arg2@@192 T@U) (arg3@@154 Bool) ) (! (= (type (|lambda#21| arg0@@481 arg1@@256 arg2@@192 arg3@@154)) (MapType9Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@481 arg1@@256 arg2@@192 arg3@@154)) )))
(assert (forall (($o@@59 T@U) ($f@@25 T@U) (|l#0@@20| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@20| Bool) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type $o@@59) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@20|) refType)) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@59 $f@@25))  (=> (and (not (= $o@@59 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@59) |l#2@@20|))) |l#3@@20|)))) :qid |TSJidfy.224:13| :skolemid |2607| :pattern ( (MapType9Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@59 $f@@25)) )))
(assert (forall ((arg0@@482 T@U) (arg1@@257 T@U) (arg2@@193 T@U) (arg3@@155 Bool) ) (! (= (type (|lambda#22| arg0@@482 arg1@@257 arg2@@193 arg3@@155)) (MapType9Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@482 arg1@@257 arg2@@193 arg3@@155)) )))
(assert (forall (($o@@60 T@U) ($f@@26 T@U) (|l#0@@21| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@21| Bool) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type $o@@60) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@21|) refType)) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@60 $f@@26))  (=> (and (not (= $o@@60 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@60) |l#2@@21|))) |l#3@@21|)))) :qid |TSJidfy.238:13| :skolemid |2608| :pattern ( (MapType9Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@60 $f@@26)) )))
(assert (forall ((arg0@@483 T@U) (arg1@@258 T@U) (arg2@@194 T@U) (arg3@@156 Bool) ) (! (= (type (|lambda#23| arg0@@483 arg1@@258 arg2@@194 arg3@@156)) (MapType9Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@483 arg1@@258 arg2@@194 arg3@@156)) )))
(assert (forall (($o@@61 T@U) ($f@@27 T@U) (|l#0@@22| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@61) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@22|) refType)) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@61 $f@@27))  (=> (and (not (= $o@@61 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@61) |l#2@@22|))) |l#3@@22|)))) :qid |TSJidfy.238:13| :skolemid |2609| :pattern ( (MapType9Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@61 $f@@27)) )))
(assert (forall ((arg0@@484 T@U) (arg1@@259 T@U) (arg2@@195 T@U) (arg3@@157 Bool) ) (! (= (type (|lambda#24| arg0@@484 arg1@@259 arg2@@195 arg3@@157)) (MapType9Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@484 arg1@@259 arg2@@195 arg3@@157)) )))
(assert (forall (($o@@62 T@U) ($f@@28 T@U) (|l#0@@23| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@62) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@23|) refType)) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@62 $f@@28))  (=> (and (not (= $o@@62 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@62) |l#2@@23|))) |l#3@@23|)))) :qid |TSJidfy.249:13| :skolemid |2610| :pattern ( (MapType9Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@62 $f@@28)) )))
(assert (forall ((arg0@@485 T@U) (arg1@@260 T@U) (arg2@@196 T@U) (arg3@@158 Bool) ) (! (= (type (|lambda#25| arg0@@485 arg1@@260 arg2@@196 arg3@@158)) (MapType9Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@485 arg1@@260 arg2@@196 arg3@@158)) )))
(assert (forall (($o@@63 T@U) ($f@@29 T@U) (|l#0@@24| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@24| Bool) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type $o@@63) refType) (= (type $f@@29) (FieldType alpha@@36))) (= (type |l#0@@24|) refType)) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@63 $f@@29))  (=> (and (not (= $o@@63 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@63) |l#2@@24|))) |l#3@@24|)))) :qid |TSJidfy.249:13| :skolemid |2611| :pattern ( (MapType9Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@63 $f@@29)) )))
(assert (forall ((arg0@@486 T@U) (arg1@@261 T@U) (arg2@@197 T@U) (arg3@@159 Bool) ) (! (= (type (|lambda#26| arg0@@486 arg1@@261 arg2@@197 arg3@@159)) (MapType9Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@486 arg1@@261 arg2@@197 arg3@@159)) )))
(assert (forall (($o@@64 T@U) ($f@@30 T@U) (|l#0@@25| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@25| Bool) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type $o@@64) refType) (= (type $f@@30) (FieldType alpha@@37))) (= (type |l#0@@25|) refType)) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@64 $f@@30))  (=> (and (not (= $o@@64 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@64) |l#2@@25|))) |l#3@@25|)))) :qid |TSJidfy.259:22| :skolemid |2612| :pattern ( (MapType9Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@64 $f@@30)) )))
(assert (forall ((arg0@@487 T@U) (arg1@@262 T@U) (arg2@@198 T@U) (arg3@@160 Bool) ) (! (= (type (|lambda#27| arg0@@487 arg1@@262 arg2@@198 arg3@@160)) (MapType9Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@487 arg1@@262 arg2@@198 arg3@@160)) )))
(assert (forall (($o@@65 T@U) ($f@@31 T@U) (|l#0@@26| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type $o@@65) refType) (= (type $f@@31) (FieldType alpha@@38))) (= (type |l#0@@26|) refType)) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@65 $f@@31))  (=> (and (not (= $o@@65 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@65) |l#2@@26|))) |l#3@@26|)))) :qid |TSJidfy.259:22| :skolemid |2613| :pattern ( (MapType9Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@65 $f@@31)) )))
(assert (forall ((arg0@@488 T@U) (arg1@@263 T@U) (arg2@@199 T@U) (arg3@@161 Bool) ) (! (= (type (|lambda#28| arg0@@488 arg1@@263 arg2@@199 arg3@@161)) (MapType9Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@488 arg1@@263 arg2@@199 arg3@@161)) )))
(assert (forall (($o@@66 T@U) ($f@@32 T@U) (|l#0@@27| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type $o@@66) refType) (= (type $f@@32) (FieldType alpha@@39))) (= (type |l#0@@27|) refType)) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@66 $f@@32))  (=> (and (not (= $o@@66 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@66) |l#2@@27|))) |l#3@@27|)))) :qid |TSJidfy.266:9| :skolemid |2614| :pattern ( (MapType9Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@66 $f@@32)) )))
(assert (forall ((arg0@@489 T@U) (arg1@@264 T@U) (arg2@@200 T@U) (arg3@@162 Bool) ) (! (= (type (|lambda#29| arg0@@489 arg1@@264 arg2@@200 arg3@@162)) (MapType9Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@489 arg1@@264 arg2@@200 arg3@@162)) )))
(assert (forall (($o@@67 T@U) ($f@@33 T@U) (|l#0@@28| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type $o@@67) refType) (= (type $f@@33) (FieldType alpha@@40))) (= (type |l#0@@28|) refType)) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@67 $f@@33))  (=> (and (not (= $o@@67 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@67) |l#2@@28|))) |l#3@@28|)))) :qid |TSJidfy.266:9| :skolemid |2615| :pattern ( (MapType9Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@67 $f@@33)) )))
(assert (forall ((arg0@@490 T@U) (arg1@@265 T@U) (arg2@@201 T@U) (arg3@@163 Bool) ) (! (= (type (|lambda#30| arg0@@490 arg1@@265 arg2@@201 arg3@@163)) (MapType9Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@490 arg1@@265 arg2@@201 arg3@@163)) )))
(assert (forall (($o@@68 T@U) ($f@@34 T@U) (|l#0@@29| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type $o@@68) refType) (= (type $f@@34) (FieldType alpha@@41))) (= (type |l#0@@29|) refType)) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@68 $f@@34))  (=> (and (not (= $o@@68 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@68) |l#2@@29|))) |l#3@@29|)))) :qid |TSJidfy.275:13| :skolemid |2616| :pattern ( (MapType9Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@68 $f@@34)) )))
(assert (forall ((arg0@@491 T@U) (arg1@@266 T@U) (arg2@@202 T@U) (arg3@@164 Bool) ) (! (= (type (|lambda#31| arg0@@491 arg1@@266 arg2@@202 arg3@@164)) (MapType9Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@491 arg1@@266 arg2@@202 arg3@@164)) )))
(assert (forall (($o@@69 T@U) ($f@@35 T@U) (|l#0@@30| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type $o@@69) refType) (= (type $f@@35) (FieldType alpha@@42))) (= (type |l#0@@30|) refType)) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@69 $f@@35))  (=> (and (not (= $o@@69 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@69) |l#2@@30|))) |l#3@@30|)))) :qid |TSJidfy.275:13| :skolemid |2617| :pattern ( (MapType9Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@69 $f@@35)) )))
(assert (forall ((arg0@@492 T@U) (arg1@@267 T@U) (arg2@@203 T@U) (arg3@@165 Bool) ) (! (= (type (|lambda#32| arg0@@492 arg1@@267 arg2@@203 arg3@@165)) (MapType9Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@492 arg1@@267 arg2@@203 arg3@@165)) )))
(assert (forall (($o@@70 T@U) ($f@@36 T@U) (|l#0@@31| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type $o@@70) refType) (= (type $f@@36) (FieldType alpha@@43))) (= (type |l#0@@31|) refType)) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@70 $f@@36))  (=> (and (not (= $o@@70 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@70) |l#2@@31|))) |l#3@@31|)))) :qid |TSJidfy.285:13| :skolemid |2618| :pattern ( (MapType9Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@70 $f@@36)) )))
(assert (forall ((arg0@@493 T@U) (arg1@@268 T@U) (arg2@@204 T@U) (arg3@@166 Bool) ) (! (= (type (|lambda#33| arg0@@493 arg1@@268 arg2@@204 arg3@@166)) (MapType9Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@493 arg1@@268 arg2@@204 arg3@@166)) )))
(assert (forall (($o@@71 T@U) ($f@@37 T@U) (|l#0@@32| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type $o@@71) refType) (= (type $f@@37) (FieldType alpha@@44))) (= (type |l#0@@32|) refType)) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@71 $f@@37))  (=> (and (not (= $o@@71 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@71) |l#2@@32|))) |l#3@@32|)))) :qid |TSJidfy.285:13| :skolemid |2619| :pattern ( (MapType9Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@71 $f@@37)) )))
(assert (forall ((arg0@@494 T@U) (arg1@@269 T@U) (arg2@@205 T@U) (arg3@@167 Bool) ) (! (= (type (|lambda#34| arg0@@494 arg1@@269 arg2@@205 arg3@@167)) (MapType9Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@494 arg1@@269 arg2@@205 arg3@@167)) )))
(assert (forall (($o@@72 T@U) ($f@@38 T@U) (|l#0@@33| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type $o@@72) refType) (= (type $f@@38) (FieldType alpha@@45))) (= (type |l#0@@33|) refType)) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@72 $f@@38))  (=> (and (not (= $o@@72 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@72) |l#2@@33|))) |l#3@@33|)))) :qid |TSJidfy.294:9| :skolemid |2620| :pattern ( (MapType9Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@72 $f@@38)) )))
(assert (forall ((arg0@@495 T@U) (arg1@@270 T@U) (arg2@@206 T@U) (arg3@@168 Bool) ) (! (= (type (|lambda#35| arg0@@495 arg1@@270 arg2@@206 arg3@@168)) (MapType9Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@495 arg1@@270 arg2@@206 arg3@@168)) )))
(assert (forall (($o@@73 T@U) ($f@@39 T@U) (|l#0@@34| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type $o@@73) refType) (= (type $f@@39) (FieldType alpha@@46))) (= (type |l#0@@34|) refType)) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@73 $f@@39))  (=> (and (not (= $o@@73 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@73) |l#2@@34|))) |l#3@@34|)))) :qid |TSJidfy.303:9| :skolemid |2621| :pattern ( (MapType9Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@73 $f@@39)) )))
(assert (forall ((arg0@@496 T@U) (arg1@@271 T@U) (arg2@@207 T@U) (arg3@@169 Bool) ) (! (= (type (|lambda#36| arg0@@496 arg1@@271 arg2@@207 arg3@@169)) (MapType9Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@496 arg1@@271 arg2@@207 arg3@@169)) )))
(assert (forall (($o@@74 T@U) ($f@@40 T@U) (|l#0@@35| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type $o@@74) refType) (= (type $f@@40) (FieldType alpha@@47))) (= (type |l#0@@35|) refType)) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@74 $f@@40))  (=> (and (not (= $o@@74 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@74) |l#2@@35|))) |l#3@@35|)))) :qid |TSJidfy.340:9| :skolemid |2622| :pattern ( (MapType9Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@74 $f@@40)) )))
(assert (forall ((arg0@@497 T@U) (arg1@@272 T@U) (arg2@@208 T@U) (arg3@@170 Bool) ) (! (= (type (|lambda#37| arg0@@497 arg1@@272 arg2@@208 arg3@@170)) (MapType9Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@497 arg1@@272 arg2@@208 arg3@@170)) )))
(assert (forall (($o@@75 T@U) ($f@@41 T@U) (|l#0@@36| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@36| Bool) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type $o@@75) refType) (= (type $f@@41) (FieldType alpha@@48))) (= (type |l#0@@36|) refType)) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@75 $f@@41))  (=> (and (not (= $o@@75 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@75) |l#2@@36|))) |l#3@@36|)))) :qid |TSJidfy.352:9| :skolemid |2623| :pattern ( (MapType9Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@75 $f@@41)) )))
(assert (forall ((arg0@@498 T@U) (arg1@@273 T@U) (arg2@@209 T@U) (arg3@@171 Bool) ) (! (= (type (|lambda#38| arg0@@498 arg1@@273 arg2@@209 arg3@@171)) (MapType9Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@498 arg1@@273 arg2@@209 arg3@@171)) )))
(assert (forall (($o@@76 T@U) ($f@@42 T@U) (|l#0@@37| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type $o@@76) refType) (= (type $f@@42) (FieldType alpha@@49))) (= (type |l#0@@37|) refType)) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@76 $f@@42))  (=> (and (not (= $o@@76 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@76) |l#2@@37|))) |l#3@@37|)))) :qid |TSJidfy.360:9| :skolemid |2624| :pattern ( (MapType9Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@76 $f@@42)) )))
(assert (forall ((arg0@@499 T@U) (arg1@@274 T@U) (arg2@@210 T@U) (arg3@@172 Bool) ) (! (= (type (|lambda#39| arg0@@499 arg1@@274 arg2@@210 arg3@@172)) (MapType9Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@499 arg1@@274 arg2@@210 arg3@@172)) )))
(assert (forall (($o@@77 T@U) ($f@@43 T@U) (|l#0@@38| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@38| Bool) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type $o@@77) refType) (= (type $f@@43) (FieldType alpha@@50))) (= (type |l#0@@38|) refType)) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#39| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@77 $f@@43))  (=> (and (not (= $o@@77 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@77) |l#2@@38|))) |l#3@@38|)))) :qid |TSJidfy.368:9| :skolemid |2625| :pattern ( (MapType9Select (|lambda#39| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@77 $f@@43)) )))
(assert (forall ((arg0@@500 T@U) (arg1@@275 T@U) (arg2@@211 T@U) (arg3@@173 Bool) ) (! (= (type (|lambda#40| arg0@@500 arg1@@275 arg2@@211 arg3@@173)) (MapType9Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@500 arg1@@275 arg2@@211 arg3@@173)) )))
(assert (forall (($o@@78 T@U) ($f@@44 T@U) (|l#0@@39| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@39| Bool) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type $o@@78) refType) (= (type $f@@44) (FieldType alpha@@51))) (= (type |l#0@@39|) refType)) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#40| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@78 $f@@44))  (=> (and (not (= $o@@78 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@78) |l#2@@39|))) |l#3@@39|)))) :qid |TSJidfy.376:9| :skolemid |2626| :pattern ( (MapType9Select (|lambda#40| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@78 $f@@44)) )))
(assert (forall ((arg0@@501 T@U) (arg1@@276 T@U) (arg2@@212 T@U) (arg3@@174 Bool) ) (! (= (type (|lambda#41| arg0@@501 arg1@@276 arg2@@212 arg3@@174)) (MapType9Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@501 arg1@@276 arg2@@212 arg3@@174)) )))
(assert (forall (($o@@79 T@U) ($f@@45 T@U) (|l#0@@40| T@U) (|l#1@@40| T@U) (|l#2@@40| T@U) (|l#3@@40| Bool) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type $o@@79) refType) (= (type $f@@45) (FieldType alpha@@52))) (= (type |l#0@@40|) refType)) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#41| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@79 $f@@45))  (=> (and (not (= $o@@79 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@79) |l#2@@40|))) |l#3@@40|)))) :qid |TSJidfy.396:9| :skolemid |2627| :pattern ( (MapType9Select (|lambda#41| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@79 $f@@45)) )))
(assert (forall ((arg0@@502 T@U) (arg1@@277 T@U) (arg2@@213 T@U) (arg3@@175 Bool) ) (! (= (type (|lambda#42| arg0@@502 arg1@@277 arg2@@213 arg3@@175)) (MapType9Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@502 arg1@@277 arg2@@213 arg3@@175)) )))
(assert (forall (($o@@80 T@U) ($f@@46 T@U) (|l#0@@41| T@U) (|l#1@@41| T@U) (|l#2@@41| T@U) (|l#3@@41| Bool) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type $o@@80) refType) (= (type $f@@46) (FieldType alpha@@53))) (= (type |l#0@@41|) refType)) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#42| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@80 $f@@46))  (=> (and (not (= $o@@80 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@80) |l#2@@41|))) |l#3@@41|)))) :qid |TSJidfy.403:9| :skolemid |2628| :pattern ( (MapType9Select (|lambda#42| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@80 $f@@46)) )))
(assert (forall ((arg0@@503 T@U) (arg1@@278 T@U) (arg2@@214 T@U) (arg3@@176 Bool) ) (! (= (type (|lambda#43| arg0@@503 arg1@@278 arg2@@214 arg3@@176)) (MapType9Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@503 arg1@@278 arg2@@214 arg3@@176)) )))
(assert (forall (($o@@81 T@U) ($f@@47 T@U) (|l#0@@42| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@42| Bool) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type $o@@81) refType) (= (type $f@@47) (FieldType alpha@@54))) (= (type |l#0@@42|) refType)) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#43| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@81 $f@@47))  (=> (and (not (= $o@@81 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@81) |l#2@@42|))) |l#3@@42|)))) :qid |TSJidfy.410:9| :skolemid |2629| :pattern ( (MapType9Select (|lambda#43| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@81 $f@@47)) )))
(assert (forall ((arg0@@504 T@U) (arg1@@279 T@U) (arg2@@215 T@U) (arg3@@177 Bool) ) (! (= (type (|lambda#44| arg0@@504 arg1@@279 arg2@@215 arg3@@177)) (MapType9Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@504 arg1@@279 arg2@@215 arg3@@177)) )))
(assert (forall (($o@@82 T@U) ($f@@48 T@U) (|l#0@@43| T@U) (|l#1@@43| T@U) (|l#2@@43| T@U) (|l#3@@43| Bool) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type $o@@82) refType) (= (type $f@@48) (FieldType alpha@@55))) (= (type |l#0@@43|) refType)) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#44| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@82 $f@@48))  (=> (and (not (= $o@@82 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@82) |l#2@@43|))) |l#3@@43|)))) :qid |TSJidfy.425:9| :skolemid |2630| :pattern ( (MapType9Select (|lambda#44| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@82 $f@@48)) )))
(assert (forall ((arg0@@505 T@U) (arg1@@280 T@U) (arg2@@216 T@U) (arg3@@178 Bool) ) (! (= (type (|lambda#45| arg0@@505 arg1@@280 arg2@@216 arg3@@178)) (MapType9Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@505 arg1@@280 arg2@@216 arg3@@178)) )))
(assert (forall (($o@@83 T@U) ($f@@49 T@U) (|l#0@@44| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@44| Bool) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type $o@@83) refType) (= (type $f@@49) (FieldType alpha@@56))) (= (type |l#0@@44|) refType)) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#45| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@83 $f@@49))  (=> (and (not (= $o@@83 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@83) |l#2@@44|))) |l#3@@44|)))) :qid |TSJidfy.436:9| :skolemid |2631| :pattern ( (MapType9Select (|lambda#45| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@83 $f@@49)) )))
(assert (forall ((arg0@@506 T@U) (arg1@@281 T@U) (arg2@@217 T@U) (arg3@@179 Bool) ) (! (= (type (|lambda#46| arg0@@506 arg1@@281 arg2@@217 arg3@@179)) (MapType9Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@506 arg1@@281 arg2@@217 arg3@@179)) )))
(assert (forall (($o@@84 T@U) ($f@@50 T@U) (|l#0@@45| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) (|l#3@@45| Bool) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type $o@@84) refType) (= (type $f@@50) (FieldType alpha@@57))) (= (type |l#0@@45|) refType)) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#46| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@84 $f@@50))  (=> (and (not (= $o@@84 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@84) |l#2@@45|))) |l#3@@45|)))) :qid |TSJidfy.443:9| :skolemid |2632| :pattern ( (MapType9Select (|lambda#46| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@84 $f@@50)) )))
(assert (forall ((arg0@@507 T@U) (arg1@@282 T@U) (arg2@@218 T@U) (arg3@@180 Bool) ) (! (= (type (|lambda#47| arg0@@507 arg1@@282 arg2@@218 arg3@@180)) (MapType9Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@507 arg1@@282 arg2@@218 arg3@@180)) )))
(assert (forall (($o@@85 T@U) ($f@@51 T@U) (|l#0@@46| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) (|l#3@@46| Bool) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type $o@@85) refType) (= (type $f@@51) (FieldType alpha@@58))) (= (type |l#0@@46|) refType)) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#47| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@85 $f@@51))  (=> (and (not (= $o@@85 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@85) |l#2@@46|))) |l#3@@46|)))) :qid |TSJidfy.450:9| :skolemid |2633| :pattern ( (MapType9Select (|lambda#47| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@85 $f@@51)) )))
(assert (forall ((arg0@@508 T@U) (arg1@@283 T@U) (arg2@@219 T@U) (arg3@@181 Bool) ) (! (= (type (|lambda#48| arg0@@508 arg1@@283 arg2@@219 arg3@@181)) (MapType9Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@508 arg1@@283 arg2@@219 arg3@@181)) )))
(assert (forall (($o@@86 T@U) ($f@@52 T@U) (|l#0@@47| T@U) (|l#1@@47| T@U) (|l#2@@47| T@U) (|l#3@@47| Bool) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type $o@@86) refType) (= (type $f@@52) (FieldType alpha@@59))) (= (type |l#0@@47|) refType)) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (U_2_bool (MapType9Select (|lambda#48| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@86 $f@@52))  (=> (and (not (= $o@@86 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@86) |l#2@@47|))) |l#3@@47|)))) :qid |TSJidfy.469:9| :skolemid |2634| :pattern ( (MapType9Select (|lambda#48| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@86 $f@@52)) )))
(assert (forall ((|$w#1| T@U) (|l#0@@48| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) ) (!  (=> (and (and (and (= (type |$w#1|) BoxType) (= (type |l#0@@48|) TyType)) (= (type |l#1@@48|) (MapType0Type BoxType boolType))) (= (type |l#2@@48|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#49| |l#0@@48| |l#1@@48| |l#2@@48|) |$w#1|))  (and ($IsBox |$w#1| |l#0@@48|) (and (U_2_bool (MapType0Select |l#1@@48| |$w#1|)) (not (U_2_bool (MapType0Select |l#2@@48| |$w#1|))))))) :qid |Mapssdfy.43:14| :skolemid |2635| :pattern ( (MapType0Select (|lambda#49| |l#0@@48| |l#1@@48| |l#2@@48|) |$w#1|)) )))
(assert (forall ((|$w#1@@0| T@U) (|l#0@@49| T@U) ) (!  (=> (and (= (type |$w#1@@0|) BoxType) (= (type |l#0@@49|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#50| |l#0@@49|) |$w#1@@0|) (MapType0Select |l#0@@49| |$w#1@@0|))) :qid |Mapssdfy.43:14| :skolemid |2636| :pattern ( (MapType0Select (|lambda#50| |l#0@@49|) |$w#1@@0|)) )))
(assert (forall ((|$w#1@@1| T@U) (|l#0@@50| T@U) (|l#1@@49| T@U) (|l#2@@49| T@U) ) (!  (=> (and (and (and (= (type |$w#1@@1|) BoxType) (= (type |l#0@@50|) TyType)) (= (type |l#1@@49|) (MapType0Type BoxType boolType))) (= (type |l#2@@49|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#53| |l#0@@50| |l#1@@49| |l#2@@49|) |$w#1@@1|))  (and ($IsBox |$w#1@@1| |l#0@@50|) (and (U_2_bool (MapType0Select |l#1@@49| |$w#1@@1|)) (not (= |$w#1@@1| |l#2@@49|)))))) :qid |Mapssdfy.66:15| :skolemid |2637| :pattern ( (MapType0Select (|lambda#53| |l#0@@50| |l#1@@49| |l#2@@49|) |$w#1@@1|)) )))
(assert (forall ((|$w#0| T@U) (|l#0@@51| T@U) (|l#1@@50| T@U) (|l#2@@50| T@U) ) (!  (=> (and (and (and (= (type |$w#0|) BoxType) (= (type |l#0@@51|) TyType)) (= (type |l#1@@50|) (MapType0Type BoxType boolType))) (= (type |l#2@@50|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#67| |l#0@@51| |l#1@@50| |l#2@@50|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@51|) (and (U_2_bool (MapType0Select |l#1@@50| |$w#0|)) (U_2_bool (MapType0Select |l#2@@50| |$w#0|)))))) :qid |Mapssdfy.99:5| :skolemid |2638| :pattern ( (MapType0Select (|lambda#67| |l#0@@51| |l#1@@50| |l#2@@50|) |$w#0|)) )))
(assert (forall ((|$w#0@@0| T@U) (|l#0@@52| T@U) (|l#1@@51| T@U) (|l#2@@51| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@0|) BoxType) (= (type |l#0@@52|) TyType)) (= (type |l#1@@51|) (MapType0Type BoxType boolType))) (= (type |l#2@@51|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#81| |l#0@@52| |l#1@@51| |l#2@@51|) |$w#0@@0|))  (and ($IsBox |$w#0@@0| |l#0@@52|) (or (U_2_bool (MapType0Select |l#1@@51| |$w#0@@0|)) (U_2_bool (MapType0Select |l#2@@51| |$w#0@@0|)))))) :qid |Mapssdfy.117:3| :skolemid |2639| :pattern ( (MapType0Select (|lambda#81| |l#0@@52| |l#1@@51| |l#2@@51|) |$w#0@@0|)) )))
(assert (forall ((|$w#0@@1| T@U) (|l#0@@53| T@U) (|l#1@@52| T@U) (|l#2@@52| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@1|) BoxType) (= (type |l#0@@53|) (MapType0Type BoxType boolType))) (= (type |l#1@@52|) (MapType0Type BoxType BoxType))) (= (type |l#2@@52|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#82| |l#0@@53| |l#1@@52| |l#2@@52|) |$w#0@@1|) (ite (U_2_bool (MapType0Select |l#0@@53| |$w#0@@1|)) (MapType0Select |l#1@@52| |$w#0@@1|) (MapType0Select |l#2@@52| |$w#0@@1|)))) :qid |Mapssdfy.117:3| :skolemid |2640| :pattern ( (MapType0Select (|lambda#82| |l#0@@53| |l#1@@52| |l#2@@52|) |$w#0@@1|)) )))
(assert (forall ((|$w#0@@2| T@U) (|l#0@@54| T@U) (|l#1@@53| T@U) (|l#2@@53| T@U) (|l#3@@48| T@U) ) (!  (=> (and (and (and (and (= (type |$w#0@@2|) BoxType) (= (type |l#0@@54|) TyType)) (= (type |l#1@@53|) (MapType0Type BoxType boolType))) (= (type |l#2@@53|) (MapType0Type BoxType boolType))) (= (type |l#3@@48|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#101| |l#0@@54| |l#1@@53| |l#2@@53| |l#3@@48|) |$w#0@@2|))  (and ($IsBox |$w#0@@2| |l#0@@54|) (or (or (U_2_bool (MapType0Select |l#1@@53| |$w#0@@2|)) (U_2_bool (MapType0Select |l#2@@53| |$w#0@@2|))) (U_2_bool (MapType0Select |l#3@@48| |$w#0@@2|)))))) :qid |Mapssdfy.191:3| :skolemid |2641| :pattern ( (MapType0Select (|lambda#101| |l#0@@54| |l#1@@53| |l#2@@53| |l#3@@48|) |$w#0@@2|)) )))
(assert (forall ((|$w#0@@3| T@U) (|l#0@@55| T@U) (|l#1@@54| T@U) (|l#2@@54| T@U) (|l#3@@49| T@U) (|l#4| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#0@@3|) BoxType) (= (type |l#0@@55|) (MapType0Type BoxType boolType))) (= (type |l#1@@54|) (MapType0Type BoxType BoxType))) (= (type |l#2@@54|) (MapType0Type BoxType boolType))) (= (type |l#3@@49|) (MapType0Type BoxType BoxType))) (= (type |l#4|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#102| |l#0@@55| |l#1@@54| |l#2@@54| |l#3@@49| |l#4|) |$w#0@@3|) (ite (U_2_bool (MapType0Select |l#0@@55| |$w#0@@3|)) (MapType0Select |l#1@@54| |$w#0@@3|) (ite (U_2_bool (MapType0Select |l#2@@54| |$w#0@@3|)) (MapType0Select |l#3@@49| |$w#0@@3|) (MapType0Select |l#4| |$w#0@@3|))))) :qid |Mapssdfy.191:3| :skolemid |2642| :pattern ( (MapType0Select (|lambda#102| |l#0@@55| |l#1@@54| |l#2@@54| |l#3@@49| |l#4|) |$w#0@@3|)) )))
(assert (forall ((|$w#0@@4| T@U) (|l#0@@56| T@U) (|l#1@@55| T@U) ) (!  (=> (and (and (= (type |$w#0@@4|) BoxType) (= (type |l#0@@56|) TyType)) (= (type |l#1@@55|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#105| |l#0@@56| |l#1@@55|) |$w#0@@4|))  (and ($IsBox |$w#0@@4| |l#0@@56|) (U_2_bool (MapType0Select |l#1@@55| |$w#0@@4|))))) :qid |Mapssdfy.198:4| :skolemid |2643| :pattern ( (MapType0Select (|lambda#105| |l#0@@56| |l#1@@55|) |$w#0@@4|)) )))
(assert (forall ((|$w#0@@5| T@U) (|l#0@@57| T@U) ) (!  (=> (and (= (type |$w#0@@5|) BoxType) (= (type |l#0@@57|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#109| |l#0@@57|) |$w#0@@5|)) (U_2_bool (MapType0Select |l#0@@57| |$w#0@@5|)))) :qid |ThreeSta.21:5| :skolemid |2644| :pattern ( (MapType0Select (|lambda#109| |l#0@@57|) |$w#0@@5|)) )))
(assert (forall ((|$w#0@@6| T@U) (|l#0@@58| T@U) (|l#1@@56| T@U) (|l#2@@55| T@U) (|l#3@@50| T@U) (|l#4@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#0@@6|) BoxType) (= (type |l#0@@58|) (MapType0Type BoxType BoxType))) (= (type |l#1@@56|) DatatypeTypeType)) (= (type |l#2@@55|) (MapType0Type BoxType BoxType))) (= (type |l#3@@50|) DatatypeTypeType)) (= (type |l#4@@0|) DatatypeTypeType)) (= (MapType0Select (|lambda#110| |l#0@@58| |l#1@@56| |l#2@@55| |l#3@@50| |l#4@@0|) |$w#0@@6|) ($Box (ite (ThreeStateTypes.SyncReqStatus.State1_q ($Unbox DatatypeTypeType (MapType0Select |l#0@@58| |$w#0@@6|))) |l#1@@56| (ite (ThreeStateTypes.SyncReqStatus.State2_q ($Unbox DatatypeTypeType (MapType0Select |l#2@@55| |$w#0@@6|))) |l#3@@50| |l#4@@0|))))) :qid |ThreeSta.21:5| :skolemid |2645| :pattern ( (MapType0Select (|lambda#110| |l#0@@58| |l#1@@56| |l#2@@55| |l#3@@50| |l#4@@0|) |$w#0@@6|)) )))
(assert (forall ((|$y#0| T@U) (|l#0@@59| T@U) (|l#1@@57| T@U) (|l#2@@56| Int) ) (!  (=> (and (and (= (type |$y#0|) BoxType) (= (type |l#0@@59|) TyType)) (= (type |l#1@@57|) (MapType0Type BoxType intType))) (= (U_2_bool (MapType0Select (|lambda#117| |l#0@@59| |l#1@@57| |l#2@@56|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@59|) (> (U_2_int (MapType0Select |l#1@@57| |$y#0|)) |l#2@@56|)))) :qid |sequence.28:5| :skolemid |2646| :pattern ( (MapType0Select (|lambda#117| |l#0@@59| |l#1@@57| |l#2@@56|) |$y#0|)) )))
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_TSJ._default.SeqSub () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@@36 () T@U)
(declare-fun |k#0@@123| () T@U)
(declare-fun |s'#0@@64| () T@U)
(declare-fun |s#0@@135| () T@U)
(declare-fun |uiop#0@@53| () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun %lbl%@2 () Bool)
(declare-fun %lbl%@3 () Bool)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%@5 () Bool)
(declare-fun %lbl%@6 () Bool)
(declare-fun %lbl%@7 () Bool)
(declare-fun %lbl%@8 () Bool)
(declare-fun %lbl%@9 () Bool)
(declare-fun %lbl%+10 () Bool)
(declare-fun |id#0@@8| () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_TSJ._default.SeqSub) LayerTypeType)) (= (type $_Frame@0) (MapType9Type refType boolType))) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |k#0@@123|) DatatypeTypeType)) (= (type |s'#0@@64|) DatatypeTypeType)) (= (type |s#0@@135|) DatatypeTypeType)) (= (type |uiop#0@@53|) DatatypeTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$TSJ.__default.PushSyncStepPreservesInv)
(assert (not (let ((anon0_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (=> (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove) (=> (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong)) (=> (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1) StartFuel_Maps._default.MapRemove1)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1) StartFuelAssert_Maps._default.MapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1)))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_TSJ._default.SeqSub) StartFuel_TSJ._default.SeqSub)) (and (= (AsFuelBottom StartFuelAssert_TSJ._default.SeqSub) StartFuelAssert_TSJ._default.SeqSub) (= $_Frame@0 (|lambda#45| null $Heap@@36 alloc false)))))))) (and (! (or %lbl%@1  (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|))))) :lblneg @1) (=> (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|)))) (and (! (or %lbl%@2  (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|))))) :lblneg @2) (=> (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|)))) (and (! (or %lbl%@3  (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s3 |s'#0@@64|))))) :lblneg @3) (=> (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s3 |s'#0@@64|)))) (and (! (or %lbl%@4  (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (=> (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (<= (|Seq#Length| (TSJ.Variables.j2 |s'#0@@64|)) (|Seq#Length| (TSJ.Variables.j__gamma |s'#0@@64|)))))))))) :lblneg @4) (=> (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (=> (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (<= (|Seq#Length| (TSJ.Variables.j2 |s'#0@@64|)) (|Seq#Length| (TSJ.Variables.j__gamma |s'#0@@64|))))))))) (and (! (or %lbl%@5  (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (=> (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (|Seq#Equal| (|Seq#Drop| (TSJ.Variables.j__gamma |s'#0@@64|) (- (|Seq#Length| (TSJ.Variables.j__gamma |s'#0@@64|)) (|Seq#Length| (TSJ.Variables.j2 |s'#0@@64|)))) (TSJ.Variables.j2 |s'#0@@64|))))))))) :lblneg @5) (=> (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (=> (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (|Seq#Equal| (|Seq#Drop| (TSJ.Variables.j__gamma |s'#0@@64|) (- (|Seq#Length| (TSJ.Variables.j__gamma |s'#0@@64|)) (|Seq#Length| (TSJ.Variables.j2 |s'#0@@64|)))) (TSJ.Variables.j2 |s'#0@@64|)))))))) (and (! (or %lbl%@6  (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (=> (|TSJ.__default.path#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (TSJ.Variables.s2 |s'#0@@64|)) (or (TSJ.__default.path (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (TSJ.Variables.s2 |s'#0@@64|)) (exists ((|states#6| T@U) (|uiops#6| T@U) ) (!  (and (and (= (type |states#6|) (SeqType BoxType)) (= (type |uiops#6|) (SeqType BoxType))) (and (and ($Is |states#6| (TSeq |#$Variables|)) ($Is |uiops#6| (TSeq Tclass.UI.Op))) (and (|Seq#Equal| (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#6|)) (TSJ.__default.IsPath (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) |uiops#6| (TSJ.Variables.s2 |s'#0@@64|) |states#6|)))) :qid |TSJidfy.244:12| :skolemid |1672| :pattern ( (TSJ.__default.IsPath (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) |uiops#6| (TSJ.Variables.s2 |s'#0@@64|) |states#6|)) ))))))))) :lblneg @6) (=> (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (=> (|TSJ.__default.path#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (TSJ.Variables.s2 |s'#0@@64|)) (or (TSJ.__default.path (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (TSJ.Variables.s2 |s'#0@@64|)) (exists ((|states#6@@0| T@U) (|uiops#6@@0| T@U) ) (!  (and (and (= (type |states#6@@0|) (SeqType BoxType)) (= (type |uiops#6@@0|) (SeqType BoxType))) (and (and ($Is |states#6@@0| (TSeq |#$Variables|)) ($Is |uiops#6@@0| (TSeq Tclass.UI.Op))) (and (|Seq#Equal| (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (TSJ.Variables.j__gamma |s'#0@@64|) (TSJ.Variables.j2 |s'#0@@64|)) (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#6@@0|)) (TSJ.__default.IsPath (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) |uiops#6@@0| (TSJ.Variables.s2 |s'#0@@64|) |states#6@@0|)))) :qid |TSJidfy.244:12| :skolemid |1672| :pattern ( (TSJ.__default.IsPath (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s'#0@@64|) |uiops#6@@0| (TSJ.Variables.s2 |s'#0@@64|) |states#6@@0|)) )))))))) (and (! (or %lbl%@7  (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (=> (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (or (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (<= (|Seq#Length| (TSJ.Variables.j3 |s'#0@@64|)) (|Seq#Length| (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|))))))))))) :lblneg @7) (=> (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (=> (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (or (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (<= (|Seq#Length| (TSJ.Variables.j3 |s'#0@@64|)) (|Seq#Length| (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)))))))))) (and (! (or %lbl%@8  (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (=> (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (or (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (|Seq#Equal| (|Seq#Drop| (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (- (|Seq#Length| (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|))) (|Seq#Length| (TSJ.Variables.j3 |s'#0@@64|)))) (TSJ.Variables.j3 |s'#0@@64|))))))))) :lblneg @8) (=> (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (=> (|TSJ.__default.IsSuffix#canCall| Tclass.Journal.JournalEntry (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (or (TSJ.__default.IsSuffix Tclass.Journal.JournalEntry (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (|Seq#Equal| (|Seq#Drop| (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (- (|Seq#Length| (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|))) (|Seq#Length| (TSJ.Variables.j3 |s'#0@@64|)))) (TSJ.Variables.j3 |s'#0@@64|)))))))) (! (or %lbl%@9  (=> (|TSJ.__default.Inv#canCall| |k#0@@123| |s'#0@@64|) (or (TSJ.__default.Inv |k#0@@123| |s'#0@@64|) (=> (|TSJ.__default.advances#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (or (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|) (TSJ.Variables.j3 |s'#0@@64|)) (=> (|TSJ.__default.path#canCall| (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|)) (or (TSJ.__default.path (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (TSJ.Variables.s3 |s'#0@@64|)) (exists ((|states#7| T@U) (|uiops#7| T@U) ) (!  (and (and (= (type |states#7|) (SeqType BoxType)) (= (type |uiops#7|) (SeqType BoxType))) (and (and ($Is |states#7| (TSeq |#$Variables|)) ($Is |uiops#7| (TSeq Tclass.UI.Op))) (and (|Seq#Equal| (TSJ.__default.SeqSub Tclass.Journal.JournalEntry StartFuel_TSJ._default.SeqSub (|Seq#Append| (TSJ.Variables.j2 |s'#0@@64|) (TSJ.Variables.j__delta |s'#0@@64|)) (TSJ.Variables.j3 |s'#0@@64|)) (Journal.__default.JournalEntriesForUIOps ($LS $LZ) |uiops#7|)) (TSJ.__default.IsPath (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) |uiops#7| (TSJ.Variables.s3 |s'#0@@64|) |states#7|)))) :qid |TSJidfy.244:12| :skolemid |1675| :pattern ( (TSJ.__default.IsPath (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s'#0@@64|) |uiops#7| (TSJ.Variables.s3 |s'#0@@64|) |states#7|)) ))))))))) :lblneg @9)))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+10 true) :lblpos +10) (=> (and ($IsGoodHeap $Heap@@36) ($IsHeapAnchor $Heap@@36)) (=> (and (and ($Is |k#0@@123| Tclass.TSJ.Constants) ($IsAlloc |k#0@@123| Tclass.TSJ.Constants $Heap@@36)) (|$IsA#TSJ.Constants| |k#0@@123|)) (=> (and (and (and ($Is |s#0@@135| Tclass.TSJ.Variables) ($IsAlloc |s#0@@135| Tclass.TSJ.Variables $Heap@@36)) (|$IsA#TSJ.Variables| |s#0@@135|)) (and (and ($Is |s'#0@@64| Tclass.TSJ.Variables) ($IsAlloc |s'#0@@64| Tclass.TSJ.Variables $Heap@@36)) (|$IsA#TSJ.Variables| |s'#0@@64|))) (=> (and (and (and (and ($Is |uiop#0@@53| Tclass.UI.Op) ($IsAlloc |uiop#0@@53| Tclass.UI.Op $Heap@@36)) (|$IsA#UI.Op| |uiop#0@@53|)) (= 39 $FunctionContextHeight)) (and (and (|TSJ.__default.Inv#canCall| |k#0@@123| |s#0@@135|) (and (TSJ.__default.Inv |k#0@@123| |s#0@@135|) (and (and (and (and (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s#0@@135|)) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s#0@@135|))) (TSJ.SM.Abs.__default.Inv (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s3 |s#0@@135|))) (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s1 |s#0@@135|) (TSJ.Variables.j__gamma |s#0@@135|) (TSJ.Variables.s2 |s#0@@135|) (TSJ.Variables.j2 |s#0@@135|))) (TSJ.__default.advances (TSJ.Constants.k |k#0@@123|) (TSJ.Variables.s2 |s#0@@135|) (|Seq#Append| (TSJ.Variables.j2 |s#0@@135|) (TSJ.Variables.j__delta |s#0@@135|)) (TSJ.Variables.s3 |s#0@@135|) (TSJ.Variables.j3 |s#0@@135|))))) (and (|TSJ.__default.PushSync#canCall| |k#0@@123| |s#0@@135| |s'#0@@64| |uiop#0@@53| |id#0@@8|) (and (TSJ.__default.PushSync |k#0@@123| |s#0@@135| |s'#0@@64| |uiop#0@@53| |id#0@@8|) (and (and (|UI.Op#Equal| |uiop#0@@53| (|#UI.Op.PushSyncOp| |id#0@@8|)) (not (U_2_bool (MapType0Select (|Map#Domain| (TSJ.Variables.outstandingSyncReqs |s#0@@135|)) ($Box (int_2_U |id#0@@8|)))))) (|TSJ.Variables#Equal| |s'#0@@64| (|#TSJ.Variables.Variables| (TSJ.Variables.s1 |s#0@@135|) (TSJ.Variables.s2 |s#0@@135|) (TSJ.Variables.s3 |s#0@@135|) (TSJ.Variables.j1 |s#0@@135|) (TSJ.Variables.j2 |s#0@@135|) (TSJ.Variables.j3 |s#0@@135|) (TSJ.Variables.j__gamma |s#0@@135|) (TSJ.Variables.j__delta |s#0@@135|) (|Map#Build| (TSJ.Variables.outstandingSyncReqs |s#0@@135|) ($Box (int_2_U |id#0@@8|)) ($Box (Lit |#ThreeStateTypes.SyncReqStatus.State3|)))))))))) anon0_correct))))))) PreconditionGeneratedEntry_correct)) ))
(check-sat)
