(set-option :auto-config false)
(set-option :produce-unsat-cores false)
(set-option :smt.mbqi.max_iterations 10000000)
(set-option :smt.relevancy 0)
(declare-fun c1 ((_ BitVec 64)) (_ BitVec 64))
(define-fun e2 ((c0 (_ BitVec 64))) (_ BitVec 64) (c1 c0))
(define-fun e3 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e4 ((c0 (_ BitVec 64))) Bool (bvult (e2 c0) (e3 c0)))
(define-fun e5 ((c0 (_ BitVec 64))) Bool (bvult c0 (e3 c0)))
(define-fun e6 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(declare-fun c7 ((_ BitVec 64)) (_ BitVec 64))
(define-fun e8 ((c0 (_ BitVec 64))) (_ BitVec 64) (c7 c0))
(define-fun e9 ((c0 (_ BitVec 64))) Bool (= (e6 c0) (e8 c0)))
(define-fun e10 ((c0 (_ BitVec 64))) Bool (not (e9 c0)))
(define-fun e11 ((c0 (_ BitVec 64))) Bool (and (e5 c0) (e10 c0)))
(define-fun e12 ((c0 (_ BitVec 64))) Bool (not (e11 c0)))
(define-fun e13 ((c0 (_ BitVec 64))) Bool (or (e4 c0) (e12 c0)))
(define-fun e14 () Bool (forall ((c0 (_ BitVec 64))) (e13 c0)))
(define-fun e15 ((c0 (_ BitVec 64))) Bool (= c0 (e2 c0)))
(define-fun e16 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv1 64))
(define-fun e17 ((c0 (_ BitVec 64))) Bool (= (e16 c0) (e8 c0)))
(define-fun e18 ((c0 (_ BitVec 64))) Bool (and (e5 c0) (e17 c0)))
(define-fun e19 ((c0 (_ BitVec 64))) Bool (not (e18 c0)))
(define-fun e20 ((c0 (_ BitVec 64))) Bool (or (e15 c0) (e19 c0)))
(define-fun e21 () Bool (forall ((c0 (_ BitVec 64))) (e20 c0)))
(declare-fun c22 () (_ BitVec 64))
(define-fun e23 () (_ BitVec 64) (_ bv1024 64))
(define-fun e24 () Bool (bvult c22 e23))
(define-fun e25 () (_ BitVec 64) (_ bv2 64))
(define-fun e26 () (_ BitVec 64) (c7 c22))
(define-fun e27 () Bool (= e25 e26))
(define-fun e28 () Bool (and e24 e27))
(declare-fun c29 () (_ BitVec 64))
(define-fun e30 () (_ BitVec 64) (c1 c22))
(define-fun e31 () Bool (= c29 e30))
(define-fun e32 () (_ BitVec 64) (_ bv1 64))
(declare-fun c33 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(define-fun e34 () (_ BitVec 64) (c33 c29 e25))
(define-fun e35 () Bool (= e32 e34))
(define-fun e36 () Bool (and e28 e31 e35))
(declare-fun c37 () Bool)
(define-fun e38 () Bool (not c37))
(define-fun e39 () Bool (or e36 e38))
(define-fun e40 () Bool (and e21 e14 e24 e39))
(define-fun e42 ((c41 (_ BitVec 64))) (_ BitVec 64) (c1 c41))
(define-fun e43 ((c41 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e44 ((c41 (_ BitVec 64))) Bool (bvult (e42 c41) (e43 c41)))
(define-fun e45 ((c41 (_ BitVec 64))) (_ BitVec 64) (_ bv1 64))
(define-fun e46 ((c41 (_ BitVec 64))) (_ BitVec 64) (c7 (e42 c41)))
(define-fun e47 ((c41 (_ BitVec 64))) Bool (= (e45 c41) (e46 c41)))
(define-fun e48 ((c41 (_ BitVec 64))) Bool (and (e44 c41) (e47 c41)))
(define-fun e49 ((c41 (_ BitVec 64))) Bool (bvult c41 (e43 c41)))
(define-fun e50 ((c41 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(define-fun e51 ((c41 (_ BitVec 64))) (_ BitVec 64) (c7 c41))
(define-fun e52 ((c41 (_ BitVec 64))) Bool (= (e50 c41) (e51 c41)))
(define-fun e53 ((c41 (_ BitVec 64))) Bool (not (e52 c41)))
(define-fun e54 ((c41 (_ BitVec 64))) Bool (and (e49 c41) (e53 c41)))
(define-fun e55 ((c41 (_ BitVec 64))) Bool (not (e54 c41)))
(define-fun e56 ((c41 (_ BitVec 64))) Bool (or (e48 c41) (e55 c41)))
(define-fun e57 () Bool (forall ((c41 (_ BitVec 64))) (e56 c41)))
(define-fun e58 () Bool (and e40 e57))
(define-fun e59 () Bool (not e58))
(define-fun e60 () Bool (or e14 e59))
(define-fun e61 () Bool (not e60))
(assert e61)
(check-sat)
