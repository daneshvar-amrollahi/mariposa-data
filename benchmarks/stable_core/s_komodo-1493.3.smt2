(set-option :auto-config false)
(set-option :produce-unsat-cores false)
(set-option :smt.mbqi.max_iterations 10000000)
(set-option :smt.relevancy 0)
(declare-fun c0 () Bool)
(define-fun e1 () Bool (not c0))
(declare-fun c2 () (_ BitVec 64))
(define-fun e3 () (_ BitVec 64) (_ bv1024 64))
(define-fun e4 () Bool (bvult c2 e3))
(define-fun e5 () (_ BitVec 64) (_ bv2 64))
(declare-fun c6 () (_ BitVec 64))
(define-fun e7 () Bool (bvult c6 e3))
(define-fun e8 () (_ BitVec 64) (_ bv1 64))
(declare-fun c9 ((_ BitVec 64)) (_ BitVec 64))
(define-fun e10 () (_ BitVec 64) (c9 c6))
(define-fun e11 () Bool (= e8 e10))
(define-fun e12 () Bool (and e7 e11))
(declare-fun c13 () (_ BitVec 64))
(define-fun e14 () Bool (bvult c13 e3))
(define-fun e15 () (_ BitVec 64) (_ bv0 64))
(define-fun e16 () (_ BitVec 64) (c9 c13))
(define-fun e17 () Bool (= e15 e16))
(define-fun e18 () Bool (and e14 e17))
(declare-fun c19 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(define-fun e20 () (_ BitVec 64) (c19 c6 e5))
(define-fun e21 () Bool (= e15 e20))
(define-fun e22 () Bool (and e1 e12 e18 e21))
(define-fun e23 () Bool (= c13 c2))
(define-fun e24 () (_ BitVec 64) (c9 c2))
(define-fun e25 () (_ BitVec 64) (ite e23 e5 e24))
(define-fun e26 () Bool (not e12))
(define-fun e27 () Bool (not e14))
(define-fun e28 () Bool (not e18))
(define-fun e29 () Bool (not e21))
(define-fun e30 () Bool (and e18 e29))
(define-fun e31 () Bool (or e28 e30))
(define-fun e32 () Bool (and e14 e31))
(define-fun e33 () Bool (or e27 e32))
(define-fun e34 () Bool (and e12 e33))
(define-fun e35 () Bool (or e26 e34))
(define-fun e36 () Bool (and e1 e35))
(define-fun e37 () Bool (or c0 e36))
(define-fun e38 () (_ BitVec 64) (bvor (ite e22 e25 (_ bv0 64)) (ite e37 e24 (_ bv0 64))))
(define-fun e39 () Bool (= e5 e38))
(define-fun e40 () Bool (and e4 e39))
(define-fun e41 () Bool (or e1 e40))
(declare-fun c43 ((_ BitVec 64)) (_ BitVec 64))
(define-fun e44 ((c42 (_ BitVec 64))) (_ BitVec 64) (c43 c42))
(define-fun e45 ((c42 (_ BitVec 64))) Bool (= c42 (e44 c42)))
(define-fun e46 ((c42 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e47 ((c42 (_ BitVec 64))) Bool (bvult c42 (e46 c42)))
(define-fun e48 ((c42 (_ BitVec 64))) (_ BitVec 64) (_ bv1 64))
(define-fun e49 ((c42 (_ BitVec 64))) (_ BitVec 64) (c9 c42))
(define-fun e50 ((c42 (_ BitVec 64))) Bool (= (e48 c42) (e49 c42)))
(define-fun e51 ((c42 (_ BitVec 64))) Bool (and (e47 c42) (e50 c42)))
(define-fun e52 ((c42 (_ BitVec 64))) Bool (not (e51 c42)))
(define-fun e53 ((c42 (_ BitVec 64))) Bool (or (e45 c42) (e52 c42)))
(define-fun e54 () Bool (forall ((c42 (_ BitVec 64))) (e53 c42)))
(define-fun e55 ((c42 (_ BitVec 64))) Bool (bvult (e44 c42) (e46 c42)))
(define-fun e56 ((c42 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(define-fun e57 ((c42 (_ BitVec 64))) Bool (= (e56 c42) (e49 c42)))
(define-fun e58 ((c42 (_ BitVec 64))) Bool (not (e57 c42)))
(define-fun e59 ((c42 (_ BitVec 64))) Bool (and (e47 c42) (e58 c42)))
(define-fun e60 ((c42 (_ BitVec 64))) Bool (not (e59 c42)))
(define-fun e61 ((c42 (_ BitVec 64))) Bool (or (e55 c42) (e60 c42)))
(define-fun e62 () Bool (forall ((c42 (_ BitVec 64))) (e61 c42)))
(define-fun e63 () Bool (= e5 e24))
(define-fun e64 () Bool (and e4 e63))
(define-fun e65 () Bool (or e64 e1))
(declare-fun c66 ((_ BitVec 64)) (_ BitVec 64))
(define-fun e67 ((c42 (_ BitVec 64))) (_ BitVec 64) (c66 c42))
(define-fun e68 ((c42 (_ BitVec 64))) Bool (= (e56 c42) (e67 c42)))
(define-fun e69 ((c42 (_ BitVec 64))) Bool (and (e47 c42) (e52 c42)))
(define-fun e70 ((c42 (_ BitVec 64))) Bool (not (e69 c42)))
(define-fun e71 ((c42 (_ BitVec 64))) Bool (or (e68 c42) (e70 c42)))
(define-fun e72 () Bool (forall ((c42 (_ BitVec 64))) (e71 c42)))
(define-fun e73 ((c42 (_ BitVec 64))) (_ BitVec 64) (c19 c42 (e48 c42)))
(define-fun e74 ((c42 (_ BitVec 64))) Bool (= (e67 c42) (e73 c42)))
(define-fun e75 ((c42 (_ BitVec 64))) Bool (or (e52 c42) (e74 c42)))
(define-fun e76 () Bool (forall ((c42 (_ BitVec 64))) (e75 c42)))
(declare-fun c79 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(define-fun e80 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) (_ BitVec 64) (c79 c77 c78))
(define-fun e81 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e82 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (bvult (e80 c77 c78) (e81 c77 c78)))
(define-fun e83 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (bvult c77 (e81 c77 c78)))
(define-fun e84 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (bvult c78 (e81 c77 c78)))
(define-fun e85 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (and (e83 c77 c78) (e84 c77 c78)))
(define-fun e86 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (not (e85 c77 c78)))
(define-fun e87 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (or (e82 c77 c78) (e86 c77 c78)))
(define-fun e88 () Bool (forall ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) (e87 c77 c78)))
(declare-fun c90 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(define-fun e91 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) (_ BitVec 64) (c90 c77 c89))
(define-fun e92 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) (_ BitVec 64) (c79 c77 (e91 c77 c78 c89)))
(define-fun e93 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) Bool (= c89 (e92 c77 c78 c89)))
(define-fun e94 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) (_ BitVec 64) (c79 c77 c78))
(define-fun e95 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) (_ BitVec 64) (c90 c77 (e94 c77 c78 c89)))
(define-fun e96 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) Bool (= c78 (e95 c77 c78 c89)))
(define-fun e97 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) Bool (and (e93 c77 c78 c89) (e96 c77 c78 c89)))
(define-fun e98 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e99 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) Bool (bvult c77 (e98 c77 c78 c89)))
(define-fun e100 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) Bool (bvult c78 (e98 c77 c78 c89)))
(define-fun e101 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) Bool (bvult c89 (e98 c77 c78 c89)))
(define-fun e102 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) Bool (and (e99 c77 c78 c89) (e100 c77 c78 c89) (e101 c77 c78 c89)))
(define-fun e103 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) Bool (not (e102 c77 c78 c89)))
(define-fun e104 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) Bool (or (e97 c77 c78 c89) (e103 c77 c78 c89)))
(define-fun e105 () Bool (forall ((c77 (_ BitVec 64)) (c78 (_ BitVec 64)) (c89 (_ BitVec 64))) (e104 c77 c78 c89)))
(define-fun e106 ((c77 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(define-fun e107 ((c77 (_ BitVec 64))) (_ BitVec 64) (c79 c77 c77))
(define-fun e108 ((c77 (_ BitVec 64))) Bool (= (e106 c77) (e107 c77)))
(define-fun e109 ((c77 (_ BitVec 64))) (_ BitVec 64) (c90 c77 (e106 c77)))
(define-fun e110 ((c77 (_ BitVec 64))) Bool (= c77 (e109 c77)))
(define-fun e111 ((c77 (_ BitVec 64))) Bool (and (e108 c77) (e110 c77)))
(define-fun e112 ((c77 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e113 ((c77 (_ BitVec 64))) Bool (bvult c77 (e112 c77)))
(define-fun e114 ((c77 (_ BitVec 64))) (_ BitVec 64) (c43 c77))
(define-fun e115 ((c77 (_ BitVec 64))) Bool (= c77 (e114 c77)))
(define-fun e116 ((c77 (_ BitVec 64))) (_ BitVec 64) (c9 c77))
(define-fun e117 ((c77 (_ BitVec 64))) Bool (= (e106 c77) (e116 c77)))
(define-fun e118 ((c77 (_ BitVec 64))) Bool (and (e113 c77) (e117 c77)))
(define-fun e119 ((c77 (_ BitVec 64))) Bool (not (e118 c77)))
(define-fun e120 ((c77 (_ BitVec 64))) Bool (and (e115 c77) (e119 c77)))
(define-fun e121 ((c77 (_ BitVec 64))) Bool (and (e113 c77) (e120 c77)))
(define-fun e122 ((c77 (_ BitVec 64))) Bool (not (e121 c77)))
(define-fun e123 ((c77 (_ BitVec 64))) Bool (or (e111 c77) (e122 c77)))
(define-fun e124 () Bool (forall ((c77 (_ BitVec 64))) (e123 c77)))
(define-fun e125 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) (_ BitVec 64) (c43 c78))
(define-fun e126 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (= c77 (e125 c77 c78)))
(define-fun e127 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(define-fun e128 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) (_ BitVec 64) (c9 c78))
(define-fun e129 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (= (e127 c77 c78) (e128 c77 c78)))
(define-fun e130 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (and (e84 c77 c78) (e129 c77 c78)))
(define-fun e131 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (not (e130 c77 c78)))
(define-fun e132 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (and (e126 c77 c78) (e131 c77 c78)))
(define-fun e133 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) (_ BitVec 64) (c66 c77))
(define-fun e134 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (bvult (e80 c77 c78) (e133 c77 c78)))
(define-fun e135 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (and (=> (e132 c77 c78) (e134 c77 c78)) (=> (e134 c77 c78) (e132 c77 c78))))
(define-fun e136 ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) Bool (or (e86 c77 c78) (e135 c77 c78)))
(define-fun e137 () Bool (forall ((c77 (_ BitVec 64)) (c78 (_ BitVec 64))) (e136 c77 c78)))
(define-fun e138 ((c77 (_ BitVec 64))) (_ BitVec 64) (c66 c77))
(define-fun e139 ((c77 (_ BitVec 64))) Bool (bvule (e138 c77) (e112 c77)))
(define-fun e140 ((c77 (_ BitVec 64))) Bool (not (e113 c77)))
(define-fun e141 ((c77 (_ BitVec 64))) Bool (or (e139 c77) (e140 c77)))
(define-fun e142 () Bool (forall ((c77 (_ BitVec 64))) (e141 c77)))
(define-fun e143 () Bool (and e88 e105 e124 e137 e142))
(define-fun e144 () Bool (and e54 e62 e4 e65 e72 e76 e143))
(define-fun e145 () Bool (not e144))
(define-fun e146 () Bool (or e41 e145))
(define-fun e147 () Bool (not e146))
(assert e147)
(check-sat)
