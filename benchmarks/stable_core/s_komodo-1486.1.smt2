(set-option :auto-config false)
(set-option :produce-unsat-cores false)
(set-option :smt.mbqi.max_iterations 10000000)
(set-option :smt.relevancy 0)
(declare-fun c1 () Bool)
(define-fun e2 ((c0 (_ BitVec 64))) Bool (not c1))
(declare-fun c3 () (_ BitVec 64))
(declare-fun c4 () (_ BitVec 64))
(define-fun e5 ((c0 (_ BitVec 64))) Bool (= c3 c4))
(define-fun e6 ((c0 (_ BitVec 64))) Bool (not (e5 c0)))
(define-fun e7 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e8 ((c0 (_ BitVec 64))) Bool (bvult c3 (e7 c0)))
(define-fun e9 ((c0 (_ BitVec 64))) Bool (bvult c4 (e7 c0)))
(define-fun e10 ((c0 (_ BitVec 64))) Bool (and (e8 c0) (e9 c0)))
(define-fun e11 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(declare-fun c12 ((_ BitVec 64)) (_ BitVec 64))
(define-fun e13 ((c0 (_ BitVec 64))) (_ BitVec 64) (c12 c3))
(define-fun e14 ((c0 (_ BitVec 64))) Bool (= (e11 c0) (e13 c0)))
(define-fun e15 ((c0 (_ BitVec 64))) Bool (and (e8 c0) (e14 c0)))
(define-fun e16 ((c0 (_ BitVec 64))) (_ BitVec 64) (c12 c4))
(define-fun e17 ((c0 (_ BitVec 64))) Bool (= (e11 c0) (e16 c0)))
(define-fun e18 ((c0 (_ BitVec 64))) Bool (and (e9 c0) (e17 c0)))
(define-fun e19 ((c0 (_ BitVec 64))) Bool (and (e2 c0) (e6 c0) (e10 c0) (e15 c0) (e18 c0)))
(define-fun e20 ((c0 (_ BitVec 64))) Bool (= c4 c0))
(define-fun e21 ((c0 (_ BitVec 64))) Bool (= c3 c0))
(declare-fun c22 ((_ BitVec 64)) (_ BitVec 64))
(define-fun e23 ((c0 (_ BitVec 64))) (_ BitVec 64) (c22 c0))
(define-fun e24 ((c0 (_ BitVec 64))) (_ BitVec 64) (ite (e21 c0) c3 (e23 c0)))
(define-fun e25 ((c0 (_ BitVec 64))) (_ BitVec 64) (ite (e20 c0) c3 (e24 c0)))
(define-fun e26 ((c0 (_ BitVec 64))) Bool (not (e10 c0)))
(define-fun e27 ((c0 (_ BitVec 64))) Bool (and (e15 c0) (e18 c0)))
(define-fun e28 ((c0 (_ BitVec 64))) Bool (not (e27 c0)))
(define-fun e29 ((c0 (_ BitVec 64))) Bool (and (e10 c0) (e28 c0)))
(define-fun e30 ((c0 (_ BitVec 64))) Bool (or (e26 c0) (e29 c0)))
(define-fun e31 ((c0 (_ BitVec 64))) Bool (and (e6 c0) (e30 c0)))
(define-fun e32 ((c0 (_ BitVec 64))) Bool (or (e5 c0) (e31 c0)))
(define-fun e33 ((c0 (_ BitVec 64))) Bool (and (e2 c0) (e32 c0)))
(define-fun e34 ((c0 (_ BitVec 64))) Bool (or c1 (e33 c0)))
(define-fun e35 ((c0 (_ BitVec 64))) (_ BitVec 64) (bvor (ite (e19 c0) (e25 c0) (_ bv0 64)) (ite (e34 c0) (e23 c0) (_ bv0 64))))
(define-fun e36 ((c0 (_ BitVec 64))) Bool (= c0 (e35 c0)))
(define-fun e37 ((c0 (_ BitVec 64))) Bool (bvult c0 (e7 c0)))
(define-fun e38 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv1 64))
(define-fun e39 ((c0 (_ BitVec 64))) (_ BitVec 64) (_ bv3 64))
(define-fun e40 ((c0 (_ BitVec 64))) (_ BitVec 64) (c12 c0))
(define-fun e41 ((c0 (_ BitVec 64))) (_ BitVec 64) (ite (e21 c0) (e38 c0) (e40 c0)))
(define-fun e42 ((c0 (_ BitVec 64))) (_ BitVec 64) (ite (e20 c0) (e39 c0) (e41 c0)))
(define-fun e43 ((c0 (_ BitVec 64))) (_ BitVec 64) (bvor (ite (e19 c0) (e42 c0) (_ bv0 64)) (ite (e34 c0) (e40 c0) (_ bv0 64))))
(define-fun e44 ((c0 (_ BitVec 64))) Bool (= (e38 c0) (e43 c0)))
(define-fun e45 ((c0 (_ BitVec 64))) Bool (and (e37 c0) (e44 c0)))
(define-fun e46 ((c0 (_ BitVec 64))) Bool (not (e45 c0)))
(define-fun e47 ((c0 (_ BitVec 64))) Bool (or (e36 c0) (e46 c0)))
(define-fun e48 () Bool (forall ((c0 (_ BitVec 64))) (e47 c0)))
(define-fun e49 ((c0 (_ BitVec 64))) Bool (= c0 (e23 c0)))
(define-fun e50 ((c0 (_ BitVec 64))) Bool (= (e38 c0) (e40 c0)))
(define-fun e51 ((c0 (_ BitVec 64))) Bool (and (e37 c0) (e50 c0)))
(define-fun e52 ((c0 (_ BitVec 64))) Bool (not (e51 c0)))
(define-fun e53 ((c0 (_ BitVec 64))) Bool (or (e49 c0) (e52 c0)))
(define-fun e54 () Bool (forall ((c0 (_ BitVec 64))) (e53 c0)))
(define-fun e55 ((c0 (_ BitVec 64))) Bool (bvult (e23 c0) (e7 c0)))
(define-fun e56 ((c0 (_ BitVec 64))) Bool (= (e11 c0) (e40 c0)))
(define-fun e57 ((c0 (_ BitVec 64))) Bool (not (e56 c0)))
(define-fun e58 ((c0 (_ BitVec 64))) Bool (and (e37 c0) (e57 c0)))
(define-fun e59 ((c0 (_ BitVec 64))) Bool (not (e58 c0)))
(define-fun e60 ((c0 (_ BitVec 64))) Bool (or (e55 c0) (e59 c0)))
(define-fun e61 () Bool (forall ((c0 (_ BitVec 64))) (e60 c0)))
(declare-fun c62 () (_ BitVec 64))
(define-fun e63 () (_ BitVec 64) (_ bv1024 64))
(define-fun e64 () Bool (bvult c62 e63))
(define-fun e65 () (_ BitVec 64) (_ bv2 64))
(define-fun e66 () (_ BitVec 64) (c12 c62))
(define-fun e67 () Bool (= e65 e66))
(define-fun e68 () Bool (and e64 e67))
(declare-fun c69 () (_ BitVec 64))
(define-fun e70 () (_ BitVec 64) (c22 c62))
(define-fun e71 () Bool (= c69 e70))
(define-fun e72 () (_ BitVec 64) (_ bv1 64))
(declare-fun c73 ((_ BitVec 64) (_ BitVec 64)) (_ BitVec 64))
(define-fun e74 () (_ BitVec 64) (c73 c69 e65))
(define-fun e75 () Bool (= e72 e74))
(define-fun e76 () Bool (and e68 e71 e75))
(define-fun e77 () Bool (not c1))
(define-fun e78 () Bool (or e76 e77))
(define-fun e79 () Bool (and e54 e61 e64 e78))
(define-fun e81 ((c80 (_ BitVec 64))) (_ BitVec 64) (c22 c80))
(define-fun e82 ((c80 (_ BitVec 64))) (_ BitVec 64) (_ bv1024 64))
(define-fun e83 ((c80 (_ BitVec 64))) Bool (bvult (e81 c80) (e82 c80)))
(define-fun e84 ((c80 (_ BitVec 64))) (_ BitVec 64) (_ bv1 64))
(define-fun e85 ((c80 (_ BitVec 64))) (_ BitVec 64) (c12 (e81 c80)))
(define-fun e86 ((c80 (_ BitVec 64))) Bool (= (e84 c80) (e85 c80)))
(define-fun e87 ((c80 (_ BitVec 64))) Bool (and (e83 c80) (e86 c80)))
(define-fun e88 ((c80 (_ BitVec 64))) Bool (bvult c80 (e82 c80)))
(define-fun e89 ((c80 (_ BitVec 64))) (_ BitVec 64) (_ bv0 64))
(define-fun e90 ((c80 (_ BitVec 64))) (_ BitVec 64) (c12 c80))
(define-fun e91 ((c80 (_ BitVec 64))) Bool (= (e89 c80) (e90 c80)))
(define-fun e92 ((c80 (_ BitVec 64))) Bool (not (e91 c80)))
(define-fun e93 ((c80 (_ BitVec 64))) Bool (and (e88 c80) (e92 c80)))
(define-fun e94 ((c80 (_ BitVec 64))) Bool (not (e93 c80)))
(define-fun e95 ((c80 (_ BitVec 64))) Bool (or (e87 c80) (e94 c80)))
(define-fun e96 () Bool (forall ((c80 (_ BitVec 64))) (e95 c80)))
(define-fun e97 () Bool (and e79 e96))
(define-fun e98 () Bool (not e97))
(define-fun e99 () Bool (or e48 e98))
(define-fun e100 () Bool (not e99))
(assert e100)
(check-sat)
